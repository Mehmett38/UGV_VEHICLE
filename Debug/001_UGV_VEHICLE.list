
001_UGV_VEHICLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f278  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  0800f448  0800f448  0001f448  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f5a8  0800f5a8  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f5a8  0800f5a8  0001f5a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f5b0  0800f5b0  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f5b0  0800f5b0  0001f5b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f5b4  0800f5b4  0001f5b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  0800f5b8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005488  200000b0  0800f668  000200b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20005538  0800f668  00025538  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00027bfc  00000000  00000000  00020123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000675c  00000000  00000000  00047d1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ef8  00000000  00000000  0004e480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000017c7  00000000  00000000  00050378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00008908  00000000  00000000  00051b3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002daaf  00000000  00000000  0005a447  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e33f1  00000000  00000000  00087ef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008764  00000000  00000000  0016b2e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00173a4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b0 	.word	0x200000b0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f430 	.word	0x0800f430

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b4 	.word	0x200000b4
 800020c:	0800f430 	.word	0x0800f430

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2uiz>:
 8000b88:	004a      	lsls	r2, r1, #1
 8000b8a:	d211      	bcs.n	8000bb0 <__aeabi_d2uiz+0x28>
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d211      	bcs.n	8000bb6 <__aeabi_d2uiz+0x2e>
 8000b92:	d50d      	bpl.n	8000bb0 <__aeabi_d2uiz+0x28>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d40e      	bmi.n	8000bbc <__aeabi_d2uiz+0x34>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_d2uiz+0x3a>
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0000 	mov.w	r0, #0
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b970 	b.w	8000f60 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9e08      	ldr	r6, [sp, #32]
 8000c9e:	460d      	mov	r5, r1
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	460f      	mov	r7, r1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d14a      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4694      	mov	ip, r2
 8000cac:	d965      	bls.n	8000d7a <__udivmoddi4+0xe2>
 8000cae:	fab2 f382 	clz	r3, r2
 8000cb2:	b143      	cbz	r3, 8000cc6 <__udivmoddi4+0x2e>
 8000cb4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cb8:	f1c3 0220 	rsb	r2, r3, #32
 8000cbc:	409f      	lsls	r7, r3
 8000cbe:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc2:	4317      	orrs	r7, r2
 8000cc4:	409c      	lsls	r4, r3
 8000cc6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cca:	fa1f f58c 	uxth.w	r5, ip
 8000cce:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cd2:	0c22      	lsrs	r2, r4, #16
 8000cd4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cd8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cdc:	fb01 f005 	mul.w	r0, r1, r5
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	d90a      	bls.n	8000cfa <__udivmoddi4+0x62>
 8000ce4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ce8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cec:	f080 811c 	bcs.w	8000f28 <__udivmoddi4+0x290>
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	f240 8119 	bls.w	8000f28 <__udivmoddi4+0x290>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	4462      	add	r2, ip
 8000cfa:	1a12      	subs	r2, r2, r0
 8000cfc:	b2a4      	uxth	r4, r4
 8000cfe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d06:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0a:	fb00 f505 	mul.w	r5, r0, r5
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	d90a      	bls.n	8000d28 <__udivmoddi4+0x90>
 8000d12:	eb1c 0404 	adds.w	r4, ip, r4
 8000d16:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1a:	f080 8107 	bcs.w	8000f2c <__udivmoddi4+0x294>
 8000d1e:	42a5      	cmp	r5, r4
 8000d20:	f240 8104 	bls.w	8000f2c <__udivmoddi4+0x294>
 8000d24:	4464      	add	r4, ip
 8000d26:	3802      	subs	r0, #2
 8000d28:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d2c:	1b64      	subs	r4, r4, r5
 8000d2e:	2100      	movs	r1, #0
 8000d30:	b11e      	cbz	r6, 8000d3a <__udivmoddi4+0xa2>
 8000d32:	40dc      	lsrs	r4, r3
 8000d34:	2300      	movs	r3, #0
 8000d36:	e9c6 4300 	strd	r4, r3, [r6]
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0xbc>
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	f000 80ed 	beq.w	8000f22 <__udivmoddi4+0x28a>
 8000d48:	2100      	movs	r1, #0
 8000d4a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d54:	fab3 f183 	clz	r1, r3
 8000d58:	2900      	cmp	r1, #0
 8000d5a:	d149      	bne.n	8000df0 <__udivmoddi4+0x158>
 8000d5c:	42ab      	cmp	r3, r5
 8000d5e:	d302      	bcc.n	8000d66 <__udivmoddi4+0xce>
 8000d60:	4282      	cmp	r2, r0
 8000d62:	f200 80f8 	bhi.w	8000f56 <__udivmoddi4+0x2be>
 8000d66:	1a84      	subs	r4, r0, r2
 8000d68:	eb65 0203 	sbc.w	r2, r5, r3
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	4617      	mov	r7, r2
 8000d70:	2e00      	cmp	r6, #0
 8000d72:	d0e2      	beq.n	8000d3a <__udivmoddi4+0xa2>
 8000d74:	e9c6 4700 	strd	r4, r7, [r6]
 8000d78:	e7df      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d7a:	b902      	cbnz	r2, 8000d7e <__udivmoddi4+0xe6>
 8000d7c:	deff      	udf	#255	; 0xff
 8000d7e:	fab2 f382 	clz	r3, r2
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f040 8090 	bne.w	8000ea8 <__udivmoddi4+0x210>
 8000d88:	1a8a      	subs	r2, r1, r2
 8000d8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d8e:	fa1f fe8c 	uxth.w	lr, ip
 8000d92:	2101      	movs	r1, #1
 8000d94:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d98:	fb07 2015 	mls	r0, r7, r5, r2
 8000d9c:	0c22      	lsrs	r2, r4, #16
 8000d9e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000da2:	fb0e f005 	mul.w	r0, lr, r5
 8000da6:	4290      	cmp	r0, r2
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x124>
 8000daa:	eb1c 0202 	adds.w	r2, ip, r2
 8000dae:	f105 38ff 	add.w	r8, r5, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x122>
 8000db4:	4290      	cmp	r0, r2
 8000db6:	f200 80cb 	bhi.w	8000f50 <__udivmoddi4+0x2b8>
 8000dba:	4645      	mov	r5, r8
 8000dbc:	1a12      	subs	r2, r2, r0
 8000dbe:	b2a4      	uxth	r4, r4
 8000dc0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dc4:	fb07 2210 	mls	r2, r7, r0, r2
 8000dc8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dcc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd0:	45a6      	cmp	lr, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x14e>
 8000dd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ddc:	d202      	bcs.n	8000de4 <__udivmoddi4+0x14c>
 8000dde:	45a6      	cmp	lr, r4
 8000de0:	f200 80bb 	bhi.w	8000f5a <__udivmoddi4+0x2c2>
 8000de4:	4610      	mov	r0, r2
 8000de6:	eba4 040e 	sub.w	r4, r4, lr
 8000dea:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dee:	e79f      	b.n	8000d30 <__udivmoddi4+0x98>
 8000df0:	f1c1 0720 	rsb	r7, r1, #32
 8000df4:	408b      	lsls	r3, r1
 8000df6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dfa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dfe:	fa05 f401 	lsl.w	r4, r5, r1
 8000e02:	fa20 f307 	lsr.w	r3, r0, r7
 8000e06:	40fd      	lsrs	r5, r7
 8000e08:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e0c:	4323      	orrs	r3, r4
 8000e0e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e12:	fa1f fe8c 	uxth.w	lr, ip
 8000e16:	fb09 5518 	mls	r5, r9, r8, r5
 8000e1a:	0c1c      	lsrs	r4, r3, #16
 8000e1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e20:	fb08 f50e 	mul.w	r5, r8, lr
 8000e24:	42a5      	cmp	r5, r4
 8000e26:	fa02 f201 	lsl.w	r2, r2, r1
 8000e2a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e2e:	d90b      	bls.n	8000e48 <__udivmoddi4+0x1b0>
 8000e30:	eb1c 0404 	adds.w	r4, ip, r4
 8000e34:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e38:	f080 8088 	bcs.w	8000f4c <__udivmoddi4+0x2b4>
 8000e3c:	42a5      	cmp	r5, r4
 8000e3e:	f240 8085 	bls.w	8000f4c <__udivmoddi4+0x2b4>
 8000e42:	f1a8 0802 	sub.w	r8, r8, #2
 8000e46:	4464      	add	r4, ip
 8000e48:	1b64      	subs	r4, r4, r5
 8000e4a:	b29d      	uxth	r5, r3
 8000e4c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e50:	fb09 4413 	mls	r4, r9, r3, r4
 8000e54:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e58:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x1da>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e68:	d26c      	bcs.n	8000f44 <__udivmoddi4+0x2ac>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	d96a      	bls.n	8000f44 <__udivmoddi4+0x2ac>
 8000e6e:	3b02      	subs	r3, #2
 8000e70:	4464      	add	r4, ip
 8000e72:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e76:	fba3 9502 	umull	r9, r5, r3, r2
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	42ac      	cmp	r4, r5
 8000e80:	46c8      	mov	r8, r9
 8000e82:	46ae      	mov	lr, r5
 8000e84:	d356      	bcc.n	8000f34 <__udivmoddi4+0x29c>
 8000e86:	d053      	beq.n	8000f30 <__udivmoddi4+0x298>
 8000e88:	b156      	cbz	r6, 8000ea0 <__udivmoddi4+0x208>
 8000e8a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e8e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e92:	fa04 f707 	lsl.w	r7, r4, r7
 8000e96:	40ca      	lsrs	r2, r1
 8000e98:	40cc      	lsrs	r4, r1
 8000e9a:	4317      	orrs	r7, r2
 8000e9c:	e9c6 7400 	strd	r7, r4, [r6]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea8:	f1c3 0120 	rsb	r1, r3, #32
 8000eac:	fa02 fc03 	lsl.w	ip, r2, r3
 8000eb0:	fa20 f201 	lsr.w	r2, r0, r1
 8000eb4:	fa25 f101 	lsr.w	r1, r5, r1
 8000eb8:	409d      	lsls	r5, r3
 8000eba:	432a      	orrs	r2, r5
 8000ebc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec0:	fa1f fe8c 	uxth.w	lr, ip
 8000ec4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ec8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ed2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ed6:	428d      	cmp	r5, r1
 8000ed8:	fa04 f403 	lsl.w	r4, r4, r3
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x258>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ee6:	d22f      	bcs.n	8000f48 <__udivmoddi4+0x2b0>
 8000ee8:	428d      	cmp	r5, r1
 8000eea:	d92d      	bls.n	8000f48 <__udivmoddi4+0x2b0>
 8000eec:	3802      	subs	r0, #2
 8000eee:	4461      	add	r1, ip
 8000ef0:	1b49      	subs	r1, r1, r5
 8000ef2:	b292      	uxth	r2, r2
 8000ef4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ef8:	fb07 1115 	mls	r1, r7, r5, r1
 8000efc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f00:	fb05 f10e 	mul.w	r1, r5, lr
 8000f04:	4291      	cmp	r1, r2
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x282>
 8000f08:	eb1c 0202 	adds.w	r2, ip, r2
 8000f0c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f10:	d216      	bcs.n	8000f40 <__udivmoddi4+0x2a8>
 8000f12:	4291      	cmp	r1, r2
 8000f14:	d914      	bls.n	8000f40 <__udivmoddi4+0x2a8>
 8000f16:	3d02      	subs	r5, #2
 8000f18:	4462      	add	r2, ip
 8000f1a:	1a52      	subs	r2, r2, r1
 8000f1c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f20:	e738      	b.n	8000d94 <__udivmoddi4+0xfc>
 8000f22:	4631      	mov	r1, r6
 8000f24:	4630      	mov	r0, r6
 8000f26:	e708      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000f28:	4639      	mov	r1, r7
 8000f2a:	e6e6      	b.n	8000cfa <__udivmoddi4+0x62>
 8000f2c:	4610      	mov	r0, r2
 8000f2e:	e6fb      	b.n	8000d28 <__udivmoddi4+0x90>
 8000f30:	4548      	cmp	r0, r9
 8000f32:	d2a9      	bcs.n	8000e88 <__udivmoddi4+0x1f0>
 8000f34:	ebb9 0802 	subs.w	r8, r9, r2
 8000f38:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	e7a3      	b.n	8000e88 <__udivmoddi4+0x1f0>
 8000f40:	4645      	mov	r5, r8
 8000f42:	e7ea      	b.n	8000f1a <__udivmoddi4+0x282>
 8000f44:	462b      	mov	r3, r5
 8000f46:	e794      	b.n	8000e72 <__udivmoddi4+0x1da>
 8000f48:	4640      	mov	r0, r8
 8000f4a:	e7d1      	b.n	8000ef0 <__udivmoddi4+0x258>
 8000f4c:	46d0      	mov	r8, sl
 8000f4e:	e77b      	b.n	8000e48 <__udivmoddi4+0x1b0>
 8000f50:	3d02      	subs	r5, #2
 8000f52:	4462      	add	r2, ip
 8000f54:	e732      	b.n	8000dbc <__udivmoddi4+0x124>
 8000f56:	4608      	mov	r0, r1
 8000f58:	e70a      	b.n	8000d70 <__udivmoddi4+0xd8>
 8000f5a:	4464      	add	r4, ip
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	e742      	b.n	8000de6 <__udivmoddi4+0x14e>

08000f60 <__aeabi_idiv0>:
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08a      	sub	sp, #40	; 0x28
 8000f68:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]
 8000f76:	60da      	str	r2, [r3, #12]
 8000f78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	613b      	str	r3, [r7, #16]
 8000f7e:	4b46      	ldr	r3, [pc, #280]	; (8001098 <MX_GPIO_Init+0x134>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a45      	ldr	r2, [pc, #276]	; (8001098 <MX_GPIO_Init+0x134>)
 8000f84:	f043 0304 	orr.w	r3, r3, #4
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b43      	ldr	r3, [pc, #268]	; (8001098 <MX_GPIO_Init+0x134>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0304 	and.w	r3, r3, #4
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	4b3f      	ldr	r3, [pc, #252]	; (8001098 <MX_GPIO_Init+0x134>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a3e      	ldr	r2, [pc, #248]	; (8001098 <MX_GPIO_Init+0x134>)
 8000fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b3c      	ldr	r3, [pc, #240]	; (8001098 <MX_GPIO_Init+0x134>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	4b38      	ldr	r3, [pc, #224]	; (8001098 <MX_GPIO_Init+0x134>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a37      	ldr	r2, [pc, #220]	; (8001098 <MX_GPIO_Init+0x134>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b35      	ldr	r3, [pc, #212]	; (8001098 <MX_GPIO_Init+0x134>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	607b      	str	r3, [r7, #4]
 8000fd2:	4b31      	ldr	r3, [pc, #196]	; (8001098 <MX_GPIO_Init+0x134>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a30      	ldr	r2, [pc, #192]	; (8001098 <MX_GPIO_Init+0x134>)
 8000fd8:	f043 0302 	orr.w	r3, r3, #2
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b2e      	ldr	r3, [pc, #184]	; (8001098 <MX_GPIO_Init+0x134>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8000fea:	2201      	movs	r2, #1
 8000fec:	2101      	movs	r1, #1
 8000fee:	482b      	ldr	r0, [pc, #172]	; (800109c <MX_GPIO_Init+0x138>)
 8000ff0:	f001 fc3e 	bl	8002870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUZZER_Pin|COMPASS_VCC_Pin, GPIO_PIN_RESET);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f241 0110 	movw	r1, #4112	; 0x1010
 8000ffa:	4828      	ldr	r0, [pc, #160]	; (800109c <MX_GPIO_Init+0x138>)
 8000ffc:	f001 fc38 	bl	8002870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|LID_LED_Pin, GPIO_PIN_RESET);
 8001000:	2200      	movs	r2, #0
 8001002:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8001006:	4826      	ldr	r0, [pc, #152]	; (80010a0 <MX_GPIO_Init+0x13c>)
 8001008:	f001 fc32 	bl	8002870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800100c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001010:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001012:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001016:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	4619      	mov	r1, r3
 8001022:	481e      	ldr	r0, [pc, #120]	; (800109c <MX_GPIO_Init+0x138>)
 8001024:	f001 fa78 	bl	8002518 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NSS_Pin|BUZZER_Pin|COMPASS_VCC_Pin;
 8001028:	f241 0311 	movw	r3, #4113	; 0x1011
 800102c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102e:	2301      	movs	r3, #1
 8001030:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	2300      	movs	r3, #0
 8001038:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800103a:	f107 0314 	add.w	r3, r7, #20
 800103e:	4619      	mov	r1, r3
 8001040:	4816      	ldr	r0, [pc, #88]	; (800109c <MX_GPIO_Init+0x138>)
 8001042:	f001 fa69 	bl	8002518 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8001046:	2302      	movs	r3, #2
 8001048:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800104a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800104e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	4619      	mov	r1, r3
 800105a:	4810      	ldr	r0, [pc, #64]	; (800109c <MX_GPIO_Init+0x138>)
 800105c:	f001 fa5c 	bl	8002518 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_Pin|LID_LED_Pin;
 8001060:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001064:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001066:	2301      	movs	r3, #1
 8001068:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106e:	2300      	movs	r3, #0
 8001070:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001072:	f107 0314 	add.w	r3, r7, #20
 8001076:	4619      	mov	r1, r3
 8001078:	4809      	ldr	r0, [pc, #36]	; (80010a0 <MX_GPIO_Init+0x13c>)
 800107a:	f001 fa4d 	bl	8002518 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	2105      	movs	r1, #5
 8001082:	2007      	movs	r0, #7
 8001084:	f001 f98c 	bl	80023a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001088:	2007      	movs	r0, #7
 800108a:	f001 f9a5 	bl	80023d8 <HAL_NVIC_EnableIRQ>

}
 800108e:	bf00      	nop
 8001090:	3728      	adds	r7, #40	; 0x28
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40023800 	.word	0x40023800
 800109c:	40020800 	.word	0x40020800
 80010a0:	40020000 	.word	0x40020000

080010a4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == DIO0_Pin)
 80010ae:	88fb      	ldrh	r3, [r7, #6]
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d101      	bne.n	80010b8 <HAL_GPIO_EXTI_Callback+0x14>
	{
		dioIrqCallback();
 80010b4:	f00c f9b6 	bl	800d424 <dioIrqCallback>
	}
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010c4:	4b12      	ldr	r3, [pc, #72]	; (8001110 <MX_I2C1_Init+0x50>)
 80010c6:	4a13      	ldr	r2, [pc, #76]	; (8001114 <MX_I2C1_Init+0x54>)
 80010c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010ca:	4b11      	ldr	r3, [pc, #68]	; (8001110 <MX_I2C1_Init+0x50>)
 80010cc:	4a12      	ldr	r2, [pc, #72]	; (8001118 <MX_I2C1_Init+0x58>)
 80010ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010d0:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <MX_I2C1_Init+0x50>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010d6:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <MX_I2C1_Init+0x50>)
 80010d8:	2200      	movs	r2, #0
 80010da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010dc:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <MX_I2C1_Init+0x50>)
 80010de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010e4:	4b0a      	ldr	r3, [pc, #40]	; (8001110 <MX_I2C1_Init+0x50>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010ea:	4b09      	ldr	r3, [pc, #36]	; (8001110 <MX_I2C1_Init+0x50>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010f0:	4b07      	ldr	r3, [pc, #28]	; (8001110 <MX_I2C1_Init+0x50>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <MX_I2C1_Init+0x50>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010fc:	4804      	ldr	r0, [pc, #16]	; (8001110 <MX_I2C1_Init+0x50>)
 80010fe:	f001 fbe9 	bl	80028d4 <HAL_I2C_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001108:	f000 f914 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}
 8001110:	200000cc 	.word	0x200000cc
 8001114:	40005400 	.word	0x40005400
 8001118:	000186a0 	.word	0x000186a0

0800111c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	; 0x28
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a19      	ldr	r2, [pc, #100]	; (80011a0 <HAL_I2C_MspInit+0x84>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d12c      	bne.n	8001198 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <HAL_I2C_MspInit+0x88>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a17      	ldr	r2, [pc, #92]	; (80011a4 <HAL_I2C_MspInit+0x88>)
 8001148:	f043 0302 	orr.w	r3, r3, #2
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <HAL_I2C_MspInit+0x88>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800115a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800115e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001160:	2312      	movs	r3, #18
 8001162:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001168:	2303      	movs	r3, #3
 800116a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800116c:	2304      	movs	r3, #4
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	4619      	mov	r1, r3
 8001176:	480c      	ldr	r0, [pc, #48]	; (80011a8 <HAL_I2C_MspInit+0x8c>)
 8001178:	f001 f9ce 	bl	8002518 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800117c:	2300      	movs	r3, #0
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <HAL_I2C_MspInit+0x88>)
 8001182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001184:	4a07      	ldr	r2, [pc, #28]	; (80011a4 <HAL_I2C_MspInit+0x88>)
 8001186:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800118a:	6413      	str	r3, [r2, #64]	; 0x40
 800118c:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <HAL_I2C_MspInit+0x88>)
 800118e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001190:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001198:	bf00      	nop
 800119a:	3728      	adds	r7, #40	; 0x28
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40005400 	.word	0x40005400
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40020400 	.word	0x40020400

080011ac <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80011b0:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <MX_IWDG_Init+0x2c>)
 80011b2:	4a0a      	ldr	r2, [pc, #40]	; (80011dc <MX_IWDG_Init+0x30>)
 80011b4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_8;
 80011b6:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <MX_IWDG_Init+0x2c>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 2000;
 80011bc:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <MX_IWDG_Init+0x2c>)
 80011be:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80011c2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80011c4:	4804      	ldr	r0, [pc, #16]	; (80011d8 <MX_IWDG_Init+0x2c>)
 80011c6:	f002 fce5 	bl	8003b94 <HAL_IWDG_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80011d0:	f000 f8b0 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000120 	.word	0x20000120
 80011dc:	40003000 	.word	0x40003000

080011e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011e4:	f000 ffbe 	bl	8002164 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011e8:	f000 f81e 	bl	8001228 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ec:	f7ff feba 	bl	8000f64 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011f0:	f000 fea2 	bl	8001f38 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80011f4:	f000 fb68 	bl	80018c8 <MX_TIM2_Init>
  MX_SPI1_Init();
 80011f8:	f000 f8a2 	bl	8001340 <MX_SPI1_Init>
  MX_TIM12_Init();
 80011fc:	f000 fcac 	bl	8001b58 <MX_TIM12_Init>
  MX_I2C1_Init();
 8001200:	f7ff ff5e 	bl	80010c0 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001204:	f000 fad2 	bl	80017ac <MX_TIM1_Init>
  MX_TIM3_Init();
 8001208:	f000 fbd2 	bl	80019b0 <MX_TIM3_Init>
  MX_TIM4_Init();
 800120c:	f000 fc4c 	bl	8001aa8 <MX_TIM4_Init>
  MX_SPI2_Init();
 8001210:	f000 f8cc 	bl	80013ac <MX_SPI2_Init>
  MX_USART3_UART_Init();
 8001214:	f000 feba 	bl	8001f8c <MX_USART3_UART_Init>
  MX_IWDG_Init();
 8001218:	f7ff ffc8 	bl	80011ac <MX_IWDG_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  ugvMain();
 800121c:	f00b ffa0 	bl	800d160 <ugvMain>
	  break;
 8001220:	bf00      	nop
 8001222:	2300      	movs	r3, #0

  }
  /* USER CODE END 3 */
}
 8001224:	4618      	mov	r0, r3
 8001226:	bd80      	pop	{r7, pc}

08001228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b094      	sub	sp, #80	; 0x50
 800122c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800122e:	f107 031c 	add.w	r3, r7, #28
 8001232:	2234      	movs	r2, #52	; 0x34
 8001234:	2100      	movs	r1, #0
 8001236:	4618      	mov	r0, r3
 8001238:	f00c fa68 	bl	800d70c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800123c:	f107 0308 	add.w	r3, r7, #8
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800124c:	2300      	movs	r3, #0
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	4b2d      	ldr	r3, [pc, #180]	; (8001308 <SystemClock_Config+0xe0>)
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	4a2c      	ldr	r2, [pc, #176]	; (8001308 <SystemClock_Config+0xe0>)
 8001256:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800125a:	6413      	str	r3, [r2, #64]	; 0x40
 800125c:	4b2a      	ldr	r3, [pc, #168]	; (8001308 <SystemClock_Config+0xe0>)
 800125e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001268:	2300      	movs	r3, #0
 800126a:	603b      	str	r3, [r7, #0]
 800126c:	4b27      	ldr	r3, [pc, #156]	; (800130c <SystemClock_Config+0xe4>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a26      	ldr	r2, [pc, #152]	; (800130c <SystemClock_Config+0xe4>)
 8001272:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001276:	6013      	str	r3, [r2, #0]
 8001278:	4b24      	ldr	r3, [pc, #144]	; (800130c <SystemClock_Config+0xe4>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001280:	603b      	str	r3, [r7, #0]
 8001282:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001284:	230a      	movs	r3, #10
 8001286:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001288:	2301      	movs	r3, #1
 800128a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800128c:	2310      	movs	r3, #16
 800128e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001290:	2301      	movs	r3, #1
 8001292:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001294:	2302      	movs	r3, #2
 8001296:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001298:	2300      	movs	r3, #0
 800129a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800129c:	2308      	movs	r3, #8
 800129e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80012a0:	23b4      	movs	r3, #180	; 0xb4
 80012a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012a4:	2302      	movs	r3, #2
 80012a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80012a8:	2302      	movs	r3, #2
 80012aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80012ac:	2302      	movs	r3, #2
 80012ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b0:	f107 031c 	add.w	r3, r7, #28
 80012b4:	4618      	mov	r0, r3
 80012b6:	f003 f88b 	bl	80043d0 <HAL_RCC_OscConfig>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80012c0:	f000 f838 	bl	8001334 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012c4:	f002 fcb8 	bl	8003c38 <HAL_PWREx_EnableOverDrive>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80012ce:	f000 f831 	bl	8001334 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012d2:	230f      	movs	r3, #15
 80012d4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012d6:	2302      	movs	r3, #2
 80012d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012ea:	f107 0308 	add.w	r3, r7, #8
 80012ee:	2105      	movs	r1, #5
 80012f0:	4618      	mov	r0, r3
 80012f2:	f002 fcf1 	bl	8003cd8 <HAL_RCC_ClockConfig>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80012fc:	f000 f81a 	bl	8001334 <Error_Handler>
  }
}
 8001300:	bf00      	nop
 8001302:	3750      	adds	r7, #80	; 0x50
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40023800 	.word	0x40023800
 800130c:	40007000 	.word	0x40007000

08001310 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a04      	ldr	r2, [pc, #16]	; (8001330 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d101      	bne.n	8001326 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001322:	f000 ff41 	bl	80021a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40001000 	.word	0x40001000

08001334 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001338:	b672      	cpsid	i
}
 800133a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800133c:	e7fe      	b.n	800133c <Error_Handler+0x8>
	...

08001340 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001344:	4b17      	ldr	r3, [pc, #92]	; (80013a4 <MX_SPI1_Init+0x64>)
 8001346:	4a18      	ldr	r2, [pc, #96]	; (80013a8 <MX_SPI1_Init+0x68>)
 8001348:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800134a:	4b16      	ldr	r3, [pc, #88]	; (80013a4 <MX_SPI1_Init+0x64>)
 800134c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001350:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001352:	4b14      	ldr	r3, [pc, #80]	; (80013a4 <MX_SPI1_Init+0x64>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001358:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <MX_SPI1_Init+0x64>)
 800135a:	2200      	movs	r2, #0
 800135c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800135e:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <MX_SPI1_Init+0x64>)
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001364:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <MX_SPI1_Init+0x64>)
 8001366:	2200      	movs	r2, #0
 8001368:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800136a:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <MX_SPI1_Init+0x64>)
 800136c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001370:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001372:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <MX_SPI1_Init+0x64>)
 8001374:	2218      	movs	r2, #24
 8001376:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001378:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <MX_SPI1_Init+0x64>)
 800137a:	2200      	movs	r2, #0
 800137c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800137e:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <MX_SPI1_Init+0x64>)
 8001380:	2200      	movs	r2, #0
 8001382:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001384:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <MX_SPI1_Init+0x64>)
 8001386:	2200      	movs	r2, #0
 8001388:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800138a:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <MX_SPI1_Init+0x64>)
 800138c:	220a      	movs	r2, #10
 800138e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001390:	4804      	ldr	r0, [pc, #16]	; (80013a4 <MX_SPI1_Init+0x64>)
 8001392:	f003 fabb 	bl	800490c <HAL_SPI_Init>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800139c:	f7ff ffca 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	2000012c 	.word	0x2000012c
 80013a8:	40013000 	.word	0x40013000

080013ac <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80013b0:	4b17      	ldr	r3, [pc, #92]	; (8001410 <MX_SPI2_Init+0x64>)
 80013b2:	4a18      	ldr	r2, [pc, #96]	; (8001414 <MX_SPI2_Init+0x68>)
 80013b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80013b6:	4b16      	ldr	r3, [pc, #88]	; (8001410 <MX_SPI2_Init+0x64>)
 80013b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013bc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80013be:	4b14      	ldr	r3, [pc, #80]	; (8001410 <MX_SPI2_Init+0x64>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80013c4:	4b12      	ldr	r3, [pc, #72]	; (8001410 <MX_SPI2_Init+0x64>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013ca:	4b11      	ldr	r3, [pc, #68]	; (8001410 <MX_SPI2_Init+0x64>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013d0:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <MX_SPI2_Init+0x64>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80013d6:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <MX_SPI2_Init+0x64>)
 80013d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013dc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80013de:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <MX_SPI2_Init+0x64>)
 80013e0:	2218      	movs	r2, #24
 80013e2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013e4:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <MX_SPI2_Init+0x64>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <MX_SPI2_Init+0x64>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013f0:	4b07      	ldr	r3, [pc, #28]	; (8001410 <MX_SPI2_Init+0x64>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <MX_SPI2_Init+0x64>)
 80013f8:	220a      	movs	r2, #10
 80013fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80013fc:	4804      	ldr	r0, [pc, #16]	; (8001410 <MX_SPI2_Init+0x64>)
 80013fe:	f003 fa85 	bl	800490c <HAL_SPI_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001408:	f7ff ff94 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000184 	.word	0x20000184
 8001414:	40003800 	.word	0x40003800

08001418 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08c      	sub	sp, #48	; 0x30
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001420:	f107 031c 	add.w	r3, r7, #28
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a41      	ldr	r2, [pc, #260]	; (800153c <HAL_SPI_MspInit+0x124>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d12c      	bne.n	8001494 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	61bb      	str	r3, [r7, #24]
 800143e:	4b40      	ldr	r3, [pc, #256]	; (8001540 <HAL_SPI_MspInit+0x128>)
 8001440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001442:	4a3f      	ldr	r2, [pc, #252]	; (8001540 <HAL_SPI_MspInit+0x128>)
 8001444:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001448:	6453      	str	r3, [r2, #68]	; 0x44
 800144a:	4b3d      	ldr	r3, [pc, #244]	; (8001540 <HAL_SPI_MspInit+0x128>)
 800144c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001452:	61bb      	str	r3, [r7, #24]
 8001454:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]
 800145a:	4b39      	ldr	r3, [pc, #228]	; (8001540 <HAL_SPI_MspInit+0x128>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	4a38      	ldr	r2, [pc, #224]	; (8001540 <HAL_SPI_MspInit+0x128>)
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	6313      	str	r3, [r2, #48]	; 0x30
 8001466:	4b36      	ldr	r3, [pc, #216]	; (8001540 <HAL_SPI_MspInit+0x128>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	617b      	str	r3, [r7, #20]
 8001470:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001472:	23e0      	movs	r3, #224	; 0xe0
 8001474:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001476:	2302      	movs	r3, #2
 8001478:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147e:	2303      	movs	r3, #3
 8001480:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001482:	2305      	movs	r3, #5
 8001484:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001486:	f107 031c 	add.w	r3, r7, #28
 800148a:	4619      	mov	r1, r3
 800148c:	482d      	ldr	r0, [pc, #180]	; (8001544 <HAL_SPI_MspInit+0x12c>)
 800148e:	f001 f843 	bl	8002518 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001492:	e04f      	b.n	8001534 <HAL_SPI_MspInit+0x11c>
  else if(spiHandle->Instance==SPI2)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a2b      	ldr	r2, [pc, #172]	; (8001548 <HAL_SPI_MspInit+0x130>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d14a      	bne.n	8001534 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	4b27      	ldr	r3, [pc, #156]	; (8001540 <HAL_SPI_MspInit+0x128>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	4a26      	ldr	r2, [pc, #152]	; (8001540 <HAL_SPI_MspInit+0x128>)
 80014a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ac:	6413      	str	r3, [r2, #64]	; 0x40
 80014ae:	4b24      	ldr	r3, [pc, #144]	; (8001540 <HAL_SPI_MspInit+0x128>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	4b20      	ldr	r3, [pc, #128]	; (8001540 <HAL_SPI_MspInit+0x128>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4a1f      	ldr	r2, [pc, #124]	; (8001540 <HAL_SPI_MspInit+0x128>)
 80014c4:	f043 0304 	orr.w	r3, r3, #4
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4b1d      	ldr	r3, [pc, #116]	; (8001540 <HAL_SPI_MspInit+0x128>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0304 	and.w	r3, r3, #4
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	4b19      	ldr	r3, [pc, #100]	; (8001540 <HAL_SPI_MspInit+0x128>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	4a18      	ldr	r2, [pc, #96]	; (8001540 <HAL_SPI_MspInit+0x128>)
 80014e0:	f043 0302 	orr.w	r3, r3, #2
 80014e4:	6313      	str	r3, [r2, #48]	; 0x30
 80014e6:	4b16      	ldr	r3, [pc, #88]	; (8001540 <HAL_SPI_MspInit+0x128>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	60bb      	str	r3, [r7, #8]
 80014f0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014f2:	230c      	movs	r3, #12
 80014f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f6:	2302      	movs	r3, #2
 80014f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fe:	2303      	movs	r3, #3
 8001500:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001502:	2305      	movs	r3, #5
 8001504:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001506:	f107 031c 	add.w	r3, r7, #28
 800150a:	4619      	mov	r1, r3
 800150c:	480f      	ldr	r0, [pc, #60]	; (800154c <HAL_SPI_MspInit+0x134>)
 800150e:	f001 f803 	bl	8002518 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001512:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001516:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001518:	2302      	movs	r3, #2
 800151a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151c:	2300      	movs	r3, #0
 800151e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001520:	2303      	movs	r3, #3
 8001522:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001524:	2305      	movs	r3, #5
 8001526:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001528:	f107 031c 	add.w	r3, r7, #28
 800152c:	4619      	mov	r1, r3
 800152e:	4808      	ldr	r0, [pc, #32]	; (8001550 <HAL_SPI_MspInit+0x138>)
 8001530:	f000 fff2 	bl	8002518 <HAL_GPIO_Init>
}
 8001534:	bf00      	nop
 8001536:	3730      	adds	r7, #48	; 0x30
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40013000 	.word	0x40013000
 8001540:	40023800 	.word	0x40023800
 8001544:	40020000 	.word	0x40020000
 8001548:	40003800 	.word	0x40003800
 800154c:	40020800 	.word	0x40020800
 8001550:	40020400 	.word	0x40020400

08001554 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	607b      	str	r3, [r7, #4]
 800155e:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <HAL_MspInit+0x54>)
 8001560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001562:	4a11      	ldr	r2, [pc, #68]	; (80015a8 <HAL_MspInit+0x54>)
 8001564:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001568:	6453      	str	r3, [r2, #68]	; 0x44
 800156a:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <HAL_MspInit+0x54>)
 800156c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	603b      	str	r3, [r7, #0]
 800157a:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <HAL_MspInit+0x54>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	4a0a      	ldr	r2, [pc, #40]	; (80015a8 <HAL_MspInit+0x54>)
 8001580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001584:	6413      	str	r3, [r2, #64]	; 0x40
 8001586:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <HAL_MspInit+0x54>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158e:	603b      	str	r3, [r7, #0]
 8001590:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001592:	2200      	movs	r2, #0
 8001594:	210f      	movs	r1, #15
 8001596:	f06f 0001 	mvn.w	r0, #1
 800159a:	f000 ff01 	bl	80023a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40023800 	.word	0x40023800

080015ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08e      	sub	sp, #56	; 0x38
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80015b4:	2300      	movs	r3, #0
 80015b6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80015b8:	2300      	movs	r3, #0
 80015ba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80015bc:	2300      	movs	r3, #0
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	4b33      	ldr	r3, [pc, #204]	; (8001690 <HAL_InitTick+0xe4>)
 80015c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c4:	4a32      	ldr	r2, [pc, #200]	; (8001690 <HAL_InitTick+0xe4>)
 80015c6:	f043 0310 	orr.w	r3, r3, #16
 80015ca:	6413      	str	r3, [r2, #64]	; 0x40
 80015cc:	4b30      	ldr	r3, [pc, #192]	; (8001690 <HAL_InitTick+0xe4>)
 80015ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d0:	f003 0310 	and.w	r3, r3, #16
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015d8:	f107 0210 	add.w	r2, r7, #16
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	4611      	mov	r1, r2
 80015e2:	4618      	mov	r0, r3
 80015e4:	f002 fc92 	bl	8003f0c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80015e8:	6a3b      	ldr	r3, [r7, #32]
 80015ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80015ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d103      	bne.n	80015fa <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015f2:	f002 fc63 	bl	8003ebc <HAL_RCC_GetPCLK1Freq>
 80015f6:	6378      	str	r0, [r7, #52]	; 0x34
 80015f8:	e004      	b.n	8001604 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80015fa:	f002 fc5f 	bl	8003ebc <HAL_RCC_GetPCLK1Freq>
 80015fe:	4603      	mov	r3, r0
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001606:	4a23      	ldr	r2, [pc, #140]	; (8001694 <HAL_InitTick+0xe8>)
 8001608:	fba2 2303 	umull	r2, r3, r2, r3
 800160c:	0c9b      	lsrs	r3, r3, #18
 800160e:	3b01      	subs	r3, #1
 8001610:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001612:	4b21      	ldr	r3, [pc, #132]	; (8001698 <HAL_InitTick+0xec>)
 8001614:	4a21      	ldr	r2, [pc, #132]	; (800169c <HAL_InitTick+0xf0>)
 8001616:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001618:	4b1f      	ldr	r3, [pc, #124]	; (8001698 <HAL_InitTick+0xec>)
 800161a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800161e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001620:	4a1d      	ldr	r2, [pc, #116]	; (8001698 <HAL_InitTick+0xec>)
 8001622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001624:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001626:	4b1c      	ldr	r3, [pc, #112]	; (8001698 <HAL_InitTick+0xec>)
 8001628:	2200      	movs	r2, #0
 800162a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800162c:	4b1a      	ldr	r3, [pc, #104]	; (8001698 <HAL_InitTick+0xec>)
 800162e:	2200      	movs	r2, #0
 8001630:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001632:	4b19      	ldr	r3, [pc, #100]	; (8001698 <HAL_InitTick+0xec>)
 8001634:	2200      	movs	r2, #0
 8001636:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001638:	4817      	ldr	r0, [pc, #92]	; (8001698 <HAL_InitTick+0xec>)
 800163a:	f003 fdcd 	bl	80051d8 <HAL_TIM_Base_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001644:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001648:	2b00      	cmp	r3, #0
 800164a:	d11b      	bne.n	8001684 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800164c:	4812      	ldr	r0, [pc, #72]	; (8001698 <HAL_InitTick+0xec>)
 800164e:	f003 fe1d 	bl	800528c <HAL_TIM_Base_Start_IT>
 8001652:	4603      	mov	r3, r0
 8001654:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001658:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800165c:	2b00      	cmp	r3, #0
 800165e:	d111      	bne.n	8001684 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001660:	2036      	movs	r0, #54	; 0x36
 8001662:	f000 feb9 	bl	80023d8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2b0f      	cmp	r3, #15
 800166a:	d808      	bhi.n	800167e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800166c:	2200      	movs	r2, #0
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	2036      	movs	r0, #54	; 0x36
 8001672:	f000 fe95 	bl	80023a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001676:	4a0a      	ldr	r2, [pc, #40]	; (80016a0 <HAL_InitTick+0xf4>)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6013      	str	r3, [r2, #0]
 800167c:	e002      	b.n	8001684 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001684:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001688:	4618      	mov	r0, r3
 800168a:	3738      	adds	r7, #56	; 0x38
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40023800 	.word	0x40023800
 8001694:	431bde83 	.word	0x431bde83
 8001698:	200001dc 	.word	0x200001dc
 800169c:	40001000 	.word	0x40001000
 80016a0:	20000004 	.word	0x20000004

080016a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016a8:	e7fe      	b.n	80016a8 <NMI_Handler+0x4>

080016aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ae:	e7fe      	b.n	80016ae <HardFault_Handler+0x4>

080016b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b4:	e7fe      	b.n	80016b4 <MemManage_Handler+0x4>

080016b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ba:	e7fe      	b.n	80016ba <BusFault_Handler+0x4>

080016bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c0:	e7fe      	b.n	80016c0 <UsageFault_Handler+0x4>

080016c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 80016d4:	2002      	movs	r0, #2
 80016d6:	f001 f8e5 	bl	80028a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
	...

080016e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016e4:	4802      	ldr	r0, [pc, #8]	; (80016f0 <TIM2_IRQHandler+0x10>)
 80016e6:	f004 f8d1 	bl	800588c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20000270 	.word	0x20000270

080016f4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80016f8:	4802      	ldr	r0, [pc, #8]	; (8001704 <USART3_IRQHandler+0x10>)
 80016fa:	f005 f87b 	bl	80067f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	200003d8 	.word	0x200003d8

08001708 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800170c:	4802      	ldr	r0, [pc, #8]	; (8001718 <TIM6_DAC_IRQHandler+0x10>)
 800170e:	f004 f8bd 	bl	800588c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	200001dc 	.word	0x200001dc

0800171c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001724:	4a14      	ldr	r2, [pc, #80]	; (8001778 <_sbrk+0x5c>)
 8001726:	4b15      	ldr	r3, [pc, #84]	; (800177c <_sbrk+0x60>)
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001730:	4b13      	ldr	r3, [pc, #76]	; (8001780 <_sbrk+0x64>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d102      	bne.n	800173e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001738:	4b11      	ldr	r3, [pc, #68]	; (8001780 <_sbrk+0x64>)
 800173a:	4a12      	ldr	r2, [pc, #72]	; (8001784 <_sbrk+0x68>)
 800173c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800173e:	4b10      	ldr	r3, [pc, #64]	; (8001780 <_sbrk+0x64>)
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4413      	add	r3, r2
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	429a      	cmp	r2, r3
 800174a:	d207      	bcs.n	800175c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800174c:	f00c f84e 	bl	800d7ec <__errno>
 8001750:	4603      	mov	r3, r0
 8001752:	220c      	movs	r2, #12
 8001754:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001756:	f04f 33ff 	mov.w	r3, #4294967295
 800175a:	e009      	b.n	8001770 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800175c:	4b08      	ldr	r3, [pc, #32]	; (8001780 <_sbrk+0x64>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001762:	4b07      	ldr	r3, [pc, #28]	; (8001780 <_sbrk+0x64>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4413      	add	r3, r2
 800176a:	4a05      	ldr	r2, [pc, #20]	; (8001780 <_sbrk+0x64>)
 800176c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800176e:	68fb      	ldr	r3, [r7, #12]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3718      	adds	r7, #24
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20020000 	.word	0x20020000
 800177c:	00000400 	.word	0x00000400
 8001780:	20000224 	.word	0x20000224
 8001784:	20005538 	.word	0x20005538

08001788 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <SystemInit+0x20>)
 800178e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001792:	4a05      	ldr	r2, [pc, #20]	; (80017a8 <SystemInit+0x20>)
 8001794:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001798:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b092      	sub	sp, #72	; 0x48
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
 80017cc:	615a      	str	r2, [r3, #20]
 80017ce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017d0:	1d3b      	adds	r3, r7, #4
 80017d2:	2220      	movs	r2, #32
 80017d4:	2100      	movs	r1, #0
 80017d6:	4618      	mov	r0, r3
 80017d8:	f00b ff98 	bl	800d70c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017dc:	4b38      	ldr	r3, [pc, #224]	; (80018c0 <MX_TIM1_Init+0x114>)
 80017de:	4a39      	ldr	r2, [pc, #228]	; (80018c4 <MX_TIM1_Init+0x118>)
 80017e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180 - 1;
 80017e2:	4b37      	ldr	r3, [pc, #220]	; (80018c0 <MX_TIM1_Init+0x114>)
 80017e4:	22b3      	movs	r2, #179	; 0xb3
 80017e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e8:	4b35      	ldr	r3, [pc, #212]	; (80018c0 <MX_TIM1_Init+0x114>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 80017ee:	4b34      	ldr	r3, [pc, #208]	; (80018c0 <MX_TIM1_Init+0x114>)
 80017f0:	2264      	movs	r2, #100	; 0x64
 80017f2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017f4:	4b32      	ldr	r3, [pc, #200]	; (80018c0 <MX_TIM1_Init+0x114>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017fa:	4b31      	ldr	r3, [pc, #196]	; (80018c0 <MX_TIM1_Init+0x114>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001800:	4b2f      	ldr	r3, [pc, #188]	; (80018c0 <MX_TIM1_Init+0x114>)
 8001802:	2200      	movs	r2, #0
 8001804:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001806:	482e      	ldr	r0, [pc, #184]	; (80018c0 <MX_TIM1_Init+0x114>)
 8001808:	f003 fdb0 	bl	800536c <HAL_TIM_PWM_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8001812:	f7ff fd8f 	bl	8001334 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001816:	2300      	movs	r3, #0
 8001818:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800181a:	2300      	movs	r3, #0
 800181c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800181e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001822:	4619      	mov	r1, r3
 8001824:	4826      	ldr	r0, [pc, #152]	; (80018c0 <MX_TIM1_Init+0x114>)
 8001826:	f004 fe8d 	bl	8006544 <HAL_TIMEx_MasterConfigSynchronization>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8001830:	f7ff fd80 	bl	8001334 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001834:	2360      	movs	r3, #96	; 0x60
 8001836:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001838:	2300      	movs	r3, #0
 800183a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800183c:	2300      	movs	r3, #0
 800183e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001840:	2300      	movs	r3, #0
 8001842:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001844:	2300      	movs	r3, #0
 8001846:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001848:	2300      	movs	r3, #0
 800184a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800184c:	2300      	movs	r3, #0
 800184e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001850:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001854:	2200      	movs	r2, #0
 8001856:	4619      	mov	r1, r3
 8001858:	4819      	ldr	r0, [pc, #100]	; (80018c0 <MX_TIM1_Init+0x114>)
 800185a:	f004 f9a3 	bl	8005ba4 <HAL_TIM_PWM_ConfigChannel>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8001864:	f7ff fd66 	bl	8001334 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001868:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800186c:	2204      	movs	r2, #4
 800186e:	4619      	mov	r1, r3
 8001870:	4813      	ldr	r0, [pc, #76]	; (80018c0 <MX_TIM1_Init+0x114>)
 8001872:	f004 f997 	bl	8005ba4 <HAL_TIM_PWM_ConfigChannel>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 800187c:	f7ff fd5a 	bl	8001334 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001880:	2300      	movs	r3, #0
 8001882:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001884:	2300      	movs	r3, #0
 8001886:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001888:	2300      	movs	r3, #0
 800188a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001894:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001898:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800189a:	2300      	movs	r3, #0
 800189c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800189e:	1d3b      	adds	r3, r7, #4
 80018a0:	4619      	mov	r1, r3
 80018a2:	4807      	ldr	r0, [pc, #28]	; (80018c0 <MX_TIM1_Init+0x114>)
 80018a4:	f004 feca 	bl	800663c <HAL_TIMEx_ConfigBreakDeadTime>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80018ae:	f7ff fd41 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018b2:	4803      	ldr	r0, [pc, #12]	; (80018c0 <MX_TIM1_Init+0x114>)
 80018b4:	f000 fa8e 	bl	8001dd4 <HAL_TIM_MspPostInit>

}
 80018b8:	bf00      	nop
 80018ba:	3748      	adds	r7, #72	; 0x48
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20000228 	.word	0x20000228
 80018c4:	40010000 	.word	0x40010000

080018c8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ce:	f107 0310 	add.w	r3, r7, #16
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80018d8:	463b      	mov	r3, r7
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	609a      	str	r2, [r3, #8]
 80018e2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018e4:	4b31      	ldr	r3, [pc, #196]	; (80019ac <MX_TIM2_Init+0xe4>)
 80018e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90 - 1;
 80018ec:	4b2f      	ldr	r3, [pc, #188]	; (80019ac <MX_TIM2_Init+0xe4>)
 80018ee:	2259      	movs	r2, #89	; 0x59
 80018f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f2:	4b2e      	ldr	r3, [pc, #184]	; (80019ac <MX_TIM2_Init+0xe4>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80018f8:	4b2c      	ldr	r3, [pc, #176]	; (80019ac <MX_TIM2_Init+0xe4>)
 80018fa:	f04f 32ff 	mov.w	r2, #4294967295
 80018fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001900:	4b2a      	ldr	r3, [pc, #168]	; (80019ac <MX_TIM2_Init+0xe4>)
 8001902:	2200      	movs	r2, #0
 8001904:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001906:	4b29      	ldr	r3, [pc, #164]	; (80019ac <MX_TIM2_Init+0xe4>)
 8001908:	2200      	movs	r2, #0
 800190a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800190c:	4827      	ldr	r0, [pc, #156]	; (80019ac <MX_TIM2_Init+0xe4>)
 800190e:	f003 fe45 	bl	800559c <HAL_TIM_IC_Init>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001918:	f7ff fd0c 	bl	8001334 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800191c:	2300      	movs	r3, #0
 800191e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001924:	f107 0310 	add.w	r3, r7, #16
 8001928:	4619      	mov	r1, r3
 800192a:	4820      	ldr	r0, [pc, #128]	; (80019ac <MX_TIM2_Init+0xe4>)
 800192c:	f004 fe0a 	bl	8006544 <HAL_TIMEx_MasterConfigSynchronization>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001936:	f7ff fcfd 	bl	8001334 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800193a:	230a      	movs	r3, #10
 800193c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800193e:	2301      	movs	r3, #1
 8001940:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001942:	2300      	movs	r3, #0
 8001944:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001946:	2300      	movs	r3, #0
 8001948:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800194a:	463b      	mov	r3, r7
 800194c:	2200      	movs	r2, #0
 800194e:	4619      	mov	r1, r3
 8001950:	4816      	ldr	r0, [pc, #88]	; (80019ac <MX_TIM2_Init+0xe4>)
 8001952:	f004 f88b 	bl	8005a6c <HAL_TIM_IC_ConfigChannel>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800195c:	f7ff fcea 	bl	8001334 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001960:	463b      	mov	r3, r7
 8001962:	2204      	movs	r2, #4
 8001964:	4619      	mov	r1, r3
 8001966:	4811      	ldr	r0, [pc, #68]	; (80019ac <MX_TIM2_Init+0xe4>)
 8001968:	f004 f880 	bl	8005a6c <HAL_TIM_IC_ConfigChannel>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8001972:	f7ff fcdf 	bl	8001334 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001976:	463b      	mov	r3, r7
 8001978:	2208      	movs	r2, #8
 800197a:	4619      	mov	r1, r3
 800197c:	480b      	ldr	r0, [pc, #44]	; (80019ac <MX_TIM2_Init+0xe4>)
 800197e:	f004 f875 	bl	8005a6c <HAL_TIM_IC_ConfigChannel>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM2_Init+0xc4>
  {
    Error_Handler();
 8001988:	f7ff fcd4 	bl	8001334 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800198c:	463b      	mov	r3, r7
 800198e:	220c      	movs	r2, #12
 8001990:	4619      	mov	r1, r3
 8001992:	4806      	ldr	r0, [pc, #24]	; (80019ac <MX_TIM2_Init+0xe4>)
 8001994:	f004 f86a 	bl	8005a6c <HAL_TIM_IC_ConfigChannel>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800199e:	f7ff fcc9 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019a2:	bf00      	nop
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000270 	.word	0x20000270

080019b0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08e      	sub	sp, #56	; 0x38
 80019b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019c0:	f107 0314 	add.w	r3, r7, #20
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
 80019ce:	611a      	str	r2, [r3, #16]
 80019d0:	615a      	str	r2, [r3, #20]
 80019d2:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80019d4:	1d3b      	adds	r3, r7, #4
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]
 80019dc:	609a      	str	r2, [r3, #8]
 80019de:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019e0:	4b2f      	ldr	r3, [pc, #188]	; (8001aa0 <MX_TIM3_Init+0xf0>)
 80019e2:	4a30      	ldr	r2, [pc, #192]	; (8001aa4 <MX_TIM3_Init+0xf4>)
 80019e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 180 - 1;
 80019e6:	4b2e      	ldr	r3, [pc, #184]	; (8001aa0 <MX_TIM3_Init+0xf0>)
 80019e8:	22b3      	movs	r2, #179	; 0xb3
 80019ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ec:	4b2c      	ldr	r3, [pc, #176]	; (8001aa0 <MX_TIM3_Init+0xf0>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80019f2:	4b2b      	ldr	r3, [pc, #172]	; (8001aa0 <MX_TIM3_Init+0xf0>)
 80019f4:	2264      	movs	r2, #100	; 0x64
 80019f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f8:	4b29      	ldr	r3, [pc, #164]	; (8001aa0 <MX_TIM3_Init+0xf0>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019fe:	4b28      	ldr	r3, [pc, #160]	; (8001aa0 <MX_TIM3_Init+0xf0>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a04:	4826      	ldr	r0, [pc, #152]	; (8001aa0 <MX_TIM3_Init+0xf0>)
 8001a06:	f003 fcb1 	bl	800536c <HAL_TIM_PWM_Init>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001a10:	f7ff fc90 	bl	8001334 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001a14:	4822      	ldr	r0, [pc, #136]	; (8001aa0 <MX_TIM3_Init+0xf0>)
 8001a16:	f003 fdc1 	bl	800559c <HAL_TIM_IC_Init>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8001a20:	f7ff fc88 	bl	8001334 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a24:	2300      	movs	r3, #0
 8001a26:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a30:	4619      	mov	r1, r3
 8001a32:	481b      	ldr	r0, [pc, #108]	; (8001aa0 <MX_TIM3_Init+0xf0>)
 8001a34:	f004 fd86 	bl	8006544 <HAL_TIMEx_MasterConfigSynchronization>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001a3e:	f7ff fc79 	bl	8001334 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a42:	2360      	movs	r3, #96	; 0x60
 8001a44:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 0;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a52:	f107 0314 	add.w	r3, r7, #20
 8001a56:	2200      	movs	r2, #0
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4811      	ldr	r0, [pc, #68]	; (8001aa0 <MX_TIM3_Init+0xf0>)
 8001a5c:	f004 f8a2 	bl	8005ba4 <HAL_TIM_PWM_ConfigChannel>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8001a66:	f7ff fc65 	bl	8001334 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001a72:	2300      	movs	r3, #0
 8001a74:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001a7a:	1d3b      	adds	r3, r7, #4
 8001a7c:	2204      	movs	r2, #4
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4807      	ldr	r0, [pc, #28]	; (8001aa0 <MX_TIM3_Init+0xf0>)
 8001a82:	f003 fff3 	bl	8005a6c <HAL_TIM_IC_ConfigChannel>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8001a8c:	f7ff fc52 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a90:	4803      	ldr	r0, [pc, #12]	; (8001aa0 <MX_TIM3_Init+0xf0>)
 8001a92:	f000 f99f 	bl	8001dd4 <HAL_TIM_MspPostInit>

}
 8001a96:	bf00      	nop
 8001a98:	3738      	adds	r7, #56	; 0x38
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	200002b8 	.word	0x200002b8
 8001aa4:	40000400 	.word	0x40000400

08001aa8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08a      	sub	sp, #40	; 0x28
 8001aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aae:	f107 0320 	add.w	r3, r7, #32
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ab8:	1d3b      	adds	r3, r7, #4
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	605a      	str	r2, [r3, #4]
 8001ac0:	609a      	str	r2, [r3, #8]
 8001ac2:	60da      	str	r2, [r3, #12]
 8001ac4:	611a      	str	r2, [r3, #16]
 8001ac6:	615a      	str	r2, [r3, #20]
 8001ac8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001aca:	4b21      	ldr	r3, [pc, #132]	; (8001b50 <MX_TIM4_Init+0xa8>)
 8001acc:	4a21      	ldr	r2, [pc, #132]	; (8001b54 <MX_TIM4_Init+0xac>)
 8001ace:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 180 - 1;
 8001ad0:	4b1f      	ldr	r3, [pc, #124]	; (8001b50 <MX_TIM4_Init+0xa8>)
 8001ad2:	22b3      	movs	r2, #179	; 0xb3
 8001ad4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ad6:	4b1e      	ldr	r3, [pc, #120]	; (8001b50 <MX_TIM4_Init+0xa8>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8001adc:	4b1c      	ldr	r3, [pc, #112]	; (8001b50 <MX_TIM4_Init+0xa8>)
 8001ade:	2264      	movs	r2, #100	; 0x64
 8001ae0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ae2:	4b1b      	ldr	r3, [pc, #108]	; (8001b50 <MX_TIM4_Init+0xa8>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ae8:	4b19      	ldr	r3, [pc, #100]	; (8001b50 <MX_TIM4_Init+0xa8>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001aee:	4818      	ldr	r0, [pc, #96]	; (8001b50 <MX_TIM4_Init+0xa8>)
 8001af0:	f003 fc3c 	bl	800536c <HAL_TIM_PWM_Init>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8001afa:	f7ff fc1b 	bl	8001334 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001afe:	2300      	movs	r3, #0
 8001b00:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b02:	2300      	movs	r3, #0
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b06:	f107 0320 	add.w	r3, r7, #32
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4810      	ldr	r0, [pc, #64]	; (8001b50 <MX_TIM4_Init+0xa8>)
 8001b0e:	f004 fd19 	bl	8006544 <HAL_TIMEx_MasterConfigSynchronization>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8001b18:	f7ff fc0c 	bl	8001334 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b1c:	2360      	movs	r3, #96	; 0x60
 8001b1e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b24:	2300      	movs	r3, #0
 8001b26:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b2c:	1d3b      	adds	r3, r7, #4
 8001b2e:	2200      	movs	r2, #0
 8001b30:	4619      	mov	r1, r3
 8001b32:	4807      	ldr	r0, [pc, #28]	; (8001b50 <MX_TIM4_Init+0xa8>)
 8001b34:	f004 f836 	bl	8005ba4 <HAL_TIM_PWM_ConfigChannel>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001b3e:	f7ff fbf9 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001b42:	4803      	ldr	r0, [pc, #12]	; (8001b50 <MX_TIM4_Init+0xa8>)
 8001b44:	f000 f946 	bl	8001dd4 <HAL_TIM_MspPostInit>

}
 8001b48:	bf00      	nop
 8001b4a:	3728      	adds	r7, #40	; 0x28
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	20000300 	.word	0x20000300
 8001b54:	40000800 	.word	0x40000800

08001b58 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b088      	sub	sp, #32
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b5e:	1d3b      	adds	r3, r7, #4
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	611a      	str	r2, [r3, #16]
 8001b6c:	615a      	str	r2, [r3, #20]
 8001b6e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001b70:	4b1a      	ldr	r3, [pc, #104]	; (8001bdc <MX_TIM12_Init+0x84>)
 8001b72:	4a1b      	ldr	r2, [pc, #108]	; (8001be0 <MX_TIM12_Init+0x88>)
 8001b74:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 1800-1;
 8001b76:	4b19      	ldr	r3, [pc, #100]	; (8001bdc <MX_TIM12_Init+0x84>)
 8001b78:	f240 7207 	movw	r2, #1799	; 0x707
 8001b7c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b7e:	4b17      	ldr	r3, [pc, #92]	; (8001bdc <MX_TIM12_Init+0x84>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000-1;
 8001b84:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <MX_TIM12_Init+0x84>)
 8001b86:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b8a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b8c:	4b13      	ldr	r3, [pc, #76]	; (8001bdc <MX_TIM12_Init+0x84>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b92:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <MX_TIM12_Init+0x84>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001b98:	4810      	ldr	r0, [pc, #64]	; (8001bdc <MX_TIM12_Init+0x84>)
 8001b9a:	f003 fbe7 	bl	800536c <HAL_TIM_PWM_Init>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_TIM12_Init+0x50>
  {
    Error_Handler();
 8001ba4:	f7ff fbc6 	bl	8001334 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ba8:	2360      	movs	r3, #96	; 0x60
 8001baa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bb8:	1d3b      	adds	r3, r7, #4
 8001bba:	2200      	movs	r2, #0
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4807      	ldr	r0, [pc, #28]	; (8001bdc <MX_TIM12_Init+0x84>)
 8001bc0:	f003 fff0 	bl	8005ba4 <HAL_TIM_PWM_ConfigChannel>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_TIM12_Init+0x76>
  {
    Error_Handler();
 8001bca:	f7ff fbb3 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001bce:	4803      	ldr	r0, [pc, #12]	; (8001bdc <MX_TIM12_Init+0x84>)
 8001bd0:	f000 f900 	bl	8001dd4 <HAL_TIM_MspPostInit>

}
 8001bd4:	bf00      	nop
 8001bd6:	3720      	adds	r7, #32
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20000348 	.word	0x20000348
 8001be0:	40001800 	.word	0x40001800

08001be4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b08c      	sub	sp, #48	; 0x30
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bec:	f107 031c 	add.w	r3, r7, #28
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM1)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a37      	ldr	r2, [pc, #220]	; (8001ce0 <HAL_TIM_PWM_MspInit+0xfc>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d10e      	bne.n	8001c24 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	61bb      	str	r3, [r7, #24]
 8001c0a:	4b36      	ldr	r3, [pc, #216]	; (8001ce4 <HAL_TIM_PWM_MspInit+0x100>)
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0e:	4a35      	ldr	r2, [pc, #212]	; (8001ce4 <HAL_TIM_PWM_MspInit+0x100>)
 8001c10:	f043 0301 	orr.w	r3, r3, #1
 8001c14:	6453      	str	r3, [r2, #68]	; 0x44
 8001c16:	4b33      	ldr	r3, [pc, #204]	; (8001ce4 <HAL_TIM_PWM_MspInit+0x100>)
 8001c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	61bb      	str	r3, [r7, #24]
 8001c20:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8001c22:	e058      	b.n	8001cd6 <HAL_TIM_PWM_MspInit+0xf2>
  else if(tim_pwmHandle->Instance==TIM3)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a2f      	ldr	r2, [pc, #188]	; (8001ce8 <HAL_TIM_PWM_MspInit+0x104>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d12c      	bne.n	8001c88 <HAL_TIM_PWM_MspInit+0xa4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]
 8001c32:	4b2c      	ldr	r3, [pc, #176]	; (8001ce4 <HAL_TIM_PWM_MspInit+0x100>)
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	4a2b      	ldr	r2, [pc, #172]	; (8001ce4 <HAL_TIM_PWM_MspInit+0x100>)
 8001c38:	f043 0302 	orr.w	r3, r3, #2
 8001c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c3e:	4b29      	ldr	r3, [pc, #164]	; (8001ce4 <HAL_TIM_PWM_MspInit+0x100>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	617b      	str	r3, [r7, #20]
 8001c48:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	613b      	str	r3, [r7, #16]
 8001c4e:	4b25      	ldr	r3, [pc, #148]	; (8001ce4 <HAL_TIM_PWM_MspInit+0x100>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	4a24      	ldr	r2, [pc, #144]	; (8001ce4 <HAL_TIM_PWM_MspInit+0x100>)
 8001c54:	f043 0302 	orr.w	r3, r3, #2
 8001c58:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5a:	4b22      	ldr	r3, [pc, #136]	; (8001ce4 <HAL_TIM_PWM_MspInit+0x100>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	613b      	str	r3, [r7, #16]
 8001c64:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c66:	2320      	movs	r3, #32
 8001c68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c72:	2300      	movs	r3, #0
 8001c74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c76:	2302      	movs	r3, #2
 8001c78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c7a:	f107 031c 	add.w	r3, r7, #28
 8001c7e:	4619      	mov	r1, r3
 8001c80:	481a      	ldr	r0, [pc, #104]	; (8001cec <HAL_TIM_PWM_MspInit+0x108>)
 8001c82:	f000 fc49 	bl	8002518 <HAL_GPIO_Init>
}
 8001c86:	e026      	b.n	8001cd6 <HAL_TIM_PWM_MspInit+0xf2>
  else if(tim_pwmHandle->Instance==TIM4)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a18      	ldr	r2, [pc, #96]	; (8001cf0 <HAL_TIM_PWM_MspInit+0x10c>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d10e      	bne.n	8001cb0 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	4b13      	ldr	r3, [pc, #76]	; (8001ce4 <HAL_TIM_PWM_MspInit+0x100>)
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	4a12      	ldr	r2, [pc, #72]	; (8001ce4 <HAL_TIM_PWM_MspInit+0x100>)
 8001c9c:	f043 0304 	orr.w	r3, r3, #4
 8001ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca2:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <HAL_TIM_PWM_MspInit+0x100>)
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	f003 0304 	and.w	r3, r3, #4
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	68fb      	ldr	r3, [r7, #12]
}
 8001cae:	e012      	b.n	8001cd6 <HAL_TIM_PWM_MspInit+0xf2>
  else if(tim_pwmHandle->Instance==TIM12)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a0f      	ldr	r2, [pc, #60]	; (8001cf4 <HAL_TIM_PWM_MspInit+0x110>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d10d      	bne.n	8001cd6 <HAL_TIM_PWM_MspInit+0xf2>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60bb      	str	r3, [r7, #8]
 8001cbe:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <HAL_TIM_PWM_MspInit+0x100>)
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	4a08      	ldr	r2, [pc, #32]	; (8001ce4 <HAL_TIM_PWM_MspInit+0x100>)
 8001cc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cca:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <HAL_TIM_PWM_MspInit+0x100>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cd2:	60bb      	str	r3, [r7, #8]
 8001cd4:	68bb      	ldr	r3, [r7, #8]
}
 8001cd6:	bf00      	nop
 8001cd8:	3730      	adds	r7, #48	; 0x30
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40010000 	.word	0x40010000
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	40000400 	.word	0x40000400
 8001cec:	40020400 	.word	0x40020400
 8001cf0:	40000800 	.word	0x40000800
 8001cf4:	40001800 	.word	0x40001800

08001cf8 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08a      	sub	sp, #40	; 0x28
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d18:	d152      	bne.n	8001dc0 <HAL_TIM_IC_MspInit+0xc8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	4b2a      	ldr	r3, [pc, #168]	; (8001dc8 <HAL_TIM_IC_MspInit+0xd0>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	4a29      	ldr	r2, [pc, #164]	; (8001dc8 <HAL_TIM_IC_MspInit+0xd0>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	6413      	str	r3, [r2, #64]	; 0x40
 8001d2a:	4b27      	ldr	r3, [pc, #156]	; (8001dc8 <HAL_TIM_IC_MspInit+0xd0>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	4b23      	ldr	r3, [pc, #140]	; (8001dc8 <HAL_TIM_IC_MspInit+0xd0>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	4a22      	ldr	r2, [pc, #136]	; (8001dc8 <HAL_TIM_IC_MspInit+0xd0>)
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	6313      	str	r3, [r2, #48]	; 0x30
 8001d46:	4b20      	ldr	r3, [pc, #128]	; (8001dc8 <HAL_TIM_IC_MspInit+0xd0>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	60bb      	str	r3, [r7, #8]
 8001d56:	4b1c      	ldr	r3, [pc, #112]	; (8001dc8 <HAL_TIM_IC_MspInit+0xd0>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	4a1b      	ldr	r2, [pc, #108]	; (8001dc8 <HAL_TIM_IC_MspInit+0xd0>)
 8001d5c:	f043 0302 	orr.w	r3, r3, #2
 8001d60:	6313      	str	r3, [r2, #48]	; 0x30
 8001d62:	4b19      	ldr	r3, [pc, #100]	; (8001dc8 <HAL_TIM_IC_MspInit+0xd0>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	60bb      	str	r3, [r7, #8]
 8001d6c:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB2     ------> TIM2_CH4
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d72:	2302      	movs	r3, #2
 8001d74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d76:	2300      	movs	r3, #0
 8001d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d82:	f107 0314 	add.w	r3, r7, #20
 8001d86:	4619      	mov	r1, r3
 8001d88:	4810      	ldr	r0, [pc, #64]	; (8001dcc <HAL_TIM_IC_MspInit+0xd4>)
 8001d8a:	f000 fbc5 	bl	8002518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 8001d8e:	f240 4304 	movw	r3, #1028	; 0x404
 8001d92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d94:	2302      	movs	r3, #2
 8001d96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001da0:	2301      	movs	r3, #1
 8001da2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	4619      	mov	r1, r3
 8001daa:	4809      	ldr	r0, [pc, #36]	; (8001dd0 <HAL_TIM_IC_MspInit+0xd8>)
 8001dac:	f000 fbb4 	bl	8002518 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001db0:	2200      	movs	r2, #0
 8001db2:	2105      	movs	r1, #5
 8001db4:	201c      	movs	r0, #28
 8001db6:	f000 faf3 	bl	80023a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001dba:	201c      	movs	r0, #28
 8001dbc:	f000 fb0c 	bl	80023d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001dc0:	bf00      	nop
 8001dc2:	3728      	adds	r7, #40	; 0x28
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	40020000 	.word	0x40020000
 8001dd0:	40020400 	.word	0x40020400

08001dd4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08c      	sub	sp, #48	; 0x30
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ddc:	f107 031c 	add.w	r3, r7, #28
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a49      	ldr	r2, [pc, #292]	; (8001f18 <HAL_TIM_MspPostInit+0x144>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d11f      	bne.n	8001e36 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	61bb      	str	r3, [r7, #24]
 8001dfa:	4b48      	ldr	r3, [pc, #288]	; (8001f1c <HAL_TIM_MspPostInit+0x148>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	4a47      	ldr	r2, [pc, #284]	; (8001f1c <HAL_TIM_MspPostInit+0x148>)
 8001e00:	f043 0301 	orr.w	r3, r3, #1
 8001e04:	6313      	str	r3, [r2, #48]	; 0x30
 8001e06:	4b45      	ldr	r3, [pc, #276]	; (8001f1c <HAL_TIM_MspPostInit+0x148>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	61bb      	str	r3, [r7, #24]
 8001e10:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e12:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e20:	2300      	movs	r3, #0
 8001e22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e24:	2301      	movs	r3, #1
 8001e26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e28:	f107 031c 	add.w	r3, r7, #28
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	483c      	ldr	r0, [pc, #240]	; (8001f20 <HAL_TIM_MspPostInit+0x14c>)
 8001e30:	f000 fb72 	bl	8002518 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001e34:	e06b      	b.n	8001f0e <HAL_TIM_MspPostInit+0x13a>
  else if(timHandle->Instance==TIM3)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a3a      	ldr	r2, [pc, #232]	; (8001f24 <HAL_TIM_MspPostInit+0x150>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d11e      	bne.n	8001e7e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e40:	2300      	movs	r3, #0
 8001e42:	617b      	str	r3, [r7, #20]
 8001e44:	4b35      	ldr	r3, [pc, #212]	; (8001f1c <HAL_TIM_MspPostInit+0x148>)
 8001e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e48:	4a34      	ldr	r2, [pc, #208]	; (8001f1c <HAL_TIM_MspPostInit+0x148>)
 8001e4a:	f043 0304 	orr.w	r3, r3, #4
 8001e4e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e50:	4b32      	ldr	r3, [pc, #200]	; (8001f1c <HAL_TIM_MspPostInit+0x148>)
 8001e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	617b      	str	r3, [r7, #20]
 8001e5a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e5c:	2340      	movs	r3, #64	; 0x40
 8001e5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e60:	2302      	movs	r3, #2
 8001e62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e70:	f107 031c 	add.w	r3, r7, #28
 8001e74:	4619      	mov	r1, r3
 8001e76:	482c      	ldr	r0, [pc, #176]	; (8001f28 <HAL_TIM_MspPostInit+0x154>)
 8001e78:	f000 fb4e 	bl	8002518 <HAL_GPIO_Init>
}
 8001e7c:	e047      	b.n	8001f0e <HAL_TIM_MspPostInit+0x13a>
  else if(timHandle->Instance==TIM4)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a2a      	ldr	r2, [pc, #168]	; (8001f2c <HAL_TIM_MspPostInit+0x158>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d11e      	bne.n	8001ec6 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e88:	2300      	movs	r3, #0
 8001e8a:	613b      	str	r3, [r7, #16]
 8001e8c:	4b23      	ldr	r3, [pc, #140]	; (8001f1c <HAL_TIM_MspPostInit+0x148>)
 8001e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e90:	4a22      	ldr	r2, [pc, #136]	; (8001f1c <HAL_TIM_MspPostInit+0x148>)
 8001e92:	f043 0302 	orr.w	r3, r3, #2
 8001e96:	6313      	str	r3, [r2, #48]	; 0x30
 8001e98:	4b20      	ldr	r3, [pc, #128]	; (8001f1c <HAL_TIM_MspPostInit+0x148>)
 8001e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	613b      	str	r3, [r7, #16]
 8001ea2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ea4:	2340      	movs	r3, #64	; 0x40
 8001ea6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb8:	f107 031c 	add.w	r3, r7, #28
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	481c      	ldr	r0, [pc, #112]	; (8001f30 <HAL_TIM_MspPostInit+0x15c>)
 8001ec0:	f000 fb2a 	bl	8002518 <HAL_GPIO_Init>
}
 8001ec4:	e023      	b.n	8001f0e <HAL_TIM_MspPostInit+0x13a>
  else if(timHandle->Instance==TIM12)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a1a      	ldr	r2, [pc, #104]	; (8001f34 <HAL_TIM_MspPostInit+0x160>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d11e      	bne.n	8001f0e <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	4b11      	ldr	r3, [pc, #68]	; (8001f1c <HAL_TIM_MspPostInit+0x148>)
 8001ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed8:	4a10      	ldr	r2, [pc, #64]	; (8001f1c <HAL_TIM_MspPostInit+0x148>)
 8001eda:	f043 0302 	orr.w	r3, r3, #2
 8001ede:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee0:	4b0e      	ldr	r3, [pc, #56]	; (8001f1c <HAL_TIM_MspPostInit+0x148>)
 8001ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001eec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ef0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efa:	2300      	movs	r3, #0
 8001efc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001efe:	2309      	movs	r3, #9
 8001f00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f02:	f107 031c 	add.w	r3, r7, #28
 8001f06:	4619      	mov	r1, r3
 8001f08:	4809      	ldr	r0, [pc, #36]	; (8001f30 <HAL_TIM_MspPostInit+0x15c>)
 8001f0a:	f000 fb05 	bl	8002518 <HAL_GPIO_Init>
}
 8001f0e:	bf00      	nop
 8001f10:	3730      	adds	r7, #48	; 0x30
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40010000 	.word	0x40010000
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40020000 	.word	0x40020000
 8001f24:	40000400 	.word	0x40000400
 8001f28:	40020800 	.word	0x40020800
 8001f2c:	40000800 	.word	0x40000800
 8001f30:	40020400 	.word	0x40020400
 8001f34:	40001800 	.word	0x40001800

08001f38 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f3c:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <MX_USART2_UART_Init+0x4c>)
 8001f3e:	4a12      	ldr	r2, [pc, #72]	; (8001f88 <MX_USART2_UART_Init+0x50>)
 8001f40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f42:	4b10      	ldr	r3, [pc, #64]	; (8001f84 <MX_USART2_UART_Init+0x4c>)
 8001f44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f4a:	4b0e      	ldr	r3, [pc, #56]	; (8001f84 <MX_USART2_UART_Init+0x4c>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f50:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <MX_USART2_UART_Init+0x4c>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f56:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <MX_USART2_UART_Init+0x4c>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f5c:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <MX_USART2_UART_Init+0x4c>)
 8001f5e:	220c      	movs	r2, #12
 8001f60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f62:	4b08      	ldr	r3, [pc, #32]	; (8001f84 <MX_USART2_UART_Init+0x4c>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f68:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <MX_USART2_UART_Init+0x4c>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f6e:	4805      	ldr	r0, [pc, #20]	; (8001f84 <MX_USART2_UART_Init+0x4c>)
 8001f70:	f004 fbca 	bl	8006708 <HAL_UART_Init>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f7a:	f7ff f9db 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000390 	.word	0x20000390
 8001f88:	40004400 	.word	0x40004400

08001f8c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f90:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <MX_USART3_UART_Init+0x4c>)
 8001f92:	4a12      	ldr	r2, [pc, #72]	; (8001fdc <MX_USART3_UART_Init+0x50>)
 8001f94:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001f96:	4b10      	ldr	r3, [pc, #64]	; (8001fd8 <MX_USART3_UART_Init+0x4c>)
 8001f98:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f9c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	; (8001fd8 <MX_USART3_UART_Init+0x4c>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001fa4:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <MX_USART3_UART_Init+0x4c>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001faa:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <MX_USART3_UART_Init+0x4c>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fb0:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <MX_USART3_UART_Init+0x4c>)
 8001fb2:	220c      	movs	r2, #12
 8001fb4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fb6:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <MX_USART3_UART_Init+0x4c>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fbc:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <MX_USART3_UART_Init+0x4c>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001fc2:	4805      	ldr	r0, [pc, #20]	; (8001fd8 <MX_USART3_UART_Init+0x4c>)
 8001fc4:	f004 fba0 	bl	8006708 <HAL_UART_Init>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001fce:	f7ff f9b1 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	200003d8 	.word	0x200003d8
 8001fdc:	40004800 	.word	0x40004800

08001fe0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b08c      	sub	sp, #48	; 0x30
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe8:	f107 031c 	add.w	r3, r7, #28
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	605a      	str	r2, [r3, #4]
 8001ff2:	609a      	str	r2, [r3, #8]
 8001ff4:	60da      	str	r2, [r3, #12]
 8001ff6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a36      	ldr	r2, [pc, #216]	; (80020d8 <HAL_UART_MspInit+0xf8>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d12c      	bne.n	800205c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	61bb      	str	r3, [r7, #24]
 8002006:	4b35      	ldr	r3, [pc, #212]	; (80020dc <HAL_UART_MspInit+0xfc>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	4a34      	ldr	r2, [pc, #208]	; (80020dc <HAL_UART_MspInit+0xfc>)
 800200c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002010:	6413      	str	r3, [r2, #64]	; 0x40
 8002012:	4b32      	ldr	r3, [pc, #200]	; (80020dc <HAL_UART_MspInit+0xfc>)
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201a:	61bb      	str	r3, [r7, #24]
 800201c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	617b      	str	r3, [r7, #20]
 8002022:	4b2e      	ldr	r3, [pc, #184]	; (80020dc <HAL_UART_MspInit+0xfc>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	4a2d      	ldr	r2, [pc, #180]	; (80020dc <HAL_UART_MspInit+0xfc>)
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	6313      	str	r3, [r2, #48]	; 0x30
 800202e:	4b2b      	ldr	r3, [pc, #172]	; (80020dc <HAL_UART_MspInit+0xfc>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	617b      	str	r3, [r7, #20]
 8002038:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800203a:	230c      	movs	r3, #12
 800203c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203e:	2302      	movs	r3, #2
 8002040:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002042:	2300      	movs	r3, #0
 8002044:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002046:	2303      	movs	r3, #3
 8002048:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800204a:	2307      	movs	r3, #7
 800204c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204e:	f107 031c 	add.w	r3, r7, #28
 8002052:	4619      	mov	r1, r3
 8002054:	4822      	ldr	r0, [pc, #136]	; (80020e0 <HAL_UART_MspInit+0x100>)
 8002056:	f000 fa5f 	bl	8002518 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800205a:	e039      	b.n	80020d0 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART3)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a20      	ldr	r2, [pc, #128]	; (80020e4 <HAL_UART_MspInit+0x104>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d134      	bne.n	80020d0 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	613b      	str	r3, [r7, #16]
 800206a:	4b1c      	ldr	r3, [pc, #112]	; (80020dc <HAL_UART_MspInit+0xfc>)
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	4a1b      	ldr	r2, [pc, #108]	; (80020dc <HAL_UART_MspInit+0xfc>)
 8002070:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002074:	6413      	str	r3, [r2, #64]	; 0x40
 8002076:	4b19      	ldr	r3, [pc, #100]	; (80020dc <HAL_UART_MspInit+0xfc>)
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800207e:	613b      	str	r3, [r7, #16]
 8002080:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	60fb      	str	r3, [r7, #12]
 8002086:	4b15      	ldr	r3, [pc, #84]	; (80020dc <HAL_UART_MspInit+0xfc>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	4a14      	ldr	r2, [pc, #80]	; (80020dc <HAL_UART_MspInit+0xfc>)
 800208c:	f043 0304 	orr.w	r3, r3, #4
 8002090:	6313      	str	r3, [r2, #48]	; 0x30
 8002092:	4b12      	ldr	r3, [pc, #72]	; (80020dc <HAL_UART_MspInit+0xfc>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	f003 0304 	and.w	r3, r3, #4
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800209e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80020a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a4:	2302      	movs	r3, #2
 80020a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ac:	2303      	movs	r3, #3
 80020ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020b0:	2307      	movs	r3, #7
 80020b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020b4:	f107 031c 	add.w	r3, r7, #28
 80020b8:	4619      	mov	r1, r3
 80020ba:	480b      	ldr	r0, [pc, #44]	; (80020e8 <HAL_UART_MspInit+0x108>)
 80020bc:	f000 fa2c 	bl	8002518 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80020c0:	2200      	movs	r2, #0
 80020c2:	2105      	movs	r1, #5
 80020c4:	2027      	movs	r0, #39	; 0x27
 80020c6:	f000 f96b 	bl	80023a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80020ca:	2027      	movs	r0, #39	; 0x27
 80020cc:	f000 f984 	bl	80023d8 <HAL_NVIC_EnableIRQ>
}
 80020d0:	bf00      	nop
 80020d2:	3730      	adds	r7, #48	; 0x30
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40004400 	.word	0x40004400
 80020dc:	40023800 	.word	0x40023800
 80020e0:	40020000 	.word	0x40020000
 80020e4:	40004800 	.word	0x40004800
 80020e8:	40020800 	.word	0x40020800

080020ec <HAL_UART_RxCpltCallback>:
}

/* USER CODE BEGIN 1 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a04      	ldr	r2, [pc, #16]	; (800210c <HAL_UART_RxCpltCallback+0x20>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d101      	bne.n	8002102 <HAL_UART_RxCpltCallback+0x16>
	{
		GPS_Callback();
 80020fe:	f007 ffc1 	bl	800a084 <GPS_Callback>
	}
}
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	40004800 	.word	0x40004800

08002110 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002110:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002148 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002114:	f7ff fb38 	bl	8001788 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002118:	480c      	ldr	r0, [pc, #48]	; (800214c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800211a:	490d      	ldr	r1, [pc, #52]	; (8002150 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800211c:	4a0d      	ldr	r2, [pc, #52]	; (8002154 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800211e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002120:	e002      	b.n	8002128 <LoopCopyDataInit>

08002122 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002122:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002124:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002126:	3304      	adds	r3, #4

08002128 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002128:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800212a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800212c:	d3f9      	bcc.n	8002122 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800212e:	4a0a      	ldr	r2, [pc, #40]	; (8002158 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002130:	4c0a      	ldr	r4, [pc, #40]	; (800215c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002132:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002134:	e001      	b.n	800213a <LoopFillZerobss>

08002136 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002136:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002138:	3204      	adds	r2, #4

0800213a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800213a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800213c:	d3fb      	bcc.n	8002136 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800213e:	f00b fb5b 	bl	800d7f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002142:	f7ff f84d 	bl	80011e0 <main>
  bx  lr    
 8002146:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002148:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800214c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002150:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8002154:	0800f5b8 	.word	0x0800f5b8
  ldr r2, =_sbss
 8002158:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 800215c:	20005538 	.word	0x20005538

08002160 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002160:	e7fe      	b.n	8002160 <ADC_IRQHandler>
	...

08002164 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002168:	4b0e      	ldr	r3, [pc, #56]	; (80021a4 <HAL_Init+0x40>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a0d      	ldr	r2, [pc, #52]	; (80021a4 <HAL_Init+0x40>)
 800216e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002172:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002174:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <HAL_Init+0x40>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a0a      	ldr	r2, [pc, #40]	; (80021a4 <HAL_Init+0x40>)
 800217a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800217e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002180:	4b08      	ldr	r3, [pc, #32]	; (80021a4 <HAL_Init+0x40>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a07      	ldr	r2, [pc, #28]	; (80021a4 <HAL_Init+0x40>)
 8002186:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800218a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800218c:	2003      	movs	r0, #3
 800218e:	f000 f8fc 	bl	800238a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002192:	200f      	movs	r0, #15
 8002194:	f7ff fa0a 	bl	80015ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002198:	f7ff f9dc 	bl	8001554 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40023c00 	.word	0x40023c00

080021a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021ac:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <HAL_IncTick+0x20>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	461a      	mov	r2, r3
 80021b2:	4b06      	ldr	r3, [pc, #24]	; (80021cc <HAL_IncTick+0x24>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4413      	add	r3, r2
 80021b8:	4a04      	ldr	r2, [pc, #16]	; (80021cc <HAL_IncTick+0x24>)
 80021ba:	6013      	str	r3, [r2, #0]
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	20000008 	.word	0x20000008
 80021cc:	20000420 	.word	0x20000420

080021d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  return uwTick;
 80021d4:	4b03      	ldr	r3, [pc, #12]	; (80021e4 <HAL_GetTick+0x14>)
 80021d6:	681b      	ldr	r3, [r3, #0]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	20000420 	.word	0x20000420

080021e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021f0:	f7ff ffee 	bl	80021d0 <HAL_GetTick>
 80021f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002200:	d005      	beq.n	800220e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002202:	4b0a      	ldr	r3, [pc, #40]	; (800222c <HAL_Delay+0x44>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	461a      	mov	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	4413      	add	r3, r2
 800220c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800220e:	bf00      	nop
 8002210:	f7ff ffde 	bl	80021d0 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	429a      	cmp	r2, r3
 800221e:	d8f7      	bhi.n	8002210 <HAL_Delay+0x28>
  {
  }
}
 8002220:	bf00      	nop
 8002222:	bf00      	nop
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	20000008 	.word	0x20000008

08002230 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f003 0307 	and.w	r3, r3, #7
 800223e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002240:	4b0c      	ldr	r3, [pc, #48]	; (8002274 <__NVIC_SetPriorityGrouping+0x44>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002246:	68ba      	ldr	r2, [r7, #8]
 8002248:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800224c:	4013      	ands	r3, r2
 800224e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002258:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800225c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002260:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002262:	4a04      	ldr	r2, [pc, #16]	; (8002274 <__NVIC_SetPriorityGrouping+0x44>)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	60d3      	str	r3, [r2, #12]
}
 8002268:	bf00      	nop
 800226a:	3714      	adds	r7, #20
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800227c:	4b04      	ldr	r3, [pc, #16]	; (8002290 <__NVIC_GetPriorityGrouping+0x18>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	0a1b      	lsrs	r3, r3, #8
 8002282:	f003 0307 	and.w	r3, r3, #7
}
 8002286:	4618      	mov	r0, r3
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	e000ed00 	.word	0xe000ed00

08002294 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800229e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	db0b      	blt.n	80022be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022a6:	79fb      	ldrb	r3, [r7, #7]
 80022a8:	f003 021f 	and.w	r2, r3, #31
 80022ac:	4907      	ldr	r1, [pc, #28]	; (80022cc <__NVIC_EnableIRQ+0x38>)
 80022ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b2:	095b      	lsrs	r3, r3, #5
 80022b4:	2001      	movs	r0, #1
 80022b6:	fa00 f202 	lsl.w	r2, r0, r2
 80022ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	e000e100 	.word	0xe000e100

080022d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	6039      	str	r1, [r7, #0]
 80022da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	db0a      	blt.n	80022fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	b2da      	uxtb	r2, r3
 80022e8:	490c      	ldr	r1, [pc, #48]	; (800231c <__NVIC_SetPriority+0x4c>)
 80022ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ee:	0112      	lsls	r2, r2, #4
 80022f0:	b2d2      	uxtb	r2, r2
 80022f2:	440b      	add	r3, r1
 80022f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022f8:	e00a      	b.n	8002310 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	4908      	ldr	r1, [pc, #32]	; (8002320 <__NVIC_SetPriority+0x50>)
 8002300:	79fb      	ldrb	r3, [r7, #7]
 8002302:	f003 030f 	and.w	r3, r3, #15
 8002306:	3b04      	subs	r3, #4
 8002308:	0112      	lsls	r2, r2, #4
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	440b      	add	r3, r1
 800230e:	761a      	strb	r2, [r3, #24]
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	e000e100 	.word	0xe000e100
 8002320:	e000ed00 	.word	0xe000ed00

08002324 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002324:	b480      	push	{r7}
 8002326:	b089      	sub	sp, #36	; 0x24
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	f1c3 0307 	rsb	r3, r3, #7
 800233e:	2b04      	cmp	r3, #4
 8002340:	bf28      	it	cs
 8002342:	2304      	movcs	r3, #4
 8002344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	3304      	adds	r3, #4
 800234a:	2b06      	cmp	r3, #6
 800234c:	d902      	bls.n	8002354 <NVIC_EncodePriority+0x30>
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	3b03      	subs	r3, #3
 8002352:	e000      	b.n	8002356 <NVIC_EncodePriority+0x32>
 8002354:	2300      	movs	r3, #0
 8002356:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002358:	f04f 32ff 	mov.w	r2, #4294967295
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	43da      	mvns	r2, r3
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	401a      	ands	r2, r3
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800236c:	f04f 31ff 	mov.w	r1, #4294967295
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	fa01 f303 	lsl.w	r3, r1, r3
 8002376:	43d9      	mvns	r1, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800237c:	4313      	orrs	r3, r2
         );
}
 800237e:	4618      	mov	r0, r3
 8002380:	3724      	adds	r7, #36	; 0x24
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr

0800238a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800238a:	b580      	push	{r7, lr}
 800238c:	b082      	sub	sp, #8
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f7ff ff4c 	bl	8002230 <__NVIC_SetPriorityGrouping>
}
 8002398:	bf00      	nop
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
 80023ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023ae:	2300      	movs	r3, #0
 80023b0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023b2:	f7ff ff61 	bl	8002278 <__NVIC_GetPriorityGrouping>
 80023b6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	68b9      	ldr	r1, [r7, #8]
 80023bc:	6978      	ldr	r0, [r7, #20]
 80023be:	f7ff ffb1 	bl	8002324 <NVIC_EncodePriority>
 80023c2:	4602      	mov	r2, r0
 80023c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023c8:	4611      	mov	r1, r2
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff ff80 	bl	80022d0 <__NVIC_SetPriority>
}
 80023d0:	bf00      	nop
 80023d2:	3718      	adds	r7, #24
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7ff ff54 	bl	8002294 <__NVIC_EnableIRQ>
}
 80023ec:	bf00      	nop
 80023ee:	3708      	adds	r7, #8
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002400:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002402:	f7ff fee5 	bl	80021d0 <HAL_GetTick>
 8002406:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d008      	beq.n	8002426 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2280      	movs	r2, #128	; 0x80
 8002418:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e052      	b.n	80024cc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 0216 	bic.w	r2, r2, #22
 8002434:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	695a      	ldr	r2, [r3, #20]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002444:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	2b00      	cmp	r3, #0
 800244c:	d103      	bne.n	8002456 <HAL_DMA_Abort+0x62>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002452:	2b00      	cmp	r3, #0
 8002454:	d007      	beq.n	8002466 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 0208 	bic.w	r2, r2, #8
 8002464:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0201 	bic.w	r2, r2, #1
 8002474:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002476:	e013      	b.n	80024a0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002478:	f7ff feaa 	bl	80021d0 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b05      	cmp	r3, #5
 8002484:	d90c      	bls.n	80024a0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2220      	movs	r2, #32
 800248a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2203      	movs	r2, #3
 8002490:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e015      	b.n	80024cc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1e4      	bne.n	8002478 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b2:	223f      	movs	r2, #63	; 0x3f
 80024b4:	409a      	lsls	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d004      	beq.n	80024f2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2280      	movs	r2, #128	; 0x80
 80024ec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e00c      	b.n	800250c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2205      	movs	r2, #5
 80024f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 0201 	bic.w	r2, r2, #1
 8002508:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002518:	b480      	push	{r7}
 800251a:	b089      	sub	sp, #36	; 0x24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002522:	2300      	movs	r3, #0
 8002524:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002526:	2300      	movs	r3, #0
 8002528:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800252a:	2300      	movs	r3, #0
 800252c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800252e:	2300      	movs	r3, #0
 8002530:	61fb      	str	r3, [r7, #28]
 8002532:	e165      	b.n	8002800 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002534:	2201      	movs	r2, #1
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	4013      	ands	r3, r2
 8002546:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	429a      	cmp	r2, r3
 800254e:	f040 8154 	bne.w	80027fa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f003 0303 	and.w	r3, r3, #3
 800255a:	2b01      	cmp	r3, #1
 800255c:	d005      	beq.n	800256a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002566:	2b02      	cmp	r3, #2
 8002568:	d130      	bne.n	80025cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	2203      	movs	r2, #3
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	43db      	mvns	r3, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4013      	ands	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	68da      	ldr	r2, [r3, #12]
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4313      	orrs	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025a0:	2201      	movs	r2, #1
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	43db      	mvns	r3, r3
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4013      	ands	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	091b      	lsrs	r3, r3, #4
 80025b6:	f003 0201 	and.w	r2, r3, #1
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f003 0303 	and.w	r3, r3, #3
 80025d4:	2b03      	cmp	r3, #3
 80025d6:	d017      	beq.n	8002608 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	2203      	movs	r2, #3
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	43db      	mvns	r3, r3
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4013      	ands	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4313      	orrs	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 0303 	and.w	r3, r3, #3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d123      	bne.n	800265c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	08da      	lsrs	r2, r3, #3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3208      	adds	r2, #8
 800261c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002620:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	f003 0307 	and.w	r3, r3, #7
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	220f      	movs	r2, #15
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	43db      	mvns	r3, r3
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	4013      	ands	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	691a      	ldr	r2, [r3, #16]
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4313      	orrs	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	08da      	lsrs	r2, r3, #3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	3208      	adds	r2, #8
 8002656:	69b9      	ldr	r1, [r7, #24]
 8002658:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	2203      	movs	r2, #3
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	43db      	mvns	r3, r3
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4013      	ands	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f003 0203 	and.w	r2, r3, #3
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4313      	orrs	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002698:	2b00      	cmp	r3, #0
 800269a:	f000 80ae 	beq.w	80027fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	4b5d      	ldr	r3, [pc, #372]	; (8002818 <HAL_GPIO_Init+0x300>)
 80026a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a6:	4a5c      	ldr	r2, [pc, #368]	; (8002818 <HAL_GPIO_Init+0x300>)
 80026a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026ac:	6453      	str	r3, [r2, #68]	; 0x44
 80026ae:	4b5a      	ldr	r3, [pc, #360]	; (8002818 <HAL_GPIO_Init+0x300>)
 80026b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026ba:	4a58      	ldr	r2, [pc, #352]	; (800281c <HAL_GPIO_Init+0x304>)
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	089b      	lsrs	r3, r3, #2
 80026c0:	3302      	adds	r3, #2
 80026c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	f003 0303 	and.w	r3, r3, #3
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	220f      	movs	r2, #15
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	43db      	mvns	r3, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4013      	ands	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a4f      	ldr	r2, [pc, #316]	; (8002820 <HAL_GPIO_Init+0x308>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d025      	beq.n	8002732 <HAL_GPIO_Init+0x21a>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a4e      	ldr	r2, [pc, #312]	; (8002824 <HAL_GPIO_Init+0x30c>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d01f      	beq.n	800272e <HAL_GPIO_Init+0x216>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a4d      	ldr	r2, [pc, #308]	; (8002828 <HAL_GPIO_Init+0x310>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d019      	beq.n	800272a <HAL_GPIO_Init+0x212>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a4c      	ldr	r2, [pc, #304]	; (800282c <HAL_GPIO_Init+0x314>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d013      	beq.n	8002726 <HAL_GPIO_Init+0x20e>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a4b      	ldr	r2, [pc, #300]	; (8002830 <HAL_GPIO_Init+0x318>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d00d      	beq.n	8002722 <HAL_GPIO_Init+0x20a>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a4a      	ldr	r2, [pc, #296]	; (8002834 <HAL_GPIO_Init+0x31c>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d007      	beq.n	800271e <HAL_GPIO_Init+0x206>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a49      	ldr	r2, [pc, #292]	; (8002838 <HAL_GPIO_Init+0x320>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d101      	bne.n	800271a <HAL_GPIO_Init+0x202>
 8002716:	2306      	movs	r3, #6
 8002718:	e00c      	b.n	8002734 <HAL_GPIO_Init+0x21c>
 800271a:	2307      	movs	r3, #7
 800271c:	e00a      	b.n	8002734 <HAL_GPIO_Init+0x21c>
 800271e:	2305      	movs	r3, #5
 8002720:	e008      	b.n	8002734 <HAL_GPIO_Init+0x21c>
 8002722:	2304      	movs	r3, #4
 8002724:	e006      	b.n	8002734 <HAL_GPIO_Init+0x21c>
 8002726:	2303      	movs	r3, #3
 8002728:	e004      	b.n	8002734 <HAL_GPIO_Init+0x21c>
 800272a:	2302      	movs	r3, #2
 800272c:	e002      	b.n	8002734 <HAL_GPIO_Init+0x21c>
 800272e:	2301      	movs	r3, #1
 8002730:	e000      	b.n	8002734 <HAL_GPIO_Init+0x21c>
 8002732:	2300      	movs	r3, #0
 8002734:	69fa      	ldr	r2, [r7, #28]
 8002736:	f002 0203 	and.w	r2, r2, #3
 800273a:	0092      	lsls	r2, r2, #2
 800273c:	4093      	lsls	r3, r2
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4313      	orrs	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002744:	4935      	ldr	r1, [pc, #212]	; (800281c <HAL_GPIO_Init+0x304>)
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	089b      	lsrs	r3, r3, #2
 800274a:	3302      	adds	r3, #2
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002752:	4b3a      	ldr	r3, [pc, #232]	; (800283c <HAL_GPIO_Init+0x324>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	43db      	mvns	r3, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4013      	ands	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	4313      	orrs	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002776:	4a31      	ldr	r2, [pc, #196]	; (800283c <HAL_GPIO_Init+0x324>)
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800277c:	4b2f      	ldr	r3, [pc, #188]	; (800283c <HAL_GPIO_Init+0x324>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	43db      	mvns	r3, r3
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4013      	ands	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d003      	beq.n	80027a0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	4313      	orrs	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027a0:	4a26      	ldr	r2, [pc, #152]	; (800283c <HAL_GPIO_Init+0x324>)
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027a6:	4b25      	ldr	r3, [pc, #148]	; (800283c <HAL_GPIO_Init+0x324>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	43db      	mvns	r3, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4013      	ands	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027ca:	4a1c      	ldr	r2, [pc, #112]	; (800283c <HAL_GPIO_Init+0x324>)
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027d0:	4b1a      	ldr	r3, [pc, #104]	; (800283c <HAL_GPIO_Init+0x324>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	43db      	mvns	r3, r3
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	4013      	ands	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d003      	beq.n	80027f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027f4:	4a11      	ldr	r2, [pc, #68]	; (800283c <HAL_GPIO_Init+0x324>)
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	3301      	adds	r3, #1
 80027fe:	61fb      	str	r3, [r7, #28]
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	2b0f      	cmp	r3, #15
 8002804:	f67f ae96 	bls.w	8002534 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002808:	bf00      	nop
 800280a:	bf00      	nop
 800280c:	3724      	adds	r7, #36	; 0x24
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	40023800 	.word	0x40023800
 800281c:	40013800 	.word	0x40013800
 8002820:	40020000 	.word	0x40020000
 8002824:	40020400 	.word	0x40020400
 8002828:	40020800 	.word	0x40020800
 800282c:	40020c00 	.word	0x40020c00
 8002830:	40021000 	.word	0x40021000
 8002834:	40021400 	.word	0x40021400
 8002838:	40021800 	.word	0x40021800
 800283c:	40013c00 	.word	0x40013c00

08002840 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	460b      	mov	r3, r1
 800284a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	691a      	ldr	r2, [r3, #16]
 8002850:	887b      	ldrh	r3, [r7, #2]
 8002852:	4013      	ands	r3, r2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d002      	beq.n	800285e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002858:	2301      	movs	r3, #1
 800285a:	73fb      	strb	r3, [r7, #15]
 800285c:	e001      	b.n	8002862 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800285e:	2300      	movs	r3, #0
 8002860:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002862:	7bfb      	ldrb	r3, [r7, #15]
}
 8002864:	4618      	mov	r0, r3
 8002866:	3714      	adds	r7, #20
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	460b      	mov	r3, r1
 800287a:	807b      	strh	r3, [r7, #2]
 800287c:	4613      	mov	r3, r2
 800287e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002880:	787b      	ldrb	r3, [r7, #1]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002886:	887a      	ldrh	r2, [r7, #2]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800288c:	e003      	b.n	8002896 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800288e:	887b      	ldrh	r3, [r7, #2]
 8002890:	041a      	lsls	r2, r3, #16
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	619a      	str	r2, [r3, #24]
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
	...

080028a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4603      	mov	r3, r0
 80028ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80028ae:	4b08      	ldr	r3, [pc, #32]	; (80028d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028b0:	695a      	ldr	r2, [r3, #20]
 80028b2:	88fb      	ldrh	r3, [r7, #6]
 80028b4:	4013      	ands	r3, r2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d006      	beq.n	80028c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028ba:	4a05      	ldr	r2, [pc, #20]	; (80028d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028bc:	88fb      	ldrh	r3, [r7, #6]
 80028be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028c0:	88fb      	ldrh	r3, [r7, #6]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7fe fbee 	bl	80010a4 <HAL_GPIO_EXTI_Callback>
  }
}
 80028c8:	bf00      	nop
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40013c00 	.word	0x40013c00

080028d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e12b      	b.n	8002b3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d106      	bne.n	8002900 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7fe fc0e 	bl	800111c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2224      	movs	r2, #36	; 0x24
 8002904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 0201 	bic.w	r2, r2, #1
 8002916:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002926:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002936:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002938:	f001 fac0 	bl	8003ebc <HAL_RCC_GetPCLK1Freq>
 800293c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	4a81      	ldr	r2, [pc, #516]	; (8002b48 <HAL_I2C_Init+0x274>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d807      	bhi.n	8002958 <HAL_I2C_Init+0x84>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	4a80      	ldr	r2, [pc, #512]	; (8002b4c <HAL_I2C_Init+0x278>)
 800294c:	4293      	cmp	r3, r2
 800294e:	bf94      	ite	ls
 8002950:	2301      	movls	r3, #1
 8002952:	2300      	movhi	r3, #0
 8002954:	b2db      	uxtb	r3, r3
 8002956:	e006      	b.n	8002966 <HAL_I2C_Init+0x92>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4a7d      	ldr	r2, [pc, #500]	; (8002b50 <HAL_I2C_Init+0x27c>)
 800295c:	4293      	cmp	r3, r2
 800295e:	bf94      	ite	ls
 8002960:	2301      	movls	r3, #1
 8002962:	2300      	movhi	r3, #0
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e0e7      	b.n	8002b3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	4a78      	ldr	r2, [pc, #480]	; (8002b54 <HAL_I2C_Init+0x280>)
 8002972:	fba2 2303 	umull	r2, r3, r2, r3
 8002976:	0c9b      	lsrs	r3, r3, #18
 8002978:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68ba      	ldr	r2, [r7, #8]
 800298a:	430a      	orrs	r2, r1
 800298c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	4a6a      	ldr	r2, [pc, #424]	; (8002b48 <HAL_I2C_Init+0x274>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d802      	bhi.n	80029a8 <HAL_I2C_Init+0xd4>
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	3301      	adds	r3, #1
 80029a6:	e009      	b.n	80029bc <HAL_I2C_Init+0xe8>
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029ae:	fb02 f303 	mul.w	r3, r2, r3
 80029b2:	4a69      	ldr	r2, [pc, #420]	; (8002b58 <HAL_I2C_Init+0x284>)
 80029b4:	fba2 2303 	umull	r2, r3, r2, r3
 80029b8:	099b      	lsrs	r3, r3, #6
 80029ba:	3301      	adds	r3, #1
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	6812      	ldr	r2, [r2, #0]
 80029c0:	430b      	orrs	r3, r1
 80029c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80029ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	495c      	ldr	r1, [pc, #368]	; (8002b48 <HAL_I2C_Init+0x274>)
 80029d8:	428b      	cmp	r3, r1
 80029da:	d819      	bhi.n	8002a10 <HAL_I2C_Init+0x13c>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	1e59      	subs	r1, r3, #1
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80029ea:	1c59      	adds	r1, r3, #1
 80029ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80029f0:	400b      	ands	r3, r1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00a      	beq.n	8002a0c <HAL_I2C_Init+0x138>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	1e59      	subs	r1, r3, #1
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a04:	3301      	adds	r3, #1
 8002a06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a0a:	e051      	b.n	8002ab0 <HAL_I2C_Init+0x1dc>
 8002a0c:	2304      	movs	r3, #4
 8002a0e:	e04f      	b.n	8002ab0 <HAL_I2C_Init+0x1dc>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d111      	bne.n	8002a3c <HAL_I2C_Init+0x168>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	1e58      	subs	r0, r3, #1
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6859      	ldr	r1, [r3, #4]
 8002a20:	460b      	mov	r3, r1
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	440b      	add	r3, r1
 8002a26:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	bf0c      	ite	eq
 8002a34:	2301      	moveq	r3, #1
 8002a36:	2300      	movne	r3, #0
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	e012      	b.n	8002a62 <HAL_I2C_Init+0x18e>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	1e58      	subs	r0, r3, #1
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6859      	ldr	r1, [r3, #4]
 8002a44:	460b      	mov	r3, r1
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	440b      	add	r3, r1
 8002a4a:	0099      	lsls	r1, r3, #2
 8002a4c:	440b      	add	r3, r1
 8002a4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a52:	3301      	adds	r3, #1
 8002a54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	bf0c      	ite	eq
 8002a5c:	2301      	moveq	r3, #1
 8002a5e:	2300      	movne	r3, #0
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <HAL_I2C_Init+0x196>
 8002a66:	2301      	movs	r3, #1
 8002a68:	e022      	b.n	8002ab0 <HAL_I2C_Init+0x1dc>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10e      	bne.n	8002a90 <HAL_I2C_Init+0x1bc>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	1e58      	subs	r0, r3, #1
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6859      	ldr	r1, [r3, #4]
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	440b      	add	r3, r1
 8002a80:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a84:	3301      	adds	r3, #1
 8002a86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a8e:	e00f      	b.n	8002ab0 <HAL_I2C_Init+0x1dc>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	1e58      	subs	r0, r3, #1
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6859      	ldr	r1, [r3, #4]
 8002a98:	460b      	mov	r3, r1
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	0099      	lsls	r1, r3, #2
 8002aa0:	440b      	add	r3, r1
 8002aa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ab0:	6879      	ldr	r1, [r7, #4]
 8002ab2:	6809      	ldr	r1, [r1, #0]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	69da      	ldr	r2, [r3, #28]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	431a      	orrs	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ade:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	6911      	ldr	r1, [r2, #16]
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	68d2      	ldr	r2, [r2, #12]
 8002aea:	4311      	orrs	r1, r2
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6812      	ldr	r2, [r2, #0]
 8002af0:	430b      	orrs	r3, r1
 8002af2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	695a      	ldr	r2, [r3, #20]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	431a      	orrs	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f042 0201 	orr.w	r2, r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2220      	movs	r2, #32
 8002b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	000186a0 	.word	0x000186a0
 8002b4c:	001e847f 	.word	0x001e847f
 8002b50:	003d08ff 	.word	0x003d08ff
 8002b54:	431bde83 	.word	0x431bde83
 8002b58:	10624dd3 	.word	0x10624dd3

08002b5c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b088      	sub	sp, #32
 8002b60:	af02      	add	r7, sp, #8
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	4608      	mov	r0, r1
 8002b66:	4611      	mov	r1, r2
 8002b68:	461a      	mov	r2, r3
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	817b      	strh	r3, [r7, #10]
 8002b6e:	460b      	mov	r3, r1
 8002b70:	813b      	strh	r3, [r7, #8]
 8002b72:	4613      	mov	r3, r2
 8002b74:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b76:	f7ff fb2b 	bl	80021d0 <HAL_GetTick>
 8002b7a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b20      	cmp	r3, #32
 8002b86:	f040 80d9 	bne.w	8002d3c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	2319      	movs	r3, #25
 8002b90:	2201      	movs	r2, #1
 8002b92:	496d      	ldr	r1, [pc, #436]	; (8002d48 <HAL_I2C_Mem_Write+0x1ec>)
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	f000 fdc7 	bl	8003728 <I2C_WaitOnFlagUntilTimeout>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	e0cc      	b.n	8002d3e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d101      	bne.n	8002bb2 <HAL_I2C_Mem_Write+0x56>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	e0c5      	b.n	8002d3e <HAL_I2C_Mem_Write+0x1e2>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d007      	beq.n	8002bd8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0201 	orr.w	r2, r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002be6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2221      	movs	r2, #33	; 0x21
 8002bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2240      	movs	r2, #64	; 0x40
 8002bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6a3a      	ldr	r2, [r7, #32]
 8002c02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	4a4d      	ldr	r2, [pc, #308]	; (8002d4c <HAL_I2C_Mem_Write+0x1f0>)
 8002c18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c1a:	88f8      	ldrh	r0, [r7, #6]
 8002c1c:	893a      	ldrh	r2, [r7, #8]
 8002c1e:	8979      	ldrh	r1, [r7, #10]
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	9301      	str	r3, [sp, #4]
 8002c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	4603      	mov	r3, r0
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f000 fbfe 	bl	800342c <I2C_RequestMemoryWrite>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d052      	beq.n	8002cdc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e081      	b.n	8002d3e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 fe8c 	bl	800395c <I2C_WaitOnTXEFlagUntilTimeout>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00d      	beq.n	8002c66 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	2b04      	cmp	r3, #4
 8002c50:	d107      	bne.n	8002c62 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c60:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e06b      	b.n	8002d3e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6a:	781a      	ldrb	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	1c5a      	adds	r2, r3, #1
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c80:	3b01      	subs	r3, #1
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b04      	cmp	r3, #4
 8002ca2:	d11b      	bne.n	8002cdc <HAL_I2C_Mem_Write+0x180>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d017      	beq.n	8002cdc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb0:	781a      	ldrb	r2, [r3, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbc:	1c5a      	adds	r2, r3, #1
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1aa      	bne.n	8002c3a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ce4:	697a      	ldr	r2, [r7, #20]
 8002ce6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f000 fe7f 	bl	80039ec <I2C_WaitOnBTFFlagUntilTimeout>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00d      	beq.n	8002d10 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf8:	2b04      	cmp	r3, #4
 8002cfa:	d107      	bne.n	8002d0c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d0a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e016      	b.n	8002d3e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2220      	movs	r2, #32
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	e000      	b.n	8002d3e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002d3c:	2302      	movs	r3, #2
  }
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3718      	adds	r7, #24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	00100002 	.word	0x00100002
 8002d4c:	ffff0000 	.word	0xffff0000

08002d50 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b08c      	sub	sp, #48	; 0x30
 8002d54:	af02      	add	r7, sp, #8
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	4608      	mov	r0, r1
 8002d5a:	4611      	mov	r1, r2
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	4603      	mov	r3, r0
 8002d60:	817b      	strh	r3, [r7, #10]
 8002d62:	460b      	mov	r3, r1
 8002d64:	813b      	strh	r3, [r7, #8]
 8002d66:	4613      	mov	r3, r2
 8002d68:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d6a:	f7ff fa31 	bl	80021d0 <HAL_GetTick>
 8002d6e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b20      	cmp	r3, #32
 8002d7a:	f040 8214 	bne.w	80031a6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d80:	9300      	str	r3, [sp, #0]
 8002d82:	2319      	movs	r3, #25
 8002d84:	2201      	movs	r2, #1
 8002d86:	497b      	ldr	r1, [pc, #492]	; (8002f74 <HAL_I2C_Mem_Read+0x224>)
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f000 fccd 	bl	8003728 <I2C_WaitOnFlagUntilTimeout>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002d94:	2302      	movs	r3, #2
 8002d96:	e207      	b.n	80031a8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d101      	bne.n	8002da6 <HAL_I2C_Mem_Read+0x56>
 8002da2:	2302      	movs	r3, #2
 8002da4:	e200      	b.n	80031a8 <HAL_I2C_Mem_Read+0x458>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d007      	beq.n	8002dcc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f042 0201 	orr.w	r2, r2, #1
 8002dca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dda:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2222      	movs	r2, #34	; 0x22
 8002de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2240      	movs	r2, #64	; 0x40
 8002de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002df6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002dfc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4a5b      	ldr	r2, [pc, #364]	; (8002f78 <HAL_I2C_Mem_Read+0x228>)
 8002e0c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e0e:	88f8      	ldrh	r0, [r7, #6]
 8002e10:	893a      	ldrh	r2, [r7, #8]
 8002e12:	8979      	ldrh	r1, [r7, #10]
 8002e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e16:	9301      	str	r3, [sp, #4]
 8002e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f000 fb9a 	bl	8003558 <I2C_RequestMemoryRead>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e1bc      	b.n	80031a8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d113      	bne.n	8002e5e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e36:	2300      	movs	r3, #0
 8002e38:	623b      	str	r3, [r7, #32]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	695b      	ldr	r3, [r3, #20]
 8002e40:	623b      	str	r3, [r7, #32]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	623b      	str	r3, [r7, #32]
 8002e4a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	e190      	b.n	8003180 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d11b      	bne.n	8002e9e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e76:	2300      	movs	r3, #0
 8002e78:	61fb      	str	r3, [r7, #28]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	695b      	ldr	r3, [r3, #20]
 8002e80:	61fb      	str	r3, [r7, #28]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	61fb      	str	r3, [r7, #28]
 8002e8a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	e170      	b.n	8003180 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d11b      	bne.n	8002ede <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eb4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ec4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	61bb      	str	r3, [r7, #24]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	695b      	ldr	r3, [r3, #20]
 8002ed0:	61bb      	str	r3, [r7, #24]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	61bb      	str	r3, [r7, #24]
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	e150      	b.n	8003180 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ede:	2300      	movs	r3, #0
 8002ee0:	617b      	str	r3, [r7, #20]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	617b      	str	r3, [r7, #20]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	617b      	str	r3, [r7, #20]
 8002ef2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002ef4:	e144      	b.n	8003180 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002efa:	2b03      	cmp	r3, #3
 8002efc:	f200 80f1 	bhi.w	80030e2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d123      	bne.n	8002f50 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f0a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f000 fdb5 	bl	8003a7c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e145      	b.n	80031a8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	691a      	ldr	r2, [r3, #16]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f26:	b2d2      	uxtb	r2, r2
 8002f28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2e:	1c5a      	adds	r2, r3, #1
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	3b01      	subs	r3, #1
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f4e:	e117      	b.n	8003180 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d14e      	bne.n	8002ff6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5a:	9300      	str	r3, [sp, #0]
 8002f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f5e:	2200      	movs	r2, #0
 8002f60:	4906      	ldr	r1, [pc, #24]	; (8002f7c <HAL_I2C_Mem_Read+0x22c>)
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f000 fbe0 	bl	8003728 <I2C_WaitOnFlagUntilTimeout>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d008      	beq.n	8002f80 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e11a      	b.n	80031a8 <HAL_I2C_Mem_Read+0x458>
 8002f72:	bf00      	nop
 8002f74:	00100002 	.word	0x00100002
 8002f78:	ffff0000 	.word	0xffff0000
 8002f7c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	691a      	ldr	r2, [r3, #16]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9a:	b2d2      	uxtb	r2, r2
 8002f9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa2:	1c5a      	adds	r2, r3, #1
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fac:	3b01      	subs	r3, #1
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	691a      	ldr	r2, [r3, #16]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	b2d2      	uxtb	r2, r2
 8002fce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd4:	1c5a      	adds	r2, r3, #1
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	3b01      	subs	r3, #1
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ff4:	e0c4      	b.n	8003180 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	496c      	ldr	r1, [pc, #432]	; (80031b0 <HAL_I2C_Mem_Read+0x460>)
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f000 fb91 	bl	8003728 <I2C_WaitOnFlagUntilTimeout>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d001      	beq.n	8003010 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e0cb      	b.n	80031a8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800301e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	691a      	ldr	r2, [r3, #16]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302a:	b2d2      	uxtb	r2, r2
 800302c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003032:	1c5a      	adds	r2, r3, #1
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800303c:	3b01      	subs	r3, #1
 800303e:	b29a      	uxth	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003048:	b29b      	uxth	r3, r3
 800304a:	3b01      	subs	r3, #1
 800304c:	b29a      	uxth	r2, r3
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003054:	9300      	str	r3, [sp, #0]
 8003056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003058:	2200      	movs	r2, #0
 800305a:	4955      	ldr	r1, [pc, #340]	; (80031b0 <HAL_I2C_Mem_Read+0x460>)
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	f000 fb63 	bl	8003728 <I2C_WaitOnFlagUntilTimeout>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e09d      	b.n	80031a8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800307a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	691a      	ldr	r2, [r3, #16]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003086:	b2d2      	uxtb	r2, r2
 8003088:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308e:	1c5a      	adds	r2, r3, #1
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003098:	3b01      	subs	r3, #1
 800309a:	b29a      	uxth	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	3b01      	subs	r3, #1
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	691a      	ldr	r2, [r3, #16]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b8:	b2d2      	uxtb	r2, r2
 80030ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c0:	1c5a      	adds	r2, r3, #1
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ca:	3b01      	subs	r3, #1
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	3b01      	subs	r3, #1
 80030da:	b29a      	uxth	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030e0:	e04e      	b.n	8003180 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f000 fcc8 	bl	8003a7c <I2C_WaitOnRXNEFlagUntilTimeout>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e058      	b.n	80031a8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	691a      	ldr	r2, [r3, #16]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003100:	b2d2      	uxtb	r2, r2
 8003102:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003108:	1c5a      	adds	r2, r3, #1
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003112:	3b01      	subs	r3, #1
 8003114:	b29a      	uxth	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800311e:	b29b      	uxth	r3, r3
 8003120:	3b01      	subs	r3, #1
 8003122:	b29a      	uxth	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	f003 0304 	and.w	r3, r3, #4
 8003132:	2b04      	cmp	r3, #4
 8003134:	d124      	bne.n	8003180 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800313a:	2b03      	cmp	r3, #3
 800313c:	d107      	bne.n	800314e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800314c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	691a      	ldr	r2, [r3, #16]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003158:	b2d2      	uxtb	r2, r2
 800315a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003160:	1c5a      	adds	r2, r3, #1
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800316a:	3b01      	subs	r3, #1
 800316c:	b29a      	uxth	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003176:	b29b      	uxth	r3, r3
 8003178:	3b01      	subs	r3, #1
 800317a:	b29a      	uxth	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003184:	2b00      	cmp	r3, #0
 8003186:	f47f aeb6 	bne.w	8002ef6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2220      	movs	r2, #32
 800318e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031a2:	2300      	movs	r3, #0
 80031a4:	e000      	b.n	80031a8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80031a6:	2302      	movs	r3, #2
  }
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3728      	adds	r7, #40	; 0x28
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	00010004 	.word	0x00010004

080031b4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b08a      	sub	sp, #40	; 0x28
 80031b8:	af02      	add	r7, sp, #8
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	607a      	str	r2, [r7, #4]
 80031be:	603b      	str	r3, [r7, #0]
 80031c0:	460b      	mov	r3, r1
 80031c2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80031c4:	f7ff f804 	bl	80021d0 <HAL_GetTick>
 80031c8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80031ca:	2300      	movs	r3, #0
 80031cc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b20      	cmp	r3, #32
 80031d8:	f040 8111 	bne.w	80033fe <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	9300      	str	r3, [sp, #0]
 80031e0:	2319      	movs	r3, #25
 80031e2:	2201      	movs	r2, #1
 80031e4:	4988      	ldr	r1, [pc, #544]	; (8003408 <HAL_I2C_IsDeviceReady+0x254>)
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f000 fa9e 	bl	8003728 <I2C_WaitOnFlagUntilTimeout>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80031f2:	2302      	movs	r3, #2
 80031f4:	e104      	b.n	8003400 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d101      	bne.n	8003204 <HAL_I2C_IsDeviceReady+0x50>
 8003200:	2302      	movs	r3, #2
 8003202:	e0fd      	b.n	8003400 <HAL_I2C_IsDeviceReady+0x24c>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b01      	cmp	r3, #1
 8003218:	d007      	beq.n	800322a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f042 0201 	orr.w	r2, r2, #1
 8003228:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003238:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2224      	movs	r2, #36	; 0x24
 800323e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4a70      	ldr	r2, [pc, #448]	; (800340c <HAL_I2C_IsDeviceReady+0x258>)
 800324c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800325c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	2200      	movs	r2, #0
 8003266:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f000 fa5c 	bl	8003728 <I2C_WaitOnFlagUntilTimeout>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00d      	beq.n	8003292 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003280:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003284:	d103      	bne.n	800328e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f44f 7200 	mov.w	r2, #512	; 0x200
 800328c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e0b6      	b.n	8003400 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003292:	897b      	ldrh	r3, [r7, #10]
 8003294:	b2db      	uxtb	r3, r3
 8003296:	461a      	mov	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80032a0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80032a2:	f7fe ff95 	bl	80021d0 <HAL_GetTick>
 80032a6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	bf0c      	ite	eq
 80032b6:	2301      	moveq	r3, #1
 80032b8:	2300      	movne	r3, #0
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	695b      	ldr	r3, [r3, #20]
 80032c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032cc:	bf0c      	ite	eq
 80032ce:	2301      	moveq	r3, #1
 80032d0:	2300      	movne	r3, #0
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80032d6:	e025      	b.n	8003324 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80032d8:	f7fe ff7a 	bl	80021d0 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d302      	bcc.n	80032ee <HAL_I2C_IsDeviceReady+0x13a>
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d103      	bne.n	80032f6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	22a0      	movs	r2, #160	; 0xa0
 80032f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	695b      	ldr	r3, [r3, #20]
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b02      	cmp	r3, #2
 8003302:	bf0c      	ite	eq
 8003304:	2301      	moveq	r3, #1
 8003306:	2300      	movne	r3, #0
 8003308:	b2db      	uxtb	r3, r3
 800330a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003316:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800331a:	bf0c      	ite	eq
 800331c:	2301      	moveq	r3, #1
 800331e:	2300      	movne	r3, #0
 8003320:	b2db      	uxtb	r3, r3
 8003322:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2ba0      	cmp	r3, #160	; 0xa0
 800332e:	d005      	beq.n	800333c <HAL_I2C_IsDeviceReady+0x188>
 8003330:	7dfb      	ldrb	r3, [r7, #23]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d102      	bne.n	800333c <HAL_I2C_IsDeviceReady+0x188>
 8003336:	7dbb      	ldrb	r3, [r7, #22]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0cd      	beq.n	80032d8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2220      	movs	r2, #32
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b02      	cmp	r3, #2
 8003350:	d129      	bne.n	80033a6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003360:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003362:	2300      	movs	r3, #0
 8003364:	613b      	str	r3, [r7, #16]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	695b      	ldr	r3, [r3, #20]
 800336c:	613b      	str	r3, [r7, #16]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	613b      	str	r3, [r7, #16]
 8003376:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	9300      	str	r3, [sp, #0]
 800337c:	2319      	movs	r3, #25
 800337e:	2201      	movs	r2, #1
 8003380:	4921      	ldr	r1, [pc, #132]	; (8003408 <HAL_I2C_IsDeviceReady+0x254>)
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f000 f9d0 	bl	8003728 <I2C_WaitOnFlagUntilTimeout>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e036      	b.n	8003400 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2220      	movs	r2, #32
 8003396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80033a2:	2300      	movs	r3, #0
 80033a4:	e02c      	b.n	8003400 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033b4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033be:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	9300      	str	r3, [sp, #0]
 80033c4:	2319      	movs	r3, #25
 80033c6:	2201      	movs	r2, #1
 80033c8:	490f      	ldr	r1, [pc, #60]	; (8003408 <HAL_I2C_IsDeviceReady+0x254>)
 80033ca:	68f8      	ldr	r0, [r7, #12]
 80033cc:	f000 f9ac 	bl	8003728 <I2C_WaitOnFlagUntilTimeout>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e012      	b.n	8003400 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	3301      	adds	r3, #1
 80033de:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	f4ff af32 	bcc.w	800324e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2220      	movs	r2, #32
 80033ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e000      	b.n	8003400 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80033fe:	2302      	movs	r3, #2
  }
}
 8003400:	4618      	mov	r0, r3
 8003402:	3720      	adds	r7, #32
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	00100002 	.word	0x00100002
 800340c:	ffff0000 	.word	0xffff0000

08003410 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800341e:	b2db      	uxtb	r3, r3
}
 8003420:	4618      	mov	r0, r3
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b088      	sub	sp, #32
 8003430:	af02      	add	r7, sp, #8
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	4608      	mov	r0, r1
 8003436:	4611      	mov	r1, r2
 8003438:	461a      	mov	r2, r3
 800343a:	4603      	mov	r3, r0
 800343c:	817b      	strh	r3, [r7, #10]
 800343e:	460b      	mov	r3, r1
 8003440:	813b      	strh	r3, [r7, #8]
 8003442:	4613      	mov	r3, r2
 8003444:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003454:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	6a3b      	ldr	r3, [r7, #32]
 800345c:	2200      	movs	r2, #0
 800345e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f000 f960 	bl	8003728 <I2C_WaitOnFlagUntilTimeout>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00d      	beq.n	800348a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003478:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800347c:	d103      	bne.n	8003486 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003484:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e05f      	b.n	800354a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800348a:	897b      	ldrh	r3, [r7, #10]
 800348c:	b2db      	uxtb	r3, r3
 800348e:	461a      	mov	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003498:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349c:	6a3a      	ldr	r2, [r7, #32]
 800349e:	492d      	ldr	r1, [pc, #180]	; (8003554 <I2C_RequestMemoryWrite+0x128>)
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f000 f9bb 	bl	800381c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e04c      	b.n	800354a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034b0:	2300      	movs	r3, #0
 80034b2:	617b      	str	r3, [r7, #20]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	617b      	str	r3, [r7, #20]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	617b      	str	r3, [r7, #20]
 80034c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034c8:	6a39      	ldr	r1, [r7, #32]
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f000 fa46 	bl	800395c <I2C_WaitOnTXEFlagUntilTimeout>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00d      	beq.n	80034f2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034da:	2b04      	cmp	r3, #4
 80034dc:	d107      	bne.n	80034ee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e02b      	b.n	800354a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034f2:	88fb      	ldrh	r3, [r7, #6]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d105      	bne.n	8003504 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034f8:	893b      	ldrh	r3, [r7, #8]
 80034fa:	b2da      	uxtb	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	611a      	str	r2, [r3, #16]
 8003502:	e021      	b.n	8003548 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003504:	893b      	ldrh	r3, [r7, #8]
 8003506:	0a1b      	lsrs	r3, r3, #8
 8003508:	b29b      	uxth	r3, r3
 800350a:	b2da      	uxtb	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003514:	6a39      	ldr	r1, [r7, #32]
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f000 fa20 	bl	800395c <I2C_WaitOnTXEFlagUntilTimeout>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00d      	beq.n	800353e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	2b04      	cmp	r3, #4
 8003528:	d107      	bne.n	800353a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003538:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e005      	b.n	800354a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800353e:	893b      	ldrh	r3, [r7, #8]
 8003540:	b2da      	uxtb	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3718      	adds	r7, #24
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	00010002 	.word	0x00010002

08003558 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b088      	sub	sp, #32
 800355c:	af02      	add	r7, sp, #8
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	4608      	mov	r0, r1
 8003562:	4611      	mov	r1, r2
 8003564:	461a      	mov	r2, r3
 8003566:	4603      	mov	r3, r0
 8003568:	817b      	strh	r3, [r7, #10]
 800356a:	460b      	mov	r3, r1
 800356c:	813b      	strh	r3, [r7, #8]
 800356e:	4613      	mov	r3, r2
 8003570:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003580:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003590:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003594:	9300      	str	r3, [sp, #0]
 8003596:	6a3b      	ldr	r3, [r7, #32]
 8003598:	2200      	movs	r2, #0
 800359a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f000 f8c2 	bl	8003728 <I2C_WaitOnFlagUntilTimeout>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00d      	beq.n	80035c6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035b8:	d103      	bne.n	80035c2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e0aa      	b.n	800371c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035c6:	897b      	ldrh	r3, [r7, #10]
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	461a      	mov	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80035d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d8:	6a3a      	ldr	r2, [r7, #32]
 80035da:	4952      	ldr	r1, [pc, #328]	; (8003724 <I2C_RequestMemoryRead+0x1cc>)
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f000 f91d 	bl	800381c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d001      	beq.n	80035ec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e097      	b.n	800371c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ec:	2300      	movs	r3, #0
 80035ee:	617b      	str	r3, [r7, #20]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	617b      	str	r3, [r7, #20]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	617b      	str	r3, [r7, #20]
 8003600:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003604:	6a39      	ldr	r1, [r7, #32]
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	f000 f9a8 	bl	800395c <I2C_WaitOnTXEFlagUntilTimeout>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00d      	beq.n	800362e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	2b04      	cmp	r3, #4
 8003618:	d107      	bne.n	800362a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003628:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e076      	b.n	800371c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800362e:	88fb      	ldrh	r3, [r7, #6]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d105      	bne.n	8003640 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003634:	893b      	ldrh	r3, [r7, #8]
 8003636:	b2da      	uxtb	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	611a      	str	r2, [r3, #16]
 800363e:	e021      	b.n	8003684 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003640:	893b      	ldrh	r3, [r7, #8]
 8003642:	0a1b      	lsrs	r3, r3, #8
 8003644:	b29b      	uxth	r3, r3
 8003646:	b2da      	uxtb	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800364e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003650:	6a39      	ldr	r1, [r7, #32]
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f000 f982 	bl	800395c <I2C_WaitOnTXEFlagUntilTimeout>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00d      	beq.n	800367a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	2b04      	cmp	r3, #4
 8003664:	d107      	bne.n	8003676 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003674:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e050      	b.n	800371c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800367a:	893b      	ldrh	r3, [r7, #8]
 800367c:	b2da      	uxtb	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003686:	6a39      	ldr	r1, [r7, #32]
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f000 f967 	bl	800395c <I2C_WaitOnTXEFlagUntilTimeout>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00d      	beq.n	80036b0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003698:	2b04      	cmp	r3, #4
 800369a:	d107      	bne.n	80036ac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036aa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e035      	b.n	800371c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036be:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	6a3b      	ldr	r3, [r7, #32]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	f000 f82b 	bl	8003728 <I2C_WaitOnFlagUntilTimeout>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00d      	beq.n	80036f4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036e6:	d103      	bne.n	80036f0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e013      	b.n	800371c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80036f4:	897b      	ldrh	r3, [r7, #10]
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	f043 0301 	orr.w	r3, r3, #1
 80036fc:	b2da      	uxtb	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003706:	6a3a      	ldr	r2, [r7, #32]
 8003708:	4906      	ldr	r1, [pc, #24]	; (8003724 <I2C_RequestMemoryRead+0x1cc>)
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f000 f886 	bl	800381c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e000      	b.n	800371c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3718      	adds	r7, #24
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	00010002 	.word	0x00010002

08003728 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	603b      	str	r3, [r7, #0]
 8003734:	4613      	mov	r3, r2
 8003736:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003738:	e048      	b.n	80037cc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003740:	d044      	beq.n	80037cc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003742:	f7fe fd45 	bl	80021d0 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	429a      	cmp	r2, r3
 8003750:	d302      	bcc.n	8003758 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d139      	bne.n	80037cc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	0c1b      	lsrs	r3, r3, #16
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b01      	cmp	r3, #1
 8003760:	d10d      	bne.n	800377e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	43da      	mvns	r2, r3
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	4013      	ands	r3, r2
 800376e:	b29b      	uxth	r3, r3
 8003770:	2b00      	cmp	r3, #0
 8003772:	bf0c      	ite	eq
 8003774:	2301      	moveq	r3, #1
 8003776:	2300      	movne	r3, #0
 8003778:	b2db      	uxtb	r3, r3
 800377a:	461a      	mov	r2, r3
 800377c:	e00c      	b.n	8003798 <I2C_WaitOnFlagUntilTimeout+0x70>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	43da      	mvns	r2, r3
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	4013      	ands	r3, r2
 800378a:	b29b      	uxth	r3, r3
 800378c:	2b00      	cmp	r3, #0
 800378e:	bf0c      	ite	eq
 8003790:	2301      	moveq	r3, #1
 8003792:	2300      	movne	r3, #0
 8003794:	b2db      	uxtb	r3, r3
 8003796:	461a      	mov	r2, r3
 8003798:	79fb      	ldrb	r3, [r7, #7]
 800379a:	429a      	cmp	r2, r3
 800379c:	d116      	bne.n	80037cc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2220      	movs	r2, #32
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b8:	f043 0220 	orr.w	r2, r3, #32
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e023      	b.n	8003814 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	0c1b      	lsrs	r3, r3, #16
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d10d      	bne.n	80037f2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	43da      	mvns	r2, r3
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	4013      	ands	r3, r2
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	bf0c      	ite	eq
 80037e8:	2301      	moveq	r3, #1
 80037ea:	2300      	movne	r3, #0
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	461a      	mov	r2, r3
 80037f0:	e00c      	b.n	800380c <I2C_WaitOnFlagUntilTimeout+0xe4>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	43da      	mvns	r2, r3
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	4013      	ands	r3, r2
 80037fe:	b29b      	uxth	r3, r3
 8003800:	2b00      	cmp	r3, #0
 8003802:	bf0c      	ite	eq
 8003804:	2301      	moveq	r3, #1
 8003806:	2300      	movne	r3, #0
 8003808:	b2db      	uxtb	r3, r3
 800380a:	461a      	mov	r2, r3
 800380c:	79fb      	ldrb	r3, [r7, #7]
 800380e:	429a      	cmp	r2, r3
 8003810:	d093      	beq.n	800373a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
 8003828:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800382a:	e071      	b.n	8003910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800383a:	d123      	bne.n	8003884 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800384a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003854:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2220      	movs	r2, #32
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003870:	f043 0204 	orr.w	r2, r3, #4
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e067      	b.n	8003954 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800388a:	d041      	beq.n	8003910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800388c:	f7fe fca0 	bl	80021d0 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	429a      	cmp	r2, r3
 800389a:	d302      	bcc.n	80038a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d136      	bne.n	8003910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	0c1b      	lsrs	r3, r3, #16
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d10c      	bne.n	80038c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	43da      	mvns	r2, r3
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	4013      	ands	r3, r2
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	bf14      	ite	ne
 80038be:	2301      	movne	r3, #1
 80038c0:	2300      	moveq	r3, #0
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	e00b      	b.n	80038de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	43da      	mvns	r2, r3
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	4013      	ands	r3, r2
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	bf14      	ite	ne
 80038d8:	2301      	movne	r3, #1
 80038da:	2300      	moveq	r3, #0
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d016      	beq.n	8003910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2220      	movs	r2, #32
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fc:	f043 0220 	orr.w	r2, r3, #32
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e021      	b.n	8003954 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	0c1b      	lsrs	r3, r3, #16
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b01      	cmp	r3, #1
 8003918:	d10c      	bne.n	8003934 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	43da      	mvns	r2, r3
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	4013      	ands	r3, r2
 8003926:	b29b      	uxth	r3, r3
 8003928:	2b00      	cmp	r3, #0
 800392a:	bf14      	ite	ne
 800392c:	2301      	movne	r3, #1
 800392e:	2300      	moveq	r3, #0
 8003930:	b2db      	uxtb	r3, r3
 8003932:	e00b      	b.n	800394c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	43da      	mvns	r2, r3
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	4013      	ands	r3, r2
 8003940:	b29b      	uxth	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	bf14      	ite	ne
 8003946:	2301      	movne	r3, #1
 8003948:	2300      	moveq	r3, #0
 800394a:	b2db      	uxtb	r3, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	f47f af6d 	bne.w	800382c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003968:	e034      	b.n	80039d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f000 f8e3 	bl	8003b36 <I2C_IsAcknowledgeFailed>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e034      	b.n	80039e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003980:	d028      	beq.n	80039d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003982:	f7fe fc25 	bl	80021d0 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	429a      	cmp	r2, r3
 8003990:	d302      	bcc.n	8003998 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d11d      	bne.n	80039d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a2:	2b80      	cmp	r3, #128	; 0x80
 80039a4:	d016      	beq.n	80039d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2220      	movs	r2, #32
 80039b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c0:	f043 0220 	orr.w	r2, r3, #32
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e007      	b.n	80039e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039de:	2b80      	cmp	r3, #128	; 0x80
 80039e0:	d1c3      	bne.n	800396a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039f8:	e034      	b.n	8003a64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f000 f89b 	bl	8003b36 <I2C_IsAcknowledgeFailed>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e034      	b.n	8003a74 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a10:	d028      	beq.n	8003a64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a12:	f7fe fbdd 	bl	80021d0 <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	68ba      	ldr	r2, [r7, #8]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d302      	bcc.n	8003a28 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d11d      	bne.n	8003a64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	f003 0304 	and.w	r3, r3, #4
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	d016      	beq.n	8003a64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2220      	movs	r2, #32
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a50:	f043 0220 	orr.w	r2, r3, #32
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e007      	b.n	8003a74 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	f003 0304 	and.w	r3, r3, #4
 8003a6e:	2b04      	cmp	r3, #4
 8003a70:	d1c3      	bne.n	80039fa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3710      	adds	r7, #16
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a88:	e049      	b.n	8003b1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	695b      	ldr	r3, [r3, #20]
 8003a90:	f003 0310 	and.w	r3, r3, #16
 8003a94:	2b10      	cmp	r3, #16
 8003a96:	d119      	bne.n	8003acc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f06f 0210 	mvn.w	r2, #16
 8003aa0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2220      	movs	r2, #32
 8003aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e030      	b.n	8003b2e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003acc:	f7fe fb80 	bl	80021d0 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	68ba      	ldr	r2, [r7, #8]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d302      	bcc.n	8003ae2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d11d      	bne.n	8003b1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aec:	2b40      	cmp	r3, #64	; 0x40
 8003aee:	d016      	beq.n	8003b1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2220      	movs	r2, #32
 8003afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0a:	f043 0220 	orr.w	r2, r3, #32
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e007      	b.n	8003b2e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	695b      	ldr	r3, [r3, #20]
 8003b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b28:	2b40      	cmp	r3, #64	; 0x40
 8003b2a:	d1ae      	bne.n	8003a8a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b36:	b480      	push	{r7}
 8003b38:	b083      	sub	sp, #12
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b4c:	d11b      	bne.n	8003b86 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b56:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2220      	movs	r2, #32
 8003b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b72:	f043 0204 	orr.w	r2, r3, #4
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e000      	b.n	8003b88 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e034      	b.n	8003c10 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8003bae:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f245 5255 	movw	r2, #21845	; 0x5555
 8003bb8:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	6852      	ldr	r2, [r2, #4]
 8003bc2:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	6892      	ldr	r2, [r2, #8]
 8003bcc:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003bce:	f7fe faff 	bl	80021d0 <HAL_GetTick>
 8003bd2:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003bd4:	e00f      	b.n	8003bf6 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003bd6:	f7fe fafb 	bl	80021d0 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b31      	cmp	r3, #49	; 0x31
 8003be2:	d908      	bls.n	8003bf6 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	f003 0303 	and.w	r3, r3, #3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e00c      	b.n	8003c10 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	f003 0303 	and.w	r3, r3, #3
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1e8      	bne.n	8003bd6 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003c0c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3710      	adds	r7, #16
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003c28:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003c42:	2300      	movs	r3, #0
 8003c44:	603b      	str	r3, [r7, #0]
 8003c46:	4b20      	ldr	r3, [pc, #128]	; (8003cc8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4a:	4a1f      	ldr	r2, [pc, #124]	; (8003cc8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c50:	6413      	str	r3, [r2, #64]	; 0x40
 8003c52:	4b1d      	ldr	r3, [pc, #116]	; (8003cc8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c5a:	603b      	str	r3, [r7, #0]
 8003c5c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003c5e:	4b1b      	ldr	r3, [pc, #108]	; (8003ccc <HAL_PWREx_EnableOverDrive+0x94>)
 8003c60:	2201      	movs	r2, #1
 8003c62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c64:	f7fe fab4 	bl	80021d0 <HAL_GetTick>
 8003c68:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c6a:	e009      	b.n	8003c80 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c6c:	f7fe fab0 	bl	80021d0 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c7a:	d901      	bls.n	8003c80 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e01f      	b.n	8003cc0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c80:	4b13      	ldr	r3, [pc, #76]	; (8003cd0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c8c:	d1ee      	bne.n	8003c6c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003c8e:	4b11      	ldr	r3, [pc, #68]	; (8003cd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c90:	2201      	movs	r2, #1
 8003c92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c94:	f7fe fa9c 	bl	80021d0 <HAL_GetTick>
 8003c98:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c9a:	e009      	b.n	8003cb0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c9c:	f7fe fa98 	bl	80021d0 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003caa:	d901      	bls.n	8003cb0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e007      	b.n	8003cc0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003cb0:	4b07      	ldr	r3, [pc, #28]	; (8003cd0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cbc:	d1ee      	bne.n	8003c9c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3708      	adds	r7, #8
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	40023800 	.word	0x40023800
 8003ccc:	420e0040 	.word	0x420e0040
 8003cd0:	40007000 	.word	0x40007000
 8003cd4:	420e0044 	.word	0x420e0044

08003cd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d101      	bne.n	8003cec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e0cc      	b.n	8003e86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cec:	4b68      	ldr	r3, [pc, #416]	; (8003e90 <HAL_RCC_ClockConfig+0x1b8>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 030f 	and.w	r3, r3, #15
 8003cf4:	683a      	ldr	r2, [r7, #0]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d90c      	bls.n	8003d14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cfa:	4b65      	ldr	r3, [pc, #404]	; (8003e90 <HAL_RCC_ClockConfig+0x1b8>)
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	b2d2      	uxtb	r2, r2
 8003d00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d02:	4b63      	ldr	r3, [pc, #396]	; (8003e90 <HAL_RCC_ClockConfig+0x1b8>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 030f 	and.w	r3, r3, #15
 8003d0a:	683a      	ldr	r2, [r7, #0]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d001      	beq.n	8003d14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e0b8      	b.n	8003e86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0302 	and.w	r3, r3, #2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d020      	beq.n	8003d62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0304 	and.w	r3, r3, #4
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d005      	beq.n	8003d38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d2c:	4b59      	ldr	r3, [pc, #356]	; (8003e94 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	4a58      	ldr	r2, [pc, #352]	; (8003e94 <HAL_RCC_ClockConfig+0x1bc>)
 8003d32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0308 	and.w	r3, r3, #8
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d005      	beq.n	8003d50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d44:	4b53      	ldr	r3, [pc, #332]	; (8003e94 <HAL_RCC_ClockConfig+0x1bc>)
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	4a52      	ldr	r2, [pc, #328]	; (8003e94 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d50:	4b50      	ldr	r3, [pc, #320]	; (8003e94 <HAL_RCC_ClockConfig+0x1bc>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	494d      	ldr	r1, [pc, #308]	; (8003e94 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d044      	beq.n	8003df8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d107      	bne.n	8003d86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d76:	4b47      	ldr	r3, [pc, #284]	; (8003e94 <HAL_RCC_ClockConfig+0x1bc>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d119      	bne.n	8003db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e07f      	b.n	8003e86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d003      	beq.n	8003d96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d92:	2b03      	cmp	r3, #3
 8003d94:	d107      	bne.n	8003da6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d96:	4b3f      	ldr	r3, [pc, #252]	; (8003e94 <HAL_RCC_ClockConfig+0x1bc>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d109      	bne.n	8003db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e06f      	b.n	8003e86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003da6:	4b3b      	ldr	r3, [pc, #236]	; (8003e94 <HAL_RCC_ClockConfig+0x1bc>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e067      	b.n	8003e86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003db6:	4b37      	ldr	r3, [pc, #220]	; (8003e94 <HAL_RCC_ClockConfig+0x1bc>)
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f023 0203 	bic.w	r2, r3, #3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	4934      	ldr	r1, [pc, #208]	; (8003e94 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003dc8:	f7fe fa02 	bl	80021d0 <HAL_GetTick>
 8003dcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dce:	e00a      	b.n	8003de6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dd0:	f7fe f9fe 	bl	80021d0 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e04f      	b.n	8003e86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003de6:	4b2b      	ldr	r3, [pc, #172]	; (8003e94 <HAL_RCC_ClockConfig+0x1bc>)
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f003 020c 	and.w	r2, r3, #12
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d1eb      	bne.n	8003dd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003df8:	4b25      	ldr	r3, [pc, #148]	; (8003e90 <HAL_RCC_ClockConfig+0x1b8>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 030f 	and.w	r3, r3, #15
 8003e00:	683a      	ldr	r2, [r7, #0]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d20c      	bcs.n	8003e20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e06:	4b22      	ldr	r3, [pc, #136]	; (8003e90 <HAL_RCC_ClockConfig+0x1b8>)
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	b2d2      	uxtb	r2, r2
 8003e0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e0e:	4b20      	ldr	r3, [pc, #128]	; (8003e90 <HAL_RCC_ClockConfig+0x1b8>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 030f 	and.w	r3, r3, #15
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d001      	beq.n	8003e20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e032      	b.n	8003e86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0304 	and.w	r3, r3, #4
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d008      	beq.n	8003e3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e2c:	4b19      	ldr	r3, [pc, #100]	; (8003e94 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	4916      	ldr	r1, [pc, #88]	; (8003e94 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0308 	and.w	r3, r3, #8
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d009      	beq.n	8003e5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e4a:	4b12      	ldr	r3, [pc, #72]	; (8003e94 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	00db      	lsls	r3, r3, #3
 8003e58:	490e      	ldr	r1, [pc, #56]	; (8003e94 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e5e:	f000 f887 	bl	8003f70 <HAL_RCC_GetSysClockFreq>
 8003e62:	4602      	mov	r2, r0
 8003e64:	4b0b      	ldr	r3, [pc, #44]	; (8003e94 <HAL_RCC_ClockConfig+0x1bc>)
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	091b      	lsrs	r3, r3, #4
 8003e6a:	f003 030f 	and.w	r3, r3, #15
 8003e6e:	490a      	ldr	r1, [pc, #40]	; (8003e98 <HAL_RCC_ClockConfig+0x1c0>)
 8003e70:	5ccb      	ldrb	r3, [r1, r3]
 8003e72:	fa22 f303 	lsr.w	r3, r2, r3
 8003e76:	4a09      	ldr	r2, [pc, #36]	; (8003e9c <HAL_RCC_ClockConfig+0x1c4>)
 8003e78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e7a:	4b09      	ldr	r3, [pc, #36]	; (8003ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7fd fb94 	bl	80015ac <HAL_InitTick>

  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	40023c00 	.word	0x40023c00
 8003e94:	40023800 	.word	0x40023800
 8003e98:	0800f498 	.word	0x0800f498
 8003e9c:	20000000 	.word	0x20000000
 8003ea0:	20000004 	.word	0x20000004

08003ea4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ea8:	4b03      	ldr	r3, [pc, #12]	; (8003eb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	20000000 	.word	0x20000000

08003ebc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ec0:	f7ff fff0 	bl	8003ea4 <HAL_RCC_GetHCLKFreq>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	4b05      	ldr	r3, [pc, #20]	; (8003edc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	0a9b      	lsrs	r3, r3, #10
 8003ecc:	f003 0307 	and.w	r3, r3, #7
 8003ed0:	4903      	ldr	r1, [pc, #12]	; (8003ee0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ed2:	5ccb      	ldrb	r3, [r1, r3]
 8003ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	40023800 	.word	0x40023800
 8003ee0:	0800f4a8 	.word	0x0800f4a8

08003ee4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ee8:	f7ff ffdc 	bl	8003ea4 <HAL_RCC_GetHCLKFreq>
 8003eec:	4602      	mov	r2, r0
 8003eee:	4b05      	ldr	r3, [pc, #20]	; (8003f04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	0b5b      	lsrs	r3, r3, #13
 8003ef4:	f003 0307 	and.w	r3, r3, #7
 8003ef8:	4903      	ldr	r1, [pc, #12]	; (8003f08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003efa:	5ccb      	ldrb	r3, [r1, r3]
 8003efc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	40023800 	.word	0x40023800
 8003f08:	0800f4a8 	.word	0x0800f4a8

08003f0c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	220f      	movs	r2, #15
 8003f1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003f1c:	4b12      	ldr	r3, [pc, #72]	; (8003f68 <HAL_RCC_GetClockConfig+0x5c>)
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f003 0203 	and.w	r2, r3, #3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003f28:	4b0f      	ldr	r3, [pc, #60]	; (8003f68 <HAL_RCC_GetClockConfig+0x5c>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003f34:	4b0c      	ldr	r3, [pc, #48]	; (8003f68 <HAL_RCC_GetClockConfig+0x5c>)
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003f40:	4b09      	ldr	r3, [pc, #36]	; (8003f68 <HAL_RCC_GetClockConfig+0x5c>)
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	08db      	lsrs	r3, r3, #3
 8003f46:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003f4e:	4b07      	ldr	r3, [pc, #28]	; (8003f6c <HAL_RCC_GetClockConfig+0x60>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 020f 	and.w	r2, r3, #15
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	601a      	str	r2, [r3, #0]
}
 8003f5a:	bf00      	nop
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	40023800 	.word	0x40023800
 8003f6c:	40023c00 	.word	0x40023c00

08003f70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f74:	b0ae      	sub	sp, #184	; 0xb8
 8003f76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003f84:	2300      	movs	r3, #0
 8003f86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003f90:	2300      	movs	r3, #0
 8003f92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f96:	4bcb      	ldr	r3, [pc, #812]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f003 030c 	and.w	r3, r3, #12
 8003f9e:	2b0c      	cmp	r3, #12
 8003fa0:	f200 8206 	bhi.w	80043b0 <HAL_RCC_GetSysClockFreq+0x440>
 8003fa4:	a201      	add	r2, pc, #4	; (adr r2, 8003fac <HAL_RCC_GetSysClockFreq+0x3c>)
 8003fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003faa:	bf00      	nop
 8003fac:	08003fe1 	.word	0x08003fe1
 8003fb0:	080043b1 	.word	0x080043b1
 8003fb4:	080043b1 	.word	0x080043b1
 8003fb8:	080043b1 	.word	0x080043b1
 8003fbc:	08003fe9 	.word	0x08003fe9
 8003fc0:	080043b1 	.word	0x080043b1
 8003fc4:	080043b1 	.word	0x080043b1
 8003fc8:	080043b1 	.word	0x080043b1
 8003fcc:	08003ff1 	.word	0x08003ff1
 8003fd0:	080043b1 	.word	0x080043b1
 8003fd4:	080043b1 	.word	0x080043b1
 8003fd8:	080043b1 	.word	0x080043b1
 8003fdc:	080041e1 	.word	0x080041e1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fe0:	4bb9      	ldr	r3, [pc, #740]	; (80042c8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003fe2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003fe6:	e1e7      	b.n	80043b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fe8:	4bb8      	ldr	r3, [pc, #736]	; (80042cc <HAL_RCC_GetSysClockFreq+0x35c>)
 8003fea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003fee:	e1e3      	b.n	80043b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ff0:	4bb4      	ldr	r3, [pc, #720]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ff8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ffc:	4bb1      	ldr	r3, [pc, #708]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d071      	beq.n	80040ec <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004008:	4bae      	ldr	r3, [pc, #696]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x354>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	099b      	lsrs	r3, r3, #6
 800400e:	2200      	movs	r2, #0
 8004010:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004014:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004018:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800401c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004020:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004024:	2300      	movs	r3, #0
 8004026:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800402a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800402e:	4622      	mov	r2, r4
 8004030:	462b      	mov	r3, r5
 8004032:	f04f 0000 	mov.w	r0, #0
 8004036:	f04f 0100 	mov.w	r1, #0
 800403a:	0159      	lsls	r1, r3, #5
 800403c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004040:	0150      	lsls	r0, r2, #5
 8004042:	4602      	mov	r2, r0
 8004044:	460b      	mov	r3, r1
 8004046:	4621      	mov	r1, r4
 8004048:	1a51      	subs	r1, r2, r1
 800404a:	6439      	str	r1, [r7, #64]	; 0x40
 800404c:	4629      	mov	r1, r5
 800404e:	eb63 0301 	sbc.w	r3, r3, r1
 8004052:	647b      	str	r3, [r7, #68]	; 0x44
 8004054:	f04f 0200 	mov.w	r2, #0
 8004058:	f04f 0300 	mov.w	r3, #0
 800405c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004060:	4649      	mov	r1, r9
 8004062:	018b      	lsls	r3, r1, #6
 8004064:	4641      	mov	r1, r8
 8004066:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800406a:	4641      	mov	r1, r8
 800406c:	018a      	lsls	r2, r1, #6
 800406e:	4641      	mov	r1, r8
 8004070:	1a51      	subs	r1, r2, r1
 8004072:	63b9      	str	r1, [r7, #56]	; 0x38
 8004074:	4649      	mov	r1, r9
 8004076:	eb63 0301 	sbc.w	r3, r3, r1
 800407a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800407c:	f04f 0200 	mov.w	r2, #0
 8004080:	f04f 0300 	mov.w	r3, #0
 8004084:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004088:	4649      	mov	r1, r9
 800408a:	00cb      	lsls	r3, r1, #3
 800408c:	4641      	mov	r1, r8
 800408e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004092:	4641      	mov	r1, r8
 8004094:	00ca      	lsls	r2, r1, #3
 8004096:	4610      	mov	r0, r2
 8004098:	4619      	mov	r1, r3
 800409a:	4603      	mov	r3, r0
 800409c:	4622      	mov	r2, r4
 800409e:	189b      	adds	r3, r3, r2
 80040a0:	633b      	str	r3, [r7, #48]	; 0x30
 80040a2:	462b      	mov	r3, r5
 80040a4:	460a      	mov	r2, r1
 80040a6:	eb42 0303 	adc.w	r3, r2, r3
 80040aa:	637b      	str	r3, [r7, #52]	; 0x34
 80040ac:	f04f 0200 	mov.w	r2, #0
 80040b0:	f04f 0300 	mov.w	r3, #0
 80040b4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80040b8:	4629      	mov	r1, r5
 80040ba:	024b      	lsls	r3, r1, #9
 80040bc:	4621      	mov	r1, r4
 80040be:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80040c2:	4621      	mov	r1, r4
 80040c4:	024a      	lsls	r2, r1, #9
 80040c6:	4610      	mov	r0, r2
 80040c8:	4619      	mov	r1, r3
 80040ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80040ce:	2200      	movs	r2, #0
 80040d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80040d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80040d8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80040dc:	f7fc fdc4 	bl	8000c68 <__aeabi_uldivmod>
 80040e0:	4602      	mov	r2, r0
 80040e2:	460b      	mov	r3, r1
 80040e4:	4613      	mov	r3, r2
 80040e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040ea:	e067      	b.n	80041bc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040ec:	4b75      	ldr	r3, [pc, #468]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	099b      	lsrs	r3, r3, #6
 80040f2:	2200      	movs	r2, #0
 80040f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80040f8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80040fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004104:	67bb      	str	r3, [r7, #120]	; 0x78
 8004106:	2300      	movs	r3, #0
 8004108:	67fb      	str	r3, [r7, #124]	; 0x7c
 800410a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800410e:	4622      	mov	r2, r4
 8004110:	462b      	mov	r3, r5
 8004112:	f04f 0000 	mov.w	r0, #0
 8004116:	f04f 0100 	mov.w	r1, #0
 800411a:	0159      	lsls	r1, r3, #5
 800411c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004120:	0150      	lsls	r0, r2, #5
 8004122:	4602      	mov	r2, r0
 8004124:	460b      	mov	r3, r1
 8004126:	4621      	mov	r1, r4
 8004128:	1a51      	subs	r1, r2, r1
 800412a:	62b9      	str	r1, [r7, #40]	; 0x28
 800412c:	4629      	mov	r1, r5
 800412e:	eb63 0301 	sbc.w	r3, r3, r1
 8004132:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004134:	f04f 0200 	mov.w	r2, #0
 8004138:	f04f 0300 	mov.w	r3, #0
 800413c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004140:	4649      	mov	r1, r9
 8004142:	018b      	lsls	r3, r1, #6
 8004144:	4641      	mov	r1, r8
 8004146:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800414a:	4641      	mov	r1, r8
 800414c:	018a      	lsls	r2, r1, #6
 800414e:	4641      	mov	r1, r8
 8004150:	ebb2 0a01 	subs.w	sl, r2, r1
 8004154:	4649      	mov	r1, r9
 8004156:	eb63 0b01 	sbc.w	fp, r3, r1
 800415a:	f04f 0200 	mov.w	r2, #0
 800415e:	f04f 0300 	mov.w	r3, #0
 8004162:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004166:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800416a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800416e:	4692      	mov	sl, r2
 8004170:	469b      	mov	fp, r3
 8004172:	4623      	mov	r3, r4
 8004174:	eb1a 0303 	adds.w	r3, sl, r3
 8004178:	623b      	str	r3, [r7, #32]
 800417a:	462b      	mov	r3, r5
 800417c:	eb4b 0303 	adc.w	r3, fp, r3
 8004180:	627b      	str	r3, [r7, #36]	; 0x24
 8004182:	f04f 0200 	mov.w	r2, #0
 8004186:	f04f 0300 	mov.w	r3, #0
 800418a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800418e:	4629      	mov	r1, r5
 8004190:	028b      	lsls	r3, r1, #10
 8004192:	4621      	mov	r1, r4
 8004194:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004198:	4621      	mov	r1, r4
 800419a:	028a      	lsls	r2, r1, #10
 800419c:	4610      	mov	r0, r2
 800419e:	4619      	mov	r1, r3
 80041a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80041a4:	2200      	movs	r2, #0
 80041a6:	673b      	str	r3, [r7, #112]	; 0x70
 80041a8:	677a      	str	r2, [r7, #116]	; 0x74
 80041aa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80041ae:	f7fc fd5b 	bl	8000c68 <__aeabi_uldivmod>
 80041b2:	4602      	mov	r2, r0
 80041b4:	460b      	mov	r3, r1
 80041b6:	4613      	mov	r3, r2
 80041b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041bc:	4b41      	ldr	r3, [pc, #260]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	0c1b      	lsrs	r3, r3, #16
 80041c2:	f003 0303 	and.w	r3, r3, #3
 80041c6:	3301      	adds	r3, #1
 80041c8:	005b      	lsls	r3, r3, #1
 80041ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80041ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80041d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80041d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80041de:	e0eb      	b.n	80043b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041e0:	4b38      	ldr	r3, [pc, #224]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041ec:	4b35      	ldr	r3, [pc, #212]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d06b      	beq.n	80042d0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041f8:	4b32      	ldr	r3, [pc, #200]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	099b      	lsrs	r3, r3, #6
 80041fe:	2200      	movs	r2, #0
 8004200:	66bb      	str	r3, [r7, #104]	; 0x68
 8004202:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004204:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800420a:	663b      	str	r3, [r7, #96]	; 0x60
 800420c:	2300      	movs	r3, #0
 800420e:	667b      	str	r3, [r7, #100]	; 0x64
 8004210:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004214:	4622      	mov	r2, r4
 8004216:	462b      	mov	r3, r5
 8004218:	f04f 0000 	mov.w	r0, #0
 800421c:	f04f 0100 	mov.w	r1, #0
 8004220:	0159      	lsls	r1, r3, #5
 8004222:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004226:	0150      	lsls	r0, r2, #5
 8004228:	4602      	mov	r2, r0
 800422a:	460b      	mov	r3, r1
 800422c:	4621      	mov	r1, r4
 800422e:	1a51      	subs	r1, r2, r1
 8004230:	61b9      	str	r1, [r7, #24]
 8004232:	4629      	mov	r1, r5
 8004234:	eb63 0301 	sbc.w	r3, r3, r1
 8004238:	61fb      	str	r3, [r7, #28]
 800423a:	f04f 0200 	mov.w	r2, #0
 800423e:	f04f 0300 	mov.w	r3, #0
 8004242:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004246:	4659      	mov	r1, fp
 8004248:	018b      	lsls	r3, r1, #6
 800424a:	4651      	mov	r1, sl
 800424c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004250:	4651      	mov	r1, sl
 8004252:	018a      	lsls	r2, r1, #6
 8004254:	4651      	mov	r1, sl
 8004256:	ebb2 0801 	subs.w	r8, r2, r1
 800425a:	4659      	mov	r1, fp
 800425c:	eb63 0901 	sbc.w	r9, r3, r1
 8004260:	f04f 0200 	mov.w	r2, #0
 8004264:	f04f 0300 	mov.w	r3, #0
 8004268:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800426c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004270:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004274:	4690      	mov	r8, r2
 8004276:	4699      	mov	r9, r3
 8004278:	4623      	mov	r3, r4
 800427a:	eb18 0303 	adds.w	r3, r8, r3
 800427e:	613b      	str	r3, [r7, #16]
 8004280:	462b      	mov	r3, r5
 8004282:	eb49 0303 	adc.w	r3, r9, r3
 8004286:	617b      	str	r3, [r7, #20]
 8004288:	f04f 0200 	mov.w	r2, #0
 800428c:	f04f 0300 	mov.w	r3, #0
 8004290:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004294:	4629      	mov	r1, r5
 8004296:	024b      	lsls	r3, r1, #9
 8004298:	4621      	mov	r1, r4
 800429a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800429e:	4621      	mov	r1, r4
 80042a0:	024a      	lsls	r2, r1, #9
 80042a2:	4610      	mov	r0, r2
 80042a4:	4619      	mov	r1, r3
 80042a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80042aa:	2200      	movs	r2, #0
 80042ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80042ae:	65fa      	str	r2, [r7, #92]	; 0x5c
 80042b0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80042b4:	f7fc fcd8 	bl	8000c68 <__aeabi_uldivmod>
 80042b8:	4602      	mov	r2, r0
 80042ba:	460b      	mov	r3, r1
 80042bc:	4613      	mov	r3, r2
 80042be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80042c2:	e065      	b.n	8004390 <HAL_RCC_GetSysClockFreq+0x420>
 80042c4:	40023800 	.word	0x40023800
 80042c8:	00f42400 	.word	0x00f42400
 80042cc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042d0:	4b3d      	ldr	r3, [pc, #244]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x458>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	099b      	lsrs	r3, r3, #6
 80042d6:	2200      	movs	r2, #0
 80042d8:	4618      	mov	r0, r3
 80042da:	4611      	mov	r1, r2
 80042dc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80042e0:	653b      	str	r3, [r7, #80]	; 0x50
 80042e2:	2300      	movs	r3, #0
 80042e4:	657b      	str	r3, [r7, #84]	; 0x54
 80042e6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80042ea:	4642      	mov	r2, r8
 80042ec:	464b      	mov	r3, r9
 80042ee:	f04f 0000 	mov.w	r0, #0
 80042f2:	f04f 0100 	mov.w	r1, #0
 80042f6:	0159      	lsls	r1, r3, #5
 80042f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042fc:	0150      	lsls	r0, r2, #5
 80042fe:	4602      	mov	r2, r0
 8004300:	460b      	mov	r3, r1
 8004302:	4641      	mov	r1, r8
 8004304:	1a51      	subs	r1, r2, r1
 8004306:	60b9      	str	r1, [r7, #8]
 8004308:	4649      	mov	r1, r9
 800430a:	eb63 0301 	sbc.w	r3, r3, r1
 800430e:	60fb      	str	r3, [r7, #12]
 8004310:	f04f 0200 	mov.w	r2, #0
 8004314:	f04f 0300 	mov.w	r3, #0
 8004318:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800431c:	4659      	mov	r1, fp
 800431e:	018b      	lsls	r3, r1, #6
 8004320:	4651      	mov	r1, sl
 8004322:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004326:	4651      	mov	r1, sl
 8004328:	018a      	lsls	r2, r1, #6
 800432a:	4651      	mov	r1, sl
 800432c:	1a54      	subs	r4, r2, r1
 800432e:	4659      	mov	r1, fp
 8004330:	eb63 0501 	sbc.w	r5, r3, r1
 8004334:	f04f 0200 	mov.w	r2, #0
 8004338:	f04f 0300 	mov.w	r3, #0
 800433c:	00eb      	lsls	r3, r5, #3
 800433e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004342:	00e2      	lsls	r2, r4, #3
 8004344:	4614      	mov	r4, r2
 8004346:	461d      	mov	r5, r3
 8004348:	4643      	mov	r3, r8
 800434a:	18e3      	adds	r3, r4, r3
 800434c:	603b      	str	r3, [r7, #0]
 800434e:	464b      	mov	r3, r9
 8004350:	eb45 0303 	adc.w	r3, r5, r3
 8004354:	607b      	str	r3, [r7, #4]
 8004356:	f04f 0200 	mov.w	r2, #0
 800435a:	f04f 0300 	mov.w	r3, #0
 800435e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004362:	4629      	mov	r1, r5
 8004364:	028b      	lsls	r3, r1, #10
 8004366:	4621      	mov	r1, r4
 8004368:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800436c:	4621      	mov	r1, r4
 800436e:	028a      	lsls	r2, r1, #10
 8004370:	4610      	mov	r0, r2
 8004372:	4619      	mov	r1, r3
 8004374:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004378:	2200      	movs	r2, #0
 800437a:	64bb      	str	r3, [r7, #72]	; 0x48
 800437c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800437e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004382:	f7fc fc71 	bl	8000c68 <__aeabi_uldivmod>
 8004386:	4602      	mov	r2, r0
 8004388:	460b      	mov	r3, r1
 800438a:	4613      	mov	r3, r2
 800438c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004390:	4b0d      	ldr	r3, [pc, #52]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x458>)
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	0f1b      	lsrs	r3, r3, #28
 8004396:	f003 0307 	and.w	r3, r3, #7
 800439a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800439e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80043a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80043a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80043ae:	e003      	b.n	80043b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043b0:	4b06      	ldr	r3, [pc, #24]	; (80043cc <HAL_RCC_GetSysClockFreq+0x45c>)
 80043b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80043b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	37b8      	adds	r7, #184	; 0xb8
 80043c0:	46bd      	mov	sp, r7
 80043c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043c6:	bf00      	nop
 80043c8:	40023800 	.word	0x40023800
 80043cc:	00f42400 	.word	0x00f42400

080043d0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b086      	sub	sp, #24
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e28d      	b.n	80048fe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	f000 8083 	beq.w	80044f6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80043f0:	4b94      	ldr	r3, [pc, #592]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f003 030c 	and.w	r3, r3, #12
 80043f8:	2b04      	cmp	r3, #4
 80043fa:	d019      	beq.n	8004430 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80043fc:	4b91      	ldr	r3, [pc, #580]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004404:	2b08      	cmp	r3, #8
 8004406:	d106      	bne.n	8004416 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004408:	4b8e      	ldr	r3, [pc, #568]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004410:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004414:	d00c      	beq.n	8004430 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004416:	4b8b      	ldr	r3, [pc, #556]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800441e:	2b0c      	cmp	r3, #12
 8004420:	d112      	bne.n	8004448 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004422:	4b88      	ldr	r3, [pc, #544]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800442a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800442e:	d10b      	bne.n	8004448 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004430:	4b84      	ldr	r3, [pc, #528]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d05b      	beq.n	80044f4 <HAL_RCC_OscConfig+0x124>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d157      	bne.n	80044f4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e25a      	b.n	80048fe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004450:	d106      	bne.n	8004460 <HAL_RCC_OscConfig+0x90>
 8004452:	4b7c      	ldr	r3, [pc, #496]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a7b      	ldr	r2, [pc, #492]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 8004458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800445c:	6013      	str	r3, [r2, #0]
 800445e:	e01d      	b.n	800449c <HAL_RCC_OscConfig+0xcc>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004468:	d10c      	bne.n	8004484 <HAL_RCC_OscConfig+0xb4>
 800446a:	4b76      	ldr	r3, [pc, #472]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a75      	ldr	r2, [pc, #468]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 8004470:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004474:	6013      	str	r3, [r2, #0]
 8004476:	4b73      	ldr	r3, [pc, #460]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a72      	ldr	r2, [pc, #456]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 800447c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004480:	6013      	str	r3, [r2, #0]
 8004482:	e00b      	b.n	800449c <HAL_RCC_OscConfig+0xcc>
 8004484:	4b6f      	ldr	r3, [pc, #444]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a6e      	ldr	r2, [pc, #440]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 800448a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800448e:	6013      	str	r3, [r2, #0]
 8004490:	4b6c      	ldr	r3, [pc, #432]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a6b      	ldr	r2, [pc, #428]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 8004496:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800449a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d013      	beq.n	80044cc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a4:	f7fd fe94 	bl	80021d0 <HAL_GetTick>
 80044a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044aa:	e008      	b.n	80044be <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044ac:	f7fd fe90 	bl	80021d0 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	2b64      	cmp	r3, #100	; 0x64
 80044b8:	d901      	bls.n	80044be <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e21f      	b.n	80048fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044be:	4b61      	ldr	r3, [pc, #388]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d0f0      	beq.n	80044ac <HAL_RCC_OscConfig+0xdc>
 80044ca:	e014      	b.n	80044f6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044cc:	f7fd fe80 	bl	80021d0 <HAL_GetTick>
 80044d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044d2:	e008      	b.n	80044e6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044d4:	f7fd fe7c 	bl	80021d0 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b64      	cmp	r3, #100	; 0x64
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e20b      	b.n	80048fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044e6:	4b57      	ldr	r3, [pc, #348]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1f0      	bne.n	80044d4 <HAL_RCC_OscConfig+0x104>
 80044f2:	e000      	b.n	80044f6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d06f      	beq.n	80045e2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004502:	4b50      	ldr	r3, [pc, #320]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f003 030c 	and.w	r3, r3, #12
 800450a:	2b00      	cmp	r3, #0
 800450c:	d017      	beq.n	800453e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800450e:	4b4d      	ldr	r3, [pc, #308]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004516:	2b08      	cmp	r3, #8
 8004518:	d105      	bne.n	8004526 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800451a:	4b4a      	ldr	r3, [pc, #296]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00b      	beq.n	800453e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004526:	4b47      	ldr	r3, [pc, #284]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800452e:	2b0c      	cmp	r3, #12
 8004530:	d11c      	bne.n	800456c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004532:	4b44      	ldr	r3, [pc, #272]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d116      	bne.n	800456c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800453e:	4b41      	ldr	r3, [pc, #260]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b00      	cmp	r3, #0
 8004548:	d005      	beq.n	8004556 <HAL_RCC_OscConfig+0x186>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	2b01      	cmp	r3, #1
 8004550:	d001      	beq.n	8004556 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e1d3      	b.n	80048fe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004556:	4b3b      	ldr	r3, [pc, #236]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	00db      	lsls	r3, r3, #3
 8004564:	4937      	ldr	r1, [pc, #220]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 8004566:	4313      	orrs	r3, r2
 8004568:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800456a:	e03a      	b.n	80045e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d020      	beq.n	80045b6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004574:	4b34      	ldr	r3, [pc, #208]	; (8004648 <HAL_RCC_OscConfig+0x278>)
 8004576:	2201      	movs	r2, #1
 8004578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800457a:	f7fd fe29 	bl	80021d0 <HAL_GetTick>
 800457e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004580:	e008      	b.n	8004594 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004582:	f7fd fe25 	bl	80021d0 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b02      	cmp	r3, #2
 800458e:	d901      	bls.n	8004594 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e1b4      	b.n	80048fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004594:	4b2b      	ldr	r3, [pc, #172]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	2b00      	cmp	r3, #0
 800459e:	d0f0      	beq.n	8004582 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045a0:	4b28      	ldr	r3, [pc, #160]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	00db      	lsls	r3, r3, #3
 80045ae:	4925      	ldr	r1, [pc, #148]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	600b      	str	r3, [r1, #0]
 80045b4:	e015      	b.n	80045e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045b6:	4b24      	ldr	r3, [pc, #144]	; (8004648 <HAL_RCC_OscConfig+0x278>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045bc:	f7fd fe08 	bl	80021d0 <HAL_GetTick>
 80045c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045c2:	e008      	b.n	80045d6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045c4:	f7fd fe04 	bl	80021d0 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e193      	b.n	80048fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045d6:	4b1b      	ldr	r3, [pc, #108]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1f0      	bne.n	80045c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0308 	and.w	r3, r3, #8
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d036      	beq.n	800465c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d016      	beq.n	8004624 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045f6:	4b15      	ldr	r3, [pc, #84]	; (800464c <HAL_RCC_OscConfig+0x27c>)
 80045f8:	2201      	movs	r2, #1
 80045fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045fc:	f7fd fde8 	bl	80021d0 <HAL_GetTick>
 8004600:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004602:	e008      	b.n	8004616 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004604:	f7fd fde4 	bl	80021d0 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b02      	cmp	r3, #2
 8004610:	d901      	bls.n	8004616 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e173      	b.n	80048fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004616:	4b0b      	ldr	r3, [pc, #44]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 8004618:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d0f0      	beq.n	8004604 <HAL_RCC_OscConfig+0x234>
 8004622:	e01b      	b.n	800465c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004624:	4b09      	ldr	r3, [pc, #36]	; (800464c <HAL_RCC_OscConfig+0x27c>)
 8004626:	2200      	movs	r2, #0
 8004628:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800462a:	f7fd fdd1 	bl	80021d0 <HAL_GetTick>
 800462e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004630:	e00e      	b.n	8004650 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004632:	f7fd fdcd 	bl	80021d0 <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	2b02      	cmp	r3, #2
 800463e:	d907      	bls.n	8004650 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e15c      	b.n	80048fe <HAL_RCC_OscConfig+0x52e>
 8004644:	40023800 	.word	0x40023800
 8004648:	42470000 	.word	0x42470000
 800464c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004650:	4b8a      	ldr	r3, [pc, #552]	; (800487c <HAL_RCC_OscConfig+0x4ac>)
 8004652:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1ea      	bne.n	8004632 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0304 	and.w	r3, r3, #4
 8004664:	2b00      	cmp	r3, #0
 8004666:	f000 8097 	beq.w	8004798 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800466a:	2300      	movs	r3, #0
 800466c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800466e:	4b83      	ldr	r3, [pc, #524]	; (800487c <HAL_RCC_OscConfig+0x4ac>)
 8004670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10f      	bne.n	800469a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800467a:	2300      	movs	r3, #0
 800467c:	60bb      	str	r3, [r7, #8]
 800467e:	4b7f      	ldr	r3, [pc, #508]	; (800487c <HAL_RCC_OscConfig+0x4ac>)
 8004680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004682:	4a7e      	ldr	r2, [pc, #504]	; (800487c <HAL_RCC_OscConfig+0x4ac>)
 8004684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004688:	6413      	str	r3, [r2, #64]	; 0x40
 800468a:	4b7c      	ldr	r3, [pc, #496]	; (800487c <HAL_RCC_OscConfig+0x4ac>)
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004692:	60bb      	str	r3, [r7, #8]
 8004694:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004696:	2301      	movs	r3, #1
 8004698:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800469a:	4b79      	ldr	r3, [pc, #484]	; (8004880 <HAL_RCC_OscConfig+0x4b0>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d118      	bne.n	80046d8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046a6:	4b76      	ldr	r3, [pc, #472]	; (8004880 <HAL_RCC_OscConfig+0x4b0>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a75      	ldr	r2, [pc, #468]	; (8004880 <HAL_RCC_OscConfig+0x4b0>)
 80046ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046b2:	f7fd fd8d 	bl	80021d0 <HAL_GetTick>
 80046b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046b8:	e008      	b.n	80046cc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046ba:	f7fd fd89 	bl	80021d0 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d901      	bls.n	80046cc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e118      	b.n	80048fe <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046cc:	4b6c      	ldr	r3, [pc, #432]	; (8004880 <HAL_RCC_OscConfig+0x4b0>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d0f0      	beq.n	80046ba <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d106      	bne.n	80046ee <HAL_RCC_OscConfig+0x31e>
 80046e0:	4b66      	ldr	r3, [pc, #408]	; (800487c <HAL_RCC_OscConfig+0x4ac>)
 80046e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e4:	4a65      	ldr	r2, [pc, #404]	; (800487c <HAL_RCC_OscConfig+0x4ac>)
 80046e6:	f043 0301 	orr.w	r3, r3, #1
 80046ea:	6713      	str	r3, [r2, #112]	; 0x70
 80046ec:	e01c      	b.n	8004728 <HAL_RCC_OscConfig+0x358>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	2b05      	cmp	r3, #5
 80046f4:	d10c      	bne.n	8004710 <HAL_RCC_OscConfig+0x340>
 80046f6:	4b61      	ldr	r3, [pc, #388]	; (800487c <HAL_RCC_OscConfig+0x4ac>)
 80046f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fa:	4a60      	ldr	r2, [pc, #384]	; (800487c <HAL_RCC_OscConfig+0x4ac>)
 80046fc:	f043 0304 	orr.w	r3, r3, #4
 8004700:	6713      	str	r3, [r2, #112]	; 0x70
 8004702:	4b5e      	ldr	r3, [pc, #376]	; (800487c <HAL_RCC_OscConfig+0x4ac>)
 8004704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004706:	4a5d      	ldr	r2, [pc, #372]	; (800487c <HAL_RCC_OscConfig+0x4ac>)
 8004708:	f043 0301 	orr.w	r3, r3, #1
 800470c:	6713      	str	r3, [r2, #112]	; 0x70
 800470e:	e00b      	b.n	8004728 <HAL_RCC_OscConfig+0x358>
 8004710:	4b5a      	ldr	r3, [pc, #360]	; (800487c <HAL_RCC_OscConfig+0x4ac>)
 8004712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004714:	4a59      	ldr	r2, [pc, #356]	; (800487c <HAL_RCC_OscConfig+0x4ac>)
 8004716:	f023 0301 	bic.w	r3, r3, #1
 800471a:	6713      	str	r3, [r2, #112]	; 0x70
 800471c:	4b57      	ldr	r3, [pc, #348]	; (800487c <HAL_RCC_OscConfig+0x4ac>)
 800471e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004720:	4a56      	ldr	r2, [pc, #344]	; (800487c <HAL_RCC_OscConfig+0x4ac>)
 8004722:	f023 0304 	bic.w	r3, r3, #4
 8004726:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d015      	beq.n	800475c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004730:	f7fd fd4e 	bl	80021d0 <HAL_GetTick>
 8004734:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004736:	e00a      	b.n	800474e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004738:	f7fd fd4a 	bl	80021d0 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	f241 3288 	movw	r2, #5000	; 0x1388
 8004746:	4293      	cmp	r3, r2
 8004748:	d901      	bls.n	800474e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e0d7      	b.n	80048fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800474e:	4b4b      	ldr	r3, [pc, #300]	; (800487c <HAL_RCC_OscConfig+0x4ac>)
 8004750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b00      	cmp	r3, #0
 8004758:	d0ee      	beq.n	8004738 <HAL_RCC_OscConfig+0x368>
 800475a:	e014      	b.n	8004786 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800475c:	f7fd fd38 	bl	80021d0 <HAL_GetTick>
 8004760:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004762:	e00a      	b.n	800477a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004764:	f7fd fd34 	bl	80021d0 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004772:	4293      	cmp	r3, r2
 8004774:	d901      	bls.n	800477a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e0c1      	b.n	80048fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800477a:	4b40      	ldr	r3, [pc, #256]	; (800487c <HAL_RCC_OscConfig+0x4ac>)
 800477c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1ee      	bne.n	8004764 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004786:	7dfb      	ldrb	r3, [r7, #23]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d105      	bne.n	8004798 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800478c:	4b3b      	ldr	r3, [pc, #236]	; (800487c <HAL_RCC_OscConfig+0x4ac>)
 800478e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004790:	4a3a      	ldr	r2, [pc, #232]	; (800487c <HAL_RCC_OscConfig+0x4ac>)
 8004792:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004796:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	2b00      	cmp	r3, #0
 800479e:	f000 80ad 	beq.w	80048fc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047a2:	4b36      	ldr	r3, [pc, #216]	; (800487c <HAL_RCC_OscConfig+0x4ac>)
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f003 030c 	and.w	r3, r3, #12
 80047aa:	2b08      	cmp	r3, #8
 80047ac:	d060      	beq.n	8004870 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d145      	bne.n	8004842 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047b6:	4b33      	ldr	r3, [pc, #204]	; (8004884 <HAL_RCC_OscConfig+0x4b4>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047bc:	f7fd fd08 	bl	80021d0 <HAL_GetTick>
 80047c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047c2:	e008      	b.n	80047d6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047c4:	f7fd fd04 	bl	80021d0 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e093      	b.n	80048fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047d6:	4b29      	ldr	r3, [pc, #164]	; (800487c <HAL_RCC_OscConfig+0x4ac>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1f0      	bne.n	80047c4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	69da      	ldr	r2, [r3, #28]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	431a      	orrs	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f0:	019b      	lsls	r3, r3, #6
 80047f2:	431a      	orrs	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f8:	085b      	lsrs	r3, r3, #1
 80047fa:	3b01      	subs	r3, #1
 80047fc:	041b      	lsls	r3, r3, #16
 80047fe:	431a      	orrs	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004804:	061b      	lsls	r3, r3, #24
 8004806:	431a      	orrs	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480c:	071b      	lsls	r3, r3, #28
 800480e:	491b      	ldr	r1, [pc, #108]	; (800487c <HAL_RCC_OscConfig+0x4ac>)
 8004810:	4313      	orrs	r3, r2
 8004812:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004814:	4b1b      	ldr	r3, [pc, #108]	; (8004884 <HAL_RCC_OscConfig+0x4b4>)
 8004816:	2201      	movs	r2, #1
 8004818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800481a:	f7fd fcd9 	bl	80021d0 <HAL_GetTick>
 800481e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004820:	e008      	b.n	8004834 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004822:	f7fd fcd5 	bl	80021d0 <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	2b02      	cmp	r3, #2
 800482e:	d901      	bls.n	8004834 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e064      	b.n	80048fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004834:	4b11      	ldr	r3, [pc, #68]	; (800487c <HAL_RCC_OscConfig+0x4ac>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d0f0      	beq.n	8004822 <HAL_RCC_OscConfig+0x452>
 8004840:	e05c      	b.n	80048fc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004842:	4b10      	ldr	r3, [pc, #64]	; (8004884 <HAL_RCC_OscConfig+0x4b4>)
 8004844:	2200      	movs	r2, #0
 8004846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004848:	f7fd fcc2 	bl	80021d0 <HAL_GetTick>
 800484c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800484e:	e008      	b.n	8004862 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004850:	f7fd fcbe 	bl	80021d0 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b02      	cmp	r3, #2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e04d      	b.n	80048fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004862:	4b06      	ldr	r3, [pc, #24]	; (800487c <HAL_RCC_OscConfig+0x4ac>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1f0      	bne.n	8004850 <HAL_RCC_OscConfig+0x480>
 800486e:	e045      	b.n	80048fc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d107      	bne.n	8004888 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e040      	b.n	80048fe <HAL_RCC_OscConfig+0x52e>
 800487c:	40023800 	.word	0x40023800
 8004880:	40007000 	.word	0x40007000
 8004884:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004888:	4b1f      	ldr	r3, [pc, #124]	; (8004908 <HAL_RCC_OscConfig+0x538>)
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d030      	beq.n	80048f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d129      	bne.n	80048f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d122      	bne.n	80048f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80048b8:	4013      	ands	r3, r2
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d119      	bne.n	80048f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ce:	085b      	lsrs	r3, r3, #1
 80048d0:	3b01      	subs	r3, #1
 80048d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d10f      	bne.n	80048f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d107      	bne.n	80048f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d001      	beq.n	80048fc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e000      	b.n	80048fe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3718      	adds	r7, #24
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	40023800 	.word	0x40023800

0800490c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e07b      	b.n	8004a16 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004922:	2b00      	cmp	r3, #0
 8004924:	d108      	bne.n	8004938 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800492e:	d009      	beq.n	8004944 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	61da      	str	r2, [r3, #28]
 8004936:	e005      	b.n	8004944 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	d106      	bne.n	8004964 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f7fc fd5a 	bl	8001418 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2202      	movs	r2, #2
 8004968:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800497a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800498c:	431a      	orrs	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004996:	431a      	orrs	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	f003 0302 	and.w	r3, r3, #2
 80049a0:	431a      	orrs	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	431a      	orrs	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049b4:	431a      	orrs	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	69db      	ldr	r3, [r3, #28]
 80049ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049be:	431a      	orrs	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a1b      	ldr	r3, [r3, #32]
 80049c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c8:	ea42 0103 	orr.w	r1, r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	430a      	orrs	r2, r1
 80049da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	0c1b      	lsrs	r3, r3, #16
 80049e2:	f003 0104 	and.w	r1, r3, #4
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ea:	f003 0210 	and.w	r2, r3, #16
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	430a      	orrs	r2, r1
 80049f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	69da      	ldr	r2, [r3, #28]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3708      	adds	r7, #8
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b088      	sub	sp, #32
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	60f8      	str	r0, [r7, #12]
 8004a26:	60b9      	str	r1, [r7, #8]
 8004a28:	603b      	str	r3, [r7, #0]
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d101      	bne.n	8004a40 <HAL_SPI_Transmit+0x22>
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	e12d      	b.n	8004c9c <HAL_SPI_Transmit+0x27e>
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a48:	f7fd fbc2 	bl	80021d0 <HAL_GetTick>
 8004a4c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004a4e:	88fb      	ldrh	r3, [r7, #6]
 8004a50:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d002      	beq.n	8004a64 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004a5e:	2302      	movs	r3, #2
 8004a60:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a62:	e116      	b.n	8004c92 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d002      	beq.n	8004a70 <HAL_SPI_Transmit+0x52>
 8004a6a:	88fb      	ldrh	r3, [r7, #6]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d102      	bne.n	8004a76 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a74:	e10d      	b.n	8004c92 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2203      	movs	r2, #3
 8004a7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2200      	movs	r2, #0
 8004a82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	68ba      	ldr	r2, [r7, #8]
 8004a88:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	88fa      	ldrh	r2, [r7, #6]
 8004a8e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	88fa      	ldrh	r2, [r7, #6]
 8004a94:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004abc:	d10f      	bne.n	8004ade <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004acc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004adc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae8:	2b40      	cmp	r3, #64	; 0x40
 8004aea:	d007      	beq.n	8004afc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004afa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b04:	d14f      	bne.n	8004ba6 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d002      	beq.n	8004b14 <HAL_SPI_Transmit+0xf6>
 8004b0e:	8afb      	ldrh	r3, [r7, #22]
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d142      	bne.n	8004b9a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b18:	881a      	ldrh	r2, [r3, #0]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b24:	1c9a      	adds	r2, r3, #2
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	3b01      	subs	r3, #1
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004b38:	e02f      	b.n	8004b9a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f003 0302 	and.w	r3, r3, #2
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d112      	bne.n	8004b6e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4c:	881a      	ldrh	r2, [r3, #0]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b58:	1c9a      	adds	r2, r3, #2
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	3b01      	subs	r3, #1
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b6c:	e015      	b.n	8004b9a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b6e:	f7fd fb2f 	bl	80021d0 <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d803      	bhi.n	8004b86 <HAL_SPI_Transmit+0x168>
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b84:	d102      	bne.n	8004b8c <HAL_SPI_Transmit+0x16e>
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d106      	bne.n	8004b9a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004b98:	e07b      	b.n	8004c92 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1ca      	bne.n	8004b3a <HAL_SPI_Transmit+0x11c>
 8004ba4:	e050      	b.n	8004c48 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d002      	beq.n	8004bb4 <HAL_SPI_Transmit+0x196>
 8004bae:	8afb      	ldrh	r3, [r7, #22]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d144      	bne.n	8004c3e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	330c      	adds	r3, #12
 8004bbe:	7812      	ldrb	r2, [r2, #0]
 8004bc0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc6:	1c5a      	adds	r2, r3, #1
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004bda:	e030      	b.n	8004c3e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d113      	bne.n	8004c12 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	330c      	adds	r3, #12
 8004bf4:	7812      	ldrb	r2, [r2, #0]
 8004bf6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfc:	1c5a      	adds	r2, r3, #1
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004c10:	e015      	b.n	8004c3e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c12:	f7fd fadd 	bl	80021d0 <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	683a      	ldr	r2, [r7, #0]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d803      	bhi.n	8004c2a <HAL_SPI_Transmit+0x20c>
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c28:	d102      	bne.n	8004c30 <HAL_SPI_Transmit+0x212>
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d106      	bne.n	8004c3e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004c3c:	e029      	b.n	8004c92 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1c9      	bne.n	8004bdc <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c48:	69ba      	ldr	r2, [r7, #24]
 8004c4a:	6839      	ldr	r1, [r7, #0]
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f000 fa6f 	bl	8005130 <SPI_EndRxTxTransaction>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d002      	beq.n	8004c5e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2220      	movs	r2, #32
 8004c5c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d10a      	bne.n	8004c7c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c66:	2300      	movs	r3, #0
 8004c68:	613b      	str	r3, [r7, #16]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	613b      	str	r3, [r7, #16]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	613b      	str	r3, [r7, #16]
 8004c7a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d002      	beq.n	8004c8a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	77fb      	strb	r3, [r7, #31]
 8004c88:	e003      	b.n	8004c92 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3720      	adds	r7, #32
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b08c      	sub	sp, #48	; 0x30
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	607a      	str	r2, [r7, #4]
 8004cb0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d101      	bne.n	8004cca <HAL_SPI_TransmitReceive+0x26>
 8004cc6:	2302      	movs	r3, #2
 8004cc8:	e198      	b.n	8004ffc <HAL_SPI_TransmitReceive+0x358>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cd2:	f7fd fa7d 	bl	80021d0 <HAL_GetTick>
 8004cd6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004ce8:	887b      	ldrh	r3, [r7, #2]
 8004cea:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004cec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d00f      	beq.n	8004d14 <HAL_SPI_TransmitReceive+0x70>
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cfa:	d107      	bne.n	8004d0c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d103      	bne.n	8004d0c <HAL_SPI_TransmitReceive+0x68>
 8004d04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d08:	2b04      	cmp	r3, #4
 8004d0a:	d003      	beq.n	8004d14 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004d12:	e16d      	b.n	8004ff0 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d005      	beq.n	8004d26 <HAL_SPI_TransmitReceive+0x82>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d002      	beq.n	8004d26 <HAL_SPI_TransmitReceive+0x82>
 8004d20:	887b      	ldrh	r3, [r7, #2]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d103      	bne.n	8004d2e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004d2c:	e160      	b.n	8004ff0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b04      	cmp	r3, #4
 8004d38:	d003      	beq.n	8004d42 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2205      	movs	r2, #5
 8004d3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2200      	movs	r2, #0
 8004d46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	887a      	ldrh	r2, [r7, #2]
 8004d52:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	887a      	ldrh	r2, [r7, #2]
 8004d58:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	68ba      	ldr	r2, [r7, #8]
 8004d5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	887a      	ldrh	r2, [r7, #2]
 8004d64:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	887a      	ldrh	r2, [r7, #2]
 8004d6a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d82:	2b40      	cmp	r3, #64	; 0x40
 8004d84:	d007      	beq.n	8004d96 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d94:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d9e:	d17c      	bne.n	8004e9a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d002      	beq.n	8004dae <HAL_SPI_TransmitReceive+0x10a>
 8004da8:	8b7b      	ldrh	r3, [r7, #26]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d16a      	bne.n	8004e84 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db2:	881a      	ldrh	r2, [r3, #0]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dbe:	1c9a      	adds	r2, r3, #2
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	b29a      	uxth	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dd2:	e057      	b.n	8004e84 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d11b      	bne.n	8004e1a <HAL_SPI_TransmitReceive+0x176>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d016      	beq.n	8004e1a <HAL_SPI_TransmitReceive+0x176>
 8004dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d113      	bne.n	8004e1a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df6:	881a      	ldrh	r2, [r3, #0]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e02:	1c9a      	adds	r2, r3, #2
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e16:	2300      	movs	r3, #0
 8004e18:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f003 0301 	and.w	r3, r3, #1
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d119      	bne.n	8004e5c <HAL_SPI_TransmitReceive+0x1b8>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d014      	beq.n	8004e5c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68da      	ldr	r2, [r3, #12]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3c:	b292      	uxth	r2, r2
 8004e3e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e44:	1c9a      	adds	r2, r3, #2
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	3b01      	subs	r3, #1
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004e5c:	f7fd f9b8 	bl	80021d0 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d80b      	bhi.n	8004e84 <HAL_SPI_TransmitReceive+0x1e0>
 8004e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e72:	d007      	beq.n	8004e84 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004e82:	e0b5      	b.n	8004ff0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1a2      	bne.n	8004dd4 <HAL_SPI_TransmitReceive+0x130>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d19d      	bne.n	8004dd4 <HAL_SPI_TransmitReceive+0x130>
 8004e98:	e080      	b.n	8004f9c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d002      	beq.n	8004ea8 <HAL_SPI_TransmitReceive+0x204>
 8004ea2:	8b7b      	ldrh	r3, [r7, #26]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d16f      	bne.n	8004f88 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	330c      	adds	r3, #12
 8004eb2:	7812      	ldrb	r2, [r2, #0]
 8004eb4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eba:	1c5a      	adds	r2, r3, #1
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ece:	e05b      	b.n	8004f88 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d11c      	bne.n	8004f18 <HAL_SPI_TransmitReceive+0x274>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d017      	beq.n	8004f18 <HAL_SPI_TransmitReceive+0x274>
 8004ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d114      	bne.n	8004f18 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	330c      	adds	r3, #12
 8004ef8:	7812      	ldrb	r2, [r2, #0]
 8004efa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f00:	1c5a      	adds	r2, r3, #1
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f14:	2300      	movs	r3, #0
 8004f16:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d119      	bne.n	8004f5a <HAL_SPI_TransmitReceive+0x2b6>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d014      	beq.n	8004f5a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68da      	ldr	r2, [r3, #12]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3a:	b2d2      	uxtb	r2, r2
 8004f3c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f42:	1c5a      	adds	r2, r3, #1
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f56:	2301      	movs	r3, #1
 8004f58:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f5a:	f7fd f939 	bl	80021d0 <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d803      	bhi.n	8004f72 <HAL_SPI_TransmitReceive+0x2ce>
 8004f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f70:	d102      	bne.n	8004f78 <HAL_SPI_TransmitReceive+0x2d4>
 8004f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d107      	bne.n	8004f88 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2201      	movs	r2, #1
 8004f82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004f86:	e033      	b.n	8004ff0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d19e      	bne.n	8004ed0 <HAL_SPI_TransmitReceive+0x22c>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d199      	bne.n	8004ed0 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f9e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004fa0:	68f8      	ldr	r0, [r7, #12]
 8004fa2:	f000 f8c5 	bl	8005130 <SPI_EndRxTxTransaction>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d006      	beq.n	8004fba <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2220      	movs	r2, #32
 8004fb6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004fb8:	e01a      	b.n	8004ff0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d10a      	bne.n	8004fd8 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	617b      	str	r3, [r7, #20]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	617b      	str	r3, [r7, #20]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	617b      	str	r3, [r7, #20]
 8004fd6:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d003      	beq.n	8004fe8 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fe6:	e003      	b.n	8004ff0 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ff8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3730      	adds	r7, #48	; 0x30
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005012:	b2db      	uxtb	r3, r3
}
 8005014:	4618      	mov	r0, r3
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b088      	sub	sp, #32
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	603b      	str	r3, [r7, #0]
 800502c:	4613      	mov	r3, r2
 800502e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005030:	f7fd f8ce 	bl	80021d0 <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005038:	1a9b      	subs	r3, r3, r2
 800503a:	683a      	ldr	r2, [r7, #0]
 800503c:	4413      	add	r3, r2
 800503e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005040:	f7fd f8c6 	bl	80021d0 <HAL_GetTick>
 8005044:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005046:	4b39      	ldr	r3, [pc, #228]	; (800512c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	015b      	lsls	r3, r3, #5
 800504c:	0d1b      	lsrs	r3, r3, #20
 800504e:	69fa      	ldr	r2, [r7, #28]
 8005050:	fb02 f303 	mul.w	r3, r2, r3
 8005054:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005056:	e054      	b.n	8005102 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800505e:	d050      	beq.n	8005102 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005060:	f7fd f8b6 	bl	80021d0 <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	69fa      	ldr	r2, [r7, #28]
 800506c:	429a      	cmp	r2, r3
 800506e:	d902      	bls.n	8005076 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d13d      	bne.n	80050f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	685a      	ldr	r2, [r3, #4]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005084:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800508e:	d111      	bne.n	80050b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005098:	d004      	beq.n	80050a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050a2:	d107      	bne.n	80050b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050bc:	d10f      	bne.n	80050de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050cc:	601a      	str	r2, [r3, #0]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e017      	b.n	8005122 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d101      	bne.n	80050fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80050f8:	2300      	movs	r3, #0
 80050fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	3b01      	subs	r3, #1
 8005100:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	689a      	ldr	r2, [r3, #8]
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	4013      	ands	r3, r2
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	429a      	cmp	r2, r3
 8005110:	bf0c      	ite	eq
 8005112:	2301      	moveq	r3, #1
 8005114:	2300      	movne	r3, #0
 8005116:	b2db      	uxtb	r3, r3
 8005118:	461a      	mov	r2, r3
 800511a:	79fb      	ldrb	r3, [r7, #7]
 800511c:	429a      	cmp	r2, r3
 800511e:	d19b      	bne.n	8005058 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3720      	adds	r7, #32
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	20000000 	.word	0x20000000

08005130 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b088      	sub	sp, #32
 8005134:	af02      	add	r7, sp, #8
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	9300      	str	r3, [sp, #0]
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	2201      	movs	r2, #1
 8005144:	2102      	movs	r1, #2
 8005146:	68f8      	ldr	r0, [r7, #12]
 8005148:	f7ff ff6a 	bl	8005020 <SPI_WaitFlagStateUntilTimeout>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d007      	beq.n	8005162 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005156:	f043 0220 	orr.w	r2, r3, #32
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e032      	b.n	80051c8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005162:	4b1b      	ldr	r3, [pc, #108]	; (80051d0 <SPI_EndRxTxTransaction+0xa0>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a1b      	ldr	r2, [pc, #108]	; (80051d4 <SPI_EndRxTxTransaction+0xa4>)
 8005168:	fba2 2303 	umull	r2, r3, r2, r3
 800516c:	0d5b      	lsrs	r3, r3, #21
 800516e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005172:	fb02 f303 	mul.w	r3, r2, r3
 8005176:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005180:	d112      	bne.n	80051a8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	9300      	str	r3, [sp, #0]
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	2200      	movs	r2, #0
 800518a:	2180      	movs	r1, #128	; 0x80
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f7ff ff47 	bl	8005020 <SPI_WaitFlagStateUntilTimeout>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d016      	beq.n	80051c6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800519c:	f043 0220 	orr.w	r2, r3, #32
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e00f      	b.n	80051c8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00a      	beq.n	80051c4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	3b01      	subs	r3, #1
 80051b2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051be:	2b80      	cmp	r3, #128	; 0x80
 80051c0:	d0f2      	beq.n	80051a8 <SPI_EndRxTxTransaction+0x78>
 80051c2:	e000      	b.n	80051c6 <SPI_EndRxTxTransaction+0x96>
        break;
 80051c4:	bf00      	nop
  }

  return HAL_OK;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3718      	adds	r7, #24
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	20000000 	.word	0x20000000
 80051d4:	165e9f81 	.word	0x165e9f81

080051d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d101      	bne.n	80051ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e041      	b.n	800526e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d106      	bne.n	8005204 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 f839 	bl	8005276 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2202      	movs	r2, #2
 8005208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	3304      	adds	r3, #4
 8005214:	4619      	mov	r1, r3
 8005216:	4610      	mov	r0, r2
 8005218:	f000 fde8 	bl	8005dec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3708      	adds	r7, #8
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}

08005276 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005276:	b480      	push	{r7}
 8005278:	b083      	sub	sp, #12
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800527e:	bf00      	nop
 8005280:	370c      	adds	r7, #12
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
	...

0800528c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800528c:	b480      	push	{r7}
 800528e:	b085      	sub	sp, #20
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800529a:	b2db      	uxtb	r3, r3
 800529c:	2b01      	cmp	r3, #1
 800529e:	d001      	beq.n	80052a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e04e      	b.n	8005342 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2202      	movs	r2, #2
 80052a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68da      	ldr	r2, [r3, #12]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f042 0201 	orr.w	r2, r2, #1
 80052ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a23      	ldr	r2, [pc, #140]	; (8005350 <HAL_TIM_Base_Start_IT+0xc4>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d022      	beq.n	800530c <HAL_TIM_Base_Start_IT+0x80>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ce:	d01d      	beq.n	800530c <HAL_TIM_Base_Start_IT+0x80>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a1f      	ldr	r2, [pc, #124]	; (8005354 <HAL_TIM_Base_Start_IT+0xc8>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d018      	beq.n	800530c <HAL_TIM_Base_Start_IT+0x80>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a1e      	ldr	r2, [pc, #120]	; (8005358 <HAL_TIM_Base_Start_IT+0xcc>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d013      	beq.n	800530c <HAL_TIM_Base_Start_IT+0x80>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a1c      	ldr	r2, [pc, #112]	; (800535c <HAL_TIM_Base_Start_IT+0xd0>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d00e      	beq.n	800530c <HAL_TIM_Base_Start_IT+0x80>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a1b      	ldr	r2, [pc, #108]	; (8005360 <HAL_TIM_Base_Start_IT+0xd4>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d009      	beq.n	800530c <HAL_TIM_Base_Start_IT+0x80>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a19      	ldr	r2, [pc, #100]	; (8005364 <HAL_TIM_Base_Start_IT+0xd8>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d004      	beq.n	800530c <HAL_TIM_Base_Start_IT+0x80>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a18      	ldr	r2, [pc, #96]	; (8005368 <HAL_TIM_Base_Start_IT+0xdc>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d111      	bne.n	8005330 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f003 0307 	and.w	r3, r3, #7
 8005316:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2b06      	cmp	r3, #6
 800531c:	d010      	beq.n	8005340 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f042 0201 	orr.w	r2, r2, #1
 800532c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800532e:	e007      	b.n	8005340 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f042 0201 	orr.w	r2, r2, #1
 800533e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	40010000 	.word	0x40010000
 8005354:	40000400 	.word	0x40000400
 8005358:	40000800 	.word	0x40000800
 800535c:	40000c00 	.word	0x40000c00
 8005360:	40010400 	.word	0x40010400
 8005364:	40014000 	.word	0x40014000
 8005368:	40001800 	.word	0x40001800

0800536c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d101      	bne.n	800537e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e041      	b.n	8005402 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005384:	b2db      	uxtb	r3, r3
 8005386:	2b00      	cmp	r3, #0
 8005388:	d106      	bne.n	8005398 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f7fc fc26 	bl	8001be4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2202      	movs	r2, #2
 800539c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	3304      	adds	r3, #4
 80053a8:	4619      	mov	r1, r3
 80053aa:	4610      	mov	r0, r2
 80053ac:	f000 fd1e 	bl	8005dec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3708      	adds	r7, #8
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
	...

0800540c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d109      	bne.n	8005430 <HAL_TIM_PWM_Start+0x24>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005422:	b2db      	uxtb	r3, r3
 8005424:	2b01      	cmp	r3, #1
 8005426:	bf14      	ite	ne
 8005428:	2301      	movne	r3, #1
 800542a:	2300      	moveq	r3, #0
 800542c:	b2db      	uxtb	r3, r3
 800542e:	e022      	b.n	8005476 <HAL_TIM_PWM_Start+0x6a>
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	2b04      	cmp	r3, #4
 8005434:	d109      	bne.n	800544a <HAL_TIM_PWM_Start+0x3e>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b01      	cmp	r3, #1
 8005440:	bf14      	ite	ne
 8005442:	2301      	movne	r3, #1
 8005444:	2300      	moveq	r3, #0
 8005446:	b2db      	uxtb	r3, r3
 8005448:	e015      	b.n	8005476 <HAL_TIM_PWM_Start+0x6a>
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	2b08      	cmp	r3, #8
 800544e:	d109      	bne.n	8005464 <HAL_TIM_PWM_Start+0x58>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005456:	b2db      	uxtb	r3, r3
 8005458:	2b01      	cmp	r3, #1
 800545a:	bf14      	ite	ne
 800545c:	2301      	movne	r3, #1
 800545e:	2300      	moveq	r3, #0
 8005460:	b2db      	uxtb	r3, r3
 8005462:	e008      	b.n	8005476 <HAL_TIM_PWM_Start+0x6a>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800546a:	b2db      	uxtb	r3, r3
 800546c:	2b01      	cmp	r3, #1
 800546e:	bf14      	ite	ne
 8005470:	2301      	movne	r3, #1
 8005472:	2300      	moveq	r3, #0
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b00      	cmp	r3, #0
 8005478:	d001      	beq.n	800547e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e07c      	b.n	8005578 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d104      	bne.n	800548e <HAL_TIM_PWM_Start+0x82>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2202      	movs	r2, #2
 8005488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800548c:	e013      	b.n	80054b6 <HAL_TIM_PWM_Start+0xaa>
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	2b04      	cmp	r3, #4
 8005492:	d104      	bne.n	800549e <HAL_TIM_PWM_Start+0x92>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2202      	movs	r2, #2
 8005498:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800549c:	e00b      	b.n	80054b6 <HAL_TIM_PWM_Start+0xaa>
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	2b08      	cmp	r3, #8
 80054a2:	d104      	bne.n	80054ae <HAL_TIM_PWM_Start+0xa2>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2202      	movs	r2, #2
 80054a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054ac:	e003      	b.n	80054b6 <HAL_TIM_PWM_Start+0xaa>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2202      	movs	r2, #2
 80054b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2201      	movs	r2, #1
 80054bc:	6839      	ldr	r1, [r7, #0]
 80054be:	4618      	mov	r0, r3
 80054c0:	f001 f81a 	bl	80064f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a2d      	ldr	r2, [pc, #180]	; (8005580 <HAL_TIM_PWM_Start+0x174>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d004      	beq.n	80054d8 <HAL_TIM_PWM_Start+0xcc>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a2c      	ldr	r2, [pc, #176]	; (8005584 <HAL_TIM_PWM_Start+0x178>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d101      	bne.n	80054dc <HAL_TIM_PWM_Start+0xd0>
 80054d8:	2301      	movs	r3, #1
 80054da:	e000      	b.n	80054de <HAL_TIM_PWM_Start+0xd2>
 80054dc:	2300      	movs	r3, #0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d007      	beq.n	80054f2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a22      	ldr	r2, [pc, #136]	; (8005580 <HAL_TIM_PWM_Start+0x174>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d022      	beq.n	8005542 <HAL_TIM_PWM_Start+0x136>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005504:	d01d      	beq.n	8005542 <HAL_TIM_PWM_Start+0x136>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a1f      	ldr	r2, [pc, #124]	; (8005588 <HAL_TIM_PWM_Start+0x17c>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d018      	beq.n	8005542 <HAL_TIM_PWM_Start+0x136>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a1d      	ldr	r2, [pc, #116]	; (800558c <HAL_TIM_PWM_Start+0x180>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d013      	beq.n	8005542 <HAL_TIM_PWM_Start+0x136>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a1c      	ldr	r2, [pc, #112]	; (8005590 <HAL_TIM_PWM_Start+0x184>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d00e      	beq.n	8005542 <HAL_TIM_PWM_Start+0x136>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a16      	ldr	r2, [pc, #88]	; (8005584 <HAL_TIM_PWM_Start+0x178>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d009      	beq.n	8005542 <HAL_TIM_PWM_Start+0x136>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a18      	ldr	r2, [pc, #96]	; (8005594 <HAL_TIM_PWM_Start+0x188>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d004      	beq.n	8005542 <HAL_TIM_PWM_Start+0x136>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a16      	ldr	r2, [pc, #88]	; (8005598 <HAL_TIM_PWM_Start+0x18c>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d111      	bne.n	8005566 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	f003 0307 	and.w	r3, r3, #7
 800554c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2b06      	cmp	r3, #6
 8005552:	d010      	beq.n	8005576 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f042 0201 	orr.w	r2, r2, #1
 8005562:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005564:	e007      	b.n	8005576 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f042 0201 	orr.w	r2, r2, #1
 8005574:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3710      	adds	r7, #16
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	40010000 	.word	0x40010000
 8005584:	40010400 	.word	0x40010400
 8005588:	40000400 	.word	0x40000400
 800558c:	40000800 	.word	0x40000800
 8005590:	40000c00 	.word	0x40000c00
 8005594:	40014000 	.word	0x40014000
 8005598:	40001800 	.word	0x40001800

0800559c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d101      	bne.n	80055ae <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e041      	b.n	8005632 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d106      	bne.n	80055c8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f7fc fb98 	bl	8001cf8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2202      	movs	r2, #2
 80055cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	3304      	adds	r3, #4
 80055d8:	4619      	mov	r1, r3
 80055da:	4610      	mov	r0, r2
 80055dc:	f000 fc06 	bl	8005dec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3708      	adds	r7, #8
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
	...

0800563c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005646:	2300      	movs	r3, #0
 8005648:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d104      	bne.n	800565a <HAL_TIM_IC_Start_IT+0x1e>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005656:	b2db      	uxtb	r3, r3
 8005658:	e013      	b.n	8005682 <HAL_TIM_IC_Start_IT+0x46>
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	2b04      	cmp	r3, #4
 800565e:	d104      	bne.n	800566a <HAL_TIM_IC_Start_IT+0x2e>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005666:	b2db      	uxtb	r3, r3
 8005668:	e00b      	b.n	8005682 <HAL_TIM_IC_Start_IT+0x46>
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	2b08      	cmp	r3, #8
 800566e:	d104      	bne.n	800567a <HAL_TIM_IC_Start_IT+0x3e>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005676:	b2db      	uxtb	r3, r3
 8005678:	e003      	b.n	8005682 <HAL_TIM_IC_Start_IT+0x46>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005680:	b2db      	uxtb	r3, r3
 8005682:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d104      	bne.n	8005694 <HAL_TIM_IC_Start_IT+0x58>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005690:	b2db      	uxtb	r3, r3
 8005692:	e013      	b.n	80056bc <HAL_TIM_IC_Start_IT+0x80>
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	2b04      	cmp	r3, #4
 8005698:	d104      	bne.n	80056a4 <HAL_TIM_IC_Start_IT+0x68>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	e00b      	b.n	80056bc <HAL_TIM_IC_Start_IT+0x80>
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	2b08      	cmp	r3, #8
 80056a8:	d104      	bne.n	80056b4 <HAL_TIM_IC_Start_IT+0x78>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	e003      	b.n	80056bc <HAL_TIM_IC_Start_IT+0x80>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80056be:	7bbb      	ldrb	r3, [r7, #14]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d102      	bne.n	80056ca <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80056c4:	7b7b      	ldrb	r3, [r7, #13]
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d001      	beq.n	80056ce <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e0cc      	b.n	8005868 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d104      	bne.n	80056de <HAL_TIM_IC_Start_IT+0xa2>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2202      	movs	r2, #2
 80056d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056dc:	e013      	b.n	8005706 <HAL_TIM_IC_Start_IT+0xca>
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	2b04      	cmp	r3, #4
 80056e2:	d104      	bne.n	80056ee <HAL_TIM_IC_Start_IT+0xb2>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2202      	movs	r2, #2
 80056e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056ec:	e00b      	b.n	8005706 <HAL_TIM_IC_Start_IT+0xca>
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	2b08      	cmp	r3, #8
 80056f2:	d104      	bne.n	80056fe <HAL_TIM_IC_Start_IT+0xc2>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2202      	movs	r2, #2
 80056f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056fc:	e003      	b.n	8005706 <HAL_TIM_IC_Start_IT+0xca>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2202      	movs	r2, #2
 8005702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d104      	bne.n	8005716 <HAL_TIM_IC_Start_IT+0xda>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2202      	movs	r2, #2
 8005710:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005714:	e013      	b.n	800573e <HAL_TIM_IC_Start_IT+0x102>
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	2b04      	cmp	r3, #4
 800571a:	d104      	bne.n	8005726 <HAL_TIM_IC_Start_IT+0xea>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2202      	movs	r2, #2
 8005720:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005724:	e00b      	b.n	800573e <HAL_TIM_IC_Start_IT+0x102>
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	2b08      	cmp	r3, #8
 800572a:	d104      	bne.n	8005736 <HAL_TIM_IC_Start_IT+0xfa>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2202      	movs	r2, #2
 8005730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005734:	e003      	b.n	800573e <HAL_TIM_IC_Start_IT+0x102>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2202      	movs	r2, #2
 800573a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	2b0c      	cmp	r3, #12
 8005742:	d841      	bhi.n	80057c8 <HAL_TIM_IC_Start_IT+0x18c>
 8005744:	a201      	add	r2, pc, #4	; (adr r2, 800574c <HAL_TIM_IC_Start_IT+0x110>)
 8005746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800574a:	bf00      	nop
 800574c:	08005781 	.word	0x08005781
 8005750:	080057c9 	.word	0x080057c9
 8005754:	080057c9 	.word	0x080057c9
 8005758:	080057c9 	.word	0x080057c9
 800575c:	08005793 	.word	0x08005793
 8005760:	080057c9 	.word	0x080057c9
 8005764:	080057c9 	.word	0x080057c9
 8005768:	080057c9 	.word	0x080057c9
 800576c:	080057a5 	.word	0x080057a5
 8005770:	080057c9 	.word	0x080057c9
 8005774:	080057c9 	.word	0x080057c9
 8005778:	080057c9 	.word	0x080057c9
 800577c:	080057b7 	.word	0x080057b7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68da      	ldr	r2, [r3, #12]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f042 0202 	orr.w	r2, r2, #2
 800578e:	60da      	str	r2, [r3, #12]
      break;
 8005790:	e01d      	b.n	80057ce <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68da      	ldr	r2, [r3, #12]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f042 0204 	orr.w	r2, r2, #4
 80057a0:	60da      	str	r2, [r3, #12]
      break;
 80057a2:	e014      	b.n	80057ce <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68da      	ldr	r2, [r3, #12]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f042 0208 	orr.w	r2, r2, #8
 80057b2:	60da      	str	r2, [r3, #12]
      break;
 80057b4:	e00b      	b.n	80057ce <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68da      	ldr	r2, [r3, #12]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f042 0210 	orr.w	r2, r2, #16
 80057c4:	60da      	str	r2, [r3, #12]
      break;
 80057c6:	e002      	b.n	80057ce <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	73fb      	strb	r3, [r7, #15]
      break;
 80057cc:	bf00      	nop
  }

  if (status == HAL_OK)
 80057ce:	7bfb      	ldrb	r3, [r7, #15]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d148      	bne.n	8005866 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2201      	movs	r2, #1
 80057da:	6839      	ldr	r1, [r7, #0]
 80057dc:	4618      	mov	r0, r3
 80057de:	f000 fe8b 	bl	80064f8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a22      	ldr	r2, [pc, #136]	; (8005870 <HAL_TIM_IC_Start_IT+0x234>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d022      	beq.n	8005832 <HAL_TIM_IC_Start_IT+0x1f6>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057f4:	d01d      	beq.n	8005832 <HAL_TIM_IC_Start_IT+0x1f6>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a1e      	ldr	r2, [pc, #120]	; (8005874 <HAL_TIM_IC_Start_IT+0x238>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d018      	beq.n	8005832 <HAL_TIM_IC_Start_IT+0x1f6>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a1c      	ldr	r2, [pc, #112]	; (8005878 <HAL_TIM_IC_Start_IT+0x23c>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d013      	beq.n	8005832 <HAL_TIM_IC_Start_IT+0x1f6>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a1b      	ldr	r2, [pc, #108]	; (800587c <HAL_TIM_IC_Start_IT+0x240>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d00e      	beq.n	8005832 <HAL_TIM_IC_Start_IT+0x1f6>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a19      	ldr	r2, [pc, #100]	; (8005880 <HAL_TIM_IC_Start_IT+0x244>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d009      	beq.n	8005832 <HAL_TIM_IC_Start_IT+0x1f6>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a18      	ldr	r2, [pc, #96]	; (8005884 <HAL_TIM_IC_Start_IT+0x248>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d004      	beq.n	8005832 <HAL_TIM_IC_Start_IT+0x1f6>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a16      	ldr	r2, [pc, #88]	; (8005888 <HAL_TIM_IC_Start_IT+0x24c>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d111      	bne.n	8005856 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	f003 0307 	and.w	r3, r3, #7
 800583c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	2b06      	cmp	r3, #6
 8005842:	d010      	beq.n	8005866 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f042 0201 	orr.w	r2, r2, #1
 8005852:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005854:	e007      	b.n	8005866 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f042 0201 	orr.w	r2, r2, #1
 8005864:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005866:	7bfb      	ldrb	r3, [r7, #15]
}
 8005868:	4618      	mov	r0, r3
 800586a:	3710      	adds	r7, #16
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}
 8005870:	40010000 	.word	0x40010000
 8005874:	40000400 	.word	0x40000400
 8005878:	40000800 	.word	0x40000800
 800587c:	40000c00 	.word	0x40000c00
 8005880:	40010400 	.word	0x40010400
 8005884:	40014000 	.word	0x40014000
 8005888:	40001800 	.word	0x40001800

0800588c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	f003 0302 	and.w	r3, r3, #2
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d020      	beq.n	80058f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f003 0302 	and.w	r3, r3, #2
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d01b      	beq.n	80058f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f06f 0202 	mvn.w	r2, #2
 80058c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2201      	movs	r2, #1
 80058c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	f003 0303 	and.w	r3, r3, #3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d003      	beq.n	80058de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f006 fdee 	bl	800c4b8 <HAL_TIM_IC_CaptureCallback>
 80058dc:	e005      	b.n	80058ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 fa66 	bl	8005db0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 fa6d 	bl	8005dc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	f003 0304 	and.w	r3, r3, #4
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d020      	beq.n	800593c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f003 0304 	and.w	r3, r3, #4
 8005900:	2b00      	cmp	r3, #0
 8005902:	d01b      	beq.n	800593c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f06f 0204 	mvn.w	r2, #4
 800590c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2202      	movs	r2, #2
 8005912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	699b      	ldr	r3, [r3, #24]
 800591a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800591e:	2b00      	cmp	r3, #0
 8005920:	d003      	beq.n	800592a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f006 fdc8 	bl	800c4b8 <HAL_TIM_IC_CaptureCallback>
 8005928:	e005      	b.n	8005936 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 fa40 	bl	8005db0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 fa47 	bl	8005dc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	f003 0308 	and.w	r3, r3, #8
 8005942:	2b00      	cmp	r3, #0
 8005944:	d020      	beq.n	8005988 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f003 0308 	and.w	r3, r3, #8
 800594c:	2b00      	cmp	r3, #0
 800594e:	d01b      	beq.n	8005988 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f06f 0208 	mvn.w	r2, #8
 8005958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2204      	movs	r2, #4
 800595e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	69db      	ldr	r3, [r3, #28]
 8005966:	f003 0303 	and.w	r3, r3, #3
 800596a:	2b00      	cmp	r3, #0
 800596c:	d003      	beq.n	8005976 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f006 fda2 	bl	800c4b8 <HAL_TIM_IC_CaptureCallback>
 8005974:	e005      	b.n	8005982 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 fa1a 	bl	8005db0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 fa21 	bl	8005dc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	f003 0310 	and.w	r3, r3, #16
 800598e:	2b00      	cmp	r3, #0
 8005990:	d020      	beq.n	80059d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f003 0310 	and.w	r3, r3, #16
 8005998:	2b00      	cmp	r3, #0
 800599a:	d01b      	beq.n	80059d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f06f 0210 	mvn.w	r2, #16
 80059a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2208      	movs	r2, #8
 80059aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	69db      	ldr	r3, [r3, #28]
 80059b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d003      	beq.n	80059c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f006 fd7c 	bl	800c4b8 <HAL_TIM_IC_CaptureCallback>
 80059c0:	e005      	b.n	80059ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 f9f4 	bl	8005db0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 f9fb 	bl	8005dc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	f003 0301 	and.w	r3, r3, #1
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00c      	beq.n	80059f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f003 0301 	and.w	r3, r3, #1
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d007      	beq.n	80059f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f06f 0201 	mvn.w	r2, #1
 80059f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f7fb fc8c 	bl	8001310 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00c      	beq.n	8005a1c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d007      	beq.n	8005a1c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 fe6c 	bl	80066f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00c      	beq.n	8005a40 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d007      	beq.n	8005a40 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 f9cc 	bl	8005dd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	f003 0320 	and.w	r3, r3, #32
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00c      	beq.n	8005a64 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f003 0320 	and.w	r3, r3, #32
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d007      	beq.n	8005a64 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f06f 0220 	mvn.w	r2, #32
 8005a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 fe3e 	bl	80066e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a64:	bf00      	nop
 8005a66:	3710      	adds	r7, #16
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b086      	sub	sp, #24
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d101      	bne.n	8005a8a <HAL_TIM_IC_ConfigChannel+0x1e>
 8005a86:	2302      	movs	r3, #2
 8005a88:	e088      	b.n	8005b9c <HAL_TIM_IC_ConfigChannel+0x130>
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d11b      	bne.n	8005ad0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005aa8:	f000 fbfc 	bl	80062a4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	699a      	ldr	r2, [r3, #24]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f022 020c 	bic.w	r2, r2, #12
 8005aba:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	6999      	ldr	r1, [r3, #24]
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	689a      	ldr	r2, [r3, #8]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	430a      	orrs	r2, r1
 8005acc:	619a      	str	r2, [r3, #24]
 8005ace:	e060      	b.n	8005b92 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2b04      	cmp	r3, #4
 8005ad4:	d11c      	bne.n	8005b10 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005ae6:	f000 fc51 	bl	800638c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	699a      	ldr	r2, [r3, #24]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005af8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	6999      	ldr	r1, [r3, #24]
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	021a      	lsls	r2, r3, #8
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	619a      	str	r2, [r3, #24]
 8005b0e:	e040      	b.n	8005b92 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2b08      	cmp	r3, #8
 8005b14:	d11b      	bne.n	8005b4e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005b26:	f000 fc6e 	bl	8006406 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	69da      	ldr	r2, [r3, #28]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f022 020c 	bic.w	r2, r2, #12
 8005b38:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	69d9      	ldr	r1, [r3, #28]
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	689a      	ldr	r2, [r3, #8]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	430a      	orrs	r2, r1
 8005b4a:	61da      	str	r2, [r3, #28]
 8005b4c:	e021      	b.n	8005b92 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2b0c      	cmp	r3, #12
 8005b52:	d11c      	bne.n	8005b8e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005b64:	f000 fc8b 	bl	800647e <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	69da      	ldr	r2, [r3, #28]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005b76:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	69d9      	ldr	r1, [r3, #28]
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	021a      	lsls	r2, r3, #8
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	430a      	orrs	r2, r1
 8005b8a:	61da      	str	r2, [r3, #28]
 8005b8c:	e001      	b.n	8005b92 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3718      	adds	r7, #24
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b086      	sub	sp, #24
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d101      	bne.n	8005bc2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005bbe:	2302      	movs	r3, #2
 8005bc0:	e0ae      	b.n	8005d20 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2b0c      	cmp	r3, #12
 8005bce:	f200 809f 	bhi.w	8005d10 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005bd2:	a201      	add	r2, pc, #4	; (adr r2, 8005bd8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd8:	08005c0d 	.word	0x08005c0d
 8005bdc:	08005d11 	.word	0x08005d11
 8005be0:	08005d11 	.word	0x08005d11
 8005be4:	08005d11 	.word	0x08005d11
 8005be8:	08005c4d 	.word	0x08005c4d
 8005bec:	08005d11 	.word	0x08005d11
 8005bf0:	08005d11 	.word	0x08005d11
 8005bf4:	08005d11 	.word	0x08005d11
 8005bf8:	08005c8f 	.word	0x08005c8f
 8005bfc:	08005d11 	.word	0x08005d11
 8005c00:	08005d11 	.word	0x08005d11
 8005c04:	08005d11 	.word	0x08005d11
 8005c08:	08005ccf 	.word	0x08005ccf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68b9      	ldr	r1, [r7, #8]
 8005c12:	4618      	mov	r0, r3
 8005c14:	f000 f996 	bl	8005f44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	699a      	ldr	r2, [r3, #24]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f042 0208 	orr.w	r2, r2, #8
 8005c26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	699a      	ldr	r2, [r3, #24]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f022 0204 	bic.w	r2, r2, #4
 8005c36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	6999      	ldr	r1, [r3, #24]
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	691a      	ldr	r2, [r3, #16]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	430a      	orrs	r2, r1
 8005c48:	619a      	str	r2, [r3, #24]
      break;
 8005c4a:	e064      	b.n	8005d16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68b9      	ldr	r1, [r7, #8]
 8005c52:	4618      	mov	r0, r3
 8005c54:	f000 f9e6 	bl	8006024 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	699a      	ldr	r2, [r3, #24]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	699a      	ldr	r2, [r3, #24]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	6999      	ldr	r1, [r3, #24]
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	021a      	lsls	r2, r3, #8
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	430a      	orrs	r2, r1
 8005c8a:	619a      	str	r2, [r3, #24]
      break;
 8005c8c:	e043      	b.n	8005d16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68b9      	ldr	r1, [r7, #8]
 8005c94:	4618      	mov	r0, r3
 8005c96:	f000 fa3b 	bl	8006110 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	69da      	ldr	r2, [r3, #28]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f042 0208 	orr.w	r2, r2, #8
 8005ca8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	69da      	ldr	r2, [r3, #28]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f022 0204 	bic.w	r2, r2, #4
 8005cb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	69d9      	ldr	r1, [r3, #28]
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	691a      	ldr	r2, [r3, #16]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	430a      	orrs	r2, r1
 8005cca:	61da      	str	r2, [r3, #28]
      break;
 8005ccc:	e023      	b.n	8005d16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68b9      	ldr	r1, [r7, #8]
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f000 fa8f 	bl	80061f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	69da      	ldr	r2, [r3, #28]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ce8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	69da      	ldr	r2, [r3, #28]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	69d9      	ldr	r1, [r3, #28]
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	021a      	lsls	r2, r3, #8
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	430a      	orrs	r2, r1
 8005d0c:	61da      	str	r2, [r3, #28]
      break;
 8005d0e:	e002      	b.n	8005d16 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	75fb      	strb	r3, [r7, #23]
      break;
 8005d14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3718      	adds	r7, #24
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005d32:	2300      	movs	r3, #0
 8005d34:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	2b0c      	cmp	r3, #12
 8005d3a:	d831      	bhi.n	8005da0 <HAL_TIM_ReadCapturedValue+0x78>
 8005d3c:	a201      	add	r2, pc, #4	; (adr r2, 8005d44 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d42:	bf00      	nop
 8005d44:	08005d79 	.word	0x08005d79
 8005d48:	08005da1 	.word	0x08005da1
 8005d4c:	08005da1 	.word	0x08005da1
 8005d50:	08005da1 	.word	0x08005da1
 8005d54:	08005d83 	.word	0x08005d83
 8005d58:	08005da1 	.word	0x08005da1
 8005d5c:	08005da1 	.word	0x08005da1
 8005d60:	08005da1 	.word	0x08005da1
 8005d64:	08005d8d 	.word	0x08005d8d
 8005d68:	08005da1 	.word	0x08005da1
 8005d6c:	08005da1 	.word	0x08005da1
 8005d70:	08005da1 	.word	0x08005da1
 8005d74:	08005d97 	.word	0x08005d97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d7e:	60fb      	str	r3, [r7, #12]

      break;
 8005d80:	e00f      	b.n	8005da2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d88:	60fb      	str	r3, [r7, #12]

      break;
 8005d8a:	e00a      	b.n	8005da2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d92:	60fb      	str	r3, [r7, #12]

      break;
 8005d94:	e005      	b.n	8005da2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9c:	60fb      	str	r3, [r7, #12]

      break;
 8005d9e:	e000      	b.n	8005da2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005da0:	bf00      	nop
  }

  return tmpreg;
 8005da2:	68fb      	ldr	r3, [r7, #12]
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3714      	adds	r7, #20
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005db8:	bf00      	nop
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005dcc:	bf00      	nop
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005de0:	bf00      	nop
 8005de2:	370c      	adds	r7, #12
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b085      	sub	sp, #20
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a46      	ldr	r2, [pc, #280]	; (8005f18 <TIM_Base_SetConfig+0x12c>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d013      	beq.n	8005e2c <TIM_Base_SetConfig+0x40>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e0a:	d00f      	beq.n	8005e2c <TIM_Base_SetConfig+0x40>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a43      	ldr	r2, [pc, #268]	; (8005f1c <TIM_Base_SetConfig+0x130>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d00b      	beq.n	8005e2c <TIM_Base_SetConfig+0x40>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a42      	ldr	r2, [pc, #264]	; (8005f20 <TIM_Base_SetConfig+0x134>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d007      	beq.n	8005e2c <TIM_Base_SetConfig+0x40>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4a41      	ldr	r2, [pc, #260]	; (8005f24 <TIM_Base_SetConfig+0x138>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d003      	beq.n	8005e2c <TIM_Base_SetConfig+0x40>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a40      	ldr	r2, [pc, #256]	; (8005f28 <TIM_Base_SetConfig+0x13c>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d108      	bne.n	8005e3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a35      	ldr	r2, [pc, #212]	; (8005f18 <TIM_Base_SetConfig+0x12c>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d02b      	beq.n	8005e9e <TIM_Base_SetConfig+0xb2>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e4c:	d027      	beq.n	8005e9e <TIM_Base_SetConfig+0xb2>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a32      	ldr	r2, [pc, #200]	; (8005f1c <TIM_Base_SetConfig+0x130>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d023      	beq.n	8005e9e <TIM_Base_SetConfig+0xb2>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a31      	ldr	r2, [pc, #196]	; (8005f20 <TIM_Base_SetConfig+0x134>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d01f      	beq.n	8005e9e <TIM_Base_SetConfig+0xb2>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a30      	ldr	r2, [pc, #192]	; (8005f24 <TIM_Base_SetConfig+0x138>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d01b      	beq.n	8005e9e <TIM_Base_SetConfig+0xb2>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a2f      	ldr	r2, [pc, #188]	; (8005f28 <TIM_Base_SetConfig+0x13c>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d017      	beq.n	8005e9e <TIM_Base_SetConfig+0xb2>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a2e      	ldr	r2, [pc, #184]	; (8005f2c <TIM_Base_SetConfig+0x140>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d013      	beq.n	8005e9e <TIM_Base_SetConfig+0xb2>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a2d      	ldr	r2, [pc, #180]	; (8005f30 <TIM_Base_SetConfig+0x144>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d00f      	beq.n	8005e9e <TIM_Base_SetConfig+0xb2>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a2c      	ldr	r2, [pc, #176]	; (8005f34 <TIM_Base_SetConfig+0x148>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d00b      	beq.n	8005e9e <TIM_Base_SetConfig+0xb2>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a2b      	ldr	r2, [pc, #172]	; (8005f38 <TIM_Base_SetConfig+0x14c>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d007      	beq.n	8005e9e <TIM_Base_SetConfig+0xb2>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a2a      	ldr	r2, [pc, #168]	; (8005f3c <TIM_Base_SetConfig+0x150>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d003      	beq.n	8005e9e <TIM_Base_SetConfig+0xb2>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a29      	ldr	r2, [pc, #164]	; (8005f40 <TIM_Base_SetConfig+0x154>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d108      	bne.n	8005eb0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ea4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	689a      	ldr	r2, [r3, #8]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a10      	ldr	r2, [pc, #64]	; (8005f18 <TIM_Base_SetConfig+0x12c>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d003      	beq.n	8005ee4 <TIM_Base_SetConfig+0xf8>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a12      	ldr	r2, [pc, #72]	; (8005f28 <TIM_Base_SetConfig+0x13c>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d103      	bne.n	8005eec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	691a      	ldr	r2, [r3, #16]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d105      	bne.n	8005f0a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	f023 0201 	bic.w	r2, r3, #1
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	611a      	str	r2, [r3, #16]
  }
}
 8005f0a:	bf00      	nop
 8005f0c:	3714      	adds	r7, #20
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	40010000 	.word	0x40010000
 8005f1c:	40000400 	.word	0x40000400
 8005f20:	40000800 	.word	0x40000800
 8005f24:	40000c00 	.word	0x40000c00
 8005f28:	40010400 	.word	0x40010400
 8005f2c:	40014000 	.word	0x40014000
 8005f30:	40014400 	.word	0x40014400
 8005f34:	40014800 	.word	0x40014800
 8005f38:	40001800 	.word	0x40001800
 8005f3c:	40001c00 	.word	0x40001c00
 8005f40:	40002000 	.word	0x40002000

08005f44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b087      	sub	sp, #28
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a1b      	ldr	r3, [r3, #32]
 8005f52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a1b      	ldr	r3, [r3, #32]
 8005f58:	f023 0201 	bic.w	r2, r3, #1
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	699b      	ldr	r3, [r3, #24]
 8005f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f023 0303 	bic.w	r3, r3, #3
 8005f7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	f023 0302 	bic.w	r3, r3, #2
 8005f8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	697a      	ldr	r2, [r7, #20]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a20      	ldr	r2, [pc, #128]	; (800601c <TIM_OC1_SetConfig+0xd8>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d003      	beq.n	8005fa8 <TIM_OC1_SetConfig+0x64>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a1f      	ldr	r2, [pc, #124]	; (8006020 <TIM_OC1_SetConfig+0xdc>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d10c      	bne.n	8005fc2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	f023 0308 	bic.w	r3, r3, #8
 8005fae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	697a      	ldr	r2, [r7, #20]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	f023 0304 	bic.w	r3, r3, #4
 8005fc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a15      	ldr	r2, [pc, #84]	; (800601c <TIM_OC1_SetConfig+0xd8>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d003      	beq.n	8005fd2 <TIM_OC1_SetConfig+0x8e>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a14      	ldr	r2, [pc, #80]	; (8006020 <TIM_OC1_SetConfig+0xdc>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d111      	bne.n	8005ff6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fe0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	693a      	ldr	r2, [r7, #16]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	699b      	ldr	r3, [r3, #24]
 8005ff0:	693a      	ldr	r2, [r7, #16]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	685a      	ldr	r2, [r3, #4]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	697a      	ldr	r2, [r7, #20]
 800600e:	621a      	str	r2, [r3, #32]
}
 8006010:	bf00      	nop
 8006012:	371c      	adds	r7, #28
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr
 800601c:	40010000 	.word	0x40010000
 8006020:	40010400 	.word	0x40010400

08006024 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006024:	b480      	push	{r7}
 8006026:	b087      	sub	sp, #28
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a1b      	ldr	r3, [r3, #32]
 8006032:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a1b      	ldr	r3, [r3, #32]
 8006038:	f023 0210 	bic.w	r2, r3, #16
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	699b      	ldr	r3, [r3, #24]
 800604a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800605a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	021b      	lsls	r3, r3, #8
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	4313      	orrs	r3, r2
 8006066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	f023 0320 	bic.w	r3, r3, #32
 800606e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	011b      	lsls	r3, r3, #4
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	4313      	orrs	r3, r2
 800607a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a22      	ldr	r2, [pc, #136]	; (8006108 <TIM_OC2_SetConfig+0xe4>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d003      	beq.n	800608c <TIM_OC2_SetConfig+0x68>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a21      	ldr	r2, [pc, #132]	; (800610c <TIM_OC2_SetConfig+0xe8>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d10d      	bne.n	80060a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006092:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	011b      	lsls	r3, r3, #4
 800609a:	697a      	ldr	r2, [r7, #20]
 800609c:	4313      	orrs	r3, r2
 800609e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4a17      	ldr	r2, [pc, #92]	; (8006108 <TIM_OC2_SetConfig+0xe4>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d003      	beq.n	80060b8 <TIM_OC2_SetConfig+0x94>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4a16      	ldr	r2, [pc, #88]	; (800610c <TIM_OC2_SetConfig+0xe8>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d113      	bne.n	80060e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	695b      	ldr	r3, [r3, #20]
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	693a      	ldr	r2, [r7, #16]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	699b      	ldr	r3, [r3, #24]
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	693a      	ldr	r2, [r7, #16]
 80060dc:	4313      	orrs	r3, r2
 80060de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	693a      	ldr	r2, [r7, #16]
 80060e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	685a      	ldr	r2, [r3, #4]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	697a      	ldr	r2, [r7, #20]
 80060f8:	621a      	str	r2, [r3, #32]
}
 80060fa:	bf00      	nop
 80060fc:	371c      	adds	r7, #28
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop
 8006108:	40010000 	.word	0x40010000
 800610c:	40010400 	.word	0x40010400

08006110 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006110:	b480      	push	{r7}
 8006112:	b087      	sub	sp, #28
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a1b      	ldr	r3, [r3, #32]
 800611e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6a1b      	ldr	r3, [r3, #32]
 8006124:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	69db      	ldr	r3, [r3, #28]
 8006136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800613e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f023 0303 	bic.w	r3, r3, #3
 8006146:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	4313      	orrs	r3, r2
 8006150:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006158:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	021b      	lsls	r3, r3, #8
 8006160:	697a      	ldr	r2, [r7, #20]
 8006162:	4313      	orrs	r3, r2
 8006164:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a21      	ldr	r2, [pc, #132]	; (80061f0 <TIM_OC3_SetConfig+0xe0>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d003      	beq.n	8006176 <TIM_OC3_SetConfig+0x66>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a20      	ldr	r2, [pc, #128]	; (80061f4 <TIM_OC3_SetConfig+0xe4>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d10d      	bne.n	8006192 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800617c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	021b      	lsls	r3, r3, #8
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	4313      	orrs	r3, r2
 8006188:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006190:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a16      	ldr	r2, [pc, #88]	; (80061f0 <TIM_OC3_SetConfig+0xe0>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d003      	beq.n	80061a2 <TIM_OC3_SetConfig+0x92>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a15      	ldr	r2, [pc, #84]	; (80061f4 <TIM_OC3_SetConfig+0xe4>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d113      	bne.n	80061ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	011b      	lsls	r3, r3, #4
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	011b      	lsls	r3, r3, #4
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	693a      	ldr	r2, [r7, #16]
 80061ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	685a      	ldr	r2, [r3, #4]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	697a      	ldr	r2, [r7, #20]
 80061e2:	621a      	str	r2, [r3, #32]
}
 80061e4:	bf00      	nop
 80061e6:	371c      	adds	r7, #28
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr
 80061f0:	40010000 	.word	0x40010000
 80061f4:	40010400 	.word	0x40010400

080061f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b087      	sub	sp, #28
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a1b      	ldr	r3, [r3, #32]
 8006206:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a1b      	ldr	r3, [r3, #32]
 800620c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	69db      	ldr	r3, [r3, #28]
 800621e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800622e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	021b      	lsls	r3, r3, #8
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	4313      	orrs	r3, r2
 800623a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006242:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	031b      	lsls	r3, r3, #12
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	4313      	orrs	r3, r2
 800624e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a12      	ldr	r2, [pc, #72]	; (800629c <TIM_OC4_SetConfig+0xa4>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d003      	beq.n	8006260 <TIM_OC4_SetConfig+0x68>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a11      	ldr	r2, [pc, #68]	; (80062a0 <TIM_OC4_SetConfig+0xa8>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d109      	bne.n	8006274 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006266:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	695b      	ldr	r3, [r3, #20]
 800626c:	019b      	lsls	r3, r3, #6
 800626e:	697a      	ldr	r2, [r7, #20]
 8006270:	4313      	orrs	r3, r2
 8006272:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	697a      	ldr	r2, [r7, #20]
 8006278:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	685a      	ldr	r2, [r3, #4]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	693a      	ldr	r2, [r7, #16]
 800628c:	621a      	str	r2, [r3, #32]
}
 800628e:	bf00      	nop
 8006290:	371c      	adds	r7, #28
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop
 800629c:	40010000 	.word	0x40010000
 80062a0:	40010400 	.word	0x40010400

080062a4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b087      	sub	sp, #28
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	607a      	str	r2, [r7, #4]
 80062b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6a1b      	ldr	r3, [r3, #32]
 80062b6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6a1b      	ldr	r3, [r3, #32]
 80062bc:	f023 0201 	bic.w	r2, r3, #1
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	699b      	ldr	r3, [r3, #24]
 80062c8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	4a28      	ldr	r2, [pc, #160]	; (8006370 <TIM_TI1_SetConfig+0xcc>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d01b      	beq.n	800630a <TIM_TI1_SetConfig+0x66>
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062d8:	d017      	beq.n	800630a <TIM_TI1_SetConfig+0x66>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	4a25      	ldr	r2, [pc, #148]	; (8006374 <TIM_TI1_SetConfig+0xd0>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d013      	beq.n	800630a <TIM_TI1_SetConfig+0x66>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	4a24      	ldr	r2, [pc, #144]	; (8006378 <TIM_TI1_SetConfig+0xd4>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d00f      	beq.n	800630a <TIM_TI1_SetConfig+0x66>
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	4a23      	ldr	r2, [pc, #140]	; (800637c <TIM_TI1_SetConfig+0xd8>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d00b      	beq.n	800630a <TIM_TI1_SetConfig+0x66>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	4a22      	ldr	r2, [pc, #136]	; (8006380 <TIM_TI1_SetConfig+0xdc>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d007      	beq.n	800630a <TIM_TI1_SetConfig+0x66>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	4a21      	ldr	r2, [pc, #132]	; (8006384 <TIM_TI1_SetConfig+0xe0>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d003      	beq.n	800630a <TIM_TI1_SetConfig+0x66>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	4a20      	ldr	r2, [pc, #128]	; (8006388 <TIM_TI1_SetConfig+0xe4>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d101      	bne.n	800630e <TIM_TI1_SetConfig+0x6a>
 800630a:	2301      	movs	r3, #1
 800630c:	e000      	b.n	8006310 <TIM_TI1_SetConfig+0x6c>
 800630e:	2300      	movs	r3, #0
 8006310:	2b00      	cmp	r3, #0
 8006312:	d008      	beq.n	8006326 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	f023 0303 	bic.w	r3, r3, #3
 800631a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800631c:	697a      	ldr	r2, [r7, #20]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4313      	orrs	r3, r2
 8006322:	617b      	str	r3, [r7, #20]
 8006324:	e003      	b.n	800632e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	f043 0301 	orr.w	r3, r3, #1
 800632c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006334:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	011b      	lsls	r3, r3, #4
 800633a:	b2db      	uxtb	r3, r3
 800633c:	697a      	ldr	r2, [r7, #20]
 800633e:	4313      	orrs	r3, r2
 8006340:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	f023 030a 	bic.w	r3, r3, #10
 8006348:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	f003 030a 	and.w	r3, r3, #10
 8006350:	693a      	ldr	r2, [r7, #16]
 8006352:	4313      	orrs	r3, r2
 8006354:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	697a      	ldr	r2, [r7, #20]
 800635a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	693a      	ldr	r2, [r7, #16]
 8006360:	621a      	str	r2, [r3, #32]
}
 8006362:	bf00      	nop
 8006364:	371c      	adds	r7, #28
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr
 800636e:	bf00      	nop
 8006370:	40010000 	.word	0x40010000
 8006374:	40000400 	.word	0x40000400
 8006378:	40000800 	.word	0x40000800
 800637c:	40000c00 	.word	0x40000c00
 8006380:	40010400 	.word	0x40010400
 8006384:	40014000 	.word	0x40014000
 8006388:	40001800 	.word	0x40001800

0800638c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800638c:	b480      	push	{r7}
 800638e:	b087      	sub	sp, #28
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	607a      	str	r2, [r7, #4]
 8006398:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6a1b      	ldr	r3, [r3, #32]
 800639e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6a1b      	ldr	r3, [r3, #32]
 80063a4:	f023 0210 	bic.w	r2, r3, #16
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	699b      	ldr	r3, [r3, #24]
 80063b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	021b      	lsls	r3, r3, #8
 80063be:	693a      	ldr	r2, [r7, #16]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	031b      	lsls	r3, r3, #12
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	693a      	ldr	r2, [r7, #16]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80063de:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	011b      	lsls	r3, r3, #4
 80063e4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	697a      	ldr	r2, [r7, #20]
 80063f8:	621a      	str	r2, [r3, #32]
}
 80063fa:	bf00      	nop
 80063fc:	371c      	adds	r7, #28
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr

08006406 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006406:	b480      	push	{r7}
 8006408:	b087      	sub	sp, #28
 800640a:	af00      	add	r7, sp, #0
 800640c:	60f8      	str	r0, [r7, #12]
 800640e:	60b9      	str	r1, [r7, #8]
 8006410:	607a      	str	r2, [r7, #4]
 8006412:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6a1b      	ldr	r3, [r3, #32]
 8006418:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6a1b      	ldr	r3, [r3, #32]
 800641e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	69db      	ldr	r3, [r3, #28]
 800642a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	f023 0303 	bic.w	r3, r3, #3
 8006432:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006434:	693a      	ldr	r2, [r7, #16]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4313      	orrs	r3, r2
 800643a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006442:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	011b      	lsls	r3, r3, #4
 8006448:	b2db      	uxtb	r3, r3
 800644a:	693a      	ldr	r2, [r7, #16]
 800644c:	4313      	orrs	r3, r2
 800644e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006456:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	021b      	lsls	r3, r3, #8
 800645c:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006460:	697a      	ldr	r2, [r7, #20]
 8006462:	4313      	orrs	r3, r2
 8006464:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	693a      	ldr	r2, [r7, #16]
 800646a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	697a      	ldr	r2, [r7, #20]
 8006470:	621a      	str	r2, [r3, #32]
}
 8006472:	bf00      	nop
 8006474:	371c      	adds	r7, #28
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr

0800647e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800647e:	b480      	push	{r7}
 8006480:	b087      	sub	sp, #28
 8006482:	af00      	add	r7, sp, #0
 8006484:	60f8      	str	r0, [r7, #12]
 8006486:	60b9      	str	r1, [r7, #8]
 8006488:	607a      	str	r2, [r7, #4]
 800648a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6a1b      	ldr	r3, [r3, #32]
 8006490:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6a1b      	ldr	r3, [r3, #32]
 8006496:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	69db      	ldr	r3, [r3, #28]
 80064a2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064aa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	021b      	lsls	r3, r3, #8
 80064b0:	693a      	ldr	r2, [r7, #16]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064bc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	031b      	lsls	r3, r3, #12
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	693a      	ldr	r2, [r7, #16]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80064d0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	031b      	lsls	r3, r3, #12
 80064d6:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	4313      	orrs	r3, r2
 80064de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	697a      	ldr	r2, [r7, #20]
 80064ea:	621a      	str	r2, [r3, #32]
}
 80064ec:	bf00      	nop
 80064ee:	371c      	adds	r7, #28
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b087      	sub	sp, #28
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	f003 031f 	and.w	r3, r3, #31
 800650a:	2201      	movs	r2, #1
 800650c:	fa02 f303 	lsl.w	r3, r2, r3
 8006510:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6a1a      	ldr	r2, [r3, #32]
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	43db      	mvns	r3, r3
 800651a:	401a      	ands	r2, r3
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6a1a      	ldr	r2, [r3, #32]
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	f003 031f 	and.w	r3, r3, #31
 800652a:	6879      	ldr	r1, [r7, #4]
 800652c:	fa01 f303 	lsl.w	r3, r1, r3
 8006530:	431a      	orrs	r2, r3
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	621a      	str	r2, [r3, #32]
}
 8006536:	bf00      	nop
 8006538:	371c      	adds	r7, #28
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
	...

08006544 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006544:	b480      	push	{r7}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006554:	2b01      	cmp	r3, #1
 8006556:	d101      	bne.n	800655c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006558:	2302      	movs	r3, #2
 800655a:	e05a      	b.n	8006612 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2202      	movs	r2, #2
 8006568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006582:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	68fa      	ldr	r2, [r7, #12]
 800658a:	4313      	orrs	r3, r2
 800658c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a21      	ldr	r2, [pc, #132]	; (8006620 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d022      	beq.n	80065e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065a8:	d01d      	beq.n	80065e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a1d      	ldr	r2, [pc, #116]	; (8006624 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d018      	beq.n	80065e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a1b      	ldr	r2, [pc, #108]	; (8006628 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d013      	beq.n	80065e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a1a      	ldr	r2, [pc, #104]	; (800662c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d00e      	beq.n	80065e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a18      	ldr	r2, [pc, #96]	; (8006630 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d009      	beq.n	80065e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a17      	ldr	r2, [pc, #92]	; (8006634 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d004      	beq.n	80065e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a15      	ldr	r2, [pc, #84]	; (8006638 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d10c      	bne.n	8006600 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	68ba      	ldr	r2, [r7, #8]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	68ba      	ldr	r2, [r7, #8]
 80065fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3714      	adds	r7, #20
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	40010000 	.word	0x40010000
 8006624:	40000400 	.word	0x40000400
 8006628:	40000800 	.word	0x40000800
 800662c:	40000c00 	.word	0x40000c00
 8006630:	40010400 	.word	0x40010400
 8006634:	40014000 	.word	0x40014000
 8006638:	40001800 	.word	0x40001800

0800663c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800663c:	b480      	push	{r7}
 800663e:	b085      	sub	sp, #20
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006646:	2300      	movs	r3, #0
 8006648:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006650:	2b01      	cmp	r3, #1
 8006652:	d101      	bne.n	8006658 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006654:	2302      	movs	r3, #2
 8006656:	e03d      	b.n	80066d4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	4313      	orrs	r3, r2
 800666c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	4313      	orrs	r3, r2
 800667a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	4313      	orrs	r3, r2
 8006688:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4313      	orrs	r3, r2
 8006696:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	695b      	ldr	r3, [r3, #20]
 80066b0:	4313      	orrs	r3, r2
 80066b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	69db      	ldr	r3, [r3, #28]
 80066be:	4313      	orrs	r3, r2
 80066c0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066d2:	2300      	movs	r3, #0
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3714      	adds	r7, #20
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80066e8:	bf00      	nop
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80066fc:	bf00      	nop
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d101      	bne.n	800671a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	e042      	b.n	80067a0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006720:	b2db      	uxtb	r3, r3
 8006722:	2b00      	cmp	r3, #0
 8006724:	d106      	bne.n	8006734 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f7fb fc56 	bl	8001fe0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2224      	movs	r2, #36	; 0x24
 8006738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	68da      	ldr	r2, [r3, #12]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800674a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 fcdb 	bl	8007108 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	691a      	ldr	r2, [r3, #16]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006760:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	695a      	ldr	r2, [r3, #20]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006770:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	68da      	ldr	r2, [r3, #12]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006780:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2220      	movs	r2, #32
 800678c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2220      	movs	r2, #32
 8006794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800679e:	2300      	movs	r3, #0
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3708      	adds	r7, #8
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	4613      	mov	r3, r2
 80067b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	2b20      	cmp	r3, #32
 80067c0:	d112      	bne.n	80067e8 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d002      	beq.n	80067ce <HAL_UART_Receive_IT+0x26>
 80067c8:	88fb      	ldrh	r3, [r7, #6]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d101      	bne.n	80067d2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e00b      	b.n	80067ea <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2200      	movs	r2, #0
 80067d6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80067d8:	88fb      	ldrh	r3, [r7, #6]
 80067da:	461a      	mov	r2, r3
 80067dc:	68b9      	ldr	r1, [r7, #8]
 80067de:	68f8      	ldr	r0, [r7, #12]
 80067e0:	f000 faba 	bl	8006d58 <UART_Start_Receive_IT>
 80067e4:	4603      	mov	r3, r0
 80067e6:	e000      	b.n	80067ea <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80067e8:	2302      	movs	r3, #2
  }
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3710      	adds	r7, #16
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
	...

080067f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b0ba      	sub	sp, #232	; 0xe8
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	695b      	ldr	r3, [r3, #20]
 8006816:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800681a:	2300      	movs	r3, #0
 800681c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006820:	2300      	movs	r3, #0
 8006822:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800682a:	f003 030f 	and.w	r3, r3, #15
 800682e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006832:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006836:	2b00      	cmp	r3, #0
 8006838:	d10f      	bne.n	800685a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800683a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800683e:	f003 0320 	and.w	r3, r3, #32
 8006842:	2b00      	cmp	r3, #0
 8006844:	d009      	beq.n	800685a <HAL_UART_IRQHandler+0x66>
 8006846:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800684a:	f003 0320 	and.w	r3, r3, #32
 800684e:	2b00      	cmp	r3, #0
 8006850:	d003      	beq.n	800685a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 fb99 	bl	8006f8a <UART_Receive_IT>
      return;
 8006858:	e25b      	b.n	8006d12 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800685a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800685e:	2b00      	cmp	r3, #0
 8006860:	f000 80de 	beq.w	8006a20 <HAL_UART_IRQHandler+0x22c>
 8006864:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006868:	f003 0301 	and.w	r3, r3, #1
 800686c:	2b00      	cmp	r3, #0
 800686e:	d106      	bne.n	800687e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006870:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006874:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006878:	2b00      	cmp	r3, #0
 800687a:	f000 80d1 	beq.w	8006a20 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800687e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006882:	f003 0301 	and.w	r3, r3, #1
 8006886:	2b00      	cmp	r3, #0
 8006888:	d00b      	beq.n	80068a2 <HAL_UART_IRQHandler+0xae>
 800688a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800688e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006892:	2b00      	cmp	r3, #0
 8006894:	d005      	beq.n	80068a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800689a:	f043 0201 	orr.w	r2, r3, #1
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068a6:	f003 0304 	and.w	r3, r3, #4
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d00b      	beq.n	80068c6 <HAL_UART_IRQHandler+0xd2>
 80068ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068b2:	f003 0301 	and.w	r3, r3, #1
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d005      	beq.n	80068c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068be:	f043 0202 	orr.w	r2, r3, #2
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068ca:	f003 0302 	and.w	r3, r3, #2
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00b      	beq.n	80068ea <HAL_UART_IRQHandler+0xf6>
 80068d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068d6:	f003 0301 	and.w	r3, r3, #1
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d005      	beq.n	80068ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068e2:	f043 0204 	orr.w	r2, r3, #4
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80068ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068ee:	f003 0308 	and.w	r3, r3, #8
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d011      	beq.n	800691a <HAL_UART_IRQHandler+0x126>
 80068f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068fa:	f003 0320 	and.w	r3, r3, #32
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d105      	bne.n	800690e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006902:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006906:	f003 0301 	and.w	r3, r3, #1
 800690a:	2b00      	cmp	r3, #0
 800690c:	d005      	beq.n	800691a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006912:	f043 0208 	orr.w	r2, r3, #8
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800691e:	2b00      	cmp	r3, #0
 8006920:	f000 81f2 	beq.w	8006d08 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006928:	f003 0320 	and.w	r3, r3, #32
 800692c:	2b00      	cmp	r3, #0
 800692e:	d008      	beq.n	8006942 <HAL_UART_IRQHandler+0x14e>
 8006930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006934:	f003 0320 	and.w	r3, r3, #32
 8006938:	2b00      	cmp	r3, #0
 800693a:	d002      	beq.n	8006942 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 fb24 	bl	8006f8a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	695b      	ldr	r3, [r3, #20]
 8006948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800694c:	2b40      	cmp	r3, #64	; 0x40
 800694e:	bf0c      	ite	eq
 8006950:	2301      	moveq	r3, #1
 8006952:	2300      	movne	r3, #0
 8006954:	b2db      	uxtb	r3, r3
 8006956:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800695e:	f003 0308 	and.w	r3, r3, #8
 8006962:	2b00      	cmp	r3, #0
 8006964:	d103      	bne.n	800696e <HAL_UART_IRQHandler+0x17a>
 8006966:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800696a:	2b00      	cmp	r3, #0
 800696c:	d04f      	beq.n	8006a0e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 fa2c 	bl	8006dcc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	695b      	ldr	r3, [r3, #20]
 800697a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800697e:	2b40      	cmp	r3, #64	; 0x40
 8006980:	d141      	bne.n	8006a06 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	3314      	adds	r3, #20
 8006988:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006990:	e853 3f00 	ldrex	r3, [r3]
 8006994:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006998:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800699c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	3314      	adds	r3, #20
 80069aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80069ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80069b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80069ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80069be:	e841 2300 	strex	r3, r2, [r1]
 80069c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80069c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d1d9      	bne.n	8006982 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d013      	beq.n	80069fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069da:	4a7e      	ldr	r2, [pc, #504]	; (8006bd4 <HAL_UART_IRQHandler+0x3e0>)
 80069dc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069e2:	4618      	mov	r0, r3
 80069e4:	f7fb fd76 	bl	80024d4 <HAL_DMA_Abort_IT>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d016      	beq.n	8006a1c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80069f8:	4610      	mov	r0, r2
 80069fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069fc:	e00e      	b.n	8006a1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 f994 	bl	8006d2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a04:	e00a      	b.n	8006a1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 f990 	bl	8006d2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a0c:	e006      	b.n	8006a1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 f98c 	bl	8006d2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006a1a:	e175      	b.n	8006d08 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a1c:	bf00      	nop
    return;
 8006a1e:	e173      	b.n	8006d08 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	f040 814f 	bne.w	8006cc8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a2e:	f003 0310 	and.w	r3, r3, #16
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f000 8148 	beq.w	8006cc8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a3c:	f003 0310 	and.w	r3, r3, #16
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	f000 8141 	beq.w	8006cc8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a46:	2300      	movs	r3, #0
 8006a48:	60bb      	str	r3, [r7, #8]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	60bb      	str	r3, [r7, #8]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	60bb      	str	r3, [r7, #8]
 8006a5a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	695b      	ldr	r3, [r3, #20]
 8006a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a66:	2b40      	cmp	r3, #64	; 0x40
 8006a68:	f040 80b6 	bne.w	8006bd8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f000 8145 	beq.w	8006d0c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	f080 813e 	bcs.w	8006d0c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a96:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a9c:	69db      	ldr	r3, [r3, #28]
 8006a9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006aa2:	f000 8088 	beq.w	8006bb6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	330c      	adds	r3, #12
 8006aac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ab4:	e853 3f00 	ldrex	r3, [r3]
 8006ab8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006abc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ac0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ac4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	330c      	adds	r3, #12
 8006ace:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006ad2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006ad6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ada:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006ade:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006ae2:	e841 2300 	strex	r3, r2, [r1]
 8006ae6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006aea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d1d9      	bne.n	8006aa6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	3314      	adds	r3, #20
 8006af8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006afa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006afc:	e853 3f00 	ldrex	r3, [r3]
 8006b00:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006b02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b04:	f023 0301 	bic.w	r3, r3, #1
 8006b08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	3314      	adds	r3, #20
 8006b12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006b16:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006b1a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006b1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006b22:	e841 2300 	strex	r3, r2, [r1]
 8006b26:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006b28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d1e1      	bne.n	8006af2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	3314      	adds	r3, #20
 8006b34:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b38:	e853 3f00 	ldrex	r3, [r3]
 8006b3c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006b3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	3314      	adds	r3, #20
 8006b4e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006b52:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006b54:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b56:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006b58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006b5a:	e841 2300 	strex	r3, r2, [r1]
 8006b5e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006b60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1e3      	bne.n	8006b2e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2220      	movs	r2, #32
 8006b6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	330c      	adds	r3, #12
 8006b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b7e:	e853 3f00 	ldrex	r3, [r3]
 8006b82:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b86:	f023 0310 	bic.w	r3, r3, #16
 8006b8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	330c      	adds	r3, #12
 8006b94:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006b98:	65ba      	str	r2, [r7, #88]	; 0x58
 8006b9a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ba0:	e841 2300 	strex	r3, r2, [r1]
 8006ba4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006ba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1e3      	bne.n	8006b74 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f7fb fc1f 	bl	80023f4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2202      	movs	r2, #2
 8006bba:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	1ad3      	subs	r3, r2, r3
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	4619      	mov	r1, r3
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 f8b7 	bl	8006d40 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006bd2:	e09b      	b.n	8006d0c <HAL_UART_IRQHandler+0x518>
 8006bd4:	08006e93 	.word	0x08006e93
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	1ad3      	subs	r3, r2, r3
 8006be4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	f000 808e 	beq.w	8006d10 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006bf4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	f000 8089 	beq.w	8006d10 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	330c      	adds	r3, #12
 8006c04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c08:	e853 3f00 	ldrex	r3, [r3]
 8006c0c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	330c      	adds	r3, #12
 8006c1e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006c22:	647a      	str	r2, [r7, #68]	; 0x44
 8006c24:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c2a:	e841 2300 	strex	r3, r2, [r1]
 8006c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1e3      	bne.n	8006bfe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	3314      	adds	r3, #20
 8006c3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c40:	e853 3f00 	ldrex	r3, [r3]
 8006c44:	623b      	str	r3, [r7, #32]
   return(result);
 8006c46:	6a3b      	ldr	r3, [r7, #32]
 8006c48:	f023 0301 	bic.w	r3, r3, #1
 8006c4c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	3314      	adds	r3, #20
 8006c56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006c5a:	633a      	str	r2, [r7, #48]	; 0x30
 8006c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c62:	e841 2300 	strex	r3, r2, [r1]
 8006c66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d1e3      	bne.n	8006c36 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2220      	movs	r2, #32
 8006c72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	330c      	adds	r3, #12
 8006c82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	e853 3f00 	ldrex	r3, [r3]
 8006c8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f023 0310 	bic.w	r3, r3, #16
 8006c92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	330c      	adds	r3, #12
 8006c9c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006ca0:	61fa      	str	r2, [r7, #28]
 8006ca2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca4:	69b9      	ldr	r1, [r7, #24]
 8006ca6:	69fa      	ldr	r2, [r7, #28]
 8006ca8:	e841 2300 	strex	r3, r2, [r1]
 8006cac:	617b      	str	r3, [r7, #20]
   return(result);
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d1e3      	bne.n	8006c7c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2202      	movs	r2, #2
 8006cb8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006cba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 f83d 	bl	8006d40 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006cc6:	e023      	b.n	8006d10 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d009      	beq.n	8006ce8 <HAL_UART_IRQHandler+0x4f4>
 8006cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d003      	beq.n	8006ce8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 f8ea 	bl	8006eba <UART_Transmit_IT>
    return;
 8006ce6:	e014      	b.n	8006d12 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006ce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d00e      	beq.n	8006d12 <HAL_UART_IRQHandler+0x51e>
 8006cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d008      	beq.n	8006d12 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 f92a 	bl	8006f5a <UART_EndTransmit_IT>
    return;
 8006d06:	e004      	b.n	8006d12 <HAL_UART_IRQHandler+0x51e>
    return;
 8006d08:	bf00      	nop
 8006d0a:	e002      	b.n	8006d12 <HAL_UART_IRQHandler+0x51e>
      return;
 8006d0c:	bf00      	nop
 8006d0e:	e000      	b.n	8006d12 <HAL_UART_IRQHandler+0x51e>
      return;
 8006d10:	bf00      	nop
  }
}
 8006d12:	37e8      	adds	r7, #232	; 0xe8
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006d20:	bf00      	nop
 8006d22:	370c      	adds	r7, #12
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d34:	bf00      	nop
 8006d36:	370c      	adds	r7, #12
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	460b      	mov	r3, r1
 8006d4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d4c:	bf00      	nop
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	4613      	mov	r3, r2
 8006d64:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	68ba      	ldr	r2, [r7, #8]
 8006d6a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	88fa      	ldrh	r2, [r7, #6]
 8006d70:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	88fa      	ldrh	r2, [r7, #6]
 8006d76:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2222      	movs	r2, #34	; 0x22
 8006d82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d007      	beq.n	8006d9e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	68da      	ldr	r2, [r3, #12]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d9c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	695a      	ldr	r2, [r3, #20]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f042 0201 	orr.w	r2, r2, #1
 8006dac:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68da      	ldr	r2, [r3, #12]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f042 0220 	orr.w	r2, r2, #32
 8006dbc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3714      	adds	r7, #20
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b095      	sub	sp, #84	; 0x54
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	330c      	adds	r3, #12
 8006dda:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dde:	e853 3f00 	ldrex	r3, [r3]
 8006de2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006dea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	330c      	adds	r3, #12
 8006df2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006df4:	643a      	str	r2, [r7, #64]	; 0x40
 8006df6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006dfa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006dfc:	e841 2300 	strex	r3, r2, [r1]
 8006e00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d1e5      	bne.n	8006dd4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	3314      	adds	r3, #20
 8006e0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e10:	6a3b      	ldr	r3, [r7, #32]
 8006e12:	e853 3f00 	ldrex	r3, [r3]
 8006e16:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	f023 0301 	bic.w	r3, r3, #1
 8006e1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	3314      	adds	r3, #20
 8006e26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e30:	e841 2300 	strex	r3, r2, [r1]
 8006e34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d1e5      	bne.n	8006e08 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d119      	bne.n	8006e78 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	330c      	adds	r3, #12
 8006e4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	e853 3f00 	ldrex	r3, [r3]
 8006e52:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	f023 0310 	bic.w	r3, r3, #16
 8006e5a:	647b      	str	r3, [r7, #68]	; 0x44
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	330c      	adds	r3, #12
 8006e62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e64:	61ba      	str	r2, [r7, #24]
 8006e66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e68:	6979      	ldr	r1, [r7, #20]
 8006e6a:	69ba      	ldr	r2, [r7, #24]
 8006e6c:	e841 2300 	strex	r3, r2, [r1]
 8006e70:	613b      	str	r3, [r7, #16]
   return(result);
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d1e5      	bne.n	8006e44 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2220      	movs	r2, #32
 8006e7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006e86:	bf00      	nop
 8006e88:	3754      	adds	r7, #84	; 0x54
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr

08006e92 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e92:	b580      	push	{r7, lr}
 8006e94:	b084      	sub	sp, #16
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e9e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006eac:	68f8      	ldr	r0, [r7, #12]
 8006eae:	f7ff ff3d 	bl	8006d2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006eb2:	bf00      	nop
 8006eb4:	3710      	adds	r7, #16
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}

08006eba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006eba:	b480      	push	{r7}
 8006ebc:	b085      	sub	sp, #20
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	2b21      	cmp	r3, #33	; 0x21
 8006ecc:	d13e      	bne.n	8006f4c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ed6:	d114      	bne.n	8006f02 <UART_Transmit_IT+0x48>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d110      	bne.n	8006f02 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6a1b      	ldr	r3, [r3, #32]
 8006ee4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	881b      	ldrh	r3, [r3, #0]
 8006eea:	461a      	mov	r2, r3
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ef4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a1b      	ldr	r3, [r3, #32]
 8006efa:	1c9a      	adds	r2, r3, #2
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	621a      	str	r2, [r3, #32]
 8006f00:	e008      	b.n	8006f14 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a1b      	ldr	r3, [r3, #32]
 8006f06:	1c59      	adds	r1, r3, #1
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	6211      	str	r1, [r2, #32]
 8006f0c:	781a      	ldrb	r2, [r3, #0]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	4619      	mov	r1, r3
 8006f22:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d10f      	bne.n	8006f48 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68da      	ldr	r2, [r3, #12]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f36:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	68da      	ldr	r2, [r3, #12]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f46:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	e000      	b.n	8006f4e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006f4c:	2302      	movs	r3, #2
  }
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3714      	adds	r7, #20
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr

08006f5a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f5a:	b580      	push	{r7, lr}
 8006f5c:	b082      	sub	sp, #8
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	68da      	ldr	r2, [r3, #12]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f70:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2220      	movs	r2, #32
 8006f76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f7ff fecc 	bl	8006d18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006f80:	2300      	movs	r3, #0
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3708      	adds	r7, #8
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}

08006f8a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006f8a:	b580      	push	{r7, lr}
 8006f8c:	b08c      	sub	sp, #48	; 0x30
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	2b22      	cmp	r3, #34	; 0x22
 8006f9c:	f040 80ae 	bne.w	80070fc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fa8:	d117      	bne.n	8006fda <UART_Receive_IT+0x50>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d113      	bne.n	8006fda <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fc8:	b29a      	uxth	r2, r3
 8006fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fcc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd2:	1c9a      	adds	r2, r3, #2
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	629a      	str	r2, [r3, #40]	; 0x28
 8006fd8:	e026      	b.n	8007028 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fde:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fec:	d007      	beq.n	8006ffe <UART_Receive_IT+0x74>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d10a      	bne.n	800700c <UART_Receive_IT+0x82>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d106      	bne.n	800700c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	b2da      	uxtb	r2, r3
 8007006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007008:	701a      	strb	r2, [r3, #0]
 800700a:	e008      	b.n	800701e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	b2db      	uxtb	r3, r3
 8007014:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007018:	b2da      	uxtb	r2, r3
 800701a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800701c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007022:	1c5a      	adds	r2, r3, #1
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800702c:	b29b      	uxth	r3, r3
 800702e:	3b01      	subs	r3, #1
 8007030:	b29b      	uxth	r3, r3
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	4619      	mov	r1, r3
 8007036:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007038:	2b00      	cmp	r3, #0
 800703a:	d15d      	bne.n	80070f8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	68da      	ldr	r2, [r3, #12]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f022 0220 	bic.w	r2, r2, #32
 800704a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68da      	ldr	r2, [r3, #12]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800705a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	695a      	ldr	r2, [r3, #20]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f022 0201 	bic.w	r2, r2, #1
 800706a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2220      	movs	r2, #32
 8007070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800707e:	2b01      	cmp	r3, #1
 8007080:	d135      	bne.n	80070ee <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	330c      	adds	r3, #12
 800708e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	e853 3f00 	ldrex	r3, [r3]
 8007096:	613b      	str	r3, [r7, #16]
   return(result);
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	f023 0310 	bic.w	r3, r3, #16
 800709e:	627b      	str	r3, [r7, #36]	; 0x24
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	330c      	adds	r3, #12
 80070a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070a8:	623a      	str	r2, [r7, #32]
 80070aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ac:	69f9      	ldr	r1, [r7, #28]
 80070ae:	6a3a      	ldr	r2, [r7, #32]
 80070b0:	e841 2300 	strex	r3, r2, [r1]
 80070b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80070b6:	69bb      	ldr	r3, [r7, #24]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d1e5      	bne.n	8007088 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 0310 	and.w	r3, r3, #16
 80070c6:	2b10      	cmp	r3, #16
 80070c8:	d10a      	bne.n	80070e0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80070ca:	2300      	movs	r3, #0
 80070cc:	60fb      	str	r3, [r7, #12]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	60fb      	str	r3, [r7, #12]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	60fb      	str	r3, [r7, #12]
 80070de:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80070e4:	4619      	mov	r1, r3
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f7ff fe2a 	bl	8006d40 <HAL_UARTEx_RxEventCallback>
 80070ec:	e002      	b.n	80070f4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f7fa fffc 	bl	80020ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80070f4:	2300      	movs	r3, #0
 80070f6:	e002      	b.n	80070fe <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80070f8:	2300      	movs	r3, #0
 80070fa:	e000      	b.n	80070fe <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80070fc:	2302      	movs	r3, #2
  }
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3730      	adds	r7, #48	; 0x30
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
	...

08007108 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007108:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800710c:	b0c0      	sub	sp, #256	; 0x100
 800710e:	af00      	add	r7, sp, #0
 8007110:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	691b      	ldr	r3, [r3, #16]
 800711c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007124:	68d9      	ldr	r1, [r3, #12]
 8007126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	ea40 0301 	orr.w	r3, r0, r1
 8007130:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007136:	689a      	ldr	r2, [r3, #8]
 8007138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	431a      	orrs	r2, r3
 8007140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007144:	695b      	ldr	r3, [r3, #20]
 8007146:	431a      	orrs	r2, r3
 8007148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800714c:	69db      	ldr	r3, [r3, #28]
 800714e:	4313      	orrs	r3, r2
 8007150:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	68db      	ldr	r3, [r3, #12]
 800715c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007160:	f021 010c 	bic.w	r1, r1, #12
 8007164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800716e:	430b      	orrs	r3, r1
 8007170:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	695b      	ldr	r3, [r3, #20]
 800717a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800717e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007182:	6999      	ldr	r1, [r3, #24]
 8007184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	ea40 0301 	orr.w	r3, r0, r1
 800718e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	4b8f      	ldr	r3, [pc, #572]	; (80073d4 <UART_SetConfig+0x2cc>)
 8007198:	429a      	cmp	r2, r3
 800719a:	d005      	beq.n	80071a8 <UART_SetConfig+0xa0>
 800719c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	4b8d      	ldr	r3, [pc, #564]	; (80073d8 <UART_SetConfig+0x2d0>)
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d104      	bne.n	80071b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80071a8:	f7fc fe9c 	bl	8003ee4 <HAL_RCC_GetPCLK2Freq>
 80071ac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80071b0:	e003      	b.n	80071ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80071b2:	f7fc fe83 	bl	8003ebc <HAL_RCC_GetPCLK1Freq>
 80071b6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071be:	69db      	ldr	r3, [r3, #28]
 80071c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071c4:	f040 810c 	bne.w	80073e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80071c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071cc:	2200      	movs	r2, #0
 80071ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80071d2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80071d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80071da:	4622      	mov	r2, r4
 80071dc:	462b      	mov	r3, r5
 80071de:	1891      	adds	r1, r2, r2
 80071e0:	65b9      	str	r1, [r7, #88]	; 0x58
 80071e2:	415b      	adcs	r3, r3
 80071e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80071ea:	4621      	mov	r1, r4
 80071ec:	eb12 0801 	adds.w	r8, r2, r1
 80071f0:	4629      	mov	r1, r5
 80071f2:	eb43 0901 	adc.w	r9, r3, r1
 80071f6:	f04f 0200 	mov.w	r2, #0
 80071fa:	f04f 0300 	mov.w	r3, #0
 80071fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007202:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007206:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800720a:	4690      	mov	r8, r2
 800720c:	4699      	mov	r9, r3
 800720e:	4623      	mov	r3, r4
 8007210:	eb18 0303 	adds.w	r3, r8, r3
 8007214:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007218:	462b      	mov	r3, r5
 800721a:	eb49 0303 	adc.w	r3, r9, r3
 800721e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800722e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007232:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007236:	460b      	mov	r3, r1
 8007238:	18db      	adds	r3, r3, r3
 800723a:	653b      	str	r3, [r7, #80]	; 0x50
 800723c:	4613      	mov	r3, r2
 800723e:	eb42 0303 	adc.w	r3, r2, r3
 8007242:	657b      	str	r3, [r7, #84]	; 0x54
 8007244:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007248:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800724c:	f7f9 fd0c 	bl	8000c68 <__aeabi_uldivmod>
 8007250:	4602      	mov	r2, r0
 8007252:	460b      	mov	r3, r1
 8007254:	4b61      	ldr	r3, [pc, #388]	; (80073dc <UART_SetConfig+0x2d4>)
 8007256:	fba3 2302 	umull	r2, r3, r3, r2
 800725a:	095b      	lsrs	r3, r3, #5
 800725c:	011c      	lsls	r4, r3, #4
 800725e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007262:	2200      	movs	r2, #0
 8007264:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007268:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800726c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007270:	4642      	mov	r2, r8
 8007272:	464b      	mov	r3, r9
 8007274:	1891      	adds	r1, r2, r2
 8007276:	64b9      	str	r1, [r7, #72]	; 0x48
 8007278:	415b      	adcs	r3, r3
 800727a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800727c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007280:	4641      	mov	r1, r8
 8007282:	eb12 0a01 	adds.w	sl, r2, r1
 8007286:	4649      	mov	r1, r9
 8007288:	eb43 0b01 	adc.w	fp, r3, r1
 800728c:	f04f 0200 	mov.w	r2, #0
 8007290:	f04f 0300 	mov.w	r3, #0
 8007294:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007298:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800729c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072a0:	4692      	mov	sl, r2
 80072a2:	469b      	mov	fp, r3
 80072a4:	4643      	mov	r3, r8
 80072a6:	eb1a 0303 	adds.w	r3, sl, r3
 80072aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80072ae:	464b      	mov	r3, r9
 80072b0:	eb4b 0303 	adc.w	r3, fp, r3
 80072b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80072b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80072c4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80072c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80072cc:	460b      	mov	r3, r1
 80072ce:	18db      	adds	r3, r3, r3
 80072d0:	643b      	str	r3, [r7, #64]	; 0x40
 80072d2:	4613      	mov	r3, r2
 80072d4:	eb42 0303 	adc.w	r3, r2, r3
 80072d8:	647b      	str	r3, [r7, #68]	; 0x44
 80072da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80072de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80072e2:	f7f9 fcc1 	bl	8000c68 <__aeabi_uldivmod>
 80072e6:	4602      	mov	r2, r0
 80072e8:	460b      	mov	r3, r1
 80072ea:	4611      	mov	r1, r2
 80072ec:	4b3b      	ldr	r3, [pc, #236]	; (80073dc <UART_SetConfig+0x2d4>)
 80072ee:	fba3 2301 	umull	r2, r3, r3, r1
 80072f2:	095b      	lsrs	r3, r3, #5
 80072f4:	2264      	movs	r2, #100	; 0x64
 80072f6:	fb02 f303 	mul.w	r3, r2, r3
 80072fa:	1acb      	subs	r3, r1, r3
 80072fc:	00db      	lsls	r3, r3, #3
 80072fe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007302:	4b36      	ldr	r3, [pc, #216]	; (80073dc <UART_SetConfig+0x2d4>)
 8007304:	fba3 2302 	umull	r2, r3, r3, r2
 8007308:	095b      	lsrs	r3, r3, #5
 800730a:	005b      	lsls	r3, r3, #1
 800730c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007310:	441c      	add	r4, r3
 8007312:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007316:	2200      	movs	r2, #0
 8007318:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800731c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007320:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007324:	4642      	mov	r2, r8
 8007326:	464b      	mov	r3, r9
 8007328:	1891      	adds	r1, r2, r2
 800732a:	63b9      	str	r1, [r7, #56]	; 0x38
 800732c:	415b      	adcs	r3, r3
 800732e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007330:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007334:	4641      	mov	r1, r8
 8007336:	1851      	adds	r1, r2, r1
 8007338:	6339      	str	r1, [r7, #48]	; 0x30
 800733a:	4649      	mov	r1, r9
 800733c:	414b      	adcs	r3, r1
 800733e:	637b      	str	r3, [r7, #52]	; 0x34
 8007340:	f04f 0200 	mov.w	r2, #0
 8007344:	f04f 0300 	mov.w	r3, #0
 8007348:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800734c:	4659      	mov	r1, fp
 800734e:	00cb      	lsls	r3, r1, #3
 8007350:	4651      	mov	r1, sl
 8007352:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007356:	4651      	mov	r1, sl
 8007358:	00ca      	lsls	r2, r1, #3
 800735a:	4610      	mov	r0, r2
 800735c:	4619      	mov	r1, r3
 800735e:	4603      	mov	r3, r0
 8007360:	4642      	mov	r2, r8
 8007362:	189b      	adds	r3, r3, r2
 8007364:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007368:	464b      	mov	r3, r9
 800736a:	460a      	mov	r2, r1
 800736c:	eb42 0303 	adc.w	r3, r2, r3
 8007370:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007380:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007384:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007388:	460b      	mov	r3, r1
 800738a:	18db      	adds	r3, r3, r3
 800738c:	62bb      	str	r3, [r7, #40]	; 0x28
 800738e:	4613      	mov	r3, r2
 8007390:	eb42 0303 	adc.w	r3, r2, r3
 8007394:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007396:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800739a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800739e:	f7f9 fc63 	bl	8000c68 <__aeabi_uldivmod>
 80073a2:	4602      	mov	r2, r0
 80073a4:	460b      	mov	r3, r1
 80073a6:	4b0d      	ldr	r3, [pc, #52]	; (80073dc <UART_SetConfig+0x2d4>)
 80073a8:	fba3 1302 	umull	r1, r3, r3, r2
 80073ac:	095b      	lsrs	r3, r3, #5
 80073ae:	2164      	movs	r1, #100	; 0x64
 80073b0:	fb01 f303 	mul.w	r3, r1, r3
 80073b4:	1ad3      	subs	r3, r2, r3
 80073b6:	00db      	lsls	r3, r3, #3
 80073b8:	3332      	adds	r3, #50	; 0x32
 80073ba:	4a08      	ldr	r2, [pc, #32]	; (80073dc <UART_SetConfig+0x2d4>)
 80073bc:	fba2 2303 	umull	r2, r3, r2, r3
 80073c0:	095b      	lsrs	r3, r3, #5
 80073c2:	f003 0207 	and.w	r2, r3, #7
 80073c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4422      	add	r2, r4
 80073ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80073d0:	e106      	b.n	80075e0 <UART_SetConfig+0x4d8>
 80073d2:	bf00      	nop
 80073d4:	40011000 	.word	0x40011000
 80073d8:	40011400 	.word	0x40011400
 80073dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80073e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073e4:	2200      	movs	r2, #0
 80073e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80073ea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80073ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80073f2:	4642      	mov	r2, r8
 80073f4:	464b      	mov	r3, r9
 80073f6:	1891      	adds	r1, r2, r2
 80073f8:	6239      	str	r1, [r7, #32]
 80073fa:	415b      	adcs	r3, r3
 80073fc:	627b      	str	r3, [r7, #36]	; 0x24
 80073fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007402:	4641      	mov	r1, r8
 8007404:	1854      	adds	r4, r2, r1
 8007406:	4649      	mov	r1, r9
 8007408:	eb43 0501 	adc.w	r5, r3, r1
 800740c:	f04f 0200 	mov.w	r2, #0
 8007410:	f04f 0300 	mov.w	r3, #0
 8007414:	00eb      	lsls	r3, r5, #3
 8007416:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800741a:	00e2      	lsls	r2, r4, #3
 800741c:	4614      	mov	r4, r2
 800741e:	461d      	mov	r5, r3
 8007420:	4643      	mov	r3, r8
 8007422:	18e3      	adds	r3, r4, r3
 8007424:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007428:	464b      	mov	r3, r9
 800742a:	eb45 0303 	adc.w	r3, r5, r3
 800742e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800743e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007442:	f04f 0200 	mov.w	r2, #0
 8007446:	f04f 0300 	mov.w	r3, #0
 800744a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800744e:	4629      	mov	r1, r5
 8007450:	008b      	lsls	r3, r1, #2
 8007452:	4621      	mov	r1, r4
 8007454:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007458:	4621      	mov	r1, r4
 800745a:	008a      	lsls	r2, r1, #2
 800745c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007460:	f7f9 fc02 	bl	8000c68 <__aeabi_uldivmod>
 8007464:	4602      	mov	r2, r0
 8007466:	460b      	mov	r3, r1
 8007468:	4b60      	ldr	r3, [pc, #384]	; (80075ec <UART_SetConfig+0x4e4>)
 800746a:	fba3 2302 	umull	r2, r3, r3, r2
 800746e:	095b      	lsrs	r3, r3, #5
 8007470:	011c      	lsls	r4, r3, #4
 8007472:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007476:	2200      	movs	r2, #0
 8007478:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800747c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007480:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007484:	4642      	mov	r2, r8
 8007486:	464b      	mov	r3, r9
 8007488:	1891      	adds	r1, r2, r2
 800748a:	61b9      	str	r1, [r7, #24]
 800748c:	415b      	adcs	r3, r3
 800748e:	61fb      	str	r3, [r7, #28]
 8007490:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007494:	4641      	mov	r1, r8
 8007496:	1851      	adds	r1, r2, r1
 8007498:	6139      	str	r1, [r7, #16]
 800749a:	4649      	mov	r1, r9
 800749c:	414b      	adcs	r3, r1
 800749e:	617b      	str	r3, [r7, #20]
 80074a0:	f04f 0200 	mov.w	r2, #0
 80074a4:	f04f 0300 	mov.w	r3, #0
 80074a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80074ac:	4659      	mov	r1, fp
 80074ae:	00cb      	lsls	r3, r1, #3
 80074b0:	4651      	mov	r1, sl
 80074b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074b6:	4651      	mov	r1, sl
 80074b8:	00ca      	lsls	r2, r1, #3
 80074ba:	4610      	mov	r0, r2
 80074bc:	4619      	mov	r1, r3
 80074be:	4603      	mov	r3, r0
 80074c0:	4642      	mov	r2, r8
 80074c2:	189b      	adds	r3, r3, r2
 80074c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80074c8:	464b      	mov	r3, r9
 80074ca:	460a      	mov	r2, r1
 80074cc:	eb42 0303 	adc.w	r3, r2, r3
 80074d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80074d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80074de:	67fa      	str	r2, [r7, #124]	; 0x7c
 80074e0:	f04f 0200 	mov.w	r2, #0
 80074e4:	f04f 0300 	mov.w	r3, #0
 80074e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80074ec:	4649      	mov	r1, r9
 80074ee:	008b      	lsls	r3, r1, #2
 80074f0:	4641      	mov	r1, r8
 80074f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074f6:	4641      	mov	r1, r8
 80074f8:	008a      	lsls	r2, r1, #2
 80074fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80074fe:	f7f9 fbb3 	bl	8000c68 <__aeabi_uldivmod>
 8007502:	4602      	mov	r2, r0
 8007504:	460b      	mov	r3, r1
 8007506:	4611      	mov	r1, r2
 8007508:	4b38      	ldr	r3, [pc, #224]	; (80075ec <UART_SetConfig+0x4e4>)
 800750a:	fba3 2301 	umull	r2, r3, r3, r1
 800750e:	095b      	lsrs	r3, r3, #5
 8007510:	2264      	movs	r2, #100	; 0x64
 8007512:	fb02 f303 	mul.w	r3, r2, r3
 8007516:	1acb      	subs	r3, r1, r3
 8007518:	011b      	lsls	r3, r3, #4
 800751a:	3332      	adds	r3, #50	; 0x32
 800751c:	4a33      	ldr	r2, [pc, #204]	; (80075ec <UART_SetConfig+0x4e4>)
 800751e:	fba2 2303 	umull	r2, r3, r2, r3
 8007522:	095b      	lsrs	r3, r3, #5
 8007524:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007528:	441c      	add	r4, r3
 800752a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800752e:	2200      	movs	r2, #0
 8007530:	673b      	str	r3, [r7, #112]	; 0x70
 8007532:	677a      	str	r2, [r7, #116]	; 0x74
 8007534:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007538:	4642      	mov	r2, r8
 800753a:	464b      	mov	r3, r9
 800753c:	1891      	adds	r1, r2, r2
 800753e:	60b9      	str	r1, [r7, #8]
 8007540:	415b      	adcs	r3, r3
 8007542:	60fb      	str	r3, [r7, #12]
 8007544:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007548:	4641      	mov	r1, r8
 800754a:	1851      	adds	r1, r2, r1
 800754c:	6039      	str	r1, [r7, #0]
 800754e:	4649      	mov	r1, r9
 8007550:	414b      	adcs	r3, r1
 8007552:	607b      	str	r3, [r7, #4]
 8007554:	f04f 0200 	mov.w	r2, #0
 8007558:	f04f 0300 	mov.w	r3, #0
 800755c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007560:	4659      	mov	r1, fp
 8007562:	00cb      	lsls	r3, r1, #3
 8007564:	4651      	mov	r1, sl
 8007566:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800756a:	4651      	mov	r1, sl
 800756c:	00ca      	lsls	r2, r1, #3
 800756e:	4610      	mov	r0, r2
 8007570:	4619      	mov	r1, r3
 8007572:	4603      	mov	r3, r0
 8007574:	4642      	mov	r2, r8
 8007576:	189b      	adds	r3, r3, r2
 8007578:	66bb      	str	r3, [r7, #104]	; 0x68
 800757a:	464b      	mov	r3, r9
 800757c:	460a      	mov	r2, r1
 800757e:	eb42 0303 	adc.w	r3, r2, r3
 8007582:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	663b      	str	r3, [r7, #96]	; 0x60
 800758e:	667a      	str	r2, [r7, #100]	; 0x64
 8007590:	f04f 0200 	mov.w	r2, #0
 8007594:	f04f 0300 	mov.w	r3, #0
 8007598:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800759c:	4649      	mov	r1, r9
 800759e:	008b      	lsls	r3, r1, #2
 80075a0:	4641      	mov	r1, r8
 80075a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075a6:	4641      	mov	r1, r8
 80075a8:	008a      	lsls	r2, r1, #2
 80075aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80075ae:	f7f9 fb5b 	bl	8000c68 <__aeabi_uldivmod>
 80075b2:	4602      	mov	r2, r0
 80075b4:	460b      	mov	r3, r1
 80075b6:	4b0d      	ldr	r3, [pc, #52]	; (80075ec <UART_SetConfig+0x4e4>)
 80075b8:	fba3 1302 	umull	r1, r3, r3, r2
 80075bc:	095b      	lsrs	r3, r3, #5
 80075be:	2164      	movs	r1, #100	; 0x64
 80075c0:	fb01 f303 	mul.w	r3, r1, r3
 80075c4:	1ad3      	subs	r3, r2, r3
 80075c6:	011b      	lsls	r3, r3, #4
 80075c8:	3332      	adds	r3, #50	; 0x32
 80075ca:	4a08      	ldr	r2, [pc, #32]	; (80075ec <UART_SetConfig+0x4e4>)
 80075cc:	fba2 2303 	umull	r2, r3, r2, r3
 80075d0:	095b      	lsrs	r3, r3, #5
 80075d2:	f003 020f 	and.w	r2, r3, #15
 80075d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4422      	add	r2, r4
 80075de:	609a      	str	r2, [r3, #8]
}
 80075e0:	bf00      	nop
 80075e2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80075e6:	46bd      	mov	sp, r7
 80075e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075ec:	51eb851f 	.word	0x51eb851f

080075f0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80075f0:	b580      	push	{r7, lr}
 80075f2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80075f4:	4b05      	ldr	r3, [pc, #20]	; (800760c <SysTick_Handler+0x1c>)
 80075f6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80075f8:	f001 fcaa 	bl	8008f50 <xTaskGetSchedulerState>
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d001      	beq.n	8007606 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007602:	f002 fa91 	bl	8009b28 <xPortSysTickHandler>
  }
}
 8007606:	bf00      	nop
 8007608:	bd80      	pop	{r7, pc}
 800760a:	bf00      	nop
 800760c:	e000e010 	.word	0xe000e010

08007610 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007610:	b480      	push	{r7}
 8007612:	b085      	sub	sp, #20
 8007614:	af00      	add	r7, sp, #0
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	4a07      	ldr	r2, [pc, #28]	; (800763c <vApplicationGetIdleTaskMemory+0x2c>)
 8007620:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	4a06      	ldr	r2, [pc, #24]	; (8007640 <vApplicationGetIdleTaskMemory+0x30>)
 8007626:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2280      	movs	r2, #128	; 0x80
 800762c:	601a      	str	r2, [r3, #0]
}
 800762e:	bf00      	nop
 8007630:	3714      	adds	r7, #20
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr
 800763a:	bf00      	nop
 800763c:	20000424 	.word	0x20000424
 8007640:	200004cc 	.word	0x200004cc

08007644 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007644:	b480      	push	{r7}
 8007646:	b085      	sub	sp, #20
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	4a07      	ldr	r2, [pc, #28]	; (8007670 <vApplicationGetTimerTaskMemory+0x2c>)
 8007654:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	4a06      	ldr	r2, [pc, #24]	; (8007674 <vApplicationGetTimerTaskMemory+0x30>)
 800765a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007662:	601a      	str	r2, [r3, #0]
}
 8007664:	bf00      	nop
 8007666:	3714      	adds	r7, #20
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr
 8007670:	200006cc 	.word	0x200006cc
 8007674:	20000774 	.word	0x20000774

08007678 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f103 0208 	add.w	r2, r3, #8
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f04f 32ff 	mov.w	r2, #4294967295
 8007690:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f103 0208 	add.w	r2, r3, #8
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f103 0208 	add.w	r2, r3, #8
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80076ac:	bf00      	nop
 80076ae:	370c      	adds	r7, #12
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80076c6:	bf00      	nop
 80076c8:	370c      	adds	r7, #12
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr

080076d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80076d2:	b480      	push	{r7}
 80076d4:	b085      	sub	sp, #20
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]
 80076da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	68fa      	ldr	r2, [r7, #12]
 80076e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	689a      	ldr	r2, [r3, #8]
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	683a      	ldr	r2, [r7, #0]
 80076f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	683a      	ldr	r2, [r7, #0]
 80076fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	1c5a      	adds	r2, r3, #1
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	601a      	str	r2, [r3, #0]
}
 800770e:	bf00      	nop
 8007710:	3714      	adds	r7, #20
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr

0800771a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800771a:	b480      	push	{r7}
 800771c:	b085      	sub	sp, #20
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
 8007722:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007730:	d103      	bne.n	800773a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	60fb      	str	r3, [r7, #12]
 8007738:	e00c      	b.n	8007754 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	3308      	adds	r3, #8
 800773e:	60fb      	str	r3, [r7, #12]
 8007740:	e002      	b.n	8007748 <vListInsert+0x2e>
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	60fb      	str	r3, [r7, #12]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	68ba      	ldr	r2, [r7, #8]
 8007750:	429a      	cmp	r2, r3
 8007752:	d2f6      	bcs.n	8007742 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	685a      	ldr	r2, [r3, #4]
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	683a      	ldr	r2, [r7, #0]
 8007762:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	68fa      	ldr	r2, [r7, #12]
 8007768:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	683a      	ldr	r2, [r7, #0]
 800776e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	1c5a      	adds	r2, r3, #1
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	601a      	str	r2, [r3, #0]
}
 8007780:	bf00      	nop
 8007782:	3714      	adds	r7, #20
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800778c:	b480      	push	{r7}
 800778e:	b085      	sub	sp, #20
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	691b      	ldr	r3, [r3, #16]
 8007798:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	6892      	ldr	r2, [r2, #8]
 80077a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	687a      	ldr	r2, [r7, #4]
 80077aa:	6852      	ldr	r2, [r2, #4]
 80077ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d103      	bne.n	80077c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	689a      	ldr	r2, [r3, #8]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	1e5a      	subs	r2, r3, #1
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3714      	adds	r7, #20
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d10a      	bne.n	800780a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80077f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f8:	f383 8811 	msr	BASEPRI, r3
 80077fc:	f3bf 8f6f 	isb	sy
 8007800:	f3bf 8f4f 	dsb	sy
 8007804:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007806:	bf00      	nop
 8007808:	e7fe      	b.n	8007808 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800780a:	f002 f8fb 	bl	8009a04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007816:	68f9      	ldr	r1, [r7, #12]
 8007818:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800781a:	fb01 f303 	mul.w	r3, r1, r3
 800781e:	441a      	add	r2, r3
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2200      	movs	r2, #0
 8007828:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681a      	ldr	r2, [r3, #0]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800783a:	3b01      	subs	r3, #1
 800783c:	68f9      	ldr	r1, [r7, #12]
 800783e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007840:	fb01 f303 	mul.w	r3, r1, r3
 8007844:	441a      	add	r2, r3
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	22ff      	movs	r2, #255	; 0xff
 800784e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	22ff      	movs	r2, #255	; 0xff
 8007856:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d114      	bne.n	800788a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	691b      	ldr	r3, [r3, #16]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d01a      	beq.n	800789e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	3310      	adds	r3, #16
 800786c:	4618      	mov	r0, r3
 800786e:	f001 f9ad 	bl	8008bcc <xTaskRemoveFromEventList>
 8007872:	4603      	mov	r3, r0
 8007874:	2b00      	cmp	r3, #0
 8007876:	d012      	beq.n	800789e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007878:	4b0c      	ldr	r3, [pc, #48]	; (80078ac <xQueueGenericReset+0xcc>)
 800787a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800787e:	601a      	str	r2, [r3, #0]
 8007880:	f3bf 8f4f 	dsb	sy
 8007884:	f3bf 8f6f 	isb	sy
 8007888:	e009      	b.n	800789e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	3310      	adds	r3, #16
 800788e:	4618      	mov	r0, r3
 8007890:	f7ff fef2 	bl	8007678 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	3324      	adds	r3, #36	; 0x24
 8007898:	4618      	mov	r0, r3
 800789a:	f7ff feed 	bl	8007678 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800789e:	f002 f8e1 	bl	8009a64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80078a2:	2301      	movs	r3, #1
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3710      	adds	r7, #16
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}
 80078ac:	e000ed04 	.word	0xe000ed04

080078b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b08e      	sub	sp, #56	; 0x38
 80078b4:	af02      	add	r7, sp, #8
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	60b9      	str	r1, [r7, #8]
 80078ba:	607a      	str	r2, [r7, #4]
 80078bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d10a      	bne.n	80078da <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80078c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c8:	f383 8811 	msr	BASEPRI, r3
 80078cc:	f3bf 8f6f 	isb	sy
 80078d0:	f3bf 8f4f 	dsb	sy
 80078d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80078d6:	bf00      	nop
 80078d8:	e7fe      	b.n	80078d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d10a      	bne.n	80078f6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80078e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e4:	f383 8811 	msr	BASEPRI, r3
 80078e8:	f3bf 8f6f 	isb	sy
 80078ec:	f3bf 8f4f 	dsb	sy
 80078f0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80078f2:	bf00      	nop
 80078f4:	e7fe      	b.n	80078f4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d002      	beq.n	8007902 <xQueueGenericCreateStatic+0x52>
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d001      	beq.n	8007906 <xQueueGenericCreateStatic+0x56>
 8007902:	2301      	movs	r3, #1
 8007904:	e000      	b.n	8007908 <xQueueGenericCreateStatic+0x58>
 8007906:	2300      	movs	r3, #0
 8007908:	2b00      	cmp	r3, #0
 800790a:	d10a      	bne.n	8007922 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800790c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007910:	f383 8811 	msr	BASEPRI, r3
 8007914:	f3bf 8f6f 	isb	sy
 8007918:	f3bf 8f4f 	dsb	sy
 800791c:	623b      	str	r3, [r7, #32]
}
 800791e:	bf00      	nop
 8007920:	e7fe      	b.n	8007920 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d102      	bne.n	800792e <xQueueGenericCreateStatic+0x7e>
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d101      	bne.n	8007932 <xQueueGenericCreateStatic+0x82>
 800792e:	2301      	movs	r3, #1
 8007930:	e000      	b.n	8007934 <xQueueGenericCreateStatic+0x84>
 8007932:	2300      	movs	r3, #0
 8007934:	2b00      	cmp	r3, #0
 8007936:	d10a      	bne.n	800794e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800793c:	f383 8811 	msr	BASEPRI, r3
 8007940:	f3bf 8f6f 	isb	sy
 8007944:	f3bf 8f4f 	dsb	sy
 8007948:	61fb      	str	r3, [r7, #28]
}
 800794a:	bf00      	nop
 800794c:	e7fe      	b.n	800794c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800794e:	2350      	movs	r3, #80	; 0x50
 8007950:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	2b50      	cmp	r3, #80	; 0x50
 8007956:	d00a      	beq.n	800796e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800795c:	f383 8811 	msr	BASEPRI, r3
 8007960:	f3bf 8f6f 	isb	sy
 8007964:	f3bf 8f4f 	dsb	sy
 8007968:	61bb      	str	r3, [r7, #24]
}
 800796a:	bf00      	nop
 800796c:	e7fe      	b.n	800796c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800796e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007976:	2b00      	cmp	r3, #0
 8007978:	d00d      	beq.n	8007996 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800797a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800797c:	2201      	movs	r2, #1
 800797e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007982:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007988:	9300      	str	r3, [sp, #0]
 800798a:	4613      	mov	r3, r2
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	68b9      	ldr	r1, [r7, #8]
 8007990:	68f8      	ldr	r0, [r7, #12]
 8007992:	f000 f83f 	bl	8007a14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007998:	4618      	mov	r0, r3
 800799a:	3730      	adds	r7, #48	; 0x30
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b08a      	sub	sp, #40	; 0x28
 80079a4:	af02      	add	r7, sp, #8
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	60b9      	str	r1, [r7, #8]
 80079aa:	4613      	mov	r3, r2
 80079ac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d10a      	bne.n	80079ca <xQueueGenericCreate+0x2a>
	__asm volatile
 80079b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b8:	f383 8811 	msr	BASEPRI, r3
 80079bc:	f3bf 8f6f 	isb	sy
 80079c0:	f3bf 8f4f 	dsb	sy
 80079c4:	613b      	str	r3, [r7, #16]
}
 80079c6:	bf00      	nop
 80079c8:	e7fe      	b.n	80079c8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	68ba      	ldr	r2, [r7, #8]
 80079ce:	fb02 f303 	mul.w	r3, r2, r3
 80079d2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	3350      	adds	r3, #80	; 0x50
 80079d8:	4618      	mov	r0, r3
 80079da:	f002 f935 	bl	8009c48 <pvPortMalloc>
 80079de:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80079e0:	69bb      	ldr	r3, [r7, #24]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d011      	beq.n	8007a0a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80079e6:	69bb      	ldr	r3, [r7, #24]
 80079e8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	3350      	adds	r3, #80	; 0x50
 80079ee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80079f0:	69bb      	ldr	r3, [r7, #24]
 80079f2:	2200      	movs	r2, #0
 80079f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80079f8:	79fa      	ldrb	r2, [r7, #7]
 80079fa:	69bb      	ldr	r3, [r7, #24]
 80079fc:	9300      	str	r3, [sp, #0]
 80079fe:	4613      	mov	r3, r2
 8007a00:	697a      	ldr	r2, [r7, #20]
 8007a02:	68b9      	ldr	r1, [r7, #8]
 8007a04:	68f8      	ldr	r0, [r7, #12]
 8007a06:	f000 f805 	bl	8007a14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007a0a:	69bb      	ldr	r3, [r7, #24]
	}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3720      	adds	r7, #32
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b084      	sub	sp, #16
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	60f8      	str	r0, [r7, #12]
 8007a1c:	60b9      	str	r1, [r7, #8]
 8007a1e:	607a      	str	r2, [r7, #4]
 8007a20:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d103      	bne.n	8007a30 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007a28:	69bb      	ldr	r3, [r7, #24]
 8007a2a:	69ba      	ldr	r2, [r7, #24]
 8007a2c:	601a      	str	r2, [r3, #0]
 8007a2e:	e002      	b.n	8007a36 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007a36:	69bb      	ldr	r3, [r7, #24]
 8007a38:	68fa      	ldr	r2, [r7, #12]
 8007a3a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007a3c:	69bb      	ldr	r3, [r7, #24]
 8007a3e:	68ba      	ldr	r2, [r7, #8]
 8007a40:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007a42:	2101      	movs	r1, #1
 8007a44:	69b8      	ldr	r0, [r7, #24]
 8007a46:	f7ff fecb 	bl	80077e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007a4a:	69bb      	ldr	r3, [r7, #24]
 8007a4c:	78fa      	ldrb	r2, [r7, #3]
 8007a4e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007a52:	bf00      	nop
 8007a54:	3710      	adds	r7, #16
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
	...

08007a5c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b08e      	sub	sp, #56	; 0x38
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	60b9      	str	r1, [r7, #8]
 8007a66:	607a      	str	r2, [r7, #4]
 8007a68:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d10a      	bne.n	8007a8e <xQueueGenericSend+0x32>
	__asm volatile
 8007a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a7c:	f383 8811 	msr	BASEPRI, r3
 8007a80:	f3bf 8f6f 	isb	sy
 8007a84:	f3bf 8f4f 	dsb	sy
 8007a88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007a8a:	bf00      	nop
 8007a8c:	e7fe      	b.n	8007a8c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d103      	bne.n	8007a9c <xQueueGenericSend+0x40>
 8007a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d101      	bne.n	8007aa0 <xQueueGenericSend+0x44>
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	e000      	b.n	8007aa2 <xQueueGenericSend+0x46>
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d10a      	bne.n	8007abc <xQueueGenericSend+0x60>
	__asm volatile
 8007aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aaa:	f383 8811 	msr	BASEPRI, r3
 8007aae:	f3bf 8f6f 	isb	sy
 8007ab2:	f3bf 8f4f 	dsb	sy
 8007ab6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007ab8:	bf00      	nop
 8007aba:	e7fe      	b.n	8007aba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	2b02      	cmp	r3, #2
 8007ac0:	d103      	bne.n	8007aca <xQueueGenericSend+0x6e>
 8007ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d101      	bne.n	8007ace <xQueueGenericSend+0x72>
 8007aca:	2301      	movs	r3, #1
 8007acc:	e000      	b.n	8007ad0 <xQueueGenericSend+0x74>
 8007ace:	2300      	movs	r3, #0
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d10a      	bne.n	8007aea <xQueueGenericSend+0x8e>
	__asm volatile
 8007ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad8:	f383 8811 	msr	BASEPRI, r3
 8007adc:	f3bf 8f6f 	isb	sy
 8007ae0:	f3bf 8f4f 	dsb	sy
 8007ae4:	623b      	str	r3, [r7, #32]
}
 8007ae6:	bf00      	nop
 8007ae8:	e7fe      	b.n	8007ae8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007aea:	f001 fa31 	bl	8008f50 <xTaskGetSchedulerState>
 8007aee:	4603      	mov	r3, r0
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d102      	bne.n	8007afa <xQueueGenericSend+0x9e>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d101      	bne.n	8007afe <xQueueGenericSend+0xa2>
 8007afa:	2301      	movs	r3, #1
 8007afc:	e000      	b.n	8007b00 <xQueueGenericSend+0xa4>
 8007afe:	2300      	movs	r3, #0
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d10a      	bne.n	8007b1a <xQueueGenericSend+0xbe>
	__asm volatile
 8007b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b08:	f383 8811 	msr	BASEPRI, r3
 8007b0c:	f3bf 8f6f 	isb	sy
 8007b10:	f3bf 8f4f 	dsb	sy
 8007b14:	61fb      	str	r3, [r7, #28]
}
 8007b16:	bf00      	nop
 8007b18:	e7fe      	b.n	8007b18 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b1a:	f001 ff73 	bl	8009a04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d302      	bcc.n	8007b30 <xQueueGenericSend+0xd4>
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	2b02      	cmp	r3, #2
 8007b2e:	d129      	bne.n	8007b84 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007b30:	683a      	ldr	r2, [r7, #0]
 8007b32:	68b9      	ldr	r1, [r7, #8]
 8007b34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b36:	f000 fa0b 	bl	8007f50 <prvCopyDataToQueue>
 8007b3a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d010      	beq.n	8007b66 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b46:	3324      	adds	r3, #36	; 0x24
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f001 f83f 	bl	8008bcc <xTaskRemoveFromEventList>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d013      	beq.n	8007b7c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007b54:	4b3f      	ldr	r3, [pc, #252]	; (8007c54 <xQueueGenericSend+0x1f8>)
 8007b56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b5a:	601a      	str	r2, [r3, #0]
 8007b5c:	f3bf 8f4f 	dsb	sy
 8007b60:	f3bf 8f6f 	isb	sy
 8007b64:	e00a      	b.n	8007b7c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d007      	beq.n	8007b7c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007b6c:	4b39      	ldr	r3, [pc, #228]	; (8007c54 <xQueueGenericSend+0x1f8>)
 8007b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b72:	601a      	str	r2, [r3, #0]
 8007b74:	f3bf 8f4f 	dsb	sy
 8007b78:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007b7c:	f001 ff72 	bl	8009a64 <vPortExitCritical>
				return pdPASS;
 8007b80:	2301      	movs	r3, #1
 8007b82:	e063      	b.n	8007c4c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d103      	bne.n	8007b92 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007b8a:	f001 ff6b 	bl	8009a64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	e05c      	b.n	8007c4c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d106      	bne.n	8007ba6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b98:	f107 0314 	add.w	r3, r7, #20
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f001 f879 	bl	8008c94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007ba6:	f001 ff5d 	bl	8009a64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007baa:	f000 fde5 	bl	8008778 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007bae:	f001 ff29 	bl	8009a04 <vPortEnterCritical>
 8007bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007bb8:	b25b      	sxtb	r3, r3
 8007bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bbe:	d103      	bne.n	8007bc8 <xQueueGenericSend+0x16c>
 8007bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007bce:	b25b      	sxtb	r3, r3
 8007bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bd4:	d103      	bne.n	8007bde <xQueueGenericSend+0x182>
 8007bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007bde:	f001 ff41 	bl	8009a64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007be2:	1d3a      	adds	r2, r7, #4
 8007be4:	f107 0314 	add.w	r3, r7, #20
 8007be8:	4611      	mov	r1, r2
 8007bea:	4618      	mov	r0, r3
 8007bec:	f001 f868 	bl	8008cc0 <xTaskCheckForTimeOut>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d124      	bne.n	8007c40 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007bf6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007bf8:	f000 faa2 	bl	8008140 <prvIsQueueFull>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d018      	beq.n	8007c34 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c04:	3310      	adds	r3, #16
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	4611      	mov	r1, r2
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f000 ff8e 	bl	8008b2c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007c10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c12:	f000 fa2d 	bl	8008070 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007c16:	f000 fdbd 	bl	8008794 <xTaskResumeAll>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f47f af7c 	bne.w	8007b1a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007c22:	4b0c      	ldr	r3, [pc, #48]	; (8007c54 <xQueueGenericSend+0x1f8>)
 8007c24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c28:	601a      	str	r2, [r3, #0]
 8007c2a:	f3bf 8f4f 	dsb	sy
 8007c2e:	f3bf 8f6f 	isb	sy
 8007c32:	e772      	b.n	8007b1a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007c34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c36:	f000 fa1b 	bl	8008070 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c3a:	f000 fdab 	bl	8008794 <xTaskResumeAll>
 8007c3e:	e76c      	b.n	8007b1a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007c40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c42:	f000 fa15 	bl	8008070 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c46:	f000 fda5 	bl	8008794 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007c4a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3738      	adds	r7, #56	; 0x38
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}
 8007c54:	e000ed04 	.word	0xe000ed04

08007c58 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b090      	sub	sp, #64	; 0x40
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	60b9      	str	r1, [r7, #8]
 8007c62:	607a      	str	r2, [r7, #4]
 8007c64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d10a      	bne.n	8007c86 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c74:	f383 8811 	msr	BASEPRI, r3
 8007c78:	f3bf 8f6f 	isb	sy
 8007c7c:	f3bf 8f4f 	dsb	sy
 8007c80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007c82:	bf00      	nop
 8007c84:	e7fe      	b.n	8007c84 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d103      	bne.n	8007c94 <xQueueGenericSendFromISR+0x3c>
 8007c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d101      	bne.n	8007c98 <xQueueGenericSendFromISR+0x40>
 8007c94:	2301      	movs	r3, #1
 8007c96:	e000      	b.n	8007c9a <xQueueGenericSendFromISR+0x42>
 8007c98:	2300      	movs	r3, #0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d10a      	bne.n	8007cb4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca2:	f383 8811 	msr	BASEPRI, r3
 8007ca6:	f3bf 8f6f 	isb	sy
 8007caa:	f3bf 8f4f 	dsb	sy
 8007cae:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007cb0:	bf00      	nop
 8007cb2:	e7fe      	b.n	8007cb2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	2b02      	cmp	r3, #2
 8007cb8:	d103      	bne.n	8007cc2 <xQueueGenericSendFromISR+0x6a>
 8007cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d101      	bne.n	8007cc6 <xQueueGenericSendFromISR+0x6e>
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e000      	b.n	8007cc8 <xQueueGenericSendFromISR+0x70>
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d10a      	bne.n	8007ce2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd0:	f383 8811 	msr	BASEPRI, r3
 8007cd4:	f3bf 8f6f 	isb	sy
 8007cd8:	f3bf 8f4f 	dsb	sy
 8007cdc:	623b      	str	r3, [r7, #32]
}
 8007cde:	bf00      	nop
 8007ce0:	e7fe      	b.n	8007ce0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007ce2:	f001 ff71 	bl	8009bc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007ce6:	f3ef 8211 	mrs	r2, BASEPRI
 8007cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cee:	f383 8811 	msr	BASEPRI, r3
 8007cf2:	f3bf 8f6f 	isb	sy
 8007cf6:	f3bf 8f4f 	dsb	sy
 8007cfa:	61fa      	str	r2, [r7, #28]
 8007cfc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007cfe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007d00:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d302      	bcc.n	8007d14 <xQueueGenericSendFromISR+0xbc>
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	2b02      	cmp	r3, #2
 8007d12:	d12f      	bne.n	8007d74 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d22:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d24:	683a      	ldr	r2, [r7, #0]
 8007d26:	68b9      	ldr	r1, [r7, #8]
 8007d28:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007d2a:	f000 f911 	bl	8007f50 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007d2e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d36:	d112      	bne.n	8007d5e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d016      	beq.n	8007d6e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d42:	3324      	adds	r3, #36	; 0x24
 8007d44:	4618      	mov	r0, r3
 8007d46:	f000 ff41 	bl	8008bcc <xTaskRemoveFromEventList>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d00e      	beq.n	8007d6e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d00b      	beq.n	8007d6e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2201      	movs	r2, #1
 8007d5a:	601a      	str	r2, [r3, #0]
 8007d5c:	e007      	b.n	8007d6e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007d5e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007d62:	3301      	adds	r3, #1
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	b25a      	sxtb	r2, r3
 8007d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007d72:	e001      	b.n	8007d78 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007d74:	2300      	movs	r3, #0
 8007d76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d7a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007d82:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3740      	adds	r7, #64	; 0x40
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
	...

08007d90 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b08c      	sub	sp, #48	; 0x30
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d10a      	bne.n	8007dc0 <xQueueReceive+0x30>
	__asm volatile
 8007daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dae:	f383 8811 	msr	BASEPRI, r3
 8007db2:	f3bf 8f6f 	isb	sy
 8007db6:	f3bf 8f4f 	dsb	sy
 8007dba:	623b      	str	r3, [r7, #32]
}
 8007dbc:	bf00      	nop
 8007dbe:	e7fe      	b.n	8007dbe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d103      	bne.n	8007dce <xQueueReceive+0x3e>
 8007dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d101      	bne.n	8007dd2 <xQueueReceive+0x42>
 8007dce:	2301      	movs	r3, #1
 8007dd0:	e000      	b.n	8007dd4 <xQueueReceive+0x44>
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d10a      	bne.n	8007dee <xQueueReceive+0x5e>
	__asm volatile
 8007dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ddc:	f383 8811 	msr	BASEPRI, r3
 8007de0:	f3bf 8f6f 	isb	sy
 8007de4:	f3bf 8f4f 	dsb	sy
 8007de8:	61fb      	str	r3, [r7, #28]
}
 8007dea:	bf00      	nop
 8007dec:	e7fe      	b.n	8007dec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007dee:	f001 f8af 	bl	8008f50 <xTaskGetSchedulerState>
 8007df2:	4603      	mov	r3, r0
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d102      	bne.n	8007dfe <xQueueReceive+0x6e>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d101      	bne.n	8007e02 <xQueueReceive+0x72>
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e000      	b.n	8007e04 <xQueueReceive+0x74>
 8007e02:	2300      	movs	r3, #0
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d10a      	bne.n	8007e1e <xQueueReceive+0x8e>
	__asm volatile
 8007e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e0c:	f383 8811 	msr	BASEPRI, r3
 8007e10:	f3bf 8f6f 	isb	sy
 8007e14:	f3bf 8f4f 	dsb	sy
 8007e18:	61bb      	str	r3, [r7, #24]
}
 8007e1a:	bf00      	nop
 8007e1c:	e7fe      	b.n	8007e1c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e1e:	f001 fdf1 	bl	8009a04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e26:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d01f      	beq.n	8007e6e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007e2e:	68b9      	ldr	r1, [r7, #8]
 8007e30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e32:	f000 f8f7 	bl	8008024 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e38:	1e5a      	subs	r2, r3, #1
 8007e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e3c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e40:	691b      	ldr	r3, [r3, #16]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d00f      	beq.n	8007e66 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e48:	3310      	adds	r3, #16
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f000 febe 	bl	8008bcc <xTaskRemoveFromEventList>
 8007e50:	4603      	mov	r3, r0
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d007      	beq.n	8007e66 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007e56:	4b3d      	ldr	r3, [pc, #244]	; (8007f4c <xQueueReceive+0x1bc>)
 8007e58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e5c:	601a      	str	r2, [r3, #0]
 8007e5e:	f3bf 8f4f 	dsb	sy
 8007e62:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007e66:	f001 fdfd 	bl	8009a64 <vPortExitCritical>
				return pdPASS;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	e069      	b.n	8007f42 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d103      	bne.n	8007e7c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007e74:	f001 fdf6 	bl	8009a64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	e062      	b.n	8007f42 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d106      	bne.n	8007e90 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e82:	f107 0310 	add.w	r3, r7, #16
 8007e86:	4618      	mov	r0, r3
 8007e88:	f000 ff04 	bl	8008c94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e90:	f001 fde8 	bl	8009a64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e94:	f000 fc70 	bl	8008778 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e98:	f001 fdb4 	bl	8009a04 <vPortEnterCritical>
 8007e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ea2:	b25b      	sxtb	r3, r3
 8007ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ea8:	d103      	bne.n	8007eb2 <xQueueReceive+0x122>
 8007eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eac:	2200      	movs	r2, #0
 8007eae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007eb8:	b25b      	sxtb	r3, r3
 8007eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ebe:	d103      	bne.n	8007ec8 <xQueueReceive+0x138>
 8007ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ec8:	f001 fdcc 	bl	8009a64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ecc:	1d3a      	adds	r2, r7, #4
 8007ece:	f107 0310 	add.w	r3, r7, #16
 8007ed2:	4611      	mov	r1, r2
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f000 fef3 	bl	8008cc0 <xTaskCheckForTimeOut>
 8007eda:	4603      	mov	r3, r0
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d123      	bne.n	8007f28 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ee0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ee2:	f000 f917 	bl	8008114 <prvIsQueueEmpty>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d017      	beq.n	8007f1c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eee:	3324      	adds	r3, #36	; 0x24
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	4611      	mov	r1, r2
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f000 fe19 	bl	8008b2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007efa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007efc:	f000 f8b8 	bl	8008070 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007f00:	f000 fc48 	bl	8008794 <xTaskResumeAll>
 8007f04:	4603      	mov	r3, r0
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d189      	bne.n	8007e1e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007f0a:	4b10      	ldr	r3, [pc, #64]	; (8007f4c <xQueueReceive+0x1bc>)
 8007f0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f10:	601a      	str	r2, [r3, #0]
 8007f12:	f3bf 8f4f 	dsb	sy
 8007f16:	f3bf 8f6f 	isb	sy
 8007f1a:	e780      	b.n	8007e1e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007f1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f1e:	f000 f8a7 	bl	8008070 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f22:	f000 fc37 	bl	8008794 <xTaskResumeAll>
 8007f26:	e77a      	b.n	8007e1e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007f28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f2a:	f000 f8a1 	bl	8008070 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f2e:	f000 fc31 	bl	8008794 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f34:	f000 f8ee 	bl	8008114 <prvIsQueueEmpty>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	f43f af6f 	beq.w	8007e1e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007f40:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3730      	adds	r7, #48	; 0x30
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	e000ed04 	.word	0xe000ed04

08007f50 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b086      	sub	sp, #24
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f64:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d10d      	bne.n	8007f8a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d14d      	bne.n	8008012 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f001 f806 	bl	8008f8c <xTaskPriorityDisinherit>
 8007f80:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2200      	movs	r2, #0
 8007f86:	609a      	str	r2, [r3, #8]
 8007f88:	e043      	b.n	8008012 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d119      	bne.n	8007fc4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	6858      	ldr	r0, [r3, #4]
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f98:	461a      	mov	r2, r3
 8007f9a:	68b9      	ldr	r1, [r7, #8]
 8007f9c:	f005 fc52 	bl	800d844 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	685a      	ldr	r2, [r3, #4]
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa8:	441a      	add	r2, r3
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	685a      	ldr	r2, [r3, #4]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d32b      	bcc.n	8008012 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	605a      	str	r2, [r3, #4]
 8007fc2:	e026      	b.n	8008012 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	68d8      	ldr	r0, [r3, #12]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fcc:	461a      	mov	r2, r3
 8007fce:	68b9      	ldr	r1, [r7, #8]
 8007fd0:	f005 fc38 	bl	800d844 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	68da      	ldr	r2, [r3, #12]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fdc:	425b      	negs	r3, r3
 8007fde:	441a      	add	r2, r3
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	68da      	ldr	r2, [r3, #12]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d207      	bcs.n	8008000 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	689a      	ldr	r2, [r3, #8]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ff8:	425b      	negs	r3, r3
 8007ffa:	441a      	add	r2, r3
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2b02      	cmp	r3, #2
 8008004:	d105      	bne.n	8008012 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d002      	beq.n	8008012 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	3b01      	subs	r3, #1
 8008010:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	1c5a      	adds	r2, r3, #1
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800801a:	697b      	ldr	r3, [r7, #20]
}
 800801c:	4618      	mov	r0, r3
 800801e:	3718      	adds	r7, #24
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b082      	sub	sp, #8
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008032:	2b00      	cmp	r3, #0
 8008034:	d018      	beq.n	8008068 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	68da      	ldr	r2, [r3, #12]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800803e:	441a      	add	r2, r3
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	68da      	ldr	r2, [r3, #12]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	689b      	ldr	r3, [r3, #8]
 800804c:	429a      	cmp	r2, r3
 800804e:	d303      	bcc.n	8008058 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	68d9      	ldr	r1, [r3, #12]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008060:	461a      	mov	r2, r3
 8008062:	6838      	ldr	r0, [r7, #0]
 8008064:	f005 fbee 	bl	800d844 <memcpy>
	}
}
 8008068:	bf00      	nop
 800806a:	3708      	adds	r7, #8
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008078:	f001 fcc4 	bl	8009a04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008082:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008084:	e011      	b.n	80080aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800808a:	2b00      	cmp	r3, #0
 800808c:	d012      	beq.n	80080b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	3324      	adds	r3, #36	; 0x24
 8008092:	4618      	mov	r0, r3
 8008094:	f000 fd9a 	bl	8008bcc <xTaskRemoveFromEventList>
 8008098:	4603      	mov	r3, r0
 800809a:	2b00      	cmp	r3, #0
 800809c:	d001      	beq.n	80080a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800809e:	f000 fe71 	bl	8008d84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80080a2:	7bfb      	ldrb	r3, [r7, #15]
 80080a4:	3b01      	subs	r3, #1
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80080aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	dce9      	bgt.n	8008086 <prvUnlockQueue+0x16>
 80080b2:	e000      	b.n	80080b6 <prvUnlockQueue+0x46>
					break;
 80080b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	22ff      	movs	r2, #255	; 0xff
 80080ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80080be:	f001 fcd1 	bl	8009a64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80080c2:	f001 fc9f 	bl	8009a04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80080cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80080ce:	e011      	b.n	80080f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	691b      	ldr	r3, [r3, #16]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d012      	beq.n	80080fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	3310      	adds	r3, #16
 80080dc:	4618      	mov	r0, r3
 80080de:	f000 fd75 	bl	8008bcc <xTaskRemoveFromEventList>
 80080e2:	4603      	mov	r3, r0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d001      	beq.n	80080ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80080e8:	f000 fe4c 	bl	8008d84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80080ec:	7bbb      	ldrb	r3, [r7, #14]
 80080ee:	3b01      	subs	r3, #1
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80080f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	dce9      	bgt.n	80080d0 <prvUnlockQueue+0x60>
 80080fc:	e000      	b.n	8008100 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80080fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	22ff      	movs	r2, #255	; 0xff
 8008104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008108:	f001 fcac 	bl	8009a64 <vPortExitCritical>
}
 800810c:	bf00      	nop
 800810e:	3710      	adds	r7, #16
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b084      	sub	sp, #16
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800811c:	f001 fc72 	bl	8009a04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008124:	2b00      	cmp	r3, #0
 8008126:	d102      	bne.n	800812e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008128:	2301      	movs	r3, #1
 800812a:	60fb      	str	r3, [r7, #12]
 800812c:	e001      	b.n	8008132 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800812e:	2300      	movs	r3, #0
 8008130:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008132:	f001 fc97 	bl	8009a64 <vPortExitCritical>

	return xReturn;
 8008136:	68fb      	ldr	r3, [r7, #12]
}
 8008138:	4618      	mov	r0, r3
 800813a:	3710      	adds	r7, #16
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008148:	f001 fc5c 	bl	8009a04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008154:	429a      	cmp	r2, r3
 8008156:	d102      	bne.n	800815e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008158:	2301      	movs	r3, #1
 800815a:	60fb      	str	r3, [r7, #12]
 800815c:	e001      	b.n	8008162 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800815e:	2300      	movs	r3, #0
 8008160:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008162:	f001 fc7f 	bl	8009a64 <vPortExitCritical>

	return xReturn;
 8008166:	68fb      	ldr	r3, [r7, #12]
}
 8008168:	4618      	mov	r0, r3
 800816a:	3710      	adds	r7, #16
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008170:	b480      	push	{r7}
 8008172:	b085      	sub	sp, #20
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800817a:	2300      	movs	r3, #0
 800817c:	60fb      	str	r3, [r7, #12]
 800817e:	e014      	b.n	80081aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008180:	4a0f      	ldr	r2, [pc, #60]	; (80081c0 <vQueueAddToRegistry+0x50>)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d10b      	bne.n	80081a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800818c:	490c      	ldr	r1, [pc, #48]	; (80081c0 <vQueueAddToRegistry+0x50>)
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	683a      	ldr	r2, [r7, #0]
 8008192:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008196:	4a0a      	ldr	r2, [pc, #40]	; (80081c0 <vQueueAddToRegistry+0x50>)
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	00db      	lsls	r3, r3, #3
 800819c:	4413      	add	r3, r2
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80081a2:	e006      	b.n	80081b2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	3301      	adds	r3, #1
 80081a8:	60fb      	str	r3, [r7, #12]
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2b07      	cmp	r3, #7
 80081ae:	d9e7      	bls.n	8008180 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80081b0:	bf00      	nop
 80081b2:	bf00      	nop
 80081b4:	3714      	adds	r7, #20
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr
 80081be:	bf00      	nop
 80081c0:	20000b74 	.word	0x20000b74

080081c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b086      	sub	sp, #24
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	60b9      	str	r1, [r7, #8]
 80081ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80081d4:	f001 fc16 	bl	8009a04 <vPortEnterCritical>
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081de:	b25b      	sxtb	r3, r3
 80081e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081e4:	d103      	bne.n	80081ee <vQueueWaitForMessageRestricted+0x2a>
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	2200      	movs	r2, #0
 80081ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081f4:	b25b      	sxtb	r3, r3
 80081f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081fa:	d103      	bne.n	8008204 <vQueueWaitForMessageRestricted+0x40>
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	2200      	movs	r2, #0
 8008200:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008204:	f001 fc2e 	bl	8009a64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800820c:	2b00      	cmp	r3, #0
 800820e:	d106      	bne.n	800821e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	3324      	adds	r3, #36	; 0x24
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	68b9      	ldr	r1, [r7, #8]
 8008218:	4618      	mov	r0, r3
 800821a:	f000 fcab 	bl	8008b74 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800821e:	6978      	ldr	r0, [r7, #20]
 8008220:	f7ff ff26 	bl	8008070 <prvUnlockQueue>
	}
 8008224:	bf00      	nop
 8008226:	3718      	adds	r7, #24
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800822c:	b580      	push	{r7, lr}
 800822e:	b08e      	sub	sp, #56	; 0x38
 8008230:	af04      	add	r7, sp, #16
 8008232:	60f8      	str	r0, [r7, #12]
 8008234:	60b9      	str	r1, [r7, #8]
 8008236:	607a      	str	r2, [r7, #4]
 8008238:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800823a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800823c:	2b00      	cmp	r3, #0
 800823e:	d10a      	bne.n	8008256 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008244:	f383 8811 	msr	BASEPRI, r3
 8008248:	f3bf 8f6f 	isb	sy
 800824c:	f3bf 8f4f 	dsb	sy
 8008250:	623b      	str	r3, [r7, #32]
}
 8008252:	bf00      	nop
 8008254:	e7fe      	b.n	8008254 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008258:	2b00      	cmp	r3, #0
 800825a:	d10a      	bne.n	8008272 <xTaskCreateStatic+0x46>
	__asm volatile
 800825c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008260:	f383 8811 	msr	BASEPRI, r3
 8008264:	f3bf 8f6f 	isb	sy
 8008268:	f3bf 8f4f 	dsb	sy
 800826c:	61fb      	str	r3, [r7, #28]
}
 800826e:	bf00      	nop
 8008270:	e7fe      	b.n	8008270 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008272:	23a8      	movs	r3, #168	; 0xa8
 8008274:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	2ba8      	cmp	r3, #168	; 0xa8
 800827a:	d00a      	beq.n	8008292 <xTaskCreateStatic+0x66>
	__asm volatile
 800827c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008280:	f383 8811 	msr	BASEPRI, r3
 8008284:	f3bf 8f6f 	isb	sy
 8008288:	f3bf 8f4f 	dsb	sy
 800828c:	61bb      	str	r3, [r7, #24]
}
 800828e:	bf00      	nop
 8008290:	e7fe      	b.n	8008290 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008292:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008296:	2b00      	cmp	r3, #0
 8008298:	d01e      	beq.n	80082d8 <xTaskCreateStatic+0xac>
 800829a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800829c:	2b00      	cmp	r3, #0
 800829e:	d01b      	beq.n	80082d8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80082a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80082a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80082aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ac:	2202      	movs	r2, #2
 80082ae:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80082b2:	2300      	movs	r3, #0
 80082b4:	9303      	str	r3, [sp, #12]
 80082b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b8:	9302      	str	r3, [sp, #8]
 80082ba:	f107 0314 	add.w	r3, r7, #20
 80082be:	9301      	str	r3, [sp, #4]
 80082c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c2:	9300      	str	r3, [sp, #0]
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	687a      	ldr	r2, [r7, #4]
 80082c8:	68b9      	ldr	r1, [r7, #8]
 80082ca:	68f8      	ldr	r0, [r7, #12]
 80082cc:	f000 f850 	bl	8008370 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80082d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80082d2:	f000 f8f3 	bl	80084bc <prvAddNewTaskToReadyList>
 80082d6:	e001      	b.n	80082dc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80082d8:	2300      	movs	r3, #0
 80082da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80082dc:	697b      	ldr	r3, [r7, #20]
	}
 80082de:	4618      	mov	r0, r3
 80082e0:	3728      	adds	r7, #40	; 0x28
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80082e6:	b580      	push	{r7, lr}
 80082e8:	b08c      	sub	sp, #48	; 0x30
 80082ea:	af04      	add	r7, sp, #16
 80082ec:	60f8      	str	r0, [r7, #12]
 80082ee:	60b9      	str	r1, [r7, #8]
 80082f0:	603b      	str	r3, [r7, #0]
 80082f2:	4613      	mov	r3, r2
 80082f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80082f6:	88fb      	ldrh	r3, [r7, #6]
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	4618      	mov	r0, r3
 80082fc:	f001 fca4 	bl	8009c48 <pvPortMalloc>
 8008300:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d00e      	beq.n	8008326 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008308:	20a8      	movs	r0, #168	; 0xa8
 800830a:	f001 fc9d 	bl	8009c48 <pvPortMalloc>
 800830e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008310:	69fb      	ldr	r3, [r7, #28]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d003      	beq.n	800831e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008316:	69fb      	ldr	r3, [r7, #28]
 8008318:	697a      	ldr	r2, [r7, #20]
 800831a:	631a      	str	r2, [r3, #48]	; 0x30
 800831c:	e005      	b.n	800832a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800831e:	6978      	ldr	r0, [r7, #20]
 8008320:	f001 fd5e 	bl	8009de0 <vPortFree>
 8008324:	e001      	b.n	800832a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008326:	2300      	movs	r3, #0
 8008328:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800832a:	69fb      	ldr	r3, [r7, #28]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d017      	beq.n	8008360 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008330:	69fb      	ldr	r3, [r7, #28]
 8008332:	2200      	movs	r2, #0
 8008334:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008338:	88fa      	ldrh	r2, [r7, #6]
 800833a:	2300      	movs	r3, #0
 800833c:	9303      	str	r3, [sp, #12]
 800833e:	69fb      	ldr	r3, [r7, #28]
 8008340:	9302      	str	r3, [sp, #8]
 8008342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008344:	9301      	str	r3, [sp, #4]
 8008346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008348:	9300      	str	r3, [sp, #0]
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	68b9      	ldr	r1, [r7, #8]
 800834e:	68f8      	ldr	r0, [r7, #12]
 8008350:	f000 f80e 	bl	8008370 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008354:	69f8      	ldr	r0, [r7, #28]
 8008356:	f000 f8b1 	bl	80084bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800835a:	2301      	movs	r3, #1
 800835c:	61bb      	str	r3, [r7, #24]
 800835e:	e002      	b.n	8008366 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008360:	f04f 33ff 	mov.w	r3, #4294967295
 8008364:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008366:	69bb      	ldr	r3, [r7, #24]
	}
 8008368:	4618      	mov	r0, r3
 800836a:	3720      	adds	r7, #32
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b088      	sub	sp, #32
 8008374:	af00      	add	r7, sp, #0
 8008376:	60f8      	str	r0, [r7, #12]
 8008378:	60b9      	str	r1, [r7, #8]
 800837a:	607a      	str	r2, [r7, #4]
 800837c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800837e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008380:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	009b      	lsls	r3, r3, #2
 8008386:	461a      	mov	r2, r3
 8008388:	21a5      	movs	r1, #165	; 0xa5
 800838a:	f005 f9bf 	bl	800d70c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800838e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008390:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008398:	3b01      	subs	r3, #1
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	4413      	add	r3, r2
 800839e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80083a0:	69bb      	ldr	r3, [r7, #24]
 80083a2:	f023 0307 	bic.w	r3, r3, #7
 80083a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80083a8:	69bb      	ldr	r3, [r7, #24]
 80083aa:	f003 0307 	and.w	r3, r3, #7
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d00a      	beq.n	80083c8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80083b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b6:	f383 8811 	msr	BASEPRI, r3
 80083ba:	f3bf 8f6f 	isb	sy
 80083be:	f3bf 8f4f 	dsb	sy
 80083c2:	617b      	str	r3, [r7, #20]
}
 80083c4:	bf00      	nop
 80083c6:	e7fe      	b.n	80083c6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d01f      	beq.n	800840e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80083ce:	2300      	movs	r3, #0
 80083d0:	61fb      	str	r3, [r7, #28]
 80083d2:	e012      	b.n	80083fa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80083d4:	68ba      	ldr	r2, [r7, #8]
 80083d6:	69fb      	ldr	r3, [r7, #28]
 80083d8:	4413      	add	r3, r2
 80083da:	7819      	ldrb	r1, [r3, #0]
 80083dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083de:	69fb      	ldr	r3, [r7, #28]
 80083e0:	4413      	add	r3, r2
 80083e2:	3334      	adds	r3, #52	; 0x34
 80083e4:	460a      	mov	r2, r1
 80083e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80083e8:	68ba      	ldr	r2, [r7, #8]
 80083ea:	69fb      	ldr	r3, [r7, #28]
 80083ec:	4413      	add	r3, r2
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d006      	beq.n	8008402 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80083f4:	69fb      	ldr	r3, [r7, #28]
 80083f6:	3301      	adds	r3, #1
 80083f8:	61fb      	str	r3, [r7, #28]
 80083fa:	69fb      	ldr	r3, [r7, #28]
 80083fc:	2b0f      	cmp	r3, #15
 80083fe:	d9e9      	bls.n	80083d4 <prvInitialiseNewTask+0x64>
 8008400:	e000      	b.n	8008404 <prvInitialiseNewTask+0x94>
			{
				break;
 8008402:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008406:	2200      	movs	r2, #0
 8008408:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800840c:	e003      	b.n	8008416 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800840e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008410:	2200      	movs	r2, #0
 8008412:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008418:	2b37      	cmp	r3, #55	; 0x37
 800841a:	d901      	bls.n	8008420 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800841c:	2337      	movs	r3, #55	; 0x37
 800841e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008422:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008424:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008428:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800842a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800842c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800842e:	2200      	movs	r2, #0
 8008430:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008434:	3304      	adds	r3, #4
 8008436:	4618      	mov	r0, r3
 8008438:	f7ff f93e 	bl	80076b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800843c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800843e:	3318      	adds	r3, #24
 8008440:	4618      	mov	r0, r3
 8008442:	f7ff f939 	bl	80076b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800844a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800844c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800844e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008454:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008458:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800845a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800845c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800845e:	2200      	movs	r2, #0
 8008460:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008466:	2200      	movs	r2, #0
 8008468:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800846c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800846e:	3354      	adds	r3, #84	; 0x54
 8008470:	224c      	movs	r2, #76	; 0x4c
 8008472:	2100      	movs	r1, #0
 8008474:	4618      	mov	r0, r3
 8008476:	f005 f949 	bl	800d70c <memset>
 800847a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800847c:	4a0c      	ldr	r2, [pc, #48]	; (80084b0 <prvInitialiseNewTask+0x140>)
 800847e:	659a      	str	r2, [r3, #88]	; 0x58
 8008480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008482:	4a0c      	ldr	r2, [pc, #48]	; (80084b4 <prvInitialiseNewTask+0x144>)
 8008484:	65da      	str	r2, [r3, #92]	; 0x5c
 8008486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008488:	4a0b      	ldr	r2, [pc, #44]	; (80084b8 <prvInitialiseNewTask+0x148>)
 800848a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800848c:	683a      	ldr	r2, [r7, #0]
 800848e:	68f9      	ldr	r1, [r7, #12]
 8008490:	69b8      	ldr	r0, [r7, #24]
 8008492:	f001 f98b 	bl	80097ac <pxPortInitialiseStack>
 8008496:	4602      	mov	r2, r0
 8008498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800849a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800849c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d002      	beq.n	80084a8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80084a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084a6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80084a8:	bf00      	nop
 80084aa:	3720      	adds	r7, #32
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	200053f0 	.word	0x200053f0
 80084b4:	20005458 	.word	0x20005458
 80084b8:	200054c0 	.word	0x200054c0

080084bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b082      	sub	sp, #8
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80084c4:	f001 fa9e 	bl	8009a04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80084c8:	4b2d      	ldr	r3, [pc, #180]	; (8008580 <prvAddNewTaskToReadyList+0xc4>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	3301      	adds	r3, #1
 80084ce:	4a2c      	ldr	r2, [pc, #176]	; (8008580 <prvAddNewTaskToReadyList+0xc4>)
 80084d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80084d2:	4b2c      	ldr	r3, [pc, #176]	; (8008584 <prvAddNewTaskToReadyList+0xc8>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d109      	bne.n	80084ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80084da:	4a2a      	ldr	r2, [pc, #168]	; (8008584 <prvAddNewTaskToReadyList+0xc8>)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80084e0:	4b27      	ldr	r3, [pc, #156]	; (8008580 <prvAddNewTaskToReadyList+0xc4>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d110      	bne.n	800850a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80084e8:	f000 fc70 	bl	8008dcc <prvInitialiseTaskLists>
 80084ec:	e00d      	b.n	800850a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80084ee:	4b26      	ldr	r3, [pc, #152]	; (8008588 <prvAddNewTaskToReadyList+0xcc>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d109      	bne.n	800850a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80084f6:	4b23      	ldr	r3, [pc, #140]	; (8008584 <prvAddNewTaskToReadyList+0xc8>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008500:	429a      	cmp	r2, r3
 8008502:	d802      	bhi.n	800850a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008504:	4a1f      	ldr	r2, [pc, #124]	; (8008584 <prvAddNewTaskToReadyList+0xc8>)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800850a:	4b20      	ldr	r3, [pc, #128]	; (800858c <prvAddNewTaskToReadyList+0xd0>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	3301      	adds	r3, #1
 8008510:	4a1e      	ldr	r2, [pc, #120]	; (800858c <prvAddNewTaskToReadyList+0xd0>)
 8008512:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008514:	4b1d      	ldr	r3, [pc, #116]	; (800858c <prvAddNewTaskToReadyList+0xd0>)
 8008516:	681a      	ldr	r2, [r3, #0]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008520:	4b1b      	ldr	r3, [pc, #108]	; (8008590 <prvAddNewTaskToReadyList+0xd4>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	429a      	cmp	r2, r3
 8008526:	d903      	bls.n	8008530 <prvAddNewTaskToReadyList+0x74>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800852c:	4a18      	ldr	r2, [pc, #96]	; (8008590 <prvAddNewTaskToReadyList+0xd4>)
 800852e:	6013      	str	r3, [r2, #0]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008534:	4613      	mov	r3, r2
 8008536:	009b      	lsls	r3, r3, #2
 8008538:	4413      	add	r3, r2
 800853a:	009b      	lsls	r3, r3, #2
 800853c:	4a15      	ldr	r2, [pc, #84]	; (8008594 <prvAddNewTaskToReadyList+0xd8>)
 800853e:	441a      	add	r2, r3
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	3304      	adds	r3, #4
 8008544:	4619      	mov	r1, r3
 8008546:	4610      	mov	r0, r2
 8008548:	f7ff f8c3 	bl	80076d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800854c:	f001 fa8a 	bl	8009a64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008550:	4b0d      	ldr	r3, [pc, #52]	; (8008588 <prvAddNewTaskToReadyList+0xcc>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d00e      	beq.n	8008576 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008558:	4b0a      	ldr	r3, [pc, #40]	; (8008584 <prvAddNewTaskToReadyList+0xc8>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008562:	429a      	cmp	r2, r3
 8008564:	d207      	bcs.n	8008576 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008566:	4b0c      	ldr	r3, [pc, #48]	; (8008598 <prvAddNewTaskToReadyList+0xdc>)
 8008568:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800856c:	601a      	str	r2, [r3, #0]
 800856e:	f3bf 8f4f 	dsb	sy
 8008572:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008576:	bf00      	nop
 8008578:	3708      	adds	r7, #8
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop
 8008580:	20001088 	.word	0x20001088
 8008584:	20000bb4 	.word	0x20000bb4
 8008588:	20001094 	.word	0x20001094
 800858c:	200010a4 	.word	0x200010a4
 8008590:	20001090 	.word	0x20001090
 8008594:	20000bb8 	.word	0x20000bb8
 8008598:	e000ed04 	.word	0xe000ed04

0800859c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800859c:	b580      	push	{r7, lr}
 800859e:	b08a      	sub	sp, #40	; 0x28
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80085a6:	2300      	movs	r3, #0
 80085a8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d10a      	bne.n	80085c6 <vTaskDelayUntil+0x2a>
	__asm volatile
 80085b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b4:	f383 8811 	msr	BASEPRI, r3
 80085b8:	f3bf 8f6f 	isb	sy
 80085bc:	f3bf 8f4f 	dsb	sy
 80085c0:	617b      	str	r3, [r7, #20]
}
 80085c2:	bf00      	nop
 80085c4:	e7fe      	b.n	80085c4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d10a      	bne.n	80085e2 <vTaskDelayUntil+0x46>
	__asm volatile
 80085cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d0:	f383 8811 	msr	BASEPRI, r3
 80085d4:	f3bf 8f6f 	isb	sy
 80085d8:	f3bf 8f4f 	dsb	sy
 80085dc:	613b      	str	r3, [r7, #16]
}
 80085de:	bf00      	nop
 80085e0:	e7fe      	b.n	80085e0 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80085e2:	4b2a      	ldr	r3, [pc, #168]	; (800868c <vTaskDelayUntil+0xf0>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d00a      	beq.n	8008600 <vTaskDelayUntil+0x64>
	__asm volatile
 80085ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ee:	f383 8811 	msr	BASEPRI, r3
 80085f2:	f3bf 8f6f 	isb	sy
 80085f6:	f3bf 8f4f 	dsb	sy
 80085fa:	60fb      	str	r3, [r7, #12]
}
 80085fc:	bf00      	nop
 80085fe:	e7fe      	b.n	80085fe <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8008600:	f000 f8ba 	bl	8008778 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8008604:	4b22      	ldr	r3, [pc, #136]	; (8008690 <vTaskDelayUntil+0xf4>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	683a      	ldr	r2, [r7, #0]
 8008610:	4413      	add	r3, r2
 8008612:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	6a3a      	ldr	r2, [r7, #32]
 800861a:	429a      	cmp	r2, r3
 800861c:	d20b      	bcs.n	8008636 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	69fa      	ldr	r2, [r7, #28]
 8008624:	429a      	cmp	r2, r3
 8008626:	d211      	bcs.n	800864c <vTaskDelayUntil+0xb0>
 8008628:	69fa      	ldr	r2, [r7, #28]
 800862a:	6a3b      	ldr	r3, [r7, #32]
 800862c:	429a      	cmp	r2, r3
 800862e:	d90d      	bls.n	800864c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8008630:	2301      	movs	r3, #1
 8008632:	627b      	str	r3, [r7, #36]	; 0x24
 8008634:	e00a      	b.n	800864c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	69fa      	ldr	r2, [r7, #28]
 800863c:	429a      	cmp	r2, r3
 800863e:	d303      	bcc.n	8008648 <vTaskDelayUntil+0xac>
 8008640:	69fa      	ldr	r2, [r7, #28]
 8008642:	6a3b      	ldr	r3, [r7, #32]
 8008644:	429a      	cmp	r2, r3
 8008646:	d901      	bls.n	800864c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8008648:	2301      	movs	r3, #1
 800864a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	69fa      	ldr	r2, [r7, #28]
 8008650:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8008652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008654:	2b00      	cmp	r3, #0
 8008656:	d006      	beq.n	8008666 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8008658:	69fa      	ldr	r2, [r7, #28]
 800865a:	6a3b      	ldr	r3, [r7, #32]
 800865c:	1ad3      	subs	r3, r2, r3
 800865e:	2100      	movs	r1, #0
 8008660:	4618      	mov	r0, r3
 8008662:	f000 fd01 	bl	8009068 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8008666:	f000 f895 	bl	8008794 <xTaskResumeAll>
 800866a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800866c:	69bb      	ldr	r3, [r7, #24]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d107      	bne.n	8008682 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8008672:	4b08      	ldr	r3, [pc, #32]	; (8008694 <vTaskDelayUntil+0xf8>)
 8008674:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008678:	601a      	str	r2, [r3, #0]
 800867a:	f3bf 8f4f 	dsb	sy
 800867e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008682:	bf00      	nop
 8008684:	3728      	adds	r7, #40	; 0x28
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}
 800868a:	bf00      	nop
 800868c:	200010b0 	.word	0x200010b0
 8008690:	2000108c 	.word	0x2000108c
 8008694:	e000ed04 	.word	0xe000ed04

08008698 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b08a      	sub	sp, #40	; 0x28
 800869c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800869e:	2300      	movs	r3, #0
 80086a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80086a2:	2300      	movs	r3, #0
 80086a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80086a6:	463a      	mov	r2, r7
 80086a8:	1d39      	adds	r1, r7, #4
 80086aa:	f107 0308 	add.w	r3, r7, #8
 80086ae:	4618      	mov	r0, r3
 80086b0:	f7fe ffae 	bl	8007610 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80086b4:	6839      	ldr	r1, [r7, #0]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	68ba      	ldr	r2, [r7, #8]
 80086ba:	9202      	str	r2, [sp, #8]
 80086bc:	9301      	str	r3, [sp, #4]
 80086be:	2300      	movs	r3, #0
 80086c0:	9300      	str	r3, [sp, #0]
 80086c2:	2300      	movs	r3, #0
 80086c4:	460a      	mov	r2, r1
 80086c6:	4924      	ldr	r1, [pc, #144]	; (8008758 <vTaskStartScheduler+0xc0>)
 80086c8:	4824      	ldr	r0, [pc, #144]	; (800875c <vTaskStartScheduler+0xc4>)
 80086ca:	f7ff fdaf 	bl	800822c <xTaskCreateStatic>
 80086ce:	4603      	mov	r3, r0
 80086d0:	4a23      	ldr	r2, [pc, #140]	; (8008760 <vTaskStartScheduler+0xc8>)
 80086d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80086d4:	4b22      	ldr	r3, [pc, #136]	; (8008760 <vTaskStartScheduler+0xc8>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d002      	beq.n	80086e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80086dc:	2301      	movs	r3, #1
 80086de:	617b      	str	r3, [r7, #20]
 80086e0:	e001      	b.n	80086e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80086e2:	2300      	movs	r3, #0
 80086e4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d102      	bne.n	80086f2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80086ec:	f000 fd10 	bl	8009110 <xTimerCreateTimerTask>
 80086f0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d11b      	bne.n	8008730 <vTaskStartScheduler+0x98>
	__asm volatile
 80086f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086fc:	f383 8811 	msr	BASEPRI, r3
 8008700:	f3bf 8f6f 	isb	sy
 8008704:	f3bf 8f4f 	dsb	sy
 8008708:	613b      	str	r3, [r7, #16]
}
 800870a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800870c:	4b15      	ldr	r3, [pc, #84]	; (8008764 <vTaskStartScheduler+0xcc>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	3354      	adds	r3, #84	; 0x54
 8008712:	4a15      	ldr	r2, [pc, #84]	; (8008768 <vTaskStartScheduler+0xd0>)
 8008714:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008716:	4b15      	ldr	r3, [pc, #84]	; (800876c <vTaskStartScheduler+0xd4>)
 8008718:	f04f 32ff 	mov.w	r2, #4294967295
 800871c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800871e:	4b14      	ldr	r3, [pc, #80]	; (8008770 <vTaskStartScheduler+0xd8>)
 8008720:	2201      	movs	r2, #1
 8008722:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008724:	4b13      	ldr	r3, [pc, #76]	; (8008774 <vTaskStartScheduler+0xdc>)
 8008726:	2200      	movs	r2, #0
 8008728:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800872a:	f001 f8c9 	bl	80098c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800872e:	e00e      	b.n	800874e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008736:	d10a      	bne.n	800874e <vTaskStartScheduler+0xb6>
	__asm volatile
 8008738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800873c:	f383 8811 	msr	BASEPRI, r3
 8008740:	f3bf 8f6f 	isb	sy
 8008744:	f3bf 8f4f 	dsb	sy
 8008748:	60fb      	str	r3, [r7, #12]
}
 800874a:	bf00      	nop
 800874c:	e7fe      	b.n	800874c <vTaskStartScheduler+0xb4>
}
 800874e:	bf00      	nop
 8008750:	3718      	adds	r7, #24
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	0800f448 	.word	0x0800f448
 800875c:	08008d9d 	.word	0x08008d9d
 8008760:	200010ac 	.word	0x200010ac
 8008764:	20000bb4 	.word	0x20000bb4
 8008768:	20000098 	.word	0x20000098
 800876c:	200010a8 	.word	0x200010a8
 8008770:	20001094 	.word	0x20001094
 8008774:	2000108c 	.word	0x2000108c

08008778 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008778:	b480      	push	{r7}
 800877a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800877c:	4b04      	ldr	r3, [pc, #16]	; (8008790 <vTaskSuspendAll+0x18>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	3301      	adds	r3, #1
 8008782:	4a03      	ldr	r2, [pc, #12]	; (8008790 <vTaskSuspendAll+0x18>)
 8008784:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008786:	bf00      	nop
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr
 8008790:	200010b0 	.word	0x200010b0

08008794 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b084      	sub	sp, #16
 8008798:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800879a:	2300      	movs	r3, #0
 800879c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800879e:	2300      	movs	r3, #0
 80087a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80087a2:	4b42      	ldr	r3, [pc, #264]	; (80088ac <xTaskResumeAll+0x118>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d10a      	bne.n	80087c0 <xTaskResumeAll+0x2c>
	__asm volatile
 80087aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ae:	f383 8811 	msr	BASEPRI, r3
 80087b2:	f3bf 8f6f 	isb	sy
 80087b6:	f3bf 8f4f 	dsb	sy
 80087ba:	603b      	str	r3, [r7, #0]
}
 80087bc:	bf00      	nop
 80087be:	e7fe      	b.n	80087be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80087c0:	f001 f920 	bl	8009a04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80087c4:	4b39      	ldr	r3, [pc, #228]	; (80088ac <xTaskResumeAll+0x118>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	3b01      	subs	r3, #1
 80087ca:	4a38      	ldr	r2, [pc, #224]	; (80088ac <xTaskResumeAll+0x118>)
 80087cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087ce:	4b37      	ldr	r3, [pc, #220]	; (80088ac <xTaskResumeAll+0x118>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d162      	bne.n	800889c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80087d6:	4b36      	ldr	r3, [pc, #216]	; (80088b0 <xTaskResumeAll+0x11c>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d05e      	beq.n	800889c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80087de:	e02f      	b.n	8008840 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087e0:	4b34      	ldr	r3, [pc, #208]	; (80088b4 <xTaskResumeAll+0x120>)
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	68db      	ldr	r3, [r3, #12]
 80087e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	3318      	adds	r3, #24
 80087ec:	4618      	mov	r0, r3
 80087ee:	f7fe ffcd 	bl	800778c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	3304      	adds	r3, #4
 80087f6:	4618      	mov	r0, r3
 80087f8:	f7fe ffc8 	bl	800778c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008800:	4b2d      	ldr	r3, [pc, #180]	; (80088b8 <xTaskResumeAll+0x124>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	429a      	cmp	r2, r3
 8008806:	d903      	bls.n	8008810 <xTaskResumeAll+0x7c>
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800880c:	4a2a      	ldr	r2, [pc, #168]	; (80088b8 <xTaskResumeAll+0x124>)
 800880e:	6013      	str	r3, [r2, #0]
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008814:	4613      	mov	r3, r2
 8008816:	009b      	lsls	r3, r3, #2
 8008818:	4413      	add	r3, r2
 800881a:	009b      	lsls	r3, r3, #2
 800881c:	4a27      	ldr	r2, [pc, #156]	; (80088bc <xTaskResumeAll+0x128>)
 800881e:	441a      	add	r2, r3
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	3304      	adds	r3, #4
 8008824:	4619      	mov	r1, r3
 8008826:	4610      	mov	r0, r2
 8008828:	f7fe ff53 	bl	80076d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008830:	4b23      	ldr	r3, [pc, #140]	; (80088c0 <xTaskResumeAll+0x12c>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008836:	429a      	cmp	r2, r3
 8008838:	d302      	bcc.n	8008840 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800883a:	4b22      	ldr	r3, [pc, #136]	; (80088c4 <xTaskResumeAll+0x130>)
 800883c:	2201      	movs	r2, #1
 800883e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008840:	4b1c      	ldr	r3, [pc, #112]	; (80088b4 <xTaskResumeAll+0x120>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d1cb      	bne.n	80087e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d001      	beq.n	8008852 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800884e:	f000 fb5f 	bl	8008f10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008852:	4b1d      	ldr	r3, [pc, #116]	; (80088c8 <xTaskResumeAll+0x134>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d010      	beq.n	8008880 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800885e:	f000 f847 	bl	80088f0 <xTaskIncrementTick>
 8008862:	4603      	mov	r3, r0
 8008864:	2b00      	cmp	r3, #0
 8008866:	d002      	beq.n	800886e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008868:	4b16      	ldr	r3, [pc, #88]	; (80088c4 <xTaskResumeAll+0x130>)
 800886a:	2201      	movs	r2, #1
 800886c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	3b01      	subs	r3, #1
 8008872:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d1f1      	bne.n	800885e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800887a:	4b13      	ldr	r3, [pc, #76]	; (80088c8 <xTaskResumeAll+0x134>)
 800887c:	2200      	movs	r2, #0
 800887e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008880:	4b10      	ldr	r3, [pc, #64]	; (80088c4 <xTaskResumeAll+0x130>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d009      	beq.n	800889c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008888:	2301      	movs	r3, #1
 800888a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800888c:	4b0f      	ldr	r3, [pc, #60]	; (80088cc <xTaskResumeAll+0x138>)
 800888e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008892:	601a      	str	r2, [r3, #0]
 8008894:	f3bf 8f4f 	dsb	sy
 8008898:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800889c:	f001 f8e2 	bl	8009a64 <vPortExitCritical>

	return xAlreadyYielded;
 80088a0:	68bb      	ldr	r3, [r7, #8]
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3710      	adds	r7, #16
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	bf00      	nop
 80088ac:	200010b0 	.word	0x200010b0
 80088b0:	20001088 	.word	0x20001088
 80088b4:	20001048 	.word	0x20001048
 80088b8:	20001090 	.word	0x20001090
 80088bc:	20000bb8 	.word	0x20000bb8
 80088c0:	20000bb4 	.word	0x20000bb4
 80088c4:	2000109c 	.word	0x2000109c
 80088c8:	20001098 	.word	0x20001098
 80088cc:	e000ed04 	.word	0xe000ed04

080088d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80088d0:	b480      	push	{r7}
 80088d2:	b083      	sub	sp, #12
 80088d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80088d6:	4b05      	ldr	r3, [pc, #20]	; (80088ec <xTaskGetTickCount+0x1c>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80088dc:	687b      	ldr	r3, [r7, #4]
}
 80088de:	4618      	mov	r0, r3
 80088e0:	370c      	adds	r7, #12
 80088e2:	46bd      	mov	sp, r7
 80088e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e8:	4770      	bx	lr
 80088ea:	bf00      	nop
 80088ec:	2000108c 	.word	0x2000108c

080088f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b086      	sub	sp, #24
 80088f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80088f6:	2300      	movs	r3, #0
 80088f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088fa:	4b4f      	ldr	r3, [pc, #316]	; (8008a38 <xTaskIncrementTick+0x148>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	f040 808f 	bne.w	8008a22 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008904:	4b4d      	ldr	r3, [pc, #308]	; (8008a3c <xTaskIncrementTick+0x14c>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	3301      	adds	r3, #1
 800890a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800890c:	4a4b      	ldr	r2, [pc, #300]	; (8008a3c <xTaskIncrementTick+0x14c>)
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d120      	bne.n	800895a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008918:	4b49      	ldr	r3, [pc, #292]	; (8008a40 <xTaskIncrementTick+0x150>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d00a      	beq.n	8008938 <xTaskIncrementTick+0x48>
	__asm volatile
 8008922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008926:	f383 8811 	msr	BASEPRI, r3
 800892a:	f3bf 8f6f 	isb	sy
 800892e:	f3bf 8f4f 	dsb	sy
 8008932:	603b      	str	r3, [r7, #0]
}
 8008934:	bf00      	nop
 8008936:	e7fe      	b.n	8008936 <xTaskIncrementTick+0x46>
 8008938:	4b41      	ldr	r3, [pc, #260]	; (8008a40 <xTaskIncrementTick+0x150>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	60fb      	str	r3, [r7, #12]
 800893e:	4b41      	ldr	r3, [pc, #260]	; (8008a44 <xTaskIncrementTick+0x154>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4a3f      	ldr	r2, [pc, #252]	; (8008a40 <xTaskIncrementTick+0x150>)
 8008944:	6013      	str	r3, [r2, #0]
 8008946:	4a3f      	ldr	r2, [pc, #252]	; (8008a44 <xTaskIncrementTick+0x154>)
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	6013      	str	r3, [r2, #0]
 800894c:	4b3e      	ldr	r3, [pc, #248]	; (8008a48 <xTaskIncrementTick+0x158>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	3301      	adds	r3, #1
 8008952:	4a3d      	ldr	r2, [pc, #244]	; (8008a48 <xTaskIncrementTick+0x158>)
 8008954:	6013      	str	r3, [r2, #0]
 8008956:	f000 fadb 	bl	8008f10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800895a:	4b3c      	ldr	r3, [pc, #240]	; (8008a4c <xTaskIncrementTick+0x15c>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	693a      	ldr	r2, [r7, #16]
 8008960:	429a      	cmp	r2, r3
 8008962:	d349      	bcc.n	80089f8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008964:	4b36      	ldr	r3, [pc, #216]	; (8008a40 <xTaskIncrementTick+0x150>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d104      	bne.n	8008978 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800896e:	4b37      	ldr	r3, [pc, #220]	; (8008a4c <xTaskIncrementTick+0x15c>)
 8008970:	f04f 32ff 	mov.w	r2, #4294967295
 8008974:	601a      	str	r2, [r3, #0]
					break;
 8008976:	e03f      	b.n	80089f8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008978:	4b31      	ldr	r3, [pc, #196]	; (8008a40 <xTaskIncrementTick+0x150>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	68db      	ldr	r3, [r3, #12]
 800897e:	68db      	ldr	r3, [r3, #12]
 8008980:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	685b      	ldr	r3, [r3, #4]
 8008986:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008988:	693a      	ldr	r2, [r7, #16]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	429a      	cmp	r2, r3
 800898e:	d203      	bcs.n	8008998 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008990:	4a2e      	ldr	r2, [pc, #184]	; (8008a4c <xTaskIncrementTick+0x15c>)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008996:	e02f      	b.n	80089f8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	3304      	adds	r3, #4
 800899c:	4618      	mov	r0, r3
 800899e:	f7fe fef5 	bl	800778c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d004      	beq.n	80089b4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	3318      	adds	r3, #24
 80089ae:	4618      	mov	r0, r3
 80089b0:	f7fe feec 	bl	800778c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089b8:	4b25      	ldr	r3, [pc, #148]	; (8008a50 <xTaskIncrementTick+0x160>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	429a      	cmp	r2, r3
 80089be:	d903      	bls.n	80089c8 <xTaskIncrementTick+0xd8>
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c4:	4a22      	ldr	r2, [pc, #136]	; (8008a50 <xTaskIncrementTick+0x160>)
 80089c6:	6013      	str	r3, [r2, #0]
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089cc:	4613      	mov	r3, r2
 80089ce:	009b      	lsls	r3, r3, #2
 80089d0:	4413      	add	r3, r2
 80089d2:	009b      	lsls	r3, r3, #2
 80089d4:	4a1f      	ldr	r2, [pc, #124]	; (8008a54 <xTaskIncrementTick+0x164>)
 80089d6:	441a      	add	r2, r3
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	3304      	adds	r3, #4
 80089dc:	4619      	mov	r1, r3
 80089de:	4610      	mov	r0, r2
 80089e0:	f7fe fe77 	bl	80076d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089e8:	4b1b      	ldr	r3, [pc, #108]	; (8008a58 <xTaskIncrementTick+0x168>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ee:	429a      	cmp	r2, r3
 80089f0:	d3b8      	bcc.n	8008964 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80089f2:	2301      	movs	r3, #1
 80089f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089f6:	e7b5      	b.n	8008964 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80089f8:	4b17      	ldr	r3, [pc, #92]	; (8008a58 <xTaskIncrementTick+0x168>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089fe:	4915      	ldr	r1, [pc, #84]	; (8008a54 <xTaskIncrementTick+0x164>)
 8008a00:	4613      	mov	r3, r2
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	4413      	add	r3, r2
 8008a06:	009b      	lsls	r3, r3, #2
 8008a08:	440b      	add	r3, r1
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d901      	bls.n	8008a14 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008a10:	2301      	movs	r3, #1
 8008a12:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008a14:	4b11      	ldr	r3, [pc, #68]	; (8008a5c <xTaskIncrementTick+0x16c>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d007      	beq.n	8008a2c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	617b      	str	r3, [r7, #20]
 8008a20:	e004      	b.n	8008a2c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008a22:	4b0f      	ldr	r3, [pc, #60]	; (8008a60 <xTaskIncrementTick+0x170>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	3301      	adds	r3, #1
 8008a28:	4a0d      	ldr	r2, [pc, #52]	; (8008a60 <xTaskIncrementTick+0x170>)
 8008a2a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008a2c:	697b      	ldr	r3, [r7, #20]
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3718      	adds	r7, #24
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	bf00      	nop
 8008a38:	200010b0 	.word	0x200010b0
 8008a3c:	2000108c 	.word	0x2000108c
 8008a40:	20001040 	.word	0x20001040
 8008a44:	20001044 	.word	0x20001044
 8008a48:	200010a0 	.word	0x200010a0
 8008a4c:	200010a8 	.word	0x200010a8
 8008a50:	20001090 	.word	0x20001090
 8008a54:	20000bb8 	.word	0x20000bb8
 8008a58:	20000bb4 	.word	0x20000bb4
 8008a5c:	2000109c 	.word	0x2000109c
 8008a60:	20001098 	.word	0x20001098

08008a64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008a64:	b480      	push	{r7}
 8008a66:	b085      	sub	sp, #20
 8008a68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008a6a:	4b2a      	ldr	r3, [pc, #168]	; (8008b14 <vTaskSwitchContext+0xb0>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d003      	beq.n	8008a7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008a72:	4b29      	ldr	r3, [pc, #164]	; (8008b18 <vTaskSwitchContext+0xb4>)
 8008a74:	2201      	movs	r2, #1
 8008a76:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008a78:	e046      	b.n	8008b08 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008a7a:	4b27      	ldr	r3, [pc, #156]	; (8008b18 <vTaskSwitchContext+0xb4>)
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a80:	4b26      	ldr	r3, [pc, #152]	; (8008b1c <vTaskSwitchContext+0xb8>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	60fb      	str	r3, [r7, #12]
 8008a86:	e010      	b.n	8008aaa <vTaskSwitchContext+0x46>
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d10a      	bne.n	8008aa4 <vTaskSwitchContext+0x40>
	__asm volatile
 8008a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a92:	f383 8811 	msr	BASEPRI, r3
 8008a96:	f3bf 8f6f 	isb	sy
 8008a9a:	f3bf 8f4f 	dsb	sy
 8008a9e:	607b      	str	r3, [r7, #4]
}
 8008aa0:	bf00      	nop
 8008aa2:	e7fe      	b.n	8008aa2 <vTaskSwitchContext+0x3e>
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	3b01      	subs	r3, #1
 8008aa8:	60fb      	str	r3, [r7, #12]
 8008aaa:	491d      	ldr	r1, [pc, #116]	; (8008b20 <vTaskSwitchContext+0xbc>)
 8008aac:	68fa      	ldr	r2, [r7, #12]
 8008aae:	4613      	mov	r3, r2
 8008ab0:	009b      	lsls	r3, r3, #2
 8008ab2:	4413      	add	r3, r2
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	440b      	add	r3, r1
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d0e4      	beq.n	8008a88 <vTaskSwitchContext+0x24>
 8008abe:	68fa      	ldr	r2, [r7, #12]
 8008ac0:	4613      	mov	r3, r2
 8008ac2:	009b      	lsls	r3, r3, #2
 8008ac4:	4413      	add	r3, r2
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	4a15      	ldr	r2, [pc, #84]	; (8008b20 <vTaskSwitchContext+0xbc>)
 8008aca:	4413      	add	r3, r2
 8008acc:	60bb      	str	r3, [r7, #8]
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	685a      	ldr	r2, [r3, #4]
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	605a      	str	r2, [r3, #4]
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	685a      	ldr	r2, [r3, #4]
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	3308      	adds	r3, #8
 8008ae0:	429a      	cmp	r2, r3
 8008ae2:	d104      	bne.n	8008aee <vTaskSwitchContext+0x8a>
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	685a      	ldr	r2, [r3, #4]
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	605a      	str	r2, [r3, #4]
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	68db      	ldr	r3, [r3, #12]
 8008af4:	4a0b      	ldr	r2, [pc, #44]	; (8008b24 <vTaskSwitchContext+0xc0>)
 8008af6:	6013      	str	r3, [r2, #0]
 8008af8:	4a08      	ldr	r2, [pc, #32]	; (8008b1c <vTaskSwitchContext+0xb8>)
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008afe:	4b09      	ldr	r3, [pc, #36]	; (8008b24 <vTaskSwitchContext+0xc0>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	3354      	adds	r3, #84	; 0x54
 8008b04:	4a08      	ldr	r2, [pc, #32]	; (8008b28 <vTaskSwitchContext+0xc4>)
 8008b06:	6013      	str	r3, [r2, #0]
}
 8008b08:	bf00      	nop
 8008b0a:	3714      	adds	r7, #20
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr
 8008b14:	200010b0 	.word	0x200010b0
 8008b18:	2000109c 	.word	0x2000109c
 8008b1c:	20001090 	.word	0x20001090
 8008b20:	20000bb8 	.word	0x20000bb8
 8008b24:	20000bb4 	.word	0x20000bb4
 8008b28:	20000098 	.word	0x20000098

08008b2c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d10a      	bne.n	8008b52 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b40:	f383 8811 	msr	BASEPRI, r3
 8008b44:	f3bf 8f6f 	isb	sy
 8008b48:	f3bf 8f4f 	dsb	sy
 8008b4c:	60fb      	str	r3, [r7, #12]
}
 8008b4e:	bf00      	nop
 8008b50:	e7fe      	b.n	8008b50 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b52:	4b07      	ldr	r3, [pc, #28]	; (8008b70 <vTaskPlaceOnEventList+0x44>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	3318      	adds	r3, #24
 8008b58:	4619      	mov	r1, r3
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f7fe fddd 	bl	800771a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008b60:	2101      	movs	r1, #1
 8008b62:	6838      	ldr	r0, [r7, #0]
 8008b64:	f000 fa80 	bl	8009068 <prvAddCurrentTaskToDelayedList>
}
 8008b68:	bf00      	nop
 8008b6a:	3710      	adds	r7, #16
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}
 8008b70:	20000bb4 	.word	0x20000bb4

08008b74 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b086      	sub	sp, #24
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	60b9      	str	r1, [r7, #8]
 8008b7e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d10a      	bne.n	8008b9c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b8a:	f383 8811 	msr	BASEPRI, r3
 8008b8e:	f3bf 8f6f 	isb	sy
 8008b92:	f3bf 8f4f 	dsb	sy
 8008b96:	617b      	str	r3, [r7, #20]
}
 8008b98:	bf00      	nop
 8008b9a:	e7fe      	b.n	8008b9a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b9c:	4b0a      	ldr	r3, [pc, #40]	; (8008bc8 <vTaskPlaceOnEventListRestricted+0x54>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	3318      	adds	r3, #24
 8008ba2:	4619      	mov	r1, r3
 8008ba4:	68f8      	ldr	r0, [r7, #12]
 8008ba6:	f7fe fd94 	bl	80076d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d002      	beq.n	8008bb6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8008bb4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008bb6:	6879      	ldr	r1, [r7, #4]
 8008bb8:	68b8      	ldr	r0, [r7, #8]
 8008bba:	f000 fa55 	bl	8009068 <prvAddCurrentTaskToDelayedList>
	}
 8008bbe:	bf00      	nop
 8008bc0:	3718      	adds	r7, #24
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
 8008bc6:	bf00      	nop
 8008bc8:	20000bb4 	.word	0x20000bb4

08008bcc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b086      	sub	sp, #24
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	68db      	ldr	r3, [r3, #12]
 8008bd8:	68db      	ldr	r3, [r3, #12]
 8008bda:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d10a      	bne.n	8008bf8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be6:	f383 8811 	msr	BASEPRI, r3
 8008bea:	f3bf 8f6f 	isb	sy
 8008bee:	f3bf 8f4f 	dsb	sy
 8008bf2:	60fb      	str	r3, [r7, #12]
}
 8008bf4:	bf00      	nop
 8008bf6:	e7fe      	b.n	8008bf6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	3318      	adds	r3, #24
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f7fe fdc5 	bl	800778c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c02:	4b1e      	ldr	r3, [pc, #120]	; (8008c7c <xTaskRemoveFromEventList+0xb0>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d11d      	bne.n	8008c46 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	3304      	adds	r3, #4
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f7fe fdbc 	bl	800778c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c18:	4b19      	ldr	r3, [pc, #100]	; (8008c80 <xTaskRemoveFromEventList+0xb4>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	d903      	bls.n	8008c28 <xTaskRemoveFromEventList+0x5c>
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c24:	4a16      	ldr	r2, [pc, #88]	; (8008c80 <xTaskRemoveFromEventList+0xb4>)
 8008c26:	6013      	str	r3, [r2, #0]
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c2c:	4613      	mov	r3, r2
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	4413      	add	r3, r2
 8008c32:	009b      	lsls	r3, r3, #2
 8008c34:	4a13      	ldr	r2, [pc, #76]	; (8008c84 <xTaskRemoveFromEventList+0xb8>)
 8008c36:	441a      	add	r2, r3
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	3304      	adds	r3, #4
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	4610      	mov	r0, r2
 8008c40:	f7fe fd47 	bl	80076d2 <vListInsertEnd>
 8008c44:	e005      	b.n	8008c52 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	3318      	adds	r3, #24
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	480e      	ldr	r0, [pc, #56]	; (8008c88 <xTaskRemoveFromEventList+0xbc>)
 8008c4e:	f7fe fd40 	bl	80076d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c56:	4b0d      	ldr	r3, [pc, #52]	; (8008c8c <xTaskRemoveFromEventList+0xc0>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d905      	bls.n	8008c6c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008c60:	2301      	movs	r3, #1
 8008c62:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008c64:	4b0a      	ldr	r3, [pc, #40]	; (8008c90 <xTaskRemoveFromEventList+0xc4>)
 8008c66:	2201      	movs	r2, #1
 8008c68:	601a      	str	r2, [r3, #0]
 8008c6a:	e001      	b.n	8008c70 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008c70:	697b      	ldr	r3, [r7, #20]
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3718      	adds	r7, #24
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	200010b0 	.word	0x200010b0
 8008c80:	20001090 	.word	0x20001090
 8008c84:	20000bb8 	.word	0x20000bb8
 8008c88:	20001048 	.word	0x20001048
 8008c8c:	20000bb4 	.word	0x20000bb4
 8008c90:	2000109c 	.word	0x2000109c

08008c94 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008c94:	b480      	push	{r7}
 8008c96:	b083      	sub	sp, #12
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008c9c:	4b06      	ldr	r3, [pc, #24]	; (8008cb8 <vTaskInternalSetTimeOutState+0x24>)
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008ca4:	4b05      	ldr	r3, [pc, #20]	; (8008cbc <vTaskInternalSetTimeOutState+0x28>)
 8008ca6:	681a      	ldr	r2, [r3, #0]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	605a      	str	r2, [r3, #4]
}
 8008cac:	bf00      	nop
 8008cae:	370c      	adds	r7, #12
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr
 8008cb8:	200010a0 	.word	0x200010a0
 8008cbc:	2000108c 	.word	0x2000108c

08008cc0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b088      	sub	sp, #32
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d10a      	bne.n	8008ce6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd4:	f383 8811 	msr	BASEPRI, r3
 8008cd8:	f3bf 8f6f 	isb	sy
 8008cdc:	f3bf 8f4f 	dsb	sy
 8008ce0:	613b      	str	r3, [r7, #16]
}
 8008ce2:	bf00      	nop
 8008ce4:	e7fe      	b.n	8008ce4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d10a      	bne.n	8008d02 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf0:	f383 8811 	msr	BASEPRI, r3
 8008cf4:	f3bf 8f6f 	isb	sy
 8008cf8:	f3bf 8f4f 	dsb	sy
 8008cfc:	60fb      	str	r3, [r7, #12]
}
 8008cfe:	bf00      	nop
 8008d00:	e7fe      	b.n	8008d00 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008d02:	f000 fe7f 	bl	8009a04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008d06:	4b1d      	ldr	r3, [pc, #116]	; (8008d7c <xTaskCheckForTimeOut+0xbc>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	69ba      	ldr	r2, [r7, #24]
 8008d12:	1ad3      	subs	r3, r2, r3
 8008d14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d1e:	d102      	bne.n	8008d26 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008d20:	2300      	movs	r3, #0
 8008d22:	61fb      	str	r3, [r7, #28]
 8008d24:	e023      	b.n	8008d6e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681a      	ldr	r2, [r3, #0]
 8008d2a:	4b15      	ldr	r3, [pc, #84]	; (8008d80 <xTaskCheckForTimeOut+0xc0>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d007      	beq.n	8008d42 <xTaskCheckForTimeOut+0x82>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	69ba      	ldr	r2, [r7, #24]
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d302      	bcc.n	8008d42 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	61fb      	str	r3, [r7, #28]
 8008d40:	e015      	b.n	8008d6e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	697a      	ldr	r2, [r7, #20]
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d20b      	bcs.n	8008d64 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	681a      	ldr	r2, [r3, #0]
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	1ad2      	subs	r2, r2, r3
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f7ff ff9b 	bl	8008c94 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	61fb      	str	r3, [r7, #28]
 8008d62:	e004      	b.n	8008d6e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	2200      	movs	r2, #0
 8008d68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008d6e:	f000 fe79 	bl	8009a64 <vPortExitCritical>

	return xReturn;
 8008d72:	69fb      	ldr	r3, [r7, #28]
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3720      	adds	r7, #32
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}
 8008d7c:	2000108c 	.word	0x2000108c
 8008d80:	200010a0 	.word	0x200010a0

08008d84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008d84:	b480      	push	{r7}
 8008d86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008d88:	4b03      	ldr	r3, [pc, #12]	; (8008d98 <vTaskMissedYield+0x14>)
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	601a      	str	r2, [r3, #0]
}
 8008d8e:	bf00      	nop
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr
 8008d98:	2000109c 	.word	0x2000109c

08008d9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b082      	sub	sp, #8
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008da4:	f000 f852 	bl	8008e4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008da8:	4b06      	ldr	r3, [pc, #24]	; (8008dc4 <prvIdleTask+0x28>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	d9f9      	bls.n	8008da4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008db0:	4b05      	ldr	r3, [pc, #20]	; (8008dc8 <prvIdleTask+0x2c>)
 8008db2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008db6:	601a      	str	r2, [r3, #0]
 8008db8:	f3bf 8f4f 	dsb	sy
 8008dbc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008dc0:	e7f0      	b.n	8008da4 <prvIdleTask+0x8>
 8008dc2:	bf00      	nop
 8008dc4:	20000bb8 	.word	0x20000bb8
 8008dc8:	e000ed04 	.word	0xe000ed04

08008dcc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b082      	sub	sp, #8
 8008dd0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	607b      	str	r3, [r7, #4]
 8008dd6:	e00c      	b.n	8008df2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008dd8:	687a      	ldr	r2, [r7, #4]
 8008dda:	4613      	mov	r3, r2
 8008ddc:	009b      	lsls	r3, r3, #2
 8008dde:	4413      	add	r3, r2
 8008de0:	009b      	lsls	r3, r3, #2
 8008de2:	4a12      	ldr	r2, [pc, #72]	; (8008e2c <prvInitialiseTaskLists+0x60>)
 8008de4:	4413      	add	r3, r2
 8008de6:	4618      	mov	r0, r3
 8008de8:	f7fe fc46 	bl	8007678 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	3301      	adds	r3, #1
 8008df0:	607b      	str	r3, [r7, #4]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2b37      	cmp	r3, #55	; 0x37
 8008df6:	d9ef      	bls.n	8008dd8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008df8:	480d      	ldr	r0, [pc, #52]	; (8008e30 <prvInitialiseTaskLists+0x64>)
 8008dfa:	f7fe fc3d 	bl	8007678 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008dfe:	480d      	ldr	r0, [pc, #52]	; (8008e34 <prvInitialiseTaskLists+0x68>)
 8008e00:	f7fe fc3a 	bl	8007678 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008e04:	480c      	ldr	r0, [pc, #48]	; (8008e38 <prvInitialiseTaskLists+0x6c>)
 8008e06:	f7fe fc37 	bl	8007678 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008e0a:	480c      	ldr	r0, [pc, #48]	; (8008e3c <prvInitialiseTaskLists+0x70>)
 8008e0c:	f7fe fc34 	bl	8007678 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008e10:	480b      	ldr	r0, [pc, #44]	; (8008e40 <prvInitialiseTaskLists+0x74>)
 8008e12:	f7fe fc31 	bl	8007678 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008e16:	4b0b      	ldr	r3, [pc, #44]	; (8008e44 <prvInitialiseTaskLists+0x78>)
 8008e18:	4a05      	ldr	r2, [pc, #20]	; (8008e30 <prvInitialiseTaskLists+0x64>)
 8008e1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008e1c:	4b0a      	ldr	r3, [pc, #40]	; (8008e48 <prvInitialiseTaskLists+0x7c>)
 8008e1e:	4a05      	ldr	r2, [pc, #20]	; (8008e34 <prvInitialiseTaskLists+0x68>)
 8008e20:	601a      	str	r2, [r3, #0]
}
 8008e22:	bf00      	nop
 8008e24:	3708      	adds	r7, #8
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}
 8008e2a:	bf00      	nop
 8008e2c:	20000bb8 	.word	0x20000bb8
 8008e30:	20001018 	.word	0x20001018
 8008e34:	2000102c 	.word	0x2000102c
 8008e38:	20001048 	.word	0x20001048
 8008e3c:	2000105c 	.word	0x2000105c
 8008e40:	20001074 	.word	0x20001074
 8008e44:	20001040 	.word	0x20001040
 8008e48:	20001044 	.word	0x20001044

08008e4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b082      	sub	sp, #8
 8008e50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e52:	e019      	b.n	8008e88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008e54:	f000 fdd6 	bl	8009a04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e58:	4b10      	ldr	r3, [pc, #64]	; (8008e9c <prvCheckTasksWaitingTermination+0x50>)
 8008e5a:	68db      	ldr	r3, [r3, #12]
 8008e5c:	68db      	ldr	r3, [r3, #12]
 8008e5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	3304      	adds	r3, #4
 8008e64:	4618      	mov	r0, r3
 8008e66:	f7fe fc91 	bl	800778c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008e6a:	4b0d      	ldr	r3, [pc, #52]	; (8008ea0 <prvCheckTasksWaitingTermination+0x54>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	3b01      	subs	r3, #1
 8008e70:	4a0b      	ldr	r2, [pc, #44]	; (8008ea0 <prvCheckTasksWaitingTermination+0x54>)
 8008e72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008e74:	4b0b      	ldr	r3, [pc, #44]	; (8008ea4 <prvCheckTasksWaitingTermination+0x58>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	3b01      	subs	r3, #1
 8008e7a:	4a0a      	ldr	r2, [pc, #40]	; (8008ea4 <prvCheckTasksWaitingTermination+0x58>)
 8008e7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008e7e:	f000 fdf1 	bl	8009a64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 f810 	bl	8008ea8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e88:	4b06      	ldr	r3, [pc, #24]	; (8008ea4 <prvCheckTasksWaitingTermination+0x58>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d1e1      	bne.n	8008e54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008e90:	bf00      	nop
 8008e92:	bf00      	nop
 8008e94:	3708      	adds	r7, #8
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}
 8008e9a:	bf00      	nop
 8008e9c:	2000105c 	.word	0x2000105c
 8008ea0:	20001088 	.word	0x20001088
 8008ea4:	20001070 	.word	0x20001070

08008ea8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b084      	sub	sp, #16
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	3354      	adds	r3, #84	; 0x54
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f004 fc43 	bl	800d740 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d108      	bne.n	8008ed6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f000 ff89 	bl	8009de0 <vPortFree>
				vPortFree( pxTCB );
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f000 ff86 	bl	8009de0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008ed4:	e018      	b.n	8008f08 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d103      	bne.n	8008ee8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f000 ff7d 	bl	8009de0 <vPortFree>
	}
 8008ee6:	e00f      	b.n	8008f08 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008eee:	2b02      	cmp	r3, #2
 8008ef0:	d00a      	beq.n	8008f08 <prvDeleteTCB+0x60>
	__asm volatile
 8008ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef6:	f383 8811 	msr	BASEPRI, r3
 8008efa:	f3bf 8f6f 	isb	sy
 8008efe:	f3bf 8f4f 	dsb	sy
 8008f02:	60fb      	str	r3, [r7, #12]
}
 8008f04:	bf00      	nop
 8008f06:	e7fe      	b.n	8008f06 <prvDeleteTCB+0x5e>
	}
 8008f08:	bf00      	nop
 8008f0a:	3710      	adds	r7, #16
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f16:	4b0c      	ldr	r3, [pc, #48]	; (8008f48 <prvResetNextTaskUnblockTime+0x38>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d104      	bne.n	8008f2a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008f20:	4b0a      	ldr	r3, [pc, #40]	; (8008f4c <prvResetNextTaskUnblockTime+0x3c>)
 8008f22:	f04f 32ff 	mov.w	r2, #4294967295
 8008f26:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008f28:	e008      	b.n	8008f3c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f2a:	4b07      	ldr	r3, [pc, #28]	; (8008f48 <prvResetNextTaskUnblockTime+0x38>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	68db      	ldr	r3, [r3, #12]
 8008f30:	68db      	ldr	r3, [r3, #12]
 8008f32:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	4a04      	ldr	r2, [pc, #16]	; (8008f4c <prvResetNextTaskUnblockTime+0x3c>)
 8008f3a:	6013      	str	r3, [r2, #0]
}
 8008f3c:	bf00      	nop
 8008f3e:	370c      	adds	r7, #12
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr
 8008f48:	20001040 	.word	0x20001040
 8008f4c:	200010a8 	.word	0x200010a8

08008f50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008f50:	b480      	push	{r7}
 8008f52:	b083      	sub	sp, #12
 8008f54:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008f56:	4b0b      	ldr	r3, [pc, #44]	; (8008f84 <xTaskGetSchedulerState+0x34>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d102      	bne.n	8008f64 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	607b      	str	r3, [r7, #4]
 8008f62:	e008      	b.n	8008f76 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f64:	4b08      	ldr	r3, [pc, #32]	; (8008f88 <xTaskGetSchedulerState+0x38>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d102      	bne.n	8008f72 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008f6c:	2302      	movs	r3, #2
 8008f6e:	607b      	str	r3, [r7, #4]
 8008f70:	e001      	b.n	8008f76 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008f72:	2300      	movs	r3, #0
 8008f74:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008f76:	687b      	ldr	r3, [r7, #4]
	}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	370c      	adds	r7, #12
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr
 8008f84:	20001094 	.word	0x20001094
 8008f88:	200010b0 	.word	0x200010b0

08008f8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b086      	sub	sp, #24
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d056      	beq.n	8009050 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008fa2:	4b2e      	ldr	r3, [pc, #184]	; (800905c <xTaskPriorityDisinherit+0xd0>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	693a      	ldr	r2, [r7, #16]
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	d00a      	beq.n	8008fc2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb0:	f383 8811 	msr	BASEPRI, r3
 8008fb4:	f3bf 8f6f 	isb	sy
 8008fb8:	f3bf 8f4f 	dsb	sy
 8008fbc:	60fb      	str	r3, [r7, #12]
}
 8008fbe:	bf00      	nop
 8008fc0:	e7fe      	b.n	8008fc0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d10a      	bne.n	8008fe0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fce:	f383 8811 	msr	BASEPRI, r3
 8008fd2:	f3bf 8f6f 	isb	sy
 8008fd6:	f3bf 8f4f 	dsb	sy
 8008fda:	60bb      	str	r3, [r7, #8]
}
 8008fdc:	bf00      	nop
 8008fde:	e7fe      	b.n	8008fde <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fe4:	1e5a      	subs	r2, r3, #1
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ff2:	429a      	cmp	r2, r3
 8008ff4:	d02c      	beq.n	8009050 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d128      	bne.n	8009050 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	3304      	adds	r3, #4
 8009002:	4618      	mov	r0, r3
 8009004:	f7fe fbc2 	bl	800778c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009014:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009018:	693b      	ldr	r3, [r7, #16]
 800901a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009020:	4b0f      	ldr	r3, [pc, #60]	; (8009060 <xTaskPriorityDisinherit+0xd4>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	429a      	cmp	r2, r3
 8009026:	d903      	bls.n	8009030 <xTaskPriorityDisinherit+0xa4>
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800902c:	4a0c      	ldr	r2, [pc, #48]	; (8009060 <xTaskPriorityDisinherit+0xd4>)
 800902e:	6013      	str	r3, [r2, #0]
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009034:	4613      	mov	r3, r2
 8009036:	009b      	lsls	r3, r3, #2
 8009038:	4413      	add	r3, r2
 800903a:	009b      	lsls	r3, r3, #2
 800903c:	4a09      	ldr	r2, [pc, #36]	; (8009064 <xTaskPriorityDisinherit+0xd8>)
 800903e:	441a      	add	r2, r3
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	3304      	adds	r3, #4
 8009044:	4619      	mov	r1, r3
 8009046:	4610      	mov	r0, r2
 8009048:	f7fe fb43 	bl	80076d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800904c:	2301      	movs	r3, #1
 800904e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009050:	697b      	ldr	r3, [r7, #20]
	}
 8009052:	4618      	mov	r0, r3
 8009054:	3718      	adds	r7, #24
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
 800905a:	bf00      	nop
 800905c:	20000bb4 	.word	0x20000bb4
 8009060:	20001090 	.word	0x20001090
 8009064:	20000bb8 	.word	0x20000bb8

08009068 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b084      	sub	sp, #16
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009072:	4b21      	ldr	r3, [pc, #132]	; (80090f8 <prvAddCurrentTaskToDelayedList+0x90>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009078:	4b20      	ldr	r3, [pc, #128]	; (80090fc <prvAddCurrentTaskToDelayedList+0x94>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	3304      	adds	r3, #4
 800907e:	4618      	mov	r0, r3
 8009080:	f7fe fb84 	bl	800778c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800908a:	d10a      	bne.n	80090a2 <prvAddCurrentTaskToDelayedList+0x3a>
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d007      	beq.n	80090a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009092:	4b1a      	ldr	r3, [pc, #104]	; (80090fc <prvAddCurrentTaskToDelayedList+0x94>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	3304      	adds	r3, #4
 8009098:	4619      	mov	r1, r3
 800909a:	4819      	ldr	r0, [pc, #100]	; (8009100 <prvAddCurrentTaskToDelayedList+0x98>)
 800909c:	f7fe fb19 	bl	80076d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80090a0:	e026      	b.n	80090f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80090a2:	68fa      	ldr	r2, [r7, #12]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	4413      	add	r3, r2
 80090a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80090aa:	4b14      	ldr	r3, [pc, #80]	; (80090fc <prvAddCurrentTaskToDelayedList+0x94>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	68ba      	ldr	r2, [r7, #8]
 80090b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80090b2:	68ba      	ldr	r2, [r7, #8]
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d209      	bcs.n	80090ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80090ba:	4b12      	ldr	r3, [pc, #72]	; (8009104 <prvAddCurrentTaskToDelayedList+0x9c>)
 80090bc:	681a      	ldr	r2, [r3, #0]
 80090be:	4b0f      	ldr	r3, [pc, #60]	; (80090fc <prvAddCurrentTaskToDelayedList+0x94>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	3304      	adds	r3, #4
 80090c4:	4619      	mov	r1, r3
 80090c6:	4610      	mov	r0, r2
 80090c8:	f7fe fb27 	bl	800771a <vListInsert>
}
 80090cc:	e010      	b.n	80090f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80090ce:	4b0e      	ldr	r3, [pc, #56]	; (8009108 <prvAddCurrentTaskToDelayedList+0xa0>)
 80090d0:	681a      	ldr	r2, [r3, #0]
 80090d2:	4b0a      	ldr	r3, [pc, #40]	; (80090fc <prvAddCurrentTaskToDelayedList+0x94>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	3304      	adds	r3, #4
 80090d8:	4619      	mov	r1, r3
 80090da:	4610      	mov	r0, r2
 80090dc:	f7fe fb1d 	bl	800771a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80090e0:	4b0a      	ldr	r3, [pc, #40]	; (800910c <prvAddCurrentTaskToDelayedList+0xa4>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	68ba      	ldr	r2, [r7, #8]
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d202      	bcs.n	80090f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80090ea:	4a08      	ldr	r2, [pc, #32]	; (800910c <prvAddCurrentTaskToDelayedList+0xa4>)
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	6013      	str	r3, [r2, #0]
}
 80090f0:	bf00      	nop
 80090f2:	3710      	adds	r7, #16
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}
 80090f8:	2000108c 	.word	0x2000108c
 80090fc:	20000bb4 	.word	0x20000bb4
 8009100:	20001074 	.word	0x20001074
 8009104:	20001044 	.word	0x20001044
 8009108:	20001040 	.word	0x20001040
 800910c:	200010a8 	.word	0x200010a8

08009110 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b08a      	sub	sp, #40	; 0x28
 8009114:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009116:	2300      	movs	r3, #0
 8009118:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800911a:	f000 fb07 	bl	800972c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800911e:	4b1c      	ldr	r3, [pc, #112]	; (8009190 <xTimerCreateTimerTask+0x80>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d021      	beq.n	800916a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009126:	2300      	movs	r3, #0
 8009128:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800912a:	2300      	movs	r3, #0
 800912c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800912e:	1d3a      	adds	r2, r7, #4
 8009130:	f107 0108 	add.w	r1, r7, #8
 8009134:	f107 030c 	add.w	r3, r7, #12
 8009138:	4618      	mov	r0, r3
 800913a:	f7fe fa83 	bl	8007644 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800913e:	6879      	ldr	r1, [r7, #4]
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	68fa      	ldr	r2, [r7, #12]
 8009144:	9202      	str	r2, [sp, #8]
 8009146:	9301      	str	r3, [sp, #4]
 8009148:	2302      	movs	r3, #2
 800914a:	9300      	str	r3, [sp, #0]
 800914c:	2300      	movs	r3, #0
 800914e:	460a      	mov	r2, r1
 8009150:	4910      	ldr	r1, [pc, #64]	; (8009194 <xTimerCreateTimerTask+0x84>)
 8009152:	4811      	ldr	r0, [pc, #68]	; (8009198 <xTimerCreateTimerTask+0x88>)
 8009154:	f7ff f86a 	bl	800822c <xTaskCreateStatic>
 8009158:	4603      	mov	r3, r0
 800915a:	4a10      	ldr	r2, [pc, #64]	; (800919c <xTimerCreateTimerTask+0x8c>)
 800915c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800915e:	4b0f      	ldr	r3, [pc, #60]	; (800919c <xTimerCreateTimerTask+0x8c>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d001      	beq.n	800916a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009166:	2301      	movs	r3, #1
 8009168:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d10a      	bne.n	8009186 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009174:	f383 8811 	msr	BASEPRI, r3
 8009178:	f3bf 8f6f 	isb	sy
 800917c:	f3bf 8f4f 	dsb	sy
 8009180:	613b      	str	r3, [r7, #16]
}
 8009182:	bf00      	nop
 8009184:	e7fe      	b.n	8009184 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009186:	697b      	ldr	r3, [r7, #20]
}
 8009188:	4618      	mov	r0, r3
 800918a:	3718      	adds	r7, #24
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}
 8009190:	200010e4 	.word	0x200010e4
 8009194:	0800f450 	.word	0x0800f450
 8009198:	080092d5 	.word	0x080092d5
 800919c:	200010e8 	.word	0x200010e8

080091a0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b08a      	sub	sp, #40	; 0x28
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	60f8      	str	r0, [r7, #12]
 80091a8:	60b9      	str	r1, [r7, #8]
 80091aa:	607a      	str	r2, [r7, #4]
 80091ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80091ae:	2300      	movs	r3, #0
 80091b0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d10a      	bne.n	80091ce <xTimerGenericCommand+0x2e>
	__asm volatile
 80091b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091bc:	f383 8811 	msr	BASEPRI, r3
 80091c0:	f3bf 8f6f 	isb	sy
 80091c4:	f3bf 8f4f 	dsb	sy
 80091c8:	623b      	str	r3, [r7, #32]
}
 80091ca:	bf00      	nop
 80091cc:	e7fe      	b.n	80091cc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80091ce:	4b1a      	ldr	r3, [pc, #104]	; (8009238 <xTimerGenericCommand+0x98>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d02a      	beq.n	800922c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	2b05      	cmp	r3, #5
 80091e6:	dc18      	bgt.n	800921a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80091e8:	f7ff feb2 	bl	8008f50 <xTaskGetSchedulerState>
 80091ec:	4603      	mov	r3, r0
 80091ee:	2b02      	cmp	r3, #2
 80091f0:	d109      	bne.n	8009206 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80091f2:	4b11      	ldr	r3, [pc, #68]	; (8009238 <xTimerGenericCommand+0x98>)
 80091f4:	6818      	ldr	r0, [r3, #0]
 80091f6:	f107 0110 	add.w	r1, r7, #16
 80091fa:	2300      	movs	r3, #0
 80091fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091fe:	f7fe fc2d 	bl	8007a5c <xQueueGenericSend>
 8009202:	6278      	str	r0, [r7, #36]	; 0x24
 8009204:	e012      	b.n	800922c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009206:	4b0c      	ldr	r3, [pc, #48]	; (8009238 <xTimerGenericCommand+0x98>)
 8009208:	6818      	ldr	r0, [r3, #0]
 800920a:	f107 0110 	add.w	r1, r7, #16
 800920e:	2300      	movs	r3, #0
 8009210:	2200      	movs	r2, #0
 8009212:	f7fe fc23 	bl	8007a5c <xQueueGenericSend>
 8009216:	6278      	str	r0, [r7, #36]	; 0x24
 8009218:	e008      	b.n	800922c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800921a:	4b07      	ldr	r3, [pc, #28]	; (8009238 <xTimerGenericCommand+0x98>)
 800921c:	6818      	ldr	r0, [r3, #0]
 800921e:	f107 0110 	add.w	r1, r7, #16
 8009222:	2300      	movs	r3, #0
 8009224:	683a      	ldr	r2, [r7, #0]
 8009226:	f7fe fd17 	bl	8007c58 <xQueueGenericSendFromISR>
 800922a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800922c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800922e:	4618      	mov	r0, r3
 8009230:	3728      	adds	r7, #40	; 0x28
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	200010e4 	.word	0x200010e4

0800923c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b088      	sub	sp, #32
 8009240:	af02      	add	r7, sp, #8
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009246:	4b22      	ldr	r3, [pc, #136]	; (80092d0 <prvProcessExpiredTimer+0x94>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	68db      	ldr	r3, [r3, #12]
 800924c:	68db      	ldr	r3, [r3, #12]
 800924e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	3304      	adds	r3, #4
 8009254:	4618      	mov	r0, r3
 8009256:	f7fe fa99 	bl	800778c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009260:	f003 0304 	and.w	r3, r3, #4
 8009264:	2b00      	cmp	r3, #0
 8009266:	d022      	beq.n	80092ae <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	699a      	ldr	r2, [r3, #24]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	18d1      	adds	r1, r2, r3
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	683a      	ldr	r2, [r7, #0]
 8009274:	6978      	ldr	r0, [r7, #20]
 8009276:	f000 f8d1 	bl	800941c <prvInsertTimerInActiveList>
 800927a:	4603      	mov	r3, r0
 800927c:	2b00      	cmp	r3, #0
 800927e:	d01f      	beq.n	80092c0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009280:	2300      	movs	r3, #0
 8009282:	9300      	str	r3, [sp, #0]
 8009284:	2300      	movs	r3, #0
 8009286:	687a      	ldr	r2, [r7, #4]
 8009288:	2100      	movs	r1, #0
 800928a:	6978      	ldr	r0, [r7, #20]
 800928c:	f7ff ff88 	bl	80091a0 <xTimerGenericCommand>
 8009290:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d113      	bne.n	80092c0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800929c:	f383 8811 	msr	BASEPRI, r3
 80092a0:	f3bf 8f6f 	isb	sy
 80092a4:	f3bf 8f4f 	dsb	sy
 80092a8:	60fb      	str	r3, [r7, #12]
}
 80092aa:	bf00      	nop
 80092ac:	e7fe      	b.n	80092ac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092b4:	f023 0301 	bic.w	r3, r3, #1
 80092b8:	b2da      	uxtb	r2, r3
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	6a1b      	ldr	r3, [r3, #32]
 80092c4:	6978      	ldr	r0, [r7, #20]
 80092c6:	4798      	blx	r3
}
 80092c8:	bf00      	nop
 80092ca:	3718      	adds	r7, #24
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}
 80092d0:	200010dc 	.word	0x200010dc

080092d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b084      	sub	sp, #16
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80092dc:	f107 0308 	add.w	r3, r7, #8
 80092e0:	4618      	mov	r0, r3
 80092e2:	f000 f857 	bl	8009394 <prvGetNextExpireTime>
 80092e6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	4619      	mov	r1, r3
 80092ec:	68f8      	ldr	r0, [r7, #12]
 80092ee:	f000 f803 	bl	80092f8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80092f2:	f000 f8d5 	bl	80094a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80092f6:	e7f1      	b.n	80092dc <prvTimerTask+0x8>

080092f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009302:	f7ff fa39 	bl	8008778 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009306:	f107 0308 	add.w	r3, r7, #8
 800930a:	4618      	mov	r0, r3
 800930c:	f000 f866 	bl	80093dc <prvSampleTimeNow>
 8009310:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d130      	bne.n	800937a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d10a      	bne.n	8009334 <prvProcessTimerOrBlockTask+0x3c>
 800931e:	687a      	ldr	r2, [r7, #4]
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	429a      	cmp	r2, r3
 8009324:	d806      	bhi.n	8009334 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009326:	f7ff fa35 	bl	8008794 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800932a:	68f9      	ldr	r1, [r7, #12]
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f7ff ff85 	bl	800923c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009332:	e024      	b.n	800937e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d008      	beq.n	800934c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800933a:	4b13      	ldr	r3, [pc, #76]	; (8009388 <prvProcessTimerOrBlockTask+0x90>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d101      	bne.n	8009348 <prvProcessTimerOrBlockTask+0x50>
 8009344:	2301      	movs	r3, #1
 8009346:	e000      	b.n	800934a <prvProcessTimerOrBlockTask+0x52>
 8009348:	2300      	movs	r3, #0
 800934a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800934c:	4b0f      	ldr	r3, [pc, #60]	; (800938c <prvProcessTimerOrBlockTask+0x94>)
 800934e:	6818      	ldr	r0, [r3, #0]
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	1ad3      	subs	r3, r2, r3
 8009356:	683a      	ldr	r2, [r7, #0]
 8009358:	4619      	mov	r1, r3
 800935a:	f7fe ff33 	bl	80081c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800935e:	f7ff fa19 	bl	8008794 <xTaskResumeAll>
 8009362:	4603      	mov	r3, r0
 8009364:	2b00      	cmp	r3, #0
 8009366:	d10a      	bne.n	800937e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009368:	4b09      	ldr	r3, [pc, #36]	; (8009390 <prvProcessTimerOrBlockTask+0x98>)
 800936a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800936e:	601a      	str	r2, [r3, #0]
 8009370:	f3bf 8f4f 	dsb	sy
 8009374:	f3bf 8f6f 	isb	sy
}
 8009378:	e001      	b.n	800937e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800937a:	f7ff fa0b 	bl	8008794 <xTaskResumeAll>
}
 800937e:	bf00      	nop
 8009380:	3710      	adds	r7, #16
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}
 8009386:	bf00      	nop
 8009388:	200010e0 	.word	0x200010e0
 800938c:	200010e4 	.word	0x200010e4
 8009390:	e000ed04 	.word	0xe000ed04

08009394 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009394:	b480      	push	{r7}
 8009396:	b085      	sub	sp, #20
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800939c:	4b0e      	ldr	r3, [pc, #56]	; (80093d8 <prvGetNextExpireTime+0x44>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d101      	bne.n	80093aa <prvGetNextExpireTime+0x16>
 80093a6:	2201      	movs	r2, #1
 80093a8:	e000      	b.n	80093ac <prvGetNextExpireTime+0x18>
 80093aa:	2200      	movs	r2, #0
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d105      	bne.n	80093c4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80093b8:	4b07      	ldr	r3, [pc, #28]	; (80093d8 <prvGetNextExpireTime+0x44>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	68db      	ldr	r3, [r3, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	60fb      	str	r3, [r7, #12]
 80093c2:	e001      	b.n	80093c8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80093c4:	2300      	movs	r3, #0
 80093c6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80093c8:	68fb      	ldr	r3, [r7, #12]
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3714      	adds	r7, #20
 80093ce:	46bd      	mov	sp, r7
 80093d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d4:	4770      	bx	lr
 80093d6:	bf00      	nop
 80093d8:	200010dc 	.word	0x200010dc

080093dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80093e4:	f7ff fa74 	bl	80088d0 <xTaskGetTickCount>
 80093e8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80093ea:	4b0b      	ldr	r3, [pc, #44]	; (8009418 <prvSampleTimeNow+0x3c>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	68fa      	ldr	r2, [r7, #12]
 80093f0:	429a      	cmp	r2, r3
 80093f2:	d205      	bcs.n	8009400 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80093f4:	f000 f936 	bl	8009664 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2201      	movs	r2, #1
 80093fc:	601a      	str	r2, [r3, #0]
 80093fe:	e002      	b.n	8009406 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2200      	movs	r2, #0
 8009404:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009406:	4a04      	ldr	r2, [pc, #16]	; (8009418 <prvSampleTimeNow+0x3c>)
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800940c:	68fb      	ldr	r3, [r7, #12]
}
 800940e:	4618      	mov	r0, r3
 8009410:	3710      	adds	r7, #16
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
 8009416:	bf00      	nop
 8009418:	200010ec 	.word	0x200010ec

0800941c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b086      	sub	sp, #24
 8009420:	af00      	add	r7, sp, #0
 8009422:	60f8      	str	r0, [r7, #12]
 8009424:	60b9      	str	r1, [r7, #8]
 8009426:	607a      	str	r2, [r7, #4]
 8009428:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800942a:	2300      	movs	r3, #0
 800942c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	68ba      	ldr	r2, [r7, #8]
 8009432:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	68fa      	ldr	r2, [r7, #12]
 8009438:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800943a:	68ba      	ldr	r2, [r7, #8]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	429a      	cmp	r2, r3
 8009440:	d812      	bhi.n	8009468 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	1ad2      	subs	r2, r2, r3
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	699b      	ldr	r3, [r3, #24]
 800944c:	429a      	cmp	r2, r3
 800944e:	d302      	bcc.n	8009456 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009450:	2301      	movs	r3, #1
 8009452:	617b      	str	r3, [r7, #20]
 8009454:	e01b      	b.n	800948e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009456:	4b10      	ldr	r3, [pc, #64]	; (8009498 <prvInsertTimerInActiveList+0x7c>)
 8009458:	681a      	ldr	r2, [r3, #0]
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	3304      	adds	r3, #4
 800945e:	4619      	mov	r1, r3
 8009460:	4610      	mov	r0, r2
 8009462:	f7fe f95a 	bl	800771a <vListInsert>
 8009466:	e012      	b.n	800948e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009468:	687a      	ldr	r2, [r7, #4]
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	429a      	cmp	r2, r3
 800946e:	d206      	bcs.n	800947e <prvInsertTimerInActiveList+0x62>
 8009470:	68ba      	ldr	r2, [r7, #8]
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	429a      	cmp	r2, r3
 8009476:	d302      	bcc.n	800947e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009478:	2301      	movs	r3, #1
 800947a:	617b      	str	r3, [r7, #20]
 800947c:	e007      	b.n	800948e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800947e:	4b07      	ldr	r3, [pc, #28]	; (800949c <prvInsertTimerInActiveList+0x80>)
 8009480:	681a      	ldr	r2, [r3, #0]
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	3304      	adds	r3, #4
 8009486:	4619      	mov	r1, r3
 8009488:	4610      	mov	r0, r2
 800948a:	f7fe f946 	bl	800771a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800948e:	697b      	ldr	r3, [r7, #20]
}
 8009490:	4618      	mov	r0, r3
 8009492:	3718      	adds	r7, #24
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}
 8009498:	200010e0 	.word	0x200010e0
 800949c:	200010dc 	.word	0x200010dc

080094a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b08e      	sub	sp, #56	; 0x38
 80094a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80094a6:	e0ca      	b.n	800963e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	da18      	bge.n	80094e0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80094ae:	1d3b      	adds	r3, r7, #4
 80094b0:	3304      	adds	r3, #4
 80094b2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80094b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d10a      	bne.n	80094d0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80094ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094be:	f383 8811 	msr	BASEPRI, r3
 80094c2:	f3bf 8f6f 	isb	sy
 80094c6:	f3bf 8f4f 	dsb	sy
 80094ca:	61fb      	str	r3, [r7, #28]
}
 80094cc:	bf00      	nop
 80094ce:	e7fe      	b.n	80094ce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80094d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094d6:	6850      	ldr	r0, [r2, #4]
 80094d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094da:	6892      	ldr	r2, [r2, #8]
 80094dc:	4611      	mov	r1, r2
 80094de:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	f2c0 80ab 	blt.w	800963e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80094ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ee:	695b      	ldr	r3, [r3, #20]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d004      	beq.n	80094fe <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80094f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094f6:	3304      	adds	r3, #4
 80094f8:	4618      	mov	r0, r3
 80094fa:	f7fe f947 	bl	800778c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80094fe:	463b      	mov	r3, r7
 8009500:	4618      	mov	r0, r3
 8009502:	f7ff ff6b 	bl	80093dc <prvSampleTimeNow>
 8009506:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2b09      	cmp	r3, #9
 800950c:	f200 8096 	bhi.w	800963c <prvProcessReceivedCommands+0x19c>
 8009510:	a201      	add	r2, pc, #4	; (adr r2, 8009518 <prvProcessReceivedCommands+0x78>)
 8009512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009516:	bf00      	nop
 8009518:	08009541 	.word	0x08009541
 800951c:	08009541 	.word	0x08009541
 8009520:	08009541 	.word	0x08009541
 8009524:	080095b5 	.word	0x080095b5
 8009528:	080095c9 	.word	0x080095c9
 800952c:	08009613 	.word	0x08009613
 8009530:	08009541 	.word	0x08009541
 8009534:	08009541 	.word	0x08009541
 8009538:	080095b5 	.word	0x080095b5
 800953c:	080095c9 	.word	0x080095c9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009542:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009546:	f043 0301 	orr.w	r3, r3, #1
 800954a:	b2da      	uxtb	r2, r3
 800954c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800954e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009552:	68ba      	ldr	r2, [r7, #8]
 8009554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009556:	699b      	ldr	r3, [r3, #24]
 8009558:	18d1      	adds	r1, r2, r3
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800955e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009560:	f7ff ff5c 	bl	800941c <prvInsertTimerInActiveList>
 8009564:	4603      	mov	r3, r0
 8009566:	2b00      	cmp	r3, #0
 8009568:	d069      	beq.n	800963e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800956a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800956c:	6a1b      	ldr	r3, [r3, #32]
 800956e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009570:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009574:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009578:	f003 0304 	and.w	r3, r3, #4
 800957c:	2b00      	cmp	r3, #0
 800957e:	d05e      	beq.n	800963e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009580:	68ba      	ldr	r2, [r7, #8]
 8009582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009584:	699b      	ldr	r3, [r3, #24]
 8009586:	441a      	add	r2, r3
 8009588:	2300      	movs	r3, #0
 800958a:	9300      	str	r3, [sp, #0]
 800958c:	2300      	movs	r3, #0
 800958e:	2100      	movs	r1, #0
 8009590:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009592:	f7ff fe05 	bl	80091a0 <xTimerGenericCommand>
 8009596:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009598:	6a3b      	ldr	r3, [r7, #32]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d14f      	bne.n	800963e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800959e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a2:	f383 8811 	msr	BASEPRI, r3
 80095a6:	f3bf 8f6f 	isb	sy
 80095aa:	f3bf 8f4f 	dsb	sy
 80095ae:	61bb      	str	r3, [r7, #24]
}
 80095b0:	bf00      	nop
 80095b2:	e7fe      	b.n	80095b2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80095b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095ba:	f023 0301 	bic.w	r3, r3, #1
 80095be:	b2da      	uxtb	r2, r3
 80095c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80095c6:	e03a      	b.n	800963e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80095c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095ce:	f043 0301 	orr.w	r3, r3, #1
 80095d2:	b2da      	uxtb	r2, r3
 80095d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80095da:	68ba      	ldr	r2, [r7, #8]
 80095dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095de:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80095e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e2:	699b      	ldr	r3, [r3, #24]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d10a      	bne.n	80095fe <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80095e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ec:	f383 8811 	msr	BASEPRI, r3
 80095f0:	f3bf 8f6f 	isb	sy
 80095f4:	f3bf 8f4f 	dsb	sy
 80095f8:	617b      	str	r3, [r7, #20]
}
 80095fa:	bf00      	nop
 80095fc:	e7fe      	b.n	80095fc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80095fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009600:	699a      	ldr	r2, [r3, #24]
 8009602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009604:	18d1      	adds	r1, r2, r3
 8009606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800960a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800960c:	f7ff ff06 	bl	800941c <prvInsertTimerInActiveList>
					break;
 8009610:	e015      	b.n	800963e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009614:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009618:	f003 0302 	and.w	r3, r3, #2
 800961c:	2b00      	cmp	r3, #0
 800961e:	d103      	bne.n	8009628 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009620:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009622:	f000 fbdd 	bl	8009de0 <vPortFree>
 8009626:	e00a      	b.n	800963e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800962a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800962e:	f023 0301 	bic.w	r3, r3, #1
 8009632:	b2da      	uxtb	r2, r3
 8009634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009636:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800963a:	e000      	b.n	800963e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800963c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800963e:	4b08      	ldr	r3, [pc, #32]	; (8009660 <prvProcessReceivedCommands+0x1c0>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	1d39      	adds	r1, r7, #4
 8009644:	2200      	movs	r2, #0
 8009646:	4618      	mov	r0, r3
 8009648:	f7fe fba2 	bl	8007d90 <xQueueReceive>
 800964c:	4603      	mov	r3, r0
 800964e:	2b00      	cmp	r3, #0
 8009650:	f47f af2a 	bne.w	80094a8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009654:	bf00      	nop
 8009656:	bf00      	nop
 8009658:	3730      	adds	r7, #48	; 0x30
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	200010e4 	.word	0x200010e4

08009664 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b088      	sub	sp, #32
 8009668:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800966a:	e048      	b.n	80096fe <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800966c:	4b2d      	ldr	r3, [pc, #180]	; (8009724 <prvSwitchTimerLists+0xc0>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	68db      	ldr	r3, [r3, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009676:	4b2b      	ldr	r3, [pc, #172]	; (8009724 <prvSwitchTimerLists+0xc0>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	68db      	ldr	r3, [r3, #12]
 800967c:	68db      	ldr	r3, [r3, #12]
 800967e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	3304      	adds	r3, #4
 8009684:	4618      	mov	r0, r3
 8009686:	f7fe f881 	bl	800778c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	6a1b      	ldr	r3, [r3, #32]
 800968e:	68f8      	ldr	r0, [r7, #12]
 8009690:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009698:	f003 0304 	and.w	r3, r3, #4
 800969c:	2b00      	cmp	r3, #0
 800969e:	d02e      	beq.n	80096fe <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	699b      	ldr	r3, [r3, #24]
 80096a4:	693a      	ldr	r2, [r7, #16]
 80096a6:	4413      	add	r3, r2
 80096a8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80096aa:	68ba      	ldr	r2, [r7, #8]
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d90e      	bls.n	80096d0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	68ba      	ldr	r2, [r7, #8]
 80096b6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	68fa      	ldr	r2, [r7, #12]
 80096bc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80096be:	4b19      	ldr	r3, [pc, #100]	; (8009724 <prvSwitchTimerLists+0xc0>)
 80096c0:	681a      	ldr	r2, [r3, #0]
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	3304      	adds	r3, #4
 80096c6:	4619      	mov	r1, r3
 80096c8:	4610      	mov	r0, r2
 80096ca:	f7fe f826 	bl	800771a <vListInsert>
 80096ce:	e016      	b.n	80096fe <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80096d0:	2300      	movs	r3, #0
 80096d2:	9300      	str	r3, [sp, #0]
 80096d4:	2300      	movs	r3, #0
 80096d6:	693a      	ldr	r2, [r7, #16]
 80096d8:	2100      	movs	r1, #0
 80096da:	68f8      	ldr	r0, [r7, #12]
 80096dc:	f7ff fd60 	bl	80091a0 <xTimerGenericCommand>
 80096e0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d10a      	bne.n	80096fe <prvSwitchTimerLists+0x9a>
	__asm volatile
 80096e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ec:	f383 8811 	msr	BASEPRI, r3
 80096f0:	f3bf 8f6f 	isb	sy
 80096f4:	f3bf 8f4f 	dsb	sy
 80096f8:	603b      	str	r3, [r7, #0]
}
 80096fa:	bf00      	nop
 80096fc:	e7fe      	b.n	80096fc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80096fe:	4b09      	ldr	r3, [pc, #36]	; (8009724 <prvSwitchTimerLists+0xc0>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d1b1      	bne.n	800966c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009708:	4b06      	ldr	r3, [pc, #24]	; (8009724 <prvSwitchTimerLists+0xc0>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800970e:	4b06      	ldr	r3, [pc, #24]	; (8009728 <prvSwitchTimerLists+0xc4>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	4a04      	ldr	r2, [pc, #16]	; (8009724 <prvSwitchTimerLists+0xc0>)
 8009714:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009716:	4a04      	ldr	r2, [pc, #16]	; (8009728 <prvSwitchTimerLists+0xc4>)
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	6013      	str	r3, [r2, #0]
}
 800971c:	bf00      	nop
 800971e:	3718      	adds	r7, #24
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}
 8009724:	200010dc 	.word	0x200010dc
 8009728:	200010e0 	.word	0x200010e0

0800972c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b082      	sub	sp, #8
 8009730:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009732:	f000 f967 	bl	8009a04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009736:	4b15      	ldr	r3, [pc, #84]	; (800978c <prvCheckForValidListAndQueue+0x60>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d120      	bne.n	8009780 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800973e:	4814      	ldr	r0, [pc, #80]	; (8009790 <prvCheckForValidListAndQueue+0x64>)
 8009740:	f7fd ff9a 	bl	8007678 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009744:	4813      	ldr	r0, [pc, #76]	; (8009794 <prvCheckForValidListAndQueue+0x68>)
 8009746:	f7fd ff97 	bl	8007678 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800974a:	4b13      	ldr	r3, [pc, #76]	; (8009798 <prvCheckForValidListAndQueue+0x6c>)
 800974c:	4a10      	ldr	r2, [pc, #64]	; (8009790 <prvCheckForValidListAndQueue+0x64>)
 800974e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009750:	4b12      	ldr	r3, [pc, #72]	; (800979c <prvCheckForValidListAndQueue+0x70>)
 8009752:	4a10      	ldr	r2, [pc, #64]	; (8009794 <prvCheckForValidListAndQueue+0x68>)
 8009754:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009756:	2300      	movs	r3, #0
 8009758:	9300      	str	r3, [sp, #0]
 800975a:	4b11      	ldr	r3, [pc, #68]	; (80097a0 <prvCheckForValidListAndQueue+0x74>)
 800975c:	4a11      	ldr	r2, [pc, #68]	; (80097a4 <prvCheckForValidListAndQueue+0x78>)
 800975e:	2110      	movs	r1, #16
 8009760:	200a      	movs	r0, #10
 8009762:	f7fe f8a5 	bl	80078b0 <xQueueGenericCreateStatic>
 8009766:	4603      	mov	r3, r0
 8009768:	4a08      	ldr	r2, [pc, #32]	; (800978c <prvCheckForValidListAndQueue+0x60>)
 800976a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800976c:	4b07      	ldr	r3, [pc, #28]	; (800978c <prvCheckForValidListAndQueue+0x60>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d005      	beq.n	8009780 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009774:	4b05      	ldr	r3, [pc, #20]	; (800978c <prvCheckForValidListAndQueue+0x60>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	490b      	ldr	r1, [pc, #44]	; (80097a8 <prvCheckForValidListAndQueue+0x7c>)
 800977a:	4618      	mov	r0, r3
 800977c:	f7fe fcf8 	bl	8008170 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009780:	f000 f970 	bl	8009a64 <vPortExitCritical>
}
 8009784:	bf00      	nop
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
 800978a:	bf00      	nop
 800978c:	200010e4 	.word	0x200010e4
 8009790:	200010b4 	.word	0x200010b4
 8009794:	200010c8 	.word	0x200010c8
 8009798:	200010dc 	.word	0x200010dc
 800979c:	200010e0 	.word	0x200010e0
 80097a0:	20001190 	.word	0x20001190
 80097a4:	200010f0 	.word	0x200010f0
 80097a8:	0800f458 	.word	0x0800f458

080097ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80097ac:	b480      	push	{r7}
 80097ae:	b085      	sub	sp, #20
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	60f8      	str	r0, [r7, #12]
 80097b4:	60b9      	str	r1, [r7, #8]
 80097b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	3b04      	subs	r3, #4
 80097bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80097c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	3b04      	subs	r3, #4
 80097ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	f023 0201 	bic.w	r2, r3, #1
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	3b04      	subs	r3, #4
 80097da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80097dc:	4a0c      	ldr	r2, [pc, #48]	; (8009810 <pxPortInitialiseStack+0x64>)
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	3b14      	subs	r3, #20
 80097e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80097e8:	687a      	ldr	r2, [r7, #4]
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	3b04      	subs	r3, #4
 80097f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f06f 0202 	mvn.w	r2, #2
 80097fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	3b20      	subs	r3, #32
 8009800:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009802:	68fb      	ldr	r3, [r7, #12]
}
 8009804:	4618      	mov	r0, r3
 8009806:	3714      	adds	r7, #20
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr
 8009810:	08009815 	.word	0x08009815

08009814 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009814:	b480      	push	{r7}
 8009816:	b085      	sub	sp, #20
 8009818:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800981a:	2300      	movs	r3, #0
 800981c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800981e:	4b12      	ldr	r3, [pc, #72]	; (8009868 <prvTaskExitError+0x54>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009826:	d00a      	beq.n	800983e <prvTaskExitError+0x2a>
	__asm volatile
 8009828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800982c:	f383 8811 	msr	BASEPRI, r3
 8009830:	f3bf 8f6f 	isb	sy
 8009834:	f3bf 8f4f 	dsb	sy
 8009838:	60fb      	str	r3, [r7, #12]
}
 800983a:	bf00      	nop
 800983c:	e7fe      	b.n	800983c <prvTaskExitError+0x28>
	__asm volatile
 800983e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009842:	f383 8811 	msr	BASEPRI, r3
 8009846:	f3bf 8f6f 	isb	sy
 800984a:	f3bf 8f4f 	dsb	sy
 800984e:	60bb      	str	r3, [r7, #8]
}
 8009850:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009852:	bf00      	nop
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d0fc      	beq.n	8009854 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800985a:	bf00      	nop
 800985c:	bf00      	nop
 800985e:	3714      	adds	r7, #20
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr
 8009868:	2000000c 	.word	0x2000000c
 800986c:	00000000 	.word	0x00000000

08009870 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009870:	4b07      	ldr	r3, [pc, #28]	; (8009890 <pxCurrentTCBConst2>)
 8009872:	6819      	ldr	r1, [r3, #0]
 8009874:	6808      	ldr	r0, [r1, #0]
 8009876:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800987a:	f380 8809 	msr	PSP, r0
 800987e:	f3bf 8f6f 	isb	sy
 8009882:	f04f 0000 	mov.w	r0, #0
 8009886:	f380 8811 	msr	BASEPRI, r0
 800988a:	4770      	bx	lr
 800988c:	f3af 8000 	nop.w

08009890 <pxCurrentTCBConst2>:
 8009890:	20000bb4 	.word	0x20000bb4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009894:	bf00      	nop
 8009896:	bf00      	nop

08009898 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009898:	4808      	ldr	r0, [pc, #32]	; (80098bc <prvPortStartFirstTask+0x24>)
 800989a:	6800      	ldr	r0, [r0, #0]
 800989c:	6800      	ldr	r0, [r0, #0]
 800989e:	f380 8808 	msr	MSP, r0
 80098a2:	f04f 0000 	mov.w	r0, #0
 80098a6:	f380 8814 	msr	CONTROL, r0
 80098aa:	b662      	cpsie	i
 80098ac:	b661      	cpsie	f
 80098ae:	f3bf 8f4f 	dsb	sy
 80098b2:	f3bf 8f6f 	isb	sy
 80098b6:	df00      	svc	0
 80098b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80098ba:	bf00      	nop
 80098bc:	e000ed08 	.word	0xe000ed08

080098c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b086      	sub	sp, #24
 80098c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80098c6:	4b46      	ldr	r3, [pc, #280]	; (80099e0 <xPortStartScheduler+0x120>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	4a46      	ldr	r2, [pc, #280]	; (80099e4 <xPortStartScheduler+0x124>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d10a      	bne.n	80098e6 <xPortStartScheduler+0x26>
	__asm volatile
 80098d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d4:	f383 8811 	msr	BASEPRI, r3
 80098d8:	f3bf 8f6f 	isb	sy
 80098dc:	f3bf 8f4f 	dsb	sy
 80098e0:	613b      	str	r3, [r7, #16]
}
 80098e2:	bf00      	nop
 80098e4:	e7fe      	b.n	80098e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80098e6:	4b3e      	ldr	r3, [pc, #248]	; (80099e0 <xPortStartScheduler+0x120>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4a3f      	ldr	r2, [pc, #252]	; (80099e8 <xPortStartScheduler+0x128>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d10a      	bne.n	8009906 <xPortStartScheduler+0x46>
	__asm volatile
 80098f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f4:	f383 8811 	msr	BASEPRI, r3
 80098f8:	f3bf 8f6f 	isb	sy
 80098fc:	f3bf 8f4f 	dsb	sy
 8009900:	60fb      	str	r3, [r7, #12]
}
 8009902:	bf00      	nop
 8009904:	e7fe      	b.n	8009904 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009906:	4b39      	ldr	r3, [pc, #228]	; (80099ec <xPortStartScheduler+0x12c>)
 8009908:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	781b      	ldrb	r3, [r3, #0]
 800990e:	b2db      	uxtb	r3, r3
 8009910:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	22ff      	movs	r2, #255	; 0xff
 8009916:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	781b      	ldrb	r3, [r3, #0]
 800991c:	b2db      	uxtb	r3, r3
 800991e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009920:	78fb      	ldrb	r3, [r7, #3]
 8009922:	b2db      	uxtb	r3, r3
 8009924:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009928:	b2da      	uxtb	r2, r3
 800992a:	4b31      	ldr	r3, [pc, #196]	; (80099f0 <xPortStartScheduler+0x130>)
 800992c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800992e:	4b31      	ldr	r3, [pc, #196]	; (80099f4 <xPortStartScheduler+0x134>)
 8009930:	2207      	movs	r2, #7
 8009932:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009934:	e009      	b.n	800994a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009936:	4b2f      	ldr	r3, [pc, #188]	; (80099f4 <xPortStartScheduler+0x134>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	3b01      	subs	r3, #1
 800993c:	4a2d      	ldr	r2, [pc, #180]	; (80099f4 <xPortStartScheduler+0x134>)
 800993e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009940:	78fb      	ldrb	r3, [r7, #3]
 8009942:	b2db      	uxtb	r3, r3
 8009944:	005b      	lsls	r3, r3, #1
 8009946:	b2db      	uxtb	r3, r3
 8009948:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800994a:	78fb      	ldrb	r3, [r7, #3]
 800994c:	b2db      	uxtb	r3, r3
 800994e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009952:	2b80      	cmp	r3, #128	; 0x80
 8009954:	d0ef      	beq.n	8009936 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009956:	4b27      	ldr	r3, [pc, #156]	; (80099f4 <xPortStartScheduler+0x134>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f1c3 0307 	rsb	r3, r3, #7
 800995e:	2b04      	cmp	r3, #4
 8009960:	d00a      	beq.n	8009978 <xPortStartScheduler+0xb8>
	__asm volatile
 8009962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009966:	f383 8811 	msr	BASEPRI, r3
 800996a:	f3bf 8f6f 	isb	sy
 800996e:	f3bf 8f4f 	dsb	sy
 8009972:	60bb      	str	r3, [r7, #8]
}
 8009974:	bf00      	nop
 8009976:	e7fe      	b.n	8009976 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009978:	4b1e      	ldr	r3, [pc, #120]	; (80099f4 <xPortStartScheduler+0x134>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	021b      	lsls	r3, r3, #8
 800997e:	4a1d      	ldr	r2, [pc, #116]	; (80099f4 <xPortStartScheduler+0x134>)
 8009980:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009982:	4b1c      	ldr	r3, [pc, #112]	; (80099f4 <xPortStartScheduler+0x134>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800998a:	4a1a      	ldr	r2, [pc, #104]	; (80099f4 <xPortStartScheduler+0x134>)
 800998c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	b2da      	uxtb	r2, r3
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009996:	4b18      	ldr	r3, [pc, #96]	; (80099f8 <xPortStartScheduler+0x138>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4a17      	ldr	r2, [pc, #92]	; (80099f8 <xPortStartScheduler+0x138>)
 800999c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80099a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80099a2:	4b15      	ldr	r3, [pc, #84]	; (80099f8 <xPortStartScheduler+0x138>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	4a14      	ldr	r2, [pc, #80]	; (80099f8 <xPortStartScheduler+0x138>)
 80099a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80099ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80099ae:	f000 f8dd 	bl	8009b6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80099b2:	4b12      	ldr	r3, [pc, #72]	; (80099fc <xPortStartScheduler+0x13c>)
 80099b4:	2200      	movs	r2, #0
 80099b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80099b8:	f000 f8fc 	bl	8009bb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80099bc:	4b10      	ldr	r3, [pc, #64]	; (8009a00 <xPortStartScheduler+0x140>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	4a0f      	ldr	r2, [pc, #60]	; (8009a00 <xPortStartScheduler+0x140>)
 80099c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80099c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80099c8:	f7ff ff66 	bl	8009898 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80099cc:	f7ff f84a 	bl	8008a64 <vTaskSwitchContext>
	prvTaskExitError();
 80099d0:	f7ff ff20 	bl	8009814 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80099d4:	2300      	movs	r3, #0
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3718      	adds	r7, #24
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}
 80099de:	bf00      	nop
 80099e0:	e000ed00 	.word	0xe000ed00
 80099e4:	410fc271 	.word	0x410fc271
 80099e8:	410fc270 	.word	0x410fc270
 80099ec:	e000e400 	.word	0xe000e400
 80099f0:	200011e0 	.word	0x200011e0
 80099f4:	200011e4 	.word	0x200011e4
 80099f8:	e000ed20 	.word	0xe000ed20
 80099fc:	2000000c 	.word	0x2000000c
 8009a00:	e000ef34 	.word	0xe000ef34

08009a04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009a04:	b480      	push	{r7}
 8009a06:	b083      	sub	sp, #12
 8009a08:	af00      	add	r7, sp, #0
	__asm volatile
 8009a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a0e:	f383 8811 	msr	BASEPRI, r3
 8009a12:	f3bf 8f6f 	isb	sy
 8009a16:	f3bf 8f4f 	dsb	sy
 8009a1a:	607b      	str	r3, [r7, #4]
}
 8009a1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009a1e:	4b0f      	ldr	r3, [pc, #60]	; (8009a5c <vPortEnterCritical+0x58>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	3301      	adds	r3, #1
 8009a24:	4a0d      	ldr	r2, [pc, #52]	; (8009a5c <vPortEnterCritical+0x58>)
 8009a26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009a28:	4b0c      	ldr	r3, [pc, #48]	; (8009a5c <vPortEnterCritical+0x58>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	2b01      	cmp	r3, #1
 8009a2e:	d10f      	bne.n	8009a50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009a30:	4b0b      	ldr	r3, [pc, #44]	; (8009a60 <vPortEnterCritical+0x5c>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	b2db      	uxtb	r3, r3
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d00a      	beq.n	8009a50 <vPortEnterCritical+0x4c>
	__asm volatile
 8009a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a3e:	f383 8811 	msr	BASEPRI, r3
 8009a42:	f3bf 8f6f 	isb	sy
 8009a46:	f3bf 8f4f 	dsb	sy
 8009a4a:	603b      	str	r3, [r7, #0]
}
 8009a4c:	bf00      	nop
 8009a4e:	e7fe      	b.n	8009a4e <vPortEnterCritical+0x4a>
	}
}
 8009a50:	bf00      	nop
 8009a52:	370c      	adds	r7, #12
 8009a54:	46bd      	mov	sp, r7
 8009a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5a:	4770      	bx	lr
 8009a5c:	2000000c 	.word	0x2000000c
 8009a60:	e000ed04 	.word	0xe000ed04

08009a64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009a64:	b480      	push	{r7}
 8009a66:	b083      	sub	sp, #12
 8009a68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009a6a:	4b12      	ldr	r3, [pc, #72]	; (8009ab4 <vPortExitCritical+0x50>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d10a      	bne.n	8009a88 <vPortExitCritical+0x24>
	__asm volatile
 8009a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a76:	f383 8811 	msr	BASEPRI, r3
 8009a7a:	f3bf 8f6f 	isb	sy
 8009a7e:	f3bf 8f4f 	dsb	sy
 8009a82:	607b      	str	r3, [r7, #4]
}
 8009a84:	bf00      	nop
 8009a86:	e7fe      	b.n	8009a86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009a88:	4b0a      	ldr	r3, [pc, #40]	; (8009ab4 <vPortExitCritical+0x50>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	3b01      	subs	r3, #1
 8009a8e:	4a09      	ldr	r2, [pc, #36]	; (8009ab4 <vPortExitCritical+0x50>)
 8009a90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009a92:	4b08      	ldr	r3, [pc, #32]	; (8009ab4 <vPortExitCritical+0x50>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d105      	bne.n	8009aa6 <vPortExitCritical+0x42>
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	f383 8811 	msr	BASEPRI, r3
}
 8009aa4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009aa6:	bf00      	nop
 8009aa8:	370c      	adds	r7, #12
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab0:	4770      	bx	lr
 8009ab2:	bf00      	nop
 8009ab4:	2000000c 	.word	0x2000000c
	...

08009ac0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009ac0:	f3ef 8009 	mrs	r0, PSP
 8009ac4:	f3bf 8f6f 	isb	sy
 8009ac8:	4b15      	ldr	r3, [pc, #84]	; (8009b20 <pxCurrentTCBConst>)
 8009aca:	681a      	ldr	r2, [r3, #0]
 8009acc:	f01e 0f10 	tst.w	lr, #16
 8009ad0:	bf08      	it	eq
 8009ad2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009ad6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ada:	6010      	str	r0, [r2, #0]
 8009adc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009ae0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009ae4:	f380 8811 	msr	BASEPRI, r0
 8009ae8:	f3bf 8f4f 	dsb	sy
 8009aec:	f3bf 8f6f 	isb	sy
 8009af0:	f7fe ffb8 	bl	8008a64 <vTaskSwitchContext>
 8009af4:	f04f 0000 	mov.w	r0, #0
 8009af8:	f380 8811 	msr	BASEPRI, r0
 8009afc:	bc09      	pop	{r0, r3}
 8009afe:	6819      	ldr	r1, [r3, #0]
 8009b00:	6808      	ldr	r0, [r1, #0]
 8009b02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b06:	f01e 0f10 	tst.w	lr, #16
 8009b0a:	bf08      	it	eq
 8009b0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009b10:	f380 8809 	msr	PSP, r0
 8009b14:	f3bf 8f6f 	isb	sy
 8009b18:	4770      	bx	lr
 8009b1a:	bf00      	nop
 8009b1c:	f3af 8000 	nop.w

08009b20 <pxCurrentTCBConst>:
 8009b20:	20000bb4 	.word	0x20000bb4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009b24:	bf00      	nop
 8009b26:	bf00      	nop

08009b28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b082      	sub	sp, #8
 8009b2c:	af00      	add	r7, sp, #0
	__asm volatile
 8009b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b32:	f383 8811 	msr	BASEPRI, r3
 8009b36:	f3bf 8f6f 	isb	sy
 8009b3a:	f3bf 8f4f 	dsb	sy
 8009b3e:	607b      	str	r3, [r7, #4]
}
 8009b40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009b42:	f7fe fed5 	bl	80088f0 <xTaskIncrementTick>
 8009b46:	4603      	mov	r3, r0
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d003      	beq.n	8009b54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009b4c:	4b06      	ldr	r3, [pc, #24]	; (8009b68 <xPortSysTickHandler+0x40>)
 8009b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b52:	601a      	str	r2, [r3, #0]
 8009b54:	2300      	movs	r3, #0
 8009b56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	f383 8811 	msr	BASEPRI, r3
}
 8009b5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009b60:	bf00      	nop
 8009b62:	3708      	adds	r7, #8
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}
 8009b68:	e000ed04 	.word	0xe000ed04

08009b6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009b70:	4b0b      	ldr	r3, [pc, #44]	; (8009ba0 <vPortSetupTimerInterrupt+0x34>)
 8009b72:	2200      	movs	r2, #0
 8009b74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009b76:	4b0b      	ldr	r3, [pc, #44]	; (8009ba4 <vPortSetupTimerInterrupt+0x38>)
 8009b78:	2200      	movs	r2, #0
 8009b7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009b7c:	4b0a      	ldr	r3, [pc, #40]	; (8009ba8 <vPortSetupTimerInterrupt+0x3c>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4a0a      	ldr	r2, [pc, #40]	; (8009bac <vPortSetupTimerInterrupt+0x40>)
 8009b82:	fba2 2303 	umull	r2, r3, r2, r3
 8009b86:	099b      	lsrs	r3, r3, #6
 8009b88:	4a09      	ldr	r2, [pc, #36]	; (8009bb0 <vPortSetupTimerInterrupt+0x44>)
 8009b8a:	3b01      	subs	r3, #1
 8009b8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009b8e:	4b04      	ldr	r3, [pc, #16]	; (8009ba0 <vPortSetupTimerInterrupt+0x34>)
 8009b90:	2207      	movs	r2, #7
 8009b92:	601a      	str	r2, [r3, #0]
}
 8009b94:	bf00      	nop
 8009b96:	46bd      	mov	sp, r7
 8009b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9c:	4770      	bx	lr
 8009b9e:	bf00      	nop
 8009ba0:	e000e010 	.word	0xe000e010
 8009ba4:	e000e018 	.word	0xe000e018
 8009ba8:	20000000 	.word	0x20000000
 8009bac:	10624dd3 	.word	0x10624dd3
 8009bb0:	e000e014 	.word	0xe000e014

08009bb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009bb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009bc4 <vPortEnableVFP+0x10>
 8009bb8:	6801      	ldr	r1, [r0, #0]
 8009bba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009bbe:	6001      	str	r1, [r0, #0]
 8009bc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009bc2:	bf00      	nop
 8009bc4:	e000ed88 	.word	0xe000ed88

08009bc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009bc8:	b480      	push	{r7}
 8009bca:	b085      	sub	sp, #20
 8009bcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009bce:	f3ef 8305 	mrs	r3, IPSR
 8009bd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	2b0f      	cmp	r3, #15
 8009bd8:	d914      	bls.n	8009c04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009bda:	4a17      	ldr	r2, [pc, #92]	; (8009c38 <vPortValidateInterruptPriority+0x70>)
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	4413      	add	r3, r2
 8009be0:	781b      	ldrb	r3, [r3, #0]
 8009be2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009be4:	4b15      	ldr	r3, [pc, #84]	; (8009c3c <vPortValidateInterruptPriority+0x74>)
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	7afa      	ldrb	r2, [r7, #11]
 8009bea:	429a      	cmp	r2, r3
 8009bec:	d20a      	bcs.n	8009c04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf2:	f383 8811 	msr	BASEPRI, r3
 8009bf6:	f3bf 8f6f 	isb	sy
 8009bfa:	f3bf 8f4f 	dsb	sy
 8009bfe:	607b      	str	r3, [r7, #4]
}
 8009c00:	bf00      	nop
 8009c02:	e7fe      	b.n	8009c02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009c04:	4b0e      	ldr	r3, [pc, #56]	; (8009c40 <vPortValidateInterruptPriority+0x78>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009c0c:	4b0d      	ldr	r3, [pc, #52]	; (8009c44 <vPortValidateInterruptPriority+0x7c>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d90a      	bls.n	8009c2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c18:	f383 8811 	msr	BASEPRI, r3
 8009c1c:	f3bf 8f6f 	isb	sy
 8009c20:	f3bf 8f4f 	dsb	sy
 8009c24:	603b      	str	r3, [r7, #0]
}
 8009c26:	bf00      	nop
 8009c28:	e7fe      	b.n	8009c28 <vPortValidateInterruptPriority+0x60>
	}
 8009c2a:	bf00      	nop
 8009c2c:	3714      	adds	r7, #20
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr
 8009c36:	bf00      	nop
 8009c38:	e000e3f0 	.word	0xe000e3f0
 8009c3c:	200011e0 	.word	0x200011e0
 8009c40:	e000ed0c 	.word	0xe000ed0c
 8009c44:	200011e4 	.word	0x200011e4

08009c48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b08a      	sub	sp, #40	; 0x28
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009c50:	2300      	movs	r3, #0
 8009c52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009c54:	f7fe fd90 	bl	8008778 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009c58:	4b5b      	ldr	r3, [pc, #364]	; (8009dc8 <pvPortMalloc+0x180>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d101      	bne.n	8009c64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009c60:	f000 f920 	bl	8009ea4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009c64:	4b59      	ldr	r3, [pc, #356]	; (8009dcc <pvPortMalloc+0x184>)
 8009c66:	681a      	ldr	r2, [r3, #0]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	4013      	ands	r3, r2
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	f040 8093 	bne.w	8009d98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d01d      	beq.n	8009cb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009c78:	2208      	movs	r2, #8
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	4413      	add	r3, r2
 8009c7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f003 0307 	and.w	r3, r3, #7
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d014      	beq.n	8009cb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f023 0307 	bic.w	r3, r3, #7
 8009c90:	3308      	adds	r3, #8
 8009c92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f003 0307 	and.w	r3, r3, #7
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d00a      	beq.n	8009cb4 <pvPortMalloc+0x6c>
	__asm volatile
 8009c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca2:	f383 8811 	msr	BASEPRI, r3
 8009ca6:	f3bf 8f6f 	isb	sy
 8009caa:	f3bf 8f4f 	dsb	sy
 8009cae:	617b      	str	r3, [r7, #20]
}
 8009cb0:	bf00      	nop
 8009cb2:	e7fe      	b.n	8009cb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d06e      	beq.n	8009d98 <pvPortMalloc+0x150>
 8009cba:	4b45      	ldr	r3, [pc, #276]	; (8009dd0 <pvPortMalloc+0x188>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	687a      	ldr	r2, [r7, #4]
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d869      	bhi.n	8009d98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009cc4:	4b43      	ldr	r3, [pc, #268]	; (8009dd4 <pvPortMalloc+0x18c>)
 8009cc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009cc8:	4b42      	ldr	r3, [pc, #264]	; (8009dd4 <pvPortMalloc+0x18c>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009cce:	e004      	b.n	8009cda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	687a      	ldr	r2, [r7, #4]
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	d903      	bls.n	8009cec <pvPortMalloc+0xa4>
 8009ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d1f1      	bne.n	8009cd0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009cec:	4b36      	ldr	r3, [pc, #216]	; (8009dc8 <pvPortMalloc+0x180>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cf2:	429a      	cmp	r2, r3
 8009cf4:	d050      	beq.n	8009d98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009cf6:	6a3b      	ldr	r3, [r7, #32]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	2208      	movs	r2, #8
 8009cfc:	4413      	add	r3, r2
 8009cfe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d02:	681a      	ldr	r2, [r3, #0]
 8009d04:	6a3b      	ldr	r3, [r7, #32]
 8009d06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0a:	685a      	ldr	r2, [r3, #4]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	1ad2      	subs	r2, r2, r3
 8009d10:	2308      	movs	r3, #8
 8009d12:	005b      	lsls	r3, r3, #1
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d91f      	bls.n	8009d58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	4413      	add	r3, r2
 8009d1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d20:	69bb      	ldr	r3, [r7, #24]
 8009d22:	f003 0307 	and.w	r3, r3, #7
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d00a      	beq.n	8009d40 <pvPortMalloc+0xf8>
	__asm volatile
 8009d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d2e:	f383 8811 	msr	BASEPRI, r3
 8009d32:	f3bf 8f6f 	isb	sy
 8009d36:	f3bf 8f4f 	dsb	sy
 8009d3a:	613b      	str	r3, [r7, #16]
}
 8009d3c:	bf00      	nop
 8009d3e:	e7fe      	b.n	8009d3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d42:	685a      	ldr	r2, [r3, #4]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	1ad2      	subs	r2, r2, r3
 8009d48:	69bb      	ldr	r3, [r7, #24]
 8009d4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4e:	687a      	ldr	r2, [r7, #4]
 8009d50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009d52:	69b8      	ldr	r0, [r7, #24]
 8009d54:	f000 f908 	bl	8009f68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009d58:	4b1d      	ldr	r3, [pc, #116]	; (8009dd0 <pvPortMalloc+0x188>)
 8009d5a:	681a      	ldr	r2, [r3, #0]
 8009d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	1ad3      	subs	r3, r2, r3
 8009d62:	4a1b      	ldr	r2, [pc, #108]	; (8009dd0 <pvPortMalloc+0x188>)
 8009d64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009d66:	4b1a      	ldr	r3, [pc, #104]	; (8009dd0 <pvPortMalloc+0x188>)
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	4b1b      	ldr	r3, [pc, #108]	; (8009dd8 <pvPortMalloc+0x190>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	d203      	bcs.n	8009d7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009d72:	4b17      	ldr	r3, [pc, #92]	; (8009dd0 <pvPortMalloc+0x188>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	4a18      	ldr	r2, [pc, #96]	; (8009dd8 <pvPortMalloc+0x190>)
 8009d78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7c:	685a      	ldr	r2, [r3, #4]
 8009d7e:	4b13      	ldr	r3, [pc, #76]	; (8009dcc <pvPortMalloc+0x184>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	431a      	orrs	r2, r3
 8009d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009d8e:	4b13      	ldr	r3, [pc, #76]	; (8009ddc <pvPortMalloc+0x194>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	3301      	adds	r3, #1
 8009d94:	4a11      	ldr	r2, [pc, #68]	; (8009ddc <pvPortMalloc+0x194>)
 8009d96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009d98:	f7fe fcfc 	bl	8008794 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d9c:	69fb      	ldr	r3, [r7, #28]
 8009d9e:	f003 0307 	and.w	r3, r3, #7
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d00a      	beq.n	8009dbc <pvPortMalloc+0x174>
	__asm volatile
 8009da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009daa:	f383 8811 	msr	BASEPRI, r3
 8009dae:	f3bf 8f6f 	isb	sy
 8009db2:	f3bf 8f4f 	dsb	sy
 8009db6:	60fb      	str	r3, [r7, #12]
}
 8009db8:	bf00      	nop
 8009dba:	e7fe      	b.n	8009dba <pvPortMalloc+0x172>
	return pvReturn;
 8009dbc:	69fb      	ldr	r3, [r7, #28]
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3728      	adds	r7, #40	; 0x28
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}
 8009dc6:	bf00      	nop
 8009dc8:	20004df0 	.word	0x20004df0
 8009dcc:	20004e04 	.word	0x20004e04
 8009dd0:	20004df4 	.word	0x20004df4
 8009dd4:	20004de8 	.word	0x20004de8
 8009dd8:	20004df8 	.word	0x20004df8
 8009ddc:	20004dfc 	.word	0x20004dfc

08009de0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b086      	sub	sp, #24
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d04d      	beq.n	8009e8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009df2:	2308      	movs	r3, #8
 8009df4:	425b      	negs	r3, r3
 8009df6:	697a      	ldr	r2, [r7, #20]
 8009df8:	4413      	add	r3, r2
 8009dfa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	685a      	ldr	r2, [r3, #4]
 8009e04:	4b24      	ldr	r3, [pc, #144]	; (8009e98 <vPortFree+0xb8>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4013      	ands	r3, r2
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d10a      	bne.n	8009e24 <vPortFree+0x44>
	__asm volatile
 8009e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e12:	f383 8811 	msr	BASEPRI, r3
 8009e16:	f3bf 8f6f 	isb	sy
 8009e1a:	f3bf 8f4f 	dsb	sy
 8009e1e:	60fb      	str	r3, [r7, #12]
}
 8009e20:	bf00      	nop
 8009e22:	e7fe      	b.n	8009e22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d00a      	beq.n	8009e42 <vPortFree+0x62>
	__asm volatile
 8009e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e30:	f383 8811 	msr	BASEPRI, r3
 8009e34:	f3bf 8f6f 	isb	sy
 8009e38:	f3bf 8f4f 	dsb	sy
 8009e3c:	60bb      	str	r3, [r7, #8]
}
 8009e3e:	bf00      	nop
 8009e40:	e7fe      	b.n	8009e40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	685a      	ldr	r2, [r3, #4]
 8009e46:	4b14      	ldr	r3, [pc, #80]	; (8009e98 <vPortFree+0xb8>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4013      	ands	r3, r2
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d01e      	beq.n	8009e8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d11a      	bne.n	8009e8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	685a      	ldr	r2, [r3, #4]
 8009e5c:	4b0e      	ldr	r3, [pc, #56]	; (8009e98 <vPortFree+0xb8>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	43db      	mvns	r3, r3
 8009e62:	401a      	ands	r2, r3
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009e68:	f7fe fc86 	bl	8008778 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	685a      	ldr	r2, [r3, #4]
 8009e70:	4b0a      	ldr	r3, [pc, #40]	; (8009e9c <vPortFree+0xbc>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	4413      	add	r3, r2
 8009e76:	4a09      	ldr	r2, [pc, #36]	; (8009e9c <vPortFree+0xbc>)
 8009e78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009e7a:	6938      	ldr	r0, [r7, #16]
 8009e7c:	f000 f874 	bl	8009f68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009e80:	4b07      	ldr	r3, [pc, #28]	; (8009ea0 <vPortFree+0xc0>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	3301      	adds	r3, #1
 8009e86:	4a06      	ldr	r2, [pc, #24]	; (8009ea0 <vPortFree+0xc0>)
 8009e88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009e8a:	f7fe fc83 	bl	8008794 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009e8e:	bf00      	nop
 8009e90:	3718      	adds	r7, #24
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop
 8009e98:	20004e04 	.word	0x20004e04
 8009e9c:	20004df4 	.word	0x20004df4
 8009ea0:	20004e00 	.word	0x20004e00

08009ea4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b085      	sub	sp, #20
 8009ea8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009eaa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009eae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009eb0:	4b27      	ldr	r3, [pc, #156]	; (8009f50 <prvHeapInit+0xac>)
 8009eb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	f003 0307 	and.w	r3, r3, #7
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d00c      	beq.n	8009ed8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	3307      	adds	r3, #7
 8009ec2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	f023 0307 	bic.w	r3, r3, #7
 8009eca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009ecc:	68ba      	ldr	r2, [r7, #8]
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	1ad3      	subs	r3, r2, r3
 8009ed2:	4a1f      	ldr	r2, [pc, #124]	; (8009f50 <prvHeapInit+0xac>)
 8009ed4:	4413      	add	r3, r2
 8009ed6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009edc:	4a1d      	ldr	r2, [pc, #116]	; (8009f54 <prvHeapInit+0xb0>)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009ee2:	4b1c      	ldr	r3, [pc, #112]	; (8009f54 <prvHeapInit+0xb0>)
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	68ba      	ldr	r2, [r7, #8]
 8009eec:	4413      	add	r3, r2
 8009eee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009ef0:	2208      	movs	r2, #8
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	1a9b      	subs	r3, r3, r2
 8009ef6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	f023 0307 	bic.w	r3, r3, #7
 8009efe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	4a15      	ldr	r2, [pc, #84]	; (8009f58 <prvHeapInit+0xb4>)
 8009f04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009f06:	4b14      	ldr	r3, [pc, #80]	; (8009f58 <prvHeapInit+0xb4>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009f0e:	4b12      	ldr	r3, [pc, #72]	; (8009f58 <prvHeapInit+0xb4>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	2200      	movs	r2, #0
 8009f14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	68fa      	ldr	r2, [r7, #12]
 8009f1e:	1ad2      	subs	r2, r2, r3
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009f24:	4b0c      	ldr	r3, [pc, #48]	; (8009f58 <prvHeapInit+0xb4>)
 8009f26:	681a      	ldr	r2, [r3, #0]
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	4a0a      	ldr	r2, [pc, #40]	; (8009f5c <prvHeapInit+0xb8>)
 8009f32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	685b      	ldr	r3, [r3, #4]
 8009f38:	4a09      	ldr	r2, [pc, #36]	; (8009f60 <prvHeapInit+0xbc>)
 8009f3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009f3c:	4b09      	ldr	r3, [pc, #36]	; (8009f64 <prvHeapInit+0xc0>)
 8009f3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009f42:	601a      	str	r2, [r3, #0]
}
 8009f44:	bf00      	nop
 8009f46:	3714      	adds	r7, #20
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4e:	4770      	bx	lr
 8009f50:	200011e8 	.word	0x200011e8
 8009f54:	20004de8 	.word	0x20004de8
 8009f58:	20004df0 	.word	0x20004df0
 8009f5c:	20004df8 	.word	0x20004df8
 8009f60:	20004df4 	.word	0x20004df4
 8009f64:	20004e04 	.word	0x20004e04

08009f68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b085      	sub	sp, #20
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009f70:	4b28      	ldr	r3, [pc, #160]	; (800a014 <prvInsertBlockIntoFreeList+0xac>)
 8009f72:	60fb      	str	r3, [r7, #12]
 8009f74:	e002      	b.n	8009f7c <prvInsertBlockIntoFreeList+0x14>
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	60fb      	str	r3, [r7, #12]
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	687a      	ldr	r2, [r7, #4]
 8009f82:	429a      	cmp	r2, r3
 8009f84:	d8f7      	bhi.n	8009f76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	685b      	ldr	r3, [r3, #4]
 8009f8e:	68ba      	ldr	r2, [r7, #8]
 8009f90:	4413      	add	r3, r2
 8009f92:	687a      	ldr	r2, [r7, #4]
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d108      	bne.n	8009faa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	685a      	ldr	r2, [r3, #4]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	685b      	ldr	r3, [r3, #4]
 8009fa0:	441a      	add	r2, r3
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	685b      	ldr	r3, [r3, #4]
 8009fb2:	68ba      	ldr	r2, [r7, #8]
 8009fb4:	441a      	add	r2, r3
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	429a      	cmp	r2, r3
 8009fbc:	d118      	bne.n	8009ff0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	681a      	ldr	r2, [r3, #0]
 8009fc2:	4b15      	ldr	r3, [pc, #84]	; (800a018 <prvInsertBlockIntoFreeList+0xb0>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d00d      	beq.n	8009fe6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	685a      	ldr	r2, [r3, #4]
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	685b      	ldr	r3, [r3, #4]
 8009fd4:	441a      	add	r2, r3
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	681a      	ldr	r2, [r3, #0]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	601a      	str	r2, [r3, #0]
 8009fe4:	e008      	b.n	8009ff8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009fe6:	4b0c      	ldr	r3, [pc, #48]	; (800a018 <prvInsertBlockIntoFreeList+0xb0>)
 8009fe8:	681a      	ldr	r2, [r3, #0]
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	601a      	str	r2, [r3, #0]
 8009fee:	e003      	b.n	8009ff8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681a      	ldr	r2, [r3, #0]
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009ff8:	68fa      	ldr	r2, [r7, #12]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	d002      	beq.n	800a006 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	687a      	ldr	r2, [r7, #4]
 800a004:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a006:	bf00      	nop
 800a008:	3714      	adds	r7, #20
 800a00a:	46bd      	mov	sp, r7
 800a00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a010:	4770      	bx	lr
 800a012:	bf00      	nop
 800a014:	20004de8 	.word	0x20004de8
 800a018:	20004df0 	.word	0x20004df0

0800a01c <databaseQueueInit>:
QueueHandle_t sensorDataQueue = NULL;
LoraTransmit loraTx;
LoraTransmit loraRx;

void databaseQueueInit(uint16_t len, uint16_t size)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b082      	sub	sp, #8
 800a020:	af00      	add	r7, sp, #0
 800a022:	4603      	mov	r3, r0
 800a024:	460a      	mov	r2, r1
 800a026:	80fb      	strh	r3, [r7, #6]
 800a028:	4613      	mov	r3, r2
 800a02a:	80bb      	strh	r3, [r7, #4]
	sensorDataQueue = xQueueCreate(len, size);
 800a02c:	88fb      	ldrh	r3, [r7, #6]
 800a02e:	88b9      	ldrh	r1, [r7, #4]
 800a030:	2200      	movs	r2, #0
 800a032:	4618      	mov	r0, r3
 800a034:	f7fd fcb4 	bl	80079a0 <xQueueGenericCreate>
 800a038:	4603      	mov	r3, r0
 800a03a:	4a03      	ldr	r2, [pc, #12]	; (800a048 <databaseQueueInit+0x2c>)
 800a03c:	6013      	str	r3, [r2, #0]
}
 800a03e:	bf00      	nop
 800a040:	3708      	adds	r7, #8
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}
 800a046:	bf00      	nop
 800a048:	20004e08 	.word	0x20004e08

0800a04c <GPS_Init>:
//////////////////////////////////////////////////////////////
/*
 * This function start the uart interrupt
 */
void GPS_Init(UART_HandleTypeDef *uart, GPS *gps)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b082      	sub	sp, #8
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
 800a054:	6039      	str	r1, [r7, #0]
	gpsUart = uart;
 800a056:	4a08      	ldr	r2, [pc, #32]	; (800a078 <GPS_Init+0x2c>)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6013      	str	r3, [r2, #0]
	_gps = gps;
 800a05c:	4a07      	ldr	r2, [pc, #28]	; (800a07c <GPS_Init+0x30>)
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(gpsUart, &rxGps , 1);
 800a062:	4b05      	ldr	r3, [pc, #20]	; (800a078 <GPS_Init+0x2c>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	2201      	movs	r2, #1
 800a068:	4905      	ldr	r1, [pc, #20]	; (800a080 <GPS_Init+0x34>)
 800a06a:	4618      	mov	r0, r3
 800a06c:	f7fc fb9c 	bl	80067a8 <HAL_UART_Receive_IT>
}
 800a070:	bf00      	nop
 800a072:	3708      	adds	r7, #8
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}
 800a078:	20004e28 	.word	0x20004e28
 800a07c:	20004f2c 	.word	0x20004f2c
 800a080:	20004f28 	.word	0x20004f28

0800a084 <GPS_Callback>:
//////////////////////////////////////////////////////////////
/*
 * When rx pin read, store the datas in ringBuff structure
 */
void GPS_Callback(void)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(gpsUart, &rxGps, 1);
 800a088:	4b15      	ldr	r3, [pc, #84]	; (800a0e0 <GPS_Callback+0x5c>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	2201      	movs	r2, #1
 800a08e:	4915      	ldr	r1, [pc, #84]	; (800a0e4 <GPS_Callback+0x60>)
 800a090:	4618      	mov	r0, r3
 800a092:	f7fc fb89 	bl	80067a8 <HAL_UART_Receive_IT>
	ringBuff.rxGps[HEAD_INCREASE] = rxGps;
 800a096:	4b14      	ldr	r3, [pc, #80]	; (800a0e8 <GPS_Callback+0x64>)
 800a098:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 800a09c:	b2db      	uxtb	r3, r3
 800a09e:	3301      	adds	r3, #1
 800a0a0:	461a      	mov	r2, r3
 800a0a2:	4b12      	ldr	r3, [pc, #72]	; (800a0ec <GPS_Callback+0x68>)
 800a0a4:	fba3 1302 	umull	r1, r3, r3, r2
 800a0a8:	091b      	lsrs	r3, r3, #4
 800a0aa:	21fa      	movs	r1, #250	; 0xfa
 800a0ac:	fb01 f303 	mul.w	r3, r1, r3
 800a0b0:	1ad3      	subs	r3, r2, r3
 800a0b2:	b2da      	uxtb	r2, r3
 800a0b4:	4b0c      	ldr	r3, [pc, #48]	; (800a0e8 <GPS_Callback+0x64>)
 800a0b6:	4611      	mov	r1, r2
 800a0b8:	f883 10fb 	strb.w	r1, [r3, #251]	; 0xfb
 800a0bc:	4b09      	ldr	r3, [pc, #36]	; (800a0e4 <GPS_Callback+0x60>)
 800a0be:	7819      	ldrb	r1, [r3, #0]
 800a0c0:	4b09      	ldr	r3, [pc, #36]	; (800a0e8 <GPS_Callback+0x64>)
 800a0c2:	5499      	strb	r1, [r3, r2]
	if(rxGps == '\r')	GPS_Parse();
 800a0c4:	4b07      	ldr	r3, [pc, #28]	; (800a0e4 <GPS_Callback+0x60>)
 800a0c6:	781b      	ldrb	r3, [r3, #0]
 800a0c8:	2b0d      	cmp	r3, #13
 800a0ca:	d101      	bne.n	800a0d0 <GPS_Callback+0x4c>
 800a0cc:	f000 f812 	bl	800a0f4 <GPS_Parse>
	gpsIrqTime = HAL_GetTick();
 800a0d0:	f7f8 f87e 	bl	80021d0 <HAL_GetTick>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	4a06      	ldr	r2, [pc, #24]	; (800a0f0 <GPS_Callback+0x6c>)
 800a0d8:	6013      	str	r3, [r2, #0]
}
 800a0da:	bf00      	nop
 800a0dc:	bd80      	pop	{r7, pc}
 800a0de:	bf00      	nop
 800a0e0:	20004e28 	.word	0x20004e28
 800a0e4:	20004f28 	.word	0x20004f28
 800a0e8:	20004e2c 	.word	0x20004e2c
 800a0ec:	10624dd3 	.word	0x10624dd3
 800a0f0:	20004f30 	.word	0x20004f30

0800a0f4 <GPS_Parse>:
/////////////////////////////////////////////////////////////
/*
 * This function parses parameters and store them in GPS structure
 */
GPS_State GPS_Parse()
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	af00      	add	r7, sp, #0
	while(TAIL_READ != '$')					//tail değerini $ olana kadar arttırır
 800a0f8:	e01d      	b.n	800a136 <GPS_Parse+0x42>
	{
		if(ringBuff.tail == ringBuff.head) return NO_CONNECTION;
 800a0fa:	4b47      	ldr	r3, [pc, #284]	; (800a218 <GPS_Parse+0x124>)
 800a0fc:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a100:	b2da      	uxtb	r2, r3
 800a102:	4b45      	ldr	r3, [pc, #276]	; (800a218 <GPS_Parse+0x124>)
 800a104:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 800a108:	b2db      	uxtb	r3, r3
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d101      	bne.n	800a112 <GPS_Parse+0x1e>
 800a10e:	2300      	movs	r3, #0
 800a110:	e07f      	b.n	800a212 <GPS_Parse+0x11e>
		TAIL_INCREASE;						//tail değerini arttırır
 800a112:	4b41      	ldr	r3, [pc, #260]	; (800a218 <GPS_Parse+0x124>)
 800a114:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a118:	b2db      	uxtb	r3, r3
 800a11a:	3301      	adds	r3, #1
 800a11c:	461a      	mov	r2, r3
 800a11e:	4b3f      	ldr	r3, [pc, #252]	; (800a21c <GPS_Parse+0x128>)
 800a120:	fba3 1302 	umull	r1, r3, r3, r2
 800a124:	091b      	lsrs	r3, r3, #4
 800a126:	21fa      	movs	r1, #250	; 0xfa
 800a128:	fb01 f303 	mul.w	r3, r1, r3
 800a12c:	1ad3      	subs	r3, r2, r3
 800a12e:	b2da      	uxtb	r2, r3
 800a130:	4b39      	ldr	r3, [pc, #228]	; (800a218 <GPS_Parse+0x124>)
 800a132:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
	while(TAIL_READ != '$')					//tail değerini $ olana kadar arttırır
 800a136:	4b38      	ldr	r3, [pc, #224]	; (800a218 <GPS_Parse+0x124>)
 800a138:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a13c:	b2db      	uxtb	r3, r3
 800a13e:	4a37      	ldr	r2, [pc, #220]	; (800a21c <GPS_Parse+0x128>)
 800a140:	fba2 1203 	umull	r1, r2, r2, r3
 800a144:	0912      	lsrs	r2, r2, #4
 800a146:	21fa      	movs	r1, #250	; 0xfa
 800a148:	fb01 f202 	mul.w	r2, r1, r2
 800a14c:	1a9b      	subs	r3, r3, r2
 800a14e:	b2db      	uxtb	r3, r3
 800a150:	461a      	mov	r2, r3
 800a152:	4b31      	ldr	r3, [pc, #196]	; (800a218 <GPS_Parse+0x124>)
 800a154:	5c9b      	ldrb	r3, [r3, r2]
 800a156:	2b24      	cmp	r3, #36	; 0x24
 800a158:	d1cf      	bne.n	800a0fa <GPS_Parse+0x6>
	}

	TAIL_INCREASE;							//$ ifadesinden sonraki kısma geçer
 800a15a:	4b2f      	ldr	r3, [pc, #188]	; (800a218 <GPS_Parse+0x124>)
 800a15c:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a160:	b2db      	uxtb	r3, r3
 800a162:	3301      	adds	r3, #1
 800a164:	461a      	mov	r2, r3
 800a166:	4b2d      	ldr	r3, [pc, #180]	; (800a21c <GPS_Parse+0x128>)
 800a168:	fba3 1302 	umull	r1, r3, r3, r2
 800a16c:	091b      	lsrs	r3, r3, #4
 800a16e:	21fa      	movs	r1, #250	; 0xfa
 800a170:	fb01 f303 	mul.w	r3, r1, r3
 800a174:	1ad3      	subs	r3, r2, r3
 800a176:	b2da      	uxtb	r2, r3
 800a178:	4b27      	ldr	r3, [pc, #156]	; (800a218 <GPS_Parse+0x124>)
 800a17a:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa

	if(strncmp((char*)&ringBuff.rxGps[ringBuff.tail], GPGGA_STR, 5) == 0)
 800a17e:	4b26      	ldr	r3, [pc, #152]	; (800a218 <GPS_Parse+0x124>)
 800a180:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a184:	b2db      	uxtb	r3, r3
 800a186:	461a      	mov	r2, r3
 800a188:	4b23      	ldr	r3, [pc, #140]	; (800a218 <GPS_Parse+0x124>)
 800a18a:	4413      	add	r3, r2
 800a18c:	2205      	movs	r2, #5
 800a18e:	4924      	ldr	r1, [pc, #144]	; (800a220 <GPS_Parse+0x12c>)
 800a190:	4618      	mov	r0, r3
 800a192:	f003 fac3 	bl	800d71c <strncmp>
 800a196:	4603      	mov	r3, r0
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d103      	bne.n	800a1a4 <GPS_Parse+0xb0>
	{
		return GPS_GPGGA_Parse();
 800a19c:	f000 fd5c 	bl	800ac58 <GPS_GPGGA_Parse>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	e036      	b.n	800a212 <GPS_Parse+0x11e>
	}
	else if(strncmp((char*)&ringBuff.rxGps[ringBuff.tail], GPRMC_STR, 5) == 0)
 800a1a4:	4b1c      	ldr	r3, [pc, #112]	; (800a218 <GPS_Parse+0x124>)
 800a1a6:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a1aa:	b2db      	uxtb	r3, r3
 800a1ac:	461a      	mov	r2, r3
 800a1ae:	4b1a      	ldr	r3, [pc, #104]	; (800a218 <GPS_Parse+0x124>)
 800a1b0:	4413      	add	r3, r2
 800a1b2:	2205      	movs	r2, #5
 800a1b4:	491b      	ldr	r1, [pc, #108]	; (800a224 <GPS_Parse+0x130>)
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f003 fab0 	bl	800d71c <strncmp>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d10b      	bne.n	800a1da <GPS_Parse+0xe6>
	{
		return (_gps->gpsState == POSITION_FIXED)? GPS_GPRMC_Parse() : NO_CONNECTION;
 800a1c2:	4b19      	ldr	r3, [pc, #100]	; (800a228 <GPS_Parse+0x134>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a1ca:	2b02      	cmp	r3, #2
 800a1cc:	d103      	bne.n	800a1d6 <GPS_Parse+0xe2>
 800a1ce:	f000 f82f 	bl	800a230 <GPS_GPRMC_Parse>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	e01d      	b.n	800a212 <GPS_Parse+0x11e>
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	e01b      	b.n	800a212 <GPS_Parse+0x11e>
	}
	else if(strncmp((char*)&ringBuff.rxGps[ringBuff.tail], GPVTG_STR, 5) == 0)
 800a1da:	4b0f      	ldr	r3, [pc, #60]	; (800a218 <GPS_Parse+0x124>)
 800a1dc:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a1e0:	b2db      	uxtb	r3, r3
 800a1e2:	461a      	mov	r2, r3
 800a1e4:	4b0c      	ldr	r3, [pc, #48]	; (800a218 <GPS_Parse+0x124>)
 800a1e6:	4413      	add	r3, r2
 800a1e8:	2205      	movs	r2, #5
 800a1ea:	4910      	ldr	r1, [pc, #64]	; (800a22c <GPS_Parse+0x138>)
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f003 fa95 	bl	800d71c <strncmp>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d10b      	bne.n	800a210 <GPS_Parse+0x11c>
	{
		return (_gps->gpsState == POSITION_FIXED)? GPS_GPVTG_Parse() : NO_CONNECTION;
 800a1f8:	4b0b      	ldr	r3, [pc, #44]	; (800a228 <GPS_Parse+0x134>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a200:	2b02      	cmp	r3, #2
 800a202:	d103      	bne.n	800a20c <GPS_Parse+0x118>
 800a204:	f000 ff28 	bl	800b058 <GPS_GPVTG_Parse>
 800a208:	4603      	mov	r3, r0
 800a20a:	e002      	b.n	800a212 <GPS_Parse+0x11e>
 800a20c:	2300      	movs	r3, #0
 800a20e:	e000      	b.n	800a212 <GPS_Parse+0x11e>
	}
	return NO_CONNECTION;
 800a210:	2300      	movs	r3, #0
}
 800a212:	4618      	mov	r0, r3
 800a214:	bd80      	pop	{r7, pc}
 800a216:	bf00      	nop
 800a218:	20004e2c 	.word	0x20004e2c
 800a21c:	10624dd3 	.word	0x10624dd3
 800a220:	0800f460 	.word	0x0800f460
 800a224:	0800f468 	.word	0x0800f468
 800a228:	20004f2c 	.word	0x20004f2c
 800a22c:	0800f470 	.word	0x0800f470

0800a230 <GPS_GPRMC_Parse>:
/*
 * GPRMC verilerini çözer ve gps değerine atar
 * -tarih, saat, enlem, boylam-
 */
GPS_State GPS_GPRMC_Parse()
{
 800a230:	b5b0      	push	{r4, r5, r7, lr}
 800a232:	af00      	add	r7, sp, #0
	if(!GPS_CheckSumControl(&ringBuff.rxGps[ringBuff.tail]))
 800a234:	4b07      	ldr	r3, [pc, #28]	; (800a254 <GPS_GPRMC_Parse+0x24>)
 800a236:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a23a:	b2db      	uxtb	r3, r3
 800a23c:	461a      	mov	r2, r3
 800a23e:	4b05      	ldr	r3, [pc, #20]	; (800a254 <GPS_GPRMC_Parse+0x24>)
 800a240:	4413      	add	r3, r2
 800a242:	4618      	mov	r0, r3
 800a244:	f001 f8d8 	bl	800b3f8 <GPS_CheckSumControl>
 800a248:	4603      	mov	r3, r0
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d104      	bne.n	800a258 <GPS_GPRMC_Parse+0x28>
	{
		return WRONG_DATA;
 800a24e:	2301      	movs	r3, #1
 800a250:	f000 bcfa 	b.w	800ac48 <GPS_GPRMC_Parse+0xa18>
 800a254:	20004e2c 	.word	0x20004e2c
	}

	if(ringBuff.rxGps[(ringBuff.tail + 16) % BUFF_SIZE] == 'A' && GPS_CheckSumControl(&ringBuff.rxGps[ringBuff.tail])) // okuma işlemi doğru
 800a258:	4bb8      	ldr	r3, [pc, #736]	; (800a53c <GPS_GPRMC_Parse+0x30c>)
 800a25a:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a25e:	b2db      	uxtb	r3, r3
 800a260:	3310      	adds	r3, #16
 800a262:	461a      	mov	r2, r3
 800a264:	4bb6      	ldr	r3, [pc, #728]	; (800a540 <GPS_GPRMC_Parse+0x310>)
 800a266:	fba3 1302 	umull	r1, r3, r3, r2
 800a26a:	091b      	lsrs	r3, r3, #4
 800a26c:	21fa      	movs	r1, #250	; 0xfa
 800a26e:	fb01 f303 	mul.w	r3, r1, r3
 800a272:	1ad3      	subs	r3, r2, r3
 800a274:	4ab1      	ldr	r2, [pc, #708]	; (800a53c <GPS_GPRMC_Parse+0x30c>)
 800a276:	5cd3      	ldrb	r3, [r2, r3]
 800a278:	2b41      	cmp	r3, #65	; 0x41
 800a27a:	f040 84e4 	bne.w	800ac46 <GPS_GPRMC_Parse+0xa16>
 800a27e:	4baf      	ldr	r3, [pc, #700]	; (800a53c <GPS_GPRMC_Parse+0x30c>)
 800a280:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a284:	b2db      	uxtb	r3, r3
 800a286:	461a      	mov	r2, r3
 800a288:	4bac      	ldr	r3, [pc, #688]	; (800a53c <GPS_GPRMC_Parse+0x30c>)
 800a28a:	4413      	add	r3, r2
 800a28c:	4618      	mov	r0, r3
 800a28e:	f001 f8b3 	bl	800b3f8 <GPS_CheckSumControl>
 800a292:	4603      	mov	r3, r0
 800a294:	2b00      	cmp	r3, #0
 800a296:	f000 84d6 	beq.w	800ac46 <GPS_GPRMC_Parse+0xa16>
	{
		TAIL_INCREASE_TO_COMMA;
 800a29a:	4ba8      	ldr	r3, [pc, #672]	; (800a53c <GPS_GPRMC_Parse+0x30c>)
 800a29c:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a2a0:	b2db      	uxtb	r3, r3
 800a2a2:	1c5a      	adds	r2, r3, #1
 800a2a4:	b2d1      	uxtb	r1, r2
 800a2a6:	4aa5      	ldr	r2, [pc, #660]	; (800a53c <GPS_GPRMC_Parse+0x30c>)
 800a2a8:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a2ac:	4aa4      	ldr	r2, [pc, #656]	; (800a540 <GPS_GPRMC_Parse+0x310>)
 800a2ae:	fba2 1203 	umull	r1, r2, r2, r3
 800a2b2:	0912      	lsrs	r2, r2, #4
 800a2b4:	21fa      	movs	r1, #250	; 0xfa
 800a2b6:	fb01 f202 	mul.w	r2, r1, r2
 800a2ba:	1a9b      	subs	r3, r3, r2
 800a2bc:	b2db      	uxtb	r3, r3
 800a2be:	461a      	mov	r2, r3
 800a2c0:	4b9e      	ldr	r3, [pc, #632]	; (800a53c <GPS_GPRMC_Parse+0x30c>)
 800a2c2:	5c9b      	ldrb	r3, [r3, r2]
 800a2c4:	2b2c      	cmp	r3, #44	; 0x2c
 800a2c6:	d1e8      	bne.n	800a29a <GPS_GPRMC_Parse+0x6a>
		//↑ ifadesi tail değerini attırır çünkü "GPRMC," ifadesi 6 karakterden oluşuyor
		_gps->hour = (TAIL_READ_P - ASCII_NUMBER) * 10 + (TAIL_READ_P - ASCII_NUMBER) + TURKIYE_UTC;
 800a2c8:	4b9c      	ldr	r3, [pc, #624]	; (800a53c <GPS_GPRMC_Parse+0x30c>)
 800a2ca:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a2ce:	b2db      	uxtb	r3, r3
 800a2d0:	1c5a      	adds	r2, r3, #1
 800a2d2:	b2d1      	uxtb	r1, r2
 800a2d4:	4a99      	ldr	r2, [pc, #612]	; (800a53c <GPS_GPRMC_Parse+0x30c>)
 800a2d6:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a2da:	4a99      	ldr	r2, [pc, #612]	; (800a540 <GPS_GPRMC_Parse+0x310>)
 800a2dc:	fba2 1203 	umull	r1, r2, r2, r3
 800a2e0:	0912      	lsrs	r2, r2, #4
 800a2e2:	21fa      	movs	r1, #250	; 0xfa
 800a2e4:	fb01 f202 	mul.w	r2, r1, r2
 800a2e8:	1a9b      	subs	r3, r3, r2
 800a2ea:	b2db      	uxtb	r3, r3
 800a2ec:	461a      	mov	r2, r3
 800a2ee:	4b93      	ldr	r3, [pc, #588]	; (800a53c <GPS_GPRMC_Parse+0x30c>)
 800a2f0:	5c9b      	ldrb	r3, [r3, r2]
 800a2f2:	461a      	mov	r2, r3
 800a2f4:	0092      	lsls	r2, r2, #2
 800a2f6:	4413      	add	r3, r2
 800a2f8:	005b      	lsls	r3, r3, #1
 800a2fa:	b2da      	uxtb	r2, r3
 800a2fc:	4b8f      	ldr	r3, [pc, #572]	; (800a53c <GPS_GPRMC_Parse+0x30c>)
 800a2fe:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a302:	b2db      	uxtb	r3, r3
 800a304:	1c59      	adds	r1, r3, #1
 800a306:	b2c8      	uxtb	r0, r1
 800a308:	498c      	ldr	r1, [pc, #560]	; (800a53c <GPS_GPRMC_Parse+0x30c>)
 800a30a:	f881 00fa 	strb.w	r0, [r1, #250]	; 0xfa
 800a30e:	498c      	ldr	r1, [pc, #560]	; (800a540 <GPS_GPRMC_Parse+0x310>)
 800a310:	fba1 0103 	umull	r0, r1, r1, r3
 800a314:	0909      	lsrs	r1, r1, #4
 800a316:	20fa      	movs	r0, #250	; 0xfa
 800a318:	fb00 f101 	mul.w	r1, r0, r1
 800a31c:	1a5b      	subs	r3, r3, r1
 800a31e:	b2db      	uxtb	r3, r3
 800a320:	4619      	mov	r1, r3
 800a322:	4b86      	ldr	r3, [pc, #536]	; (800a53c <GPS_GPRMC_Parse+0x30c>)
 800a324:	5c5b      	ldrb	r3, [r3, r1]
 800a326:	4413      	add	r3, r2
 800a328:	b2da      	uxtb	r2, r3
 800a32a:	4b86      	ldr	r3, [pc, #536]	; (800a544 <GPS_GPRMC_Parse+0x314>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	3a0d      	subs	r2, #13
 800a330:	b2d2      	uxtb	r2, r2
 800a332:	701a      	strb	r2, [r3, #0]
		_gps->minute = (TAIL_READ_P - ASCII_NUMBER) * 10 + (TAIL_READ_P - ASCII_NUMBER);
 800a334:	4b81      	ldr	r3, [pc, #516]	; (800a53c <GPS_GPRMC_Parse+0x30c>)
 800a336:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a33a:	b2db      	uxtb	r3, r3
 800a33c:	1c5a      	adds	r2, r3, #1
 800a33e:	b2d1      	uxtb	r1, r2
 800a340:	4a7e      	ldr	r2, [pc, #504]	; (800a53c <GPS_GPRMC_Parse+0x30c>)
 800a342:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a346:	4a7e      	ldr	r2, [pc, #504]	; (800a540 <GPS_GPRMC_Parse+0x310>)
 800a348:	fba2 1203 	umull	r1, r2, r2, r3
 800a34c:	0912      	lsrs	r2, r2, #4
 800a34e:	21fa      	movs	r1, #250	; 0xfa
 800a350:	fb01 f202 	mul.w	r2, r1, r2
 800a354:	1a9b      	subs	r3, r3, r2
 800a356:	b2db      	uxtb	r3, r3
 800a358:	461a      	mov	r2, r3
 800a35a:	4b78      	ldr	r3, [pc, #480]	; (800a53c <GPS_GPRMC_Parse+0x30c>)
 800a35c:	5c9b      	ldrb	r3, [r3, r2]
 800a35e:	461a      	mov	r2, r3
 800a360:	0092      	lsls	r2, r2, #2
 800a362:	4413      	add	r3, r2
 800a364:	005b      	lsls	r3, r3, #1
 800a366:	b2da      	uxtb	r2, r3
 800a368:	4b74      	ldr	r3, [pc, #464]	; (800a53c <GPS_GPRMC_Parse+0x30c>)
 800a36a:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a36e:	b2db      	uxtb	r3, r3
 800a370:	1c59      	adds	r1, r3, #1
 800a372:	b2c8      	uxtb	r0, r1
 800a374:	4971      	ldr	r1, [pc, #452]	; (800a53c <GPS_GPRMC_Parse+0x30c>)
 800a376:	f881 00fa 	strb.w	r0, [r1, #250]	; 0xfa
 800a37a:	4971      	ldr	r1, [pc, #452]	; (800a540 <GPS_GPRMC_Parse+0x310>)
 800a37c:	fba1 0103 	umull	r0, r1, r1, r3
 800a380:	0909      	lsrs	r1, r1, #4
 800a382:	20fa      	movs	r0, #250	; 0xfa
 800a384:	fb00 f101 	mul.w	r1, r0, r1
 800a388:	1a5b      	subs	r3, r3, r1
 800a38a:	b2db      	uxtb	r3, r3
 800a38c:	4619      	mov	r1, r3
 800a38e:	4b6b      	ldr	r3, [pc, #428]	; (800a53c <GPS_GPRMC_Parse+0x30c>)
 800a390:	5c5b      	ldrb	r3, [r3, r1]
 800a392:	4413      	add	r3, r2
 800a394:	b2da      	uxtb	r2, r3
 800a396:	4b6b      	ldr	r3, [pc, #428]	; (800a544 <GPS_GPRMC_Parse+0x314>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	3a10      	subs	r2, #16
 800a39c:	b2d2      	uxtb	r2, r2
 800a39e:	705a      	strb	r2, [r3, #1]
		_gps->second = (TAIL_READ_P - ASCII_NUMBER) * 10 + (TAIL_READ_P - ASCII_NUMBER);
 800a3a0:	4b66      	ldr	r3, [pc, #408]	; (800a53c <GPS_GPRMC_Parse+0x30c>)
 800a3a2:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a3a6:	b2db      	uxtb	r3, r3
 800a3a8:	1c5a      	adds	r2, r3, #1
 800a3aa:	b2d1      	uxtb	r1, r2
 800a3ac:	4a63      	ldr	r2, [pc, #396]	; (800a53c <GPS_GPRMC_Parse+0x30c>)
 800a3ae:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a3b2:	4a63      	ldr	r2, [pc, #396]	; (800a540 <GPS_GPRMC_Parse+0x310>)
 800a3b4:	fba2 1203 	umull	r1, r2, r2, r3
 800a3b8:	0912      	lsrs	r2, r2, #4
 800a3ba:	21fa      	movs	r1, #250	; 0xfa
 800a3bc:	fb01 f202 	mul.w	r2, r1, r2
 800a3c0:	1a9b      	subs	r3, r3, r2
 800a3c2:	b2db      	uxtb	r3, r3
 800a3c4:	461a      	mov	r2, r3
 800a3c6:	4b5d      	ldr	r3, [pc, #372]	; (800a53c <GPS_GPRMC_Parse+0x30c>)
 800a3c8:	5c9b      	ldrb	r3, [r3, r2]
 800a3ca:	461a      	mov	r2, r3
 800a3cc:	0092      	lsls	r2, r2, #2
 800a3ce:	4413      	add	r3, r2
 800a3d0:	005b      	lsls	r3, r3, #1
 800a3d2:	b2da      	uxtb	r2, r3
 800a3d4:	4b59      	ldr	r3, [pc, #356]	; (800a53c <GPS_GPRMC_Parse+0x30c>)
 800a3d6:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a3da:	b2db      	uxtb	r3, r3
 800a3dc:	1c59      	adds	r1, r3, #1
 800a3de:	b2c8      	uxtb	r0, r1
 800a3e0:	4956      	ldr	r1, [pc, #344]	; (800a53c <GPS_GPRMC_Parse+0x30c>)
 800a3e2:	f881 00fa 	strb.w	r0, [r1, #250]	; 0xfa
 800a3e6:	4956      	ldr	r1, [pc, #344]	; (800a540 <GPS_GPRMC_Parse+0x310>)
 800a3e8:	fba1 0103 	umull	r0, r1, r1, r3
 800a3ec:	0909      	lsrs	r1, r1, #4
 800a3ee:	20fa      	movs	r0, #250	; 0xfa
 800a3f0:	fb00 f101 	mul.w	r1, r0, r1
 800a3f4:	1a5b      	subs	r3, r3, r1
 800a3f6:	b2db      	uxtb	r3, r3
 800a3f8:	4619      	mov	r1, r3
 800a3fa:	4b50      	ldr	r3, [pc, #320]	; (800a53c <GPS_GPRMC_Parse+0x30c>)
 800a3fc:	5c5b      	ldrb	r3, [r3, r1]
 800a3fe:	4413      	add	r3, r2
 800a400:	b2da      	uxtb	r2, r3
 800a402:	4b50      	ldr	r3, [pc, #320]	; (800a544 <GPS_GPRMC_Parse+0x314>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	3a10      	subs	r2, #16
 800a408:	b2d2      	uxtb	r2, r2
 800a40a:	709a      	strb	r2, [r3, #2]

		TAIL_INCREASE_TO_COMMA;
 800a40c:	4b4b      	ldr	r3, [pc, #300]	; (800a53c <GPS_GPRMC_Parse+0x30c>)
 800a40e:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a412:	b2db      	uxtb	r3, r3
 800a414:	1c5a      	adds	r2, r3, #1
 800a416:	b2d1      	uxtb	r1, r2
 800a418:	4a48      	ldr	r2, [pc, #288]	; (800a53c <GPS_GPRMC_Parse+0x30c>)
 800a41a:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a41e:	4a48      	ldr	r2, [pc, #288]	; (800a540 <GPS_GPRMC_Parse+0x310>)
 800a420:	fba2 1203 	umull	r1, r2, r2, r3
 800a424:	0912      	lsrs	r2, r2, #4
 800a426:	21fa      	movs	r1, #250	; 0xfa
 800a428:	fb01 f202 	mul.w	r2, r1, r2
 800a42c:	1a9b      	subs	r3, r3, r2
 800a42e:	b2db      	uxtb	r3, r3
 800a430:	461a      	mov	r2, r3
 800a432:	4b42      	ldr	r3, [pc, #264]	; (800a53c <GPS_GPRMC_Parse+0x30c>)
 800a434:	5c9b      	ldrb	r3, [r3, r2]
 800a436:	2b2c      	cmp	r3, #44	; 0x2c
 800a438:	d1e8      	bne.n	800a40c <GPS_GPRMC_Parse+0x1dc>
		TAIL_INCREASE_TO_COMMA;
 800a43a:	4b40      	ldr	r3, [pc, #256]	; (800a53c <GPS_GPRMC_Parse+0x30c>)
 800a43c:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a440:	b2db      	uxtb	r3, r3
 800a442:	1c5a      	adds	r2, r3, #1
 800a444:	b2d1      	uxtb	r1, r2
 800a446:	4a3d      	ldr	r2, [pc, #244]	; (800a53c <GPS_GPRMC_Parse+0x30c>)
 800a448:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a44c:	4a3c      	ldr	r2, [pc, #240]	; (800a540 <GPS_GPRMC_Parse+0x310>)
 800a44e:	fba2 1203 	umull	r1, r2, r2, r3
 800a452:	0912      	lsrs	r2, r2, #4
 800a454:	21fa      	movs	r1, #250	; 0xfa
 800a456:	fb01 f202 	mul.w	r2, r1, r2
 800a45a:	1a9b      	subs	r3, r3, r2
 800a45c:	b2db      	uxtb	r3, r3
 800a45e:	461a      	mov	r2, r3
 800a460:	4b36      	ldr	r3, [pc, #216]	; (800a53c <GPS_GPRMC_Parse+0x30c>)
 800a462:	5c9b      	ldrb	r3, [r3, r2]
 800a464:	2b2c      	cmp	r3, #44	; 0x2c
 800a466:	d1e8      	bne.n	800a43a <GPS_GPRMC_Parse+0x20a>

		//genlik değerinin alır
		_gps->latitudeDegree = (TAIL_READ_P - ASCII_NUMBER) * 10 + (TAIL_READ_P - ASCII_NUMBER);
 800a468:	4b34      	ldr	r3, [pc, #208]	; (800a53c <GPS_GPRMC_Parse+0x30c>)
 800a46a:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a46e:	b2db      	uxtb	r3, r3
 800a470:	1c5a      	adds	r2, r3, #1
 800a472:	b2d1      	uxtb	r1, r2
 800a474:	4a31      	ldr	r2, [pc, #196]	; (800a53c <GPS_GPRMC_Parse+0x30c>)
 800a476:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a47a:	4a31      	ldr	r2, [pc, #196]	; (800a540 <GPS_GPRMC_Parse+0x310>)
 800a47c:	fba2 1203 	umull	r1, r2, r2, r3
 800a480:	0912      	lsrs	r2, r2, #4
 800a482:	21fa      	movs	r1, #250	; 0xfa
 800a484:	fb01 f202 	mul.w	r2, r1, r2
 800a488:	1a9b      	subs	r3, r3, r2
 800a48a:	b2db      	uxtb	r3, r3
 800a48c:	461a      	mov	r2, r3
 800a48e:	4b2b      	ldr	r3, [pc, #172]	; (800a53c <GPS_GPRMC_Parse+0x30c>)
 800a490:	5c9b      	ldrb	r3, [r3, r2]
 800a492:	461a      	mov	r2, r3
 800a494:	0092      	lsls	r2, r2, #2
 800a496:	4413      	add	r3, r2
 800a498:	005b      	lsls	r3, r3, #1
 800a49a:	b2da      	uxtb	r2, r3
 800a49c:	4b27      	ldr	r3, [pc, #156]	; (800a53c <GPS_GPRMC_Parse+0x30c>)
 800a49e:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a4a2:	b2db      	uxtb	r3, r3
 800a4a4:	1c59      	adds	r1, r3, #1
 800a4a6:	b2c8      	uxtb	r0, r1
 800a4a8:	4924      	ldr	r1, [pc, #144]	; (800a53c <GPS_GPRMC_Parse+0x30c>)
 800a4aa:	f881 00fa 	strb.w	r0, [r1, #250]	; 0xfa
 800a4ae:	4924      	ldr	r1, [pc, #144]	; (800a540 <GPS_GPRMC_Parse+0x310>)
 800a4b0:	fba1 0103 	umull	r0, r1, r1, r3
 800a4b4:	0909      	lsrs	r1, r1, #4
 800a4b6:	20fa      	movs	r0, #250	; 0xfa
 800a4b8:	fb00 f101 	mul.w	r1, r0, r1
 800a4bc:	1a5b      	subs	r3, r3, r1
 800a4be:	b2db      	uxtb	r3, r3
 800a4c0:	4619      	mov	r1, r3
 800a4c2:	4b1e      	ldr	r3, [pc, #120]	; (800a53c <GPS_GPRMC_Parse+0x30c>)
 800a4c4:	5c5b      	ldrb	r3, [r3, r1]
 800a4c6:	4413      	add	r3, r2
 800a4c8:	b2da      	uxtb	r2, r3
 800a4ca:	4b1e      	ldr	r3, [pc, #120]	; (800a544 <GPS_GPRMC_Parse+0x314>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	3a10      	subs	r2, #16
 800a4d0:	b2d2      	uxtb	r2, r2
 800a4d2:	70da      	strb	r2, [r3, #3]
		_gps->latitudeMinute = (TAIL_READ_P - ASCII_NUMBER) * 10.0 + (TAIL_READ_P - ASCII_NUMBER);
 800a4d4:	4b19      	ldr	r3, [pc, #100]	; (800a53c <GPS_GPRMC_Parse+0x30c>)
 800a4d6:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a4da:	b2db      	uxtb	r3, r3
 800a4dc:	1c5a      	adds	r2, r3, #1
 800a4de:	b2d1      	uxtb	r1, r2
 800a4e0:	4a16      	ldr	r2, [pc, #88]	; (800a53c <GPS_GPRMC_Parse+0x30c>)
 800a4e2:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a4e6:	4a16      	ldr	r2, [pc, #88]	; (800a540 <GPS_GPRMC_Parse+0x310>)
 800a4e8:	fba2 1203 	umull	r1, r2, r2, r3
 800a4ec:	0912      	lsrs	r2, r2, #4
 800a4ee:	21fa      	movs	r1, #250	; 0xfa
 800a4f0:	fb01 f202 	mul.w	r2, r1, r2
 800a4f4:	1a9b      	subs	r3, r3, r2
 800a4f6:	b2db      	uxtb	r3, r3
 800a4f8:	461a      	mov	r2, r3
 800a4fa:	4b10      	ldr	r3, [pc, #64]	; (800a53c <GPS_GPRMC_Parse+0x30c>)
 800a4fc:	5c9b      	ldrb	r3, [r3, r2]
 800a4fe:	3b30      	subs	r3, #48	; 0x30
 800a500:	4618      	mov	r0, r3
 800a502:	f7f6 f827 	bl	8000554 <__aeabi_i2d>
 800a506:	f04f 0200 	mov.w	r2, #0
 800a50a:	4b0f      	ldr	r3, [pc, #60]	; (800a548 <GPS_GPRMC_Parse+0x318>)
 800a50c:	f7f6 f88c 	bl	8000628 <__aeabi_dmul>
 800a510:	4602      	mov	r2, r0
 800a512:	460b      	mov	r3, r1
 800a514:	4614      	mov	r4, r2
 800a516:	461d      	mov	r5, r3
 800a518:	4b08      	ldr	r3, [pc, #32]	; (800a53c <GPS_GPRMC_Parse+0x30c>)
 800a51a:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a51e:	b2db      	uxtb	r3, r3
 800a520:	1c5a      	adds	r2, r3, #1
 800a522:	b2d1      	uxtb	r1, r2
 800a524:	4a05      	ldr	r2, [pc, #20]	; (800a53c <GPS_GPRMC_Parse+0x30c>)
 800a526:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a52a:	4a05      	ldr	r2, [pc, #20]	; (800a540 <GPS_GPRMC_Parse+0x310>)
 800a52c:	fba2 1203 	umull	r1, r2, r2, r3
 800a530:	0912      	lsrs	r2, r2, #4
 800a532:	21fa      	movs	r1, #250	; 0xfa
 800a534:	fb01 f202 	mul.w	r2, r1, r2
 800a538:	1a9b      	subs	r3, r3, r2
 800a53a:	e007      	b.n	800a54c <GPS_GPRMC_Parse+0x31c>
 800a53c:	20004e2c 	.word	0x20004e2c
 800a540:	10624dd3 	.word	0x10624dd3
 800a544:	20004f2c 	.word	0x20004f2c
 800a548:	40240000 	.word	0x40240000
 800a54c:	b2db      	uxtb	r3, r3
 800a54e:	461a      	mov	r2, r3
 800a550:	4b70      	ldr	r3, [pc, #448]	; (800a714 <GPS_GPRMC_Parse+0x4e4>)
 800a552:	5c9b      	ldrb	r3, [r3, r2]
 800a554:	3b30      	subs	r3, #48	; 0x30
 800a556:	4618      	mov	r0, r3
 800a558:	f7f5 fffc 	bl	8000554 <__aeabi_i2d>
 800a55c:	4602      	mov	r2, r0
 800a55e:	460b      	mov	r3, r1
 800a560:	4620      	mov	r0, r4
 800a562:	4629      	mov	r1, r5
 800a564:	f7f5 feaa 	bl	80002bc <__adddf3>
 800a568:	4602      	mov	r2, r0
 800a56a:	460b      	mov	r3, r1
 800a56c:	496a      	ldr	r1, [pc, #424]	; (800a718 <GPS_GPRMC_Parse+0x4e8>)
 800a56e:	680c      	ldr	r4, [r1, #0]
 800a570:	4610      	mov	r0, r2
 800a572:	4619      	mov	r1, r3
 800a574:	f7f6 fb08 	bl	8000b88 <__aeabi_d2uiz>
 800a578:	4603      	mov	r3, r0
 800a57a:	b2db      	uxtb	r3, r3
 800a57c:	7123      	strb	r3, [r4, #4]
		TAIL_INCREASE;		// "." geçtik
 800a57e:	4b65      	ldr	r3, [pc, #404]	; (800a714 <GPS_GPRMC_Parse+0x4e4>)
 800a580:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a584:	b2db      	uxtb	r3, r3
 800a586:	3301      	adds	r3, #1
 800a588:	461a      	mov	r2, r3
 800a58a:	4b64      	ldr	r3, [pc, #400]	; (800a71c <GPS_GPRMC_Parse+0x4ec>)
 800a58c:	fba3 1302 	umull	r1, r3, r3, r2
 800a590:	091b      	lsrs	r3, r3, #4
 800a592:	21fa      	movs	r1, #250	; 0xfa
 800a594:	fb01 f303 	mul.w	r3, r1, r3
 800a598:	1ad3      	subs	r3, r2, r3
 800a59a:	b2da      	uxtb	r2, r3
 800a59c:	4b5d      	ldr	r3, [pc, #372]	; (800a714 <GPS_GPRMC_Parse+0x4e4>)
 800a59e:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
		_gps->latitudeSecond = ((TAIL_READ_P - ASCII_NUMBER) *100.0 + (TAIL_READ_P - ASCII_NUMBER)*10.0 + (TAIL_READ_P - ASCII_NUMBER)*1.0) / 1000 * 60;
 800a5a2:	4b5c      	ldr	r3, [pc, #368]	; (800a714 <GPS_GPRMC_Parse+0x4e4>)
 800a5a4:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a5a8:	b2db      	uxtb	r3, r3
 800a5aa:	1c5a      	adds	r2, r3, #1
 800a5ac:	b2d1      	uxtb	r1, r2
 800a5ae:	4a59      	ldr	r2, [pc, #356]	; (800a714 <GPS_GPRMC_Parse+0x4e4>)
 800a5b0:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a5b4:	4a59      	ldr	r2, [pc, #356]	; (800a71c <GPS_GPRMC_Parse+0x4ec>)
 800a5b6:	fba2 1203 	umull	r1, r2, r2, r3
 800a5ba:	0912      	lsrs	r2, r2, #4
 800a5bc:	21fa      	movs	r1, #250	; 0xfa
 800a5be:	fb01 f202 	mul.w	r2, r1, r2
 800a5c2:	1a9b      	subs	r3, r3, r2
 800a5c4:	b2db      	uxtb	r3, r3
 800a5c6:	461a      	mov	r2, r3
 800a5c8:	4b52      	ldr	r3, [pc, #328]	; (800a714 <GPS_GPRMC_Parse+0x4e4>)
 800a5ca:	5c9b      	ldrb	r3, [r3, r2]
 800a5cc:	3b30      	subs	r3, #48	; 0x30
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f7f5 ffc0 	bl	8000554 <__aeabi_i2d>
 800a5d4:	f04f 0200 	mov.w	r2, #0
 800a5d8:	4b51      	ldr	r3, [pc, #324]	; (800a720 <GPS_GPRMC_Parse+0x4f0>)
 800a5da:	f7f6 f825 	bl	8000628 <__aeabi_dmul>
 800a5de:	4602      	mov	r2, r0
 800a5e0:	460b      	mov	r3, r1
 800a5e2:	4614      	mov	r4, r2
 800a5e4:	461d      	mov	r5, r3
 800a5e6:	4b4b      	ldr	r3, [pc, #300]	; (800a714 <GPS_GPRMC_Parse+0x4e4>)
 800a5e8:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a5ec:	b2db      	uxtb	r3, r3
 800a5ee:	1c5a      	adds	r2, r3, #1
 800a5f0:	b2d1      	uxtb	r1, r2
 800a5f2:	4a48      	ldr	r2, [pc, #288]	; (800a714 <GPS_GPRMC_Parse+0x4e4>)
 800a5f4:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a5f8:	4a48      	ldr	r2, [pc, #288]	; (800a71c <GPS_GPRMC_Parse+0x4ec>)
 800a5fa:	fba2 1203 	umull	r1, r2, r2, r3
 800a5fe:	0912      	lsrs	r2, r2, #4
 800a600:	21fa      	movs	r1, #250	; 0xfa
 800a602:	fb01 f202 	mul.w	r2, r1, r2
 800a606:	1a9b      	subs	r3, r3, r2
 800a608:	b2db      	uxtb	r3, r3
 800a60a:	461a      	mov	r2, r3
 800a60c:	4b41      	ldr	r3, [pc, #260]	; (800a714 <GPS_GPRMC_Parse+0x4e4>)
 800a60e:	5c9b      	ldrb	r3, [r3, r2]
 800a610:	3b30      	subs	r3, #48	; 0x30
 800a612:	4618      	mov	r0, r3
 800a614:	f7f5 ff9e 	bl	8000554 <__aeabi_i2d>
 800a618:	f04f 0200 	mov.w	r2, #0
 800a61c:	4b41      	ldr	r3, [pc, #260]	; (800a724 <GPS_GPRMC_Parse+0x4f4>)
 800a61e:	f7f6 f803 	bl	8000628 <__aeabi_dmul>
 800a622:	4602      	mov	r2, r0
 800a624:	460b      	mov	r3, r1
 800a626:	4620      	mov	r0, r4
 800a628:	4629      	mov	r1, r5
 800a62a:	f7f5 fe47 	bl	80002bc <__adddf3>
 800a62e:	4602      	mov	r2, r0
 800a630:	460b      	mov	r3, r1
 800a632:	4614      	mov	r4, r2
 800a634:	461d      	mov	r5, r3
 800a636:	4b37      	ldr	r3, [pc, #220]	; (800a714 <GPS_GPRMC_Parse+0x4e4>)
 800a638:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a63c:	b2db      	uxtb	r3, r3
 800a63e:	1c5a      	adds	r2, r3, #1
 800a640:	b2d1      	uxtb	r1, r2
 800a642:	4a34      	ldr	r2, [pc, #208]	; (800a714 <GPS_GPRMC_Parse+0x4e4>)
 800a644:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a648:	4a34      	ldr	r2, [pc, #208]	; (800a71c <GPS_GPRMC_Parse+0x4ec>)
 800a64a:	fba2 1203 	umull	r1, r2, r2, r3
 800a64e:	0912      	lsrs	r2, r2, #4
 800a650:	21fa      	movs	r1, #250	; 0xfa
 800a652:	fb01 f202 	mul.w	r2, r1, r2
 800a656:	1a9b      	subs	r3, r3, r2
 800a658:	b2db      	uxtb	r3, r3
 800a65a:	461a      	mov	r2, r3
 800a65c:	4b2d      	ldr	r3, [pc, #180]	; (800a714 <GPS_GPRMC_Parse+0x4e4>)
 800a65e:	5c9b      	ldrb	r3, [r3, r2]
 800a660:	3b30      	subs	r3, #48	; 0x30
 800a662:	4618      	mov	r0, r3
 800a664:	f7f5 ff76 	bl	8000554 <__aeabi_i2d>
 800a668:	4602      	mov	r2, r0
 800a66a:	460b      	mov	r3, r1
 800a66c:	4620      	mov	r0, r4
 800a66e:	4629      	mov	r1, r5
 800a670:	f7f5 fe24 	bl	80002bc <__adddf3>
 800a674:	4602      	mov	r2, r0
 800a676:	460b      	mov	r3, r1
 800a678:	4610      	mov	r0, r2
 800a67a:	4619      	mov	r1, r3
 800a67c:	f04f 0200 	mov.w	r2, #0
 800a680:	4b29      	ldr	r3, [pc, #164]	; (800a728 <GPS_GPRMC_Parse+0x4f8>)
 800a682:	f7f6 f8fb 	bl	800087c <__aeabi_ddiv>
 800a686:	4602      	mov	r2, r0
 800a688:	460b      	mov	r3, r1
 800a68a:	4610      	mov	r0, r2
 800a68c:	4619      	mov	r1, r3
 800a68e:	f04f 0200 	mov.w	r2, #0
 800a692:	4b26      	ldr	r3, [pc, #152]	; (800a72c <GPS_GPRMC_Parse+0x4fc>)
 800a694:	f7f5 ffc8 	bl	8000628 <__aeabi_dmul>
 800a698:	4602      	mov	r2, r0
 800a69a:	460b      	mov	r3, r1
 800a69c:	491e      	ldr	r1, [pc, #120]	; (800a718 <GPS_GPRMC_Parse+0x4e8>)
 800a69e:	680c      	ldr	r4, [r1, #0]
 800a6a0:	4610      	mov	r0, r2
 800a6a2:	4619      	mov	r1, r3
 800a6a4:	f7f6 fa90 	bl	8000bc8 <__aeabi_d2f>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	60a3      	str	r3, [r4, #8]

		TAIL_INCREASE_TO_COMMA;
 800a6ac:	4b19      	ldr	r3, [pc, #100]	; (800a714 <GPS_GPRMC_Parse+0x4e4>)
 800a6ae:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a6b2:	b2db      	uxtb	r3, r3
 800a6b4:	1c5a      	adds	r2, r3, #1
 800a6b6:	b2d1      	uxtb	r1, r2
 800a6b8:	4a16      	ldr	r2, [pc, #88]	; (800a714 <GPS_GPRMC_Parse+0x4e4>)
 800a6ba:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a6be:	4a17      	ldr	r2, [pc, #92]	; (800a71c <GPS_GPRMC_Parse+0x4ec>)
 800a6c0:	fba2 1203 	umull	r1, r2, r2, r3
 800a6c4:	0912      	lsrs	r2, r2, #4
 800a6c6:	21fa      	movs	r1, #250	; 0xfa
 800a6c8:	fb01 f202 	mul.w	r2, r1, r2
 800a6cc:	1a9b      	subs	r3, r3, r2
 800a6ce:	b2db      	uxtb	r3, r3
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	4b10      	ldr	r3, [pc, #64]	; (800a714 <GPS_GPRMC_Parse+0x4e4>)
 800a6d4:	5c9b      	ldrb	r3, [r3, r2]
 800a6d6:	2b2c      	cmp	r3, #44	; 0x2c
 800a6d8:	d1e8      	bne.n	800a6ac <GPS_GPRMC_Parse+0x47c>

		// Pole bilgisini alır
		if(TAIL_READ_P == 'N')	_gps->locationLat = NORTH;
 800a6da:	4b0e      	ldr	r3, [pc, #56]	; (800a714 <GPS_GPRMC_Parse+0x4e4>)
 800a6dc:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a6e0:	b2db      	uxtb	r3, r3
 800a6e2:	1c5a      	adds	r2, r3, #1
 800a6e4:	b2d1      	uxtb	r1, r2
 800a6e6:	4a0b      	ldr	r2, [pc, #44]	; (800a714 <GPS_GPRMC_Parse+0x4e4>)
 800a6e8:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a6ec:	4a0b      	ldr	r2, [pc, #44]	; (800a71c <GPS_GPRMC_Parse+0x4ec>)
 800a6ee:	fba2 1203 	umull	r1, r2, r2, r3
 800a6f2:	0912      	lsrs	r2, r2, #4
 800a6f4:	21fa      	movs	r1, #250	; 0xfa
 800a6f6:	fb01 f202 	mul.w	r2, r1, r2
 800a6fa:	1a9b      	subs	r3, r3, r2
 800a6fc:	b2db      	uxtb	r3, r3
 800a6fe:	461a      	mov	r2, r3
 800a700:	4b04      	ldr	r3, [pc, #16]	; (800a714 <GPS_GPRMC_Parse+0x4e4>)
 800a702:	5c9b      	ldrb	r3, [r3, r2]
 800a704:	2b4e      	cmp	r3, #78	; 0x4e
 800a706:	d113      	bne.n	800a730 <GPS_GPRMC_Parse+0x500>
 800a708:	4b03      	ldr	r3, [pc, #12]	; (800a718 <GPS_GPRMC_Parse+0x4e8>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	2200      	movs	r2, #0
 800a70e:	731a      	strb	r2, [r3, #12]
 800a710:	e012      	b.n	800a738 <GPS_GPRMC_Parse+0x508>
 800a712:	bf00      	nop
 800a714:	20004e2c 	.word	0x20004e2c
 800a718:	20004f2c 	.word	0x20004f2c
 800a71c:	10624dd3 	.word	0x10624dd3
 800a720:	40590000 	.word	0x40590000
 800a724:	40240000 	.word	0x40240000
 800a728:	408f4000 	.word	0x408f4000
 800a72c:	404e0000 	.word	0x404e0000
		else 					_gps->locationLat = SOUTH;
 800a730:	4bc1      	ldr	r3, [pc, #772]	; (800aa38 <GPS_GPRMC_Parse+0x808>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	2201      	movs	r2, #1
 800a736:	731a      	strb	r2, [r3, #12]

		TAIL_INCREASE_TO_COMMA;		// "," geçtik
 800a738:	4bc0      	ldr	r3, [pc, #768]	; (800aa3c <GPS_GPRMC_Parse+0x80c>)
 800a73a:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a73e:	b2db      	uxtb	r3, r3
 800a740:	1c5a      	adds	r2, r3, #1
 800a742:	b2d1      	uxtb	r1, r2
 800a744:	4abd      	ldr	r2, [pc, #756]	; (800aa3c <GPS_GPRMC_Parse+0x80c>)
 800a746:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a74a:	4abd      	ldr	r2, [pc, #756]	; (800aa40 <GPS_GPRMC_Parse+0x810>)
 800a74c:	fba2 1203 	umull	r1, r2, r2, r3
 800a750:	0912      	lsrs	r2, r2, #4
 800a752:	21fa      	movs	r1, #250	; 0xfa
 800a754:	fb01 f202 	mul.w	r2, r1, r2
 800a758:	1a9b      	subs	r3, r3, r2
 800a75a:	b2db      	uxtb	r3, r3
 800a75c:	461a      	mov	r2, r3
 800a75e:	4bb7      	ldr	r3, [pc, #732]	; (800aa3c <GPS_GPRMC_Parse+0x80c>)
 800a760:	5c9b      	ldrb	r3, [r3, r2]
 800a762:	2b2c      	cmp	r3, #44	; 0x2c
 800a764:	d1e8      	bne.n	800a738 <GPS_GPRMC_Parse+0x508>

		// Boylam bilgisini alır
		_gps->longitudeDegree = (TAIL_READ_P - ASCII_NUMBER) * 100 + (TAIL_READ_P - ASCII_NUMBER) * 10 + (TAIL_READ_P - ASCII_NUMBER);
 800a766:	4bb5      	ldr	r3, [pc, #724]	; (800aa3c <GPS_GPRMC_Parse+0x80c>)
 800a768:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a76c:	b2db      	uxtb	r3, r3
 800a76e:	1c5a      	adds	r2, r3, #1
 800a770:	b2d1      	uxtb	r1, r2
 800a772:	4ab2      	ldr	r2, [pc, #712]	; (800aa3c <GPS_GPRMC_Parse+0x80c>)
 800a774:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a778:	4ab1      	ldr	r2, [pc, #708]	; (800aa40 <GPS_GPRMC_Parse+0x810>)
 800a77a:	fba2 1203 	umull	r1, r2, r2, r3
 800a77e:	0912      	lsrs	r2, r2, #4
 800a780:	21fa      	movs	r1, #250	; 0xfa
 800a782:	fb01 f202 	mul.w	r2, r1, r2
 800a786:	1a9b      	subs	r3, r3, r2
 800a788:	b2db      	uxtb	r3, r3
 800a78a:	461a      	mov	r2, r3
 800a78c:	4bab      	ldr	r3, [pc, #684]	; (800aa3c <GPS_GPRMC_Parse+0x80c>)
 800a78e:	5c9b      	ldrb	r3, [r3, r2]
 800a790:	461a      	mov	r2, r3
 800a792:	0092      	lsls	r2, r2, #2
 800a794:	4413      	add	r3, r2
 800a796:	461a      	mov	r2, r3
 800a798:	0091      	lsls	r1, r2, #2
 800a79a:	461a      	mov	r2, r3
 800a79c:	460b      	mov	r3, r1
 800a79e:	4413      	add	r3, r2
 800a7a0:	009b      	lsls	r3, r3, #2
 800a7a2:	b2da      	uxtb	r2, r3
 800a7a4:	4ba5      	ldr	r3, [pc, #660]	; (800aa3c <GPS_GPRMC_Parse+0x80c>)
 800a7a6:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a7aa:	b2db      	uxtb	r3, r3
 800a7ac:	1c59      	adds	r1, r3, #1
 800a7ae:	b2c8      	uxtb	r0, r1
 800a7b0:	49a2      	ldr	r1, [pc, #648]	; (800aa3c <GPS_GPRMC_Parse+0x80c>)
 800a7b2:	f881 00fa 	strb.w	r0, [r1, #250]	; 0xfa
 800a7b6:	49a2      	ldr	r1, [pc, #648]	; (800aa40 <GPS_GPRMC_Parse+0x810>)
 800a7b8:	fba1 0103 	umull	r0, r1, r1, r3
 800a7bc:	0909      	lsrs	r1, r1, #4
 800a7be:	20fa      	movs	r0, #250	; 0xfa
 800a7c0:	fb00 f101 	mul.w	r1, r0, r1
 800a7c4:	1a5b      	subs	r3, r3, r1
 800a7c6:	b2db      	uxtb	r3, r3
 800a7c8:	4619      	mov	r1, r3
 800a7ca:	4b9c      	ldr	r3, [pc, #624]	; (800aa3c <GPS_GPRMC_Parse+0x80c>)
 800a7cc:	5c5b      	ldrb	r3, [r3, r1]
 800a7ce:	4619      	mov	r1, r3
 800a7d0:	0089      	lsls	r1, r1, #2
 800a7d2:	440b      	add	r3, r1
 800a7d4:	005b      	lsls	r3, r3, #1
 800a7d6:	b2db      	uxtb	r3, r3
 800a7d8:	4413      	add	r3, r2
 800a7da:	b2da      	uxtb	r2, r3
 800a7dc:	4b97      	ldr	r3, [pc, #604]	; (800aa3c <GPS_GPRMC_Parse+0x80c>)
 800a7de:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a7e2:	b2db      	uxtb	r3, r3
 800a7e4:	1c59      	adds	r1, r3, #1
 800a7e6:	b2c8      	uxtb	r0, r1
 800a7e8:	4994      	ldr	r1, [pc, #592]	; (800aa3c <GPS_GPRMC_Parse+0x80c>)
 800a7ea:	f881 00fa 	strb.w	r0, [r1, #250]	; 0xfa
 800a7ee:	4994      	ldr	r1, [pc, #592]	; (800aa40 <GPS_GPRMC_Parse+0x810>)
 800a7f0:	fba1 0103 	umull	r0, r1, r1, r3
 800a7f4:	0909      	lsrs	r1, r1, #4
 800a7f6:	20fa      	movs	r0, #250	; 0xfa
 800a7f8:	fb00 f101 	mul.w	r1, r0, r1
 800a7fc:	1a5b      	subs	r3, r3, r1
 800a7fe:	b2db      	uxtb	r3, r3
 800a800:	4619      	mov	r1, r3
 800a802:	4b8e      	ldr	r3, [pc, #568]	; (800aa3c <GPS_GPRMC_Parse+0x80c>)
 800a804:	5c5b      	ldrb	r3, [r3, r1]
 800a806:	4413      	add	r3, r2
 800a808:	b2da      	uxtb	r2, r3
 800a80a:	4b8b      	ldr	r3, [pc, #556]	; (800aa38 <GPS_GPRMC_Parse+0x808>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	3230      	adds	r2, #48	; 0x30
 800a810:	b2d2      	uxtb	r2, r2
 800a812:	735a      	strb	r2, [r3, #13]
		_gps->longitudeMinute = (TAIL_READ_P - ASCII_NUMBER) * 10.0 + (TAIL_READ_P - ASCII_NUMBER);
 800a814:	4b89      	ldr	r3, [pc, #548]	; (800aa3c <GPS_GPRMC_Parse+0x80c>)
 800a816:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a81a:	b2db      	uxtb	r3, r3
 800a81c:	1c5a      	adds	r2, r3, #1
 800a81e:	b2d1      	uxtb	r1, r2
 800a820:	4a86      	ldr	r2, [pc, #536]	; (800aa3c <GPS_GPRMC_Parse+0x80c>)
 800a822:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a826:	4a86      	ldr	r2, [pc, #536]	; (800aa40 <GPS_GPRMC_Parse+0x810>)
 800a828:	fba2 1203 	umull	r1, r2, r2, r3
 800a82c:	0912      	lsrs	r2, r2, #4
 800a82e:	21fa      	movs	r1, #250	; 0xfa
 800a830:	fb01 f202 	mul.w	r2, r1, r2
 800a834:	1a9b      	subs	r3, r3, r2
 800a836:	b2db      	uxtb	r3, r3
 800a838:	461a      	mov	r2, r3
 800a83a:	4b80      	ldr	r3, [pc, #512]	; (800aa3c <GPS_GPRMC_Parse+0x80c>)
 800a83c:	5c9b      	ldrb	r3, [r3, r2]
 800a83e:	3b30      	subs	r3, #48	; 0x30
 800a840:	4618      	mov	r0, r3
 800a842:	f7f5 fe87 	bl	8000554 <__aeabi_i2d>
 800a846:	f04f 0200 	mov.w	r2, #0
 800a84a:	4b7e      	ldr	r3, [pc, #504]	; (800aa44 <GPS_GPRMC_Parse+0x814>)
 800a84c:	f7f5 feec 	bl	8000628 <__aeabi_dmul>
 800a850:	4602      	mov	r2, r0
 800a852:	460b      	mov	r3, r1
 800a854:	4614      	mov	r4, r2
 800a856:	461d      	mov	r5, r3
 800a858:	4b78      	ldr	r3, [pc, #480]	; (800aa3c <GPS_GPRMC_Parse+0x80c>)
 800a85a:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a85e:	b2db      	uxtb	r3, r3
 800a860:	1c5a      	adds	r2, r3, #1
 800a862:	b2d1      	uxtb	r1, r2
 800a864:	4a75      	ldr	r2, [pc, #468]	; (800aa3c <GPS_GPRMC_Parse+0x80c>)
 800a866:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a86a:	4a75      	ldr	r2, [pc, #468]	; (800aa40 <GPS_GPRMC_Parse+0x810>)
 800a86c:	fba2 1203 	umull	r1, r2, r2, r3
 800a870:	0912      	lsrs	r2, r2, #4
 800a872:	21fa      	movs	r1, #250	; 0xfa
 800a874:	fb01 f202 	mul.w	r2, r1, r2
 800a878:	1a9b      	subs	r3, r3, r2
 800a87a:	b2db      	uxtb	r3, r3
 800a87c:	461a      	mov	r2, r3
 800a87e:	4b6f      	ldr	r3, [pc, #444]	; (800aa3c <GPS_GPRMC_Parse+0x80c>)
 800a880:	5c9b      	ldrb	r3, [r3, r2]
 800a882:	3b30      	subs	r3, #48	; 0x30
 800a884:	4618      	mov	r0, r3
 800a886:	f7f5 fe65 	bl	8000554 <__aeabi_i2d>
 800a88a:	4602      	mov	r2, r0
 800a88c:	460b      	mov	r3, r1
 800a88e:	4620      	mov	r0, r4
 800a890:	4629      	mov	r1, r5
 800a892:	f7f5 fd13 	bl	80002bc <__adddf3>
 800a896:	4602      	mov	r2, r0
 800a898:	460b      	mov	r3, r1
 800a89a:	4967      	ldr	r1, [pc, #412]	; (800aa38 <GPS_GPRMC_Parse+0x808>)
 800a89c:	680c      	ldr	r4, [r1, #0]
 800a89e:	4610      	mov	r0, r2
 800a8a0:	4619      	mov	r1, r3
 800a8a2:	f7f6 f971 	bl	8000b88 <__aeabi_d2uiz>
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	b2db      	uxtb	r3, r3
 800a8aa:	73a3      	strb	r3, [r4, #14]
		TAIL_INCREASE;		// "." geçtik
 800a8ac:	4b63      	ldr	r3, [pc, #396]	; (800aa3c <GPS_GPRMC_Parse+0x80c>)
 800a8ae:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a8b2:	b2db      	uxtb	r3, r3
 800a8b4:	3301      	adds	r3, #1
 800a8b6:	461a      	mov	r2, r3
 800a8b8:	4b61      	ldr	r3, [pc, #388]	; (800aa40 <GPS_GPRMC_Parse+0x810>)
 800a8ba:	fba3 1302 	umull	r1, r3, r3, r2
 800a8be:	091b      	lsrs	r3, r3, #4
 800a8c0:	21fa      	movs	r1, #250	; 0xfa
 800a8c2:	fb01 f303 	mul.w	r3, r1, r3
 800a8c6:	1ad3      	subs	r3, r2, r3
 800a8c8:	b2da      	uxtb	r2, r3
 800a8ca:	4b5c      	ldr	r3, [pc, #368]	; (800aa3c <GPS_GPRMC_Parse+0x80c>)
 800a8cc:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
		_gps->longitudeSecond = ((TAIL_READ_P - ASCII_NUMBER) * 100.0 + (TAIL_READ_P - ASCII_NUMBER) * 10.0 + (TAIL_READ_P - ASCII_NUMBER) * 1.0) / 1000 * 60;
 800a8d0:	4b5a      	ldr	r3, [pc, #360]	; (800aa3c <GPS_GPRMC_Parse+0x80c>)
 800a8d2:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a8d6:	b2db      	uxtb	r3, r3
 800a8d8:	1c5a      	adds	r2, r3, #1
 800a8da:	b2d1      	uxtb	r1, r2
 800a8dc:	4a57      	ldr	r2, [pc, #348]	; (800aa3c <GPS_GPRMC_Parse+0x80c>)
 800a8de:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a8e2:	4a57      	ldr	r2, [pc, #348]	; (800aa40 <GPS_GPRMC_Parse+0x810>)
 800a8e4:	fba2 1203 	umull	r1, r2, r2, r3
 800a8e8:	0912      	lsrs	r2, r2, #4
 800a8ea:	21fa      	movs	r1, #250	; 0xfa
 800a8ec:	fb01 f202 	mul.w	r2, r1, r2
 800a8f0:	1a9b      	subs	r3, r3, r2
 800a8f2:	b2db      	uxtb	r3, r3
 800a8f4:	461a      	mov	r2, r3
 800a8f6:	4b51      	ldr	r3, [pc, #324]	; (800aa3c <GPS_GPRMC_Parse+0x80c>)
 800a8f8:	5c9b      	ldrb	r3, [r3, r2]
 800a8fa:	3b30      	subs	r3, #48	; 0x30
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f7f5 fe29 	bl	8000554 <__aeabi_i2d>
 800a902:	f04f 0200 	mov.w	r2, #0
 800a906:	4b50      	ldr	r3, [pc, #320]	; (800aa48 <GPS_GPRMC_Parse+0x818>)
 800a908:	f7f5 fe8e 	bl	8000628 <__aeabi_dmul>
 800a90c:	4602      	mov	r2, r0
 800a90e:	460b      	mov	r3, r1
 800a910:	4614      	mov	r4, r2
 800a912:	461d      	mov	r5, r3
 800a914:	4b49      	ldr	r3, [pc, #292]	; (800aa3c <GPS_GPRMC_Parse+0x80c>)
 800a916:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a91a:	b2db      	uxtb	r3, r3
 800a91c:	1c5a      	adds	r2, r3, #1
 800a91e:	b2d1      	uxtb	r1, r2
 800a920:	4a46      	ldr	r2, [pc, #280]	; (800aa3c <GPS_GPRMC_Parse+0x80c>)
 800a922:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a926:	4a46      	ldr	r2, [pc, #280]	; (800aa40 <GPS_GPRMC_Parse+0x810>)
 800a928:	fba2 1203 	umull	r1, r2, r2, r3
 800a92c:	0912      	lsrs	r2, r2, #4
 800a92e:	21fa      	movs	r1, #250	; 0xfa
 800a930:	fb01 f202 	mul.w	r2, r1, r2
 800a934:	1a9b      	subs	r3, r3, r2
 800a936:	b2db      	uxtb	r3, r3
 800a938:	461a      	mov	r2, r3
 800a93a:	4b40      	ldr	r3, [pc, #256]	; (800aa3c <GPS_GPRMC_Parse+0x80c>)
 800a93c:	5c9b      	ldrb	r3, [r3, r2]
 800a93e:	3b30      	subs	r3, #48	; 0x30
 800a940:	4618      	mov	r0, r3
 800a942:	f7f5 fe07 	bl	8000554 <__aeabi_i2d>
 800a946:	f04f 0200 	mov.w	r2, #0
 800a94a:	4b3e      	ldr	r3, [pc, #248]	; (800aa44 <GPS_GPRMC_Parse+0x814>)
 800a94c:	f7f5 fe6c 	bl	8000628 <__aeabi_dmul>
 800a950:	4602      	mov	r2, r0
 800a952:	460b      	mov	r3, r1
 800a954:	4620      	mov	r0, r4
 800a956:	4629      	mov	r1, r5
 800a958:	f7f5 fcb0 	bl	80002bc <__adddf3>
 800a95c:	4602      	mov	r2, r0
 800a95e:	460b      	mov	r3, r1
 800a960:	4614      	mov	r4, r2
 800a962:	461d      	mov	r5, r3
 800a964:	4b35      	ldr	r3, [pc, #212]	; (800aa3c <GPS_GPRMC_Parse+0x80c>)
 800a966:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a96a:	b2db      	uxtb	r3, r3
 800a96c:	1c5a      	adds	r2, r3, #1
 800a96e:	b2d1      	uxtb	r1, r2
 800a970:	4a32      	ldr	r2, [pc, #200]	; (800aa3c <GPS_GPRMC_Parse+0x80c>)
 800a972:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a976:	4a32      	ldr	r2, [pc, #200]	; (800aa40 <GPS_GPRMC_Parse+0x810>)
 800a978:	fba2 1203 	umull	r1, r2, r2, r3
 800a97c:	0912      	lsrs	r2, r2, #4
 800a97e:	21fa      	movs	r1, #250	; 0xfa
 800a980:	fb01 f202 	mul.w	r2, r1, r2
 800a984:	1a9b      	subs	r3, r3, r2
 800a986:	b2db      	uxtb	r3, r3
 800a988:	461a      	mov	r2, r3
 800a98a:	4b2c      	ldr	r3, [pc, #176]	; (800aa3c <GPS_GPRMC_Parse+0x80c>)
 800a98c:	5c9b      	ldrb	r3, [r3, r2]
 800a98e:	3b30      	subs	r3, #48	; 0x30
 800a990:	4618      	mov	r0, r3
 800a992:	f7f5 fddf 	bl	8000554 <__aeabi_i2d>
 800a996:	4602      	mov	r2, r0
 800a998:	460b      	mov	r3, r1
 800a99a:	4620      	mov	r0, r4
 800a99c:	4629      	mov	r1, r5
 800a99e:	f7f5 fc8d 	bl	80002bc <__adddf3>
 800a9a2:	4602      	mov	r2, r0
 800a9a4:	460b      	mov	r3, r1
 800a9a6:	4610      	mov	r0, r2
 800a9a8:	4619      	mov	r1, r3
 800a9aa:	f04f 0200 	mov.w	r2, #0
 800a9ae:	4b27      	ldr	r3, [pc, #156]	; (800aa4c <GPS_GPRMC_Parse+0x81c>)
 800a9b0:	f7f5 ff64 	bl	800087c <__aeabi_ddiv>
 800a9b4:	4602      	mov	r2, r0
 800a9b6:	460b      	mov	r3, r1
 800a9b8:	4610      	mov	r0, r2
 800a9ba:	4619      	mov	r1, r3
 800a9bc:	f04f 0200 	mov.w	r2, #0
 800a9c0:	4b23      	ldr	r3, [pc, #140]	; (800aa50 <GPS_GPRMC_Parse+0x820>)
 800a9c2:	f7f5 fe31 	bl	8000628 <__aeabi_dmul>
 800a9c6:	4602      	mov	r2, r0
 800a9c8:	460b      	mov	r3, r1
 800a9ca:	491b      	ldr	r1, [pc, #108]	; (800aa38 <GPS_GPRMC_Parse+0x808>)
 800a9cc:	680c      	ldr	r4, [r1, #0]
 800a9ce:	4610      	mov	r0, r2
 800a9d0:	4619      	mov	r1, r3
 800a9d2:	f7f6 f8f9 	bl	8000bc8 <__aeabi_d2f>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	6123      	str	r3, [r4, #16]

		// yer yer bilgisi alır
		TAIL_INCREASE_TO_COMMA;
 800a9da:	4b18      	ldr	r3, [pc, #96]	; (800aa3c <GPS_GPRMC_Parse+0x80c>)
 800a9dc:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a9e0:	b2db      	uxtb	r3, r3
 800a9e2:	1c5a      	adds	r2, r3, #1
 800a9e4:	b2d1      	uxtb	r1, r2
 800a9e6:	4a15      	ldr	r2, [pc, #84]	; (800aa3c <GPS_GPRMC_Parse+0x80c>)
 800a9e8:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a9ec:	4a14      	ldr	r2, [pc, #80]	; (800aa40 <GPS_GPRMC_Parse+0x810>)
 800a9ee:	fba2 1203 	umull	r1, r2, r2, r3
 800a9f2:	0912      	lsrs	r2, r2, #4
 800a9f4:	21fa      	movs	r1, #250	; 0xfa
 800a9f6:	fb01 f202 	mul.w	r2, r1, r2
 800a9fa:	1a9b      	subs	r3, r3, r2
 800a9fc:	b2db      	uxtb	r3, r3
 800a9fe:	461a      	mov	r2, r3
 800aa00:	4b0e      	ldr	r3, [pc, #56]	; (800aa3c <GPS_GPRMC_Parse+0x80c>)
 800aa02:	5c9b      	ldrb	r3, [r3, r2]
 800aa04:	2b2c      	cmp	r3, #44	; 0x2c
 800aa06:	d1e8      	bne.n	800a9da <GPS_GPRMC_Parse+0x7aa>
			if(TAIL_READ_P == 'E')	_gps->locationLong = EAST;
 800aa08:	4b0c      	ldr	r3, [pc, #48]	; (800aa3c <GPS_GPRMC_Parse+0x80c>)
 800aa0a:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800aa0e:	b2db      	uxtb	r3, r3
 800aa10:	1c5a      	adds	r2, r3, #1
 800aa12:	b2d1      	uxtb	r1, r2
 800aa14:	4a09      	ldr	r2, [pc, #36]	; (800aa3c <GPS_GPRMC_Parse+0x80c>)
 800aa16:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800aa1a:	4a09      	ldr	r2, [pc, #36]	; (800aa40 <GPS_GPRMC_Parse+0x810>)
 800aa1c:	fba2 1203 	umull	r1, r2, r2, r3
 800aa20:	0912      	lsrs	r2, r2, #4
 800aa22:	21fa      	movs	r1, #250	; 0xfa
 800aa24:	fb01 f202 	mul.w	r2, r1, r2
 800aa28:	1a9b      	subs	r3, r3, r2
 800aa2a:	b2db      	uxtb	r3, r3
 800aa2c:	461a      	mov	r2, r3
 800aa2e:	4b03      	ldr	r3, [pc, #12]	; (800aa3c <GPS_GPRMC_Parse+0x80c>)
 800aa30:	5c9b      	ldrb	r3, [r3, r2]
 800aa32:	2b45      	cmp	r3, #69	; 0x45
 800aa34:	d113      	bne.n	800aa5e <GPS_GPRMC_Parse+0x82e>
 800aa36:	e00d      	b.n	800aa54 <GPS_GPRMC_Parse+0x824>
 800aa38:	20004f2c 	.word	0x20004f2c
 800aa3c:	20004e2c 	.word	0x20004e2c
 800aa40:	10624dd3 	.word	0x10624dd3
 800aa44:	40240000 	.word	0x40240000
 800aa48:	40590000 	.word	0x40590000
 800aa4c:	408f4000 	.word	0x408f4000
 800aa50:	404e0000 	.word	0x404e0000
 800aa54:	4b7d      	ldr	r3, [pc, #500]	; (800ac4c <GPS_GPRMC_Parse+0xa1c>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	2202      	movs	r2, #2
 800aa5a:	751a      	strb	r2, [r3, #20]
 800aa5c:	e003      	b.n	800aa66 <GPS_GPRMC_Parse+0x836>
			else 					_gps->locationLong = WEST;
 800aa5e:	4b7b      	ldr	r3, [pc, #492]	; (800ac4c <GPS_GPRMC_Parse+0xa1c>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	2203      	movs	r2, #3
 800aa64:	751a      	strb	r2, [r3, #20]

		TAIL_INCREASE_TO_COMMA;
 800aa66:	4b7a      	ldr	r3, [pc, #488]	; (800ac50 <GPS_GPRMC_Parse+0xa20>)
 800aa68:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800aa6c:	b2db      	uxtb	r3, r3
 800aa6e:	1c5a      	adds	r2, r3, #1
 800aa70:	b2d1      	uxtb	r1, r2
 800aa72:	4a77      	ldr	r2, [pc, #476]	; (800ac50 <GPS_GPRMC_Parse+0xa20>)
 800aa74:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800aa78:	4a76      	ldr	r2, [pc, #472]	; (800ac54 <GPS_GPRMC_Parse+0xa24>)
 800aa7a:	fba2 1203 	umull	r1, r2, r2, r3
 800aa7e:	0912      	lsrs	r2, r2, #4
 800aa80:	21fa      	movs	r1, #250	; 0xfa
 800aa82:	fb01 f202 	mul.w	r2, r1, r2
 800aa86:	1a9b      	subs	r3, r3, r2
 800aa88:	b2db      	uxtb	r3, r3
 800aa8a:	461a      	mov	r2, r3
 800aa8c:	4b70      	ldr	r3, [pc, #448]	; (800ac50 <GPS_GPRMC_Parse+0xa20>)
 800aa8e:	5c9b      	ldrb	r3, [r3, r2]
 800aa90:	2b2c      	cmp	r3, #44	; 0x2c
 800aa92:	d1e8      	bne.n	800aa66 <GPS_GPRMC_Parse+0x836>
		TAIL_INCREASE_TO_COMMA;
 800aa94:	4b6e      	ldr	r3, [pc, #440]	; (800ac50 <GPS_GPRMC_Parse+0xa20>)
 800aa96:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800aa9a:	b2db      	uxtb	r3, r3
 800aa9c:	1c5a      	adds	r2, r3, #1
 800aa9e:	b2d1      	uxtb	r1, r2
 800aaa0:	4a6b      	ldr	r2, [pc, #428]	; (800ac50 <GPS_GPRMC_Parse+0xa20>)
 800aaa2:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800aaa6:	4a6b      	ldr	r2, [pc, #428]	; (800ac54 <GPS_GPRMC_Parse+0xa24>)
 800aaa8:	fba2 1203 	umull	r1, r2, r2, r3
 800aaac:	0912      	lsrs	r2, r2, #4
 800aaae:	21fa      	movs	r1, #250	; 0xfa
 800aab0:	fb01 f202 	mul.w	r2, r1, r2
 800aab4:	1a9b      	subs	r3, r3, r2
 800aab6:	b2db      	uxtb	r3, r3
 800aab8:	461a      	mov	r2, r3
 800aaba:	4b65      	ldr	r3, [pc, #404]	; (800ac50 <GPS_GPRMC_Parse+0xa20>)
 800aabc:	5c9b      	ldrb	r3, [r3, r2]
 800aabe:	2b2c      	cmp	r3, #44	; 0x2c
 800aac0:	d1e8      	bne.n	800aa94 <GPS_GPRMC_Parse+0x864>
		TAIL_INCREASE_TO_COMMA;
 800aac2:	4b63      	ldr	r3, [pc, #396]	; (800ac50 <GPS_GPRMC_Parse+0xa20>)
 800aac4:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800aac8:	b2db      	uxtb	r3, r3
 800aaca:	1c5a      	adds	r2, r3, #1
 800aacc:	b2d1      	uxtb	r1, r2
 800aace:	4a60      	ldr	r2, [pc, #384]	; (800ac50 <GPS_GPRMC_Parse+0xa20>)
 800aad0:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800aad4:	4a5f      	ldr	r2, [pc, #380]	; (800ac54 <GPS_GPRMC_Parse+0xa24>)
 800aad6:	fba2 1203 	umull	r1, r2, r2, r3
 800aada:	0912      	lsrs	r2, r2, #4
 800aadc:	21fa      	movs	r1, #250	; 0xfa
 800aade:	fb01 f202 	mul.w	r2, r1, r2
 800aae2:	1a9b      	subs	r3, r3, r2
 800aae4:	b2db      	uxtb	r3, r3
 800aae6:	461a      	mov	r2, r3
 800aae8:	4b59      	ldr	r3, [pc, #356]	; (800ac50 <GPS_GPRMC_Parse+0xa20>)
 800aaea:	5c9b      	ldrb	r3, [r3, r2]
 800aaec:	2b2c      	cmp	r3, #44	; 0x2c
 800aaee:	d1e8      	bne.n	800aac2 <GPS_GPRMC_Parse+0x892>

		// Tarih bilgisini alır
		_gps->day = (TAIL_READ_P - ASCII_NUMBER) * 10 + (TAIL_READ_P - ASCII_NUMBER);
 800aaf0:	4b57      	ldr	r3, [pc, #348]	; (800ac50 <GPS_GPRMC_Parse+0xa20>)
 800aaf2:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800aaf6:	b2db      	uxtb	r3, r3
 800aaf8:	1c5a      	adds	r2, r3, #1
 800aafa:	b2d1      	uxtb	r1, r2
 800aafc:	4a54      	ldr	r2, [pc, #336]	; (800ac50 <GPS_GPRMC_Parse+0xa20>)
 800aafe:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800ab02:	4a54      	ldr	r2, [pc, #336]	; (800ac54 <GPS_GPRMC_Parse+0xa24>)
 800ab04:	fba2 1203 	umull	r1, r2, r2, r3
 800ab08:	0912      	lsrs	r2, r2, #4
 800ab0a:	21fa      	movs	r1, #250	; 0xfa
 800ab0c:	fb01 f202 	mul.w	r2, r1, r2
 800ab10:	1a9b      	subs	r3, r3, r2
 800ab12:	b2db      	uxtb	r3, r3
 800ab14:	461a      	mov	r2, r3
 800ab16:	4b4e      	ldr	r3, [pc, #312]	; (800ac50 <GPS_GPRMC_Parse+0xa20>)
 800ab18:	5c9b      	ldrb	r3, [r3, r2]
 800ab1a:	461a      	mov	r2, r3
 800ab1c:	0092      	lsls	r2, r2, #2
 800ab1e:	4413      	add	r3, r2
 800ab20:	005b      	lsls	r3, r3, #1
 800ab22:	b2da      	uxtb	r2, r3
 800ab24:	4b4a      	ldr	r3, [pc, #296]	; (800ac50 <GPS_GPRMC_Parse+0xa20>)
 800ab26:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800ab2a:	b2db      	uxtb	r3, r3
 800ab2c:	1c59      	adds	r1, r3, #1
 800ab2e:	b2c8      	uxtb	r0, r1
 800ab30:	4947      	ldr	r1, [pc, #284]	; (800ac50 <GPS_GPRMC_Parse+0xa20>)
 800ab32:	f881 00fa 	strb.w	r0, [r1, #250]	; 0xfa
 800ab36:	4947      	ldr	r1, [pc, #284]	; (800ac54 <GPS_GPRMC_Parse+0xa24>)
 800ab38:	fba1 0103 	umull	r0, r1, r1, r3
 800ab3c:	0909      	lsrs	r1, r1, #4
 800ab3e:	20fa      	movs	r0, #250	; 0xfa
 800ab40:	fb00 f101 	mul.w	r1, r0, r1
 800ab44:	1a5b      	subs	r3, r3, r1
 800ab46:	b2db      	uxtb	r3, r3
 800ab48:	4619      	mov	r1, r3
 800ab4a:	4b41      	ldr	r3, [pc, #260]	; (800ac50 <GPS_GPRMC_Parse+0xa20>)
 800ab4c:	5c5b      	ldrb	r3, [r3, r1]
 800ab4e:	4413      	add	r3, r2
 800ab50:	b2da      	uxtb	r2, r3
 800ab52:	4b3e      	ldr	r3, [pc, #248]	; (800ac4c <GPS_GPRMC_Parse+0xa1c>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	3a10      	subs	r2, #16
 800ab58:	b2d2      	uxtb	r2, r2
 800ab5a:	755a      	strb	r2, [r3, #21]
		_gps->month = (TAIL_READ_P - ASCII_NUMBER) * 10 + (TAIL_READ_P - ASCII_NUMBER);
 800ab5c:	4b3c      	ldr	r3, [pc, #240]	; (800ac50 <GPS_GPRMC_Parse+0xa20>)
 800ab5e:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800ab62:	b2db      	uxtb	r3, r3
 800ab64:	1c5a      	adds	r2, r3, #1
 800ab66:	b2d1      	uxtb	r1, r2
 800ab68:	4a39      	ldr	r2, [pc, #228]	; (800ac50 <GPS_GPRMC_Parse+0xa20>)
 800ab6a:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800ab6e:	4a39      	ldr	r2, [pc, #228]	; (800ac54 <GPS_GPRMC_Parse+0xa24>)
 800ab70:	fba2 1203 	umull	r1, r2, r2, r3
 800ab74:	0912      	lsrs	r2, r2, #4
 800ab76:	21fa      	movs	r1, #250	; 0xfa
 800ab78:	fb01 f202 	mul.w	r2, r1, r2
 800ab7c:	1a9b      	subs	r3, r3, r2
 800ab7e:	b2db      	uxtb	r3, r3
 800ab80:	461a      	mov	r2, r3
 800ab82:	4b33      	ldr	r3, [pc, #204]	; (800ac50 <GPS_GPRMC_Parse+0xa20>)
 800ab84:	5c9b      	ldrb	r3, [r3, r2]
 800ab86:	461a      	mov	r2, r3
 800ab88:	0092      	lsls	r2, r2, #2
 800ab8a:	4413      	add	r3, r2
 800ab8c:	005b      	lsls	r3, r3, #1
 800ab8e:	b2da      	uxtb	r2, r3
 800ab90:	4b2f      	ldr	r3, [pc, #188]	; (800ac50 <GPS_GPRMC_Parse+0xa20>)
 800ab92:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800ab96:	b2db      	uxtb	r3, r3
 800ab98:	1c59      	adds	r1, r3, #1
 800ab9a:	b2c8      	uxtb	r0, r1
 800ab9c:	492c      	ldr	r1, [pc, #176]	; (800ac50 <GPS_GPRMC_Parse+0xa20>)
 800ab9e:	f881 00fa 	strb.w	r0, [r1, #250]	; 0xfa
 800aba2:	492c      	ldr	r1, [pc, #176]	; (800ac54 <GPS_GPRMC_Parse+0xa24>)
 800aba4:	fba1 0103 	umull	r0, r1, r1, r3
 800aba8:	0909      	lsrs	r1, r1, #4
 800abaa:	20fa      	movs	r0, #250	; 0xfa
 800abac:	fb00 f101 	mul.w	r1, r0, r1
 800abb0:	1a5b      	subs	r3, r3, r1
 800abb2:	b2db      	uxtb	r3, r3
 800abb4:	4619      	mov	r1, r3
 800abb6:	4b26      	ldr	r3, [pc, #152]	; (800ac50 <GPS_GPRMC_Parse+0xa20>)
 800abb8:	5c5b      	ldrb	r3, [r3, r1]
 800abba:	4413      	add	r3, r2
 800abbc:	b2da      	uxtb	r2, r3
 800abbe:	4b23      	ldr	r3, [pc, #140]	; (800ac4c <GPS_GPRMC_Parse+0xa1c>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	3a10      	subs	r2, #16
 800abc4:	b2d2      	uxtb	r2, r2
 800abc6:	759a      	strb	r2, [r3, #22]
		_gps->year = 2000 + (TAIL_READ_P - ASCII_NUMBER) * 10 + (TAIL_READ_P - ASCII_NUMBER);
 800abc8:	4b21      	ldr	r3, [pc, #132]	; (800ac50 <GPS_GPRMC_Parse+0xa20>)
 800abca:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800abce:	b2db      	uxtb	r3, r3
 800abd0:	1c5a      	adds	r2, r3, #1
 800abd2:	b2d1      	uxtb	r1, r2
 800abd4:	4a1e      	ldr	r2, [pc, #120]	; (800ac50 <GPS_GPRMC_Parse+0xa20>)
 800abd6:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800abda:	4a1e      	ldr	r2, [pc, #120]	; (800ac54 <GPS_GPRMC_Parse+0xa24>)
 800abdc:	fba2 1203 	umull	r1, r2, r2, r3
 800abe0:	0912      	lsrs	r2, r2, #4
 800abe2:	21fa      	movs	r1, #250	; 0xfa
 800abe4:	fb01 f202 	mul.w	r2, r1, r2
 800abe8:	1a9b      	subs	r3, r3, r2
 800abea:	b2db      	uxtb	r3, r3
 800abec:	461a      	mov	r2, r3
 800abee:	4b18      	ldr	r3, [pc, #96]	; (800ac50 <GPS_GPRMC_Parse+0xa20>)
 800abf0:	5c9b      	ldrb	r3, [r3, r2]
 800abf2:	3b30      	subs	r3, #48	; 0x30
 800abf4:	b29b      	uxth	r3, r3
 800abf6:	461a      	mov	r2, r3
 800abf8:	0092      	lsls	r2, r2, #2
 800abfa:	4413      	add	r3, r2
 800abfc:	005b      	lsls	r3, r3, #1
 800abfe:	b29a      	uxth	r2, r3
 800ac00:	4b13      	ldr	r3, [pc, #76]	; (800ac50 <GPS_GPRMC_Parse+0xa20>)
 800ac02:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800ac06:	b2db      	uxtb	r3, r3
 800ac08:	1c59      	adds	r1, r3, #1
 800ac0a:	b2c8      	uxtb	r0, r1
 800ac0c:	4910      	ldr	r1, [pc, #64]	; (800ac50 <GPS_GPRMC_Parse+0xa20>)
 800ac0e:	f881 00fa 	strb.w	r0, [r1, #250]	; 0xfa
 800ac12:	4910      	ldr	r1, [pc, #64]	; (800ac54 <GPS_GPRMC_Parse+0xa24>)
 800ac14:	fba1 0103 	umull	r0, r1, r1, r3
 800ac18:	0909      	lsrs	r1, r1, #4
 800ac1a:	20fa      	movs	r0, #250	; 0xfa
 800ac1c:	fb00 f101 	mul.w	r1, r0, r1
 800ac20:	1a5b      	subs	r3, r3, r1
 800ac22:	b2db      	uxtb	r3, r3
 800ac24:	4619      	mov	r1, r3
 800ac26:	4b0a      	ldr	r3, [pc, #40]	; (800ac50 <GPS_GPRMC_Parse+0xa20>)
 800ac28:	5c5b      	ldrb	r3, [r3, r1]
 800ac2a:	b29b      	uxth	r3, r3
 800ac2c:	4413      	add	r3, r2
 800ac2e:	b29a      	uxth	r2, r3
 800ac30:	4b06      	ldr	r3, [pc, #24]	; (800ac4c <GPS_GPRMC_Parse+0xa1c>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f502 62f4 	add.w	r2, r2, #1952	; 0x7a0
 800ac38:	b292      	uxth	r2, r2
 800ac3a:	831a      	strh	r2, [r3, #24]

		return _gps->gpsState;
 800ac3c:	4b03      	ldr	r3, [pc, #12]	; (800ac4c <GPS_GPRMC_Parse+0xa1c>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ac44:	e000      	b.n	800ac48 <GPS_GPRMC_Parse+0xa18>
	}
	else	return WRONG_DATA;
 800ac46:	2301      	movs	r3, #1
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	bdb0      	pop	{r4, r5, r7, pc}
 800ac4c:	20004f2c 	.word	0x20004f2c
 800ac50:	20004e2c 	.word	0x20004e2c
 800ac54:	10624dd3 	.word	0x10624dd3

0800ac58 <GPS_GPGGA_Parse>:
/////////////////////////////////////////////////////////////
/*
 * GPGGA verilerini çözer ve gps değerine atar	-uydu sayısı ve yükseklik-
 */
GPS_State GPS_GPGGA_Parse()
{
 800ac58:	b5b0      	push	{r4, r5, r7, lr}
 800ac5a:	af00      	add	r7, sp, #0
	if(!GPS_CheckSumControl(&ringBuff.rxGps[ringBuff.tail]))
 800ac5c:	4b58      	ldr	r3, [pc, #352]	; (800adc0 <GPS_GPGGA_Parse+0x168>)
 800ac5e:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800ac62:	b2db      	uxtb	r3, r3
 800ac64:	461a      	mov	r2, r3
 800ac66:	4b56      	ldr	r3, [pc, #344]	; (800adc0 <GPS_GPGGA_Parse+0x168>)
 800ac68:	4413      	add	r3, r2
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f000 fbc4 	bl	800b3f8 <GPS_CheckSumControl>
 800ac70:	4603      	mov	r3, r0
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d101      	bne.n	800ac7a <GPS_GPGGA_Parse+0x22>
	{
		return WRONG_DATA;
 800ac76:	2301      	movs	r3, #1
 800ac78:	e1e2      	b.n	800b040 <GPS_GPGGA_Parse+0x3e8>
	}
	else
	{
		TAIL_INCREASE_TO_COMMA;					// "GPGGA," sonrasına geçer
 800ac7a:	4b51      	ldr	r3, [pc, #324]	; (800adc0 <GPS_GPGGA_Parse+0x168>)
 800ac7c:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800ac80:	b2db      	uxtb	r3, r3
 800ac82:	1c5a      	adds	r2, r3, #1
 800ac84:	b2d1      	uxtb	r1, r2
 800ac86:	4a4e      	ldr	r2, [pc, #312]	; (800adc0 <GPS_GPGGA_Parse+0x168>)
 800ac88:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800ac8c:	4a4d      	ldr	r2, [pc, #308]	; (800adc4 <GPS_GPGGA_Parse+0x16c>)
 800ac8e:	fba2 1203 	umull	r1, r2, r2, r3
 800ac92:	0912      	lsrs	r2, r2, #4
 800ac94:	21fa      	movs	r1, #250	; 0xfa
 800ac96:	fb01 f202 	mul.w	r2, r1, r2
 800ac9a:	1a9b      	subs	r3, r3, r2
 800ac9c:	b2db      	uxtb	r3, r3
 800ac9e:	461a      	mov	r2, r3
 800aca0:	4b47      	ldr	r3, [pc, #284]	; (800adc0 <GPS_GPGGA_Parse+0x168>)
 800aca2:	5c9b      	ldrb	r3, [r3, r2]
 800aca4:	2b2c      	cmp	r3, #44	; 0x2c
 800aca6:	d1e8      	bne.n	800ac7a <GPS_GPGGA_Parse+0x22>
		TAIL_INCREASE_TO_COMMA;					// "tarih sonrasına geçer
 800aca8:	4b45      	ldr	r3, [pc, #276]	; (800adc0 <GPS_GPGGA_Parse+0x168>)
 800acaa:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800acae:	b2db      	uxtb	r3, r3
 800acb0:	1c5a      	adds	r2, r3, #1
 800acb2:	b2d1      	uxtb	r1, r2
 800acb4:	4a42      	ldr	r2, [pc, #264]	; (800adc0 <GPS_GPGGA_Parse+0x168>)
 800acb6:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800acba:	4a42      	ldr	r2, [pc, #264]	; (800adc4 <GPS_GPGGA_Parse+0x16c>)
 800acbc:	fba2 1203 	umull	r1, r2, r2, r3
 800acc0:	0912      	lsrs	r2, r2, #4
 800acc2:	21fa      	movs	r1, #250	; 0xfa
 800acc4:	fb01 f202 	mul.w	r2, r1, r2
 800acc8:	1a9b      	subs	r3, r3, r2
 800acca:	b2db      	uxtb	r3, r3
 800accc:	461a      	mov	r2, r3
 800acce:	4b3c      	ldr	r3, [pc, #240]	; (800adc0 <GPS_GPGGA_Parse+0x168>)
 800acd0:	5c9b      	ldrb	r3, [r3, r2]
 800acd2:	2b2c      	cmp	r3, #44	; 0x2c
 800acd4:	d1e8      	bne.n	800aca8 <GPS_GPGGA_Parse+0x50>
		TAIL_INCREASE_TO_COMMA;					// enlem sonrasına geçer
 800acd6:	4b3a      	ldr	r3, [pc, #232]	; (800adc0 <GPS_GPGGA_Parse+0x168>)
 800acd8:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800acdc:	b2db      	uxtb	r3, r3
 800acde:	1c5a      	adds	r2, r3, #1
 800ace0:	b2d1      	uxtb	r1, r2
 800ace2:	4a37      	ldr	r2, [pc, #220]	; (800adc0 <GPS_GPGGA_Parse+0x168>)
 800ace4:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800ace8:	4a36      	ldr	r2, [pc, #216]	; (800adc4 <GPS_GPGGA_Parse+0x16c>)
 800acea:	fba2 1203 	umull	r1, r2, r2, r3
 800acee:	0912      	lsrs	r2, r2, #4
 800acf0:	21fa      	movs	r1, #250	; 0xfa
 800acf2:	fb01 f202 	mul.w	r2, r1, r2
 800acf6:	1a9b      	subs	r3, r3, r2
 800acf8:	b2db      	uxtb	r3, r3
 800acfa:	461a      	mov	r2, r3
 800acfc:	4b30      	ldr	r3, [pc, #192]	; (800adc0 <GPS_GPGGA_Parse+0x168>)
 800acfe:	5c9b      	ldrb	r3, [r3, r2]
 800ad00:	2b2c      	cmp	r3, #44	; 0x2c
 800ad02:	d1e8      	bne.n	800acd6 <GPS_GPGGA_Parse+0x7e>
		TAIL_INCREASE_TO_COMMA;					// boylam sonrasına geçer
 800ad04:	4b2e      	ldr	r3, [pc, #184]	; (800adc0 <GPS_GPGGA_Parse+0x168>)
 800ad06:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800ad0a:	b2db      	uxtb	r3, r3
 800ad0c:	1c5a      	adds	r2, r3, #1
 800ad0e:	b2d1      	uxtb	r1, r2
 800ad10:	4a2b      	ldr	r2, [pc, #172]	; (800adc0 <GPS_GPGGA_Parse+0x168>)
 800ad12:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800ad16:	4a2b      	ldr	r2, [pc, #172]	; (800adc4 <GPS_GPGGA_Parse+0x16c>)
 800ad18:	fba2 1203 	umull	r1, r2, r2, r3
 800ad1c:	0912      	lsrs	r2, r2, #4
 800ad1e:	21fa      	movs	r1, #250	; 0xfa
 800ad20:	fb01 f202 	mul.w	r2, r1, r2
 800ad24:	1a9b      	subs	r3, r3, r2
 800ad26:	b2db      	uxtb	r3, r3
 800ad28:	461a      	mov	r2, r3
 800ad2a:	4b25      	ldr	r3, [pc, #148]	; (800adc0 <GPS_GPGGA_Parse+0x168>)
 800ad2c:	5c9b      	ldrb	r3, [r3, r2]
 800ad2e:	2b2c      	cmp	r3, #44	; 0x2c
 800ad30:	d1e8      	bne.n	800ad04 <GPS_GPGGA_Parse+0xac>
		TAIL_INCREASE_TO_COMMA;					// Boylam bölgesinin başına geçer
 800ad32:	4b23      	ldr	r3, [pc, #140]	; (800adc0 <GPS_GPGGA_Parse+0x168>)
 800ad34:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800ad38:	b2db      	uxtb	r3, r3
 800ad3a:	1c5a      	adds	r2, r3, #1
 800ad3c:	b2d1      	uxtb	r1, r2
 800ad3e:	4a20      	ldr	r2, [pc, #128]	; (800adc0 <GPS_GPGGA_Parse+0x168>)
 800ad40:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800ad44:	4a1f      	ldr	r2, [pc, #124]	; (800adc4 <GPS_GPGGA_Parse+0x16c>)
 800ad46:	fba2 1203 	umull	r1, r2, r2, r3
 800ad4a:	0912      	lsrs	r2, r2, #4
 800ad4c:	21fa      	movs	r1, #250	; 0xfa
 800ad4e:	fb01 f202 	mul.w	r2, r1, r2
 800ad52:	1a9b      	subs	r3, r3, r2
 800ad54:	b2db      	uxtb	r3, r3
 800ad56:	461a      	mov	r2, r3
 800ad58:	4b19      	ldr	r3, [pc, #100]	; (800adc0 <GPS_GPGGA_Parse+0x168>)
 800ad5a:	5c9b      	ldrb	r3, [r3, r2]
 800ad5c:	2b2c      	cmp	r3, #44	; 0x2c
 800ad5e:	d1e8      	bne.n	800ad32 <GPS_GPGGA_Parse+0xda>
		TAIL_INCREASE_TO_COMMA;					// Boylam bölgesinin sonuna geçer
 800ad60:	4b17      	ldr	r3, [pc, #92]	; (800adc0 <GPS_GPGGA_Parse+0x168>)
 800ad62:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800ad66:	b2db      	uxtb	r3, r3
 800ad68:	1c5a      	adds	r2, r3, #1
 800ad6a:	b2d1      	uxtb	r1, r2
 800ad6c:	4a14      	ldr	r2, [pc, #80]	; (800adc0 <GPS_GPGGA_Parse+0x168>)
 800ad6e:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800ad72:	4a14      	ldr	r2, [pc, #80]	; (800adc4 <GPS_GPGGA_Parse+0x16c>)
 800ad74:	fba2 1203 	umull	r1, r2, r2, r3
 800ad78:	0912      	lsrs	r2, r2, #4
 800ad7a:	21fa      	movs	r1, #250	; 0xfa
 800ad7c:	fb01 f202 	mul.w	r2, r1, r2
 800ad80:	1a9b      	subs	r3, r3, r2
 800ad82:	b2db      	uxtb	r3, r3
 800ad84:	461a      	mov	r2, r3
 800ad86:	4b0e      	ldr	r3, [pc, #56]	; (800adc0 <GPS_GPGGA_Parse+0x168>)
 800ad88:	5c9b      	ldrb	r3, [r3, r2]
 800ad8a:	2b2c      	cmp	r3, #44	; 0x2c
 800ad8c:	d1e8      	bne.n	800ad60 <GPS_GPGGA_Parse+0x108>

		if(TAIL_READ == '0')					//GNSS Position Fix Indicator
 800ad8e:	4b0c      	ldr	r3, [pc, #48]	; (800adc0 <GPS_GPGGA_Parse+0x168>)
 800ad90:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800ad94:	b2db      	uxtb	r3, r3
 800ad96:	4a0b      	ldr	r2, [pc, #44]	; (800adc4 <GPS_GPGGA_Parse+0x16c>)
 800ad98:	fba2 1203 	umull	r1, r2, r2, r3
 800ad9c:	0912      	lsrs	r2, r2, #4
 800ad9e:	21fa      	movs	r1, #250	; 0xfa
 800ada0:	fb01 f202 	mul.w	r2, r1, r2
 800ada4:	1a9b      	subs	r3, r3, r2
 800ada6:	b2db      	uxtb	r3, r3
 800ada8:	461a      	mov	r2, r3
 800adaa:	4b05      	ldr	r3, [pc, #20]	; (800adc0 <GPS_GPGGA_Parse+0x168>)
 800adac:	5c9b      	ldrb	r3, [r3, r2]
 800adae:	2b30      	cmp	r3, #48	; 0x30
 800adb0:	d10c      	bne.n	800adcc <GPS_GPGGA_Parse+0x174>
		{
			_gps->gpsState = NO_CONNECTION;
 800adb2:	4b05      	ldr	r3, [pc, #20]	; (800adc8 <GPS_GPGGA_Parse+0x170>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	2200      	movs	r2, #0
 800adb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			return NO_CONNECTION;
 800adbc:	2300      	movs	r3, #0
 800adbe:	e13f      	b.n	800b040 <GPS_GPGGA_Parse+0x3e8>
 800adc0:	20004e2c 	.word	0x20004e2c
 800adc4:	10624dd3 	.word	0x10624dd3
 800adc8:	20004f2c 	.word	0x20004f2c
		}
		else
			_gps->gpsState = POSITION_FIXED;
 800adcc:	4b9d      	ldr	r3, [pc, #628]	; (800b044 <GPS_GPGGA_Parse+0x3ec>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	2202      	movs	r2, #2
 800add2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		if(TAIL_READ_P != 0)
 800add6:	4b9c      	ldr	r3, [pc, #624]	; (800b048 <GPS_GPGGA_Parse+0x3f0>)
 800add8:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800addc:	b2db      	uxtb	r3, r3
 800adde:	1c5a      	adds	r2, r3, #1
 800ade0:	b2d1      	uxtb	r1, r2
 800ade2:	4a99      	ldr	r2, [pc, #612]	; (800b048 <GPS_GPGGA_Parse+0x3f0>)
 800ade4:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800ade8:	4a98      	ldr	r2, [pc, #608]	; (800b04c <GPS_GPGGA_Parse+0x3f4>)
 800adea:	fba2 1203 	umull	r1, r2, r2, r3
 800adee:	0912      	lsrs	r2, r2, #4
 800adf0:	21fa      	movs	r1, #250	; 0xfa
 800adf2:	fb01 f202 	mul.w	r2, r1, r2
 800adf6:	1a9b      	subs	r3, r3, r2
 800adf8:	b2db      	uxtb	r3, r3
 800adfa:	461a      	mov	r2, r3
 800adfc:	4b92      	ldr	r3, [pc, #584]	; (800b048 <GPS_GPGGA_Parse+0x3f0>)
 800adfe:	5c9b      	ldrb	r3, [r3, r2]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	f000 8119 	beq.w	800b038 <GPS_GPGGA_Parse+0x3e0>
		{
			TAIL_INCREASE_TO_COMMA;	// "," geçer
 800ae06:	4b90      	ldr	r3, [pc, #576]	; (800b048 <GPS_GPGGA_Parse+0x3f0>)
 800ae08:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800ae0c:	b2db      	uxtb	r3, r3
 800ae0e:	1c5a      	adds	r2, r3, #1
 800ae10:	b2d1      	uxtb	r1, r2
 800ae12:	4a8d      	ldr	r2, [pc, #564]	; (800b048 <GPS_GPGGA_Parse+0x3f0>)
 800ae14:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800ae18:	4a8c      	ldr	r2, [pc, #560]	; (800b04c <GPS_GPGGA_Parse+0x3f4>)
 800ae1a:	fba2 1203 	umull	r1, r2, r2, r3
 800ae1e:	0912      	lsrs	r2, r2, #4
 800ae20:	21fa      	movs	r1, #250	; 0xfa
 800ae22:	fb01 f202 	mul.w	r2, r1, r2
 800ae26:	1a9b      	subs	r3, r3, r2
 800ae28:	b2db      	uxtb	r3, r3
 800ae2a:	461a      	mov	r2, r3
 800ae2c:	4b86      	ldr	r3, [pc, #536]	; (800b048 <GPS_GPGGA_Parse+0x3f0>)
 800ae2e:	5c9b      	ldrb	r3, [r3, r2]
 800ae30:	2b2c      	cmp	r3, #44	; 0x2c
 800ae32:	d1e8      	bne.n	800ae06 <GPS_GPGGA_Parse+0x1ae>
			_gps->numberOfSatellite = (TAIL_READ_P - ASCII_NUMBER) * 10 + (TAIL_READ_P - ASCII_NUMBER);
 800ae34:	4b84      	ldr	r3, [pc, #528]	; (800b048 <GPS_GPGGA_Parse+0x3f0>)
 800ae36:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800ae3a:	b2db      	uxtb	r3, r3
 800ae3c:	1c5a      	adds	r2, r3, #1
 800ae3e:	b2d1      	uxtb	r1, r2
 800ae40:	4a81      	ldr	r2, [pc, #516]	; (800b048 <GPS_GPGGA_Parse+0x3f0>)
 800ae42:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800ae46:	4a81      	ldr	r2, [pc, #516]	; (800b04c <GPS_GPGGA_Parse+0x3f4>)
 800ae48:	fba2 1203 	umull	r1, r2, r2, r3
 800ae4c:	0912      	lsrs	r2, r2, #4
 800ae4e:	21fa      	movs	r1, #250	; 0xfa
 800ae50:	fb01 f202 	mul.w	r2, r1, r2
 800ae54:	1a9b      	subs	r3, r3, r2
 800ae56:	b2db      	uxtb	r3, r3
 800ae58:	461a      	mov	r2, r3
 800ae5a:	4b7b      	ldr	r3, [pc, #492]	; (800b048 <GPS_GPGGA_Parse+0x3f0>)
 800ae5c:	5c9b      	ldrb	r3, [r3, r2]
 800ae5e:	461a      	mov	r2, r3
 800ae60:	0092      	lsls	r2, r2, #2
 800ae62:	4413      	add	r3, r2
 800ae64:	005b      	lsls	r3, r3, #1
 800ae66:	b2da      	uxtb	r2, r3
 800ae68:	4b77      	ldr	r3, [pc, #476]	; (800b048 <GPS_GPGGA_Parse+0x3f0>)
 800ae6a:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800ae6e:	b2db      	uxtb	r3, r3
 800ae70:	1c59      	adds	r1, r3, #1
 800ae72:	b2c8      	uxtb	r0, r1
 800ae74:	4974      	ldr	r1, [pc, #464]	; (800b048 <GPS_GPGGA_Parse+0x3f0>)
 800ae76:	f881 00fa 	strb.w	r0, [r1, #250]	; 0xfa
 800ae7a:	4974      	ldr	r1, [pc, #464]	; (800b04c <GPS_GPGGA_Parse+0x3f4>)
 800ae7c:	fba1 0103 	umull	r0, r1, r1, r3
 800ae80:	0909      	lsrs	r1, r1, #4
 800ae82:	20fa      	movs	r0, #250	; 0xfa
 800ae84:	fb00 f101 	mul.w	r1, r0, r1
 800ae88:	1a5b      	subs	r3, r3, r1
 800ae8a:	b2db      	uxtb	r3, r3
 800ae8c:	4619      	mov	r1, r3
 800ae8e:	4b6e      	ldr	r3, [pc, #440]	; (800b048 <GPS_GPGGA_Parse+0x3f0>)
 800ae90:	5c5b      	ldrb	r3, [r3, r1]
 800ae92:	4413      	add	r3, r2
 800ae94:	b2da      	uxtb	r2, r3
 800ae96:	4b6b      	ldr	r3, [pc, #428]	; (800b044 <GPS_GPGGA_Parse+0x3ec>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	3a10      	subs	r2, #16
 800ae9c:	b2d2      	uxtb	r2, r2
 800ae9e:	769a      	strb	r2, [r3, #26]

			TAIL_INCREASE_TO_COMMA;	// ",0.9" geçer
 800aea0:	4b69      	ldr	r3, [pc, #420]	; (800b048 <GPS_GPGGA_Parse+0x3f0>)
 800aea2:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800aea6:	b2db      	uxtb	r3, r3
 800aea8:	1c5a      	adds	r2, r3, #1
 800aeaa:	b2d1      	uxtb	r1, r2
 800aeac:	4a66      	ldr	r2, [pc, #408]	; (800b048 <GPS_GPGGA_Parse+0x3f0>)
 800aeae:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800aeb2:	4a66      	ldr	r2, [pc, #408]	; (800b04c <GPS_GPGGA_Parse+0x3f4>)
 800aeb4:	fba2 1203 	umull	r1, r2, r2, r3
 800aeb8:	0912      	lsrs	r2, r2, #4
 800aeba:	21fa      	movs	r1, #250	; 0xfa
 800aebc:	fb01 f202 	mul.w	r2, r1, r2
 800aec0:	1a9b      	subs	r3, r3, r2
 800aec2:	b2db      	uxtb	r3, r3
 800aec4:	461a      	mov	r2, r3
 800aec6:	4b60      	ldr	r3, [pc, #384]	; (800b048 <GPS_GPGGA_Parse+0x3f0>)
 800aec8:	5c9b      	ldrb	r3, [r3, r2]
 800aeca:	2b2c      	cmp	r3, #44	; 0x2c
 800aecc:	d1e8      	bne.n	800aea0 <GPS_GPGGA_Parse+0x248>
			TAIL_INCREASE_TO_COMMA;	// "," geçer
 800aece:	4b5e      	ldr	r3, [pc, #376]	; (800b048 <GPS_GPGGA_Parse+0x3f0>)
 800aed0:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800aed4:	b2db      	uxtb	r3, r3
 800aed6:	1c5a      	adds	r2, r3, #1
 800aed8:	b2d1      	uxtb	r1, r2
 800aeda:	4a5b      	ldr	r2, [pc, #364]	; (800b048 <GPS_GPGGA_Parse+0x3f0>)
 800aedc:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800aee0:	4a5a      	ldr	r2, [pc, #360]	; (800b04c <GPS_GPGGA_Parse+0x3f4>)
 800aee2:	fba2 1203 	umull	r1, r2, r2, r3
 800aee6:	0912      	lsrs	r2, r2, #4
 800aee8:	21fa      	movs	r1, #250	; 0xfa
 800aeea:	fb01 f202 	mul.w	r2, r1, r2
 800aeee:	1a9b      	subs	r3, r3, r2
 800aef0:	b2db      	uxtb	r3, r3
 800aef2:	461a      	mov	r2, r3
 800aef4:	4b54      	ldr	r3, [pc, #336]	; (800b048 <GPS_GPGGA_Parse+0x3f0>)
 800aef6:	5c9b      	ldrb	r3, [r3, r2]
 800aef8:	2b2c      	cmp	r3, #44	; 0x2c
 800aefa:	d1e8      	bne.n	800aece <GPS_GPGGA_Parse+0x276>

			_gps->height = (TAIL_READ_P - ASCII_NUMBER) * 100 + (TAIL_READ_P - ASCII_NUMBER) * 10 + (TAIL_READ_P - ASCII_NUMBER);
 800aefc:	4b52      	ldr	r3, [pc, #328]	; (800b048 <GPS_GPGGA_Parse+0x3f0>)
 800aefe:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800af02:	b2db      	uxtb	r3, r3
 800af04:	1c5a      	adds	r2, r3, #1
 800af06:	b2d1      	uxtb	r1, r2
 800af08:	4a4f      	ldr	r2, [pc, #316]	; (800b048 <GPS_GPGGA_Parse+0x3f0>)
 800af0a:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800af0e:	4a4f      	ldr	r2, [pc, #316]	; (800b04c <GPS_GPGGA_Parse+0x3f4>)
 800af10:	fba2 1203 	umull	r1, r2, r2, r3
 800af14:	0912      	lsrs	r2, r2, #4
 800af16:	21fa      	movs	r1, #250	; 0xfa
 800af18:	fb01 f202 	mul.w	r2, r1, r2
 800af1c:	1a9b      	subs	r3, r3, r2
 800af1e:	b2db      	uxtb	r3, r3
 800af20:	461a      	mov	r2, r3
 800af22:	4b49      	ldr	r3, [pc, #292]	; (800b048 <GPS_GPGGA_Parse+0x3f0>)
 800af24:	5c9b      	ldrb	r3, [r3, r2]
 800af26:	3b30      	subs	r3, #48	; 0x30
 800af28:	2264      	movs	r2, #100	; 0x64
 800af2a:	fb02 f103 	mul.w	r1, r2, r3
 800af2e:	4b46      	ldr	r3, [pc, #280]	; (800b048 <GPS_GPGGA_Parse+0x3f0>)
 800af30:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800af34:	b2db      	uxtb	r3, r3
 800af36:	1c5a      	adds	r2, r3, #1
 800af38:	b2d0      	uxtb	r0, r2
 800af3a:	4a43      	ldr	r2, [pc, #268]	; (800b048 <GPS_GPGGA_Parse+0x3f0>)
 800af3c:	f882 00fa 	strb.w	r0, [r2, #250]	; 0xfa
 800af40:	4a42      	ldr	r2, [pc, #264]	; (800b04c <GPS_GPGGA_Parse+0x3f4>)
 800af42:	fba2 0203 	umull	r0, r2, r2, r3
 800af46:	0912      	lsrs	r2, r2, #4
 800af48:	20fa      	movs	r0, #250	; 0xfa
 800af4a:	fb00 f202 	mul.w	r2, r0, r2
 800af4e:	1a9b      	subs	r3, r3, r2
 800af50:	b2db      	uxtb	r3, r3
 800af52:	461a      	mov	r2, r3
 800af54:	4b3c      	ldr	r3, [pc, #240]	; (800b048 <GPS_GPGGA_Parse+0x3f0>)
 800af56:	5c9b      	ldrb	r3, [r3, r2]
 800af58:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800af5c:	4613      	mov	r3, r2
 800af5e:	009b      	lsls	r3, r3, #2
 800af60:	4413      	add	r3, r2
 800af62:	005b      	lsls	r3, r3, #1
 800af64:	18ca      	adds	r2, r1, r3
 800af66:	4b38      	ldr	r3, [pc, #224]	; (800b048 <GPS_GPGGA_Parse+0x3f0>)
 800af68:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800af6c:	b2db      	uxtb	r3, r3
 800af6e:	1c59      	adds	r1, r3, #1
 800af70:	b2c8      	uxtb	r0, r1
 800af72:	4935      	ldr	r1, [pc, #212]	; (800b048 <GPS_GPGGA_Parse+0x3f0>)
 800af74:	f881 00fa 	strb.w	r0, [r1, #250]	; 0xfa
 800af78:	4934      	ldr	r1, [pc, #208]	; (800b04c <GPS_GPGGA_Parse+0x3f4>)
 800af7a:	fba1 0103 	umull	r0, r1, r1, r3
 800af7e:	0909      	lsrs	r1, r1, #4
 800af80:	20fa      	movs	r0, #250	; 0xfa
 800af82:	fb00 f101 	mul.w	r1, r0, r1
 800af86:	1a5b      	subs	r3, r3, r1
 800af88:	b2db      	uxtb	r3, r3
 800af8a:	4619      	mov	r1, r3
 800af8c:	4b2e      	ldr	r3, [pc, #184]	; (800b048 <GPS_GPGGA_Parse+0x3f0>)
 800af8e:	5c5b      	ldrb	r3, [r3, r1]
 800af90:	3b30      	subs	r3, #48	; 0x30
 800af92:	441a      	add	r2, r3
 800af94:	4b2b      	ldr	r3, [pc, #172]	; (800b044 <GPS_GPGGA_Parse+0x3ec>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	ee07 2a90 	vmov	s15, r2
 800af9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800afa0:	edc3 7a07 	vstr	s15, [r3, #28]
			TAIL_INCREASE;
 800afa4:	4b28      	ldr	r3, [pc, #160]	; (800b048 <GPS_GPGGA_Parse+0x3f0>)
 800afa6:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800afaa:	b2db      	uxtb	r3, r3
 800afac:	3301      	adds	r3, #1
 800afae:	461a      	mov	r2, r3
 800afb0:	4b26      	ldr	r3, [pc, #152]	; (800b04c <GPS_GPGGA_Parse+0x3f4>)
 800afb2:	fba3 1302 	umull	r1, r3, r3, r2
 800afb6:	091b      	lsrs	r3, r3, #4
 800afb8:	21fa      	movs	r1, #250	; 0xfa
 800afba:	fb01 f303 	mul.w	r3, r1, r3
 800afbe:	1ad3      	subs	r3, r2, r3
 800afc0:	b2da      	uxtb	r2, r3
 800afc2:	4b21      	ldr	r3, [pc, #132]	; (800b048 <GPS_GPGGA_Parse+0x3f0>)
 800afc4:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
			_gps->height += (TAIL_READ_P - ASCII_NUMBER) / 10.0;
 800afc8:	4b1f      	ldr	r3, [pc, #124]	; (800b048 <GPS_GPGGA_Parse+0x3f0>)
 800afca:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800afce:	b2db      	uxtb	r3, r3
 800afd0:	1c5a      	adds	r2, r3, #1
 800afd2:	b2d1      	uxtb	r1, r2
 800afd4:	4a1c      	ldr	r2, [pc, #112]	; (800b048 <GPS_GPGGA_Parse+0x3f0>)
 800afd6:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800afda:	4a1c      	ldr	r2, [pc, #112]	; (800b04c <GPS_GPGGA_Parse+0x3f4>)
 800afdc:	fba2 1203 	umull	r1, r2, r2, r3
 800afe0:	0912      	lsrs	r2, r2, #4
 800afe2:	21fa      	movs	r1, #250	; 0xfa
 800afe4:	fb01 f202 	mul.w	r2, r1, r2
 800afe8:	1a9b      	subs	r3, r3, r2
 800afea:	b2db      	uxtb	r3, r3
 800afec:	461a      	mov	r2, r3
 800afee:	4b16      	ldr	r3, [pc, #88]	; (800b048 <GPS_GPGGA_Parse+0x3f0>)
 800aff0:	5c9b      	ldrb	r3, [r3, r2]
 800aff2:	3b30      	subs	r3, #48	; 0x30
 800aff4:	4618      	mov	r0, r3
 800aff6:	f7f5 faad 	bl	8000554 <__aeabi_i2d>
 800affa:	f04f 0200 	mov.w	r2, #0
 800affe:	4b14      	ldr	r3, [pc, #80]	; (800b050 <GPS_GPGGA_Parse+0x3f8>)
 800b000:	f7f5 fc3c 	bl	800087c <__aeabi_ddiv>
 800b004:	4602      	mov	r2, r0
 800b006:	460b      	mov	r3, r1
 800b008:	4614      	mov	r4, r2
 800b00a:	461d      	mov	r5, r3
 800b00c:	4b0d      	ldr	r3, [pc, #52]	; (800b044 <GPS_GPGGA_Parse+0x3ec>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	69db      	ldr	r3, [r3, #28]
 800b012:	4618      	mov	r0, r3
 800b014:	f7f5 fab0 	bl	8000578 <__aeabi_f2d>
 800b018:	4602      	mov	r2, r0
 800b01a:	460b      	mov	r3, r1
 800b01c:	4620      	mov	r0, r4
 800b01e:	4629      	mov	r1, r5
 800b020:	f7f5 f94c 	bl	80002bc <__adddf3>
 800b024:	4602      	mov	r2, r0
 800b026:	460b      	mov	r3, r1
 800b028:	4906      	ldr	r1, [pc, #24]	; (800b044 <GPS_GPGGA_Parse+0x3ec>)
 800b02a:	680c      	ldr	r4, [r1, #0]
 800b02c:	4610      	mov	r0, r2
 800b02e:	4619      	mov	r1, r3
 800b030:	f7f5 fdca 	bl	8000bc8 <__aeabi_d2f>
 800b034:	4603      	mov	r3, r0
 800b036:	61e3      	str	r3, [r4, #28]
		}
		return _gps->gpsState;
 800b038:	4b02      	ldr	r3, [pc, #8]	; (800b044 <GPS_GPGGA_Parse+0x3ec>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	}
}
 800b040:	4618      	mov	r0, r3
 800b042:	bdb0      	pop	{r4, r5, r7, pc}
 800b044:	20004f2c 	.word	0x20004f2c
 800b048:	20004e2c 	.word	0x20004e2c
 800b04c:	10624dd3 	.word	0x10624dd3
 800b050:	40240000 	.word	0x40240000
 800b054:	00000000 	.word	0x00000000

0800b058 <GPS_GPVTG_Parse>:
/////////////////////////////////////////////////////////////
/*
 * GPVTG verilerini çözer ve gps değerine atar	-hız bilgisi-
 */
GPS_State GPS_GPVTG_Parse()
{
 800b058:	b5b0      	push	{r4, r5, r7, lr}
 800b05a:	b082      	sub	sp, #8
 800b05c:	af00      	add	r7, sp, #0
	if(!GPS_CheckSumControl(&ringBuff.rxGps[ringBuff.tail]))
 800b05e:	4b70      	ldr	r3, [pc, #448]	; (800b220 <GPS_GPVTG_Parse+0x1c8>)
 800b060:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800b064:	b2db      	uxtb	r3, r3
 800b066:	461a      	mov	r2, r3
 800b068:	4b6d      	ldr	r3, [pc, #436]	; (800b220 <GPS_GPVTG_Parse+0x1c8>)
 800b06a:	4413      	add	r3, r2
 800b06c:	4618      	mov	r0, r3
 800b06e:	f000 f9c3 	bl	800b3f8 <GPS_CheckSumControl>
 800b072:	4603      	mov	r3, r0
 800b074:	2b00      	cmp	r3, #0
 800b076:	d101      	bne.n	800b07c <GPS_GPVTG_Parse+0x24>
	{
		return WRONG_DATA;
 800b078:	2301      	movs	r3, #1
 800b07a:	e1a7      	b.n	800b3cc <GPS_GPVTG_Parse+0x374>
	}
	else
	{
		TAIL_INCREASE_TO_COMMA;		// "GPVTG,"
 800b07c:	4b68      	ldr	r3, [pc, #416]	; (800b220 <GPS_GPVTG_Parse+0x1c8>)
 800b07e:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800b082:	b2db      	uxtb	r3, r3
 800b084:	1c5a      	adds	r2, r3, #1
 800b086:	b2d1      	uxtb	r1, r2
 800b088:	4a65      	ldr	r2, [pc, #404]	; (800b220 <GPS_GPVTG_Parse+0x1c8>)
 800b08a:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800b08e:	4a65      	ldr	r2, [pc, #404]	; (800b224 <GPS_GPVTG_Parse+0x1cc>)
 800b090:	fba2 1203 	umull	r1, r2, r2, r3
 800b094:	0912      	lsrs	r2, r2, #4
 800b096:	21fa      	movs	r1, #250	; 0xfa
 800b098:	fb01 f202 	mul.w	r2, r1, r2
 800b09c:	1a9b      	subs	r3, r3, r2
 800b09e:	b2db      	uxtb	r3, r3
 800b0a0:	461a      	mov	r2, r3
 800b0a2:	4b5f      	ldr	r3, [pc, #380]	; (800b220 <GPS_GPVTG_Parse+0x1c8>)
 800b0a4:	5c9b      	ldrb	r3, [r3, r2]
 800b0a6:	2b2c      	cmp	r3, #44	; 0x2c
 800b0a8:	d1e8      	bne.n	800b07c <GPS_GPVTG_Parse+0x24>
		TAIL_INCREASE_TO_COMMA;		//
 800b0aa:	4b5d      	ldr	r3, [pc, #372]	; (800b220 <GPS_GPVTG_Parse+0x1c8>)
 800b0ac:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800b0b0:	b2db      	uxtb	r3, r3
 800b0b2:	1c5a      	adds	r2, r3, #1
 800b0b4:	b2d1      	uxtb	r1, r2
 800b0b6:	4a5a      	ldr	r2, [pc, #360]	; (800b220 <GPS_GPVTG_Parse+0x1c8>)
 800b0b8:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800b0bc:	4a59      	ldr	r2, [pc, #356]	; (800b224 <GPS_GPVTG_Parse+0x1cc>)
 800b0be:	fba2 1203 	umull	r1, r2, r2, r3
 800b0c2:	0912      	lsrs	r2, r2, #4
 800b0c4:	21fa      	movs	r1, #250	; 0xfa
 800b0c6:	fb01 f202 	mul.w	r2, r1, r2
 800b0ca:	1a9b      	subs	r3, r3, r2
 800b0cc:	b2db      	uxtb	r3, r3
 800b0ce:	461a      	mov	r2, r3
 800b0d0:	4b53      	ldr	r3, [pc, #332]	; (800b220 <GPS_GPVTG_Parse+0x1c8>)
 800b0d2:	5c9b      	ldrb	r3, [r3, r2]
 800b0d4:	2b2c      	cmp	r3, #44	; 0x2c
 800b0d6:	d1e8      	bne.n	800b0aa <GPS_GPVTG_Parse+0x52>
		TAIL_INCREASE_TO_COMMA;
 800b0d8:	4b51      	ldr	r3, [pc, #324]	; (800b220 <GPS_GPVTG_Parse+0x1c8>)
 800b0da:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800b0de:	b2db      	uxtb	r3, r3
 800b0e0:	1c5a      	adds	r2, r3, #1
 800b0e2:	b2d1      	uxtb	r1, r2
 800b0e4:	4a4e      	ldr	r2, [pc, #312]	; (800b220 <GPS_GPVTG_Parse+0x1c8>)
 800b0e6:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800b0ea:	4a4e      	ldr	r2, [pc, #312]	; (800b224 <GPS_GPVTG_Parse+0x1cc>)
 800b0ec:	fba2 1203 	umull	r1, r2, r2, r3
 800b0f0:	0912      	lsrs	r2, r2, #4
 800b0f2:	21fa      	movs	r1, #250	; 0xfa
 800b0f4:	fb01 f202 	mul.w	r2, r1, r2
 800b0f8:	1a9b      	subs	r3, r3, r2
 800b0fa:	b2db      	uxtb	r3, r3
 800b0fc:	461a      	mov	r2, r3
 800b0fe:	4b48      	ldr	r3, [pc, #288]	; (800b220 <GPS_GPVTG_Parse+0x1c8>)
 800b100:	5c9b      	ldrb	r3, [r3, r2]
 800b102:	2b2c      	cmp	r3, #44	; 0x2c
 800b104:	d1e8      	bne.n	800b0d8 <GPS_GPVTG_Parse+0x80>
		TAIL_INCREASE_TO_COMMA;
 800b106:	4b46      	ldr	r3, [pc, #280]	; (800b220 <GPS_GPVTG_Parse+0x1c8>)
 800b108:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800b10c:	b2db      	uxtb	r3, r3
 800b10e:	1c5a      	adds	r2, r3, #1
 800b110:	b2d1      	uxtb	r1, r2
 800b112:	4a43      	ldr	r2, [pc, #268]	; (800b220 <GPS_GPVTG_Parse+0x1c8>)
 800b114:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800b118:	4a42      	ldr	r2, [pc, #264]	; (800b224 <GPS_GPVTG_Parse+0x1cc>)
 800b11a:	fba2 1203 	umull	r1, r2, r2, r3
 800b11e:	0912      	lsrs	r2, r2, #4
 800b120:	21fa      	movs	r1, #250	; 0xfa
 800b122:	fb01 f202 	mul.w	r2, r1, r2
 800b126:	1a9b      	subs	r3, r3, r2
 800b128:	b2db      	uxtb	r3, r3
 800b12a:	461a      	mov	r2, r3
 800b12c:	4b3c      	ldr	r3, [pc, #240]	; (800b220 <GPS_GPVTG_Parse+0x1c8>)
 800b12e:	5c9b      	ldrb	r3, [r3, r2]
 800b130:	2b2c      	cmp	r3, #44	; 0x2c
 800b132:	d1e8      	bne.n	800b106 <GPS_GPVTG_Parse+0xae>
		TAIL_INCREASE_TO_COMMA;
 800b134:	4b3a      	ldr	r3, [pc, #232]	; (800b220 <GPS_GPVTG_Parse+0x1c8>)
 800b136:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800b13a:	b2db      	uxtb	r3, r3
 800b13c:	1c5a      	adds	r2, r3, #1
 800b13e:	b2d1      	uxtb	r1, r2
 800b140:	4a37      	ldr	r2, [pc, #220]	; (800b220 <GPS_GPVTG_Parse+0x1c8>)
 800b142:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800b146:	4a37      	ldr	r2, [pc, #220]	; (800b224 <GPS_GPVTG_Parse+0x1cc>)
 800b148:	fba2 1203 	umull	r1, r2, r2, r3
 800b14c:	0912      	lsrs	r2, r2, #4
 800b14e:	21fa      	movs	r1, #250	; 0xfa
 800b150:	fb01 f202 	mul.w	r2, r1, r2
 800b154:	1a9b      	subs	r3, r3, r2
 800b156:	b2db      	uxtb	r3, r3
 800b158:	461a      	mov	r2, r3
 800b15a:	4b31      	ldr	r3, [pc, #196]	; (800b220 <GPS_GPVTG_Parse+0x1c8>)
 800b15c:	5c9b      	ldrb	r3, [r3, r2]
 800b15e:	2b2c      	cmp	r3, #44	; 0x2c
 800b160:	d1e8      	bne.n	800b134 <GPS_GPVTG_Parse+0xdc>
		TAIL_INCREASE_TO_COMMA;
 800b162:	4b2f      	ldr	r3, [pc, #188]	; (800b220 <GPS_GPVTG_Parse+0x1c8>)
 800b164:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800b168:	b2db      	uxtb	r3, r3
 800b16a:	1c5a      	adds	r2, r3, #1
 800b16c:	b2d1      	uxtb	r1, r2
 800b16e:	4a2c      	ldr	r2, [pc, #176]	; (800b220 <GPS_GPVTG_Parse+0x1c8>)
 800b170:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800b174:	4a2b      	ldr	r2, [pc, #172]	; (800b224 <GPS_GPVTG_Parse+0x1cc>)
 800b176:	fba2 1203 	umull	r1, r2, r2, r3
 800b17a:	0912      	lsrs	r2, r2, #4
 800b17c:	21fa      	movs	r1, #250	; 0xfa
 800b17e:	fb01 f202 	mul.w	r2, r1, r2
 800b182:	1a9b      	subs	r3, r3, r2
 800b184:	b2db      	uxtb	r3, r3
 800b186:	461a      	mov	r2, r3
 800b188:	4b25      	ldr	r3, [pc, #148]	; (800b220 <GPS_GPVTG_Parse+0x1c8>)
 800b18a:	5c9b      	ldrb	r3, [r3, r2]
 800b18c:	2b2c      	cmp	r3, #44	; 0x2c
 800b18e:	d1e8      	bne.n	800b162 <GPS_GPVTG_Parse+0x10a>
		TAIL_INCREASE_TO_COMMA;
 800b190:	4b23      	ldr	r3, [pc, #140]	; (800b220 <GPS_GPVTG_Parse+0x1c8>)
 800b192:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800b196:	b2db      	uxtb	r3, r3
 800b198:	1c5a      	adds	r2, r3, #1
 800b19a:	b2d1      	uxtb	r1, r2
 800b19c:	4a20      	ldr	r2, [pc, #128]	; (800b220 <GPS_GPVTG_Parse+0x1c8>)
 800b19e:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800b1a2:	4a20      	ldr	r2, [pc, #128]	; (800b224 <GPS_GPVTG_Parse+0x1cc>)
 800b1a4:	fba2 1203 	umull	r1, r2, r2, r3
 800b1a8:	0912      	lsrs	r2, r2, #4
 800b1aa:	21fa      	movs	r1, #250	; 0xfa
 800b1ac:	fb01 f202 	mul.w	r2, r1, r2
 800b1b0:	1a9b      	subs	r3, r3, r2
 800b1b2:	b2db      	uxtb	r3, r3
 800b1b4:	461a      	mov	r2, r3
 800b1b6:	4b1a      	ldr	r3, [pc, #104]	; (800b220 <GPS_GPVTG_Parse+0x1c8>)
 800b1b8:	5c9b      	ldrb	r3, [r3, r2]
 800b1ba:	2b2c      	cmp	r3, #44	; 0x2c
 800b1bc:	d1e8      	bne.n	800b190 <GPS_GPVTG_Parse+0x138>

		uint8_t tailValue1 = ringBuff.tail;
 800b1be:	4b18      	ldr	r3, [pc, #96]	; (800b220 <GPS_GPVTG_Parse+0x1c8>)
 800b1c0:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800b1c4:	71bb      	strb	r3, [r7, #6]
		TAIL_INCREASE_DOT;
 800b1c6:	4b16      	ldr	r3, [pc, #88]	; (800b220 <GPS_GPVTG_Parse+0x1c8>)
 800b1c8:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800b1cc:	b2db      	uxtb	r3, r3
 800b1ce:	1c5a      	adds	r2, r3, #1
 800b1d0:	b2d1      	uxtb	r1, r2
 800b1d2:	4a13      	ldr	r2, [pc, #76]	; (800b220 <GPS_GPVTG_Parse+0x1c8>)
 800b1d4:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800b1d8:	4a12      	ldr	r2, [pc, #72]	; (800b224 <GPS_GPVTG_Parse+0x1cc>)
 800b1da:	fba2 1203 	umull	r1, r2, r2, r3
 800b1de:	0912      	lsrs	r2, r2, #4
 800b1e0:	21fa      	movs	r1, #250	; 0xfa
 800b1e2:	fb01 f202 	mul.w	r2, r1, r2
 800b1e6:	1a9b      	subs	r3, r3, r2
 800b1e8:	b2db      	uxtb	r3, r3
 800b1ea:	461a      	mov	r2, r3
 800b1ec:	4b0c      	ldr	r3, [pc, #48]	; (800b220 <GPS_GPVTG_Parse+0x1c8>)
 800b1ee:	5c9b      	ldrb	r3, [r3, r2]
 800b1f0:	2b2e      	cmp	r3, #46	; 0x2e
 800b1f2:	d1e8      	bne.n	800b1c6 <GPS_GPVTG_Parse+0x16e>
		uint8_t tailValue2 = ringBuff.tail;
 800b1f4:	4b0a      	ldr	r3, [pc, #40]	; (800b220 <GPS_GPVTG_Parse+0x1c8>)
 800b1f6:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800b1fa:	717b      	strb	r3, [r7, #5]

		signed char counter= tailValue2 - tailValue1 - 2;
 800b1fc:	797a      	ldrb	r2, [r7, #5]
 800b1fe:	79bb      	ldrb	r3, [r7, #6]
 800b200:	1ad3      	subs	r3, r2, r3
 800b202:	b2db      	uxtb	r3, r3
 800b204:	3b02      	subs	r3, #2
 800b206:	b2db      	uxtb	r3, r3
 800b208:	71fb      	strb	r3, [r7, #7]
		ringBuff.tail = tailValue1;
 800b20a:	4a05      	ldr	r2, [pc, #20]	; (800b220 <GPS_GPVTG_Parse+0x1c8>)
 800b20c:	79bb      	ldrb	r3, [r7, #6]
 800b20e:	f882 30fa 	strb.w	r3, [r2, #250]	; 0xfa
		_gps->speed = 0;
 800b212:	4b05      	ldr	r3, [pc, #20]	; (800b228 <GPS_GPVTG_Parse+0x1d0>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	f04f 0200 	mov.w	r2, #0
 800b21a:	621a      	str	r2, [r3, #32]
		for(;counter >= 0; counter--)
 800b21c:	e042      	b.n	800b2a4 <GPS_GPVTG_Parse+0x24c>
 800b21e:	bf00      	nop
 800b220:	20004e2c 	.word	0x20004e2c
 800b224:	10624dd3 	.word	0x10624dd3
 800b228:	20004f2c 	.word	0x20004f2c
		{
			_gps->speed += (TAIL_READ - ASCII_NUMBER) * (uint32_t)pow(10,counter);
 800b22c:	4b6c      	ldr	r3, [pc, #432]	; (800b3e0 <GPS_GPVTG_Parse+0x388>)
 800b22e:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800b232:	b2db      	uxtb	r3, r3
 800b234:	4a6b      	ldr	r2, [pc, #428]	; (800b3e4 <GPS_GPVTG_Parse+0x38c>)
 800b236:	fba2 1203 	umull	r1, r2, r2, r3
 800b23a:	0912      	lsrs	r2, r2, #4
 800b23c:	21fa      	movs	r1, #250	; 0xfa
 800b23e:	fb01 f202 	mul.w	r2, r1, r2
 800b242:	1a9b      	subs	r3, r3, r2
 800b244:	b2db      	uxtb	r3, r3
 800b246:	461a      	mov	r2, r3
 800b248:	4b65      	ldr	r3, [pc, #404]	; (800b3e0 <GPS_GPVTG_Parse+0x388>)
 800b24a:	5c9b      	ldrb	r3, [r3, r2]
 800b24c:	3b30      	subs	r3, #48	; 0x30
 800b24e:	461c      	mov	r4, r3
 800b250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b254:	4618      	mov	r0, r3
 800b256:	f7f5 f97d 	bl	8000554 <__aeabi_i2d>
 800b25a:	4602      	mov	r2, r0
 800b25c:	460b      	mov	r3, r1
 800b25e:	ec43 2b11 	vmov	d1, r2, r3
 800b262:	ed9f 0b5d 	vldr	d0, [pc, #372]	; 800b3d8 <GPS_GPVTG_Parse+0x380>
 800b266:	f002 ff3f 	bl	800e0e8 <pow>
 800b26a:	ec53 2b10 	vmov	r2, r3, d0
 800b26e:	4610      	mov	r0, r2
 800b270:	4619      	mov	r1, r3
 800b272:	f7f5 fc89 	bl	8000b88 <__aeabi_d2uiz>
 800b276:	4603      	mov	r3, r0
 800b278:	fb03 f204 	mul.w	r2, r3, r4
 800b27c:	4b5a      	ldr	r3, [pc, #360]	; (800b3e8 <GPS_GPVTG_Parse+0x390>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	ed93 7a08 	vldr	s14, [r3, #32]
 800b284:	ee07 2a90 	vmov	s15, r2
 800b288:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b28c:	4b56      	ldr	r3, [pc, #344]	; (800b3e8 <GPS_GPVTG_Parse+0x390>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b294:	edc3 7a08 	vstr	s15, [r3, #32]
		for(;counter >= 0; counter--)
 800b298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b29c:	b2db      	uxtb	r3, r3
 800b29e:	3b01      	subs	r3, #1
 800b2a0:	b2db      	uxtb	r3, r3
 800b2a2:	71fb      	strb	r3, [r7, #7]
 800b2a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	dabf      	bge.n	800b22c <GPS_GPVTG_Parse+0x1d4>
		}
		ringBuff.tail = tailValue2;
 800b2ac:	4a4c      	ldr	r2, [pc, #304]	; (800b3e0 <GPS_GPVTG_Parse+0x388>)
 800b2ae:	797b      	ldrb	r3, [r7, #5]
 800b2b0:	f882 30fa 	strb.w	r3, [r2, #250]	; 0xfa

		_gps->speed += (TAIL_READ_P - ASCII_NUMBER) / 10.0 + (TAIL_READ_P - ASCII_NUMBER) / 100.0 + (TAIL_READ_P - ASCII_NUMBER) / 1000.0;
 800b2b4:	4b4a      	ldr	r3, [pc, #296]	; (800b3e0 <GPS_GPVTG_Parse+0x388>)
 800b2b6:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800b2ba:	b2db      	uxtb	r3, r3
 800b2bc:	1c5a      	adds	r2, r3, #1
 800b2be:	b2d1      	uxtb	r1, r2
 800b2c0:	4a47      	ldr	r2, [pc, #284]	; (800b3e0 <GPS_GPVTG_Parse+0x388>)
 800b2c2:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800b2c6:	4a47      	ldr	r2, [pc, #284]	; (800b3e4 <GPS_GPVTG_Parse+0x38c>)
 800b2c8:	fba2 1203 	umull	r1, r2, r2, r3
 800b2cc:	0912      	lsrs	r2, r2, #4
 800b2ce:	21fa      	movs	r1, #250	; 0xfa
 800b2d0:	fb01 f202 	mul.w	r2, r1, r2
 800b2d4:	1a9b      	subs	r3, r3, r2
 800b2d6:	b2db      	uxtb	r3, r3
 800b2d8:	461a      	mov	r2, r3
 800b2da:	4b41      	ldr	r3, [pc, #260]	; (800b3e0 <GPS_GPVTG_Parse+0x388>)
 800b2dc:	5c9b      	ldrb	r3, [r3, r2]
 800b2de:	3b30      	subs	r3, #48	; 0x30
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f7f5 f937 	bl	8000554 <__aeabi_i2d>
 800b2e6:	f04f 0200 	mov.w	r2, #0
 800b2ea:	4b40      	ldr	r3, [pc, #256]	; (800b3ec <GPS_GPVTG_Parse+0x394>)
 800b2ec:	f7f5 fac6 	bl	800087c <__aeabi_ddiv>
 800b2f0:	4602      	mov	r2, r0
 800b2f2:	460b      	mov	r3, r1
 800b2f4:	4614      	mov	r4, r2
 800b2f6:	461d      	mov	r5, r3
 800b2f8:	4b39      	ldr	r3, [pc, #228]	; (800b3e0 <GPS_GPVTG_Parse+0x388>)
 800b2fa:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800b2fe:	b2db      	uxtb	r3, r3
 800b300:	1c5a      	adds	r2, r3, #1
 800b302:	b2d1      	uxtb	r1, r2
 800b304:	4a36      	ldr	r2, [pc, #216]	; (800b3e0 <GPS_GPVTG_Parse+0x388>)
 800b306:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800b30a:	4a36      	ldr	r2, [pc, #216]	; (800b3e4 <GPS_GPVTG_Parse+0x38c>)
 800b30c:	fba2 1203 	umull	r1, r2, r2, r3
 800b310:	0912      	lsrs	r2, r2, #4
 800b312:	21fa      	movs	r1, #250	; 0xfa
 800b314:	fb01 f202 	mul.w	r2, r1, r2
 800b318:	1a9b      	subs	r3, r3, r2
 800b31a:	b2db      	uxtb	r3, r3
 800b31c:	461a      	mov	r2, r3
 800b31e:	4b30      	ldr	r3, [pc, #192]	; (800b3e0 <GPS_GPVTG_Parse+0x388>)
 800b320:	5c9b      	ldrb	r3, [r3, r2]
 800b322:	3b30      	subs	r3, #48	; 0x30
 800b324:	4618      	mov	r0, r3
 800b326:	f7f5 f915 	bl	8000554 <__aeabi_i2d>
 800b32a:	f04f 0200 	mov.w	r2, #0
 800b32e:	4b30      	ldr	r3, [pc, #192]	; (800b3f0 <GPS_GPVTG_Parse+0x398>)
 800b330:	f7f5 faa4 	bl	800087c <__aeabi_ddiv>
 800b334:	4602      	mov	r2, r0
 800b336:	460b      	mov	r3, r1
 800b338:	4620      	mov	r0, r4
 800b33a:	4629      	mov	r1, r5
 800b33c:	f7f4 ffbe 	bl	80002bc <__adddf3>
 800b340:	4602      	mov	r2, r0
 800b342:	460b      	mov	r3, r1
 800b344:	4614      	mov	r4, r2
 800b346:	461d      	mov	r5, r3
 800b348:	4b25      	ldr	r3, [pc, #148]	; (800b3e0 <GPS_GPVTG_Parse+0x388>)
 800b34a:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800b34e:	b2db      	uxtb	r3, r3
 800b350:	1c5a      	adds	r2, r3, #1
 800b352:	b2d1      	uxtb	r1, r2
 800b354:	4a22      	ldr	r2, [pc, #136]	; (800b3e0 <GPS_GPVTG_Parse+0x388>)
 800b356:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800b35a:	4a22      	ldr	r2, [pc, #136]	; (800b3e4 <GPS_GPVTG_Parse+0x38c>)
 800b35c:	fba2 1203 	umull	r1, r2, r2, r3
 800b360:	0912      	lsrs	r2, r2, #4
 800b362:	21fa      	movs	r1, #250	; 0xfa
 800b364:	fb01 f202 	mul.w	r2, r1, r2
 800b368:	1a9b      	subs	r3, r3, r2
 800b36a:	b2db      	uxtb	r3, r3
 800b36c:	461a      	mov	r2, r3
 800b36e:	4b1c      	ldr	r3, [pc, #112]	; (800b3e0 <GPS_GPVTG_Parse+0x388>)
 800b370:	5c9b      	ldrb	r3, [r3, r2]
 800b372:	3b30      	subs	r3, #48	; 0x30
 800b374:	4618      	mov	r0, r3
 800b376:	f7f5 f8ed 	bl	8000554 <__aeabi_i2d>
 800b37a:	f04f 0200 	mov.w	r2, #0
 800b37e:	4b1d      	ldr	r3, [pc, #116]	; (800b3f4 <GPS_GPVTG_Parse+0x39c>)
 800b380:	f7f5 fa7c 	bl	800087c <__aeabi_ddiv>
 800b384:	4602      	mov	r2, r0
 800b386:	460b      	mov	r3, r1
 800b388:	4620      	mov	r0, r4
 800b38a:	4629      	mov	r1, r5
 800b38c:	f7f4 ff96 	bl	80002bc <__adddf3>
 800b390:	4602      	mov	r2, r0
 800b392:	460b      	mov	r3, r1
 800b394:	4614      	mov	r4, r2
 800b396:	461d      	mov	r5, r3
 800b398:	4b13      	ldr	r3, [pc, #76]	; (800b3e8 <GPS_GPVTG_Parse+0x390>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	6a1b      	ldr	r3, [r3, #32]
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f7f5 f8ea 	bl	8000578 <__aeabi_f2d>
 800b3a4:	4602      	mov	r2, r0
 800b3a6:	460b      	mov	r3, r1
 800b3a8:	4620      	mov	r0, r4
 800b3aa:	4629      	mov	r1, r5
 800b3ac:	f7f4 ff86 	bl	80002bc <__adddf3>
 800b3b0:	4602      	mov	r2, r0
 800b3b2:	460b      	mov	r3, r1
 800b3b4:	490c      	ldr	r1, [pc, #48]	; (800b3e8 <GPS_GPVTG_Parse+0x390>)
 800b3b6:	680c      	ldr	r4, [r1, #0]
 800b3b8:	4610      	mov	r0, r2
 800b3ba:	4619      	mov	r1, r3
 800b3bc:	f7f5 fc04 	bl	8000bc8 <__aeabi_d2f>
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	6223      	str	r3, [r4, #32]

		return _gps->gpsState;
 800b3c4:	4b08      	ldr	r3, [pc, #32]	; (800b3e8 <GPS_GPVTG_Parse+0x390>)
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	}
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	3708      	adds	r7, #8
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bdb0      	pop	{r4, r5, r7, pc}
 800b3d4:	f3af 8000 	nop.w
 800b3d8:	00000000 	.word	0x00000000
 800b3dc:	40240000 	.word	0x40240000
 800b3e0:	20004e2c 	.word	0x20004e2c
 800b3e4:	10624dd3 	.word	0x10624dd3
 800b3e8:	20004f2c 	.word	0x20004f2c
 800b3ec:	40240000 	.word	0x40240000
 800b3f0:	40590000 	.word	0x40590000
 800b3f4:	408f4000 	.word	0x408f4000

0800b3f8 <GPS_CheckSumControl>:

/*
 * tüm değerleri XOR işlemine tabi tutarak bir checksum değeri üretir
 */
uint8_t GPS_CheckSumControl(uint8_t *ptr)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b086      	sub	sp, #24
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
	int i = 0;
 800b400:	2300      	movs	r3, #0
 800b402:	617b      	str	r3, [r7, #20]
	int check = 0;
 800b404:	2300      	movs	r3, #0
 800b406:	613b      	str	r3, [r7, #16]
	char checHexa[5];

	while(ptr[i] != '*')
 800b408:	e00a      	b.n	800b420 <GPS_CheckSumControl+0x28>
	{
		check ^= ptr[i++];
 800b40a:	697b      	ldr	r3, [r7, #20]
 800b40c:	1c5a      	adds	r2, r3, #1
 800b40e:	617a      	str	r2, [r7, #20]
 800b410:	461a      	mov	r2, r3
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	4413      	add	r3, r2
 800b416:	781b      	ldrb	r3, [r3, #0]
 800b418:	461a      	mov	r2, r3
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	4053      	eors	r3, r2
 800b41e:	613b      	str	r3, [r7, #16]
	while(ptr[i] != '*')
 800b420:	697b      	ldr	r3, [r7, #20]
 800b422:	687a      	ldr	r2, [r7, #4]
 800b424:	4413      	add	r3, r2
 800b426:	781b      	ldrb	r3, [r3, #0]
 800b428:	2b2a      	cmp	r3, #42	; 0x2a
 800b42a:	d1ee      	bne.n	800b40a <GPS_CheckSumControl+0x12>
	}
	sprintf(checHexa,"%x",check);
 800b42c:	f107 0308 	add.w	r3, r7, #8
 800b430:	693a      	ldr	r2, [r7, #16]
 800b432:	490d      	ldr	r1, [pc, #52]	; (800b468 <GPS_CheckSumControl+0x70>)
 800b434:	4618      	mov	r0, r3
 800b436:	f002 f949 	bl	800d6cc <siprintf>
	return !strncmp((char*)&ptr[++i], checHexa,2);
 800b43a:	697b      	ldr	r3, [r7, #20]
 800b43c:	3301      	adds	r3, #1
 800b43e:	617b      	str	r3, [r7, #20]
 800b440:	697b      	ldr	r3, [r7, #20]
 800b442:	687a      	ldr	r2, [r7, #4]
 800b444:	4413      	add	r3, r2
 800b446:	f107 0108 	add.w	r1, r7, #8
 800b44a:	2202      	movs	r2, #2
 800b44c:	4618      	mov	r0, r3
 800b44e:	f002 f965 	bl	800d71c <strncmp>
 800b452:	4603      	mov	r3, r0
 800b454:	2b00      	cmp	r3, #0
 800b456:	bf0c      	ite	eq
 800b458:	2301      	moveq	r3, #1
 800b45a:	2300      	movne	r3, #0
 800b45c:	b2db      	uxtb	r3, r3
}
 800b45e:	4618      	mov	r0, r3
 800b460:	3718      	adds	r7, #24
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}
 800b466:	bf00      	nop
 800b468:	0800f478 	.word	0x0800f478

0800b46c <UGV_motorInit>:
/**
 * @brief initialize the timer pwm setting to driver the motor
 * @return none
 */
void UGV_motorInit()
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	af00      	add	r7, sp, #0
	RCFilter_Init(&rcFilterForward, 0.05f, 0.05f);
 800b470:	eddf 0a20 	vldr	s1, [pc, #128]	; 800b4f4 <UGV_motorInit+0x88>
 800b474:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 800b4f4 <UGV_motorInit+0x88>
 800b478:	481f      	ldr	r0, [pc, #124]	; (800b4f8 <UGV_motorInit+0x8c>)
 800b47a:	f001 f8df 	bl	800c63c <RCFilter_Init>
	RCFilter_Init(&rcFilterBackward, 0.05f, 0.05f);
 800b47e:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800b4f4 <UGV_motorInit+0x88>
 800b482:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 800b4f4 <UGV_motorInit+0x88>
 800b486:	481d      	ldr	r0, [pc, #116]	; (800b4fc <UGV_motorInit+0x90>)
 800b488:	f001 f8d8 	bl	800c63c <RCFilter_Init>
	RCFilter_Init(&rcFilterRight, 0.65f, 0.65f);
 800b48c:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800b500 <UGV_motorInit+0x94>
 800b490:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 800b500 <UGV_motorInit+0x94>
 800b494:	481b      	ldr	r0, [pc, #108]	; (800b504 <UGV_motorInit+0x98>)
 800b496:	f001 f8d1 	bl	800c63c <RCFilter_Init>
	RCFilter_Init(&rcFilterLeft, 0.65f, 0.65f);
 800b49a:	eddf 0a19 	vldr	s1, [pc, #100]	; 800b500 <UGV_motorInit+0x94>
 800b49e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800b500 <UGV_motorInit+0x94>
 800b4a2:	4819      	ldr	r0, [pc, #100]	; (800b508 <UGV_motorInit+0x9c>)
 800b4a4:	f001 f8ca 	bl	800c63c <RCFilter_Init>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800b4a8:	2100      	movs	r1, #0
 800b4aa:	4818      	ldr	r0, [pc, #96]	; (800b50c <UGV_motorInit+0xa0>)
 800b4ac:	f7f9 ffae 	bl	800540c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800b4b0:	2104      	movs	r1, #4
 800b4b2:	4816      	ldr	r0, [pc, #88]	; (800b50c <UGV_motorInit+0xa0>)
 800b4b4:	f7f9 ffaa 	bl	800540c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800b4b8:	2100      	movs	r1, #0
 800b4ba:	4815      	ldr	r0, [pc, #84]	; (800b510 <UGV_motorInit+0xa4>)
 800b4bc:	f7f9 ffa6 	bl	800540c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800b4c0:	2100      	movs	r1, #0
 800b4c2:	4814      	ldr	r0, [pc, #80]	; (800b514 <UGV_motorInit+0xa8>)
 800b4c4:	f7f9 ffa2 	bl	800540c <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800b4c8:	4b10      	ldr	r3, [pc, #64]	; (800b50c <UGV_motorInit+0xa0>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 800b4d0:	4b0e      	ldr	r3, [pc, #56]	; (800b50c <UGV_motorInit+0xa0>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800b4d8:	4b0d      	ldr	r3, [pc, #52]	; (800b510 <UGV_motorInit+0xa4>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	2200      	movs	r2, #0
 800b4de:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 800b4e0:	4b0c      	ldr	r3, [pc, #48]	; (800b514 <UGV_motorInit+0xa8>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	635a      	str	r2, [r3, #52]	; 0x34

    PIDController_Init(&pid);
 800b4e8:	480b      	ldr	r0, [pc, #44]	; (800b518 <UGV_motorInit+0xac>)
 800b4ea:	f000 fc69 	bl	800bdc0 <PIDController_Init>
}
 800b4ee:	bf00      	nop
 800b4f0:	bd80      	pop	{r7, pc}
 800b4f2:	bf00      	nop
 800b4f4:	3d4ccccd 	.word	0x3d4ccccd
 800b4f8:	20004f38 	.word	0x20004f38
 800b4fc:	20004f48 	.word	0x20004f48
 800b500:	3f266666 	.word	0x3f266666
 800b504:	20004f58 	.word	0x20004f58
 800b508:	20004f68 	.word	0x20004f68
 800b50c:	20000228 	.word	0x20000228
 800b510:	200002b8 	.word	0x200002b8
 800b514:	20000300 	.word	0x20000300
 800b518:	20000010 	.word	0x20000010

0800b51c <UGV_motorDrive>:
 * @brief read the channel's adc values and call the neaded functions
 * @param[in] rcChannel global variable
 * @return none
 */
void UGV_motorDrive(RcChannel * rcChannel, float azimuthAngle)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b082      	sub	sp, #8
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
 800b524:	ed87 0a00 	vstr	s0, [r7]
	//!< rc transmitter lock
	if(startFlag == 0)
 800b528:	4b19      	ldr	r3, [pc, #100]	; (800b590 <UGV_motorDrive+0x74>)
 800b52a:	781b      	ldrb	r3, [r3, #0]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d11d      	bne.n	800b56c <UGV_motorDrive+0x50>
	{
		if((rcChannel->channel2<=(CHANNEL_DOWN + CHANNEL_ERROR)) && (rcChannel->channel1>=(CHANNEL_UP - CHANNEL_ERROR)))
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	885b      	ldrh	r3, [r3, #2]
 800b534:	f5b3 6f93 	cmp.w	r3, #1176	; 0x498
 800b538:	d218      	bcs.n	800b56c <UGV_motorDrive+0x50>
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	881b      	ldrh	r3, [r3, #0]
 800b53e:	f240 7252 	movw	r2, #1874	; 0x752
 800b542:	4293      	cmp	r3, r2
 800b544:	d912      	bls.n	800b56c <UGV_motorDrive+0x50>
		{
			while(!((rcChannel->channel1>=CHANNEL_MIDDLE) && (rcChannel->channel2>=CHANNEL_MIDDLE)))
 800b546:	e002      	b.n	800b54e <UGV_motorDrive+0x32>
			{
				HAL_IWDG_Refresh(&hiwdg);
 800b548:	4812      	ldr	r0, [pc, #72]	; (800b594 <UGV_motorDrive+0x78>)
 800b54a:	f7f8 fb65 	bl	8003c18 <HAL_IWDG_Refresh>
			while(!((rcChannel->channel1>=CHANNEL_MIDDLE) && (rcChannel->channel2>=CHANNEL_MIDDLE)))
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	881b      	ldrh	r3, [r3, #0]
 800b552:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800b556:	4293      	cmp	r3, r2
 800b558:	d9f6      	bls.n	800b548 <UGV_motorDrive+0x2c>
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	885b      	ldrh	r3, [r3, #2]
 800b55e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800b562:	4293      	cmp	r3, r2
 800b564:	d9f0      	bls.n	800b548 <UGV_motorDrive+0x2c>
			}
			startFlag = 1;
 800b566:	4b0a      	ldr	r3, [pc, #40]	; (800b590 <UGV_motorDrive+0x74>)
 800b568:	2201      	movs	r2, #1
 800b56a:	701a      	strb	r2, [r3, #0]
		}
	}

	if(startFlag)
 800b56c:	4b08      	ldr	r3, [pc, #32]	; (800b590 <UGV_motorDrive+0x74>)
 800b56e:	781b      	ldrb	r3, [r3, #0]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d009      	beq.n	800b588 <UGV_motorDrive+0x6c>
//					rcChannel->channel1 = (rcChannel->channel1 < CHANNEL_DOWN) ? CHANNEL_DOWN : rcChannel->channel1;
//				}
//			}
//		}

		motorUpDown(rcChannel->channel2);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	885b      	ldrh	r3, [r3, #2]
 800b578:	4618      	mov	r0, r3
 800b57a:	f000 f80d 	bl	800b598 <motorUpDown>
		motorRightLeft(rcChannel->channel1);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	881b      	ldrh	r3, [r3, #0]
 800b582:	4618      	mov	r0, r3
 800b584:	f000 f8fe 	bl	800b784 <motorRightLeft>
	}
}
 800b588:	bf00      	nop
 800b58a:	3708      	adds	r7, #8
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}
 800b590:	20004f34 	.word	0x20004f34
 800b594:	20000120 	.word	0x20000120

0800b598 <motorUpDown>:
 * @brief control the motor forward and backward
 * @param[in] read the channel2 adc value
 * @return none
 */
static void motorUpDown(uint16_t adcVal)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b084      	sub	sp, #16
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	4603      	mov	r3, r0
 800b5a0:	80fb      	strh	r3, [r7, #6]
	float pwmDuty;

	if(adcVal > (CHANNEL_MIDDLE + CHANNEL_ERROR))
 800b5a2:	88fb      	ldrh	r3, [r7, #6]
 800b5a4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b5a8:	d954      	bls.n	800b654 <motorUpDown+0xbc>
	{
		//clear the backward motor's pwm
		RIGHT_MOTOR_BACKWARD(0);
 800b5aa:	4b6c      	ldr	r3, [pc, #432]	; (800b75c <motorUpDown+0x1c4>)
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	639a      	str	r2, [r3, #56]	; 0x38
		LEFT_MOTOR_BACKWARD(0);
 800b5b2:	4b6b      	ldr	r3, [pc, #428]	; (800b760 <motorUpDown+0x1c8>)
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	635a      	str	r2, [r3, #52]	; 0x34

		// if channel value between 1600 - 1950, pwmDuty can be 0-350
		pwmDuty = adcVal - (CHANNEL_MIDDLE + CHANNEL_ERROR);
 800b5ba:	88fb      	ldrh	r3, [r7, #6]
 800b5bc:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 800b5c0:	ee07 3a90 	vmov	s15, r3
 800b5c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b5c8:	edc7 7a03 	vstr	s15, [r7, #12]

		//set the duty map 0-100
		pwmDuty = ((pwmDuty / CHANNEL_RANGE) * 100.0f);
 800b5cc:	ed97 7a03 	vldr	s14, [r7, #12]
 800b5d0:	eddf 6a64 	vldr	s13, [pc, #400]	; 800b764 <motorUpDown+0x1cc>
 800b5d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b5d8:	ed9f 7a63 	vldr	s14, [pc, #396]	; 800b768 <motorUpDown+0x1d0>
 800b5dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b5e0:	edc7 7a03 	vstr	s15, [r7, #12]
		//limit the duty to 100
		pwmDuty = (pwmDuty > 100)? 100 : pwmDuty;
 800b5e4:	edd7 7a03 	vldr	s15, [r7, #12]
 800b5e8:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800b768 <motorUpDown+0x1d0>
 800b5ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b5f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5f4:	dd01      	ble.n	800b5fa <motorUpDown+0x62>
 800b5f6:	4b5d      	ldr	r3, [pc, #372]	; (800b76c <motorUpDown+0x1d4>)
 800b5f8:	e000      	b.n	800b5fc <motorUpDown+0x64>
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	60fb      	str	r3, [r7, #12]

		//rc filter	pwm duty range 0-100
		pwmDuty = RCFilter_Update(&rcFilterForward, pwmDuty);
 800b5fe:	ed97 0a03 	vldr	s0, [r7, #12]
 800b602:	485b      	ldr	r0, [pc, #364]	; (800b770 <motorUpDown+0x1d8>)
 800b604:	f001 f858 	bl	800c6b8 <RCFilter_Update>
 800b608:	ed87 0a03 	vstr	s0, [r7, #12]

		RIGHT_MOTOR_FORWARD((uint8_t)pwmDuty);
 800b60c:	edd7 7a03 	vldr	s15, [r7, #12]
 800b610:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b614:	edc7 7a00 	vstr	s15, [r7]
 800b618:	783b      	ldrb	r3, [r7, #0]
 800b61a:	b2da      	uxtb	r2, r3
 800b61c:	4b4f      	ldr	r3, [pc, #316]	; (800b75c <motorUpDown+0x1c4>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	635a      	str	r2, [r3, #52]	; 0x34
		LEFT_MOTOR_FORWARD((uint8_t)pwmDuty);
 800b622:	edd7 7a03 	vldr	s15, [r7, #12]
 800b626:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b62a:	edc7 7a00 	vstr	s15, [r7]
 800b62e:	783b      	ldrb	r3, [r7, #0]
 800b630:	b2da      	uxtb	r2, r3
 800b632:	4b50      	ldr	r3, [pc, #320]	; (800b774 <motorUpDown+0x1dc>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	635a      	str	r2, [r3, #52]	; 0x34

		motorInf.direction = FORWARD;
 800b638:	4b4f      	ldr	r3, [pc, #316]	; (800b778 <motorUpDown+0x1e0>)
 800b63a:	2200      	movs	r2, #0
 800b63c:	701a      	strb	r2, [r3, #0]
		motorInf.forwardPwm = pwmDuty;
 800b63e:	edd7 7a03 	vldr	s15, [r7, #12]
 800b642:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b646:	edc7 7a00 	vstr	s15, [r7]
 800b64a:	783b      	ldrb	r3, [r7, #0]
 800b64c:	b2da      	uxtb	r2, r3
 800b64e:	4b4a      	ldr	r3, [pc, #296]	; (800b778 <motorUpDown+0x1e0>)
 800b650:	705a      	strb	r2, [r3, #1]
		LEFT_MOTOR_BACKWARD((uint8_t)pwmDuty);

		motorInf.direction = BACKWARD;
		motorInf.forwardPwm = pwmDuty;
	}
}
 800b652:	e07e      	b.n	800b752 <motorUpDown+0x1ba>
	else if((adcVal < (CHANNEL_MIDDLE + CHANNEL_ERROR)) && (adcVal > (CHANNEL_MIDDLE - CHANNEL_ERROR)))
 800b654:	88fb      	ldrh	r3, [r7, #6]
 800b656:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b65a:	d225      	bcs.n	800b6a8 <motorUpDown+0x110>
 800b65c:	88fb      	ldrh	r3, [r7, #6]
 800b65e:	f240 52aa 	movw	r2, #1450	; 0x5aa
 800b662:	4293      	cmp	r3, r2
 800b664:	d920      	bls.n	800b6a8 <motorUpDown+0x110>
		RIGHT_MOTOR_FORWARD(0);
 800b666:	4b3d      	ldr	r3, [pc, #244]	; (800b75c <motorUpDown+0x1c4>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	2200      	movs	r2, #0
 800b66c:	635a      	str	r2, [r3, #52]	; 0x34
		LEFT_MOTOR_FORWARD(0);
 800b66e:	4b41      	ldr	r3, [pc, #260]	; (800b774 <motorUpDown+0x1dc>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	2200      	movs	r2, #0
 800b674:	635a      	str	r2, [r3, #52]	; 0x34
		RIGHT_MOTOR_BACKWARD(0);
 800b676:	4b39      	ldr	r3, [pc, #228]	; (800b75c <motorUpDown+0x1c4>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	2200      	movs	r2, #0
 800b67c:	639a      	str	r2, [r3, #56]	; 0x38
		LEFT_MOTOR_BACKWARD(0);
 800b67e:	4b38      	ldr	r3, [pc, #224]	; (800b760 <motorUpDown+0x1c8>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	2200      	movs	r2, #0
 800b684:	635a      	str	r2, [r3, #52]	; 0x34
		RCFilter_Update(&rcFilterForward, 0);
 800b686:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 800b77c <motorUpDown+0x1e4>
 800b68a:	4839      	ldr	r0, [pc, #228]	; (800b770 <motorUpDown+0x1d8>)
 800b68c:	f001 f814 	bl	800c6b8 <RCFilter_Update>
		RCFilter_Update(&rcFilterBackward, 0);
 800b690:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 800b77c <motorUpDown+0x1e4>
 800b694:	483a      	ldr	r0, [pc, #232]	; (800b780 <motorUpDown+0x1e8>)
 800b696:	f001 f80f 	bl	800c6b8 <RCFilter_Update>
		motorInf.direction = IDLE;
 800b69a:	4b37      	ldr	r3, [pc, #220]	; (800b778 <motorUpDown+0x1e0>)
 800b69c:	2201      	movs	r2, #1
 800b69e:	701a      	strb	r2, [r3, #0]
		motorInf.forwardPwm = 0;
 800b6a0:	4b35      	ldr	r3, [pc, #212]	; (800b778 <motorUpDown+0x1e0>)
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	705a      	strb	r2, [r3, #1]
}
 800b6a6:	e054      	b.n	800b752 <motorUpDown+0x1ba>
		RIGHT_MOTOR_FORWARD(0);
 800b6a8:	4b2c      	ldr	r3, [pc, #176]	; (800b75c <motorUpDown+0x1c4>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	635a      	str	r2, [r3, #52]	; 0x34
		LEFT_MOTOR_FORWARD(0);
 800b6b0:	4b30      	ldr	r3, [pc, #192]	; (800b774 <motorUpDown+0x1dc>)
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	635a      	str	r2, [r3, #52]	; 0x34
		pwmDuty = (CHANNEL_MIDDLE - CHANNEL_ERROR) - adcVal;
 800b6b8:	88fb      	ldrh	r3, [r7, #6]
 800b6ba:	f5c3 63b5 	rsb	r3, r3, #1448	; 0x5a8
 800b6be:	3302      	adds	r3, #2
 800b6c0:	ee07 3a90 	vmov	s15, r3
 800b6c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b6c8:	edc7 7a03 	vstr	s15, [r7, #12]
		pwmDuty = ((pwmDuty / CHANNEL_RANGE) * 100.0f);
 800b6cc:	ed97 7a03 	vldr	s14, [r7, #12]
 800b6d0:	eddf 6a24 	vldr	s13, [pc, #144]	; 800b764 <motorUpDown+0x1cc>
 800b6d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b6d8:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800b768 <motorUpDown+0x1d0>
 800b6dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b6e0:	edc7 7a03 	vstr	s15, [r7, #12]
		pwmDuty = (pwmDuty > 100)? 100 : pwmDuty;
 800b6e4:	edd7 7a03 	vldr	s15, [r7, #12]
 800b6e8:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800b768 <motorUpDown+0x1d0>
 800b6ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b6f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6f4:	dd01      	ble.n	800b6fa <motorUpDown+0x162>
 800b6f6:	4b1d      	ldr	r3, [pc, #116]	; (800b76c <motorUpDown+0x1d4>)
 800b6f8:	e000      	b.n	800b6fc <motorUpDown+0x164>
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	60fb      	str	r3, [r7, #12]
		pwmDuty = RCFilter_Update(&rcFilterBackward, pwmDuty);
 800b6fe:	ed97 0a03 	vldr	s0, [r7, #12]
 800b702:	481f      	ldr	r0, [pc, #124]	; (800b780 <motorUpDown+0x1e8>)
 800b704:	f000 ffd8 	bl	800c6b8 <RCFilter_Update>
 800b708:	ed87 0a03 	vstr	s0, [r7, #12]
		RIGHT_MOTOR_BACKWARD((uint8_t)pwmDuty);
 800b70c:	edd7 7a03 	vldr	s15, [r7, #12]
 800b710:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b714:	edc7 7a00 	vstr	s15, [r7]
 800b718:	783b      	ldrb	r3, [r7, #0]
 800b71a:	b2da      	uxtb	r2, r3
 800b71c:	4b0f      	ldr	r3, [pc, #60]	; (800b75c <motorUpDown+0x1c4>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	639a      	str	r2, [r3, #56]	; 0x38
		LEFT_MOTOR_BACKWARD((uint8_t)pwmDuty);
 800b722:	edd7 7a03 	vldr	s15, [r7, #12]
 800b726:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b72a:	edc7 7a00 	vstr	s15, [r7]
 800b72e:	783b      	ldrb	r3, [r7, #0]
 800b730:	b2da      	uxtb	r2, r3
 800b732:	4b0b      	ldr	r3, [pc, #44]	; (800b760 <motorUpDown+0x1c8>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	635a      	str	r2, [r3, #52]	; 0x34
		motorInf.direction = BACKWARD;
 800b738:	4b0f      	ldr	r3, [pc, #60]	; (800b778 <motorUpDown+0x1e0>)
 800b73a:	2202      	movs	r2, #2
 800b73c:	701a      	strb	r2, [r3, #0]
		motorInf.forwardPwm = pwmDuty;
 800b73e:	edd7 7a03 	vldr	s15, [r7, #12]
 800b742:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b746:	edc7 7a00 	vstr	s15, [r7]
 800b74a:	783b      	ldrb	r3, [r7, #0]
 800b74c:	b2da      	uxtb	r2, r3
 800b74e:	4b0a      	ldr	r3, [pc, #40]	; (800b778 <motorUpDown+0x1e0>)
 800b750:	705a      	strb	r2, [r3, #1]
}
 800b752:	bf00      	nop
 800b754:	3710      	adds	r7, #16
 800b756:	46bd      	mov	sp, r7
 800b758:	bd80      	pop	{r7, pc}
 800b75a:	bf00      	nop
 800b75c:	20000228 	.word	0x20000228
 800b760:	200002b8 	.word	0x200002b8
 800b764:	43af0000 	.word	0x43af0000
 800b768:	42c80000 	.word	0x42c80000
 800b76c:	42c80000 	.word	0x42c80000
 800b770:	20004f38 	.word	0x20004f38
 800b774:	20000300 	.word	0x20000300
 800b778:	20004f78 	.word	0x20004f78
 800b77c:	00000000 	.word	0x00000000
 800b780:	20004f48 	.word	0x20004f48

0800b784 <motorRightLeft>:
 * @brief control the motor right and left
 * @param[in] read the channel1 adc value
 * @return none
 */
static void motorRightLeft(uint16_t adcVal)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b086      	sub	sp, #24
 800b788:	af00      	add	r7, sp, #0
 800b78a:	4603      	mov	r3, r0
 800b78c:	80fb      	strh	r3, [r7, #6]
	float pwmDuty;
	float rightMotorPwm;
	float leftMotorPwm;

	if(adcVal > (CHANNEL_MIDDLE + CHANNEL_ERROR))
 800b78e:	88fb      	ldrh	r3, [r7, #6]
 800b790:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b794:	f240 8163 	bls.w	800ba5e <motorRightLeft+0x2da>
	{
		if(motorInf.direction == FORWARD)
 800b798:	4bbb      	ldr	r3, [pc, #748]	; (800ba88 <motorRightLeft+0x304>)
 800b79a:	781b      	ldrb	r3, [r3, #0]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	f040 8090 	bne.w	800b8c2 <motorRightLeft+0x13e>
		{
			// if channel value between 1550 - 1950, pwmDuty can be 0-400
			pwmDuty = adcVal - (CHANNEL_MIDDLE + CHANNEL_ERROR);
 800b7a2:	88fb      	ldrh	r3, [r7, #6]
 800b7a4:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 800b7a8:	ee07 3a90 	vmov	s15, r3
 800b7ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b7b0:	edc7 7a05 	vstr	s15, [r7, #20]

			//set the duty map 0-100
			pwmDuty = ((pwmDuty / CHANNEL_RANGE) * 100.0f);
 800b7b4:	ed97 7a05 	vldr	s14, [r7, #20]
 800b7b8:	eddf 6ab4 	vldr	s13, [pc, #720]	; 800ba8c <motorRightLeft+0x308>
 800b7bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b7c0:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 800ba90 <motorRightLeft+0x30c>
 800b7c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b7c8:	edc7 7a05 	vstr	s15, [r7, #20]

			//add and sub %10 percent from the left and right motor
			leftMotorPwm = motorInf.forwardPwm + pwmDuty * 0.7f;
 800b7cc:	4bae      	ldr	r3, [pc, #696]	; (800ba88 <motorRightLeft+0x304>)
 800b7ce:	785b      	ldrb	r3, [r3, #1]
 800b7d0:	ee07 3a90 	vmov	s15, r3
 800b7d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b7d8:	edd7 7a05 	vldr	s15, [r7, #20]
 800b7dc:	eddf 6aad 	vldr	s13, [pc, #692]	; 800ba94 <motorRightLeft+0x310>
 800b7e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b7e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b7e8:	edc7 7a04 	vstr	s15, [r7, #16]
			rightMotorPwm = motorInf.forwardPwm - pwmDuty * 0.7f;
 800b7ec:	4ba6      	ldr	r3, [pc, #664]	; (800ba88 <motorRightLeft+0x304>)
 800b7ee:	785b      	ldrb	r3, [r3, #1]
 800b7f0:	ee07 3a90 	vmov	s15, r3
 800b7f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b7f8:	edd7 7a05 	vldr	s15, [r7, #20]
 800b7fc:	eddf 6aa5 	vldr	s13, [pc, #660]	; 800ba94 <motorRightLeft+0x310>
 800b800:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b804:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b808:	edc7 7a03 	vstr	s15, [r7, #12]

			leftMotorPwm = (leftMotorPwm > 100) ? 100 : leftMotorPwm;
 800b80c:	edd7 7a04 	vldr	s15, [r7, #16]
 800b810:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 800ba90 <motorRightLeft+0x30c>
 800b814:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b81c:	dd01      	ble.n	800b822 <motorRightLeft+0x9e>
 800b81e:	4b9e      	ldr	r3, [pc, #632]	; (800ba98 <motorRightLeft+0x314>)
 800b820:	e000      	b.n	800b824 <motorRightLeft+0xa0>
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	613b      	str	r3, [r7, #16]
			leftMotorPwm = (leftMotorPwm < 0) ? 0 : leftMotorPwm;
 800b826:	edd7 7a04 	vldr	s15, [r7, #16]
 800b82a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b82e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b832:	d502      	bpl.n	800b83a <motorRightLeft+0xb6>
 800b834:	f04f 0300 	mov.w	r3, #0
 800b838:	e000      	b.n	800b83c <motorRightLeft+0xb8>
 800b83a:	693b      	ldr	r3, [r7, #16]
 800b83c:	613b      	str	r3, [r7, #16]

			rightMotorPwm = (rightMotorPwm > 100) ? 100 : rightMotorPwm;
 800b83e:	edd7 7a03 	vldr	s15, [r7, #12]
 800b842:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800ba90 <motorRightLeft+0x30c>
 800b846:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b84a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b84e:	dd01      	ble.n	800b854 <motorRightLeft+0xd0>
 800b850:	4b91      	ldr	r3, [pc, #580]	; (800ba98 <motorRightLeft+0x314>)
 800b852:	e000      	b.n	800b856 <motorRightLeft+0xd2>
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	60fb      	str	r3, [r7, #12]
			rightMotorPwm = (rightMotorPwm < 0) ? 0 : rightMotorPwm;
 800b858:	edd7 7a03 	vldr	s15, [r7, #12]
 800b85c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b864:	d502      	bpl.n	800b86c <motorRightLeft+0xe8>
 800b866:	f04f 0300 	mov.w	r3, #0
 800b86a:	e000      	b.n	800b86e <motorRightLeft+0xea>
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	60fb      	str	r3, [r7, #12]

			rcFilterRight.out[0] = rcFilterForward.out[0];
 800b870:	4b8a      	ldr	r3, [pc, #552]	; (800ba9c <motorRightLeft+0x318>)
 800b872:	689b      	ldr	r3, [r3, #8]
 800b874:	4a8a      	ldr	r2, [pc, #552]	; (800baa0 <motorRightLeft+0x31c>)
 800b876:	6093      	str	r3, [r2, #8]
			rcFilterLeft.out[0] = rcFilterForward.out[0];
 800b878:	4b88      	ldr	r3, [pc, #544]	; (800ba9c <motorRightLeft+0x318>)
 800b87a:	689b      	ldr	r3, [r3, #8]
 800b87c:	4a89      	ldr	r2, [pc, #548]	; (800baa4 <motorRightLeft+0x320>)
 800b87e:	6093      	str	r3, [r2, #8]

			rightMotorPwm = RCFilter_Update(&rcFilterRight, rightMotorPwm);
 800b880:	ed97 0a03 	vldr	s0, [r7, #12]
 800b884:	4886      	ldr	r0, [pc, #536]	; (800baa0 <motorRightLeft+0x31c>)
 800b886:	f000 ff17 	bl	800c6b8 <RCFilter_Update>
 800b88a:	ed87 0a03 	vstr	s0, [r7, #12]
			leftMotorPwm = RCFilter_Update(&rcFilterLeft, leftMotorPwm);
 800b88e:	ed97 0a04 	vldr	s0, [r7, #16]
 800b892:	4884      	ldr	r0, [pc, #528]	; (800baa4 <motorRightLeft+0x320>)
 800b894:	f000 ff10 	bl	800c6b8 <RCFilter_Update>
 800b898:	ed87 0a04 	vstr	s0, [r7, #16]

			LEFT_MOTOR_FORWARD(leftMotorPwm);
 800b89c:	4b82      	ldr	r3, [pc, #520]	; (800baa8 <motorRightLeft+0x324>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	edd7 7a04 	vldr	s15, [r7, #16]
 800b8a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8a8:	ee17 2a90 	vmov	r2, s15
 800b8ac:	635a      	str	r2, [r3, #52]	; 0x34
			RIGHT_MOTOR_FORWARD(rightMotorPwm);
 800b8ae:	4b7f      	ldr	r3, [pc, #508]	; (800baac <motorRightLeft+0x328>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	edd7 7a03 	vldr	s15, [r7, #12]
 800b8b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8ba:	ee17 2a90 	vmov	r2, s15
 800b8be:	635a      	str	r2, [r3, #52]	; 0x34
			LEFT_MOTOR_BACKWARD(leftMotorPwm);
			RIGHT_MOTOR_BACKWARD(rightMotorPwm);
		}
	}

}
 800b8c0:	e261      	b.n	800bd86 <motorRightLeft+0x602>
		else if(motorInf.direction == IDLE)
 800b8c2:	4b71      	ldr	r3, [pc, #452]	; (800ba88 <motorRightLeft+0x304>)
 800b8c4:	781b      	ldrb	r3, [r3, #0]
 800b8c6:	2b01      	cmp	r3, #1
 800b8c8:	d139      	bne.n	800b93e <motorRightLeft+0x1ba>
			pwmDuty = adcVal - (CHANNEL_MIDDLE + CHANNEL_ERROR);
 800b8ca:	88fb      	ldrh	r3, [r7, #6]
 800b8cc:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 800b8d0:	ee07 3a90 	vmov	s15, r3
 800b8d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b8d8:	edc7 7a05 	vstr	s15, [r7, #20]
			pwmDuty = ((pwmDuty / CHANNEL_RANGE) * 90.0f);
 800b8dc:	ed97 7a05 	vldr	s14, [r7, #20]
 800b8e0:	eddf 6a6a 	vldr	s13, [pc, #424]	; 800ba8c <motorRightLeft+0x308>
 800b8e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b8e8:	ed9f 7a71 	vldr	s14, [pc, #452]	; 800bab0 <motorRightLeft+0x32c>
 800b8ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b8f0:	edc7 7a05 	vstr	s15, [r7, #20]
			leftMotorPwm = pwmDuty;
 800b8f4:	697b      	ldr	r3, [r7, #20]
 800b8f6:	613b      	str	r3, [r7, #16]
			rightMotorPwm = pwmDuty;
 800b8f8:	697b      	ldr	r3, [r7, #20]
 800b8fa:	60fb      	str	r3, [r7, #12]
			rightMotorPwm = RCFilter_Update(&rcFilterRight, rightMotorPwm);
 800b8fc:	ed97 0a03 	vldr	s0, [r7, #12]
 800b900:	4867      	ldr	r0, [pc, #412]	; (800baa0 <motorRightLeft+0x31c>)
 800b902:	f000 fed9 	bl	800c6b8 <RCFilter_Update>
 800b906:	ed87 0a03 	vstr	s0, [r7, #12]
			leftMotorPwm = RCFilter_Update(&rcFilterLeft, leftMotorPwm);
 800b90a:	ed97 0a04 	vldr	s0, [r7, #16]
 800b90e:	4865      	ldr	r0, [pc, #404]	; (800baa4 <motorRightLeft+0x320>)
 800b910:	f000 fed2 	bl	800c6b8 <RCFilter_Update>
 800b914:	ed87 0a04 	vstr	s0, [r7, #16]
			LEFT_MOTOR_FORWARD(leftMotorPwm);
 800b918:	4b63      	ldr	r3, [pc, #396]	; (800baa8 <motorRightLeft+0x324>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	edd7 7a04 	vldr	s15, [r7, #16]
 800b920:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b924:	ee17 2a90 	vmov	r2, s15
 800b928:	635a      	str	r2, [r3, #52]	; 0x34
			RIGHT_MOTOR_BACKWARD(rightMotorPwm);
 800b92a:	4b60      	ldr	r3, [pc, #384]	; (800baac <motorRightLeft+0x328>)
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	edd7 7a03 	vldr	s15, [r7, #12]
 800b932:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b936:	ee17 2a90 	vmov	r2, s15
 800b93a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800b93c:	e223      	b.n	800bd86 <motorRightLeft+0x602>
			pwmDuty = adcVal - (CHANNEL_MIDDLE + CHANNEL_ERROR);
 800b93e:	88fb      	ldrh	r3, [r7, #6]
 800b940:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 800b944:	ee07 3a90 	vmov	s15, r3
 800b948:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b94c:	edc7 7a05 	vstr	s15, [r7, #20]
			pwmDuty = ((pwmDuty / CHANNEL_RANGE) * 100.0f);
 800b950:	ed97 7a05 	vldr	s14, [r7, #20]
 800b954:	eddf 6a4d 	vldr	s13, [pc, #308]	; 800ba8c <motorRightLeft+0x308>
 800b958:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b95c:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800ba90 <motorRightLeft+0x30c>
 800b960:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b964:	edc7 7a05 	vstr	s15, [r7, #20]
			leftMotorPwm = motorInf.forwardPwm + pwmDuty * 0.7f;
 800b968:	4b47      	ldr	r3, [pc, #284]	; (800ba88 <motorRightLeft+0x304>)
 800b96a:	785b      	ldrb	r3, [r3, #1]
 800b96c:	ee07 3a90 	vmov	s15, r3
 800b970:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b974:	edd7 7a05 	vldr	s15, [r7, #20]
 800b978:	eddf 6a46 	vldr	s13, [pc, #280]	; 800ba94 <motorRightLeft+0x310>
 800b97c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b980:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b984:	edc7 7a04 	vstr	s15, [r7, #16]
			rightMotorPwm = motorInf.forwardPwm - pwmDuty * 0.7f;
 800b988:	4b3f      	ldr	r3, [pc, #252]	; (800ba88 <motorRightLeft+0x304>)
 800b98a:	785b      	ldrb	r3, [r3, #1]
 800b98c:	ee07 3a90 	vmov	s15, r3
 800b990:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b994:	edd7 7a05 	vldr	s15, [r7, #20]
 800b998:	eddf 6a3e 	vldr	s13, [pc, #248]	; 800ba94 <motorRightLeft+0x310>
 800b99c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b9a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b9a4:	edc7 7a03 	vstr	s15, [r7, #12]
			leftMotorPwm = (leftMotorPwm > 100) ? 100 : leftMotorPwm;
 800b9a8:	edd7 7a04 	vldr	s15, [r7, #16]
 800b9ac:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800ba90 <motorRightLeft+0x30c>
 800b9b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b9b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9b8:	dd01      	ble.n	800b9be <motorRightLeft+0x23a>
 800b9ba:	4b37      	ldr	r3, [pc, #220]	; (800ba98 <motorRightLeft+0x314>)
 800b9bc:	e000      	b.n	800b9c0 <motorRightLeft+0x23c>
 800b9be:	693b      	ldr	r3, [r7, #16]
 800b9c0:	613b      	str	r3, [r7, #16]
			leftMotorPwm = (leftMotorPwm < 0) ? 0 : leftMotorPwm;
 800b9c2:	edd7 7a04 	vldr	s15, [r7, #16]
 800b9c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b9ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9ce:	d502      	bpl.n	800b9d6 <motorRightLeft+0x252>
 800b9d0:	f04f 0300 	mov.w	r3, #0
 800b9d4:	e000      	b.n	800b9d8 <motorRightLeft+0x254>
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	613b      	str	r3, [r7, #16]
			rightMotorPwm = (rightMotorPwm > 100) ? 100 : rightMotorPwm;
 800b9da:	edd7 7a03 	vldr	s15, [r7, #12]
 800b9de:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800ba90 <motorRightLeft+0x30c>
 800b9e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b9e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9ea:	dd01      	ble.n	800b9f0 <motorRightLeft+0x26c>
 800b9ec:	4b2a      	ldr	r3, [pc, #168]	; (800ba98 <motorRightLeft+0x314>)
 800b9ee:	e000      	b.n	800b9f2 <motorRightLeft+0x26e>
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	60fb      	str	r3, [r7, #12]
			rightMotorPwm = (rightMotorPwm < 0) ? 0 : rightMotorPwm;
 800b9f4:	edd7 7a03 	vldr	s15, [r7, #12]
 800b9f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b9fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba00:	d502      	bpl.n	800ba08 <motorRightLeft+0x284>
 800ba02:	f04f 0300 	mov.w	r3, #0
 800ba06:	e000      	b.n	800ba0a <motorRightLeft+0x286>
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	60fb      	str	r3, [r7, #12]
			rcFilterRight.out[0] = rcFilterForward.out[0];
 800ba0c:	4b23      	ldr	r3, [pc, #140]	; (800ba9c <motorRightLeft+0x318>)
 800ba0e:	689b      	ldr	r3, [r3, #8]
 800ba10:	4a23      	ldr	r2, [pc, #140]	; (800baa0 <motorRightLeft+0x31c>)
 800ba12:	6093      	str	r3, [r2, #8]
			rcFilterLeft.out[0] = rcFilterForward.out[0];
 800ba14:	4b21      	ldr	r3, [pc, #132]	; (800ba9c <motorRightLeft+0x318>)
 800ba16:	689b      	ldr	r3, [r3, #8]
 800ba18:	4a22      	ldr	r2, [pc, #136]	; (800baa4 <motorRightLeft+0x320>)
 800ba1a:	6093      	str	r3, [r2, #8]
			rightMotorPwm = RCFilter_Update(&rcFilterRight, rightMotorPwm);
 800ba1c:	ed97 0a03 	vldr	s0, [r7, #12]
 800ba20:	481f      	ldr	r0, [pc, #124]	; (800baa0 <motorRightLeft+0x31c>)
 800ba22:	f000 fe49 	bl	800c6b8 <RCFilter_Update>
 800ba26:	ed87 0a03 	vstr	s0, [r7, #12]
			leftMotorPwm = RCFilter_Update(&rcFilterLeft, leftMotorPwm);
 800ba2a:	ed97 0a04 	vldr	s0, [r7, #16]
 800ba2e:	481d      	ldr	r0, [pc, #116]	; (800baa4 <motorRightLeft+0x320>)
 800ba30:	f000 fe42 	bl	800c6b8 <RCFilter_Update>
 800ba34:	ed87 0a04 	vstr	s0, [r7, #16]
			LEFT_MOTOR_BACKWARD(leftMotorPwm);
 800ba38:	4b1e      	ldr	r3, [pc, #120]	; (800bab4 <motorRightLeft+0x330>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	edd7 7a04 	vldr	s15, [r7, #16]
 800ba40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba44:	ee17 2a90 	vmov	r2, s15
 800ba48:	635a      	str	r2, [r3, #52]	; 0x34
			RIGHT_MOTOR_BACKWARD(rightMotorPwm);
 800ba4a:	4b18      	ldr	r3, [pc, #96]	; (800baac <motorRightLeft+0x328>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	edd7 7a03 	vldr	s15, [r7, #12]
 800ba52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba56:	ee17 2a90 	vmov	r2, s15
 800ba5a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800ba5c:	e193      	b.n	800bd86 <motorRightLeft+0x602>
	else if((adcVal < (CHANNEL_MIDDLE + CHANNEL_ERROR)) && (adcVal > (CHANNEL_MIDDLE - CHANNEL_ERROR)))
 800ba5e:	88fb      	ldrh	r3, [r7, #6]
 800ba60:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ba64:	d22a      	bcs.n	800babc <motorRightLeft+0x338>
 800ba66:	88fb      	ldrh	r3, [r7, #6]
 800ba68:	f240 52aa 	movw	r2, #1450	; 0x5aa
 800ba6c:	4293      	cmp	r3, r2
 800ba6e:	d925      	bls.n	800babc <motorRightLeft+0x338>
		RCFilter_Update(&rcFilterRight, 0);
 800ba70:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800bab8 <motorRightLeft+0x334>
 800ba74:	480a      	ldr	r0, [pc, #40]	; (800baa0 <motorRightLeft+0x31c>)
 800ba76:	f000 fe1f 	bl	800c6b8 <RCFilter_Update>
		RCFilter_Update(&rcFilterLeft, 0);
 800ba7a:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800bab8 <motorRightLeft+0x334>
 800ba7e:	4809      	ldr	r0, [pc, #36]	; (800baa4 <motorRightLeft+0x320>)
 800ba80:	f000 fe1a 	bl	800c6b8 <RCFilter_Update>
}
 800ba84:	e17f      	b.n	800bd86 <motorRightLeft+0x602>
 800ba86:	bf00      	nop
 800ba88:	20004f78 	.word	0x20004f78
 800ba8c:	43af0000 	.word	0x43af0000
 800ba90:	42c80000 	.word	0x42c80000
 800ba94:	3f333333 	.word	0x3f333333
 800ba98:	42c80000 	.word	0x42c80000
 800ba9c:	20004f38 	.word	0x20004f38
 800baa0:	20004f58 	.word	0x20004f58
 800baa4:	20004f68 	.word	0x20004f68
 800baa8:	20000300 	.word	0x20000300
 800baac:	20000228 	.word	0x20000228
 800bab0:	42b40000 	.word	0x42b40000
 800bab4:	200002b8 	.word	0x200002b8
 800bab8:	00000000 	.word	0x00000000
		if(motorInf.direction == FORWARD)
 800babc:	4bb4      	ldr	r3, [pc, #720]	; (800bd90 <motorRightLeft+0x60c>)
 800babe:	781b      	ldrb	r3, [r3, #0]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	f040 8091 	bne.w	800bbe8 <motorRightLeft+0x464>
			pwmDuty = (CHANNEL_MIDDLE - CHANNEL_ERROR) - adcVal;
 800bac6:	88fb      	ldrh	r3, [r7, #6]
 800bac8:	f5c3 63b5 	rsb	r3, r3, #1448	; 0x5a8
 800bacc:	3302      	adds	r3, #2
 800bace:	ee07 3a90 	vmov	s15, r3
 800bad2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bad6:	edc7 7a05 	vstr	s15, [r7, #20]
			pwmDuty = ((pwmDuty / CHANNEL_RANGE) * 100.0f);
 800bada:	ed97 7a05 	vldr	s14, [r7, #20]
 800bade:	eddf 6aad 	vldr	s13, [pc, #692]	; 800bd94 <motorRightLeft+0x610>
 800bae2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bae6:	ed9f 7aac 	vldr	s14, [pc, #688]	; 800bd98 <motorRightLeft+0x614>
 800baea:	ee67 7a87 	vmul.f32	s15, s15, s14
 800baee:	edc7 7a05 	vstr	s15, [r7, #20]
			leftMotorPwm = motorInf.forwardPwm - pwmDuty * 0.7f;
 800baf2:	4ba7      	ldr	r3, [pc, #668]	; (800bd90 <motorRightLeft+0x60c>)
 800baf4:	785b      	ldrb	r3, [r3, #1]
 800baf6:	ee07 3a90 	vmov	s15, r3
 800bafa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bafe:	edd7 7a05 	vldr	s15, [r7, #20]
 800bb02:	eddf 6aa6 	vldr	s13, [pc, #664]	; 800bd9c <motorRightLeft+0x618>
 800bb06:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bb0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bb0e:	edc7 7a04 	vstr	s15, [r7, #16]
			rightMotorPwm = motorInf.forwardPwm + pwmDuty * 0.7f;
 800bb12:	4b9f      	ldr	r3, [pc, #636]	; (800bd90 <motorRightLeft+0x60c>)
 800bb14:	785b      	ldrb	r3, [r3, #1]
 800bb16:	ee07 3a90 	vmov	s15, r3
 800bb1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bb1e:	edd7 7a05 	vldr	s15, [r7, #20]
 800bb22:	eddf 6a9e 	vldr	s13, [pc, #632]	; 800bd9c <motorRightLeft+0x618>
 800bb26:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bb2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bb2e:	edc7 7a03 	vstr	s15, [r7, #12]
			leftMotorPwm = (leftMotorPwm > 100) ? 100 : leftMotorPwm;
 800bb32:	edd7 7a04 	vldr	s15, [r7, #16]
 800bb36:	ed9f 7a98 	vldr	s14, [pc, #608]	; 800bd98 <motorRightLeft+0x614>
 800bb3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bb3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb42:	dd01      	ble.n	800bb48 <motorRightLeft+0x3c4>
 800bb44:	4b96      	ldr	r3, [pc, #600]	; (800bda0 <motorRightLeft+0x61c>)
 800bb46:	e000      	b.n	800bb4a <motorRightLeft+0x3c6>
 800bb48:	693b      	ldr	r3, [r7, #16]
 800bb4a:	613b      	str	r3, [r7, #16]
			leftMotorPwm = (leftMotorPwm < 0) ? 0 : leftMotorPwm;
 800bb4c:	edd7 7a04 	vldr	s15, [r7, #16]
 800bb50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bb54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb58:	d502      	bpl.n	800bb60 <motorRightLeft+0x3dc>
 800bb5a:	f04f 0300 	mov.w	r3, #0
 800bb5e:	e000      	b.n	800bb62 <motorRightLeft+0x3de>
 800bb60:	693b      	ldr	r3, [r7, #16]
 800bb62:	613b      	str	r3, [r7, #16]
			rightMotorPwm = (rightMotorPwm > 100) ? 100 : rightMotorPwm;
 800bb64:	edd7 7a03 	vldr	s15, [r7, #12]
 800bb68:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800bd98 <motorRightLeft+0x614>
 800bb6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bb70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb74:	dd01      	ble.n	800bb7a <motorRightLeft+0x3f6>
 800bb76:	4b8a      	ldr	r3, [pc, #552]	; (800bda0 <motorRightLeft+0x61c>)
 800bb78:	e000      	b.n	800bb7c <motorRightLeft+0x3f8>
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	60fb      	str	r3, [r7, #12]
			rightMotorPwm = (rightMotorPwm < 0) ? 0 : rightMotorPwm;
 800bb7e:	edd7 7a03 	vldr	s15, [r7, #12]
 800bb82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bb86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb8a:	d502      	bpl.n	800bb92 <motorRightLeft+0x40e>
 800bb8c:	f04f 0300 	mov.w	r3, #0
 800bb90:	e000      	b.n	800bb94 <motorRightLeft+0x410>
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	60fb      	str	r3, [r7, #12]
			rcFilterRight.out[0] = rcFilterForward.out[0];
 800bb96:	4b83      	ldr	r3, [pc, #524]	; (800bda4 <motorRightLeft+0x620>)
 800bb98:	689b      	ldr	r3, [r3, #8]
 800bb9a:	4a83      	ldr	r2, [pc, #524]	; (800bda8 <motorRightLeft+0x624>)
 800bb9c:	6093      	str	r3, [r2, #8]
			rcFilterLeft.out[0] = rcFilterForward.out[0];
 800bb9e:	4b81      	ldr	r3, [pc, #516]	; (800bda4 <motorRightLeft+0x620>)
 800bba0:	689b      	ldr	r3, [r3, #8]
 800bba2:	4a82      	ldr	r2, [pc, #520]	; (800bdac <motorRightLeft+0x628>)
 800bba4:	6093      	str	r3, [r2, #8]
			rightMotorPwm = RCFilter_Update(&rcFilterRight, rightMotorPwm);
 800bba6:	ed97 0a03 	vldr	s0, [r7, #12]
 800bbaa:	487f      	ldr	r0, [pc, #508]	; (800bda8 <motorRightLeft+0x624>)
 800bbac:	f000 fd84 	bl	800c6b8 <RCFilter_Update>
 800bbb0:	ed87 0a03 	vstr	s0, [r7, #12]
			leftMotorPwm = RCFilter_Update(&rcFilterLeft, leftMotorPwm);
 800bbb4:	ed97 0a04 	vldr	s0, [r7, #16]
 800bbb8:	487c      	ldr	r0, [pc, #496]	; (800bdac <motorRightLeft+0x628>)
 800bbba:	f000 fd7d 	bl	800c6b8 <RCFilter_Update>
 800bbbe:	ed87 0a04 	vstr	s0, [r7, #16]
			LEFT_MOTOR_FORWARD(leftMotorPwm);
 800bbc2:	4b7b      	ldr	r3, [pc, #492]	; (800bdb0 <motorRightLeft+0x62c>)
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	edd7 7a04 	vldr	s15, [r7, #16]
 800bbca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbce:	ee17 2a90 	vmov	r2, s15
 800bbd2:	635a      	str	r2, [r3, #52]	; 0x34
			RIGHT_MOTOR_FORWARD(rightMotorPwm);
 800bbd4:	4b77      	ldr	r3, [pc, #476]	; (800bdb4 <motorRightLeft+0x630>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	edd7 7a03 	vldr	s15, [r7, #12]
 800bbdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbe0:	ee17 2a90 	vmov	r2, s15
 800bbe4:	635a      	str	r2, [r3, #52]	; 0x34
}
 800bbe6:	e0ce      	b.n	800bd86 <motorRightLeft+0x602>
		else if(motorInf.direction == IDLE)
 800bbe8:	4b69      	ldr	r3, [pc, #420]	; (800bd90 <motorRightLeft+0x60c>)
 800bbea:	781b      	ldrb	r3, [r3, #0]
 800bbec:	2b01      	cmp	r3, #1
 800bbee:	d13a      	bne.n	800bc66 <motorRightLeft+0x4e2>
			pwmDuty = (CHANNEL_MIDDLE - CHANNEL_ERROR) - adcVal;
 800bbf0:	88fb      	ldrh	r3, [r7, #6]
 800bbf2:	f5c3 63b5 	rsb	r3, r3, #1448	; 0x5a8
 800bbf6:	3302      	adds	r3, #2
 800bbf8:	ee07 3a90 	vmov	s15, r3
 800bbfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bc00:	edc7 7a05 	vstr	s15, [r7, #20]
			pwmDuty = ((pwmDuty / CHANNEL_RANGE) * 90.0f);
 800bc04:	ed97 7a05 	vldr	s14, [r7, #20]
 800bc08:	eddf 6a62 	vldr	s13, [pc, #392]	; 800bd94 <motorRightLeft+0x610>
 800bc0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bc10:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800bdb8 <motorRightLeft+0x634>
 800bc14:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bc18:	edc7 7a05 	vstr	s15, [r7, #20]
			leftMotorPwm = pwmDuty;
 800bc1c:	697b      	ldr	r3, [r7, #20]
 800bc1e:	613b      	str	r3, [r7, #16]
			rightMotorPwm = pwmDuty;
 800bc20:	697b      	ldr	r3, [r7, #20]
 800bc22:	60fb      	str	r3, [r7, #12]
			rightMotorPwm = RCFilter_Update(&rcFilterRight, rightMotorPwm);
 800bc24:	ed97 0a03 	vldr	s0, [r7, #12]
 800bc28:	485f      	ldr	r0, [pc, #380]	; (800bda8 <motorRightLeft+0x624>)
 800bc2a:	f000 fd45 	bl	800c6b8 <RCFilter_Update>
 800bc2e:	ed87 0a03 	vstr	s0, [r7, #12]
			leftMotorPwm = RCFilter_Update(&rcFilterLeft, leftMotorPwm);
 800bc32:	ed97 0a04 	vldr	s0, [r7, #16]
 800bc36:	485d      	ldr	r0, [pc, #372]	; (800bdac <motorRightLeft+0x628>)
 800bc38:	f000 fd3e 	bl	800c6b8 <RCFilter_Update>
 800bc3c:	ed87 0a04 	vstr	s0, [r7, #16]
			LEFT_MOTOR_BACKWARD(leftMotorPwm);
 800bc40:	4b5e      	ldr	r3, [pc, #376]	; (800bdbc <motorRightLeft+0x638>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	edd7 7a04 	vldr	s15, [r7, #16]
 800bc48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc4c:	ee17 2a90 	vmov	r2, s15
 800bc50:	635a      	str	r2, [r3, #52]	; 0x34
			RIGHT_MOTOR_FORWARD(rightMotorPwm);
 800bc52:	4b58      	ldr	r3, [pc, #352]	; (800bdb4 <motorRightLeft+0x630>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	edd7 7a03 	vldr	s15, [r7, #12]
 800bc5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc5e:	ee17 2a90 	vmov	r2, s15
 800bc62:	635a      	str	r2, [r3, #52]	; 0x34
}
 800bc64:	e08f      	b.n	800bd86 <motorRightLeft+0x602>
			pwmDuty = (CHANNEL_MIDDLE - CHANNEL_ERROR) - adcVal;
 800bc66:	88fb      	ldrh	r3, [r7, #6]
 800bc68:	f5c3 63b5 	rsb	r3, r3, #1448	; 0x5a8
 800bc6c:	3302      	adds	r3, #2
 800bc6e:	ee07 3a90 	vmov	s15, r3
 800bc72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bc76:	edc7 7a05 	vstr	s15, [r7, #20]
			pwmDuty = ((pwmDuty / CHANNEL_RANGE) * 100.0f);
 800bc7a:	ed97 7a05 	vldr	s14, [r7, #20]
 800bc7e:	eddf 6a45 	vldr	s13, [pc, #276]	; 800bd94 <motorRightLeft+0x610>
 800bc82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bc86:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800bd98 <motorRightLeft+0x614>
 800bc8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bc8e:	edc7 7a05 	vstr	s15, [r7, #20]
			leftMotorPwm = motorInf.forwardPwm - pwmDuty * 0.7f;
 800bc92:	4b3f      	ldr	r3, [pc, #252]	; (800bd90 <motorRightLeft+0x60c>)
 800bc94:	785b      	ldrb	r3, [r3, #1]
 800bc96:	ee07 3a90 	vmov	s15, r3
 800bc9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bc9e:	edd7 7a05 	vldr	s15, [r7, #20]
 800bca2:	eddf 6a3e 	vldr	s13, [pc, #248]	; 800bd9c <motorRightLeft+0x618>
 800bca6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bcaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bcae:	edc7 7a04 	vstr	s15, [r7, #16]
			rightMotorPwm = motorInf.forwardPwm + pwmDuty * 0.7f;
 800bcb2:	4b37      	ldr	r3, [pc, #220]	; (800bd90 <motorRightLeft+0x60c>)
 800bcb4:	785b      	ldrb	r3, [r3, #1]
 800bcb6:	ee07 3a90 	vmov	s15, r3
 800bcba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bcbe:	edd7 7a05 	vldr	s15, [r7, #20]
 800bcc2:	eddf 6a36 	vldr	s13, [pc, #216]	; 800bd9c <motorRightLeft+0x618>
 800bcc6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bcca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bcce:	edc7 7a03 	vstr	s15, [r7, #12]
			leftMotorPwm = (leftMotorPwm > 100) ? 100 : leftMotorPwm;
 800bcd2:	edd7 7a04 	vldr	s15, [r7, #16]
 800bcd6:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800bd98 <motorRightLeft+0x614>
 800bcda:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bcde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bce2:	dd01      	ble.n	800bce8 <motorRightLeft+0x564>
 800bce4:	4b2e      	ldr	r3, [pc, #184]	; (800bda0 <motorRightLeft+0x61c>)
 800bce6:	e000      	b.n	800bcea <motorRightLeft+0x566>
 800bce8:	693b      	ldr	r3, [r7, #16]
 800bcea:	613b      	str	r3, [r7, #16]
			leftMotorPwm = (leftMotorPwm < 0) ? 0 : leftMotorPwm;
 800bcec:	edd7 7a04 	vldr	s15, [r7, #16]
 800bcf0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bcf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcf8:	d502      	bpl.n	800bd00 <motorRightLeft+0x57c>
 800bcfa:	f04f 0300 	mov.w	r3, #0
 800bcfe:	e000      	b.n	800bd02 <motorRightLeft+0x57e>
 800bd00:	693b      	ldr	r3, [r7, #16]
 800bd02:	613b      	str	r3, [r7, #16]
			rightMotorPwm = (rightMotorPwm > 100) ? 100 : rightMotorPwm;
 800bd04:	edd7 7a03 	vldr	s15, [r7, #12]
 800bd08:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800bd98 <motorRightLeft+0x614>
 800bd0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bd10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd14:	dd01      	ble.n	800bd1a <motorRightLeft+0x596>
 800bd16:	4b22      	ldr	r3, [pc, #136]	; (800bda0 <motorRightLeft+0x61c>)
 800bd18:	e000      	b.n	800bd1c <motorRightLeft+0x598>
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	60fb      	str	r3, [r7, #12]
			rightMotorPwm = (rightMotorPwm < 0) ? 0 : rightMotorPwm;
 800bd1e:	edd7 7a03 	vldr	s15, [r7, #12]
 800bd22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bd26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd2a:	d502      	bpl.n	800bd32 <motorRightLeft+0x5ae>
 800bd2c:	f04f 0300 	mov.w	r3, #0
 800bd30:	e000      	b.n	800bd34 <motorRightLeft+0x5b0>
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	60fb      	str	r3, [r7, #12]
			rcFilterRight.out[0] = rcFilterForward.out[0];
 800bd36:	4b1b      	ldr	r3, [pc, #108]	; (800bda4 <motorRightLeft+0x620>)
 800bd38:	689b      	ldr	r3, [r3, #8]
 800bd3a:	4a1b      	ldr	r2, [pc, #108]	; (800bda8 <motorRightLeft+0x624>)
 800bd3c:	6093      	str	r3, [r2, #8]
			rcFilterLeft.out[0] = rcFilterForward.out[0];
 800bd3e:	4b19      	ldr	r3, [pc, #100]	; (800bda4 <motorRightLeft+0x620>)
 800bd40:	689b      	ldr	r3, [r3, #8]
 800bd42:	4a1a      	ldr	r2, [pc, #104]	; (800bdac <motorRightLeft+0x628>)
 800bd44:	6093      	str	r3, [r2, #8]
			rightMotorPwm = RCFilter_Update(&rcFilterRight, rightMotorPwm);
 800bd46:	ed97 0a03 	vldr	s0, [r7, #12]
 800bd4a:	4817      	ldr	r0, [pc, #92]	; (800bda8 <motorRightLeft+0x624>)
 800bd4c:	f000 fcb4 	bl	800c6b8 <RCFilter_Update>
 800bd50:	ed87 0a03 	vstr	s0, [r7, #12]
			leftMotorPwm = RCFilter_Update(&rcFilterLeft, leftMotorPwm);
 800bd54:	ed97 0a04 	vldr	s0, [r7, #16]
 800bd58:	4814      	ldr	r0, [pc, #80]	; (800bdac <motorRightLeft+0x628>)
 800bd5a:	f000 fcad 	bl	800c6b8 <RCFilter_Update>
 800bd5e:	ed87 0a04 	vstr	s0, [r7, #16]
			LEFT_MOTOR_BACKWARD(leftMotorPwm);
 800bd62:	4b16      	ldr	r3, [pc, #88]	; (800bdbc <motorRightLeft+0x638>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	edd7 7a04 	vldr	s15, [r7, #16]
 800bd6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd6e:	ee17 2a90 	vmov	r2, s15
 800bd72:	635a      	str	r2, [r3, #52]	; 0x34
			RIGHT_MOTOR_BACKWARD(rightMotorPwm);
 800bd74:	4b0f      	ldr	r3, [pc, #60]	; (800bdb4 <motorRightLeft+0x630>)
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	edd7 7a03 	vldr	s15, [r7, #12]
 800bd7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd80:	ee17 2a90 	vmov	r2, s15
 800bd84:	639a      	str	r2, [r3, #56]	; 0x38
}
 800bd86:	bf00      	nop
 800bd88:	3718      	adds	r7, #24
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	bd80      	pop	{r7, pc}
 800bd8e:	bf00      	nop
 800bd90:	20004f78 	.word	0x20004f78
 800bd94:	43af0000 	.word	0x43af0000
 800bd98:	42c80000 	.word	0x42c80000
 800bd9c:	3f333333 	.word	0x3f333333
 800bda0:	42c80000 	.word	0x42c80000
 800bda4:	20004f38 	.word	0x20004f38
 800bda8:	20004f58 	.word	0x20004f58
 800bdac:	20004f68 	.word	0x20004f68
 800bdb0:	20000300 	.word	0x20000300
 800bdb4:	20000228 	.word	0x20000228
 800bdb8:	42b40000 	.word	0x42b40000
 800bdbc:	200002b8 	.word	0x200002b8

0800bdc0 <PIDController_Init>:
#include "PID.h"

void PIDController_Init(PIDController *pid) {
 800bdc0:	b480      	push	{r7}
 800bdc2:	b083      	sub	sp, #12
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]

	/* Clear controller variables */
	pid->integrator = 0.0f;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f04f 0200 	mov.w	r2, #0
 800bdce:	625a      	str	r2, [r3, #36]	; 0x24
	pid->prevError  = 0.0f;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f04f 0200 	mov.w	r2, #0
 800bdd6:	629a      	str	r2, [r3, #40]	; 0x28

	pid->differentiator  = 0.0f;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f04f 0200 	mov.w	r2, #0
 800bdde:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->prevMeasurement = 0.0f;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f04f 0200 	mov.w	r2, #0
 800bde6:	631a      	str	r2, [r3, #48]	; 0x30

	pid->out = 0.0f;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	f04f 0200 	mov.w	r2, #0
 800bdee:	635a      	str	r2, [r3, #52]	; 0x34

}
 800bdf0:	bf00      	nop
 800bdf2:	370c      	adds	r7, #12
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfa:	4770      	bx	lr

0800bdfc <kalman1_init>:
 *   init_p - initial estimated error convariance
 * @outputs 
 * @retval  
 */
void kalman1_init(kalman_state *state, float init_x, float init_p)
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b085      	sub	sp, #20
 800be00:	af00      	add	r7, sp, #0
 800be02:	60f8      	str	r0, [r7, #12]
 800be04:	ed87 0a02 	vstr	s0, [r7, #8]
 800be08:	edc7 0a01 	vstr	s1, [r7, #4]
    state->x = init_x;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	68ba      	ldr	r2, [r7, #8]
 800be10:	601a      	str	r2, [r3, #0]
    state->p = init_p;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	687a      	ldr	r2, [r7, #4]
 800be16:	615a      	str	r2, [r3, #20]
    state->A = 1;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800be1e:	605a      	str	r2, [r3, #4]
    state->H = 1;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800be26:	609a      	str	r2, [r3, #8]
    state->q = 2e2;//10e-6;  /* predict noise convariance */
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	4a05      	ldr	r2, [pc, #20]	; (800be40 <kalman1_init+0x44>)
 800be2c:	60da      	str	r2, [r3, #12]
    state->r = 5e2;//10e-5;  /* measure error convariance */
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	4a04      	ldr	r2, [pc, #16]	; (800be44 <kalman1_init+0x48>)
 800be32:	611a      	str	r2, [r3, #16]
}
 800be34:	bf00      	nop
 800be36:	3714      	adds	r7, #20
 800be38:	46bd      	mov	sp, r7
 800be3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3e:	4770      	bx	lr
 800be40:	43480000 	.word	0x43480000
 800be44:	43fa0000 	.word	0x43fa0000

0800be48 <kalman1_filter>:
 * @outputs 
 * @retval  
 *   Estimated result
 */
float kalman1_filter(kalman_state *state, float z_measure)
{
 800be48:	b480      	push	{r7}
 800be4a:	b083      	sub	sp, #12
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
 800be50:	ed87 0a00 	vstr	s0, [r7]
    /* Predict */
    state->x = state->A * state->x;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	ed93 7a01 	vldr	s14, [r3, #4]
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	edd3 7a00 	vldr	s15, [r3]
 800be60:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	edc3 7a00 	vstr	s15, [r3]
    state->p = state->A * state->A * state->p + state->q;  /* p(n|n-1)=A^2*p(n-1|n-1)+q */
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	ed93 7a01 	vldr	s14, [r3, #4]
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	edd3 7a01 	vldr	s15, [r3, #4]
 800be76:	ee27 7a27 	vmul.f32	s14, s14, s15
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	edd3 7a05 	vldr	s15, [r3, #20]
 800be80:	ee27 7a27 	vmul.f32	s14, s14, s15
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	edd3 7a03 	vldr	s15, [r3, #12]
 800be8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	edc3 7a05 	vstr	s15, [r3, #20]

    /* Measurement */
    state->gain = state->p * state->H / (state->p * state->H * state->H + state->r);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	ed93 7a05 	vldr	s14, [r3, #20]
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	edd3 7a02 	vldr	s15, [r3, #8]
 800bea0:	ee67 6a27 	vmul.f32	s13, s14, s15
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	ed93 7a05 	vldr	s14, [r3, #20]
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	edd3 7a02 	vldr	s15, [r3, #8]
 800beb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	edd3 7a02 	vldr	s15, [r3, #8]
 800beba:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	edd3 7a04 	vldr	s15, [r3, #16]
 800bec4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bec8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	edc3 7a06 	vstr	s15, [r3, #24]
    state->x = state->x + state->gain * (z_measure - state->H * state->x);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	ed93 7a00 	vldr	s14, [r3]
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	edd3 6a06 	vldr	s13, [r3, #24]
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	ed93 6a02 	vldr	s12, [r3, #8]
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	edd3 7a00 	vldr	s15, [r3]
 800beea:	ee66 7a27 	vmul.f32	s15, s12, s15
 800beee:	ed97 6a00 	vldr	s12, [r7]
 800bef2:	ee76 7a67 	vsub.f32	s15, s12, s15
 800bef6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800befa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	edc3 7a00 	vstr	s15, [r3]
    state->p = (1 - state->gain * state->H) * state->p;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	ed93 7a06 	vldr	s14, [r3, #24]
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	edd3 7a02 	vldr	s15, [r3, #8]
 800bf10:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bf18:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	edd3 7a05 	vldr	s15, [r3, #20]
 800bf22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	edc3 7a05 	vstr	s15, [r3, #20]

    return state->x;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	ee07 3a90 	vmov	s15, r3
}
 800bf34:	eeb0 0a67 	vmov.f32	s0, s15
 800bf38:	370c      	adds	r7, #12
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf40:	4770      	bx	lr
	...

0800bf44 <UGV_qmcInit>:
 * @brief Initialize the QMC5883's i2c register
 * @param[in] i2c global variable
 * @return if master connection is valid return HAL_OK
 */
HAL_StatusTypeDef UGV_qmcInit(I2C_HandleTypeDef * hi2c1, Qmc * qmc)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b088      	sub	sp, #32
 800bf48:	af04      	add	r7, sp, #16
 800bf4a:	6078      	str	r0, [r7, #4]
 800bf4c:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;

	i2c = hi2c1;
 800bf4e:	4a65      	ldr	r2, [pc, #404]	; (800c0e4 <UGV_qmcInit+0x1a0>)
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	6013      	str	r3, [r2, #0]

	HAL_I2C_Init(i2c);
 800bf54:	4b63      	ldr	r3, [pc, #396]	; (800c0e4 <UGV_qmcInit+0x1a0>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	4618      	mov	r0, r3
 800bf5a:	f7f6 fcbb 	bl	80028d4 <HAL_I2C_Init>
	kalman1_init(&hKalmanX, 0, 5e2);
 800bf5e:	eddf 0a62 	vldr	s1, [pc, #392]	; 800c0e8 <UGV_qmcInit+0x1a4>
 800bf62:	ed9f 0a62 	vldr	s0, [pc, #392]	; 800c0ec <UGV_qmcInit+0x1a8>
 800bf66:	4862      	ldr	r0, [pc, #392]	; (800c0f0 <UGV_qmcInit+0x1ac>)
 800bf68:	f7ff ff48 	bl	800bdfc <kalman1_init>
	kalman1_init(&hKalmanY, 0, 5e2);
 800bf6c:	eddf 0a5e 	vldr	s1, [pc, #376]	; 800c0e8 <UGV_qmcInit+0x1a4>
 800bf70:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 800c0ec <UGV_qmcInit+0x1a8>
 800bf74:	485f      	ldr	r0, [pc, #380]	; (800c0f4 <UGV_qmcInit+0x1b0>)
 800bf76:	f7ff ff41 	bl	800bdfc <kalman1_init>
	kalman1_init(&hKalmanZ, 0, 5e2);
 800bf7a:	eddf 0a5b 	vldr	s1, [pc, #364]	; 800c0e8 <UGV_qmcInit+0x1a4>
 800bf7e:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 800c0ec <UGV_qmcInit+0x1a8>
 800bf82:	485d      	ldr	r0, [pc, #372]	; (800c0f8 <UGV_qmcInit+0x1b4>)
 800bf84:	f7ff ff3a 	bl	800bdfc <kalman1_init>

	// configuration register-1 setting
	qmc->qmcReg.ControlReg1.reg  = 0x00;
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	725a      	strb	r2, [r3, #9]
	qmc->qmcReg.ControlReg1.MODE = qmc->qmcConfig.MODE;
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	7b5b      	ldrb	r3, [r3, #13]
 800bf92:	f003 0303 	and.w	r3, r3, #3
 800bf96:	b2d9      	uxtb	r1, r3
 800bf98:	683a      	ldr	r2, [r7, #0]
 800bf9a:	7a53      	ldrb	r3, [r2, #9]
 800bf9c:	f361 0301 	bfi	r3, r1, #0, #2
 800bfa0:	7253      	strb	r3, [r2, #9]
	qmc->qmcReg.ControlReg1.ODR  = qmc->qmcConfig.ODR;
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	7b9b      	ldrb	r3, [r3, #14]
 800bfa6:	f003 0303 	and.w	r3, r3, #3
 800bfaa:	b2d9      	uxtb	r1, r3
 800bfac:	683a      	ldr	r2, [r7, #0]
 800bfae:	7a53      	ldrb	r3, [r2, #9]
 800bfb0:	f361 0383 	bfi	r3, r1, #2, #2
 800bfb4:	7253      	strb	r3, [r2, #9]
	qmc->qmcReg.ControlReg1.RNG  = qmc->qmcConfig.RNG;
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	7bdb      	ldrb	r3, [r3, #15]
 800bfba:	f003 0303 	and.w	r3, r3, #3
 800bfbe:	b2d9      	uxtb	r1, r3
 800bfc0:	683a      	ldr	r2, [r7, #0]
 800bfc2:	7a53      	ldrb	r3, [r2, #9]
 800bfc4:	f361 1305 	bfi	r3, r1, #4, #2
 800bfc8:	7253      	strb	r3, [r2, #9]
	qmc->qmcReg.ControlReg1.OSR  = qmc->qmcConfig.OSR;
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	7c1b      	ldrb	r3, [r3, #16]
 800bfce:	f003 0303 	and.w	r3, r3, #3
 800bfd2:	b2d9      	uxtb	r1, r3
 800bfd4:	683a      	ldr	r2, [r7, #0]
 800bfd6:	7a53      	ldrb	r3, [r2, #9]
 800bfd8:	f361 1387 	bfi	r3, r1, #6, #2
 800bfdc:	7253      	strb	r3, [r2, #9]

	// configuration register-2 setting
	qmc->qmcReg.ControlReg2.reg  = 0x00;
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	729a      	strb	r2, [r3, #10]
	qmc->qmcReg.ControlReg2.INT_ENB = qmc->qmcConfig.INT;
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	7c5b      	ldrb	r3, [r3, #17]
 800bfe8:	f003 0301 	and.w	r3, r3, #1
 800bfec:	b2d9      	uxtb	r1, r3
 800bfee:	683a      	ldr	r2, [r7, #0]
 800bff0:	7a93      	ldrb	r3, [r2, #10]
 800bff2:	f361 0300 	bfi	r3, r1, #0, #1
 800bff6:	7293      	strb	r3, [r2, #10]
	qmc->qmcReg.ControlReg2.ROL_PNT = qmc->qmcConfig.ROL_PNT;
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	7c9b      	ldrb	r3, [r3, #18]
 800bffc:	f003 0301 	and.w	r3, r3, #1
 800c000:	b2d9      	uxtb	r1, r3
 800c002:	683a      	ldr	r2, [r7, #0]
 800c004:	7a93      	ldrb	r3, [r2, #10]
 800c006:	f361 1386 	bfi	r3, r1, #6, #1
 800c00a:	7293      	strb	r3, [r2, #10]

	// It is recommended that the register 0BH is written by 0x01
	qmc->qmcReg.setResetPeriod = 0x01;
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	2201      	movs	r2, #1
 800c010:	72da      	strb	r2, [r3, #11]

	//send the initial values
	status = HAL_I2C_Mem_Write(i2c, QMC_SLAVE_ADDR, QMC_SET_RESET_ADDR,
 800c012:	4b34      	ldr	r3, [pc, #208]	; (800c0e4 <UGV_qmcInit+0x1a0>)
 800c014:	6818      	ldr	r0, [r3, #0]
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	330b      	adds	r3, #11
 800c01a:	2201      	movs	r2, #1
 800c01c:	9202      	str	r2, [sp, #8]
 800c01e:	2201      	movs	r2, #1
 800c020:	9201      	str	r2, [sp, #4]
 800c022:	9300      	str	r3, [sp, #0]
 800c024:	2301      	movs	r3, #1
 800c026:	220b      	movs	r2, #11
 800c028:	211a      	movs	r1, #26
 800c02a:	f7f6 fd97 	bl	8002b5c <HAL_I2C_Mem_Write>
 800c02e:	4603      	mov	r3, r0
 800c030:	73fb      	strb	r3, [r7, #15]
							   1, &qmc->qmcReg.setResetPeriod, 1, 1);
	if(status != HAL_OK) return status;
 800c032:	7bfb      	ldrb	r3, [r7, #15]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d001      	beq.n	800c03c <UGV_qmcInit+0xf8>
 800c038:	7bfb      	ldrb	r3, [r7, #15]
 800c03a:	e04e      	b.n	800c0da <UGV_qmcInit+0x196>
	while(HAL_I2C_GetState(i2c) == HAL_I2C_STATE_BUSY_TX);
 800c03c:	bf00      	nop
 800c03e:	4b29      	ldr	r3, [pc, #164]	; (800c0e4 <UGV_qmcInit+0x1a0>)
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	4618      	mov	r0, r3
 800c044:	f7f7 f9e4 	bl	8003410 <HAL_I2C_GetState>
 800c048:	4603      	mov	r3, r0
 800c04a:	2b21      	cmp	r3, #33	; 0x21
 800c04c:	d0f7      	beq.n	800c03e <UGV_qmcInit+0xfa>
	HAL_Delay(1);
 800c04e:	2001      	movs	r0, #1
 800c050:	f7f6 f8ca 	bl	80021e8 <HAL_Delay>

	status = HAL_I2C_Mem_Write(i2c, QMC_SLAVE_ADDR, QMC_CONTROL_REG1_ADDR,
 800c054:	4b23      	ldr	r3, [pc, #140]	; (800c0e4 <UGV_qmcInit+0x1a0>)
 800c056:	6818      	ldr	r0, [r3, #0]
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	3309      	adds	r3, #9
 800c05c:	2201      	movs	r2, #1
 800c05e:	9202      	str	r2, [sp, #8]
 800c060:	2201      	movs	r2, #1
 800c062:	9201      	str	r2, [sp, #4]
 800c064:	9300      	str	r3, [sp, #0]
 800c066:	2301      	movs	r3, #1
 800c068:	2209      	movs	r2, #9
 800c06a:	211a      	movs	r1, #26
 800c06c:	f7f6 fd76 	bl	8002b5c <HAL_I2C_Mem_Write>
 800c070:	4603      	mov	r3, r0
 800c072:	73fb      	strb	r3, [r7, #15]
							   1, &qmc->qmcReg.ControlReg1.reg, 1, 1);
	if(status != HAL_OK) return status;
 800c074:	7bfb      	ldrb	r3, [r7, #15]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d001      	beq.n	800c07e <UGV_qmcInit+0x13a>
 800c07a:	7bfb      	ldrb	r3, [r7, #15]
 800c07c:	e02d      	b.n	800c0da <UGV_qmcInit+0x196>
	while(HAL_I2C_GetState(i2c) == HAL_I2C_STATE_BUSY_TX);
 800c07e:	bf00      	nop
 800c080:	4b18      	ldr	r3, [pc, #96]	; (800c0e4 <UGV_qmcInit+0x1a0>)
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	4618      	mov	r0, r3
 800c086:	f7f7 f9c3 	bl	8003410 <HAL_I2C_GetState>
 800c08a:	4603      	mov	r3, r0
 800c08c:	2b21      	cmp	r3, #33	; 0x21
 800c08e:	d0f7      	beq.n	800c080 <UGV_qmcInit+0x13c>
	HAL_Delay(1);
 800c090:	2001      	movs	r0, #1
 800c092:	f7f6 f8a9 	bl	80021e8 <HAL_Delay>

	status = HAL_I2C_Mem_Write(i2c, QMC_SLAVE_ADDR, QMC_CONTROL_REG2_ADDR,
 800c096:	4b13      	ldr	r3, [pc, #76]	; (800c0e4 <UGV_qmcInit+0x1a0>)
 800c098:	6818      	ldr	r0, [r3, #0]
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	330a      	adds	r3, #10
 800c09e:	2201      	movs	r2, #1
 800c0a0:	9202      	str	r2, [sp, #8]
 800c0a2:	2201      	movs	r2, #1
 800c0a4:	9201      	str	r2, [sp, #4]
 800c0a6:	9300      	str	r3, [sp, #0]
 800c0a8:	2301      	movs	r3, #1
 800c0aa:	220a      	movs	r2, #10
 800c0ac:	211a      	movs	r1, #26
 800c0ae:	f7f6 fd55 	bl	8002b5c <HAL_I2C_Mem_Write>
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	73fb      	strb	r3, [r7, #15]
							   1, &qmc->qmcReg.ControlReg2.reg, 1, 1);
	if(status != HAL_OK) return status;
 800c0b6:	7bfb      	ldrb	r3, [r7, #15]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d001      	beq.n	800c0c0 <UGV_qmcInit+0x17c>
 800c0bc:	7bfb      	ldrb	r3, [r7, #15]
 800c0be:	e00c      	b.n	800c0da <UGV_qmcInit+0x196>
	while(HAL_I2C_GetState(i2c) == HAL_I2C_STATE_BUSY_TX);
 800c0c0:	bf00      	nop
 800c0c2:	4b08      	ldr	r3, [pc, #32]	; (800c0e4 <UGV_qmcInit+0x1a0>)
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f7f7 f9a2 	bl	8003410 <HAL_I2C_GetState>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	2b21      	cmp	r3, #33	; 0x21
 800c0d0:	d0f7      	beq.n	800c0c2 <UGV_qmcInit+0x17e>
	HAL_Delay(1);
 800c0d2:	2001      	movs	r0, #1
 800c0d4:	f7f6 f888 	bl	80021e8 <HAL_Delay>

	return HAL_OK;
 800c0d8:	2300      	movs	r3, #0
}
 800c0da:	4618      	mov	r0, r3
 800c0dc:	3710      	adds	r7, #16
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bd80      	pop	{r7, pc}
 800c0e2:	bf00      	nop
 800c0e4:	20004f7c 	.word	0x20004f7c
 800c0e8:	43fa0000 	.word	0x43fa0000
 800c0ec:	00000000 	.word	0x00000000
 800c0f0:	20004f84 	.word	0x20004f84
 800c0f4:	20004fa0 	.word	0x20004fa0
 800c0f8:	20004fbc 	.word	0x20004fbc

0800c0fc <UGV_isDataReady>:
 * @brief check the RDYB bit in polling mode
 * @param[in] qmc global variable
 * @return if data is ready return 1 else 0
 */
uint8_t UGV_isDataReady(Qmc * qmc)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b086      	sub	sp, #24
 800c100:	af04      	add	r7, sp, #16
 800c102:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(i2c, QMC_SLAVE_ADDR, QMC_STATUS_REG1,
 800c104:	4b0b      	ldr	r3, [pc, #44]	; (800c134 <UGV_isDataReady+0x38>)
 800c106:	6818      	ldr	r0, [r3, #0]
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	3306      	adds	r3, #6
 800c10c:	2201      	movs	r2, #1
 800c10e:	9202      	str	r2, [sp, #8]
 800c110:	2201      	movs	r2, #1
 800c112:	9201      	str	r2, [sp, #4]
 800c114:	9300      	str	r3, [sp, #0]
 800c116:	2301      	movs	r3, #1
 800c118:	2206      	movs	r2, #6
 800c11a:	211a      	movs	r1, #26
 800c11c:	f7f6 fe18 	bl	8002d50 <HAL_I2C_Mem_Read>
					 1, &qmc->qmcReg.StatusReg.reg, 1, 1);

	return qmc->qmcReg.StatusReg.DRDY;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	799b      	ldrb	r3, [r3, #6]
 800c124:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c128:	b2db      	uxtb	r3, r3
}
 800c12a:	4618      	mov	r0, r3
 800c12c:	3708      	adds	r7, #8
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}
 800c132:	bf00      	nop
 800c134:	20004f7c 	.word	0x20004f7c

0800c138 <UGV_getPositionAdc>:
 * @brief read the register adc values and assign
 * @param[in] bmg global variable
 * @return HAL_I2c read return status
 */
HAL_StatusTypeDef UGV_getPositionAdc(Qmc * qmc)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b08a      	sub	sp, #40	; 0x28
 800c13c:	af04      	add	r7, sp, #16
 800c13e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;

	if (HAL_I2C_IsDeviceReady(i2c, QMC_SLAVE_ADDR, 1, 1) != HAL_OK)
 800c140:	4b70      	ldr	r3, [pc, #448]	; (800c304 <UGV_getPositionAdc+0x1cc>)
 800c142:	6818      	ldr	r0, [r3, #0]
 800c144:	2301      	movs	r3, #1
 800c146:	2201      	movs	r2, #1
 800c148:	211a      	movs	r1, #26
 800c14a:	f7f7 f833 	bl	80031b4 <HAL_I2C_IsDeviceReady>
 800c14e:	4603      	mov	r3, r0
 800c150:	2b00      	cmp	r3, #0
 800c152:	d001      	beq.n	800c158 <UGV_getPositionAdc+0x20>
		return HAL_BUSY;
 800c154:	2302      	movs	r3, #2
 800c156:	e0d0      	b.n	800c2fa <UGV_getPositionAdc+0x1c2>

	//read the 0H-6H register in one packet
	if(qmc->qmcConfig.ROL_PNT == ROL_PNT_ENABLE)
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	7c9b      	ldrb	r3, [r3, #18]
 800c15c:	2b01      	cmp	r3, #1
 800c15e:	d113      	bne.n	800c188 <UGV_getPositionAdc+0x50>
	{
		status = HAL_I2C_Mem_Read(i2c, QMC_SLAVE_ADDR, QMC_XOUT_LSB_ADDR,
 800c160:	4b68      	ldr	r3, [pc, #416]	; (800c304 <UGV_getPositionAdc+0x1cc>)
 800c162:	6818      	ldr	r0, [r3, #0]
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2201      	movs	r2, #1
 800c168:	9202      	str	r2, [sp, #8]
 800c16a:	2207      	movs	r2, #7
 800c16c:	9201      	str	r2, [sp, #4]
 800c16e:	9300      	str	r3, [sp, #0]
 800c170:	2301      	movs	r3, #1
 800c172:	2200      	movs	r2, #0
 800c174:	211a      	movs	r1, #26
 800c176:	f7f6 fdeb 	bl	8002d50 <HAL_I2C_Mem_Read>
 800c17a:	4603      	mov	r3, r0
 800c17c:	73fb      	strb	r3, [r7, #15]
								  1, &qmc->qmcReg.xLsb, QMC_ROL_READ_DATA_LEN, 1);
		if(status != HAL_OK) return status;
 800c17e:	7bfb      	ldrb	r3, [r7, #15]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d024      	beq.n	800c1ce <UGV_getPositionAdc+0x96>
 800c184:	7bfb      	ldrb	r3, [r7, #15]
 800c186:	e0b8      	b.n	800c2fa <UGV_getPositionAdc+0x1c2>
	}
	else
	{
		uint8_t * offsetPtr = &qmc->qmcReg.xLsb;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	613b      	str	r3, [r7, #16]
		for(int i = 0; i < 6; i++)
 800c18c:	2300      	movs	r3, #0
 800c18e:	617b      	str	r3, [r7, #20]
 800c190:	e01a      	b.n	800c1c8 <UGV_getPositionAdc+0x90>
		{
			status = HAL_I2C_Mem_Read(i2c, QMC_SLAVE_ADDR, i,
 800c192:	4b5c      	ldr	r3, [pc, #368]	; (800c304 <UGV_getPositionAdc+0x1cc>)
 800c194:	6818      	ldr	r0, [r3, #0]
 800c196:	697b      	ldr	r3, [r7, #20]
 800c198:	b299      	uxth	r1, r3
 800c19a:	697b      	ldr	r3, [r7, #20]
 800c19c:	693a      	ldr	r2, [r7, #16]
 800c19e:	4413      	add	r3, r2
 800c1a0:	2201      	movs	r2, #1
 800c1a2:	9202      	str	r2, [sp, #8]
 800c1a4:	2201      	movs	r2, #1
 800c1a6:	9201      	str	r2, [sp, #4]
 800c1a8:	9300      	str	r3, [sp, #0]
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	460a      	mov	r2, r1
 800c1ae:	211a      	movs	r1, #26
 800c1b0:	f7f6 fdce 	bl	8002d50 <HAL_I2C_Mem_Read>
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	73fb      	strb	r3, [r7, #15]
									  1, &offsetPtr[i], 1, 1);
			if(status != HAL_OK) return status;
 800c1b8:	7bfb      	ldrb	r3, [r7, #15]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d001      	beq.n	800c1c2 <UGV_getPositionAdc+0x8a>
 800c1be:	7bfb      	ldrb	r3, [r7, #15]
 800c1c0:	e09b      	b.n	800c2fa <UGV_getPositionAdc+0x1c2>
		for(int i = 0; i < 6; i++)
 800c1c2:	697b      	ldr	r3, [r7, #20]
 800c1c4:	3301      	adds	r3, #1
 800c1c6:	617b      	str	r3, [r7, #20]
 800c1c8:	697b      	ldr	r3, [r7, #20]
 800c1ca:	2b05      	cmp	r3, #5
 800c1cc:	dde1      	ble.n	800c192 <UGV_getPositionAdc+0x5a>
		}
	}

	//read temperature registers
	status = HAL_I2C_Mem_Read(i2c, QMC_SLAVE_ADDR, QMC_TOUT_LSB_ADDR, 1, &qmc->qmcReg.tempLsb, 1, 1);
 800c1ce:	4b4d      	ldr	r3, [pc, #308]	; (800c304 <UGV_getPositionAdc+0x1cc>)
 800c1d0:	6818      	ldr	r0, [r3, #0]
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	3307      	adds	r3, #7
 800c1d6:	2201      	movs	r2, #1
 800c1d8:	9202      	str	r2, [sp, #8]
 800c1da:	2201      	movs	r2, #1
 800c1dc:	9201      	str	r2, [sp, #4]
 800c1de:	9300      	str	r3, [sp, #0]
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	2207      	movs	r2, #7
 800c1e4:	211a      	movs	r1, #26
 800c1e6:	f7f6 fdb3 	bl	8002d50 <HAL_I2C_Mem_Read>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 800c1ee:	7bfb      	ldrb	r3, [r7, #15]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d001      	beq.n	800c1f8 <UGV_getPositionAdc+0xc0>
 800c1f4:	7bfb      	ldrb	r3, [r7, #15]
 800c1f6:	e080      	b.n	800c2fa <UGV_getPositionAdc+0x1c2>

	status = HAL_I2C_Mem_Read(i2c, QMC_SLAVE_ADDR, QMC_TOUT_MSB_ADDR, 1, &qmc->qmcReg.tempMsb, 1, 1);
 800c1f8:	4b42      	ldr	r3, [pc, #264]	; (800c304 <UGV_getPositionAdc+0x1cc>)
 800c1fa:	6818      	ldr	r0, [r3, #0]
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	3308      	adds	r3, #8
 800c200:	2201      	movs	r2, #1
 800c202:	9202      	str	r2, [sp, #8]
 800c204:	2201      	movs	r2, #1
 800c206:	9201      	str	r2, [sp, #4]
 800c208:	9300      	str	r3, [sp, #0]
 800c20a:	2301      	movs	r3, #1
 800c20c:	2208      	movs	r2, #8
 800c20e:	211a      	movs	r1, #26
 800c210:	f7f6 fd9e 	bl	8002d50 <HAL_I2C_Mem_Read>
 800c214:	4603      	mov	r3, r0
 800c216:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 800c218:	7bfb      	ldrb	r3, [r7, #15]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d001      	beq.n	800c222 <UGV_getPositionAdc+0xea>
 800c21e:	7bfb      	ldrb	r3, [r7, #15]
 800c220:	e06b      	b.n	800c2fa <UGV_getPositionAdc+0x1c2>

	//casting
	qmc->xPosition   = qmc->qmcReg.xLsb | (qmc->qmcReg.xMsb << 8);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	781b      	ldrb	r3, [r3, #0]
 800c226:	b21a      	sxth	r2, r3
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	785b      	ldrb	r3, [r3, #1]
 800c22c:	021b      	lsls	r3, r3, #8
 800c22e:	b21b      	sxth	r3, r3
 800c230:	4313      	orrs	r3, r2
 800c232:	b21a      	sxth	r2, r3
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	829a      	strh	r2, [r3, #20]
	qmc->xPosition = kalman1_filter(&hKalmanX, qmc->xPosition);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800c23e:	ee07 3a90 	vmov	s15, r3
 800c242:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c246:	eeb0 0a67 	vmov.f32	s0, s15
 800c24a:	482f      	ldr	r0, [pc, #188]	; (800c308 <UGV_getPositionAdc+0x1d0>)
 800c24c:	f7ff fdfc 	bl	800be48 <kalman1_filter>
 800c250:	eef0 7a40 	vmov.f32	s15, s0
 800c254:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c258:	ee17 3a90 	vmov	r3, s15
 800c25c:	b21a      	sxth	r2, r3
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	829a      	strh	r2, [r3, #20]

	qmc->yPosition   = qmc->qmcReg.yLsb | (qmc->qmcReg.yMsb << 8);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	789b      	ldrb	r3, [r3, #2]
 800c266:	b21a      	sxth	r2, r3
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	78db      	ldrb	r3, [r3, #3]
 800c26c:	021b      	lsls	r3, r3, #8
 800c26e:	b21b      	sxth	r3, r3
 800c270:	4313      	orrs	r3, r2
 800c272:	b21a      	sxth	r2, r3
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	82da      	strh	r2, [r3, #22]
	qmc->yPosition = kalman1_filter(&hKalmanY, qmc->yPosition);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800c27e:	ee07 3a90 	vmov	s15, r3
 800c282:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c286:	eeb0 0a67 	vmov.f32	s0, s15
 800c28a:	4820      	ldr	r0, [pc, #128]	; (800c30c <UGV_getPositionAdc+0x1d4>)
 800c28c:	f7ff fddc 	bl	800be48 <kalman1_filter>
 800c290:	eef0 7a40 	vmov.f32	s15, s0
 800c294:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c298:	ee17 3a90 	vmov	r3, s15
 800c29c:	b21a      	sxth	r2, r3
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	82da      	strh	r2, [r3, #22]

	qmc->zPosition   = qmc->qmcReg.zLsb | (qmc->qmcReg.zMsb << 8);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	791b      	ldrb	r3, [r3, #4]
 800c2a6:	b21a      	sxth	r2, r3
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	795b      	ldrb	r3, [r3, #5]
 800c2ac:	021b      	lsls	r3, r3, #8
 800c2ae:	b21b      	sxth	r3, r3
 800c2b0:	4313      	orrs	r3, r2
 800c2b2:	b21a      	sxth	r2, r3
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	831a      	strh	r2, [r3, #24]
	qmc->zPosition = kalman1_filter(&hKalmanZ, qmc->zPosition);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800c2be:	ee07 3a90 	vmov	s15, r3
 800c2c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c2c6:	eeb0 0a67 	vmov.f32	s0, s15
 800c2ca:	4811      	ldr	r0, [pc, #68]	; (800c310 <UGV_getPositionAdc+0x1d8>)
 800c2cc:	f7ff fdbc 	bl	800be48 <kalman1_filter>
 800c2d0:	eef0 7a40 	vmov.f32	s15, s0
 800c2d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c2d8:	ee17 3a90 	vmov	r3, s15
 800c2dc:	b21a      	sxth	r2, r3
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	831a      	strh	r2, [r3, #24]

	qmc->temperature = qmc->qmcReg.tempLsb | (qmc->qmcReg.tempMsb << 8);
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	79db      	ldrb	r3, [r3, #7]
 800c2e6:	b21a      	sxth	r2, r3
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	7a1b      	ldrb	r3, [r3, #8]
 800c2ec:	021b      	lsls	r3, r3, #8
 800c2ee:	b21b      	sxth	r3, r3
 800c2f0:	4313      	orrs	r3, r2
 800c2f2:	b21a      	sxth	r2, r3
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	835a      	strh	r2, [r3, #26]

	return HAL_OK;
 800c2f8:	2300      	movs	r3, #0
}
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	3718      	adds	r7, #24
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}
 800c302:	bf00      	nop
 800c304:	20004f7c 	.word	0x20004f7c
 800c308:	20004f84 	.word	0x20004f84
 800c30c:	20004fa0 	.word	0x20004fa0
 800c310:	20004fbc 	.word	0x20004fbc

0800c314 <UGV_setMagneticDelination>:
 * @param[in] declination degree
 * @param[in] declination minute
 * @return none
 */
void UGV_setMagneticDelination(uint16_t degree, uint8_t minute)
{
 800c314:	b480      	push	{r7}
 800c316:	b083      	sub	sp, #12
 800c318:	af00      	add	r7, sp, #0
 800c31a:	4603      	mov	r3, r0
 800c31c:	460a      	mov	r2, r1
 800c31e:	80fb      	strh	r3, [r7, #6]
 800c320:	4613      	mov	r3, r2
 800c322:	717b      	strb	r3, [r7, #5]
	magneticDeclinationDegrees = degree + minute / 60.0f;
 800c324:	88fb      	ldrh	r3, [r7, #6]
 800c326:	ee07 3a90 	vmov	s15, r3
 800c32a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c32e:	797b      	ldrb	r3, [r7, #5]
 800c330:	ee07 3a90 	vmov	s15, r3
 800c334:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c338:	ed9f 6a07 	vldr	s12, [pc, #28]	; 800c358 <UGV_setMagneticDelination+0x44>
 800c33c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800c340:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c344:	4b05      	ldr	r3, [pc, #20]	; (800c35c <UGV_setMagneticDelination+0x48>)
 800c346:	edc3 7a00 	vstr	s15, [r3]
}
 800c34a:	bf00      	nop
 800c34c:	370c      	adds	r7, #12
 800c34e:	46bd      	mov	sp, r7
 800c350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c354:	4770      	bx	lr
 800c356:	bf00      	nop
 800c358:	42700000 	.word	0x42700000
 800c35c:	20004f80 	.word	0x20004f80

0800c360 <UGV_getAzimuth>:
 * typically measured clockwise from true north.
 * @param[in] qmc global variable
 * @return azimuth angle
 */
float UGV_getAzimuth(Qmc * qmc)
{
 800c360:	b5b0      	push	{r4, r5, r7, lr}
 800c362:	b084      	sub	sp, #16
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
	UGV_getPositionAdc(qmc);
 800c368:	6878      	ldr	r0, [r7, #4]
 800c36a:	f7ff fee5 	bl	800c138 <UGV_getPositionAdc>

	float azimuth = atan2(qmc->xPosition, qmc->yPosition) * 180.0f / PI;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800c374:	4618      	mov	r0, r3
 800c376:	f7f4 f8ed 	bl	8000554 <__aeabi_i2d>
 800c37a:	4604      	mov	r4, r0
 800c37c:	460d      	mov	r5, r1
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800c384:	4618      	mov	r0, r3
 800c386:	f7f4 f8e5 	bl	8000554 <__aeabi_i2d>
 800c38a:	4602      	mov	r2, r0
 800c38c:	460b      	mov	r3, r1
 800c38e:	ec43 2b11 	vmov	d1, r2, r3
 800c392:	ec45 4b10 	vmov	d0, r4, r5
 800c396:	f001 fea4 	bl	800e0e2 <atan2>
 800c39a:	ec51 0b10 	vmov	r0, r1, d0
 800c39e:	f04f 0200 	mov.w	r2, #0
 800c3a2:	4b21      	ldr	r3, [pc, #132]	; (800c428 <UGV_getAzimuth+0xc8>)
 800c3a4:	f7f4 f940 	bl	8000628 <__aeabi_dmul>
 800c3a8:	4602      	mov	r2, r0
 800c3aa:	460b      	mov	r3, r1
 800c3ac:	4610      	mov	r0, r2
 800c3ae:	4619      	mov	r1, r3
 800c3b0:	a31b      	add	r3, pc, #108	; (adr r3, 800c420 <UGV_getAzimuth+0xc0>)
 800c3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3b6:	f7f4 fa61 	bl	800087c <__aeabi_ddiv>
 800c3ba:	4602      	mov	r2, r0
 800c3bc:	460b      	mov	r3, r1
 800c3be:	4610      	mov	r0, r2
 800c3c0:	4619      	mov	r1, r3
 800c3c2:	f7f4 fc01 	bl	8000bc8 <__aeabi_d2f>
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	60fb      	str	r3, [r7, #12]
	azimuth -= magneticDeclinationDegrees;
 800c3ca:	4b18      	ldr	r3, [pc, #96]	; (800c42c <UGV_getAzimuth+0xcc>)
 800c3cc:	edd3 7a00 	vldr	s15, [r3]
 800c3d0:	ed97 7a03 	vldr	s14, [r7, #12]
 800c3d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c3d8:	edc7 7a03 	vstr	s15, [r7, #12]

	azimuth = (azimuth < 0) ? (azimuth + 360) : azimuth;
 800c3dc:	edd7 7a03 	vldr	s15, [r7, #12]
 800c3e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c3e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3e8:	d506      	bpl.n	800c3f8 <UGV_getAzimuth+0x98>
 800c3ea:	edd7 7a03 	vldr	s15, [r7, #12]
 800c3ee:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800c430 <UGV_getAzimuth+0xd0>
 800c3f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c3f6:	e001      	b.n	800c3fc <UGV_getAzimuth+0x9c>
 800c3f8:	edd7 7a03 	vldr	s15, [r7, #12]
 800c3fc:	edc7 7a03 	vstr	s15, [r7, #12]

	azimuth = 360 - azimuth;
 800c400:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800c430 <UGV_getAzimuth+0xd0>
 800c404:	edd7 7a03 	vldr	s15, [r7, #12]
 800c408:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c40c:	edc7 7a03 	vstr	s15, [r7, #12]

	return azimuth;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	ee07 3a90 	vmov	s15, r3
}
 800c416:	eeb0 0a67 	vmov.f32	s0, s15
 800c41a:	3710      	adds	r7, #16
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bdb0      	pop	{r4, r5, r7, pc}
 800c420:	54442d18 	.word	0x54442d18
 800c424:	400921fb 	.word	0x400921fb
 800c428:	40668000 	.word	0x40668000
 800c42c:	20004f80 	.word	0x20004f80
 800c430:	43b40000 	.word	0x43b40000

0800c434 <UGV_softReset>:
/**
 * @brief Soft reset, restore default value of all registers.
 * @return none
 */
HAL_StatusTypeDef UGV_softReset()
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b086      	sub	sp, #24
 800c438:	af04      	add	r7, sp, #16
	uint8_t reg = 1 << 7;
 800c43a:	2380      	movs	r3, #128	; 0x80
 800c43c:	71fb      	strb	r3, [r7, #7]

	return HAL_I2C_Mem_Write(i2c, QMC_SLAVE_ADDR, 1, QMC_CONTROL_REG2_ADDR,
 800c43e:	4b09      	ldr	r3, [pc, #36]	; (800c464 <UGV_softReset+0x30>)
 800c440:	6818      	ldr	r0, [r3, #0]
 800c442:	2301      	movs	r3, #1
 800c444:	9302      	str	r3, [sp, #8]
 800c446:	2301      	movs	r3, #1
 800c448:	9301      	str	r3, [sp, #4]
 800c44a:	1dfb      	adds	r3, r7, #7
 800c44c:	9300      	str	r3, [sp, #0]
 800c44e:	230a      	movs	r3, #10
 800c450:	2201      	movs	r2, #1
 800c452:	211a      	movs	r1, #26
 800c454:	f7f6 fb82 	bl	8002b5c <HAL_I2C_Mem_Write>
 800c458:	4603      	mov	r3, r0
			  	  	  	  	 &reg, 1, 1);
}
 800c45a:	4618      	mov	r0, r3
 800c45c:	3708      	adds	r7, #8
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}
 800c462:	bf00      	nop
 800c464:	20004f7c 	.word	0x20004f7c

0800c468 <UGV_rcReceiverInit>:
/**
 * @brief initialize timer2 as as input capture mode, and enable interrupts
 * @return none
 */
void UGV_rcReceiverInit()
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	af00      	add	r7, sp, #0
	  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800c46c:	2100      	movs	r1, #0
 800c46e:	4810      	ldr	r0, [pc, #64]	; (800c4b0 <UGV_rcReceiverInit+0x48>)
 800c470:	f7f9 f8e4 	bl	800563c <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 800c474:	2104      	movs	r1, #4
 800c476:	480e      	ldr	r0, [pc, #56]	; (800c4b0 <UGV_rcReceiverInit+0x48>)
 800c478:	f7f9 f8e0 	bl	800563c <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 800c47c:	2108      	movs	r1, #8
 800c47e:	480c      	ldr	r0, [pc, #48]	; (800c4b0 <UGV_rcReceiverInit+0x48>)
 800c480:	f7f9 f8dc 	bl	800563c <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4);
 800c484:	210c      	movs	r1, #12
 800c486:	480a      	ldr	r0, [pc, #40]	; (800c4b0 <UGV_rcReceiverInit+0x48>)
 800c488:	f7f9 f8d8 	bl	800563c <HAL_TIM_IC_Start_IT>

	  rcChannel_s.channel1 = CHANNEL_MIDDLE;
 800c48c:	4b09      	ldr	r3, [pc, #36]	; (800c4b4 <UGV_rcReceiverInit+0x4c>)
 800c48e:	f240 52f5 	movw	r2, #1525	; 0x5f5
 800c492:	801a      	strh	r2, [r3, #0]
	  rcChannel_s.channel2 = CHANNEL_MIDDLE;
 800c494:	4b07      	ldr	r3, [pc, #28]	; (800c4b4 <UGV_rcReceiverInit+0x4c>)
 800c496:	f240 52f5 	movw	r2, #1525	; 0x5f5
 800c49a:	805a      	strh	r2, [r3, #2]
	  rcChannel_s.channel3 = CHANNEL_MIDDLE;
 800c49c:	4b05      	ldr	r3, [pc, #20]	; (800c4b4 <UGV_rcReceiverInit+0x4c>)
 800c49e:	f240 52f5 	movw	r2, #1525	; 0x5f5
 800c4a2:	809a      	strh	r2, [r3, #4]
	  rcChannel_s.channel4 = CHANNEL_MIDDLE;
 800c4a4:	4b03      	ldr	r3, [pc, #12]	; (800c4b4 <UGV_rcReceiverInit+0x4c>)
 800c4a6:	f240 52f5 	movw	r2, #1525	; 0x5f5
 800c4aa:	80da      	strh	r2, [r3, #6]
}
 800c4ac:	bf00      	nop
 800c4ae:	bd80      	pop	{r7, pc}
 800c4b0:	20000270 	.word	0x20000270
 800c4b4:	2000500c 	.word	0x2000500c

0800c4b8 <HAL_TIM_IC_CaptureCallback>:
 * @brief timer rising and falling edge interrupt callback function
 * @param[in] timer base address
 * @return none
 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b082      	sub	sp, #8
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4c8:	d121      	bne.n	800c50e <HAL_TIM_IC_CaptureCallback+0x56>
	{
		rcActive = 1;
 800c4ca:	4b13      	ldr	r3, [pc, #76]	; (800c518 <HAL_TIM_IC_CaptureCallback+0x60>)
 800c4cc:	2201      	movs	r2, #1
 800c4ce:	701a      	strb	r2, [r3, #0]

		//!< channel1 calculation
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	7f1b      	ldrb	r3, [r3, #28]
 800c4d4:	2b01      	cmp	r3, #1
 800c4d6:	d103      	bne.n	800c4e0 <HAL_TIM_IC_CaptureCallback+0x28>
		{
			UGV_rcDutyCalculate(HAL_TIM_ACTIVE_CHANNEL_1);
 800c4d8:	2001      	movs	r0, #1
 800c4da:	f000 f81f 	bl	800c51c <UGV_rcDutyCalculate>
		else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
		{
			UGV_rcDutyCalculate(HAL_TIM_ACTIVE_CHANNEL_4);
		}
	}
}
 800c4de:	e016      	b.n	800c50e <HAL_TIM_IC_CaptureCallback+0x56>
		else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	7f1b      	ldrb	r3, [r3, #28]
 800c4e4:	2b02      	cmp	r3, #2
 800c4e6:	d103      	bne.n	800c4f0 <HAL_TIM_IC_CaptureCallback+0x38>
			UGV_rcDutyCalculate(HAL_TIM_ACTIVE_CHANNEL_2);
 800c4e8:	2002      	movs	r0, #2
 800c4ea:	f000 f817 	bl	800c51c <UGV_rcDutyCalculate>
}
 800c4ee:	e00e      	b.n	800c50e <HAL_TIM_IC_CaptureCallback+0x56>
		else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	7f1b      	ldrb	r3, [r3, #28]
 800c4f4:	2b04      	cmp	r3, #4
 800c4f6:	d103      	bne.n	800c500 <HAL_TIM_IC_CaptureCallback+0x48>
			UGV_rcDutyCalculate(HAL_TIM_ACTIVE_CHANNEL_3);
 800c4f8:	2004      	movs	r0, #4
 800c4fa:	f000 f80f 	bl	800c51c <UGV_rcDutyCalculate>
}
 800c4fe:	e006      	b.n	800c50e <HAL_TIM_IC_CaptureCallback+0x56>
		else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	7f1b      	ldrb	r3, [r3, #28]
 800c504:	2b08      	cmp	r3, #8
 800c506:	d102      	bne.n	800c50e <HAL_TIM_IC_CaptureCallback+0x56>
			UGV_rcDutyCalculate(HAL_TIM_ACTIVE_CHANNEL_4);
 800c508:	2008      	movs	r0, #8
 800c50a:	f000 f807 	bl	800c51c <UGV_rcDutyCalculate>
}
 800c50e:	bf00      	nop
 800c510:	3708      	adds	r7, #8
 800c512:	46bd      	mov	sp, r7
 800c514:	bd80      	pop	{r7, pc}
 800c516:	bf00      	nop
 800c518:	20005014 	.word	0x20005014

0800c51c <UGV_rcDutyCalculate>:
 *
 * @param[in] active channel number
 * @return none
 */
static void UGV_rcDutyCalculate(HAL_TIM_ActiveChannel HAL_TIM_ACTIVE_CHANNEL)
{
 800c51c:	b590      	push	{r4, r7, lr}
 800c51e:	b085      	sub	sp, #20
 800c520:	af00      	add	r7, sp, #0
 800c522:	4603      	mov	r3, r0
 800c524:	71fb      	strb	r3, [r7, #7]
	uint16_t *channelPtr = &rcChannel_s.channel1;
 800c526:	4b3e      	ldr	r3, [pc, #248]	; (800c620 <UGV_rcDutyCalculate+0x104>)
 800c528:	60fb      	str	r3, [r7, #12]

	uint8_t index = (HAL_TIM_ACTIVE_CHANNEL == HAL_TIM_ACTIVE_CHANNEL_1) ? 0 :
 800c52a:	79fb      	ldrb	r3, [r7, #7]
 800c52c:	2b01      	cmp	r3, #1
 800c52e:	d010      	beq.n	800c552 <UGV_rcDutyCalculate+0x36>
 800c530:	79fb      	ldrb	r3, [r7, #7]
 800c532:	2b02      	cmp	r3, #2
 800c534:	d00b      	beq.n	800c54e <UGV_rcDutyCalculate+0x32>
 800c536:	79fb      	ldrb	r3, [r7, #7]
 800c538:	2b04      	cmp	r3, #4
 800c53a:	d006      	beq.n	800c54a <UGV_rcDutyCalculate+0x2e>
 800c53c:	79fb      	ldrb	r3, [r7, #7]
 800c53e:	2b08      	cmp	r3, #8
 800c540:	d101      	bne.n	800c546 <UGV_rcDutyCalculate+0x2a>
 800c542:	2303      	movs	r3, #3
 800c544:	e006      	b.n	800c554 <UGV_rcDutyCalculate+0x38>
 800c546:	2364      	movs	r3, #100	; 0x64
 800c548:	e004      	b.n	800c554 <UGV_rcDutyCalculate+0x38>
 800c54a:	2302      	movs	r3, #2
 800c54c:	e002      	b.n	800c554 <UGV_rcDutyCalculate+0x38>
 800c54e:	2301      	movs	r3, #1
 800c550:	e000      	b.n	800c554 <UGV_rcDutyCalculate+0x38>
 800c552:	2300      	movs	r3, #0
 800c554:	72fb      	strb	r3, [r7, #11]
			        (HAL_TIM_ACTIVE_CHANNEL == HAL_TIM_ACTIVE_CHANNEL_2) ? 1 :
			        (HAL_TIM_ACTIVE_CHANNEL == HAL_TIM_ACTIVE_CHANNEL_3) ? 2 :
			        (HAL_TIM_ACTIVE_CHANNEL == HAL_TIM_ACTIVE_CHANNEL_4) ? 3 : 100;

	if(tim2FirstCap[index] == 0)
 800c556:	7afb      	ldrb	r3, [r7, #11]
 800c558:	4a32      	ldr	r2, [pc, #200]	; (800c624 <UGV_rcDutyCalculate+0x108>)
 800c55a:	5cd3      	ldrb	r3, [r2, r3]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d10f      	bne.n	800c580 <UGV_rcDutyCalculate+0x64>
	{
		//!< channel values -> 0-4-8-12 that is four time index
		tim2IcVal1[index] = HAL_TIM_ReadCapturedValue(&htim2, index * 4);
 800c560:	7afb      	ldrb	r3, [r7, #11]
 800c562:	009b      	lsls	r3, r3, #2
 800c564:	7afc      	ldrb	r4, [r7, #11]
 800c566:	4619      	mov	r1, r3
 800c568:	482f      	ldr	r0, [pc, #188]	; (800c628 <UGV_rcDutyCalculate+0x10c>)
 800c56a:	f7f9 fbdd 	bl	8005d28 <HAL_TIM_ReadCapturedValue>
 800c56e:	4603      	mov	r3, r0
 800c570:	4a2e      	ldr	r2, [pc, #184]	; (800c62c <UGV_rcDutyCalculate+0x110>)
 800c572:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		tim2FirstCap[index] = 1;
 800c576:	7afb      	ldrb	r3, [r7, #11]
 800c578:	4a2a      	ldr	r2, [pc, #168]	; (800c624 <UGV_rcDutyCalculate+0x108>)
 800c57a:	2101      	movs	r1, #1
 800c57c:	54d1      	strb	r1, [r2, r3]


		channelPtr[index] = tim2Difference[index] * mFactor;
		tim2FirstCap[index] = 0;
	}
}
 800c57e:	e04b      	b.n	800c618 <UGV_rcDutyCalculate+0xfc>
		tim2IcVal2[index] = HAL_TIM_ReadCapturedValue(&htim2, index * 4);
 800c580:	7afb      	ldrb	r3, [r7, #11]
 800c582:	009b      	lsls	r3, r3, #2
 800c584:	7afc      	ldrb	r4, [r7, #11]
 800c586:	4619      	mov	r1, r3
 800c588:	4827      	ldr	r0, [pc, #156]	; (800c628 <UGV_rcDutyCalculate+0x10c>)
 800c58a:	f7f9 fbcd 	bl	8005d28 <HAL_TIM_ReadCapturedValue>
 800c58e:	4603      	mov	r3, r0
 800c590:	4a27      	ldr	r2, [pc, #156]	; (800c630 <UGV_rcDutyCalculate+0x114>)
 800c592:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		if(tim2IcVal2[index] > tim2IcVal1[index])
 800c596:	7afb      	ldrb	r3, [r7, #11]
 800c598:	4a25      	ldr	r2, [pc, #148]	; (800c630 <UGV_rcDutyCalculate+0x114>)
 800c59a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c59e:	7afb      	ldrb	r3, [r7, #11]
 800c5a0:	4922      	ldr	r1, [pc, #136]	; (800c62c <UGV_rcDutyCalculate+0x110>)
 800c5a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c5a6:	429a      	cmp	r2, r3
 800c5a8:	d90d      	bls.n	800c5c6 <UGV_rcDutyCalculate+0xaa>
			tim2Difference[index] = tim2IcVal2[index] - tim2IcVal1[index];
 800c5aa:	7afb      	ldrb	r3, [r7, #11]
 800c5ac:	4a20      	ldr	r2, [pc, #128]	; (800c630 <UGV_rcDutyCalculate+0x114>)
 800c5ae:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c5b2:	7afb      	ldrb	r3, [r7, #11]
 800c5b4:	4a1d      	ldr	r2, [pc, #116]	; (800c62c <UGV_rcDutyCalculate+0x110>)
 800c5b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c5ba:	7afb      	ldrb	r3, [r7, #11]
 800c5bc:	1a8a      	subs	r2, r1, r2
 800c5be:	491d      	ldr	r1, [pc, #116]	; (800c634 <UGV_rcDutyCalculate+0x118>)
 800c5c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c5c4:	e00d      	b.n	800c5e2 <UGV_rcDutyCalculate+0xc6>
			tim2Difference[index] = (0xFFFFFFFF - tim2IcVal1[index]) + tim2IcVal2[index];
 800c5c6:	7afb      	ldrb	r3, [r7, #11]
 800c5c8:	4a19      	ldr	r2, [pc, #100]	; (800c630 <UGV_rcDutyCalculate+0x114>)
 800c5ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c5ce:	7afb      	ldrb	r3, [r7, #11]
 800c5d0:	4916      	ldr	r1, [pc, #88]	; (800c62c <UGV_rcDutyCalculate+0x110>)
 800c5d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c5d6:	1ad2      	subs	r2, r2, r3
 800c5d8:	7afb      	ldrb	r3, [r7, #11]
 800c5da:	3a01      	subs	r2, #1
 800c5dc:	4915      	ldr	r1, [pc, #84]	; (800c634 <UGV_rcDutyCalculate+0x118>)
 800c5de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		channelPtr[index] = tim2Difference[index] * mFactor;
 800c5e2:	7afb      	ldrb	r3, [r7, #11]
 800c5e4:	4a13      	ldr	r2, [pc, #76]	; (800c634 <UGV_rcDutyCalculate+0x118>)
 800c5e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5ea:	ee07 3a90 	vmov	s15, r3
 800c5ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c5f2:	4b11      	ldr	r3, [pc, #68]	; (800c638 <UGV_rcDutyCalculate+0x11c>)
 800c5f4:	edd3 7a00 	vldr	s15, [r3]
 800c5f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5fc:	7afb      	ldrb	r3, [r7, #11]
 800c5fe:	005b      	lsls	r3, r3, #1
 800c600:	68fa      	ldr	r2, [r7, #12]
 800c602:	4413      	add	r3, r2
 800c604:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c608:	ee17 2a90 	vmov	r2, s15
 800c60c:	b292      	uxth	r2, r2
 800c60e:	801a      	strh	r2, [r3, #0]
		tim2FirstCap[index] = 0;
 800c610:	7afb      	ldrb	r3, [r7, #11]
 800c612:	4a04      	ldr	r2, [pc, #16]	; (800c624 <UGV_rcDutyCalculate+0x108>)
 800c614:	2100      	movs	r1, #0
 800c616:	54d1      	strb	r1, [r2, r3]
}
 800c618:	bf00      	nop
 800c61a:	3714      	adds	r7, #20
 800c61c:	46bd      	mov	sp, r7
 800c61e:	bd90      	pop	{r4, r7, pc}
 800c620:	2000500c 	.word	0x2000500c
 800c624:	20004fd8 	.word	0x20004fd8
 800c628:	20000270 	.word	0x20000270
 800c62c:	20004fdc 	.word	0x20004fdc
 800c630:	20004fec 	.word	0x20004fec
 800c634:	20004ffc 	.word	0x20004ffc
 800c638:	20000048 	.word	0x20000048

0800c63c <RCFilter_Init>:
#include "rcFilter.h"

void RCFilter_Init(RCFilter *filt, float cutoffFreqHz, float sampleTimeS) {
 800c63c:	b480      	push	{r7}
 800c63e:	b087      	sub	sp, #28
 800c640:	af00      	add	r7, sp, #0
 800c642:	60f8      	str	r0, [r7, #12]
 800c644:	ed87 0a02 	vstr	s0, [r7, #8]
 800c648:	edc7 0a01 	vstr	s1, [r7, #4]

	/* Compute equivalent 'RC' constant from cut-off frequency */
	float RC = 1.0f / (6.28318530718f * cutoffFreqHz);
 800c64c:	edd7 7a02 	vldr	s15, [r7, #8]
 800c650:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800c6b4 <RCFilter_Init+0x78>
 800c654:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c658:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c65c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c660:	edc7 7a05 	vstr	s15, [r7, #20]

	/* Pre-compute filter coefficients for first-order low-pass filter */
	filt->coeff[0] = sampleTimeS / (sampleTimeS + RC);
 800c664:	ed97 7a01 	vldr	s14, [r7, #4]
 800c668:	edd7 7a05 	vldr	s15, [r7, #20]
 800c66c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c670:	edd7 6a01 	vldr	s13, [r7, #4]
 800c674:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	edc3 7a00 	vstr	s15, [r3]
	filt->coeff[1] = RC / (sampleTimeS + RC);
 800c67e:	ed97 7a01 	vldr	s14, [r7, #4]
 800c682:	edd7 7a05 	vldr	s15, [r7, #20]
 800c686:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c68a:	edd7 6a05 	vldr	s13, [r7, #20]
 800c68e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	edc3 7a01 	vstr	s15, [r3, #4]

	/* Clear output buffer */
	filt->out[0] = 0.0f;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	f04f 0200 	mov.w	r2, #0
 800c69e:	609a      	str	r2, [r3, #8]
	filt->out[1] = 0.0f;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	f04f 0200 	mov.w	r2, #0
 800c6a6:	60da      	str	r2, [r3, #12]
}
 800c6a8:	bf00      	nop
 800c6aa:	371c      	adds	r7, #28
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b2:	4770      	bx	lr
 800c6b4:	40c90fdb 	.word	0x40c90fdb

0800c6b8 <RCFilter_Update>:

float RCFilter_Update(RCFilter *filt, float inp) {
 800c6b8:	b480      	push	{r7}
 800c6ba:	b083      	sub	sp, #12
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
 800c6c0:	ed87 0a00 	vstr	s0, [r7]

	/* Shift output samples */
	filt->out[1] = filt->out[0];
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	689a      	ldr	r2, [r3, #8]
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	60da      	str	r2, [r3, #12]

	/* Compute new output sample */
	filt->out[0] = filt->coeff[0] * inp + filt->coeff[1] * filt->out[1];
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	ed93 7a00 	vldr	s14, [r3]
 800c6d2:	edd7 7a00 	vldr	s15, [r7]
 800c6d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	edd3 6a01 	vldr	s13, [r3, #4]
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	edd3 7a03 	vldr	s15, [r3, #12]
 800c6e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c6ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	edc3 7a02 	vstr	s15, [r3, #8]

	/* Return filtered sample */
	return (filt->out[0]);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	689b      	ldr	r3, [r3, #8]
 800c6f8:	ee07 3a90 	vmov	s15, r3
}
 800c6fc:	eeb0 0a67 	vmov.f32	s0, s15
 800c700:	370c      	adds	r7, #12
 800c702:	46bd      	mov	sp, r7
 800c704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c708:	4770      	bx	lr

0800c70a <SX1278_SPIRead>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 800c70a:	b580      	push	{r7, lr}
 800c70c:	b084      	sub	sp, #16
 800c70e:	af00      	add	r7, sp, #0
 800c710:	6078      	str	r0, [r7, #4]
 800c712:	460b      	mov	r3, r1
 800c714:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	78fa      	ldrb	r2, [r7, #3]
 800c71c:	4611      	mov	r1, r2
 800c71e:	4618      	mov	r0, r3
 800c720:	f000 fbdd 	bl	800cede <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	4618      	mov	r0, r3
 800c72a:	f000 fbf8 	bl	800cf1e <SX1278_hw_SPIReadByte>
 800c72e:	4603      	mov	r3, r0
 800c730:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	2101      	movs	r1, #1
 800c738:	4618      	mov	r0, r3
 800c73a:	f000 fb95 	bl	800ce68 <SX1278_hw_SetNSS>
	return tmp;
 800c73e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c740:	4618      	mov	r0, r3
 800c742:	3710      	adds	r7, #16
 800c744:	46bd      	mov	sp, r7
 800c746:	bd80      	pop	{r7, pc}

0800c748 <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 800c748:	b580      	push	{r7, lr}
 800c74a:	b082      	sub	sp, #8
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
 800c750:	460b      	mov	r3, r1
 800c752:	70fb      	strb	r3, [r7, #3]
 800c754:	4613      	mov	r3, r2
 800c756:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	2100      	movs	r1, #0
 800c75e:	4618      	mov	r0, r3
 800c760:	f000 fb82 	bl	800ce68 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681a      	ldr	r2, [r3, #0]
 800c768:	78fb      	ldrb	r3, [r7, #3]
 800c76a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c76e:	b2db      	uxtb	r3, r3
 800c770:	4619      	mov	r1, r3
 800c772:	4610      	mov	r0, r2
 800c774:	f000 fbb3 	bl	800cede <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	78ba      	ldrb	r2, [r7, #2]
 800c77e:	4611      	mov	r1, r2
 800c780:	4618      	mov	r0, r3
 800c782:	f000 fbac 	bl	800cede <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	2101      	movs	r1, #1
 800c78c:	4618      	mov	r0, r3
 800c78e:	f000 fb6b 	bl	800ce68 <SX1278_hw_SetNSS>
}
 800c792:	bf00      	nop
 800c794:	3708      	adds	r7, #8
 800c796:	46bd      	mov	sp, r7
 800c798:	bd80      	pop	{r7, pc}

0800c79a <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length) {
 800c79a:	b590      	push	{r4, r7, lr}
 800c79c:	b087      	sub	sp, #28
 800c79e:	af00      	add	r7, sp, #0
 800c7a0:	60f8      	str	r0, [r7, #12]
 800c7a2:	607a      	str	r2, [r7, #4]
 800c7a4:	461a      	mov	r2, r3
 800c7a6:	460b      	mov	r3, r1
 800c7a8:	72fb      	strb	r3, [r7, #11]
 800c7aa:	4613      	mov	r3, r2
 800c7ac:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 800c7ae:	7abb      	ldrb	r3, [r7, #10]
 800c7b0:	2b01      	cmp	r3, #1
 800c7b2:	d927      	bls.n	800c804 <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	2100      	movs	r1, #0
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	f000 fb54 	bl	800ce68 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	7afa      	ldrb	r2, [r7, #11]
 800c7c6:	4611      	mov	r1, r2
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	f000 fb88 	bl	800cede <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	75fb      	strb	r3, [r7, #23]
 800c7d2:	e00c      	b.n	800c7ee <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	6819      	ldr	r1, [r3, #0]
 800c7d8:	7dfb      	ldrb	r3, [r7, #23]
 800c7da:	687a      	ldr	r2, [r7, #4]
 800c7dc:	18d4      	adds	r4, r2, r3
 800c7de:	4608      	mov	r0, r1
 800c7e0:	f000 fb9d 	bl	800cf1e <SX1278_hw_SPIReadByte>
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 800c7e8:	7dfb      	ldrb	r3, [r7, #23]
 800c7ea:	3301      	adds	r3, #1
 800c7ec:	75fb      	strb	r3, [r7, #23]
 800c7ee:	7dfa      	ldrb	r2, [r7, #23]
 800c7f0:	7abb      	ldrb	r3, [r7, #10]
 800c7f2:	429a      	cmp	r2, r3
 800c7f4:	d3ee      	bcc.n	800c7d4 <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	2101      	movs	r1, #1
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f000 fb33 	bl	800ce68 <SX1278_hw_SetNSS>
 800c802:	e000      	b.n	800c806 <SX1278_SPIBurstRead+0x6c>
		return;
 800c804:	bf00      	nop
	}
}
 800c806:	371c      	adds	r7, #28
 800c808:	46bd      	mov	sp, r7
 800c80a:	bd90      	pop	{r4, r7, pc}

0800c80c <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b086      	sub	sp, #24
 800c810:	af00      	add	r7, sp, #0
 800c812:	60f8      	str	r0, [r7, #12]
 800c814:	607a      	str	r2, [r7, #4]
 800c816:	461a      	mov	r2, r3
 800c818:	460b      	mov	r3, r1
 800c81a:	72fb      	strb	r3, [r7, #11]
 800c81c:	4613      	mov	r3, r2
 800c81e:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 800c820:	7abb      	ldrb	r3, [r7, #10]
 800c822:	2b01      	cmp	r3, #1
 800c824:	d929      	bls.n	800c87a <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	2100      	movs	r1, #0
 800c82c:	4618      	mov	r0, r3
 800c82e:	f000 fb1b 	bl	800ce68 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	681a      	ldr	r2, [r3, #0]
 800c836:	7afb      	ldrb	r3, [r7, #11]
 800c838:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c83c:	b2db      	uxtb	r3, r3
 800c83e:	4619      	mov	r1, r3
 800c840:	4610      	mov	r0, r2
 800c842:	f000 fb4c 	bl	800cede <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800c846:	2300      	movs	r3, #0
 800c848:	75fb      	strb	r3, [r7, #23]
 800c84a:	e00b      	b.n	800c864 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	6818      	ldr	r0, [r3, #0]
 800c850:	7dfb      	ldrb	r3, [r7, #23]
 800c852:	687a      	ldr	r2, [r7, #4]
 800c854:	4413      	add	r3, r2
 800c856:	781b      	ldrb	r3, [r3, #0]
 800c858:	4619      	mov	r1, r3
 800c85a:	f000 fb40 	bl	800cede <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800c85e:	7dfb      	ldrb	r3, [r7, #23]
 800c860:	3301      	adds	r3, #1
 800c862:	75fb      	strb	r3, [r7, #23]
 800c864:	7dfa      	ldrb	r2, [r7, #23]
 800c866:	7abb      	ldrb	r3, [r7, #10]
 800c868:	429a      	cmp	r2, r3
 800c86a:	d3ef      	bcc.n	800c84c <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	2101      	movs	r1, #1
 800c872:	4618      	mov	r0, r3
 800c874:	f000 faf8 	bl	800ce68 <SX1278_hw_SetNSS>
 800c878:	e000      	b.n	800c87c <SX1278_SPIBurstWrite+0x70>
		return;
 800c87a:	bf00      	nop
	}
}
 800c87c:	3718      	adds	r7, #24
 800c87e:	46bd      	mov	sp, r7
 800c880:	bd80      	pop	{r7, pc}
	...

0800c884 <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 800c884:	b580      	push	{r7, lr}
 800c886:	b086      	sub	sp, #24
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 800c88c:	6878      	ldr	r0, [r7, #4]
 800c88e:	f000 f90d 	bl	800caac <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 800c892:	200f      	movs	r0, #15
 800c894:	f000 fb69 	bl	800cf6a <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 800c898:	6878      	ldr	r0, [r7, #4]
 800c89a:	f000 f917 	bl	800cacc <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800c8a4:	f04f 0000 	mov.w	r0, #0
 800c8a8:	f04f 0100 	mov.w	r1, #0
 800c8ac:	04d9      	lsls	r1, r3, #19
 800c8ae:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 800c8b2:	04d0      	lsls	r0, r2, #19
 800c8b4:	4a6f      	ldr	r2, [pc, #444]	; (800ca74 <SX1278_config+0x1f0>)
 800c8b6:	f04f 0300 	mov.w	r3, #0
 800c8ba:	f7f4 f9d5 	bl	8000c68 <__aeabi_uldivmod>
 800c8be:	4602      	mov	r2, r0
 800c8c0:	460b      	mov	r3, r1
 800c8c2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 800c8c6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c8ca:	f04f 0200 	mov.w	r2, #0
 800c8ce:	f04f 0300 	mov.w	r3, #0
 800c8d2:	0c02      	lsrs	r2, r0, #16
 800c8d4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800c8d8:	0c0b      	lsrs	r3, r1, #16
 800c8da:	b2d3      	uxtb	r3, r2
 800c8dc:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 800c8de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c8e2:	f04f 0200 	mov.w	r2, #0
 800c8e6:	f04f 0300 	mov.w	r3, #0
 800c8ea:	0a02      	lsrs	r2, r0, #8
 800c8ec:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c8f0:	0a0b      	lsrs	r3, r1, #8
 800c8f2:	b2d3      	uxtb	r3, r2
 800c8f4:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 800c8f6:	7c3b      	ldrb	r3, [r7, #16]
 800c8f8:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 800c8fa:	f107 020c 	add.w	r2, r7, #12
 800c8fe:	2303      	movs	r3, #3
 800c900:	2106      	movs	r1, #6
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	f7ff ff82 	bl	800c80c <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 800c908:	2234      	movs	r2, #52	; 0x34
 800c90a:	2139      	movs	r1, #57	; 0x39
 800c90c:	6878      	ldr	r0, [r7, #4]
 800c90e:	f7ff ff1b 	bl	800c748 <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	7c1b      	ldrb	r3, [r3, #16]
 800c916:	461a      	mov	r2, r3
 800c918:	4b57      	ldr	r3, [pc, #348]	; (800ca78 <SX1278_config+0x1f4>)
 800c91a:	5c9b      	ldrb	r3, [r3, r2]
 800c91c:	461a      	mov	r2, r3
 800c91e:	2109      	movs	r1, #9
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	f7ff ff11 	bl	800c748 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 800c926:	220b      	movs	r2, #11
 800c928:	210b      	movs	r1, #11
 800c92a:	6878      	ldr	r0, [r7, #4]
 800c92c:	f7ff ff0c 	bl	800c748 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 800c930:	2223      	movs	r2, #35	; 0x23
 800c932:	210c      	movs	r1, #12
 800c934:	6878      	ldr	r0, [r7, #4]
 800c936:	f7ff ff07 	bl	800c748 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	7c5b      	ldrb	r3, [r3, #17]
 800c93e:	461a      	mov	r2, r3
 800c940:	4b4e      	ldr	r3, [pc, #312]	; (800ca7c <SX1278_config+0x1f8>)
 800c942:	5c9b      	ldrb	r3, [r3, r2]
 800c944:	2b06      	cmp	r3, #6
 800c946:	d147      	bne.n	800c9d8 <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	7c9b      	ldrb	r3, [r3, #18]
 800c94c:	461a      	mov	r2, r3
 800c94e:	4b4c      	ldr	r3, [pc, #304]	; (800ca80 <SX1278_config+0x1fc>)
 800c950:	5c9b      	ldrb	r3, [r3, r2]
 800c952:	011b      	lsls	r3, r3, #4
 800c954:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	7cdb      	ldrb	r3, [r3, #19]
 800c95a:	4619      	mov	r1, r3
 800c95c:	4b49      	ldr	r3, [pc, #292]	; (800ca84 <SX1278_config+0x200>)
 800c95e:	5c5b      	ldrb	r3, [r3, r1]
 800c960:	005b      	lsls	r3, r3, #1
 800c962:	b2db      	uxtb	r3, r3
 800c964:	4413      	add	r3, r2
 800c966:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800c968:	3301      	adds	r3, #1
 800c96a:	b2db      	uxtb	r3, r3
 800c96c:	461a      	mov	r2, r3
 800c96e:	211d      	movs	r1, #29
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f7ff fee9 	bl	800c748 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	7c5b      	ldrb	r3, [r3, #17]
 800c97a:	461a      	mov	r2, r3
 800c97c:	4b3f      	ldr	r3, [pc, #252]	; (800ca7c <SX1278_config+0x1f8>)
 800c97e:	5c9b      	ldrb	r3, [r3, r2]
 800c980:	011b      	lsls	r3, r3, #4
 800c982:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	7d1b      	ldrb	r3, [r3, #20]
 800c988:	4619      	mov	r1, r3
 800c98a:	4b3f      	ldr	r3, [pc, #252]	; (800ca88 <SX1278_config+0x204>)
 800c98c:	5c5b      	ldrb	r3, [r3, r1]
 800c98e:	009b      	lsls	r3, r3, #2
 800c990:	b2db      	uxtb	r3, r3
 800c992:	4413      	add	r3, r2
 800c994:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800c996:	3303      	adds	r3, #3
 800c998:	b2db      	uxtb	r3, r3
 800c99a:	461a      	mov	r2, r3
 800c99c:	211e      	movs	r1, #30
 800c99e:	6878      	ldr	r0, [r7, #4]
 800c9a0:	f7ff fed2 	bl	800c748 <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 800c9a4:	2131      	movs	r1, #49	; 0x31
 800c9a6:	6878      	ldr	r0, [r7, #4]
 800c9a8:	f7ff feaf 	bl	800c70a <SX1278_SPIRead>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 800c9b0:	7bfb      	ldrb	r3, [r7, #15]
 800c9b2:	f023 0307 	bic.w	r3, r3, #7
 800c9b6:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 800c9b8:	7bfb      	ldrb	r3, [r7, #15]
 800c9ba:	f043 0305 	orr.w	r3, r3, #5
 800c9be:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 800c9c0:	7bfb      	ldrb	r3, [r7, #15]
 800c9c2:	461a      	mov	r2, r3
 800c9c4:	2131      	movs	r1, #49	; 0x31
 800c9c6:	6878      	ldr	r0, [r7, #4]
 800c9c8:	f7ff febe 	bl	800c748 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 800c9cc:	220c      	movs	r2, #12
 800c9ce:	2137      	movs	r1, #55	; 0x37
 800c9d0:	6878      	ldr	r0, [r7, #4]
 800c9d2:	f7ff feb9 	bl	800c748 <SX1278_SPIWrite>
 800c9d6:	e029      	b.n	800ca2c <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	7c9b      	ldrb	r3, [r3, #18]
 800c9dc:	461a      	mov	r2, r3
 800c9de:	4b28      	ldr	r3, [pc, #160]	; (800ca80 <SX1278_config+0x1fc>)
 800c9e0:	5c9b      	ldrb	r3, [r3, r2]
 800c9e2:	011b      	lsls	r3, r3, #4
 800c9e4:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	7cdb      	ldrb	r3, [r3, #19]
 800c9ea:	4619      	mov	r1, r3
 800c9ec:	4b25      	ldr	r3, [pc, #148]	; (800ca84 <SX1278_config+0x200>)
 800c9ee:	5c5b      	ldrb	r3, [r3, r1]
 800c9f0:	005b      	lsls	r3, r3, #1
 800c9f2:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800c9f4:	4413      	add	r3, r2
 800c9f6:	b2db      	uxtb	r3, r3
 800c9f8:	461a      	mov	r2, r3
 800c9fa:	211d      	movs	r1, #29
 800c9fc:	6878      	ldr	r0, [r7, #4]
 800c9fe:	f7ff fea3 	bl	800c748 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	7c5b      	ldrb	r3, [r3, #17]
 800ca06:	461a      	mov	r2, r3
 800ca08:	4b1c      	ldr	r3, [pc, #112]	; (800ca7c <SX1278_config+0x1f8>)
 800ca0a:	5c9b      	ldrb	r3, [r3, r2]
 800ca0c:	011b      	lsls	r3, r3, #4
 800ca0e:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	7d1b      	ldrb	r3, [r3, #20]
 800ca14:	4619      	mov	r1, r3
 800ca16:	4b1c      	ldr	r3, [pc, #112]	; (800ca88 <SX1278_config+0x204>)
 800ca18:	5c5b      	ldrb	r3, [r3, r1]
 800ca1a:	009b      	lsls	r3, r3, #2
 800ca1c:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800ca1e:	4413      	add	r3, r2
 800ca20:	b2db      	uxtb	r3, r3
 800ca22:	461a      	mov	r2, r3
 800ca24:	211e      	movs	r1, #30
 800ca26:	6878      	ldr	r0, [r7, #4]
 800ca28:	f7ff fe8e 	bl	800c748 <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 800ca2c:	2204      	movs	r2, #4
 800ca2e:	2126      	movs	r1, #38	; 0x26
 800ca30:	6878      	ldr	r0, [r7, #4]
 800ca32:	f7ff fe89 	bl	800c748 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 800ca36:	2208      	movs	r2, #8
 800ca38:	211f      	movs	r1, #31
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	f7ff fe84 	bl	800c748 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 800ca40:	2200      	movs	r2, #0
 800ca42:	2120      	movs	r1, #32
 800ca44:	6878      	ldr	r0, [r7, #4]
 800ca46:	f7ff fe7f 	bl	800c748 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 800ca4a:	2208      	movs	r2, #8
 800ca4c:	2121      	movs	r1, #33	; 0x21
 800ca4e:	6878      	ldr	r0, [r7, #4]
 800ca50:	f7ff fe7a 	bl	800c748 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 800ca54:	2201      	movs	r2, #1
 800ca56:	2141      	movs	r1, #65	; 0x41
 800ca58:	6878      	ldr	r0, [r7, #4]
 800ca5a:	f7ff fe75 	bl	800c748 <SX1278_SPIWrite>
	module->readBytes = 0;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	2200      	movs	r2, #0
 800ca62:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	SX1278_standby(module); //Entry standby mode
 800ca66:	6878      	ldr	r0, [r7, #4]
 800ca68:	f000 f810 	bl	800ca8c <SX1278_standby>
}
 800ca6c:	bf00      	nop
 800ca6e:	3718      	adds	r7, #24
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bd80      	pop	{r7, pc}
 800ca74:	01e84800 	.word	0x01e84800
 800ca78:	0800f4b0 	.word	0x0800f4b0
 800ca7c:	0800f4b4 	.word	0x0800f4b4
 800ca80:	0800f4bc 	.word	0x0800f4bc
 800ca84:	0800f4c8 	.word	0x0800f4c8
 800ca88:	0800f4cc 	.word	0x0800f4cc

0800ca8c <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b082      	sub	sp, #8
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 800ca94:	2209      	movs	r2, #9
 800ca96:	2101      	movs	r1, #1
 800ca98:	6878      	ldr	r0, [r7, #4]
 800ca9a:	f7ff fe55 	bl	800c748 <SX1278_SPIWrite>
	module->status = STANDBY;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	2201      	movs	r2, #1
 800caa2:	759a      	strb	r2, [r3, #22]
}
 800caa4:	bf00      	nop
 800caa6:	3708      	adds	r7, #8
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bd80      	pop	{r7, pc}

0800caac <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 800caac:	b580      	push	{r7, lr}
 800caae:	b082      	sub	sp, #8
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 800cab4:	2208      	movs	r2, #8
 800cab6:	2101      	movs	r1, #1
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	f7ff fe45 	bl	800c748 <SX1278_SPIWrite>
	module->status = SLEEP;
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	2200      	movs	r2, #0
 800cac2:	759a      	strb	r2, [r3, #22]
}
 800cac4:	bf00      	nop
 800cac6:	3708      	adds	r7, #8
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}

0800cacc <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 800cacc:	b580      	push	{r7, lr}
 800cace:	b082      	sub	sp, #8
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 800cad4:	2288      	movs	r2, #136	; 0x88
 800cad6:	2101      	movs	r1, #1
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	f7ff fe35 	bl	800c748 <SX1278_SPIWrite>
}
 800cade:	bf00      	nop
 800cae0:	3708      	adds	r7, #8
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}

0800cae6 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 800cae6:	b580      	push	{r7, lr}
 800cae8:	b082      	sub	sp, #8
 800caea:	af00      	add	r7, sp, #0
 800caec:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 800caee:	22ff      	movs	r2, #255	; 0xff
 800caf0:	2112      	movs	r1, #18
 800caf2:	6878      	ldr	r0, [r7, #4]
 800caf4:	f7ff fe28 	bl	800c748 <SX1278_SPIWrite>
}
 800caf8:	bf00      	nop
 800cafa:	3708      	adds	r7, #8
 800cafc:	46bd      	mov	sp, r7
 800cafe:	bd80      	pop	{r7, pc}

0800cb00 <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b086      	sub	sp, #24
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	60f8      	str	r0, [r7, #12]
 800cb08:	460b      	mov	r3, r1
 800cb0a:	607a      	str	r2, [r7, #4]
 800cb0c:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	7afa      	ldrb	r2, [r7, #11]
 800cb12:	755a      	strb	r2, [r3, #21]

	SX1278_config(module);		//Setting base parameter
 800cb14:	68f8      	ldr	r0, [r7, #12]
 800cb16:	f7ff feb5 	bl	800c884 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 800cb1a:	2284      	movs	r2, #132	; 0x84
 800cb1c:	214d      	movs	r1, #77	; 0x4d
 800cb1e:	68f8      	ldr	r0, [r7, #12]
 800cb20:	f7ff fe12 	bl	800c748 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 800cb24:	22ff      	movs	r2, #255	; 0xff
 800cb26:	2124      	movs	r1, #36	; 0x24
 800cb28:	68f8      	ldr	r0, [r7, #12]
 800cb2a:	f7ff fe0d 	bl	800c748 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 800cb2e:	2201      	movs	r2, #1
 800cb30:	2140      	movs	r1, #64	; 0x40
 800cb32:	68f8      	ldr	r0, [r7, #12]
 800cb34:	f7ff fe08 	bl	800c748 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 800cb38:	223f      	movs	r2, #63	; 0x3f
 800cb3a:	2111      	movs	r1, #17
 800cb3c:	68f8      	ldr	r0, [r7, #12]
 800cb3e:	f7ff fe03 	bl	800c748 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 800cb42:	68f8      	ldr	r0, [r7, #12]
 800cb44:	f7ff ffcf 	bl	800cae6 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 800cb48:	7afb      	ldrb	r3, [r7, #11]
 800cb4a:	461a      	mov	r2, r3
 800cb4c:	2122      	movs	r1, #34	; 0x22
 800cb4e:	68f8      	ldr	r0, [r7, #12]
 800cb50:	f7ff fdfa 	bl	800c748 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 800cb54:	210f      	movs	r1, #15
 800cb56:	68f8      	ldr	r0, [r7, #12]
 800cb58:	f7ff fdd7 	bl	800c70a <SX1278_SPIRead>
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 800cb60:	7dfb      	ldrb	r3, [r7, #23]
 800cb62:	461a      	mov	r2, r3
 800cb64:	210d      	movs	r1, #13
 800cb66:	68f8      	ldr	r0, [r7, #12]
 800cb68:	f7ff fdee 	bl	800c748 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 800cb6c:	228d      	movs	r2, #141	; 0x8d
 800cb6e:	2101      	movs	r1, #1
 800cb70:	68f8      	ldr	r0, [r7, #12]
 800cb72:	f7ff fde9 	bl	800c748 <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	2200      	movs	r2, #0
 800cb7a:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 800cb7e:	2118      	movs	r1, #24
 800cb80:	68f8      	ldr	r0, [r7, #12]
 800cb82:	f7ff fdc2 	bl	800c70a <SX1278_SPIRead>
 800cb86:	4603      	mov	r3, r0
 800cb88:	f003 0304 	and.w	r3, r3, #4
 800cb8c:	2b04      	cmp	r3, #4
 800cb8e:	d104      	bne.n	800cb9a <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	2203      	movs	r2, #3
 800cb94:	759a      	strb	r2, [r3, #22]
			return 1;
 800cb96:	2301      	movs	r3, #1
 800cb98:	e013      	b.n	800cbc2 <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	3b01      	subs	r3, #1
 800cb9e:	607b      	str	r3, [r7, #4]
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d109      	bne.n	800cbba <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f000 f973 	bl	800ce96 <SX1278_hw_Reset>
			SX1278_config(module);
 800cbb0:	68f8      	ldr	r0, [r7, #12]
 800cbb2:	f7ff fe67 	bl	800c884 <SX1278_config>
			return 0;
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	e003      	b.n	800cbc2 <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 800cbba:	2001      	movs	r0, #1
 800cbbc:	f000 f9d5 	bl	800cf6a <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 800cbc0:	e7dd      	b.n	800cb7e <SX1278_LoRaEntryRx+0x7e>
	}
}
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	3718      	adds	r7, #24
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}

0800cbca <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t *module) {
 800cbca:	b580      	push	{r7, lr}
 800cbcc:	b084      	sub	sp, #16
 800cbce:	af00      	add	r7, sp, #0
 800cbd0:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f000 f9d2 	bl	800cf80 <SX1278_hw_GetDIO0>
 800cbdc:	4603      	mov	r3, r0
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d030      	beq.n	800cc44 <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	3317      	adds	r3, #23
 800cbe6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cbea:	2100      	movs	r1, #0
 800cbec:	4618      	mov	r0, r3
 800cbee:	f000 fd8d 	bl	800d70c <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 800cbf2:	2110      	movs	r1, #16
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	f7ff fd88 	bl	800c70a <SX1278_SPIRead>
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 800cbfe:	7bbb      	ldrb	r3, [r7, #14]
 800cc00:	461a      	mov	r2, r3
 800cc02:	210d      	movs	r1, #13
 800cc04:	6878      	ldr	r0, [r7, #4]
 800cc06:	f7ff fd9f 	bl	800c748 <SX1278_SPIWrite>

		if (module->LoRa_SF == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	7c5b      	ldrb	r3, [r3, #17]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d103      	bne.n	800cc1a <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	7d5b      	ldrb	r3, [r3, #21]
 800cc16:	73fb      	strb	r3, [r7, #15]
 800cc18:	e005      	b.n	800cc26 <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 800cc1a:	2113      	movs	r1, #19
 800cc1c:	6878      	ldr	r0, [r7, #4]
 800cc1e:	f7ff fd74 	bl	800c70a <SX1278_SPIRead>
 800cc22:	4603      	mov	r3, r0
 800cc24:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	f103 0217 	add.w	r2, r3, #23
 800cc2c:	7bfb      	ldrb	r3, [r7, #15]
 800cc2e:	2100      	movs	r1, #0
 800cc30:	6878      	ldr	r0, [r7, #4]
 800cc32:	f7ff fdb2 	bl	800c79a <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	7bfa      	ldrb	r2, [r7, #15]
 800cc3a:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
		SX1278_clearLoRaIrq(module);
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f7ff ff51 	bl	800cae6 <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
}
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	3710      	adds	r7, #16
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}

0800cc52 <SX1278_LoRaEntryTx>:

int SX1278_LoRaEntryTx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 800cc52:	b580      	push	{r7, lr}
 800cc54:	b086      	sub	sp, #24
 800cc56:	af00      	add	r7, sp, #0
 800cc58:	60f8      	str	r0, [r7, #12]
 800cc5a:	460b      	mov	r3, r1
 800cc5c:	607a      	str	r2, [r7, #4]
 800cc5e:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	7afa      	ldrb	r2, [r7, #11]
 800cc64:	755a      	strb	r2, [r3, #21]

	SX1278_config(module); //setting base parameter
 800cc66:	68f8      	ldr	r0, [r7, #12]
 800cc68:	f7ff fe0c 	bl	800c884 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 800cc6c:	2287      	movs	r2, #135	; 0x87
 800cc6e:	214d      	movs	r1, #77	; 0x4d
 800cc70:	68f8      	ldr	r0, [r7, #12]
 800cc72:	f7ff fd69 	bl	800c748 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 800cc76:	2200      	movs	r2, #0
 800cc78:	2124      	movs	r1, #36	; 0x24
 800cc7a:	68f8      	ldr	r0, [r7, #12]
 800cc7c:	f7ff fd64 	bl	800c748 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 800cc80:	2241      	movs	r2, #65	; 0x41
 800cc82:	2140      	movs	r1, #64	; 0x40
 800cc84:	68f8      	ldr	r0, [r7, #12]
 800cc86:	f7ff fd5f 	bl	800c748 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 800cc8a:	68f8      	ldr	r0, [r7, #12]
 800cc8c:	f7ff ff2b 	bl	800cae6 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 800cc90:	22f7      	movs	r2, #247	; 0xf7
 800cc92:	2111      	movs	r1, #17
 800cc94:	68f8      	ldr	r0, [r7, #12]
 800cc96:	f7ff fd57 	bl	800c748 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 800cc9a:	7afb      	ldrb	r3, [r7, #11]
 800cc9c:	461a      	mov	r2, r3
 800cc9e:	2122      	movs	r1, #34	; 0x22
 800cca0:	68f8      	ldr	r0, [r7, #12]
 800cca2:	f7ff fd51 	bl	800c748 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 800cca6:	210e      	movs	r1, #14
 800cca8:	68f8      	ldr	r0, [r7, #12]
 800ccaa:	f7ff fd2e 	bl	800c70a <SX1278_SPIRead>
 800ccae:	4603      	mov	r3, r0
 800ccb0:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 800ccb2:	7dfb      	ldrb	r3, [r7, #23]
 800ccb4:	461a      	mov	r2, r3
 800ccb6:	210d      	movs	r1, #13
 800ccb8:	68f8      	ldr	r0, [r7, #12]
 800ccba:	f7ff fd45 	bl	800c748 <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 800ccbe:	2122      	movs	r1, #34	; 0x22
 800ccc0:	68f8      	ldr	r0, [r7, #12]
 800ccc2:	f7ff fd22 	bl	800c70a <SX1278_SPIRead>
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 800ccca:	7dba      	ldrb	r2, [r7, #22]
 800cccc:	7afb      	ldrb	r3, [r7, #11]
 800ccce:	429a      	cmp	r2, r3
 800ccd0:	d104      	bne.n	800ccdc <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	2202      	movs	r2, #2
 800ccd6:	759a      	strb	r2, [r3, #22]
			return 1;
 800ccd8:	2301      	movs	r3, #1
 800ccda:	e00e      	b.n	800ccfa <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	3b01      	subs	r3, #1
 800cce0:	607b      	str	r3, [r7, #4]
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d1ea      	bne.n	800ccbe <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	4618      	mov	r0, r3
 800ccee:	f000 f8d2 	bl	800ce96 <SX1278_hw_Reset>
			SX1278_config(module);
 800ccf2:	68f8      	ldr	r0, [r7, #12]
 800ccf4:	f7ff fdc6 	bl	800c884 <SX1278_config>
			return 0;
 800ccf8:	2300      	movs	r3, #0
		}
	}
}
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	3718      	adds	r7, #24
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	bd80      	pop	{r7, pc}

0800cd02 <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t *module, uint8_t *txBuffer, uint8_t length,
		uint32_t timeout) {
 800cd02:	b580      	push	{r7, lr}
 800cd04:	b084      	sub	sp, #16
 800cd06:	af00      	add	r7, sp, #0
 800cd08:	60f8      	str	r0, [r7, #12]
 800cd0a:	60b9      	str	r1, [r7, #8]
 800cd0c:	603b      	str	r3, [r7, #0]
 800cd0e:	4613      	mov	r3, r2
 800cd10:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 800cd12:	79fb      	ldrb	r3, [r7, #7]
 800cd14:	68ba      	ldr	r2, [r7, #8]
 800cd16:	2100      	movs	r1, #0
 800cd18:	68f8      	ldr	r0, [r7, #12]
 800cd1a:	f7ff fd77 	bl	800c80c <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 800cd1e:	228b      	movs	r2, #139	; 0x8b
 800cd20:	2101      	movs	r1, #1
 800cd22:	68f8      	ldr	r0, [r7, #12]
 800cd24:	f7ff fd10 	bl	800c748 <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f000 f927 	bl	800cf80 <SX1278_hw_GetDIO0>
 800cd32:	4603      	mov	r3, r0
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d00b      	beq.n	800cd50 <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 800cd38:	2112      	movs	r1, #18
 800cd3a:	68f8      	ldr	r0, [r7, #12]
 800cd3c:	f7ff fce5 	bl	800c70a <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 800cd40:	68f8      	ldr	r0, [r7, #12]
 800cd42:	f7ff fed0 	bl	800cae6 <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 800cd46:	68f8      	ldr	r0, [r7, #12]
 800cd48:	f7ff fea0 	bl	800ca8c <SX1278_standby>
			return 1;
 800cd4c:	2301      	movs	r3, #1
 800cd4e:	e013      	b.n	800cd78 <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 800cd50:	683b      	ldr	r3, [r7, #0]
 800cd52:	3b01      	subs	r3, #1
 800cd54:	603b      	str	r3, [r7, #0]
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d109      	bne.n	800cd70 <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	4618      	mov	r0, r3
 800cd62:	f000 f898 	bl	800ce96 <SX1278_hw_Reset>
			SX1278_config(module);
 800cd66:	68f8      	ldr	r0, [r7, #12]
 800cd68:	f7ff fd8c 	bl	800c884 <SX1278_config>
			return 0;
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	e003      	b.n	800cd78 <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 800cd70:	2001      	movs	r0, #1
 800cd72:	f000 f8fa 	bl	800cf6a <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 800cd76:	e7d7      	b.n	800cd28 <SX1278_LoRaTxPacket+0x26>
	}
}
 800cd78:	4618      	mov	r0, r3
 800cd7a:	3710      	adds	r7, #16
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bd80      	pop	{r7, pc}

0800cd80 <SX1278_init>:

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b084      	sub	sp, #16
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	60f8      	str	r0, [r7, #12]
 800cd88:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	4618      	mov	r0, r3
 800cd92:	f000 f854 	bl	800ce3e <SX1278_hw_init>
	module->frequency = frequency;
 800cd96:	68f9      	ldr	r1, [r7, #12]
 800cd98:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd9c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	module->power = power;
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	7e3a      	ldrb	r2, [r7, #24]
 800cda4:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = LoRa_SF;
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	7f3a      	ldrb	r2, [r7, #28]
 800cdaa:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	f897 2020 	ldrb.w	r2, [r7, #32]
 800cdb2:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800cdba:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800cdc2:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800cdca:	755a      	strb	r2, [r3, #21]
	SX1278_config(module);
 800cdcc:	68f8      	ldr	r0, [r7, #12]
 800cdce:	f7ff fd59 	bl	800c884 <SX1278_config>
}
 800cdd2:	bf00      	nop
 800cdd4:	3710      	adds	r7, #16
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bd80      	pop	{r7, pc}

0800cdda <SX1278_available>:

int SX1278_receive(SX1278_t *module, uint8_t length, uint32_t timeout) {
	return SX1278_LoRaEntryRx(module, length, timeout);
}

uint8_t SX1278_available(SX1278_t *module) {
 800cdda:	b580      	push	{r7, lr}
 800cddc:	b082      	sub	sp, #8
 800cdde:	af00      	add	r7, sp, #0
 800cde0:	6078      	str	r0, [r7, #4]
	return SX1278_LoRaRxPacket(module);
 800cde2:	6878      	ldr	r0, [r7, #4]
 800cde4:	f7ff fef1 	bl	800cbca <SX1278_LoRaRxPacket>
 800cde8:	4603      	mov	r3, r0
}
 800cdea:	4618      	mov	r0, r3
 800cdec:	3708      	adds	r7, #8
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	bd80      	pop	{r7, pc}

0800cdf2 <SX1278_read>:

uint8_t SX1278_read(SX1278_t *module, uint8_t *rxBuf, uint8_t length) {
 800cdf2:	b580      	push	{r7, lr}
 800cdf4:	b084      	sub	sp, #16
 800cdf6:	af00      	add	r7, sp, #0
 800cdf8:	60f8      	str	r0, [r7, #12]
 800cdfa:	60b9      	str	r1, [r7, #8]
 800cdfc:	4613      	mov	r3, r2
 800cdfe:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 800ce06:	79fa      	ldrb	r2, [r7, #7]
 800ce08:	429a      	cmp	r2, r3
 800ce0a:	d003      	beq.n	800ce14 <SX1278_read+0x22>
		length = module->readBytes;
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 800ce12:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	3317      	adds	r3, #23
 800ce18:	79fa      	ldrb	r2, [r7, #7]
 800ce1a:	4619      	mov	r1, r3
 800ce1c:	68b8      	ldr	r0, [r7, #8]
 800ce1e:	f000 fd11 	bl	800d844 <memcpy>
	rxBuf[length] = '\0';
 800ce22:	79fb      	ldrb	r3, [r7, #7]
 800ce24:	68ba      	ldr	r2, [r7, #8]
 800ce26:	4413      	add	r3, r2
 800ce28:	2200      	movs	r2, #0
 800ce2a:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	2200      	movs	r2, #0
 800ce30:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	return length;
 800ce34:	79fb      	ldrb	r3, [r7, #7]
}
 800ce36:	4618      	mov	r0, r3
 800ce38:	3710      	adds	r7, #16
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}

0800ce3e <SX1278_hw_init>:
#include <string.h>

#include "gpio.h"
#include "spi.h"

__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 800ce3e:	b580      	push	{r7, lr}
 800ce40:	b082      	sub	sp, #8
 800ce42:	af00      	add	r7, sp, #0
 800ce44:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 800ce46:	2101      	movs	r1, #1
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	f000 f80d 	bl	800ce68 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6858      	ldr	r0, [r3, #4]
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	b29b      	uxth	r3, r3
 800ce58:	2201      	movs	r2, #1
 800ce5a:	4619      	mov	r1, r3
 800ce5c:	f7f5 fd08 	bl	8002870 <HAL_GPIO_WritePin>
}
 800ce60:	bf00      	nop
 800ce62:	3708      	adds	r7, #8
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd80      	pop	{r7, pc}

0800ce68 <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b082      	sub	sp, #8
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
 800ce70:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	6958      	ldr	r0, [r3, #20]
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	691b      	ldr	r3, [r3, #16]
 800ce7a:	b299      	uxth	r1, r3
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	2b01      	cmp	r3, #1
 800ce80:	bf0c      	ite	eq
 800ce82:	2301      	moveq	r3, #1
 800ce84:	2300      	movne	r3, #0
 800ce86:	b2db      	uxtb	r3, r3
 800ce88:	461a      	mov	r2, r3
 800ce8a:	f7f5 fcf1 	bl	8002870 <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 800ce8e:	bf00      	nop
 800ce90:	3708      	adds	r7, #8
 800ce92:	46bd      	mov	sp, r7
 800ce94:	bd80      	pop	{r7, pc}

0800ce96 <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 800ce96:	b580      	push	{r7, lr}
 800ce98:	b082      	sub	sp, #8
 800ce9a:	af00      	add	r7, sp, #0
 800ce9c:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 800ce9e:	2101      	movs	r1, #1
 800cea0:	6878      	ldr	r0, [r7, #4]
 800cea2:	f7ff ffe1 	bl	800ce68 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	6858      	ldr	r0, [r3, #4]
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	b29b      	uxth	r3, r3
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	4619      	mov	r1, r3
 800ceb4:	f7f5 fcdc 	bl	8002870 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 800ceb8:	2001      	movs	r0, #1
 800ceba:	f000 f856 	bl	800cf6a <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	6858      	ldr	r0, [r3, #4]
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	b29b      	uxth	r3, r3
 800cec8:	2201      	movs	r2, #1
 800ceca:	4619      	mov	r1, r3
 800cecc:	f7f5 fcd0 	bl	8002870 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 800ced0:	2064      	movs	r0, #100	; 0x64
 800ced2:	f000 f84a 	bl	800cf6a <SX1278_hw_DelayMs>
}
 800ced6:	bf00      	nop
 800ced8:	3708      	adds	r7, #8
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bd80      	pop	{r7, pc}

0800cede <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 800cede:	b580      	push	{r7, lr}
 800cee0:	b082      	sub	sp, #8
 800cee2:	af00      	add	r7, sp, #0
 800cee4:	6078      	str	r0, [r7, #4]
 800cee6:	460b      	mov	r3, r1
 800cee8:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 800ceea:	2100      	movs	r1, #0
 800ceec:	6878      	ldr	r0, [r7, #4]
 800ceee:	f7ff ffbb 	bl	800ce68 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	6998      	ldr	r0, [r3, #24]
 800cef6:	1cf9      	adds	r1, r7, #3
 800cef8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cefc:	2201      	movs	r2, #1
 800cefe:	f7f7 fd8e 	bl	8004a1e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 800cf02:	bf00      	nop
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	699b      	ldr	r3, [r3, #24]
 800cf08:	4618      	mov	r0, r3
 800cf0a:	f7f8 f87b 	bl	8005004 <HAL_SPI_GetState>
 800cf0e:	4603      	mov	r3, r0
 800cf10:	2b01      	cmp	r3, #1
 800cf12:	d1f7      	bne.n	800cf04 <SX1278_hw_SPICommand+0x26>
		;
}
 800cf14:	bf00      	nop
 800cf16:	bf00      	nop
 800cf18:	3708      	adds	r7, #8
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	bd80      	pop	{r7, pc}

0800cf1e <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 800cf1e:	b580      	push	{r7, lr}
 800cf20:	b086      	sub	sp, #24
 800cf22:	af02      	add	r7, sp, #8
 800cf24:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 800cf26:	2300      	movs	r3, #0
 800cf28:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 800cf2e:	2100      	movs	r1, #0
 800cf30:	6878      	ldr	r0, [r7, #4]
 800cf32:	f7ff ff99 	bl	800ce68 <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	6998      	ldr	r0, [r3, #24]
 800cf3a:	f107 020e 	add.w	r2, r7, #14
 800cf3e:	f107 010f 	add.w	r1, r7, #15
 800cf42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cf46:	9300      	str	r3, [sp, #0]
 800cf48:	2301      	movs	r3, #1
 800cf4a:	f7f7 feab 	bl	8004ca4 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 800cf4e:	bf00      	nop
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	699b      	ldr	r3, [r3, #24]
 800cf54:	4618      	mov	r0, r3
 800cf56:	f7f8 f855 	bl	8005004 <HAL_SPI_GetState>
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	2b01      	cmp	r3, #1
 800cf5e:	d1f7      	bne.n	800cf50 <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 800cf60:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf62:	4618      	mov	r0, r3
 800cf64:	3710      	adds	r7, #16
 800cf66:	46bd      	mov	sp, r7
 800cf68:	bd80      	pop	{r7, pc}

0800cf6a <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 800cf6a:	b580      	push	{r7, lr}
 800cf6c:	b082      	sub	sp, #8
 800cf6e:	af00      	add	r7, sp, #0
 800cf70:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 800cf72:	6878      	ldr	r0, [r7, #4]
 800cf74:	f7f5 f938 	bl	80021e8 <HAL_Delay>
}
 800cf78:	bf00      	nop
 800cf7a:	3708      	adds	r7, #8
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}

0800cf80 <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b082      	sub	sp, #8
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	68da      	ldr	r2, [r3, #12]
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	689b      	ldr	r3, [r3, #8]
 800cf90:	b29b      	uxth	r3, r3
 800cf92:	4619      	mov	r1, r3
 800cf94:	4610      	mov	r0, r2
 800cf96:	f7f5 fc53 	bl	8002840 <HAL_GPIO_ReadPin>
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	2b01      	cmp	r3, #1
 800cf9e:	bf0c      	ite	eq
 800cfa0:	2301      	moveq	r3, #1
 800cfa2:	2300      	movne	r3, #0
 800cfa4:	b2db      	uxtb	r3, r3
}
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	3708      	adds	r7, #8
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	bd80      	pop	{r7, pc}
	...

0800cfb0 <UGV_cameraServoInit>:

static TIM_HandleTypeDef * hServoTim;
static uint32_t servoChannel;

void UGV_cameraServoInit(TIM_HandleTypeDef * htim, uint32_t channel)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b084      	sub	sp, #16
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
 800cfb8:	6039      	str	r1, [r7, #0]
	hServoTim = htim;
 800cfba:	4a0e      	ldr	r2, [pc, #56]	; (800cff4 <UGV_cameraServoInit+0x44>)
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	6013      	str	r3, [r2, #0]
	servoChannel = channel;
 800cfc0:	4a0d      	ldr	r2, [pc, #52]	; (800cff8 <UGV_cameraServoInit+0x48>)
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	6013      	str	r3, [r2, #0]
	uint8_t channelOffset = (servoChannel / 4);
 800cfc6:	4b0c      	ldr	r3, [pc, #48]	; (800cff8 <UGV_cameraServoInit+0x48>)
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	089b      	lsrs	r3, r3, #2
 800cfcc:	73fb      	strb	r3, [r7, #15]

	HAL_TIM_PWM_Start(htim, channel);
 800cfce:	6839      	ldr	r1, [r7, #0]
 800cfd0:	6878      	ldr	r0, [r7, #4]
 800cfd2:	f7f8 fa1b 	bl	800540c <HAL_TIM_PWM_Start>
	*((uint32_t*)((&hServoTim->Instance->CCR1) + channelOffset)) = CAMERA_RESET_CCR1_VAL;
 800cfd6:	4b07      	ldr	r3, [pc, #28]	; (800cff4 <UGV_cameraServoInit+0x44>)
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cfe0:	7bfb      	ldrb	r3, [r7, #15]
 800cfe2:	009b      	lsls	r3, r3, #2
 800cfe4:	4413      	add	r3, r2
 800cfe6:	223c      	movs	r2, #60	; 0x3c
 800cfe8:	601a      	str	r2, [r3, #0]

}
 800cfea:	bf00      	nop
 800cfec:	3710      	adds	r7, #16
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}
 800cff2:	bf00      	nop
 800cff4:	20005018 	.word	0x20005018
 800cff8:	2000501c 	.word	0x2000501c

0800cffc <init_PEC15_Table>:

uint16_t pec15Table[256];


void init_PEC15_Table()
{
 800cffc:	b480      	push	{r7}
 800cffe:	b083      	sub	sp, #12
 800d000:	af00      	add	r7, sp, #0
    uint16_t remainder;
    uint16_t i;
    uint16_t bit;
    for (i = 0; i < 256; i++)
 800d002:	2300      	movs	r3, #0
 800d004:	80bb      	strh	r3, [r7, #4]
 800d006:	e025      	b.n	800d054 <init_PEC15_Table+0x58>
    {
        remainder = i << 7;
 800d008:	88bb      	ldrh	r3, [r7, #4]
 800d00a:	01db      	lsls	r3, r3, #7
 800d00c:	80fb      	strh	r3, [r7, #6]
        for (bit = 8; bit > 0; --bit)
 800d00e:	2308      	movs	r3, #8
 800d010:	807b      	strh	r3, [r7, #2]
 800d012:	e014      	b.n	800d03e <init_PEC15_Table+0x42>
        {
            if (remainder & 0x4000)
 800d014:	88fb      	ldrh	r3, [r7, #6]
 800d016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d009      	beq.n	800d032 <init_PEC15_Table+0x36>
            {
                remainder = ((remainder << 1));
 800d01e:	88fb      	ldrh	r3, [r7, #6]
 800d020:	005b      	lsls	r3, r3, #1
 800d022:	80fb      	strh	r3, [r7, #6]
                remainder = (remainder ^ CRC15_POLY);
 800d024:	88fb      	ldrh	r3, [r7, #6]
 800d026:	f483 438b 	eor.w	r3, r3, #17792	; 0x4580
 800d02a:	f083 0319 	eor.w	r3, r3, #25
 800d02e:	80fb      	strh	r3, [r7, #6]
 800d030:	e002      	b.n	800d038 <init_PEC15_Table+0x3c>
            }
            else
            {
                remainder = ((remainder << 1));
 800d032:	88fb      	ldrh	r3, [r7, #6]
 800d034:	005b      	lsls	r3, r3, #1
 800d036:	80fb      	strh	r3, [r7, #6]
        for (bit = 8; bit > 0; --bit)
 800d038:	887b      	ldrh	r3, [r7, #2]
 800d03a:	3b01      	subs	r3, #1
 800d03c:	807b      	strh	r3, [r7, #2]
 800d03e:	887b      	ldrh	r3, [r7, #2]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d1e7      	bne.n	800d014 <init_PEC15_Table+0x18>
            }
        }
        pec15Table[i] = remainder & 0xFFFF;
 800d044:	88bb      	ldrh	r3, [r7, #4]
 800d046:	4908      	ldr	r1, [pc, #32]	; (800d068 <init_PEC15_Table+0x6c>)
 800d048:	88fa      	ldrh	r2, [r7, #6]
 800d04a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (i = 0; i < 256; i++)
 800d04e:	88bb      	ldrh	r3, [r7, #4]
 800d050:	3301      	adds	r3, #1
 800d052:	80bb      	strh	r3, [r7, #4]
 800d054:	88bb      	ldrh	r3, [r7, #4]
 800d056:	2bff      	cmp	r3, #255	; 0xff
 800d058:	d9d6      	bls.n	800d008 <init_PEC15_Table+0xc>
    }
}
 800d05a:	bf00      	nop
 800d05c:	bf00      	nop
 800d05e:	370c      	adds	r7, #12
 800d060:	46bd      	mov	sp, r7
 800d062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d066:	4770      	bx	lr
 800d068:	20005020 	.word	0x20005020

0800d06c <AE_pec15>:

uint16_t AE_pec15(uint8_t* data, uint16_t len)
{
 800d06c:	b480      	push	{r7}
 800d06e:	b087      	sub	sp, #28
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
 800d074:	460b      	mov	r3, r1
 800d076:	807b      	strh	r3, [r7, #2]
    uint16_t remainder, address;
    remainder = 16;//PEC seed
 800d078:	2310      	movs	r3, #16
 800d07a:	82fb      	strh	r3, [r7, #22]
    int i;
    for (i= 0; i < len; i++)
 800d07c:	2300      	movs	r3, #0
 800d07e:	613b      	str	r3, [r7, #16]
 800d080:	e019      	b.n	800d0b6 <AE_pec15+0x4a>
         * @brief history of data[i*2 + 1]
         * @NOTE TMS570Ls spi working with 16bit variables so we need to
         * @Note cast to uint8_t so we take the 2 offset but
         * @Note TMS570 use big endien memory layout so we have to add +1
         */
        address = ((remainder >> 7) ^ data[i]) & 0xff;//calculate PEC table address remainder = (remainder << 8 ) ^ pec15Table[address];
 800d082:	8afb      	ldrh	r3, [r7, #22]
 800d084:	09db      	lsrs	r3, r3, #7
 800d086:	b29a      	uxth	r2, r3
 800d088:	693b      	ldr	r3, [r7, #16]
 800d08a:	6879      	ldr	r1, [r7, #4]
 800d08c:	440b      	add	r3, r1
 800d08e:	781b      	ldrb	r3, [r3, #0]
 800d090:	b29b      	uxth	r3, r3
 800d092:	4053      	eors	r3, r2
 800d094:	b29b      	uxth	r3, r3
 800d096:	b2db      	uxtb	r3, r3
 800d098:	81fb      	strh	r3, [r7, #14]
        remainder = (remainder << 8) ^ pec15Table[address];
 800d09a:	8afb      	ldrh	r3, [r7, #22]
 800d09c:	021b      	lsls	r3, r3, #8
 800d09e:	b21a      	sxth	r2, r3
 800d0a0:	89fb      	ldrh	r3, [r7, #14]
 800d0a2:	490b      	ldr	r1, [pc, #44]	; (800d0d0 <AE_pec15+0x64>)
 800d0a4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800d0a8:	b21b      	sxth	r3, r3
 800d0aa:	4053      	eors	r3, r2
 800d0ac:	b21b      	sxth	r3, r3
 800d0ae:	82fb      	strh	r3, [r7, #22]
    for (i= 0; i < len; i++)
 800d0b0:	693b      	ldr	r3, [r7, #16]
 800d0b2:	3301      	adds	r3, #1
 800d0b4:	613b      	str	r3, [r7, #16]
 800d0b6:	887b      	ldrh	r3, [r7, #2]
 800d0b8:	693a      	ldr	r2, [r7, #16]
 800d0ba:	429a      	cmp	r2, r3
 800d0bc:	dbe1      	blt.n	800d082 <AE_pec15+0x16>
    }
    return (remainder * 2);//The CRC15 has a 0 in the LSB so the final value must be multiplied by 2
 800d0be:	8afb      	ldrh	r3, [r7, #22]
 800d0c0:	005b      	lsls	r3, r3, #1
 800d0c2:	b29b      	uxth	r3, r3
}
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	371c      	adds	r7, #28
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ce:	4770      	bx	lr
 800d0d0:	20005020 	.word	0x20005020

0800d0d4 <UGV_ledControl>:

#include "ledControl.h"
#include "main.h"

LED_STATE UGV_ledControl(RcChannel * rcChannel)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b084      	sub	sp, #16
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
	LED_STATE ledState = LEDS_OFF;
 800d0dc:	2300      	movs	r3, #0
 800d0de:	73fb      	strb	r3, [r7, #15]

	if(rcChannel->channel4 < ( LID_LED_MIDDLE - LID_LED_ERROR))
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	88db      	ldrh	r3, [r3, #6]
 800d0e4:	f240 52c2 	movw	r2, #1474	; 0x5c2
 800d0e8:	4293      	cmp	r3, r2
 800d0ea:	d80e      	bhi.n	800d10a <UGV_ledControl+0x36>
	{
		HAL_GPIO_WritePin(LID_LED_GPIO_Port, LID_LED_Pin, 0);
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d0f2:	481a      	ldr	r0, [pc, #104]	; (800d15c <UGV_ledControl+0x88>)
 800d0f4:	f7f5 fbbc 	bl	8002870 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d0fe:	4817      	ldr	r0, [pc, #92]	; (800d15c <UGV_ledControl+0x88>)
 800d100:	f7f5 fbb6 	bl	8002870 <HAL_GPIO_WritePin>
		ledState = LEDS_OFF;
 800d104:	2300      	movs	r3, #0
 800d106:	73fb      	strb	r3, [r7, #15]
 800d108:	e022      	b.n	800d150 <UGV_ledControl+0x7c>
	}
	else if (rcChannel->channel4 < ( LID_LED_MIDDLE + LID_LED_ERROR))
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	88db      	ldrh	r3, [r3, #6]
 800d10e:	f240 6226 	movw	r2, #1574	; 0x626
 800d112:	4293      	cmp	r3, r2
 800d114:	d80e      	bhi.n	800d134 <UGV_ledControl+0x60>
	{
		HAL_GPIO_WritePin(LID_LED_GPIO_Port, LID_LED_Pin, 0);
 800d116:	2200      	movs	r2, #0
 800d118:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d11c:	480f      	ldr	r0, [pc, #60]	; (800d15c <UGV_ledControl+0x88>)
 800d11e:	f7f5 fba7 	bl	8002870 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 800d122:	2201      	movs	r2, #1
 800d124:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d128:	480c      	ldr	r0, [pc, #48]	; (800d15c <UGV_ledControl+0x88>)
 800d12a:	f7f5 fba1 	bl	8002870 <HAL_GPIO_WritePin>
		ledState = FRONT_LED_ON;
 800d12e:	2301      	movs	r3, #1
 800d130:	73fb      	strb	r3, [r7, #15]
 800d132:	e00d      	b.n	800d150 <UGV_ledControl+0x7c>
	}
	else
	{
		HAL_GPIO_WritePin(LID_LED_GPIO_Port, LID_LED_Pin, 1);
 800d134:	2201      	movs	r2, #1
 800d136:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d13a:	4808      	ldr	r0, [pc, #32]	; (800d15c <UGV_ledControl+0x88>)
 800d13c:	f7f5 fb98 	bl	8002870 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 800d140:	2201      	movs	r2, #1
 800d142:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d146:	4805      	ldr	r0, [pc, #20]	; (800d15c <UGV_ledControl+0x88>)
 800d148:	f7f5 fb92 	bl	8002870 <HAL_GPIO_WritePin>
		ledState = ALL_LED_ON;
 800d14c:	2302      	movs	r3, #2
 800d14e:	73fb      	strb	r3, [r7, #15]
	}

	return ledState;
 800d150:	7bfb      	ldrb	r3, [r7, #15]
}
 800d152:	4618      	mov	r0, r3
 800d154:	3710      	adds	r7, #16
 800d156:	46bd      	mov	sp, r7
 800d158:	bd80      	pop	{r7, pc}
 800d15a:	bf00      	nop
 800d15c:	40020000 	.word	0x40020000

0800d160 <ugvMain>:
static void qmcInit(I2C_HandleTypeDef *hi2c);
static void sx1278Init(SX1278_hw_t * sx1278Hw, SX1278_t * sx1278);

//<<<<<<<<<<<<<<<<<<-FUNCTIONS->>>>>>>>>>>>>>>>>>>>>>>
void ugvMain(void)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b086      	sub	sp, #24
 800d164:	af02      	add	r7, sp, #8
	BaseType_t taskStatus = pdFAIL;
 800d166:	2300      	movs	r3, #0
 800d168:	60fb      	str	r3, [r7, #12]

	ugvSystemInit();			//!< initialize the peripherals and queue
 800d16a:	f000 f861 	bl	800d230 <ugvSystemInit>

	/*task for the motor drive*/
	taskStatus = xTaskCreate(taskSensor, "TaskMotDrive",
 800d16e:	4b28      	ldr	r3, [pc, #160]	; (800d210 <ugvMain+0xb0>)
 800d170:	9301      	str	r3, [sp, #4]
 800d172:	2332      	movs	r3, #50	; 0x32
 800d174:	9300      	str	r3, [sp, #0]
 800d176:	2300      	movs	r3, #0
 800d178:	2280      	movs	r2, #128	; 0x80
 800d17a:	4926      	ldr	r1, [pc, #152]	; (800d214 <ugvMain+0xb4>)
 800d17c:	4826      	ldr	r0, [pc, #152]	; (800d218 <ugvMain+0xb8>)
 800d17e:	f7fb f8b2 	bl	80082e6 <xTaskCreate>
 800d182:	60f8      	str	r0, [r7, #12]
							 configMINIMAL_STACK_SIZE, NULL,
							 TASK_SENSOR_PRIORITY, &hTaskSensor_s);
	configASSERT(taskStatus);
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d10a      	bne.n	800d1a0 <ugvMain+0x40>
	__asm volatile
 800d18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d18e:	f383 8811 	msr	BASEPRI, r3
 800d192:	f3bf 8f6f 	isb	sy
 800d196:	f3bf 8f4f 	dsb	sy
 800d19a:	60bb      	str	r3, [r7, #8]
}
 800d19c:	bf00      	nop
 800d19e:	e7fe      	b.n	800d19e <ugvMain+0x3e>

	taskStatus = xTaskCreate(taskMotorDrive, "TaskMotDrive",
 800d1a0:	4b1e      	ldr	r3, [pc, #120]	; (800d21c <ugvMain+0xbc>)
 800d1a2:	9301      	str	r3, [sp, #4]
 800d1a4:	2328      	movs	r3, #40	; 0x28
 800d1a6:	9300      	str	r3, [sp, #0]
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	2280      	movs	r2, #128	; 0x80
 800d1ac:	4919      	ldr	r1, [pc, #100]	; (800d214 <ugvMain+0xb4>)
 800d1ae:	481c      	ldr	r0, [pc, #112]	; (800d220 <ugvMain+0xc0>)
 800d1b0:	f7fb f899 	bl	80082e6 <xTaskCreate>
 800d1b4:	60f8      	str	r0, [r7, #12]
							 configMINIMAL_STACK_SIZE, NULL,
							 TASK_MOT_DRIVE_PRIORITY, &hTaskMotDrive_s);
	configASSERT(taskStatus);
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d10a      	bne.n	800d1d2 <ugvMain+0x72>
	__asm volatile
 800d1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1c0:	f383 8811 	msr	BASEPRI, r3
 800d1c4:	f3bf 8f6f 	isb	sy
 800d1c8:	f3bf 8f4f 	dsb	sy
 800d1cc:	607b      	str	r3, [r7, #4]
}
 800d1ce:	bf00      	nop
 800d1d0:	e7fe      	b.n	800d1d0 <ugvMain+0x70>

	/*task for the lora communication*/
	taskStatus = xTaskCreate(taskLoraCom, "TaskLoraCom",
 800d1d2:	4b14      	ldr	r3, [pc, #80]	; (800d224 <ugvMain+0xc4>)
 800d1d4:	9301      	str	r3, [sp, #4]
 800d1d6:	231c      	movs	r3, #28
 800d1d8:	9300      	str	r3, [sp, #0]
 800d1da:	2300      	movs	r3, #0
 800d1dc:	2280      	movs	r2, #128	; 0x80
 800d1de:	4912      	ldr	r1, [pc, #72]	; (800d228 <ugvMain+0xc8>)
 800d1e0:	4812      	ldr	r0, [pc, #72]	; (800d22c <ugvMain+0xcc>)
 800d1e2:	f7fb f880 	bl	80082e6 <xTaskCreate>
 800d1e6:	60f8      	str	r0, [r7, #12]
							 configMINIMAL_STACK_SIZE, NULL,
							 TASK_LORA_COM_PRIORITY, &hTaskLoraCom_s);
	configASSERT(taskStatus);
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d10a      	bne.n	800d204 <ugvMain+0xa4>
	__asm volatile
 800d1ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1f2:	f383 8811 	msr	BASEPRI, r3
 800d1f6:	f3bf 8f6f 	isb	sy
 800d1fa:	f3bf 8f4f 	dsb	sy
 800d1fe:	603b      	str	r3, [r7, #0]
}
 800d200:	bf00      	nop
 800d202:	e7fe      	b.n	800d202 <ugvMain+0xa2>

	vTaskStartScheduler();
 800d204:	f7fb fa48 	bl	8008698 <vTaskStartScheduler>
}
 800d208:	bf00      	nop
 800d20a:	3710      	adds	r7, #16
 800d20c:	46bd      	mov	sp, r7
 800d20e:	bd80      	pop	{r7, pc}
 800d210:	200053ec 	.word	0x200053ec
 800d214:	0800f47c 	.word	0x0800f47c
 800d218:	0800d52d 	.word	0x0800d52d
 800d21c:	200053e4 	.word	0x200053e4
 800d220:	0800d4ad 	.word	0x0800d4ad
 800d224:	20005268 	.word	0x20005268
 800d228:	0800f48c 	.word	0x0800f48c
 800d22c:	0800d351 	.word	0x0800d351

0800d230 <ugvSystemInit>:
/**
 * @brief initialize the peripherals
 * @return none
 */
void ugvSystemInit()
{
 800d230:	b580      	push	{r7, lr}
 800d232:	af00      	add	r7, sp, #0
	  /* USER CODE BEGIN 2 */
	HAL_IWDG_Init(&hiwdg);
 800d234:	480e      	ldr	r0, [pc, #56]	; (800d270 <ugvSystemInit+0x40>)
 800d236:	f7f6 fcad 	bl	8003b94 <HAL_IWDG_Init>
	UGV_cameraServoInit(&htim12, TIM_CHANNEL_1);	//!< camera servo timer init
 800d23a:	2100      	movs	r1, #0
 800d23c:	480d      	ldr	r0, [pc, #52]	; (800d274 <ugvSystemInit+0x44>)
 800d23e:	f7ff feb7 	bl	800cfb0 <UGV_cameraServoInit>
	UGV_rcReceiverInit();							//!< enable rc receiver timer interrupt
 800d242:	f7ff f911 	bl	800c468 <UGV_rcReceiverInit>
	UGV_motorInit();								//!< enable motor driver PWM timers
 800d246:	f7fe f911 	bl	800b46c <UGV_motorInit>
	qmcInit(&hi2c1);								//!< enable i2c to read magnetometer
 800d24a:	480b      	ldr	r0, [pc, #44]	; (800d278 <ugvSystemInit+0x48>)
 800d24c:	f000 f81e 	bl	800d28c <qmcInit>
	init_PEC15_Table();
 800d250:	f7ff fed4 	bl	800cffc <init_PEC15_Table>
	sx1278Init(&SX1278_hw, &SX1278);
 800d254:	4909      	ldr	r1, [pc, #36]	; (800d27c <ugvSystemInit+0x4c>)
 800d256:	480a      	ldr	r0, [pc, #40]	; (800d280 <ugvSystemInit+0x50>)
 800d258:	f000 f850 	bl	800d2fc <sx1278Init>
	databaseQueueInit(10, sizeof(LoraTransmit));	//!< sensor database queue
 800d25c:	211c      	movs	r1, #28
 800d25e:	200a      	movs	r0, #10
 800d260:	f7fc fedc 	bl	800a01c <databaseQueueInit>
	GPS_Init(&huart3, &gps);
 800d264:	4907      	ldr	r1, [pc, #28]	; (800d284 <ugvSystemInit+0x54>)
 800d266:	4808      	ldr	r0, [pc, #32]	; (800d288 <ugvSystemInit+0x58>)
 800d268:	f7fc fef0 	bl	800a04c <GPS_Init>
}
 800d26c:	bf00      	nop
 800d26e:	bd80      	pop	{r7, pc}
 800d270:	20000120 	.word	0x20000120
 800d274:	20000348 	.word	0x20000348
 800d278:	200000cc 	.word	0x200000cc
 800d27c:	20005288 	.word	0x20005288
 800d280:	2000526c 	.word	0x2000526c
 800d284:	20005240 	.word	0x20005240
 800d288:	200003d8 	.word	0x200003d8

0800d28c <qmcInit>:
 * @brief initial parameter of qmc5883
 * @param[in] i2c global variable
 * @return none
 */
static void qmcInit(I2C_HandleTypeDef *hi2c)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b082      	sub	sp, #8
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(COMPASS_VCC_GPIO_Port, COMPASS_VCC_Pin, GPIO_PIN_RESET);
 800d294:	2200      	movs	r2, #0
 800d296:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d29a:	4816      	ldr	r0, [pc, #88]	; (800d2f4 <qmcInit+0x68>)
 800d29c:	f7f5 fae8 	bl	8002870 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COMPASS_VCC_GPIO_Port, COMPASS_VCC_Pin, GPIO_PIN_SET);
 800d2a0:	2201      	movs	r2, #1
 800d2a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d2a6:	4813      	ldr	r0, [pc, #76]	; (800d2f4 <qmcInit+0x68>)
 800d2a8:	f7f5 fae2 	bl	8002870 <HAL_GPIO_WritePin>

	UGV_softReset();
 800d2ac:	f7ff f8c2 	bl	800c434 <UGV_softReset>

	hqmc.qmcConfig.MODE = MODE_CONTINIOUS;
 800d2b0:	4b11      	ldr	r3, [pc, #68]	; (800d2f8 <qmcInit+0x6c>)
 800d2b2:	2201      	movs	r2, #1
 800d2b4:	735a      	strb	r2, [r3, #13]
	hqmc.qmcConfig.ODR = ODR_200HZ;
 800d2b6:	4b10      	ldr	r3, [pc, #64]	; (800d2f8 <qmcInit+0x6c>)
 800d2b8:	2203      	movs	r2, #3
 800d2ba:	739a      	strb	r2, [r3, #14]
	hqmc.qmcConfig.OSR = OSR_512;
 800d2bc:	4b0e      	ldr	r3, [pc, #56]	; (800d2f8 <qmcInit+0x6c>)
 800d2be:	2200      	movs	r2, #0
 800d2c0:	741a      	strb	r2, [r3, #16]
	hqmc.qmcConfig.RNG = RNG_8G;
 800d2c2:	4b0d      	ldr	r3, [pc, #52]	; (800d2f8 <qmcInit+0x6c>)
 800d2c4:	2201      	movs	r2, #1
 800d2c6:	73da      	strb	r2, [r3, #15]
	hqmc.qmcConfig.INT = INT_DISABLE;
 800d2c8:	4b0b      	ldr	r3, [pc, #44]	; (800d2f8 <qmcInit+0x6c>)
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	745a      	strb	r2, [r3, #17]
	hqmc.qmcConfig.ROL_PNT = ROL_PNT_ENABLE;
 800d2ce:	4b0a      	ldr	r3, [pc, #40]	; (800d2f8 <qmcInit+0x6c>)
 800d2d0:	2201      	movs	r2, #1
 800d2d2:	749a      	strb	r2, [r3, #18]

	reTryInit:
	if(UGV_qmcInit(hi2c, &hqmc) != HAL_OK)
 800d2d4:	4908      	ldr	r1, [pc, #32]	; (800d2f8 <qmcInit+0x6c>)
 800d2d6:	6878      	ldr	r0, [r7, #4]
 800d2d8:	f7fe fe34 	bl	800bf44 <UGV_qmcInit>
 800d2dc:	4603      	mov	r3, r0
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d000      	beq.n	800d2e4 <qmcInit+0x58>
	{
		goto reTryInit;
 800d2e2:	e7f7      	b.n	800d2d4 <qmcInit+0x48>
	}
	//magnetic declination of my city
	//you can learn https://www.magnetic-declination.com/
	UGV_setMagneticDelination(20, 0);
 800d2e4:	2100      	movs	r1, #0
 800d2e6:	2014      	movs	r0, #20
 800d2e8:	f7ff f814 	bl	800c314 <UGV_setMagneticDelination>
}
 800d2ec:	bf00      	nop
 800d2ee:	3708      	adds	r7, #8
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}
 800d2f4:	40020800 	.word	0x40020800
 800d2f8:	20005220 	.word	0x20005220

0800d2fc <sx1278Init>:
 * @param[in] lora pin setting
 * @param[in] lora global structure
 * @return none
 */
static void sx1278Init(SX1278_hw_t * sx1278Hw, SX1278_t * sx1278)
{
 800d2fc:	b480      	push	{r7}
 800d2fe:	b083      	sub	sp, #12
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
 800d304:	6039      	str	r1, [r7, #0]
	sx1278Hw->dio0.port = DIO0_GPIO_Port;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	4a0e      	ldr	r2, [pc, #56]	; (800d344 <sx1278Init+0x48>)
 800d30a:	60da      	str	r2, [r3, #12]
	sx1278Hw->dio0.pin = DIO0_Pin;
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	2202      	movs	r2, #2
 800d310:	609a      	str	r2, [r3, #8]
	sx1278Hw->nss.port = NSS_GPIO_Port;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	4a0b      	ldr	r2, [pc, #44]	; (800d344 <sx1278Init+0x48>)
 800d316:	615a      	str	r2, [r3, #20]
	sx1278Hw->nss.pin = NSS_Pin;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	2201      	movs	r2, #1
 800d31c:	611a      	str	r2, [r3, #16]
	sx1278Hw->reset.port = NULL;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	2200      	movs	r2, #0
 800d322:	605a      	str	r2, [r3, #4]
	sx1278Hw->reset.pin = 0;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2200      	movs	r2, #0
 800d328:	601a      	str	r2, [r3, #0]
	sx1278Hw->spi = &hspi2;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	4a06      	ldr	r2, [pc, #24]	; (800d348 <sx1278Init+0x4c>)
 800d32e:	619a      	str	r2, [r3, #24]

	sx1278->hw = sx1278Hw;
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	687a      	ldr	r2, [r7, #4]
 800d334:	601a      	str	r2, [r3, #0]
}
 800d336:	bf00      	nop
 800d338:	370c      	adds	r7, #12
 800d33a:	46bd      	mov	sp, r7
 800d33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d340:	4770      	bx	lr
 800d342:	bf00      	nop
 800d344:	40020800 	.word	0x40020800
 800d348:	20000184 	.word	0x20000184
 800d34c:	00000000 	.word	0x00000000

0800d350 <taskLoraCom>:
static int ret;
static int retTx;
static uint8_t txRxMutex = TX_STATUS;

void taskLoraCom(void *arg)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b08a      	sub	sp, #40	; 0x28
 800d354:	af06      	add	r7, sp, #24
 800d356:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime = 0;
 800d358:	2300      	movs	r3, #0
 800d35a:	60bb      	str	r3, [r7, #8]
	const TickType_t xFrequency = 35;
 800d35c:	2323      	movs	r3, #35	; 0x23
 800d35e:	60fb      	str	r3, [r7, #12]
	xLastWakeTime = xTaskGetTickCount();
 800d360:	f7fb fab6 	bl	80088d0 <xTaskGetTickCount>
 800d364:	4603      	mov	r3, r0
 800d366:	60bb      	str	r3, [r7, #8]

	//initialize lora module
	SX1278_init(&SX1278, 434000000, SX1278_POWER_17DBM, SX1278_LORA_SF_7,
 800d368:	231c      	movs	r3, #28
 800d36a:	9305      	str	r3, [sp, #20]
 800d36c:	2300      	movs	r3, #0
 800d36e:	9304      	str	r3, [sp, #16]
 800d370:	2300      	movs	r3, #0
 800d372:	9303      	str	r3, [sp, #12]
 800d374:	2307      	movs	r3, #7
 800d376:	9302      	str	r3, [sp, #8]
 800d378:	2301      	movs	r3, #1
 800d37a:	9301      	str	r3, [sp, #4]
 800d37c:	2301      	movs	r3, #1
 800d37e:	9300      	str	r3, [sp, #0]
 800d380:	a326      	add	r3, pc, #152	; (adr r3, 800d41c <taskLoraCom+0xcc>)
 800d382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d386:	481e      	ldr	r0, [pc, #120]	; (800d400 <taskLoraCom+0xb0>)
 800d388:	f7ff fcfa 	bl	800cd80 <SX1278_init>
				SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, sizeof(loraTx));

	ret = SX1278_LoRaEntryTx(&SX1278, sizeof(loraTx), TX_TIMEOUT);
 800d38c:	2205      	movs	r2, #5
 800d38e:	211c      	movs	r1, #28
 800d390:	481b      	ldr	r0, [pc, #108]	; (800d400 <taskLoraCom+0xb0>)
 800d392:	f7ff fc5e 	bl	800cc52 <SX1278_LoRaEntryTx>
 800d396:	4603      	mov	r3, r0
 800d398:	4a1a      	ldr	r2, [pc, #104]	; (800d404 <taskLoraCom+0xb4>)
 800d39a:	6013      	str	r3, [r2, #0]

	for(;;)
	{
		xQueueReceive(sensorDataQueue, &loraTx, 2);
 800d39c:	4b1a      	ldr	r3, [pc, #104]	; (800d408 <taskLoraCom+0xb8>)
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	2202      	movs	r2, #2
 800d3a2:	491a      	ldr	r1, [pc, #104]	; (800d40c <taskLoraCom+0xbc>)
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f7fa fcf3 	bl	8007d90 <xQueueReceive>

		//!< Transmit
		txRxMutex = TX_STATUS;
 800d3aa:	4b19      	ldr	r3, [pc, #100]	; (800d410 <taskLoraCom+0xc0>)
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	701a      	strb	r2, [r3, #0]
		ret = SX1278_LoRaEntryTx(&SX1278, sizeof(loraTx), TX_TIMEOUT);
 800d3b0:	2205      	movs	r2, #5
 800d3b2:	211c      	movs	r1, #28
 800d3b4:	4812      	ldr	r0, [pc, #72]	; (800d400 <taskLoraCom+0xb0>)
 800d3b6:	f7ff fc4c 	bl	800cc52 <SX1278_LoRaEntryTx>
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	4a11      	ldr	r2, [pc, #68]	; (800d404 <taskLoraCom+0xb4>)
 800d3be:	6013      	str	r3, [r2, #0]
		retTx = SX1278_LoRaTxPacket(&SX1278, (uint8_t*)&loraTx,
 800d3c0:	2305      	movs	r3, #5
 800d3c2:	221c      	movs	r2, #28
 800d3c4:	4911      	ldr	r1, [pc, #68]	; (800d40c <taskLoraCom+0xbc>)
 800d3c6:	480e      	ldr	r0, [pc, #56]	; (800d400 <taskLoraCom+0xb0>)
 800d3c8:	f7ff fc9b 	bl	800cd02 <SX1278_LoRaTxPacket>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	4a11      	ldr	r2, [pc, #68]	; (800d414 <taskLoraCom+0xc4>)
 800d3d0:	6013      	str	r3, [r2, #0]
				sizeof(loraTx), TX_TIMEOUT);

		//!< Receive
		txRxMutex = RX_STATUS;
 800d3d2:	4b0f      	ldr	r3, [pc, #60]	; (800d410 <taskLoraCom+0xc0>)
 800d3d4:	2201      	movs	r2, #1
 800d3d6:	701a      	strb	r2, [r3, #0]
		ret = SX1278_LoRaEntryRx(&SX1278, sizeof(loraRx), TX_TIMEOUT);
 800d3d8:	2205      	movs	r2, #5
 800d3da:	211c      	movs	r1, #28
 800d3dc:	4808      	ldr	r0, [pc, #32]	; (800d400 <taskLoraCom+0xb0>)
 800d3de:	f7ff fb8f 	bl	800cb00 <SX1278_LoRaEntryRx>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	4a07      	ldr	r2, [pc, #28]	; (800d404 <taskLoraCom+0xb4>)
 800d3e6:	6013      	str	r3, [r2, #0]

		HAL_IWDG_Refresh(&hiwdg);
 800d3e8:	480b      	ldr	r0, [pc, #44]	; (800d418 <taskLoraCom+0xc8>)
 800d3ea:	f7f6 fc15 	bl	8003c18 <HAL_IWDG_Refresh>

		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 800d3ee:	f107 0308 	add.w	r3, r7, #8
 800d3f2:	68f9      	ldr	r1, [r7, #12]
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	f7fb f8d1 	bl	800859c <vTaskDelayUntil>
		xQueueReceive(sensorDataQueue, &loraTx, 2);
 800d3fa:	e7cf      	b.n	800d39c <taskLoraCom+0x4c>
 800d3fc:	f3af 8000 	nop.w
 800d400:	20005288 	.word	0x20005288
 800d404:	200053d8 	.word	0x200053d8
 800d408:	20004e08 	.word	0x20004e08
 800d40c:	200053a0 	.word	0x200053a0
 800d410:	200053e0 	.word	0x200053e0
 800d414:	200053dc 	.word	0x200053dc
 800d418:	20000120 	.word	0x20000120
 800d41c:	19de5080 	.word	0x19de5080
 800d420:	00000000 	.word	0x00000000

0800d424 <dioIrqCallback>:
/**
 * @brief callback function for the DIO0 pin
 * @return none
 */
void dioIrqCallback()
{
 800d424:	b580      	push	{r7, lr}
 800d426:	af00      	add	r7, sp, #0
	if(txRxMutex == TX_STATUS)
 800d428:	4b0f      	ldr	r3, [pc, #60]	; (800d468 <dioIrqCallback+0x44>)
 800d42a:	781b      	ldrb	r3, [r3, #0]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d109      	bne.n	800d444 <dioIrqCallback+0x20>
	{
		retTx = SX1278_LoRaTxPacket(&SX1278, (uint8_t*)&loraTx,
 800d430:	2305      	movs	r3, #5
 800d432:	221c      	movs	r2, #28
 800d434:	490d      	ldr	r1, [pc, #52]	; (800d46c <dioIrqCallback+0x48>)
 800d436:	480e      	ldr	r0, [pc, #56]	; (800d470 <dioIrqCallback+0x4c>)
 800d438:	f7ff fc63 	bl	800cd02 <SX1278_LoRaTxPacket>
 800d43c:	4603      	mov	r3, r0
 800d43e:	4a0d      	ldr	r2, [pc, #52]	; (800d474 <dioIrqCallback+0x50>)
 800d440:	6013      	str	r3, [r2, #0]
	else
	{
		ret = SX1278_available(&SX1278);
		SX1278_read(&SX1278, (uint8_t*)&loraRx, ret);
	}
}
 800d442:	e00e      	b.n	800d462 <dioIrqCallback+0x3e>
		ret = SX1278_available(&SX1278);
 800d444:	480a      	ldr	r0, [pc, #40]	; (800d470 <dioIrqCallback+0x4c>)
 800d446:	f7ff fcc8 	bl	800cdda <SX1278_available>
 800d44a:	4603      	mov	r3, r0
 800d44c:	461a      	mov	r2, r3
 800d44e:	4b0a      	ldr	r3, [pc, #40]	; (800d478 <dioIrqCallback+0x54>)
 800d450:	601a      	str	r2, [r3, #0]
		SX1278_read(&SX1278, (uint8_t*)&loraRx, ret);
 800d452:	4b09      	ldr	r3, [pc, #36]	; (800d478 <dioIrqCallback+0x54>)
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	b2db      	uxtb	r3, r3
 800d458:	461a      	mov	r2, r3
 800d45a:	4908      	ldr	r1, [pc, #32]	; (800d47c <dioIrqCallback+0x58>)
 800d45c:	4804      	ldr	r0, [pc, #16]	; (800d470 <dioIrqCallback+0x4c>)
 800d45e:	f7ff fcc8 	bl	800cdf2 <SX1278_read>
}
 800d462:	bf00      	nop
 800d464:	bd80      	pop	{r7, pc}
 800d466:	bf00      	nop
 800d468:	200053e0 	.word	0x200053e0
 800d46c:	200053a0 	.word	0x200053a0
 800d470:	20005288 	.word	0x20005288
 800d474:	200053dc 	.word	0x200053dc
 800d478:	200053d8 	.word	0x200053d8
 800d47c:	200053bc 	.word	0x200053bc

0800d480 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800d480:	b480      	push	{r7}
 800d482:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800d484:	f3bf 8f4f 	dsb	sy
}
 800d488:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800d48a:	4b06      	ldr	r3, [pc, #24]	; (800d4a4 <__NVIC_SystemReset+0x24>)
 800d48c:	68db      	ldr	r3, [r3, #12]
 800d48e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800d492:	4904      	ldr	r1, [pc, #16]	; (800d4a4 <__NVIC_SystemReset+0x24>)
 800d494:	4b04      	ldr	r3, [pc, #16]	; (800d4a8 <__NVIC_SystemReset+0x28>)
 800d496:	4313      	orrs	r3, r2
 800d498:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800d49a:	f3bf 8f4f 	dsb	sy
}
 800d49e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800d4a0:	bf00      	nop
 800d4a2:	e7fd      	b.n	800d4a0 <__NVIC_SystemReset+0x20>
 800d4a4:	e000ed00 	.word	0xe000ed00
 800d4a8:	05fa0004 	.word	0x05fa0004

0800d4ac <taskMotorDrive>:

TaskHandle_t hTaskMotDrive_s;
extern LoraTransmit loraTx;

void taskMotorDrive(void *arg)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b086      	sub	sp, #24
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime = 0;
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	60fb      	str	r3, [r7, #12]
	const TickType_t xFrequency = 20;
 800d4b8:	2314      	movs	r3, #20
 800d4ba:	617b      	str	r3, [r7, #20]
	xLastWakeTime = xTaskGetTickCount();
 800d4bc:	f7fb fa08 	bl	80088d0 <xTaskGetTickCount>
 800d4c0:	4603      	mov	r3, r0
 800d4c2:	60fb      	str	r3, [r7, #12]
	float azimuthAngle = 0.0f;
 800d4c4:	f04f 0300 	mov.w	r3, #0
 800d4c8:	613b      	str	r3, [r7, #16]

	for(;;)
	{
		  if((rcChannel_s.channel1>=(CHANNEL_DOWN-CHANNEL_ERROR)) && (rcChannel_s.channel1<=(CHANNEL_UP + CHANNEL_ERROR)))
 800d4ca:	4b0c      	ldr	r3, [pc, #48]	; (800d4fc <taskMotorDrive+0x50>)
 800d4cc:	881b      	ldrh	r3, [r3, #0]
 800d4ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d4d2:	d911      	bls.n	800d4f8 <taskMotorDrive+0x4c>
 800d4d4:	4b09      	ldr	r3, [pc, #36]	; (800d4fc <taskMotorDrive+0x50>)
 800d4d6:	881b      	ldrh	r3, [r3, #0]
 800d4d8:	f240 72e9 	movw	r2, #2025	; 0x7e9
 800d4dc:	4293      	cmp	r3, r2
 800d4de:	d80b      	bhi.n	800d4f8 <taskMotorDrive+0x4c>
		  {
			  UGV_motorDrive(&rcChannel_s, azimuthAngle);
 800d4e0:	ed97 0a04 	vldr	s0, [r7, #16]
 800d4e4:	4805      	ldr	r0, [pc, #20]	; (800d4fc <taskMotorDrive+0x50>)
 800d4e6:	f7fe f819 	bl	800b51c <UGV_motorDrive>
		  else
		  {
			  NVIC_SystemReset();
		  }

		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 800d4ea:	f107 030c 	add.w	r3, r7, #12
 800d4ee:	6979      	ldr	r1, [r7, #20]
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	f7fb f853 	bl	800859c <vTaskDelayUntil>
		  if((rcChannel_s.channel1>=(CHANNEL_DOWN-CHANNEL_ERROR)) && (rcChannel_s.channel1<=(CHANNEL_UP + CHANNEL_ERROR)))
 800d4f6:	e7e8      	b.n	800d4ca <taskMotorDrive+0x1e>
			  NVIC_SystemReset();
 800d4f8:	f7ff ffc2 	bl	800d480 <__NVIC_SystemReset>
 800d4fc:	2000500c 	.word	0x2000500c

0800d500 <__NVIC_SystemReset>:
{
 800d500:	b480      	push	{r7}
 800d502:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800d504:	f3bf 8f4f 	dsb	sy
}
 800d508:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800d50a:	4b06      	ldr	r3, [pc, #24]	; (800d524 <__NVIC_SystemReset+0x24>)
 800d50c:	68db      	ldr	r3, [r3, #12]
 800d50e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800d512:	4904      	ldr	r1, [pc, #16]	; (800d524 <__NVIC_SystemReset+0x24>)
 800d514:	4b04      	ldr	r3, [pc, #16]	; (800d528 <__NVIC_SystemReset+0x28>)
 800d516:	4313      	orrs	r3, r2
 800d518:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800d51a:	f3bf 8f4f 	dsb	sy
}
 800d51e:	bf00      	nop
    __NOP();
 800d520:	bf00      	nop
 800d522:	e7fd      	b.n	800d520 <__NVIC_SystemReset+0x20>
 800d524:	e000ed00 	.word	0xe000ed00
 800d528:	05fa0004 	.word	0x05fa0004

0800d52c <taskSensor>:
extern GPS gps;
uint16_t azim;

//<<<<<<<<<<<<<<-FUNCTION PROTOTYPES->>>>>>>>>>>>>>
void taskSensor(void *arg)
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b086      	sub	sp, #24
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime = 0;
 800d534:	2300      	movs	r3, #0
 800d536:	60fb      	str	r3, [r7, #12]
	const TickType_t xFrequency = 10;
 800d538:	230a      	movs	r3, #10
 800d53a:	617b      	str	r3, [r7, #20]
	xLastWakeTime = xTaskGetTickCount();
 800d53c:	f7fb f9c8 	bl	80088d0 <xTaskGetTickCount>
 800d540:	4603      	mov	r3, r0
 800d542:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
		//!< get azimuth from the qmc5883
		loraTx.azimuth = qmcProc();
 800d544:	f000 f876 	bl	800d634 <qmcProc>
 800d548:	4603      	mov	r3, r0
 800d54a:	461a      	mov	r2, r3
 800d54c:	4b32      	ldr	r3, [pc, #200]	; (800d618 <taskSensor+0xec>)
 800d54e:	801a      	strh	r2, [r3, #0]
		loraTx.ledState = ledProc();
 800d550:	f000 f88c 	bl	800d66c <ledProc>
 800d554:	4603      	mov	r3, r0
 800d556:	461a      	mov	r2, r3
 800d558:	4b2f      	ldr	r3, [pc, #188]	; (800d618 <taskSensor+0xec>)
 800d55a:	761a      	strb	r2, [r3, #24]

		//!< control the gps ready?
		if(gps.gpsState == POSITION_FIXED && gps.day != 0 && ((HAL_GetTick() - gpsIrqTime) < 500))
 800d55c:	4b2f      	ldr	r3, [pc, #188]	; (800d61c <taskSensor+0xf0>)
 800d55e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d562:	2b02      	cmp	r3, #2
 800d564:	d130      	bne.n	800d5c8 <taskSensor+0x9c>
 800d566:	4b2d      	ldr	r3, [pc, #180]	; (800d61c <taskSensor+0xf0>)
 800d568:	7d5b      	ldrb	r3, [r3, #21]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d02c      	beq.n	800d5c8 <taskSensor+0x9c>
 800d56e:	f7f4 fe2f 	bl	80021d0 <HAL_GetTick>
 800d572:	4602      	mov	r2, r0
 800d574:	4b2a      	ldr	r3, [pc, #168]	; (800d620 <taskSensor+0xf4>)
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	1ad3      	subs	r3, r2, r3
 800d57a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800d57e:	d223      	bcs.n	800d5c8 <taskSensor+0x9c>
		{
			loraTx.gpsState = POSITION_FIXED;
 800d580:	4b25      	ldr	r3, [pc, #148]	; (800d618 <taskSensor+0xec>)
 800d582:	2202      	movs	r2, #2
 800d584:	765a      	strb	r2, [r3, #25]
			loraTx.latitudeDegree = gps.latitudeDegree;
 800d586:	4b25      	ldr	r3, [pc, #148]	; (800d61c <taskSensor+0xf0>)
 800d588:	78da      	ldrb	r2, [r3, #3]
 800d58a:	4b23      	ldr	r3, [pc, #140]	; (800d618 <taskSensor+0xec>)
 800d58c:	709a      	strb	r2, [r3, #2]
			loraTx.latitudeMinute = gps.latitudeMinute;
 800d58e:	4b23      	ldr	r3, [pc, #140]	; (800d61c <taskSensor+0xf0>)
 800d590:	791a      	ldrb	r2, [r3, #4]
 800d592:	4b21      	ldr	r3, [pc, #132]	; (800d618 <taskSensor+0xec>)
 800d594:	70da      	strb	r2, [r3, #3]
			loraTx.latitudeSecond = gps.latitudeSecond;
 800d596:	4b21      	ldr	r3, [pc, #132]	; (800d61c <taskSensor+0xf0>)
 800d598:	689b      	ldr	r3, [r3, #8]
 800d59a:	4a1f      	ldr	r2, [pc, #124]	; (800d618 <taskSensor+0xec>)
 800d59c:	6053      	str	r3, [r2, #4]

			loraTx.longitudeDegree = gps.longitudeDegree;
 800d59e:	4b1f      	ldr	r3, [pc, #124]	; (800d61c <taskSensor+0xf0>)
 800d5a0:	7b5a      	ldrb	r2, [r3, #13]
 800d5a2:	4b1d      	ldr	r3, [pc, #116]	; (800d618 <taskSensor+0xec>)
 800d5a4:	721a      	strb	r2, [r3, #8]
			loraTx.longitudeMinute = gps.longitudeMinute;
 800d5a6:	4b1d      	ldr	r3, [pc, #116]	; (800d61c <taskSensor+0xf0>)
 800d5a8:	7b9a      	ldrb	r2, [r3, #14]
 800d5aa:	4b1b      	ldr	r3, [pc, #108]	; (800d618 <taskSensor+0xec>)
 800d5ac:	725a      	strb	r2, [r3, #9]
			loraTx.longitudeSecond = gps.longitudeSecond;
 800d5ae:	4b1b      	ldr	r3, [pc, #108]	; (800d61c <taskSensor+0xf0>)
 800d5b0:	691b      	ldr	r3, [r3, #16]
 800d5b2:	4a19      	ldr	r2, [pc, #100]	; (800d618 <taskSensor+0xec>)
 800d5b4:	60d3      	str	r3, [r2, #12]

			loraTx.numberOfSatellite = gps.numberOfSatellite;
 800d5b6:	4b19      	ldr	r3, [pc, #100]	; (800d61c <taskSensor+0xf0>)
 800d5b8:	7e9a      	ldrb	r2, [r3, #26]
 800d5ba:	4b17      	ldr	r3, [pc, #92]	; (800d618 <taskSensor+0xec>)
 800d5bc:	741a      	strb	r2, [r3, #16]

			loraTx.speed = *((uint32_t*)&gps.speed);
 800d5be:	4b19      	ldr	r3, [pc, #100]	; (800d624 <taskSensor+0xf8>)
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	4a15      	ldr	r2, [pc, #84]	; (800d618 <taskSensor+0xec>)
 800d5c4:	6153      	str	r3, [r2, #20]
 800d5c6:	e002      	b.n	800d5ce <taskSensor+0xa2>
		}
		else
		{
			loraTx.gpsState = NO_CONNECTION;
 800d5c8:	4b13      	ldr	r3, [pc, #76]	; (800d618 <taskSensor+0xec>)
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	765a      	strb	r2, [r3, #25]
		}

		gpsPreviousHead = ringBuff.head;
 800d5ce:	4b16      	ldr	r3, [pc, #88]	; (800d628 <taskSensor+0xfc>)
 800d5d0:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 800d5d4:	b2db      	uxtb	r3, r3
 800d5d6:	461a      	mov	r2, r3
 800d5d8:	4b14      	ldr	r3, [pc, #80]	; (800d62c <taskSensor+0x100>)
 800d5da:	601a      	str	r2, [r3, #0]

		uint16_t crc = crcProc(&loraTx, sizeof(loraTx) - 2);
 800d5dc:	211a      	movs	r1, #26
 800d5de:	480e      	ldr	r0, [pc, #56]	; (800d618 <taskSensor+0xec>)
 800d5e0:	f000 f864 	bl	800d6ac <crcProc>
 800d5e4:	4603      	mov	r3, r0
 800d5e6:	827b      	strh	r3, [r7, #18]
		loraTx.crcLsb = (crc >> 0) & 0xFF;
 800d5e8:	8a7b      	ldrh	r3, [r7, #18]
 800d5ea:	b2da      	uxtb	r2, r3
 800d5ec:	4b0a      	ldr	r3, [pc, #40]	; (800d618 <taskSensor+0xec>)
 800d5ee:	769a      	strb	r2, [r3, #26]
		loraTx.crcMsb = (crc >> 8) & 0xFF;
 800d5f0:	8a7b      	ldrh	r3, [r7, #18]
 800d5f2:	0a1b      	lsrs	r3, r3, #8
 800d5f4:	b29b      	uxth	r3, r3
 800d5f6:	b2da      	uxtb	r2, r3
 800d5f8:	4b07      	ldr	r3, [pc, #28]	; (800d618 <taskSensor+0xec>)
 800d5fa:	76da      	strb	r2, [r3, #27]

		xQueueGenericSend(sensorDataQueue, &loraTx, 5, queueSEND_TO_FRONT);
 800d5fc:	4b0c      	ldr	r3, [pc, #48]	; (800d630 <taskSensor+0x104>)
 800d5fe:	6818      	ldr	r0, [r3, #0]
 800d600:	2301      	movs	r3, #1
 800d602:	2205      	movs	r2, #5
 800d604:	4904      	ldr	r1, [pc, #16]	; (800d618 <taskSensor+0xec>)
 800d606:	f7fa fa29 	bl	8007a5c <xQueueGenericSend>

		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 800d60a:	f107 030c 	add.w	r3, r7, #12
 800d60e:	6979      	ldr	r1, [r7, #20]
 800d610:	4618      	mov	r0, r3
 800d612:	f7fa ffc3 	bl	800859c <vTaskDelayUntil>
	{
 800d616:	e795      	b.n	800d544 <taskSensor+0x18>
 800d618:	20004e0c 	.word	0x20004e0c
 800d61c:	20005240 	.word	0x20005240
 800d620:	20004f30 	.word	0x20004f30
 800d624:	20005260 	.word	0x20005260
 800d628:	20004e2c 	.word	0x20004e2c
 800d62c:	200053e8 	.word	0x200053e8
 800d630:	20004e08 	.word	0x20004e08

0800d634 <qmcProc>:
/**
 * @brief take the azimuth angle
 * @return azimuthn angle
 */
static uint16_t qmcProc()
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b082      	sub	sp, #8
 800d638:	af00      	add	r7, sp, #0
	uint16_t azimuthAngle = 0;
 800d63a:	2300      	movs	r3, #0
 800d63c:	80fb      	strh	r3, [r7, #6]
	if(UGV_isDataReady(&hqmc))
 800d63e:	480a      	ldr	r0, [pc, #40]	; (800d668 <qmcProc+0x34>)
 800d640:	f7fe fd5c 	bl	800c0fc <UGV_isDataReady>
 800d644:	4603      	mov	r3, r0
 800d646:	2b00      	cmp	r3, #0
 800d648:	d009      	beq.n	800d65e <qmcProc+0x2a>
	{
		azimuthAngle = (uint16_t)UGV_getAzimuth(&hqmc);
 800d64a:	4807      	ldr	r0, [pc, #28]	; (800d668 <qmcProc+0x34>)
 800d64c:	f7fe fe88 	bl	800c360 <UGV_getAzimuth>
 800d650:	eef0 7a40 	vmov.f32	s15, s0
 800d654:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d658:	ee17 3a90 	vmov	r3, s15
 800d65c:	80fb      	strh	r3, [r7, #6]
	}

	return azimuthAngle;
 800d65e:	88fb      	ldrh	r3, [r7, #6]
}
 800d660:	4618      	mov	r0, r3
 800d662:	3708      	adds	r7, #8
 800d664:	46bd      	mov	sp, r7
 800d666:	bd80      	pop	{r7, pc}
 800d668:	20005220 	.word	0x20005220

0800d66c <ledProc>:
/**
 * @brief set or reset the led status according the rf transmitter signal
 * @return led status
 */
static LED_STATE ledProc()
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b082      	sub	sp, #8
 800d670:	af00      	add	r7, sp, #0
	LED_STATE ledState = LEDS_OFF;
 800d672:	2300      	movs	r3, #0
 800d674:	71fb      	strb	r3, [r7, #7]

	//!< set the leds
	if((rcChannel_s.channel3>=(CHANNEL_DOWN-CHANNEL_ERROR)) && (rcChannel_s.channel1<=(CHANNEL_UP + CHANNEL_ERROR)))
 800d676:	4b0c      	ldr	r3, [pc, #48]	; (800d6a8 <ledProc+0x3c>)
 800d678:	889b      	ldrh	r3, [r3, #4]
 800d67a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d67e:	d90b      	bls.n	800d698 <ledProc+0x2c>
 800d680:	4b09      	ldr	r3, [pc, #36]	; (800d6a8 <ledProc+0x3c>)
 800d682:	881b      	ldrh	r3, [r3, #0]
 800d684:	f240 72e9 	movw	r2, #2025	; 0x7e9
 800d688:	4293      	cmp	r3, r2
 800d68a:	d805      	bhi.n	800d698 <ledProc+0x2c>
	{
		ledState = UGV_ledControl(&rcChannel_s);
 800d68c:	4806      	ldr	r0, [pc, #24]	; (800d6a8 <ledProc+0x3c>)
 800d68e:	f7ff fd21 	bl	800d0d4 <UGV_ledControl>
 800d692:	4603      	mov	r3, r0
 800d694:	71fb      	strb	r3, [r7, #7]
 800d696:	e001      	b.n	800d69c <ledProc+0x30>
	}
	else
	{
		NVIC_SystemReset();
 800d698:	f7ff ff32 	bl	800d500 <__NVIC_SystemReset>
	}

	return ledState;
 800d69c:	79fb      	ldrb	r3, [r7, #7]
}
 800d69e:	4618      	mov	r0, r3
 800d6a0:	3708      	adds	r7, #8
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	bd80      	pop	{r7, pc}
 800d6a6:	bf00      	nop
 800d6a8:	2000500c 	.word	0x2000500c

0800d6ac <crcProc>:
/**
 * @brief calculate the crc of the message up to len index
 * @return 16 bit crc value
 */
static uint16_t crcProc(void * ptr, uint16_t len)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b082      	sub	sp, #8
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
 800d6b4:	460b      	mov	r3, r1
 800d6b6:	807b      	strh	r3, [r7, #2]
	return AE_pec15((uint8_t*)ptr, len);
 800d6b8:	887b      	ldrh	r3, [r7, #2]
 800d6ba:	4619      	mov	r1, r3
 800d6bc:	6878      	ldr	r0, [r7, #4]
 800d6be:	f7ff fcd5 	bl	800d06c <AE_pec15>
 800d6c2:	4603      	mov	r3, r0
}
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	3708      	adds	r7, #8
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	bd80      	pop	{r7, pc}

0800d6cc <siprintf>:
 800d6cc:	b40e      	push	{r1, r2, r3}
 800d6ce:	b500      	push	{lr}
 800d6d0:	b09c      	sub	sp, #112	; 0x70
 800d6d2:	ab1d      	add	r3, sp, #116	; 0x74
 800d6d4:	9002      	str	r0, [sp, #8]
 800d6d6:	9006      	str	r0, [sp, #24]
 800d6d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d6dc:	4809      	ldr	r0, [pc, #36]	; (800d704 <siprintf+0x38>)
 800d6de:	9107      	str	r1, [sp, #28]
 800d6e0:	9104      	str	r1, [sp, #16]
 800d6e2:	4909      	ldr	r1, [pc, #36]	; (800d708 <siprintf+0x3c>)
 800d6e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6e8:	9105      	str	r1, [sp, #20]
 800d6ea:	6800      	ldr	r0, [r0, #0]
 800d6ec:	9301      	str	r3, [sp, #4]
 800d6ee:	a902      	add	r1, sp, #8
 800d6f0:	f000 fa08 	bl	800db04 <_svfiprintf_r>
 800d6f4:	9b02      	ldr	r3, [sp, #8]
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	701a      	strb	r2, [r3, #0]
 800d6fa:	b01c      	add	sp, #112	; 0x70
 800d6fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800d700:	b003      	add	sp, #12
 800d702:	4770      	bx	lr
 800d704:	20000098 	.word	0x20000098
 800d708:	ffff0208 	.word	0xffff0208

0800d70c <memset>:
 800d70c:	4402      	add	r2, r0
 800d70e:	4603      	mov	r3, r0
 800d710:	4293      	cmp	r3, r2
 800d712:	d100      	bne.n	800d716 <memset+0xa>
 800d714:	4770      	bx	lr
 800d716:	f803 1b01 	strb.w	r1, [r3], #1
 800d71a:	e7f9      	b.n	800d710 <memset+0x4>

0800d71c <strncmp>:
 800d71c:	b510      	push	{r4, lr}
 800d71e:	b16a      	cbz	r2, 800d73c <strncmp+0x20>
 800d720:	3901      	subs	r1, #1
 800d722:	1884      	adds	r4, r0, r2
 800d724:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d728:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d72c:	429a      	cmp	r2, r3
 800d72e:	d103      	bne.n	800d738 <strncmp+0x1c>
 800d730:	42a0      	cmp	r0, r4
 800d732:	d001      	beq.n	800d738 <strncmp+0x1c>
 800d734:	2a00      	cmp	r2, #0
 800d736:	d1f5      	bne.n	800d724 <strncmp+0x8>
 800d738:	1ad0      	subs	r0, r2, r3
 800d73a:	bd10      	pop	{r4, pc}
 800d73c:	4610      	mov	r0, r2
 800d73e:	e7fc      	b.n	800d73a <strncmp+0x1e>

0800d740 <_reclaim_reent>:
 800d740:	4b29      	ldr	r3, [pc, #164]	; (800d7e8 <_reclaim_reent+0xa8>)
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	4283      	cmp	r3, r0
 800d746:	b570      	push	{r4, r5, r6, lr}
 800d748:	4604      	mov	r4, r0
 800d74a:	d04b      	beq.n	800d7e4 <_reclaim_reent+0xa4>
 800d74c:	69c3      	ldr	r3, [r0, #28]
 800d74e:	b143      	cbz	r3, 800d762 <_reclaim_reent+0x22>
 800d750:	68db      	ldr	r3, [r3, #12]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d144      	bne.n	800d7e0 <_reclaim_reent+0xa0>
 800d756:	69e3      	ldr	r3, [r4, #28]
 800d758:	6819      	ldr	r1, [r3, #0]
 800d75a:	b111      	cbz	r1, 800d762 <_reclaim_reent+0x22>
 800d75c:	4620      	mov	r0, r4
 800d75e:	f000 f87f 	bl	800d860 <_free_r>
 800d762:	6961      	ldr	r1, [r4, #20]
 800d764:	b111      	cbz	r1, 800d76c <_reclaim_reent+0x2c>
 800d766:	4620      	mov	r0, r4
 800d768:	f000 f87a 	bl	800d860 <_free_r>
 800d76c:	69e1      	ldr	r1, [r4, #28]
 800d76e:	b111      	cbz	r1, 800d776 <_reclaim_reent+0x36>
 800d770:	4620      	mov	r0, r4
 800d772:	f000 f875 	bl	800d860 <_free_r>
 800d776:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d778:	b111      	cbz	r1, 800d780 <_reclaim_reent+0x40>
 800d77a:	4620      	mov	r0, r4
 800d77c:	f000 f870 	bl	800d860 <_free_r>
 800d780:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d782:	b111      	cbz	r1, 800d78a <_reclaim_reent+0x4a>
 800d784:	4620      	mov	r0, r4
 800d786:	f000 f86b 	bl	800d860 <_free_r>
 800d78a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d78c:	b111      	cbz	r1, 800d794 <_reclaim_reent+0x54>
 800d78e:	4620      	mov	r0, r4
 800d790:	f000 f866 	bl	800d860 <_free_r>
 800d794:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d796:	b111      	cbz	r1, 800d79e <_reclaim_reent+0x5e>
 800d798:	4620      	mov	r0, r4
 800d79a:	f000 f861 	bl	800d860 <_free_r>
 800d79e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d7a0:	b111      	cbz	r1, 800d7a8 <_reclaim_reent+0x68>
 800d7a2:	4620      	mov	r0, r4
 800d7a4:	f000 f85c 	bl	800d860 <_free_r>
 800d7a8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d7aa:	b111      	cbz	r1, 800d7b2 <_reclaim_reent+0x72>
 800d7ac:	4620      	mov	r0, r4
 800d7ae:	f000 f857 	bl	800d860 <_free_r>
 800d7b2:	6a23      	ldr	r3, [r4, #32]
 800d7b4:	b1b3      	cbz	r3, 800d7e4 <_reclaim_reent+0xa4>
 800d7b6:	4620      	mov	r0, r4
 800d7b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d7bc:	4718      	bx	r3
 800d7be:	5949      	ldr	r1, [r1, r5]
 800d7c0:	b941      	cbnz	r1, 800d7d4 <_reclaim_reent+0x94>
 800d7c2:	3504      	adds	r5, #4
 800d7c4:	69e3      	ldr	r3, [r4, #28]
 800d7c6:	2d80      	cmp	r5, #128	; 0x80
 800d7c8:	68d9      	ldr	r1, [r3, #12]
 800d7ca:	d1f8      	bne.n	800d7be <_reclaim_reent+0x7e>
 800d7cc:	4620      	mov	r0, r4
 800d7ce:	f000 f847 	bl	800d860 <_free_r>
 800d7d2:	e7c0      	b.n	800d756 <_reclaim_reent+0x16>
 800d7d4:	680e      	ldr	r6, [r1, #0]
 800d7d6:	4620      	mov	r0, r4
 800d7d8:	f000 f842 	bl	800d860 <_free_r>
 800d7dc:	4631      	mov	r1, r6
 800d7de:	e7ef      	b.n	800d7c0 <_reclaim_reent+0x80>
 800d7e0:	2500      	movs	r5, #0
 800d7e2:	e7ef      	b.n	800d7c4 <_reclaim_reent+0x84>
 800d7e4:	bd70      	pop	{r4, r5, r6, pc}
 800d7e6:	bf00      	nop
 800d7e8:	20000098 	.word	0x20000098

0800d7ec <__errno>:
 800d7ec:	4b01      	ldr	r3, [pc, #4]	; (800d7f4 <__errno+0x8>)
 800d7ee:	6818      	ldr	r0, [r3, #0]
 800d7f0:	4770      	bx	lr
 800d7f2:	bf00      	nop
 800d7f4:	20000098 	.word	0x20000098

0800d7f8 <__libc_init_array>:
 800d7f8:	b570      	push	{r4, r5, r6, lr}
 800d7fa:	4d0d      	ldr	r5, [pc, #52]	; (800d830 <__libc_init_array+0x38>)
 800d7fc:	4c0d      	ldr	r4, [pc, #52]	; (800d834 <__libc_init_array+0x3c>)
 800d7fe:	1b64      	subs	r4, r4, r5
 800d800:	10a4      	asrs	r4, r4, #2
 800d802:	2600      	movs	r6, #0
 800d804:	42a6      	cmp	r6, r4
 800d806:	d109      	bne.n	800d81c <__libc_init_array+0x24>
 800d808:	4d0b      	ldr	r5, [pc, #44]	; (800d838 <__libc_init_array+0x40>)
 800d80a:	4c0c      	ldr	r4, [pc, #48]	; (800d83c <__libc_init_array+0x44>)
 800d80c:	f001 fe10 	bl	800f430 <_init>
 800d810:	1b64      	subs	r4, r4, r5
 800d812:	10a4      	asrs	r4, r4, #2
 800d814:	2600      	movs	r6, #0
 800d816:	42a6      	cmp	r6, r4
 800d818:	d105      	bne.n	800d826 <__libc_init_array+0x2e>
 800d81a:	bd70      	pop	{r4, r5, r6, pc}
 800d81c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d820:	4798      	blx	r3
 800d822:	3601      	adds	r6, #1
 800d824:	e7ee      	b.n	800d804 <__libc_init_array+0xc>
 800d826:	f855 3b04 	ldr.w	r3, [r5], #4
 800d82a:	4798      	blx	r3
 800d82c:	3601      	adds	r6, #1
 800d82e:	e7f2      	b.n	800d816 <__libc_init_array+0x1e>
 800d830:	0800f5b0 	.word	0x0800f5b0
 800d834:	0800f5b0 	.word	0x0800f5b0
 800d838:	0800f5b0 	.word	0x0800f5b0
 800d83c:	0800f5b4 	.word	0x0800f5b4

0800d840 <__retarget_lock_acquire_recursive>:
 800d840:	4770      	bx	lr

0800d842 <__retarget_lock_release_recursive>:
 800d842:	4770      	bx	lr

0800d844 <memcpy>:
 800d844:	440a      	add	r2, r1
 800d846:	4291      	cmp	r1, r2
 800d848:	f100 33ff 	add.w	r3, r0, #4294967295
 800d84c:	d100      	bne.n	800d850 <memcpy+0xc>
 800d84e:	4770      	bx	lr
 800d850:	b510      	push	{r4, lr}
 800d852:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d856:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d85a:	4291      	cmp	r1, r2
 800d85c:	d1f9      	bne.n	800d852 <memcpy+0xe>
 800d85e:	bd10      	pop	{r4, pc}

0800d860 <_free_r>:
 800d860:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d862:	2900      	cmp	r1, #0
 800d864:	d044      	beq.n	800d8f0 <_free_r+0x90>
 800d866:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d86a:	9001      	str	r0, [sp, #4]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	f1a1 0404 	sub.w	r4, r1, #4
 800d872:	bfb8      	it	lt
 800d874:	18e4      	addlt	r4, r4, r3
 800d876:	f000 f8df 	bl	800da38 <__malloc_lock>
 800d87a:	4a1e      	ldr	r2, [pc, #120]	; (800d8f4 <_free_r+0x94>)
 800d87c:	9801      	ldr	r0, [sp, #4]
 800d87e:	6813      	ldr	r3, [r2, #0]
 800d880:	b933      	cbnz	r3, 800d890 <_free_r+0x30>
 800d882:	6063      	str	r3, [r4, #4]
 800d884:	6014      	str	r4, [r2, #0]
 800d886:	b003      	add	sp, #12
 800d888:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d88c:	f000 b8da 	b.w	800da44 <__malloc_unlock>
 800d890:	42a3      	cmp	r3, r4
 800d892:	d908      	bls.n	800d8a6 <_free_r+0x46>
 800d894:	6825      	ldr	r5, [r4, #0]
 800d896:	1961      	adds	r1, r4, r5
 800d898:	428b      	cmp	r3, r1
 800d89a:	bf01      	itttt	eq
 800d89c:	6819      	ldreq	r1, [r3, #0]
 800d89e:	685b      	ldreq	r3, [r3, #4]
 800d8a0:	1949      	addeq	r1, r1, r5
 800d8a2:	6021      	streq	r1, [r4, #0]
 800d8a4:	e7ed      	b.n	800d882 <_free_r+0x22>
 800d8a6:	461a      	mov	r2, r3
 800d8a8:	685b      	ldr	r3, [r3, #4]
 800d8aa:	b10b      	cbz	r3, 800d8b0 <_free_r+0x50>
 800d8ac:	42a3      	cmp	r3, r4
 800d8ae:	d9fa      	bls.n	800d8a6 <_free_r+0x46>
 800d8b0:	6811      	ldr	r1, [r2, #0]
 800d8b2:	1855      	adds	r5, r2, r1
 800d8b4:	42a5      	cmp	r5, r4
 800d8b6:	d10b      	bne.n	800d8d0 <_free_r+0x70>
 800d8b8:	6824      	ldr	r4, [r4, #0]
 800d8ba:	4421      	add	r1, r4
 800d8bc:	1854      	adds	r4, r2, r1
 800d8be:	42a3      	cmp	r3, r4
 800d8c0:	6011      	str	r1, [r2, #0]
 800d8c2:	d1e0      	bne.n	800d886 <_free_r+0x26>
 800d8c4:	681c      	ldr	r4, [r3, #0]
 800d8c6:	685b      	ldr	r3, [r3, #4]
 800d8c8:	6053      	str	r3, [r2, #4]
 800d8ca:	440c      	add	r4, r1
 800d8cc:	6014      	str	r4, [r2, #0]
 800d8ce:	e7da      	b.n	800d886 <_free_r+0x26>
 800d8d0:	d902      	bls.n	800d8d8 <_free_r+0x78>
 800d8d2:	230c      	movs	r3, #12
 800d8d4:	6003      	str	r3, [r0, #0]
 800d8d6:	e7d6      	b.n	800d886 <_free_r+0x26>
 800d8d8:	6825      	ldr	r5, [r4, #0]
 800d8da:	1961      	adds	r1, r4, r5
 800d8dc:	428b      	cmp	r3, r1
 800d8de:	bf04      	itt	eq
 800d8e0:	6819      	ldreq	r1, [r3, #0]
 800d8e2:	685b      	ldreq	r3, [r3, #4]
 800d8e4:	6063      	str	r3, [r4, #4]
 800d8e6:	bf04      	itt	eq
 800d8e8:	1949      	addeq	r1, r1, r5
 800d8ea:	6021      	streq	r1, [r4, #0]
 800d8ec:	6054      	str	r4, [r2, #4]
 800d8ee:	e7ca      	b.n	800d886 <_free_r+0x26>
 800d8f0:	b003      	add	sp, #12
 800d8f2:	bd30      	pop	{r4, r5, pc}
 800d8f4:	20005530 	.word	0x20005530

0800d8f8 <sbrk_aligned>:
 800d8f8:	b570      	push	{r4, r5, r6, lr}
 800d8fa:	4e0e      	ldr	r6, [pc, #56]	; (800d934 <sbrk_aligned+0x3c>)
 800d8fc:	460c      	mov	r4, r1
 800d8fe:	6831      	ldr	r1, [r6, #0]
 800d900:	4605      	mov	r5, r0
 800d902:	b911      	cbnz	r1, 800d90a <sbrk_aligned+0x12>
 800d904:	f000 fba6 	bl	800e054 <_sbrk_r>
 800d908:	6030      	str	r0, [r6, #0]
 800d90a:	4621      	mov	r1, r4
 800d90c:	4628      	mov	r0, r5
 800d90e:	f000 fba1 	bl	800e054 <_sbrk_r>
 800d912:	1c43      	adds	r3, r0, #1
 800d914:	d00a      	beq.n	800d92c <sbrk_aligned+0x34>
 800d916:	1cc4      	adds	r4, r0, #3
 800d918:	f024 0403 	bic.w	r4, r4, #3
 800d91c:	42a0      	cmp	r0, r4
 800d91e:	d007      	beq.n	800d930 <sbrk_aligned+0x38>
 800d920:	1a21      	subs	r1, r4, r0
 800d922:	4628      	mov	r0, r5
 800d924:	f000 fb96 	bl	800e054 <_sbrk_r>
 800d928:	3001      	adds	r0, #1
 800d92a:	d101      	bne.n	800d930 <sbrk_aligned+0x38>
 800d92c:	f04f 34ff 	mov.w	r4, #4294967295
 800d930:	4620      	mov	r0, r4
 800d932:	bd70      	pop	{r4, r5, r6, pc}
 800d934:	20005534 	.word	0x20005534

0800d938 <_malloc_r>:
 800d938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d93c:	1ccd      	adds	r5, r1, #3
 800d93e:	f025 0503 	bic.w	r5, r5, #3
 800d942:	3508      	adds	r5, #8
 800d944:	2d0c      	cmp	r5, #12
 800d946:	bf38      	it	cc
 800d948:	250c      	movcc	r5, #12
 800d94a:	2d00      	cmp	r5, #0
 800d94c:	4607      	mov	r7, r0
 800d94e:	db01      	blt.n	800d954 <_malloc_r+0x1c>
 800d950:	42a9      	cmp	r1, r5
 800d952:	d905      	bls.n	800d960 <_malloc_r+0x28>
 800d954:	230c      	movs	r3, #12
 800d956:	603b      	str	r3, [r7, #0]
 800d958:	2600      	movs	r6, #0
 800d95a:	4630      	mov	r0, r6
 800d95c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d960:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800da34 <_malloc_r+0xfc>
 800d964:	f000 f868 	bl	800da38 <__malloc_lock>
 800d968:	f8d8 3000 	ldr.w	r3, [r8]
 800d96c:	461c      	mov	r4, r3
 800d96e:	bb5c      	cbnz	r4, 800d9c8 <_malloc_r+0x90>
 800d970:	4629      	mov	r1, r5
 800d972:	4638      	mov	r0, r7
 800d974:	f7ff ffc0 	bl	800d8f8 <sbrk_aligned>
 800d978:	1c43      	adds	r3, r0, #1
 800d97a:	4604      	mov	r4, r0
 800d97c:	d155      	bne.n	800da2a <_malloc_r+0xf2>
 800d97e:	f8d8 4000 	ldr.w	r4, [r8]
 800d982:	4626      	mov	r6, r4
 800d984:	2e00      	cmp	r6, #0
 800d986:	d145      	bne.n	800da14 <_malloc_r+0xdc>
 800d988:	2c00      	cmp	r4, #0
 800d98a:	d048      	beq.n	800da1e <_malloc_r+0xe6>
 800d98c:	6823      	ldr	r3, [r4, #0]
 800d98e:	4631      	mov	r1, r6
 800d990:	4638      	mov	r0, r7
 800d992:	eb04 0903 	add.w	r9, r4, r3
 800d996:	f000 fb5d 	bl	800e054 <_sbrk_r>
 800d99a:	4581      	cmp	r9, r0
 800d99c:	d13f      	bne.n	800da1e <_malloc_r+0xe6>
 800d99e:	6821      	ldr	r1, [r4, #0]
 800d9a0:	1a6d      	subs	r5, r5, r1
 800d9a2:	4629      	mov	r1, r5
 800d9a4:	4638      	mov	r0, r7
 800d9a6:	f7ff ffa7 	bl	800d8f8 <sbrk_aligned>
 800d9aa:	3001      	adds	r0, #1
 800d9ac:	d037      	beq.n	800da1e <_malloc_r+0xe6>
 800d9ae:	6823      	ldr	r3, [r4, #0]
 800d9b0:	442b      	add	r3, r5
 800d9b2:	6023      	str	r3, [r4, #0]
 800d9b4:	f8d8 3000 	ldr.w	r3, [r8]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d038      	beq.n	800da2e <_malloc_r+0xf6>
 800d9bc:	685a      	ldr	r2, [r3, #4]
 800d9be:	42a2      	cmp	r2, r4
 800d9c0:	d12b      	bne.n	800da1a <_malloc_r+0xe2>
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	605a      	str	r2, [r3, #4]
 800d9c6:	e00f      	b.n	800d9e8 <_malloc_r+0xb0>
 800d9c8:	6822      	ldr	r2, [r4, #0]
 800d9ca:	1b52      	subs	r2, r2, r5
 800d9cc:	d41f      	bmi.n	800da0e <_malloc_r+0xd6>
 800d9ce:	2a0b      	cmp	r2, #11
 800d9d0:	d917      	bls.n	800da02 <_malloc_r+0xca>
 800d9d2:	1961      	adds	r1, r4, r5
 800d9d4:	42a3      	cmp	r3, r4
 800d9d6:	6025      	str	r5, [r4, #0]
 800d9d8:	bf18      	it	ne
 800d9da:	6059      	strne	r1, [r3, #4]
 800d9dc:	6863      	ldr	r3, [r4, #4]
 800d9de:	bf08      	it	eq
 800d9e0:	f8c8 1000 	streq.w	r1, [r8]
 800d9e4:	5162      	str	r2, [r4, r5]
 800d9e6:	604b      	str	r3, [r1, #4]
 800d9e8:	4638      	mov	r0, r7
 800d9ea:	f104 060b 	add.w	r6, r4, #11
 800d9ee:	f000 f829 	bl	800da44 <__malloc_unlock>
 800d9f2:	f026 0607 	bic.w	r6, r6, #7
 800d9f6:	1d23      	adds	r3, r4, #4
 800d9f8:	1af2      	subs	r2, r6, r3
 800d9fa:	d0ae      	beq.n	800d95a <_malloc_r+0x22>
 800d9fc:	1b9b      	subs	r3, r3, r6
 800d9fe:	50a3      	str	r3, [r4, r2]
 800da00:	e7ab      	b.n	800d95a <_malloc_r+0x22>
 800da02:	42a3      	cmp	r3, r4
 800da04:	6862      	ldr	r2, [r4, #4]
 800da06:	d1dd      	bne.n	800d9c4 <_malloc_r+0x8c>
 800da08:	f8c8 2000 	str.w	r2, [r8]
 800da0c:	e7ec      	b.n	800d9e8 <_malloc_r+0xb0>
 800da0e:	4623      	mov	r3, r4
 800da10:	6864      	ldr	r4, [r4, #4]
 800da12:	e7ac      	b.n	800d96e <_malloc_r+0x36>
 800da14:	4634      	mov	r4, r6
 800da16:	6876      	ldr	r6, [r6, #4]
 800da18:	e7b4      	b.n	800d984 <_malloc_r+0x4c>
 800da1a:	4613      	mov	r3, r2
 800da1c:	e7cc      	b.n	800d9b8 <_malloc_r+0x80>
 800da1e:	230c      	movs	r3, #12
 800da20:	603b      	str	r3, [r7, #0]
 800da22:	4638      	mov	r0, r7
 800da24:	f000 f80e 	bl	800da44 <__malloc_unlock>
 800da28:	e797      	b.n	800d95a <_malloc_r+0x22>
 800da2a:	6025      	str	r5, [r4, #0]
 800da2c:	e7dc      	b.n	800d9e8 <_malloc_r+0xb0>
 800da2e:	605b      	str	r3, [r3, #4]
 800da30:	deff      	udf	#255	; 0xff
 800da32:	bf00      	nop
 800da34:	20005530 	.word	0x20005530

0800da38 <__malloc_lock>:
 800da38:	4801      	ldr	r0, [pc, #4]	; (800da40 <__malloc_lock+0x8>)
 800da3a:	f7ff bf01 	b.w	800d840 <__retarget_lock_acquire_recursive>
 800da3e:	bf00      	nop
 800da40:	2000552c 	.word	0x2000552c

0800da44 <__malloc_unlock>:
 800da44:	4801      	ldr	r0, [pc, #4]	; (800da4c <__malloc_unlock+0x8>)
 800da46:	f7ff befc 	b.w	800d842 <__retarget_lock_release_recursive>
 800da4a:	bf00      	nop
 800da4c:	2000552c 	.word	0x2000552c

0800da50 <__ssputs_r>:
 800da50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da54:	688e      	ldr	r6, [r1, #8]
 800da56:	461f      	mov	r7, r3
 800da58:	42be      	cmp	r6, r7
 800da5a:	680b      	ldr	r3, [r1, #0]
 800da5c:	4682      	mov	sl, r0
 800da5e:	460c      	mov	r4, r1
 800da60:	4690      	mov	r8, r2
 800da62:	d82c      	bhi.n	800dabe <__ssputs_r+0x6e>
 800da64:	898a      	ldrh	r2, [r1, #12]
 800da66:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800da6a:	d026      	beq.n	800daba <__ssputs_r+0x6a>
 800da6c:	6965      	ldr	r5, [r4, #20]
 800da6e:	6909      	ldr	r1, [r1, #16]
 800da70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800da74:	eba3 0901 	sub.w	r9, r3, r1
 800da78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800da7c:	1c7b      	adds	r3, r7, #1
 800da7e:	444b      	add	r3, r9
 800da80:	106d      	asrs	r5, r5, #1
 800da82:	429d      	cmp	r5, r3
 800da84:	bf38      	it	cc
 800da86:	461d      	movcc	r5, r3
 800da88:	0553      	lsls	r3, r2, #21
 800da8a:	d527      	bpl.n	800dadc <__ssputs_r+0x8c>
 800da8c:	4629      	mov	r1, r5
 800da8e:	f7ff ff53 	bl	800d938 <_malloc_r>
 800da92:	4606      	mov	r6, r0
 800da94:	b360      	cbz	r0, 800daf0 <__ssputs_r+0xa0>
 800da96:	6921      	ldr	r1, [r4, #16]
 800da98:	464a      	mov	r2, r9
 800da9a:	f7ff fed3 	bl	800d844 <memcpy>
 800da9e:	89a3      	ldrh	r3, [r4, #12]
 800daa0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800daa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800daa8:	81a3      	strh	r3, [r4, #12]
 800daaa:	6126      	str	r6, [r4, #16]
 800daac:	6165      	str	r5, [r4, #20]
 800daae:	444e      	add	r6, r9
 800dab0:	eba5 0509 	sub.w	r5, r5, r9
 800dab4:	6026      	str	r6, [r4, #0]
 800dab6:	60a5      	str	r5, [r4, #8]
 800dab8:	463e      	mov	r6, r7
 800daba:	42be      	cmp	r6, r7
 800dabc:	d900      	bls.n	800dac0 <__ssputs_r+0x70>
 800dabe:	463e      	mov	r6, r7
 800dac0:	6820      	ldr	r0, [r4, #0]
 800dac2:	4632      	mov	r2, r6
 800dac4:	4641      	mov	r1, r8
 800dac6:	f000 faab 	bl	800e020 <memmove>
 800daca:	68a3      	ldr	r3, [r4, #8]
 800dacc:	1b9b      	subs	r3, r3, r6
 800dace:	60a3      	str	r3, [r4, #8]
 800dad0:	6823      	ldr	r3, [r4, #0]
 800dad2:	4433      	add	r3, r6
 800dad4:	6023      	str	r3, [r4, #0]
 800dad6:	2000      	movs	r0, #0
 800dad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dadc:	462a      	mov	r2, r5
 800dade:	f000 fac9 	bl	800e074 <_realloc_r>
 800dae2:	4606      	mov	r6, r0
 800dae4:	2800      	cmp	r0, #0
 800dae6:	d1e0      	bne.n	800daaa <__ssputs_r+0x5a>
 800dae8:	6921      	ldr	r1, [r4, #16]
 800daea:	4650      	mov	r0, sl
 800daec:	f7ff feb8 	bl	800d860 <_free_r>
 800daf0:	230c      	movs	r3, #12
 800daf2:	f8ca 3000 	str.w	r3, [sl]
 800daf6:	89a3      	ldrh	r3, [r4, #12]
 800daf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dafc:	81a3      	strh	r3, [r4, #12]
 800dafe:	f04f 30ff 	mov.w	r0, #4294967295
 800db02:	e7e9      	b.n	800dad8 <__ssputs_r+0x88>

0800db04 <_svfiprintf_r>:
 800db04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db08:	4698      	mov	r8, r3
 800db0a:	898b      	ldrh	r3, [r1, #12]
 800db0c:	061b      	lsls	r3, r3, #24
 800db0e:	b09d      	sub	sp, #116	; 0x74
 800db10:	4607      	mov	r7, r0
 800db12:	460d      	mov	r5, r1
 800db14:	4614      	mov	r4, r2
 800db16:	d50e      	bpl.n	800db36 <_svfiprintf_r+0x32>
 800db18:	690b      	ldr	r3, [r1, #16]
 800db1a:	b963      	cbnz	r3, 800db36 <_svfiprintf_r+0x32>
 800db1c:	2140      	movs	r1, #64	; 0x40
 800db1e:	f7ff ff0b 	bl	800d938 <_malloc_r>
 800db22:	6028      	str	r0, [r5, #0]
 800db24:	6128      	str	r0, [r5, #16]
 800db26:	b920      	cbnz	r0, 800db32 <_svfiprintf_r+0x2e>
 800db28:	230c      	movs	r3, #12
 800db2a:	603b      	str	r3, [r7, #0]
 800db2c:	f04f 30ff 	mov.w	r0, #4294967295
 800db30:	e0d0      	b.n	800dcd4 <_svfiprintf_r+0x1d0>
 800db32:	2340      	movs	r3, #64	; 0x40
 800db34:	616b      	str	r3, [r5, #20]
 800db36:	2300      	movs	r3, #0
 800db38:	9309      	str	r3, [sp, #36]	; 0x24
 800db3a:	2320      	movs	r3, #32
 800db3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800db40:	f8cd 800c 	str.w	r8, [sp, #12]
 800db44:	2330      	movs	r3, #48	; 0x30
 800db46:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800dcec <_svfiprintf_r+0x1e8>
 800db4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800db4e:	f04f 0901 	mov.w	r9, #1
 800db52:	4623      	mov	r3, r4
 800db54:	469a      	mov	sl, r3
 800db56:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db5a:	b10a      	cbz	r2, 800db60 <_svfiprintf_r+0x5c>
 800db5c:	2a25      	cmp	r2, #37	; 0x25
 800db5e:	d1f9      	bne.n	800db54 <_svfiprintf_r+0x50>
 800db60:	ebba 0b04 	subs.w	fp, sl, r4
 800db64:	d00b      	beq.n	800db7e <_svfiprintf_r+0x7a>
 800db66:	465b      	mov	r3, fp
 800db68:	4622      	mov	r2, r4
 800db6a:	4629      	mov	r1, r5
 800db6c:	4638      	mov	r0, r7
 800db6e:	f7ff ff6f 	bl	800da50 <__ssputs_r>
 800db72:	3001      	adds	r0, #1
 800db74:	f000 80a9 	beq.w	800dcca <_svfiprintf_r+0x1c6>
 800db78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db7a:	445a      	add	r2, fp
 800db7c:	9209      	str	r2, [sp, #36]	; 0x24
 800db7e:	f89a 3000 	ldrb.w	r3, [sl]
 800db82:	2b00      	cmp	r3, #0
 800db84:	f000 80a1 	beq.w	800dcca <_svfiprintf_r+0x1c6>
 800db88:	2300      	movs	r3, #0
 800db8a:	f04f 32ff 	mov.w	r2, #4294967295
 800db8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db92:	f10a 0a01 	add.w	sl, sl, #1
 800db96:	9304      	str	r3, [sp, #16]
 800db98:	9307      	str	r3, [sp, #28]
 800db9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800db9e:	931a      	str	r3, [sp, #104]	; 0x68
 800dba0:	4654      	mov	r4, sl
 800dba2:	2205      	movs	r2, #5
 800dba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dba8:	4850      	ldr	r0, [pc, #320]	; (800dcec <_svfiprintf_r+0x1e8>)
 800dbaa:	f7f2 fb31 	bl	8000210 <memchr>
 800dbae:	9a04      	ldr	r2, [sp, #16]
 800dbb0:	b9d8      	cbnz	r0, 800dbea <_svfiprintf_r+0xe6>
 800dbb2:	06d0      	lsls	r0, r2, #27
 800dbb4:	bf44      	itt	mi
 800dbb6:	2320      	movmi	r3, #32
 800dbb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dbbc:	0711      	lsls	r1, r2, #28
 800dbbe:	bf44      	itt	mi
 800dbc0:	232b      	movmi	r3, #43	; 0x2b
 800dbc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dbc6:	f89a 3000 	ldrb.w	r3, [sl]
 800dbca:	2b2a      	cmp	r3, #42	; 0x2a
 800dbcc:	d015      	beq.n	800dbfa <_svfiprintf_r+0xf6>
 800dbce:	9a07      	ldr	r2, [sp, #28]
 800dbd0:	4654      	mov	r4, sl
 800dbd2:	2000      	movs	r0, #0
 800dbd4:	f04f 0c0a 	mov.w	ip, #10
 800dbd8:	4621      	mov	r1, r4
 800dbda:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dbde:	3b30      	subs	r3, #48	; 0x30
 800dbe0:	2b09      	cmp	r3, #9
 800dbe2:	d94d      	bls.n	800dc80 <_svfiprintf_r+0x17c>
 800dbe4:	b1b0      	cbz	r0, 800dc14 <_svfiprintf_r+0x110>
 800dbe6:	9207      	str	r2, [sp, #28]
 800dbe8:	e014      	b.n	800dc14 <_svfiprintf_r+0x110>
 800dbea:	eba0 0308 	sub.w	r3, r0, r8
 800dbee:	fa09 f303 	lsl.w	r3, r9, r3
 800dbf2:	4313      	orrs	r3, r2
 800dbf4:	9304      	str	r3, [sp, #16]
 800dbf6:	46a2      	mov	sl, r4
 800dbf8:	e7d2      	b.n	800dba0 <_svfiprintf_r+0x9c>
 800dbfa:	9b03      	ldr	r3, [sp, #12]
 800dbfc:	1d19      	adds	r1, r3, #4
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	9103      	str	r1, [sp, #12]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	bfbb      	ittet	lt
 800dc06:	425b      	neglt	r3, r3
 800dc08:	f042 0202 	orrlt.w	r2, r2, #2
 800dc0c:	9307      	strge	r3, [sp, #28]
 800dc0e:	9307      	strlt	r3, [sp, #28]
 800dc10:	bfb8      	it	lt
 800dc12:	9204      	strlt	r2, [sp, #16]
 800dc14:	7823      	ldrb	r3, [r4, #0]
 800dc16:	2b2e      	cmp	r3, #46	; 0x2e
 800dc18:	d10c      	bne.n	800dc34 <_svfiprintf_r+0x130>
 800dc1a:	7863      	ldrb	r3, [r4, #1]
 800dc1c:	2b2a      	cmp	r3, #42	; 0x2a
 800dc1e:	d134      	bne.n	800dc8a <_svfiprintf_r+0x186>
 800dc20:	9b03      	ldr	r3, [sp, #12]
 800dc22:	1d1a      	adds	r2, r3, #4
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	9203      	str	r2, [sp, #12]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	bfb8      	it	lt
 800dc2c:	f04f 33ff 	movlt.w	r3, #4294967295
 800dc30:	3402      	adds	r4, #2
 800dc32:	9305      	str	r3, [sp, #20]
 800dc34:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800dcfc <_svfiprintf_r+0x1f8>
 800dc38:	7821      	ldrb	r1, [r4, #0]
 800dc3a:	2203      	movs	r2, #3
 800dc3c:	4650      	mov	r0, sl
 800dc3e:	f7f2 fae7 	bl	8000210 <memchr>
 800dc42:	b138      	cbz	r0, 800dc54 <_svfiprintf_r+0x150>
 800dc44:	9b04      	ldr	r3, [sp, #16]
 800dc46:	eba0 000a 	sub.w	r0, r0, sl
 800dc4a:	2240      	movs	r2, #64	; 0x40
 800dc4c:	4082      	lsls	r2, r0
 800dc4e:	4313      	orrs	r3, r2
 800dc50:	3401      	adds	r4, #1
 800dc52:	9304      	str	r3, [sp, #16]
 800dc54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc58:	4825      	ldr	r0, [pc, #148]	; (800dcf0 <_svfiprintf_r+0x1ec>)
 800dc5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dc5e:	2206      	movs	r2, #6
 800dc60:	f7f2 fad6 	bl	8000210 <memchr>
 800dc64:	2800      	cmp	r0, #0
 800dc66:	d038      	beq.n	800dcda <_svfiprintf_r+0x1d6>
 800dc68:	4b22      	ldr	r3, [pc, #136]	; (800dcf4 <_svfiprintf_r+0x1f0>)
 800dc6a:	bb1b      	cbnz	r3, 800dcb4 <_svfiprintf_r+0x1b0>
 800dc6c:	9b03      	ldr	r3, [sp, #12]
 800dc6e:	3307      	adds	r3, #7
 800dc70:	f023 0307 	bic.w	r3, r3, #7
 800dc74:	3308      	adds	r3, #8
 800dc76:	9303      	str	r3, [sp, #12]
 800dc78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc7a:	4433      	add	r3, r6
 800dc7c:	9309      	str	r3, [sp, #36]	; 0x24
 800dc7e:	e768      	b.n	800db52 <_svfiprintf_r+0x4e>
 800dc80:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc84:	460c      	mov	r4, r1
 800dc86:	2001      	movs	r0, #1
 800dc88:	e7a6      	b.n	800dbd8 <_svfiprintf_r+0xd4>
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	3401      	adds	r4, #1
 800dc8e:	9305      	str	r3, [sp, #20]
 800dc90:	4619      	mov	r1, r3
 800dc92:	f04f 0c0a 	mov.w	ip, #10
 800dc96:	4620      	mov	r0, r4
 800dc98:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc9c:	3a30      	subs	r2, #48	; 0x30
 800dc9e:	2a09      	cmp	r2, #9
 800dca0:	d903      	bls.n	800dcaa <_svfiprintf_r+0x1a6>
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d0c6      	beq.n	800dc34 <_svfiprintf_r+0x130>
 800dca6:	9105      	str	r1, [sp, #20]
 800dca8:	e7c4      	b.n	800dc34 <_svfiprintf_r+0x130>
 800dcaa:	fb0c 2101 	mla	r1, ip, r1, r2
 800dcae:	4604      	mov	r4, r0
 800dcb0:	2301      	movs	r3, #1
 800dcb2:	e7f0      	b.n	800dc96 <_svfiprintf_r+0x192>
 800dcb4:	ab03      	add	r3, sp, #12
 800dcb6:	9300      	str	r3, [sp, #0]
 800dcb8:	462a      	mov	r2, r5
 800dcba:	4b0f      	ldr	r3, [pc, #60]	; (800dcf8 <_svfiprintf_r+0x1f4>)
 800dcbc:	a904      	add	r1, sp, #16
 800dcbe:	4638      	mov	r0, r7
 800dcc0:	f3af 8000 	nop.w
 800dcc4:	1c42      	adds	r2, r0, #1
 800dcc6:	4606      	mov	r6, r0
 800dcc8:	d1d6      	bne.n	800dc78 <_svfiprintf_r+0x174>
 800dcca:	89ab      	ldrh	r3, [r5, #12]
 800dccc:	065b      	lsls	r3, r3, #25
 800dcce:	f53f af2d 	bmi.w	800db2c <_svfiprintf_r+0x28>
 800dcd2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dcd4:	b01d      	add	sp, #116	; 0x74
 800dcd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcda:	ab03      	add	r3, sp, #12
 800dcdc:	9300      	str	r3, [sp, #0]
 800dcde:	462a      	mov	r2, r5
 800dce0:	4b05      	ldr	r3, [pc, #20]	; (800dcf8 <_svfiprintf_r+0x1f4>)
 800dce2:	a904      	add	r1, sp, #16
 800dce4:	4638      	mov	r0, r7
 800dce6:	f000 f879 	bl	800dddc <_printf_i>
 800dcea:	e7eb      	b.n	800dcc4 <_svfiprintf_r+0x1c0>
 800dcec:	0800f4ce 	.word	0x0800f4ce
 800dcf0:	0800f4d8 	.word	0x0800f4d8
 800dcf4:	00000000 	.word	0x00000000
 800dcf8:	0800da51 	.word	0x0800da51
 800dcfc:	0800f4d4 	.word	0x0800f4d4

0800dd00 <_printf_common>:
 800dd00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd04:	4616      	mov	r6, r2
 800dd06:	4699      	mov	r9, r3
 800dd08:	688a      	ldr	r2, [r1, #8]
 800dd0a:	690b      	ldr	r3, [r1, #16]
 800dd0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dd10:	4293      	cmp	r3, r2
 800dd12:	bfb8      	it	lt
 800dd14:	4613      	movlt	r3, r2
 800dd16:	6033      	str	r3, [r6, #0]
 800dd18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dd1c:	4607      	mov	r7, r0
 800dd1e:	460c      	mov	r4, r1
 800dd20:	b10a      	cbz	r2, 800dd26 <_printf_common+0x26>
 800dd22:	3301      	adds	r3, #1
 800dd24:	6033      	str	r3, [r6, #0]
 800dd26:	6823      	ldr	r3, [r4, #0]
 800dd28:	0699      	lsls	r1, r3, #26
 800dd2a:	bf42      	ittt	mi
 800dd2c:	6833      	ldrmi	r3, [r6, #0]
 800dd2e:	3302      	addmi	r3, #2
 800dd30:	6033      	strmi	r3, [r6, #0]
 800dd32:	6825      	ldr	r5, [r4, #0]
 800dd34:	f015 0506 	ands.w	r5, r5, #6
 800dd38:	d106      	bne.n	800dd48 <_printf_common+0x48>
 800dd3a:	f104 0a19 	add.w	sl, r4, #25
 800dd3e:	68e3      	ldr	r3, [r4, #12]
 800dd40:	6832      	ldr	r2, [r6, #0]
 800dd42:	1a9b      	subs	r3, r3, r2
 800dd44:	42ab      	cmp	r3, r5
 800dd46:	dc26      	bgt.n	800dd96 <_printf_common+0x96>
 800dd48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dd4c:	1e13      	subs	r3, r2, #0
 800dd4e:	6822      	ldr	r2, [r4, #0]
 800dd50:	bf18      	it	ne
 800dd52:	2301      	movne	r3, #1
 800dd54:	0692      	lsls	r2, r2, #26
 800dd56:	d42b      	bmi.n	800ddb0 <_printf_common+0xb0>
 800dd58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dd5c:	4649      	mov	r1, r9
 800dd5e:	4638      	mov	r0, r7
 800dd60:	47c0      	blx	r8
 800dd62:	3001      	adds	r0, #1
 800dd64:	d01e      	beq.n	800dda4 <_printf_common+0xa4>
 800dd66:	6823      	ldr	r3, [r4, #0]
 800dd68:	6922      	ldr	r2, [r4, #16]
 800dd6a:	f003 0306 	and.w	r3, r3, #6
 800dd6e:	2b04      	cmp	r3, #4
 800dd70:	bf02      	ittt	eq
 800dd72:	68e5      	ldreq	r5, [r4, #12]
 800dd74:	6833      	ldreq	r3, [r6, #0]
 800dd76:	1aed      	subeq	r5, r5, r3
 800dd78:	68a3      	ldr	r3, [r4, #8]
 800dd7a:	bf0c      	ite	eq
 800dd7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dd80:	2500      	movne	r5, #0
 800dd82:	4293      	cmp	r3, r2
 800dd84:	bfc4      	itt	gt
 800dd86:	1a9b      	subgt	r3, r3, r2
 800dd88:	18ed      	addgt	r5, r5, r3
 800dd8a:	2600      	movs	r6, #0
 800dd8c:	341a      	adds	r4, #26
 800dd8e:	42b5      	cmp	r5, r6
 800dd90:	d11a      	bne.n	800ddc8 <_printf_common+0xc8>
 800dd92:	2000      	movs	r0, #0
 800dd94:	e008      	b.n	800dda8 <_printf_common+0xa8>
 800dd96:	2301      	movs	r3, #1
 800dd98:	4652      	mov	r2, sl
 800dd9a:	4649      	mov	r1, r9
 800dd9c:	4638      	mov	r0, r7
 800dd9e:	47c0      	blx	r8
 800dda0:	3001      	adds	r0, #1
 800dda2:	d103      	bne.n	800ddac <_printf_common+0xac>
 800dda4:	f04f 30ff 	mov.w	r0, #4294967295
 800dda8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddac:	3501      	adds	r5, #1
 800ddae:	e7c6      	b.n	800dd3e <_printf_common+0x3e>
 800ddb0:	18e1      	adds	r1, r4, r3
 800ddb2:	1c5a      	adds	r2, r3, #1
 800ddb4:	2030      	movs	r0, #48	; 0x30
 800ddb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ddba:	4422      	add	r2, r4
 800ddbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ddc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ddc4:	3302      	adds	r3, #2
 800ddc6:	e7c7      	b.n	800dd58 <_printf_common+0x58>
 800ddc8:	2301      	movs	r3, #1
 800ddca:	4622      	mov	r2, r4
 800ddcc:	4649      	mov	r1, r9
 800ddce:	4638      	mov	r0, r7
 800ddd0:	47c0      	blx	r8
 800ddd2:	3001      	adds	r0, #1
 800ddd4:	d0e6      	beq.n	800dda4 <_printf_common+0xa4>
 800ddd6:	3601      	adds	r6, #1
 800ddd8:	e7d9      	b.n	800dd8e <_printf_common+0x8e>
	...

0800dddc <_printf_i>:
 800dddc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dde0:	7e0f      	ldrb	r7, [r1, #24]
 800dde2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dde4:	2f78      	cmp	r7, #120	; 0x78
 800dde6:	4691      	mov	r9, r2
 800dde8:	4680      	mov	r8, r0
 800ddea:	460c      	mov	r4, r1
 800ddec:	469a      	mov	sl, r3
 800ddee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ddf2:	d807      	bhi.n	800de04 <_printf_i+0x28>
 800ddf4:	2f62      	cmp	r7, #98	; 0x62
 800ddf6:	d80a      	bhi.n	800de0e <_printf_i+0x32>
 800ddf8:	2f00      	cmp	r7, #0
 800ddfa:	f000 80d4 	beq.w	800dfa6 <_printf_i+0x1ca>
 800ddfe:	2f58      	cmp	r7, #88	; 0x58
 800de00:	f000 80c0 	beq.w	800df84 <_printf_i+0x1a8>
 800de04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800de08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800de0c:	e03a      	b.n	800de84 <_printf_i+0xa8>
 800de0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800de12:	2b15      	cmp	r3, #21
 800de14:	d8f6      	bhi.n	800de04 <_printf_i+0x28>
 800de16:	a101      	add	r1, pc, #4	; (adr r1, 800de1c <_printf_i+0x40>)
 800de18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800de1c:	0800de75 	.word	0x0800de75
 800de20:	0800de89 	.word	0x0800de89
 800de24:	0800de05 	.word	0x0800de05
 800de28:	0800de05 	.word	0x0800de05
 800de2c:	0800de05 	.word	0x0800de05
 800de30:	0800de05 	.word	0x0800de05
 800de34:	0800de89 	.word	0x0800de89
 800de38:	0800de05 	.word	0x0800de05
 800de3c:	0800de05 	.word	0x0800de05
 800de40:	0800de05 	.word	0x0800de05
 800de44:	0800de05 	.word	0x0800de05
 800de48:	0800df8d 	.word	0x0800df8d
 800de4c:	0800deb5 	.word	0x0800deb5
 800de50:	0800df47 	.word	0x0800df47
 800de54:	0800de05 	.word	0x0800de05
 800de58:	0800de05 	.word	0x0800de05
 800de5c:	0800dfaf 	.word	0x0800dfaf
 800de60:	0800de05 	.word	0x0800de05
 800de64:	0800deb5 	.word	0x0800deb5
 800de68:	0800de05 	.word	0x0800de05
 800de6c:	0800de05 	.word	0x0800de05
 800de70:	0800df4f 	.word	0x0800df4f
 800de74:	682b      	ldr	r3, [r5, #0]
 800de76:	1d1a      	adds	r2, r3, #4
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	602a      	str	r2, [r5, #0]
 800de7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800de80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800de84:	2301      	movs	r3, #1
 800de86:	e09f      	b.n	800dfc8 <_printf_i+0x1ec>
 800de88:	6820      	ldr	r0, [r4, #0]
 800de8a:	682b      	ldr	r3, [r5, #0]
 800de8c:	0607      	lsls	r7, r0, #24
 800de8e:	f103 0104 	add.w	r1, r3, #4
 800de92:	6029      	str	r1, [r5, #0]
 800de94:	d501      	bpl.n	800de9a <_printf_i+0xbe>
 800de96:	681e      	ldr	r6, [r3, #0]
 800de98:	e003      	b.n	800dea2 <_printf_i+0xc6>
 800de9a:	0646      	lsls	r6, r0, #25
 800de9c:	d5fb      	bpl.n	800de96 <_printf_i+0xba>
 800de9e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800dea2:	2e00      	cmp	r6, #0
 800dea4:	da03      	bge.n	800deae <_printf_i+0xd2>
 800dea6:	232d      	movs	r3, #45	; 0x2d
 800dea8:	4276      	negs	r6, r6
 800deaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800deae:	485a      	ldr	r0, [pc, #360]	; (800e018 <_printf_i+0x23c>)
 800deb0:	230a      	movs	r3, #10
 800deb2:	e012      	b.n	800deda <_printf_i+0xfe>
 800deb4:	682b      	ldr	r3, [r5, #0]
 800deb6:	6820      	ldr	r0, [r4, #0]
 800deb8:	1d19      	adds	r1, r3, #4
 800deba:	6029      	str	r1, [r5, #0]
 800debc:	0605      	lsls	r5, r0, #24
 800debe:	d501      	bpl.n	800dec4 <_printf_i+0xe8>
 800dec0:	681e      	ldr	r6, [r3, #0]
 800dec2:	e002      	b.n	800deca <_printf_i+0xee>
 800dec4:	0641      	lsls	r1, r0, #25
 800dec6:	d5fb      	bpl.n	800dec0 <_printf_i+0xe4>
 800dec8:	881e      	ldrh	r6, [r3, #0]
 800deca:	4853      	ldr	r0, [pc, #332]	; (800e018 <_printf_i+0x23c>)
 800decc:	2f6f      	cmp	r7, #111	; 0x6f
 800dece:	bf0c      	ite	eq
 800ded0:	2308      	moveq	r3, #8
 800ded2:	230a      	movne	r3, #10
 800ded4:	2100      	movs	r1, #0
 800ded6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800deda:	6865      	ldr	r5, [r4, #4]
 800dedc:	60a5      	str	r5, [r4, #8]
 800dede:	2d00      	cmp	r5, #0
 800dee0:	bfa2      	ittt	ge
 800dee2:	6821      	ldrge	r1, [r4, #0]
 800dee4:	f021 0104 	bicge.w	r1, r1, #4
 800dee8:	6021      	strge	r1, [r4, #0]
 800deea:	b90e      	cbnz	r6, 800def0 <_printf_i+0x114>
 800deec:	2d00      	cmp	r5, #0
 800deee:	d04b      	beq.n	800df88 <_printf_i+0x1ac>
 800def0:	4615      	mov	r5, r2
 800def2:	fbb6 f1f3 	udiv	r1, r6, r3
 800def6:	fb03 6711 	mls	r7, r3, r1, r6
 800defa:	5dc7      	ldrb	r7, [r0, r7]
 800defc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800df00:	4637      	mov	r7, r6
 800df02:	42bb      	cmp	r3, r7
 800df04:	460e      	mov	r6, r1
 800df06:	d9f4      	bls.n	800def2 <_printf_i+0x116>
 800df08:	2b08      	cmp	r3, #8
 800df0a:	d10b      	bne.n	800df24 <_printf_i+0x148>
 800df0c:	6823      	ldr	r3, [r4, #0]
 800df0e:	07de      	lsls	r6, r3, #31
 800df10:	d508      	bpl.n	800df24 <_printf_i+0x148>
 800df12:	6923      	ldr	r3, [r4, #16]
 800df14:	6861      	ldr	r1, [r4, #4]
 800df16:	4299      	cmp	r1, r3
 800df18:	bfde      	ittt	le
 800df1a:	2330      	movle	r3, #48	; 0x30
 800df1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800df20:	f105 35ff 	addle.w	r5, r5, #4294967295
 800df24:	1b52      	subs	r2, r2, r5
 800df26:	6122      	str	r2, [r4, #16]
 800df28:	f8cd a000 	str.w	sl, [sp]
 800df2c:	464b      	mov	r3, r9
 800df2e:	aa03      	add	r2, sp, #12
 800df30:	4621      	mov	r1, r4
 800df32:	4640      	mov	r0, r8
 800df34:	f7ff fee4 	bl	800dd00 <_printf_common>
 800df38:	3001      	adds	r0, #1
 800df3a:	d14a      	bne.n	800dfd2 <_printf_i+0x1f6>
 800df3c:	f04f 30ff 	mov.w	r0, #4294967295
 800df40:	b004      	add	sp, #16
 800df42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df46:	6823      	ldr	r3, [r4, #0]
 800df48:	f043 0320 	orr.w	r3, r3, #32
 800df4c:	6023      	str	r3, [r4, #0]
 800df4e:	4833      	ldr	r0, [pc, #204]	; (800e01c <_printf_i+0x240>)
 800df50:	2778      	movs	r7, #120	; 0x78
 800df52:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800df56:	6823      	ldr	r3, [r4, #0]
 800df58:	6829      	ldr	r1, [r5, #0]
 800df5a:	061f      	lsls	r7, r3, #24
 800df5c:	f851 6b04 	ldr.w	r6, [r1], #4
 800df60:	d402      	bmi.n	800df68 <_printf_i+0x18c>
 800df62:	065f      	lsls	r7, r3, #25
 800df64:	bf48      	it	mi
 800df66:	b2b6      	uxthmi	r6, r6
 800df68:	07df      	lsls	r7, r3, #31
 800df6a:	bf48      	it	mi
 800df6c:	f043 0320 	orrmi.w	r3, r3, #32
 800df70:	6029      	str	r1, [r5, #0]
 800df72:	bf48      	it	mi
 800df74:	6023      	strmi	r3, [r4, #0]
 800df76:	b91e      	cbnz	r6, 800df80 <_printf_i+0x1a4>
 800df78:	6823      	ldr	r3, [r4, #0]
 800df7a:	f023 0320 	bic.w	r3, r3, #32
 800df7e:	6023      	str	r3, [r4, #0]
 800df80:	2310      	movs	r3, #16
 800df82:	e7a7      	b.n	800ded4 <_printf_i+0xf8>
 800df84:	4824      	ldr	r0, [pc, #144]	; (800e018 <_printf_i+0x23c>)
 800df86:	e7e4      	b.n	800df52 <_printf_i+0x176>
 800df88:	4615      	mov	r5, r2
 800df8a:	e7bd      	b.n	800df08 <_printf_i+0x12c>
 800df8c:	682b      	ldr	r3, [r5, #0]
 800df8e:	6826      	ldr	r6, [r4, #0]
 800df90:	6961      	ldr	r1, [r4, #20]
 800df92:	1d18      	adds	r0, r3, #4
 800df94:	6028      	str	r0, [r5, #0]
 800df96:	0635      	lsls	r5, r6, #24
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	d501      	bpl.n	800dfa0 <_printf_i+0x1c4>
 800df9c:	6019      	str	r1, [r3, #0]
 800df9e:	e002      	b.n	800dfa6 <_printf_i+0x1ca>
 800dfa0:	0670      	lsls	r0, r6, #25
 800dfa2:	d5fb      	bpl.n	800df9c <_printf_i+0x1c0>
 800dfa4:	8019      	strh	r1, [r3, #0]
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	6123      	str	r3, [r4, #16]
 800dfaa:	4615      	mov	r5, r2
 800dfac:	e7bc      	b.n	800df28 <_printf_i+0x14c>
 800dfae:	682b      	ldr	r3, [r5, #0]
 800dfb0:	1d1a      	adds	r2, r3, #4
 800dfb2:	602a      	str	r2, [r5, #0]
 800dfb4:	681d      	ldr	r5, [r3, #0]
 800dfb6:	6862      	ldr	r2, [r4, #4]
 800dfb8:	2100      	movs	r1, #0
 800dfba:	4628      	mov	r0, r5
 800dfbc:	f7f2 f928 	bl	8000210 <memchr>
 800dfc0:	b108      	cbz	r0, 800dfc6 <_printf_i+0x1ea>
 800dfc2:	1b40      	subs	r0, r0, r5
 800dfc4:	6060      	str	r0, [r4, #4]
 800dfc6:	6863      	ldr	r3, [r4, #4]
 800dfc8:	6123      	str	r3, [r4, #16]
 800dfca:	2300      	movs	r3, #0
 800dfcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dfd0:	e7aa      	b.n	800df28 <_printf_i+0x14c>
 800dfd2:	6923      	ldr	r3, [r4, #16]
 800dfd4:	462a      	mov	r2, r5
 800dfd6:	4649      	mov	r1, r9
 800dfd8:	4640      	mov	r0, r8
 800dfda:	47d0      	blx	sl
 800dfdc:	3001      	adds	r0, #1
 800dfde:	d0ad      	beq.n	800df3c <_printf_i+0x160>
 800dfe0:	6823      	ldr	r3, [r4, #0]
 800dfe2:	079b      	lsls	r3, r3, #30
 800dfe4:	d413      	bmi.n	800e00e <_printf_i+0x232>
 800dfe6:	68e0      	ldr	r0, [r4, #12]
 800dfe8:	9b03      	ldr	r3, [sp, #12]
 800dfea:	4298      	cmp	r0, r3
 800dfec:	bfb8      	it	lt
 800dfee:	4618      	movlt	r0, r3
 800dff0:	e7a6      	b.n	800df40 <_printf_i+0x164>
 800dff2:	2301      	movs	r3, #1
 800dff4:	4632      	mov	r2, r6
 800dff6:	4649      	mov	r1, r9
 800dff8:	4640      	mov	r0, r8
 800dffa:	47d0      	blx	sl
 800dffc:	3001      	adds	r0, #1
 800dffe:	d09d      	beq.n	800df3c <_printf_i+0x160>
 800e000:	3501      	adds	r5, #1
 800e002:	68e3      	ldr	r3, [r4, #12]
 800e004:	9903      	ldr	r1, [sp, #12]
 800e006:	1a5b      	subs	r3, r3, r1
 800e008:	42ab      	cmp	r3, r5
 800e00a:	dcf2      	bgt.n	800dff2 <_printf_i+0x216>
 800e00c:	e7eb      	b.n	800dfe6 <_printf_i+0x20a>
 800e00e:	2500      	movs	r5, #0
 800e010:	f104 0619 	add.w	r6, r4, #25
 800e014:	e7f5      	b.n	800e002 <_printf_i+0x226>
 800e016:	bf00      	nop
 800e018:	0800f4df 	.word	0x0800f4df
 800e01c:	0800f4f0 	.word	0x0800f4f0

0800e020 <memmove>:
 800e020:	4288      	cmp	r0, r1
 800e022:	b510      	push	{r4, lr}
 800e024:	eb01 0402 	add.w	r4, r1, r2
 800e028:	d902      	bls.n	800e030 <memmove+0x10>
 800e02a:	4284      	cmp	r4, r0
 800e02c:	4623      	mov	r3, r4
 800e02e:	d807      	bhi.n	800e040 <memmove+0x20>
 800e030:	1e43      	subs	r3, r0, #1
 800e032:	42a1      	cmp	r1, r4
 800e034:	d008      	beq.n	800e048 <memmove+0x28>
 800e036:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e03a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e03e:	e7f8      	b.n	800e032 <memmove+0x12>
 800e040:	4402      	add	r2, r0
 800e042:	4601      	mov	r1, r0
 800e044:	428a      	cmp	r2, r1
 800e046:	d100      	bne.n	800e04a <memmove+0x2a>
 800e048:	bd10      	pop	{r4, pc}
 800e04a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e04e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e052:	e7f7      	b.n	800e044 <memmove+0x24>

0800e054 <_sbrk_r>:
 800e054:	b538      	push	{r3, r4, r5, lr}
 800e056:	4d06      	ldr	r5, [pc, #24]	; (800e070 <_sbrk_r+0x1c>)
 800e058:	2300      	movs	r3, #0
 800e05a:	4604      	mov	r4, r0
 800e05c:	4608      	mov	r0, r1
 800e05e:	602b      	str	r3, [r5, #0]
 800e060:	f7f3 fb5c 	bl	800171c <_sbrk>
 800e064:	1c43      	adds	r3, r0, #1
 800e066:	d102      	bne.n	800e06e <_sbrk_r+0x1a>
 800e068:	682b      	ldr	r3, [r5, #0]
 800e06a:	b103      	cbz	r3, 800e06e <_sbrk_r+0x1a>
 800e06c:	6023      	str	r3, [r4, #0]
 800e06e:	bd38      	pop	{r3, r4, r5, pc}
 800e070:	20005528 	.word	0x20005528

0800e074 <_realloc_r>:
 800e074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e078:	4680      	mov	r8, r0
 800e07a:	4614      	mov	r4, r2
 800e07c:	460e      	mov	r6, r1
 800e07e:	b921      	cbnz	r1, 800e08a <_realloc_r+0x16>
 800e080:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e084:	4611      	mov	r1, r2
 800e086:	f7ff bc57 	b.w	800d938 <_malloc_r>
 800e08a:	b92a      	cbnz	r2, 800e098 <_realloc_r+0x24>
 800e08c:	f7ff fbe8 	bl	800d860 <_free_r>
 800e090:	4625      	mov	r5, r4
 800e092:	4628      	mov	r0, r5
 800e094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e098:	f000 f81b 	bl	800e0d2 <_malloc_usable_size_r>
 800e09c:	4284      	cmp	r4, r0
 800e09e:	4607      	mov	r7, r0
 800e0a0:	d802      	bhi.n	800e0a8 <_realloc_r+0x34>
 800e0a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e0a6:	d812      	bhi.n	800e0ce <_realloc_r+0x5a>
 800e0a8:	4621      	mov	r1, r4
 800e0aa:	4640      	mov	r0, r8
 800e0ac:	f7ff fc44 	bl	800d938 <_malloc_r>
 800e0b0:	4605      	mov	r5, r0
 800e0b2:	2800      	cmp	r0, #0
 800e0b4:	d0ed      	beq.n	800e092 <_realloc_r+0x1e>
 800e0b6:	42bc      	cmp	r4, r7
 800e0b8:	4622      	mov	r2, r4
 800e0ba:	4631      	mov	r1, r6
 800e0bc:	bf28      	it	cs
 800e0be:	463a      	movcs	r2, r7
 800e0c0:	f7ff fbc0 	bl	800d844 <memcpy>
 800e0c4:	4631      	mov	r1, r6
 800e0c6:	4640      	mov	r0, r8
 800e0c8:	f7ff fbca 	bl	800d860 <_free_r>
 800e0cc:	e7e1      	b.n	800e092 <_realloc_r+0x1e>
 800e0ce:	4635      	mov	r5, r6
 800e0d0:	e7df      	b.n	800e092 <_realloc_r+0x1e>

0800e0d2 <_malloc_usable_size_r>:
 800e0d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0d6:	1f18      	subs	r0, r3, #4
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	bfbc      	itt	lt
 800e0dc:	580b      	ldrlt	r3, [r1, r0]
 800e0de:	18c0      	addlt	r0, r0, r3
 800e0e0:	4770      	bx	lr

0800e0e2 <atan2>:
 800e0e2:	f000 b87d 	b.w	800e1e0 <__ieee754_atan2>
	...

0800e0e8 <pow>:
 800e0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0ea:	ed2d 8b02 	vpush	{d8}
 800e0ee:	eeb0 8a40 	vmov.f32	s16, s0
 800e0f2:	eef0 8a60 	vmov.f32	s17, s1
 800e0f6:	ec55 4b11 	vmov	r4, r5, d1
 800e0fa:	f000 f939 	bl	800e370 <__ieee754_pow>
 800e0fe:	4622      	mov	r2, r4
 800e100:	462b      	mov	r3, r5
 800e102:	4620      	mov	r0, r4
 800e104:	4629      	mov	r1, r5
 800e106:	ec57 6b10 	vmov	r6, r7, d0
 800e10a:	f7f2 fd27 	bl	8000b5c <__aeabi_dcmpun>
 800e10e:	2800      	cmp	r0, #0
 800e110:	d13b      	bne.n	800e18a <pow+0xa2>
 800e112:	ec51 0b18 	vmov	r0, r1, d8
 800e116:	2200      	movs	r2, #0
 800e118:	2300      	movs	r3, #0
 800e11a:	f7f2 fced 	bl	8000af8 <__aeabi_dcmpeq>
 800e11e:	b1b8      	cbz	r0, 800e150 <pow+0x68>
 800e120:	2200      	movs	r2, #0
 800e122:	2300      	movs	r3, #0
 800e124:	4620      	mov	r0, r4
 800e126:	4629      	mov	r1, r5
 800e128:	f7f2 fce6 	bl	8000af8 <__aeabi_dcmpeq>
 800e12c:	2800      	cmp	r0, #0
 800e12e:	d146      	bne.n	800e1be <pow+0xd6>
 800e130:	ec45 4b10 	vmov	d0, r4, r5
 800e134:	f000 f848 	bl	800e1c8 <finite>
 800e138:	b338      	cbz	r0, 800e18a <pow+0xa2>
 800e13a:	2200      	movs	r2, #0
 800e13c:	2300      	movs	r3, #0
 800e13e:	4620      	mov	r0, r4
 800e140:	4629      	mov	r1, r5
 800e142:	f7f2 fce3 	bl	8000b0c <__aeabi_dcmplt>
 800e146:	b300      	cbz	r0, 800e18a <pow+0xa2>
 800e148:	f7ff fb50 	bl	800d7ec <__errno>
 800e14c:	2322      	movs	r3, #34	; 0x22
 800e14e:	e01b      	b.n	800e188 <pow+0xa0>
 800e150:	ec47 6b10 	vmov	d0, r6, r7
 800e154:	f000 f838 	bl	800e1c8 <finite>
 800e158:	b9e0      	cbnz	r0, 800e194 <pow+0xac>
 800e15a:	eeb0 0a48 	vmov.f32	s0, s16
 800e15e:	eef0 0a68 	vmov.f32	s1, s17
 800e162:	f000 f831 	bl	800e1c8 <finite>
 800e166:	b1a8      	cbz	r0, 800e194 <pow+0xac>
 800e168:	ec45 4b10 	vmov	d0, r4, r5
 800e16c:	f000 f82c 	bl	800e1c8 <finite>
 800e170:	b180      	cbz	r0, 800e194 <pow+0xac>
 800e172:	4632      	mov	r2, r6
 800e174:	463b      	mov	r3, r7
 800e176:	4630      	mov	r0, r6
 800e178:	4639      	mov	r1, r7
 800e17a:	f7f2 fcef 	bl	8000b5c <__aeabi_dcmpun>
 800e17e:	2800      	cmp	r0, #0
 800e180:	d0e2      	beq.n	800e148 <pow+0x60>
 800e182:	f7ff fb33 	bl	800d7ec <__errno>
 800e186:	2321      	movs	r3, #33	; 0x21
 800e188:	6003      	str	r3, [r0, #0]
 800e18a:	ecbd 8b02 	vpop	{d8}
 800e18e:	ec47 6b10 	vmov	d0, r6, r7
 800e192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e194:	2200      	movs	r2, #0
 800e196:	2300      	movs	r3, #0
 800e198:	4630      	mov	r0, r6
 800e19a:	4639      	mov	r1, r7
 800e19c:	f7f2 fcac 	bl	8000af8 <__aeabi_dcmpeq>
 800e1a0:	2800      	cmp	r0, #0
 800e1a2:	d0f2      	beq.n	800e18a <pow+0xa2>
 800e1a4:	eeb0 0a48 	vmov.f32	s0, s16
 800e1a8:	eef0 0a68 	vmov.f32	s1, s17
 800e1ac:	f000 f80c 	bl	800e1c8 <finite>
 800e1b0:	2800      	cmp	r0, #0
 800e1b2:	d0ea      	beq.n	800e18a <pow+0xa2>
 800e1b4:	ec45 4b10 	vmov	d0, r4, r5
 800e1b8:	f000 f806 	bl	800e1c8 <finite>
 800e1bc:	e7c3      	b.n	800e146 <pow+0x5e>
 800e1be:	4f01      	ldr	r7, [pc, #4]	; (800e1c4 <pow+0xdc>)
 800e1c0:	2600      	movs	r6, #0
 800e1c2:	e7e2      	b.n	800e18a <pow+0xa2>
 800e1c4:	3ff00000 	.word	0x3ff00000

0800e1c8 <finite>:
 800e1c8:	b082      	sub	sp, #8
 800e1ca:	ed8d 0b00 	vstr	d0, [sp]
 800e1ce:	9801      	ldr	r0, [sp, #4]
 800e1d0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800e1d4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e1d8:	0fc0      	lsrs	r0, r0, #31
 800e1da:	b002      	add	sp, #8
 800e1dc:	4770      	bx	lr
	...

0800e1e0 <__ieee754_atan2>:
 800e1e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1e4:	ec57 6b11 	vmov	r6, r7, d1
 800e1e8:	4273      	negs	r3, r6
 800e1ea:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800e368 <__ieee754_atan2+0x188>
 800e1ee:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800e1f2:	4333      	orrs	r3, r6
 800e1f4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800e1f8:	4543      	cmp	r3, r8
 800e1fa:	ec51 0b10 	vmov	r0, r1, d0
 800e1fe:	ee11 5a10 	vmov	r5, s2
 800e202:	d80a      	bhi.n	800e21a <__ieee754_atan2+0x3a>
 800e204:	4244      	negs	r4, r0
 800e206:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e20a:	4304      	orrs	r4, r0
 800e20c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800e210:	4544      	cmp	r4, r8
 800e212:	ee10 9a10 	vmov	r9, s0
 800e216:	468e      	mov	lr, r1
 800e218:	d907      	bls.n	800e22a <__ieee754_atan2+0x4a>
 800e21a:	4632      	mov	r2, r6
 800e21c:	463b      	mov	r3, r7
 800e21e:	f7f2 f84d 	bl	80002bc <__adddf3>
 800e222:	ec41 0b10 	vmov	d0, r0, r1
 800e226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e22a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800e22e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e232:	4334      	orrs	r4, r6
 800e234:	d103      	bne.n	800e23e <__ieee754_atan2+0x5e>
 800e236:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e23a:	f000 bdc5 	b.w	800edc8 <atan>
 800e23e:	17bc      	asrs	r4, r7, #30
 800e240:	f004 0402 	and.w	r4, r4, #2
 800e244:	ea53 0909 	orrs.w	r9, r3, r9
 800e248:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800e24c:	d107      	bne.n	800e25e <__ieee754_atan2+0x7e>
 800e24e:	2c02      	cmp	r4, #2
 800e250:	d05f      	beq.n	800e312 <__ieee754_atan2+0x132>
 800e252:	2c03      	cmp	r4, #3
 800e254:	d1e5      	bne.n	800e222 <__ieee754_atan2+0x42>
 800e256:	a140      	add	r1, pc, #256	; (adr r1, 800e358 <__ieee754_atan2+0x178>)
 800e258:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e25c:	e7e1      	b.n	800e222 <__ieee754_atan2+0x42>
 800e25e:	4315      	orrs	r5, r2
 800e260:	d106      	bne.n	800e270 <__ieee754_atan2+0x90>
 800e262:	f1be 0f00 	cmp.w	lr, #0
 800e266:	da5f      	bge.n	800e328 <__ieee754_atan2+0x148>
 800e268:	a13d      	add	r1, pc, #244	; (adr r1, 800e360 <__ieee754_atan2+0x180>)
 800e26a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e26e:	e7d8      	b.n	800e222 <__ieee754_atan2+0x42>
 800e270:	4542      	cmp	r2, r8
 800e272:	d10f      	bne.n	800e294 <__ieee754_atan2+0xb4>
 800e274:	4293      	cmp	r3, r2
 800e276:	f104 34ff 	add.w	r4, r4, #4294967295
 800e27a:	d107      	bne.n	800e28c <__ieee754_atan2+0xac>
 800e27c:	2c02      	cmp	r4, #2
 800e27e:	d84c      	bhi.n	800e31a <__ieee754_atan2+0x13a>
 800e280:	4b33      	ldr	r3, [pc, #204]	; (800e350 <__ieee754_atan2+0x170>)
 800e282:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e286:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e28a:	e7ca      	b.n	800e222 <__ieee754_atan2+0x42>
 800e28c:	2c02      	cmp	r4, #2
 800e28e:	d848      	bhi.n	800e322 <__ieee754_atan2+0x142>
 800e290:	4b30      	ldr	r3, [pc, #192]	; (800e354 <__ieee754_atan2+0x174>)
 800e292:	e7f6      	b.n	800e282 <__ieee754_atan2+0xa2>
 800e294:	4543      	cmp	r3, r8
 800e296:	d0e4      	beq.n	800e262 <__ieee754_atan2+0x82>
 800e298:	1a9b      	subs	r3, r3, r2
 800e29a:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800e29e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e2a2:	da1e      	bge.n	800e2e2 <__ieee754_atan2+0x102>
 800e2a4:	2f00      	cmp	r7, #0
 800e2a6:	da01      	bge.n	800e2ac <__ieee754_atan2+0xcc>
 800e2a8:	323c      	adds	r2, #60	; 0x3c
 800e2aa:	db1e      	blt.n	800e2ea <__ieee754_atan2+0x10a>
 800e2ac:	4632      	mov	r2, r6
 800e2ae:	463b      	mov	r3, r7
 800e2b0:	f7f2 fae4 	bl	800087c <__aeabi_ddiv>
 800e2b4:	ec41 0b10 	vmov	d0, r0, r1
 800e2b8:	f000 ff26 	bl	800f108 <fabs>
 800e2bc:	f000 fd84 	bl	800edc8 <atan>
 800e2c0:	ec51 0b10 	vmov	r0, r1, d0
 800e2c4:	2c01      	cmp	r4, #1
 800e2c6:	d013      	beq.n	800e2f0 <__ieee754_atan2+0x110>
 800e2c8:	2c02      	cmp	r4, #2
 800e2ca:	d015      	beq.n	800e2f8 <__ieee754_atan2+0x118>
 800e2cc:	2c00      	cmp	r4, #0
 800e2ce:	d0a8      	beq.n	800e222 <__ieee754_atan2+0x42>
 800e2d0:	a317      	add	r3, pc, #92	; (adr r3, 800e330 <__ieee754_atan2+0x150>)
 800e2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2d6:	f7f1 ffef 	bl	80002b8 <__aeabi_dsub>
 800e2da:	a317      	add	r3, pc, #92	; (adr r3, 800e338 <__ieee754_atan2+0x158>)
 800e2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2e0:	e014      	b.n	800e30c <__ieee754_atan2+0x12c>
 800e2e2:	a117      	add	r1, pc, #92	; (adr r1, 800e340 <__ieee754_atan2+0x160>)
 800e2e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e2e8:	e7ec      	b.n	800e2c4 <__ieee754_atan2+0xe4>
 800e2ea:	2000      	movs	r0, #0
 800e2ec:	2100      	movs	r1, #0
 800e2ee:	e7e9      	b.n	800e2c4 <__ieee754_atan2+0xe4>
 800e2f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e2f4:	4619      	mov	r1, r3
 800e2f6:	e794      	b.n	800e222 <__ieee754_atan2+0x42>
 800e2f8:	a30d      	add	r3, pc, #52	; (adr r3, 800e330 <__ieee754_atan2+0x150>)
 800e2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2fe:	f7f1 ffdb 	bl	80002b8 <__aeabi_dsub>
 800e302:	4602      	mov	r2, r0
 800e304:	460b      	mov	r3, r1
 800e306:	a10c      	add	r1, pc, #48	; (adr r1, 800e338 <__ieee754_atan2+0x158>)
 800e308:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e30c:	f7f1 ffd4 	bl	80002b8 <__aeabi_dsub>
 800e310:	e787      	b.n	800e222 <__ieee754_atan2+0x42>
 800e312:	a109      	add	r1, pc, #36	; (adr r1, 800e338 <__ieee754_atan2+0x158>)
 800e314:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e318:	e783      	b.n	800e222 <__ieee754_atan2+0x42>
 800e31a:	a10b      	add	r1, pc, #44	; (adr r1, 800e348 <__ieee754_atan2+0x168>)
 800e31c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e320:	e77f      	b.n	800e222 <__ieee754_atan2+0x42>
 800e322:	2000      	movs	r0, #0
 800e324:	2100      	movs	r1, #0
 800e326:	e77c      	b.n	800e222 <__ieee754_atan2+0x42>
 800e328:	a105      	add	r1, pc, #20	; (adr r1, 800e340 <__ieee754_atan2+0x160>)
 800e32a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e32e:	e778      	b.n	800e222 <__ieee754_atan2+0x42>
 800e330:	33145c07 	.word	0x33145c07
 800e334:	3ca1a626 	.word	0x3ca1a626
 800e338:	54442d18 	.word	0x54442d18
 800e33c:	400921fb 	.word	0x400921fb
 800e340:	54442d18 	.word	0x54442d18
 800e344:	3ff921fb 	.word	0x3ff921fb
 800e348:	54442d18 	.word	0x54442d18
 800e34c:	3fe921fb 	.word	0x3fe921fb
 800e350:	0800f508 	.word	0x0800f508
 800e354:	0800f520 	.word	0x0800f520
 800e358:	54442d18 	.word	0x54442d18
 800e35c:	c00921fb 	.word	0xc00921fb
 800e360:	54442d18 	.word	0x54442d18
 800e364:	bff921fb 	.word	0xbff921fb
 800e368:	7ff00000 	.word	0x7ff00000
 800e36c:	00000000 	.word	0x00000000

0800e370 <__ieee754_pow>:
 800e370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e374:	ed2d 8b06 	vpush	{d8-d10}
 800e378:	b089      	sub	sp, #36	; 0x24
 800e37a:	ed8d 1b00 	vstr	d1, [sp]
 800e37e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800e382:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800e386:	ea58 0102 	orrs.w	r1, r8, r2
 800e38a:	ec57 6b10 	vmov	r6, r7, d0
 800e38e:	d115      	bne.n	800e3bc <__ieee754_pow+0x4c>
 800e390:	19b3      	adds	r3, r6, r6
 800e392:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800e396:	4152      	adcs	r2, r2
 800e398:	4299      	cmp	r1, r3
 800e39a:	4b89      	ldr	r3, [pc, #548]	; (800e5c0 <__ieee754_pow+0x250>)
 800e39c:	4193      	sbcs	r3, r2
 800e39e:	f080 84d1 	bcs.w	800ed44 <__ieee754_pow+0x9d4>
 800e3a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e3a6:	4630      	mov	r0, r6
 800e3a8:	4639      	mov	r1, r7
 800e3aa:	f7f1 ff87 	bl	80002bc <__adddf3>
 800e3ae:	ec41 0b10 	vmov	d0, r0, r1
 800e3b2:	b009      	add	sp, #36	; 0x24
 800e3b4:	ecbd 8b06 	vpop	{d8-d10}
 800e3b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3bc:	4b81      	ldr	r3, [pc, #516]	; (800e5c4 <__ieee754_pow+0x254>)
 800e3be:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800e3c2:	429c      	cmp	r4, r3
 800e3c4:	ee10 aa10 	vmov	sl, s0
 800e3c8:	463d      	mov	r5, r7
 800e3ca:	dc06      	bgt.n	800e3da <__ieee754_pow+0x6a>
 800e3cc:	d101      	bne.n	800e3d2 <__ieee754_pow+0x62>
 800e3ce:	2e00      	cmp	r6, #0
 800e3d0:	d1e7      	bne.n	800e3a2 <__ieee754_pow+0x32>
 800e3d2:	4598      	cmp	r8, r3
 800e3d4:	dc01      	bgt.n	800e3da <__ieee754_pow+0x6a>
 800e3d6:	d10f      	bne.n	800e3f8 <__ieee754_pow+0x88>
 800e3d8:	b172      	cbz	r2, 800e3f8 <__ieee754_pow+0x88>
 800e3da:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800e3de:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800e3e2:	ea55 050a 	orrs.w	r5, r5, sl
 800e3e6:	d1dc      	bne.n	800e3a2 <__ieee754_pow+0x32>
 800e3e8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e3ec:	18db      	adds	r3, r3, r3
 800e3ee:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800e3f2:	4152      	adcs	r2, r2
 800e3f4:	429d      	cmp	r5, r3
 800e3f6:	e7d0      	b.n	800e39a <__ieee754_pow+0x2a>
 800e3f8:	2d00      	cmp	r5, #0
 800e3fa:	da3b      	bge.n	800e474 <__ieee754_pow+0x104>
 800e3fc:	4b72      	ldr	r3, [pc, #456]	; (800e5c8 <__ieee754_pow+0x258>)
 800e3fe:	4598      	cmp	r8, r3
 800e400:	dc51      	bgt.n	800e4a6 <__ieee754_pow+0x136>
 800e402:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800e406:	4598      	cmp	r8, r3
 800e408:	f340 84ab 	ble.w	800ed62 <__ieee754_pow+0x9f2>
 800e40c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e410:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e414:	2b14      	cmp	r3, #20
 800e416:	dd0f      	ble.n	800e438 <__ieee754_pow+0xc8>
 800e418:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e41c:	fa22 f103 	lsr.w	r1, r2, r3
 800e420:	fa01 f303 	lsl.w	r3, r1, r3
 800e424:	4293      	cmp	r3, r2
 800e426:	f040 849c 	bne.w	800ed62 <__ieee754_pow+0x9f2>
 800e42a:	f001 0101 	and.w	r1, r1, #1
 800e42e:	f1c1 0302 	rsb	r3, r1, #2
 800e432:	9304      	str	r3, [sp, #16]
 800e434:	b182      	cbz	r2, 800e458 <__ieee754_pow+0xe8>
 800e436:	e05f      	b.n	800e4f8 <__ieee754_pow+0x188>
 800e438:	2a00      	cmp	r2, #0
 800e43a:	d15b      	bne.n	800e4f4 <__ieee754_pow+0x184>
 800e43c:	f1c3 0314 	rsb	r3, r3, #20
 800e440:	fa48 f103 	asr.w	r1, r8, r3
 800e444:	fa01 f303 	lsl.w	r3, r1, r3
 800e448:	4543      	cmp	r3, r8
 800e44a:	f040 8487 	bne.w	800ed5c <__ieee754_pow+0x9ec>
 800e44e:	f001 0101 	and.w	r1, r1, #1
 800e452:	f1c1 0302 	rsb	r3, r1, #2
 800e456:	9304      	str	r3, [sp, #16]
 800e458:	4b5c      	ldr	r3, [pc, #368]	; (800e5cc <__ieee754_pow+0x25c>)
 800e45a:	4598      	cmp	r8, r3
 800e45c:	d132      	bne.n	800e4c4 <__ieee754_pow+0x154>
 800e45e:	f1b9 0f00 	cmp.w	r9, #0
 800e462:	f280 8477 	bge.w	800ed54 <__ieee754_pow+0x9e4>
 800e466:	4959      	ldr	r1, [pc, #356]	; (800e5cc <__ieee754_pow+0x25c>)
 800e468:	4632      	mov	r2, r6
 800e46a:	463b      	mov	r3, r7
 800e46c:	2000      	movs	r0, #0
 800e46e:	f7f2 fa05 	bl	800087c <__aeabi_ddiv>
 800e472:	e79c      	b.n	800e3ae <__ieee754_pow+0x3e>
 800e474:	2300      	movs	r3, #0
 800e476:	9304      	str	r3, [sp, #16]
 800e478:	2a00      	cmp	r2, #0
 800e47a:	d13d      	bne.n	800e4f8 <__ieee754_pow+0x188>
 800e47c:	4b51      	ldr	r3, [pc, #324]	; (800e5c4 <__ieee754_pow+0x254>)
 800e47e:	4598      	cmp	r8, r3
 800e480:	d1ea      	bne.n	800e458 <__ieee754_pow+0xe8>
 800e482:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e486:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e48a:	ea53 030a 	orrs.w	r3, r3, sl
 800e48e:	f000 8459 	beq.w	800ed44 <__ieee754_pow+0x9d4>
 800e492:	4b4f      	ldr	r3, [pc, #316]	; (800e5d0 <__ieee754_pow+0x260>)
 800e494:	429c      	cmp	r4, r3
 800e496:	dd08      	ble.n	800e4aa <__ieee754_pow+0x13a>
 800e498:	f1b9 0f00 	cmp.w	r9, #0
 800e49c:	f2c0 8456 	blt.w	800ed4c <__ieee754_pow+0x9dc>
 800e4a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e4a4:	e783      	b.n	800e3ae <__ieee754_pow+0x3e>
 800e4a6:	2302      	movs	r3, #2
 800e4a8:	e7e5      	b.n	800e476 <__ieee754_pow+0x106>
 800e4aa:	f1b9 0f00 	cmp.w	r9, #0
 800e4ae:	f04f 0000 	mov.w	r0, #0
 800e4b2:	f04f 0100 	mov.w	r1, #0
 800e4b6:	f6bf af7a 	bge.w	800e3ae <__ieee754_pow+0x3e>
 800e4ba:	e9dd 0300 	ldrd	r0, r3, [sp]
 800e4be:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e4c2:	e774      	b.n	800e3ae <__ieee754_pow+0x3e>
 800e4c4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800e4c8:	d106      	bne.n	800e4d8 <__ieee754_pow+0x168>
 800e4ca:	4632      	mov	r2, r6
 800e4cc:	463b      	mov	r3, r7
 800e4ce:	4630      	mov	r0, r6
 800e4d0:	4639      	mov	r1, r7
 800e4d2:	f7f2 f8a9 	bl	8000628 <__aeabi_dmul>
 800e4d6:	e76a      	b.n	800e3ae <__ieee754_pow+0x3e>
 800e4d8:	4b3e      	ldr	r3, [pc, #248]	; (800e5d4 <__ieee754_pow+0x264>)
 800e4da:	4599      	cmp	r9, r3
 800e4dc:	d10c      	bne.n	800e4f8 <__ieee754_pow+0x188>
 800e4de:	2d00      	cmp	r5, #0
 800e4e0:	db0a      	blt.n	800e4f8 <__ieee754_pow+0x188>
 800e4e2:	ec47 6b10 	vmov	d0, r6, r7
 800e4e6:	b009      	add	sp, #36	; 0x24
 800e4e8:	ecbd 8b06 	vpop	{d8-d10}
 800e4ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4f0:	f000 bec4 	b.w	800f27c <__ieee754_sqrt>
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	9304      	str	r3, [sp, #16]
 800e4f8:	ec47 6b10 	vmov	d0, r6, r7
 800e4fc:	f000 fe04 	bl	800f108 <fabs>
 800e500:	ec51 0b10 	vmov	r0, r1, d0
 800e504:	f1ba 0f00 	cmp.w	sl, #0
 800e508:	d129      	bne.n	800e55e <__ieee754_pow+0x1ee>
 800e50a:	b124      	cbz	r4, 800e516 <__ieee754_pow+0x1a6>
 800e50c:	4b2f      	ldr	r3, [pc, #188]	; (800e5cc <__ieee754_pow+0x25c>)
 800e50e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800e512:	429a      	cmp	r2, r3
 800e514:	d123      	bne.n	800e55e <__ieee754_pow+0x1ee>
 800e516:	f1b9 0f00 	cmp.w	r9, #0
 800e51a:	da05      	bge.n	800e528 <__ieee754_pow+0x1b8>
 800e51c:	4602      	mov	r2, r0
 800e51e:	460b      	mov	r3, r1
 800e520:	2000      	movs	r0, #0
 800e522:	492a      	ldr	r1, [pc, #168]	; (800e5cc <__ieee754_pow+0x25c>)
 800e524:	f7f2 f9aa 	bl	800087c <__aeabi_ddiv>
 800e528:	2d00      	cmp	r5, #0
 800e52a:	f6bf af40 	bge.w	800e3ae <__ieee754_pow+0x3e>
 800e52e:	9b04      	ldr	r3, [sp, #16]
 800e530:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e534:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e538:	431c      	orrs	r4, r3
 800e53a:	d108      	bne.n	800e54e <__ieee754_pow+0x1de>
 800e53c:	4602      	mov	r2, r0
 800e53e:	460b      	mov	r3, r1
 800e540:	4610      	mov	r0, r2
 800e542:	4619      	mov	r1, r3
 800e544:	f7f1 feb8 	bl	80002b8 <__aeabi_dsub>
 800e548:	4602      	mov	r2, r0
 800e54a:	460b      	mov	r3, r1
 800e54c:	e78f      	b.n	800e46e <__ieee754_pow+0xfe>
 800e54e:	9b04      	ldr	r3, [sp, #16]
 800e550:	2b01      	cmp	r3, #1
 800e552:	f47f af2c 	bne.w	800e3ae <__ieee754_pow+0x3e>
 800e556:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e55a:	4619      	mov	r1, r3
 800e55c:	e727      	b.n	800e3ae <__ieee754_pow+0x3e>
 800e55e:	0feb      	lsrs	r3, r5, #31
 800e560:	3b01      	subs	r3, #1
 800e562:	9306      	str	r3, [sp, #24]
 800e564:	9a06      	ldr	r2, [sp, #24]
 800e566:	9b04      	ldr	r3, [sp, #16]
 800e568:	4313      	orrs	r3, r2
 800e56a:	d102      	bne.n	800e572 <__ieee754_pow+0x202>
 800e56c:	4632      	mov	r2, r6
 800e56e:	463b      	mov	r3, r7
 800e570:	e7e6      	b.n	800e540 <__ieee754_pow+0x1d0>
 800e572:	4b19      	ldr	r3, [pc, #100]	; (800e5d8 <__ieee754_pow+0x268>)
 800e574:	4598      	cmp	r8, r3
 800e576:	f340 80fb 	ble.w	800e770 <__ieee754_pow+0x400>
 800e57a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e57e:	4598      	cmp	r8, r3
 800e580:	4b13      	ldr	r3, [pc, #76]	; (800e5d0 <__ieee754_pow+0x260>)
 800e582:	dd0c      	ble.n	800e59e <__ieee754_pow+0x22e>
 800e584:	429c      	cmp	r4, r3
 800e586:	dc0f      	bgt.n	800e5a8 <__ieee754_pow+0x238>
 800e588:	f1b9 0f00 	cmp.w	r9, #0
 800e58c:	da0f      	bge.n	800e5ae <__ieee754_pow+0x23e>
 800e58e:	2000      	movs	r0, #0
 800e590:	b009      	add	sp, #36	; 0x24
 800e592:	ecbd 8b06 	vpop	{d8-d10}
 800e596:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e59a:	f000 be66 	b.w	800f26a <__math_oflow>
 800e59e:	429c      	cmp	r4, r3
 800e5a0:	dbf2      	blt.n	800e588 <__ieee754_pow+0x218>
 800e5a2:	4b0a      	ldr	r3, [pc, #40]	; (800e5cc <__ieee754_pow+0x25c>)
 800e5a4:	429c      	cmp	r4, r3
 800e5a6:	dd19      	ble.n	800e5dc <__ieee754_pow+0x26c>
 800e5a8:	f1b9 0f00 	cmp.w	r9, #0
 800e5ac:	dcef      	bgt.n	800e58e <__ieee754_pow+0x21e>
 800e5ae:	2000      	movs	r0, #0
 800e5b0:	b009      	add	sp, #36	; 0x24
 800e5b2:	ecbd 8b06 	vpop	{d8-d10}
 800e5b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5ba:	f000 be4d 	b.w	800f258 <__math_uflow>
 800e5be:	bf00      	nop
 800e5c0:	fff00000 	.word	0xfff00000
 800e5c4:	7ff00000 	.word	0x7ff00000
 800e5c8:	433fffff 	.word	0x433fffff
 800e5cc:	3ff00000 	.word	0x3ff00000
 800e5d0:	3fefffff 	.word	0x3fefffff
 800e5d4:	3fe00000 	.word	0x3fe00000
 800e5d8:	41e00000 	.word	0x41e00000
 800e5dc:	4b60      	ldr	r3, [pc, #384]	; (800e760 <__ieee754_pow+0x3f0>)
 800e5de:	2200      	movs	r2, #0
 800e5e0:	f7f1 fe6a 	bl	80002b8 <__aeabi_dsub>
 800e5e4:	a354      	add	r3, pc, #336	; (adr r3, 800e738 <__ieee754_pow+0x3c8>)
 800e5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5ea:	4604      	mov	r4, r0
 800e5ec:	460d      	mov	r5, r1
 800e5ee:	f7f2 f81b 	bl	8000628 <__aeabi_dmul>
 800e5f2:	a353      	add	r3, pc, #332	; (adr r3, 800e740 <__ieee754_pow+0x3d0>)
 800e5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5f8:	4606      	mov	r6, r0
 800e5fa:	460f      	mov	r7, r1
 800e5fc:	4620      	mov	r0, r4
 800e5fe:	4629      	mov	r1, r5
 800e600:	f7f2 f812 	bl	8000628 <__aeabi_dmul>
 800e604:	4b57      	ldr	r3, [pc, #348]	; (800e764 <__ieee754_pow+0x3f4>)
 800e606:	4682      	mov	sl, r0
 800e608:	468b      	mov	fp, r1
 800e60a:	2200      	movs	r2, #0
 800e60c:	4620      	mov	r0, r4
 800e60e:	4629      	mov	r1, r5
 800e610:	f7f2 f80a 	bl	8000628 <__aeabi_dmul>
 800e614:	4602      	mov	r2, r0
 800e616:	460b      	mov	r3, r1
 800e618:	a14b      	add	r1, pc, #300	; (adr r1, 800e748 <__ieee754_pow+0x3d8>)
 800e61a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e61e:	f7f1 fe4b 	bl	80002b8 <__aeabi_dsub>
 800e622:	4622      	mov	r2, r4
 800e624:	462b      	mov	r3, r5
 800e626:	f7f1 ffff 	bl	8000628 <__aeabi_dmul>
 800e62a:	4602      	mov	r2, r0
 800e62c:	460b      	mov	r3, r1
 800e62e:	2000      	movs	r0, #0
 800e630:	494d      	ldr	r1, [pc, #308]	; (800e768 <__ieee754_pow+0x3f8>)
 800e632:	f7f1 fe41 	bl	80002b8 <__aeabi_dsub>
 800e636:	4622      	mov	r2, r4
 800e638:	4680      	mov	r8, r0
 800e63a:	4689      	mov	r9, r1
 800e63c:	462b      	mov	r3, r5
 800e63e:	4620      	mov	r0, r4
 800e640:	4629      	mov	r1, r5
 800e642:	f7f1 fff1 	bl	8000628 <__aeabi_dmul>
 800e646:	4602      	mov	r2, r0
 800e648:	460b      	mov	r3, r1
 800e64a:	4640      	mov	r0, r8
 800e64c:	4649      	mov	r1, r9
 800e64e:	f7f1 ffeb 	bl	8000628 <__aeabi_dmul>
 800e652:	a33f      	add	r3, pc, #252	; (adr r3, 800e750 <__ieee754_pow+0x3e0>)
 800e654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e658:	f7f1 ffe6 	bl	8000628 <__aeabi_dmul>
 800e65c:	4602      	mov	r2, r0
 800e65e:	460b      	mov	r3, r1
 800e660:	4650      	mov	r0, sl
 800e662:	4659      	mov	r1, fp
 800e664:	f7f1 fe28 	bl	80002b8 <__aeabi_dsub>
 800e668:	4602      	mov	r2, r0
 800e66a:	460b      	mov	r3, r1
 800e66c:	4680      	mov	r8, r0
 800e66e:	4689      	mov	r9, r1
 800e670:	4630      	mov	r0, r6
 800e672:	4639      	mov	r1, r7
 800e674:	f7f1 fe22 	bl	80002bc <__adddf3>
 800e678:	2000      	movs	r0, #0
 800e67a:	4632      	mov	r2, r6
 800e67c:	463b      	mov	r3, r7
 800e67e:	4604      	mov	r4, r0
 800e680:	460d      	mov	r5, r1
 800e682:	f7f1 fe19 	bl	80002b8 <__aeabi_dsub>
 800e686:	4602      	mov	r2, r0
 800e688:	460b      	mov	r3, r1
 800e68a:	4640      	mov	r0, r8
 800e68c:	4649      	mov	r1, r9
 800e68e:	f7f1 fe13 	bl	80002b8 <__aeabi_dsub>
 800e692:	9b04      	ldr	r3, [sp, #16]
 800e694:	9a06      	ldr	r2, [sp, #24]
 800e696:	3b01      	subs	r3, #1
 800e698:	4313      	orrs	r3, r2
 800e69a:	4682      	mov	sl, r0
 800e69c:	468b      	mov	fp, r1
 800e69e:	f040 81e7 	bne.w	800ea70 <__ieee754_pow+0x700>
 800e6a2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800e758 <__ieee754_pow+0x3e8>
 800e6a6:	eeb0 8a47 	vmov.f32	s16, s14
 800e6aa:	eef0 8a67 	vmov.f32	s17, s15
 800e6ae:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e6b2:	2600      	movs	r6, #0
 800e6b4:	4632      	mov	r2, r6
 800e6b6:	463b      	mov	r3, r7
 800e6b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e6bc:	f7f1 fdfc 	bl	80002b8 <__aeabi_dsub>
 800e6c0:	4622      	mov	r2, r4
 800e6c2:	462b      	mov	r3, r5
 800e6c4:	f7f1 ffb0 	bl	8000628 <__aeabi_dmul>
 800e6c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e6cc:	4680      	mov	r8, r0
 800e6ce:	4689      	mov	r9, r1
 800e6d0:	4650      	mov	r0, sl
 800e6d2:	4659      	mov	r1, fp
 800e6d4:	f7f1 ffa8 	bl	8000628 <__aeabi_dmul>
 800e6d8:	4602      	mov	r2, r0
 800e6da:	460b      	mov	r3, r1
 800e6dc:	4640      	mov	r0, r8
 800e6de:	4649      	mov	r1, r9
 800e6e0:	f7f1 fdec 	bl	80002bc <__adddf3>
 800e6e4:	4632      	mov	r2, r6
 800e6e6:	463b      	mov	r3, r7
 800e6e8:	4680      	mov	r8, r0
 800e6ea:	4689      	mov	r9, r1
 800e6ec:	4620      	mov	r0, r4
 800e6ee:	4629      	mov	r1, r5
 800e6f0:	f7f1 ff9a 	bl	8000628 <__aeabi_dmul>
 800e6f4:	460b      	mov	r3, r1
 800e6f6:	4604      	mov	r4, r0
 800e6f8:	460d      	mov	r5, r1
 800e6fa:	4602      	mov	r2, r0
 800e6fc:	4649      	mov	r1, r9
 800e6fe:	4640      	mov	r0, r8
 800e700:	f7f1 fddc 	bl	80002bc <__adddf3>
 800e704:	4b19      	ldr	r3, [pc, #100]	; (800e76c <__ieee754_pow+0x3fc>)
 800e706:	4299      	cmp	r1, r3
 800e708:	ec45 4b19 	vmov	d9, r4, r5
 800e70c:	4606      	mov	r6, r0
 800e70e:	460f      	mov	r7, r1
 800e710:	468b      	mov	fp, r1
 800e712:	f340 82f0 	ble.w	800ecf6 <__ieee754_pow+0x986>
 800e716:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e71a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e71e:	4303      	orrs	r3, r0
 800e720:	f000 81e4 	beq.w	800eaec <__ieee754_pow+0x77c>
 800e724:	ec51 0b18 	vmov	r0, r1, d8
 800e728:	2200      	movs	r2, #0
 800e72a:	2300      	movs	r3, #0
 800e72c:	f7f2 f9ee 	bl	8000b0c <__aeabi_dcmplt>
 800e730:	3800      	subs	r0, #0
 800e732:	bf18      	it	ne
 800e734:	2001      	movne	r0, #1
 800e736:	e72b      	b.n	800e590 <__ieee754_pow+0x220>
 800e738:	60000000 	.word	0x60000000
 800e73c:	3ff71547 	.word	0x3ff71547
 800e740:	f85ddf44 	.word	0xf85ddf44
 800e744:	3e54ae0b 	.word	0x3e54ae0b
 800e748:	55555555 	.word	0x55555555
 800e74c:	3fd55555 	.word	0x3fd55555
 800e750:	652b82fe 	.word	0x652b82fe
 800e754:	3ff71547 	.word	0x3ff71547
 800e758:	00000000 	.word	0x00000000
 800e75c:	bff00000 	.word	0xbff00000
 800e760:	3ff00000 	.word	0x3ff00000
 800e764:	3fd00000 	.word	0x3fd00000
 800e768:	3fe00000 	.word	0x3fe00000
 800e76c:	408fffff 	.word	0x408fffff
 800e770:	4bd5      	ldr	r3, [pc, #852]	; (800eac8 <__ieee754_pow+0x758>)
 800e772:	402b      	ands	r3, r5
 800e774:	2200      	movs	r2, #0
 800e776:	b92b      	cbnz	r3, 800e784 <__ieee754_pow+0x414>
 800e778:	4bd4      	ldr	r3, [pc, #848]	; (800eacc <__ieee754_pow+0x75c>)
 800e77a:	f7f1 ff55 	bl	8000628 <__aeabi_dmul>
 800e77e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e782:	460c      	mov	r4, r1
 800e784:	1523      	asrs	r3, r4, #20
 800e786:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e78a:	4413      	add	r3, r2
 800e78c:	9305      	str	r3, [sp, #20]
 800e78e:	4bd0      	ldr	r3, [pc, #832]	; (800ead0 <__ieee754_pow+0x760>)
 800e790:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e794:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e798:	429c      	cmp	r4, r3
 800e79a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e79e:	dd08      	ble.n	800e7b2 <__ieee754_pow+0x442>
 800e7a0:	4bcc      	ldr	r3, [pc, #816]	; (800ead4 <__ieee754_pow+0x764>)
 800e7a2:	429c      	cmp	r4, r3
 800e7a4:	f340 8162 	ble.w	800ea6c <__ieee754_pow+0x6fc>
 800e7a8:	9b05      	ldr	r3, [sp, #20]
 800e7aa:	3301      	adds	r3, #1
 800e7ac:	9305      	str	r3, [sp, #20]
 800e7ae:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e7b2:	2400      	movs	r4, #0
 800e7b4:	00e3      	lsls	r3, r4, #3
 800e7b6:	9307      	str	r3, [sp, #28]
 800e7b8:	4bc7      	ldr	r3, [pc, #796]	; (800ead8 <__ieee754_pow+0x768>)
 800e7ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e7be:	ed93 7b00 	vldr	d7, [r3]
 800e7c2:	4629      	mov	r1, r5
 800e7c4:	ec53 2b17 	vmov	r2, r3, d7
 800e7c8:	eeb0 9a47 	vmov.f32	s18, s14
 800e7cc:	eef0 9a67 	vmov.f32	s19, s15
 800e7d0:	4682      	mov	sl, r0
 800e7d2:	f7f1 fd71 	bl	80002b8 <__aeabi_dsub>
 800e7d6:	4652      	mov	r2, sl
 800e7d8:	4606      	mov	r6, r0
 800e7da:	460f      	mov	r7, r1
 800e7dc:	462b      	mov	r3, r5
 800e7de:	ec51 0b19 	vmov	r0, r1, d9
 800e7e2:	f7f1 fd6b 	bl	80002bc <__adddf3>
 800e7e6:	4602      	mov	r2, r0
 800e7e8:	460b      	mov	r3, r1
 800e7ea:	2000      	movs	r0, #0
 800e7ec:	49bb      	ldr	r1, [pc, #748]	; (800eadc <__ieee754_pow+0x76c>)
 800e7ee:	f7f2 f845 	bl	800087c <__aeabi_ddiv>
 800e7f2:	ec41 0b1a 	vmov	d10, r0, r1
 800e7f6:	4602      	mov	r2, r0
 800e7f8:	460b      	mov	r3, r1
 800e7fa:	4630      	mov	r0, r6
 800e7fc:	4639      	mov	r1, r7
 800e7fe:	f7f1 ff13 	bl	8000628 <__aeabi_dmul>
 800e802:	2300      	movs	r3, #0
 800e804:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e808:	9302      	str	r3, [sp, #8]
 800e80a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e80e:	46ab      	mov	fp, r5
 800e810:	106d      	asrs	r5, r5, #1
 800e812:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e816:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e81a:	ec41 0b18 	vmov	d8, r0, r1
 800e81e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800e822:	2200      	movs	r2, #0
 800e824:	4640      	mov	r0, r8
 800e826:	4649      	mov	r1, r9
 800e828:	4614      	mov	r4, r2
 800e82a:	461d      	mov	r5, r3
 800e82c:	f7f1 fefc 	bl	8000628 <__aeabi_dmul>
 800e830:	4602      	mov	r2, r0
 800e832:	460b      	mov	r3, r1
 800e834:	4630      	mov	r0, r6
 800e836:	4639      	mov	r1, r7
 800e838:	f7f1 fd3e 	bl	80002b8 <__aeabi_dsub>
 800e83c:	ec53 2b19 	vmov	r2, r3, d9
 800e840:	4606      	mov	r6, r0
 800e842:	460f      	mov	r7, r1
 800e844:	4620      	mov	r0, r4
 800e846:	4629      	mov	r1, r5
 800e848:	f7f1 fd36 	bl	80002b8 <__aeabi_dsub>
 800e84c:	4602      	mov	r2, r0
 800e84e:	460b      	mov	r3, r1
 800e850:	4650      	mov	r0, sl
 800e852:	4659      	mov	r1, fp
 800e854:	f7f1 fd30 	bl	80002b8 <__aeabi_dsub>
 800e858:	4642      	mov	r2, r8
 800e85a:	464b      	mov	r3, r9
 800e85c:	f7f1 fee4 	bl	8000628 <__aeabi_dmul>
 800e860:	4602      	mov	r2, r0
 800e862:	460b      	mov	r3, r1
 800e864:	4630      	mov	r0, r6
 800e866:	4639      	mov	r1, r7
 800e868:	f7f1 fd26 	bl	80002b8 <__aeabi_dsub>
 800e86c:	ec53 2b1a 	vmov	r2, r3, d10
 800e870:	f7f1 feda 	bl	8000628 <__aeabi_dmul>
 800e874:	ec53 2b18 	vmov	r2, r3, d8
 800e878:	ec41 0b19 	vmov	d9, r0, r1
 800e87c:	ec51 0b18 	vmov	r0, r1, d8
 800e880:	f7f1 fed2 	bl	8000628 <__aeabi_dmul>
 800e884:	a37c      	add	r3, pc, #496	; (adr r3, 800ea78 <__ieee754_pow+0x708>)
 800e886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e88a:	4604      	mov	r4, r0
 800e88c:	460d      	mov	r5, r1
 800e88e:	f7f1 fecb 	bl	8000628 <__aeabi_dmul>
 800e892:	a37b      	add	r3, pc, #492	; (adr r3, 800ea80 <__ieee754_pow+0x710>)
 800e894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e898:	f7f1 fd10 	bl	80002bc <__adddf3>
 800e89c:	4622      	mov	r2, r4
 800e89e:	462b      	mov	r3, r5
 800e8a0:	f7f1 fec2 	bl	8000628 <__aeabi_dmul>
 800e8a4:	a378      	add	r3, pc, #480	; (adr r3, 800ea88 <__ieee754_pow+0x718>)
 800e8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8aa:	f7f1 fd07 	bl	80002bc <__adddf3>
 800e8ae:	4622      	mov	r2, r4
 800e8b0:	462b      	mov	r3, r5
 800e8b2:	f7f1 feb9 	bl	8000628 <__aeabi_dmul>
 800e8b6:	a376      	add	r3, pc, #472	; (adr r3, 800ea90 <__ieee754_pow+0x720>)
 800e8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8bc:	f7f1 fcfe 	bl	80002bc <__adddf3>
 800e8c0:	4622      	mov	r2, r4
 800e8c2:	462b      	mov	r3, r5
 800e8c4:	f7f1 feb0 	bl	8000628 <__aeabi_dmul>
 800e8c8:	a373      	add	r3, pc, #460	; (adr r3, 800ea98 <__ieee754_pow+0x728>)
 800e8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8ce:	f7f1 fcf5 	bl	80002bc <__adddf3>
 800e8d2:	4622      	mov	r2, r4
 800e8d4:	462b      	mov	r3, r5
 800e8d6:	f7f1 fea7 	bl	8000628 <__aeabi_dmul>
 800e8da:	a371      	add	r3, pc, #452	; (adr r3, 800eaa0 <__ieee754_pow+0x730>)
 800e8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8e0:	f7f1 fcec 	bl	80002bc <__adddf3>
 800e8e4:	4622      	mov	r2, r4
 800e8e6:	4606      	mov	r6, r0
 800e8e8:	460f      	mov	r7, r1
 800e8ea:	462b      	mov	r3, r5
 800e8ec:	4620      	mov	r0, r4
 800e8ee:	4629      	mov	r1, r5
 800e8f0:	f7f1 fe9a 	bl	8000628 <__aeabi_dmul>
 800e8f4:	4602      	mov	r2, r0
 800e8f6:	460b      	mov	r3, r1
 800e8f8:	4630      	mov	r0, r6
 800e8fa:	4639      	mov	r1, r7
 800e8fc:	f7f1 fe94 	bl	8000628 <__aeabi_dmul>
 800e900:	4642      	mov	r2, r8
 800e902:	4604      	mov	r4, r0
 800e904:	460d      	mov	r5, r1
 800e906:	464b      	mov	r3, r9
 800e908:	ec51 0b18 	vmov	r0, r1, d8
 800e90c:	f7f1 fcd6 	bl	80002bc <__adddf3>
 800e910:	ec53 2b19 	vmov	r2, r3, d9
 800e914:	f7f1 fe88 	bl	8000628 <__aeabi_dmul>
 800e918:	4622      	mov	r2, r4
 800e91a:	462b      	mov	r3, r5
 800e91c:	f7f1 fcce 	bl	80002bc <__adddf3>
 800e920:	4642      	mov	r2, r8
 800e922:	4682      	mov	sl, r0
 800e924:	468b      	mov	fp, r1
 800e926:	464b      	mov	r3, r9
 800e928:	4640      	mov	r0, r8
 800e92a:	4649      	mov	r1, r9
 800e92c:	f7f1 fe7c 	bl	8000628 <__aeabi_dmul>
 800e930:	4b6b      	ldr	r3, [pc, #428]	; (800eae0 <__ieee754_pow+0x770>)
 800e932:	2200      	movs	r2, #0
 800e934:	4606      	mov	r6, r0
 800e936:	460f      	mov	r7, r1
 800e938:	f7f1 fcc0 	bl	80002bc <__adddf3>
 800e93c:	4652      	mov	r2, sl
 800e93e:	465b      	mov	r3, fp
 800e940:	f7f1 fcbc 	bl	80002bc <__adddf3>
 800e944:	2000      	movs	r0, #0
 800e946:	4604      	mov	r4, r0
 800e948:	460d      	mov	r5, r1
 800e94a:	4602      	mov	r2, r0
 800e94c:	460b      	mov	r3, r1
 800e94e:	4640      	mov	r0, r8
 800e950:	4649      	mov	r1, r9
 800e952:	f7f1 fe69 	bl	8000628 <__aeabi_dmul>
 800e956:	4b62      	ldr	r3, [pc, #392]	; (800eae0 <__ieee754_pow+0x770>)
 800e958:	4680      	mov	r8, r0
 800e95a:	4689      	mov	r9, r1
 800e95c:	2200      	movs	r2, #0
 800e95e:	4620      	mov	r0, r4
 800e960:	4629      	mov	r1, r5
 800e962:	f7f1 fca9 	bl	80002b8 <__aeabi_dsub>
 800e966:	4632      	mov	r2, r6
 800e968:	463b      	mov	r3, r7
 800e96a:	f7f1 fca5 	bl	80002b8 <__aeabi_dsub>
 800e96e:	4602      	mov	r2, r0
 800e970:	460b      	mov	r3, r1
 800e972:	4650      	mov	r0, sl
 800e974:	4659      	mov	r1, fp
 800e976:	f7f1 fc9f 	bl	80002b8 <__aeabi_dsub>
 800e97a:	ec53 2b18 	vmov	r2, r3, d8
 800e97e:	f7f1 fe53 	bl	8000628 <__aeabi_dmul>
 800e982:	4622      	mov	r2, r4
 800e984:	4606      	mov	r6, r0
 800e986:	460f      	mov	r7, r1
 800e988:	462b      	mov	r3, r5
 800e98a:	ec51 0b19 	vmov	r0, r1, d9
 800e98e:	f7f1 fe4b 	bl	8000628 <__aeabi_dmul>
 800e992:	4602      	mov	r2, r0
 800e994:	460b      	mov	r3, r1
 800e996:	4630      	mov	r0, r6
 800e998:	4639      	mov	r1, r7
 800e99a:	f7f1 fc8f 	bl	80002bc <__adddf3>
 800e99e:	4606      	mov	r6, r0
 800e9a0:	460f      	mov	r7, r1
 800e9a2:	4602      	mov	r2, r0
 800e9a4:	460b      	mov	r3, r1
 800e9a6:	4640      	mov	r0, r8
 800e9a8:	4649      	mov	r1, r9
 800e9aa:	f7f1 fc87 	bl	80002bc <__adddf3>
 800e9ae:	a33e      	add	r3, pc, #248	; (adr r3, 800eaa8 <__ieee754_pow+0x738>)
 800e9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9b4:	2000      	movs	r0, #0
 800e9b6:	4604      	mov	r4, r0
 800e9b8:	460d      	mov	r5, r1
 800e9ba:	f7f1 fe35 	bl	8000628 <__aeabi_dmul>
 800e9be:	4642      	mov	r2, r8
 800e9c0:	ec41 0b18 	vmov	d8, r0, r1
 800e9c4:	464b      	mov	r3, r9
 800e9c6:	4620      	mov	r0, r4
 800e9c8:	4629      	mov	r1, r5
 800e9ca:	f7f1 fc75 	bl	80002b8 <__aeabi_dsub>
 800e9ce:	4602      	mov	r2, r0
 800e9d0:	460b      	mov	r3, r1
 800e9d2:	4630      	mov	r0, r6
 800e9d4:	4639      	mov	r1, r7
 800e9d6:	f7f1 fc6f 	bl	80002b8 <__aeabi_dsub>
 800e9da:	a335      	add	r3, pc, #212	; (adr r3, 800eab0 <__ieee754_pow+0x740>)
 800e9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9e0:	f7f1 fe22 	bl	8000628 <__aeabi_dmul>
 800e9e4:	a334      	add	r3, pc, #208	; (adr r3, 800eab8 <__ieee754_pow+0x748>)
 800e9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9ea:	4606      	mov	r6, r0
 800e9ec:	460f      	mov	r7, r1
 800e9ee:	4620      	mov	r0, r4
 800e9f0:	4629      	mov	r1, r5
 800e9f2:	f7f1 fe19 	bl	8000628 <__aeabi_dmul>
 800e9f6:	4602      	mov	r2, r0
 800e9f8:	460b      	mov	r3, r1
 800e9fa:	4630      	mov	r0, r6
 800e9fc:	4639      	mov	r1, r7
 800e9fe:	f7f1 fc5d 	bl	80002bc <__adddf3>
 800ea02:	9a07      	ldr	r2, [sp, #28]
 800ea04:	4b37      	ldr	r3, [pc, #220]	; (800eae4 <__ieee754_pow+0x774>)
 800ea06:	4413      	add	r3, r2
 800ea08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea0c:	f7f1 fc56 	bl	80002bc <__adddf3>
 800ea10:	4682      	mov	sl, r0
 800ea12:	9805      	ldr	r0, [sp, #20]
 800ea14:	468b      	mov	fp, r1
 800ea16:	f7f1 fd9d 	bl	8000554 <__aeabi_i2d>
 800ea1a:	9a07      	ldr	r2, [sp, #28]
 800ea1c:	4b32      	ldr	r3, [pc, #200]	; (800eae8 <__ieee754_pow+0x778>)
 800ea1e:	4413      	add	r3, r2
 800ea20:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ea24:	4606      	mov	r6, r0
 800ea26:	460f      	mov	r7, r1
 800ea28:	4652      	mov	r2, sl
 800ea2a:	465b      	mov	r3, fp
 800ea2c:	ec51 0b18 	vmov	r0, r1, d8
 800ea30:	f7f1 fc44 	bl	80002bc <__adddf3>
 800ea34:	4642      	mov	r2, r8
 800ea36:	464b      	mov	r3, r9
 800ea38:	f7f1 fc40 	bl	80002bc <__adddf3>
 800ea3c:	4632      	mov	r2, r6
 800ea3e:	463b      	mov	r3, r7
 800ea40:	f7f1 fc3c 	bl	80002bc <__adddf3>
 800ea44:	2000      	movs	r0, #0
 800ea46:	4632      	mov	r2, r6
 800ea48:	463b      	mov	r3, r7
 800ea4a:	4604      	mov	r4, r0
 800ea4c:	460d      	mov	r5, r1
 800ea4e:	f7f1 fc33 	bl	80002b8 <__aeabi_dsub>
 800ea52:	4642      	mov	r2, r8
 800ea54:	464b      	mov	r3, r9
 800ea56:	f7f1 fc2f 	bl	80002b8 <__aeabi_dsub>
 800ea5a:	ec53 2b18 	vmov	r2, r3, d8
 800ea5e:	f7f1 fc2b 	bl	80002b8 <__aeabi_dsub>
 800ea62:	4602      	mov	r2, r0
 800ea64:	460b      	mov	r3, r1
 800ea66:	4650      	mov	r0, sl
 800ea68:	4659      	mov	r1, fp
 800ea6a:	e610      	b.n	800e68e <__ieee754_pow+0x31e>
 800ea6c:	2401      	movs	r4, #1
 800ea6e:	e6a1      	b.n	800e7b4 <__ieee754_pow+0x444>
 800ea70:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800eac0 <__ieee754_pow+0x750>
 800ea74:	e617      	b.n	800e6a6 <__ieee754_pow+0x336>
 800ea76:	bf00      	nop
 800ea78:	4a454eef 	.word	0x4a454eef
 800ea7c:	3fca7e28 	.word	0x3fca7e28
 800ea80:	93c9db65 	.word	0x93c9db65
 800ea84:	3fcd864a 	.word	0x3fcd864a
 800ea88:	a91d4101 	.word	0xa91d4101
 800ea8c:	3fd17460 	.word	0x3fd17460
 800ea90:	518f264d 	.word	0x518f264d
 800ea94:	3fd55555 	.word	0x3fd55555
 800ea98:	db6fabff 	.word	0xdb6fabff
 800ea9c:	3fdb6db6 	.word	0x3fdb6db6
 800eaa0:	33333303 	.word	0x33333303
 800eaa4:	3fe33333 	.word	0x3fe33333
 800eaa8:	e0000000 	.word	0xe0000000
 800eaac:	3feec709 	.word	0x3feec709
 800eab0:	dc3a03fd 	.word	0xdc3a03fd
 800eab4:	3feec709 	.word	0x3feec709
 800eab8:	145b01f5 	.word	0x145b01f5
 800eabc:	be3e2fe0 	.word	0xbe3e2fe0
 800eac0:	00000000 	.word	0x00000000
 800eac4:	3ff00000 	.word	0x3ff00000
 800eac8:	7ff00000 	.word	0x7ff00000
 800eacc:	43400000 	.word	0x43400000
 800ead0:	0003988e 	.word	0x0003988e
 800ead4:	000bb679 	.word	0x000bb679
 800ead8:	0800f538 	.word	0x0800f538
 800eadc:	3ff00000 	.word	0x3ff00000
 800eae0:	40080000 	.word	0x40080000
 800eae4:	0800f558 	.word	0x0800f558
 800eae8:	0800f548 	.word	0x0800f548
 800eaec:	a3b3      	add	r3, pc, #716	; (adr r3, 800edbc <__ieee754_pow+0xa4c>)
 800eaee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaf2:	4640      	mov	r0, r8
 800eaf4:	4649      	mov	r1, r9
 800eaf6:	f7f1 fbe1 	bl	80002bc <__adddf3>
 800eafa:	4622      	mov	r2, r4
 800eafc:	ec41 0b1a 	vmov	d10, r0, r1
 800eb00:	462b      	mov	r3, r5
 800eb02:	4630      	mov	r0, r6
 800eb04:	4639      	mov	r1, r7
 800eb06:	f7f1 fbd7 	bl	80002b8 <__aeabi_dsub>
 800eb0a:	4602      	mov	r2, r0
 800eb0c:	460b      	mov	r3, r1
 800eb0e:	ec51 0b1a 	vmov	r0, r1, d10
 800eb12:	f7f2 f819 	bl	8000b48 <__aeabi_dcmpgt>
 800eb16:	2800      	cmp	r0, #0
 800eb18:	f47f ae04 	bne.w	800e724 <__ieee754_pow+0x3b4>
 800eb1c:	4aa2      	ldr	r2, [pc, #648]	; (800eda8 <__ieee754_pow+0xa38>)
 800eb1e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800eb22:	4293      	cmp	r3, r2
 800eb24:	f340 8107 	ble.w	800ed36 <__ieee754_pow+0x9c6>
 800eb28:	151b      	asrs	r3, r3, #20
 800eb2a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800eb2e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800eb32:	fa4a fa03 	asr.w	sl, sl, r3
 800eb36:	44da      	add	sl, fp
 800eb38:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800eb3c:	489b      	ldr	r0, [pc, #620]	; (800edac <__ieee754_pow+0xa3c>)
 800eb3e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800eb42:	4108      	asrs	r0, r1
 800eb44:	ea00 030a 	and.w	r3, r0, sl
 800eb48:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800eb4c:	f1c1 0114 	rsb	r1, r1, #20
 800eb50:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800eb54:	fa4a fa01 	asr.w	sl, sl, r1
 800eb58:	f1bb 0f00 	cmp.w	fp, #0
 800eb5c:	f04f 0200 	mov.w	r2, #0
 800eb60:	4620      	mov	r0, r4
 800eb62:	4629      	mov	r1, r5
 800eb64:	bfb8      	it	lt
 800eb66:	f1ca 0a00 	rsblt	sl, sl, #0
 800eb6a:	f7f1 fba5 	bl	80002b8 <__aeabi_dsub>
 800eb6e:	ec41 0b19 	vmov	d9, r0, r1
 800eb72:	4642      	mov	r2, r8
 800eb74:	464b      	mov	r3, r9
 800eb76:	ec51 0b19 	vmov	r0, r1, d9
 800eb7a:	f7f1 fb9f 	bl	80002bc <__adddf3>
 800eb7e:	a37a      	add	r3, pc, #488	; (adr r3, 800ed68 <__ieee754_pow+0x9f8>)
 800eb80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb84:	2000      	movs	r0, #0
 800eb86:	4604      	mov	r4, r0
 800eb88:	460d      	mov	r5, r1
 800eb8a:	f7f1 fd4d 	bl	8000628 <__aeabi_dmul>
 800eb8e:	ec53 2b19 	vmov	r2, r3, d9
 800eb92:	4606      	mov	r6, r0
 800eb94:	460f      	mov	r7, r1
 800eb96:	4620      	mov	r0, r4
 800eb98:	4629      	mov	r1, r5
 800eb9a:	f7f1 fb8d 	bl	80002b8 <__aeabi_dsub>
 800eb9e:	4602      	mov	r2, r0
 800eba0:	460b      	mov	r3, r1
 800eba2:	4640      	mov	r0, r8
 800eba4:	4649      	mov	r1, r9
 800eba6:	f7f1 fb87 	bl	80002b8 <__aeabi_dsub>
 800ebaa:	a371      	add	r3, pc, #452	; (adr r3, 800ed70 <__ieee754_pow+0xa00>)
 800ebac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebb0:	f7f1 fd3a 	bl	8000628 <__aeabi_dmul>
 800ebb4:	a370      	add	r3, pc, #448	; (adr r3, 800ed78 <__ieee754_pow+0xa08>)
 800ebb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebba:	4680      	mov	r8, r0
 800ebbc:	4689      	mov	r9, r1
 800ebbe:	4620      	mov	r0, r4
 800ebc0:	4629      	mov	r1, r5
 800ebc2:	f7f1 fd31 	bl	8000628 <__aeabi_dmul>
 800ebc6:	4602      	mov	r2, r0
 800ebc8:	460b      	mov	r3, r1
 800ebca:	4640      	mov	r0, r8
 800ebcc:	4649      	mov	r1, r9
 800ebce:	f7f1 fb75 	bl	80002bc <__adddf3>
 800ebd2:	4604      	mov	r4, r0
 800ebd4:	460d      	mov	r5, r1
 800ebd6:	4602      	mov	r2, r0
 800ebd8:	460b      	mov	r3, r1
 800ebda:	4630      	mov	r0, r6
 800ebdc:	4639      	mov	r1, r7
 800ebde:	f7f1 fb6d 	bl	80002bc <__adddf3>
 800ebe2:	4632      	mov	r2, r6
 800ebe4:	463b      	mov	r3, r7
 800ebe6:	4680      	mov	r8, r0
 800ebe8:	4689      	mov	r9, r1
 800ebea:	f7f1 fb65 	bl	80002b8 <__aeabi_dsub>
 800ebee:	4602      	mov	r2, r0
 800ebf0:	460b      	mov	r3, r1
 800ebf2:	4620      	mov	r0, r4
 800ebf4:	4629      	mov	r1, r5
 800ebf6:	f7f1 fb5f 	bl	80002b8 <__aeabi_dsub>
 800ebfa:	4642      	mov	r2, r8
 800ebfc:	4606      	mov	r6, r0
 800ebfe:	460f      	mov	r7, r1
 800ec00:	464b      	mov	r3, r9
 800ec02:	4640      	mov	r0, r8
 800ec04:	4649      	mov	r1, r9
 800ec06:	f7f1 fd0f 	bl	8000628 <__aeabi_dmul>
 800ec0a:	a35d      	add	r3, pc, #372	; (adr r3, 800ed80 <__ieee754_pow+0xa10>)
 800ec0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec10:	4604      	mov	r4, r0
 800ec12:	460d      	mov	r5, r1
 800ec14:	f7f1 fd08 	bl	8000628 <__aeabi_dmul>
 800ec18:	a35b      	add	r3, pc, #364	; (adr r3, 800ed88 <__ieee754_pow+0xa18>)
 800ec1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec1e:	f7f1 fb4b 	bl	80002b8 <__aeabi_dsub>
 800ec22:	4622      	mov	r2, r4
 800ec24:	462b      	mov	r3, r5
 800ec26:	f7f1 fcff 	bl	8000628 <__aeabi_dmul>
 800ec2a:	a359      	add	r3, pc, #356	; (adr r3, 800ed90 <__ieee754_pow+0xa20>)
 800ec2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec30:	f7f1 fb44 	bl	80002bc <__adddf3>
 800ec34:	4622      	mov	r2, r4
 800ec36:	462b      	mov	r3, r5
 800ec38:	f7f1 fcf6 	bl	8000628 <__aeabi_dmul>
 800ec3c:	a356      	add	r3, pc, #344	; (adr r3, 800ed98 <__ieee754_pow+0xa28>)
 800ec3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec42:	f7f1 fb39 	bl	80002b8 <__aeabi_dsub>
 800ec46:	4622      	mov	r2, r4
 800ec48:	462b      	mov	r3, r5
 800ec4a:	f7f1 fced 	bl	8000628 <__aeabi_dmul>
 800ec4e:	a354      	add	r3, pc, #336	; (adr r3, 800eda0 <__ieee754_pow+0xa30>)
 800ec50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec54:	f7f1 fb32 	bl	80002bc <__adddf3>
 800ec58:	4622      	mov	r2, r4
 800ec5a:	462b      	mov	r3, r5
 800ec5c:	f7f1 fce4 	bl	8000628 <__aeabi_dmul>
 800ec60:	4602      	mov	r2, r0
 800ec62:	460b      	mov	r3, r1
 800ec64:	4640      	mov	r0, r8
 800ec66:	4649      	mov	r1, r9
 800ec68:	f7f1 fb26 	bl	80002b8 <__aeabi_dsub>
 800ec6c:	4604      	mov	r4, r0
 800ec6e:	460d      	mov	r5, r1
 800ec70:	4602      	mov	r2, r0
 800ec72:	460b      	mov	r3, r1
 800ec74:	4640      	mov	r0, r8
 800ec76:	4649      	mov	r1, r9
 800ec78:	f7f1 fcd6 	bl	8000628 <__aeabi_dmul>
 800ec7c:	2200      	movs	r2, #0
 800ec7e:	ec41 0b19 	vmov	d9, r0, r1
 800ec82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ec86:	4620      	mov	r0, r4
 800ec88:	4629      	mov	r1, r5
 800ec8a:	f7f1 fb15 	bl	80002b8 <__aeabi_dsub>
 800ec8e:	4602      	mov	r2, r0
 800ec90:	460b      	mov	r3, r1
 800ec92:	ec51 0b19 	vmov	r0, r1, d9
 800ec96:	f7f1 fdf1 	bl	800087c <__aeabi_ddiv>
 800ec9a:	4632      	mov	r2, r6
 800ec9c:	4604      	mov	r4, r0
 800ec9e:	460d      	mov	r5, r1
 800eca0:	463b      	mov	r3, r7
 800eca2:	4640      	mov	r0, r8
 800eca4:	4649      	mov	r1, r9
 800eca6:	f7f1 fcbf 	bl	8000628 <__aeabi_dmul>
 800ecaa:	4632      	mov	r2, r6
 800ecac:	463b      	mov	r3, r7
 800ecae:	f7f1 fb05 	bl	80002bc <__adddf3>
 800ecb2:	4602      	mov	r2, r0
 800ecb4:	460b      	mov	r3, r1
 800ecb6:	4620      	mov	r0, r4
 800ecb8:	4629      	mov	r1, r5
 800ecba:	f7f1 fafd 	bl	80002b8 <__aeabi_dsub>
 800ecbe:	4642      	mov	r2, r8
 800ecc0:	464b      	mov	r3, r9
 800ecc2:	f7f1 faf9 	bl	80002b8 <__aeabi_dsub>
 800ecc6:	460b      	mov	r3, r1
 800ecc8:	4602      	mov	r2, r0
 800ecca:	4939      	ldr	r1, [pc, #228]	; (800edb0 <__ieee754_pow+0xa40>)
 800eccc:	2000      	movs	r0, #0
 800ecce:	f7f1 faf3 	bl	80002b8 <__aeabi_dsub>
 800ecd2:	ec41 0b10 	vmov	d0, r0, r1
 800ecd6:	ee10 3a90 	vmov	r3, s1
 800ecda:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ecde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ece2:	da2b      	bge.n	800ed3c <__ieee754_pow+0x9cc>
 800ece4:	4650      	mov	r0, sl
 800ece6:	f000 fa1b 	bl	800f120 <scalbn>
 800ecea:	ec51 0b10 	vmov	r0, r1, d0
 800ecee:	ec53 2b18 	vmov	r2, r3, d8
 800ecf2:	f7ff bbee 	b.w	800e4d2 <__ieee754_pow+0x162>
 800ecf6:	4b2f      	ldr	r3, [pc, #188]	; (800edb4 <__ieee754_pow+0xa44>)
 800ecf8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ecfc:	429e      	cmp	r6, r3
 800ecfe:	f77f af0d 	ble.w	800eb1c <__ieee754_pow+0x7ac>
 800ed02:	4b2d      	ldr	r3, [pc, #180]	; (800edb8 <__ieee754_pow+0xa48>)
 800ed04:	440b      	add	r3, r1
 800ed06:	4303      	orrs	r3, r0
 800ed08:	d009      	beq.n	800ed1e <__ieee754_pow+0x9ae>
 800ed0a:	ec51 0b18 	vmov	r0, r1, d8
 800ed0e:	2200      	movs	r2, #0
 800ed10:	2300      	movs	r3, #0
 800ed12:	f7f1 fefb 	bl	8000b0c <__aeabi_dcmplt>
 800ed16:	3800      	subs	r0, #0
 800ed18:	bf18      	it	ne
 800ed1a:	2001      	movne	r0, #1
 800ed1c:	e448      	b.n	800e5b0 <__ieee754_pow+0x240>
 800ed1e:	4622      	mov	r2, r4
 800ed20:	462b      	mov	r3, r5
 800ed22:	f7f1 fac9 	bl	80002b8 <__aeabi_dsub>
 800ed26:	4642      	mov	r2, r8
 800ed28:	464b      	mov	r3, r9
 800ed2a:	f7f1 ff03 	bl	8000b34 <__aeabi_dcmpge>
 800ed2e:	2800      	cmp	r0, #0
 800ed30:	f43f aef4 	beq.w	800eb1c <__ieee754_pow+0x7ac>
 800ed34:	e7e9      	b.n	800ed0a <__ieee754_pow+0x99a>
 800ed36:	f04f 0a00 	mov.w	sl, #0
 800ed3a:	e71a      	b.n	800eb72 <__ieee754_pow+0x802>
 800ed3c:	ec51 0b10 	vmov	r0, r1, d0
 800ed40:	4619      	mov	r1, r3
 800ed42:	e7d4      	b.n	800ecee <__ieee754_pow+0x97e>
 800ed44:	491a      	ldr	r1, [pc, #104]	; (800edb0 <__ieee754_pow+0xa40>)
 800ed46:	2000      	movs	r0, #0
 800ed48:	f7ff bb31 	b.w	800e3ae <__ieee754_pow+0x3e>
 800ed4c:	2000      	movs	r0, #0
 800ed4e:	2100      	movs	r1, #0
 800ed50:	f7ff bb2d 	b.w	800e3ae <__ieee754_pow+0x3e>
 800ed54:	4630      	mov	r0, r6
 800ed56:	4639      	mov	r1, r7
 800ed58:	f7ff bb29 	b.w	800e3ae <__ieee754_pow+0x3e>
 800ed5c:	9204      	str	r2, [sp, #16]
 800ed5e:	f7ff bb7b 	b.w	800e458 <__ieee754_pow+0xe8>
 800ed62:	2300      	movs	r3, #0
 800ed64:	f7ff bb65 	b.w	800e432 <__ieee754_pow+0xc2>
 800ed68:	00000000 	.word	0x00000000
 800ed6c:	3fe62e43 	.word	0x3fe62e43
 800ed70:	fefa39ef 	.word	0xfefa39ef
 800ed74:	3fe62e42 	.word	0x3fe62e42
 800ed78:	0ca86c39 	.word	0x0ca86c39
 800ed7c:	be205c61 	.word	0xbe205c61
 800ed80:	72bea4d0 	.word	0x72bea4d0
 800ed84:	3e663769 	.word	0x3e663769
 800ed88:	c5d26bf1 	.word	0xc5d26bf1
 800ed8c:	3ebbbd41 	.word	0x3ebbbd41
 800ed90:	af25de2c 	.word	0xaf25de2c
 800ed94:	3f11566a 	.word	0x3f11566a
 800ed98:	16bebd93 	.word	0x16bebd93
 800ed9c:	3f66c16c 	.word	0x3f66c16c
 800eda0:	5555553e 	.word	0x5555553e
 800eda4:	3fc55555 	.word	0x3fc55555
 800eda8:	3fe00000 	.word	0x3fe00000
 800edac:	fff00000 	.word	0xfff00000
 800edb0:	3ff00000 	.word	0x3ff00000
 800edb4:	4090cbff 	.word	0x4090cbff
 800edb8:	3f6f3400 	.word	0x3f6f3400
 800edbc:	652b82fe 	.word	0x652b82fe
 800edc0:	3c971547 	.word	0x3c971547
 800edc4:	00000000 	.word	0x00000000

0800edc8 <atan>:
 800edc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edcc:	ec55 4b10 	vmov	r4, r5, d0
 800edd0:	4bc3      	ldr	r3, [pc, #780]	; (800f0e0 <atan+0x318>)
 800edd2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800edd6:	429e      	cmp	r6, r3
 800edd8:	46ab      	mov	fp, r5
 800edda:	dd18      	ble.n	800ee0e <atan+0x46>
 800eddc:	4bc1      	ldr	r3, [pc, #772]	; (800f0e4 <atan+0x31c>)
 800edde:	429e      	cmp	r6, r3
 800ede0:	dc01      	bgt.n	800ede6 <atan+0x1e>
 800ede2:	d109      	bne.n	800edf8 <atan+0x30>
 800ede4:	b144      	cbz	r4, 800edf8 <atan+0x30>
 800ede6:	4622      	mov	r2, r4
 800ede8:	462b      	mov	r3, r5
 800edea:	4620      	mov	r0, r4
 800edec:	4629      	mov	r1, r5
 800edee:	f7f1 fa65 	bl	80002bc <__adddf3>
 800edf2:	4604      	mov	r4, r0
 800edf4:	460d      	mov	r5, r1
 800edf6:	e006      	b.n	800ee06 <atan+0x3e>
 800edf8:	f1bb 0f00 	cmp.w	fp, #0
 800edfc:	f300 8131 	bgt.w	800f062 <atan+0x29a>
 800ee00:	a59b      	add	r5, pc, #620	; (adr r5, 800f070 <atan+0x2a8>)
 800ee02:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ee06:	ec45 4b10 	vmov	d0, r4, r5
 800ee0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee0e:	4bb6      	ldr	r3, [pc, #728]	; (800f0e8 <atan+0x320>)
 800ee10:	429e      	cmp	r6, r3
 800ee12:	dc14      	bgt.n	800ee3e <atan+0x76>
 800ee14:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800ee18:	429e      	cmp	r6, r3
 800ee1a:	dc0d      	bgt.n	800ee38 <atan+0x70>
 800ee1c:	a396      	add	r3, pc, #600	; (adr r3, 800f078 <atan+0x2b0>)
 800ee1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee22:	ee10 0a10 	vmov	r0, s0
 800ee26:	4629      	mov	r1, r5
 800ee28:	f7f1 fa48 	bl	80002bc <__adddf3>
 800ee2c:	4baf      	ldr	r3, [pc, #700]	; (800f0ec <atan+0x324>)
 800ee2e:	2200      	movs	r2, #0
 800ee30:	f7f1 fe8a 	bl	8000b48 <__aeabi_dcmpgt>
 800ee34:	2800      	cmp	r0, #0
 800ee36:	d1e6      	bne.n	800ee06 <atan+0x3e>
 800ee38:	f04f 3aff 	mov.w	sl, #4294967295
 800ee3c:	e02b      	b.n	800ee96 <atan+0xce>
 800ee3e:	f000 f963 	bl	800f108 <fabs>
 800ee42:	4bab      	ldr	r3, [pc, #684]	; (800f0f0 <atan+0x328>)
 800ee44:	429e      	cmp	r6, r3
 800ee46:	ec55 4b10 	vmov	r4, r5, d0
 800ee4a:	f300 80bf 	bgt.w	800efcc <atan+0x204>
 800ee4e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800ee52:	429e      	cmp	r6, r3
 800ee54:	f300 80a0 	bgt.w	800ef98 <atan+0x1d0>
 800ee58:	ee10 2a10 	vmov	r2, s0
 800ee5c:	ee10 0a10 	vmov	r0, s0
 800ee60:	462b      	mov	r3, r5
 800ee62:	4629      	mov	r1, r5
 800ee64:	f7f1 fa2a 	bl	80002bc <__adddf3>
 800ee68:	4ba0      	ldr	r3, [pc, #640]	; (800f0ec <atan+0x324>)
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	f7f1 fa24 	bl	80002b8 <__aeabi_dsub>
 800ee70:	2200      	movs	r2, #0
 800ee72:	4606      	mov	r6, r0
 800ee74:	460f      	mov	r7, r1
 800ee76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ee7a:	4620      	mov	r0, r4
 800ee7c:	4629      	mov	r1, r5
 800ee7e:	f7f1 fa1d 	bl	80002bc <__adddf3>
 800ee82:	4602      	mov	r2, r0
 800ee84:	460b      	mov	r3, r1
 800ee86:	4630      	mov	r0, r6
 800ee88:	4639      	mov	r1, r7
 800ee8a:	f7f1 fcf7 	bl	800087c <__aeabi_ddiv>
 800ee8e:	f04f 0a00 	mov.w	sl, #0
 800ee92:	4604      	mov	r4, r0
 800ee94:	460d      	mov	r5, r1
 800ee96:	4622      	mov	r2, r4
 800ee98:	462b      	mov	r3, r5
 800ee9a:	4620      	mov	r0, r4
 800ee9c:	4629      	mov	r1, r5
 800ee9e:	f7f1 fbc3 	bl	8000628 <__aeabi_dmul>
 800eea2:	4602      	mov	r2, r0
 800eea4:	460b      	mov	r3, r1
 800eea6:	4680      	mov	r8, r0
 800eea8:	4689      	mov	r9, r1
 800eeaa:	f7f1 fbbd 	bl	8000628 <__aeabi_dmul>
 800eeae:	a374      	add	r3, pc, #464	; (adr r3, 800f080 <atan+0x2b8>)
 800eeb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeb4:	4606      	mov	r6, r0
 800eeb6:	460f      	mov	r7, r1
 800eeb8:	f7f1 fbb6 	bl	8000628 <__aeabi_dmul>
 800eebc:	a372      	add	r3, pc, #456	; (adr r3, 800f088 <atan+0x2c0>)
 800eebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eec2:	f7f1 f9fb 	bl	80002bc <__adddf3>
 800eec6:	4632      	mov	r2, r6
 800eec8:	463b      	mov	r3, r7
 800eeca:	f7f1 fbad 	bl	8000628 <__aeabi_dmul>
 800eece:	a370      	add	r3, pc, #448	; (adr r3, 800f090 <atan+0x2c8>)
 800eed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eed4:	f7f1 f9f2 	bl	80002bc <__adddf3>
 800eed8:	4632      	mov	r2, r6
 800eeda:	463b      	mov	r3, r7
 800eedc:	f7f1 fba4 	bl	8000628 <__aeabi_dmul>
 800eee0:	a36d      	add	r3, pc, #436	; (adr r3, 800f098 <atan+0x2d0>)
 800eee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eee6:	f7f1 f9e9 	bl	80002bc <__adddf3>
 800eeea:	4632      	mov	r2, r6
 800eeec:	463b      	mov	r3, r7
 800eeee:	f7f1 fb9b 	bl	8000628 <__aeabi_dmul>
 800eef2:	a36b      	add	r3, pc, #428	; (adr r3, 800f0a0 <atan+0x2d8>)
 800eef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eef8:	f7f1 f9e0 	bl	80002bc <__adddf3>
 800eefc:	4632      	mov	r2, r6
 800eefe:	463b      	mov	r3, r7
 800ef00:	f7f1 fb92 	bl	8000628 <__aeabi_dmul>
 800ef04:	a368      	add	r3, pc, #416	; (adr r3, 800f0a8 <atan+0x2e0>)
 800ef06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef0a:	f7f1 f9d7 	bl	80002bc <__adddf3>
 800ef0e:	4642      	mov	r2, r8
 800ef10:	464b      	mov	r3, r9
 800ef12:	f7f1 fb89 	bl	8000628 <__aeabi_dmul>
 800ef16:	a366      	add	r3, pc, #408	; (adr r3, 800f0b0 <atan+0x2e8>)
 800ef18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef1c:	4680      	mov	r8, r0
 800ef1e:	4689      	mov	r9, r1
 800ef20:	4630      	mov	r0, r6
 800ef22:	4639      	mov	r1, r7
 800ef24:	f7f1 fb80 	bl	8000628 <__aeabi_dmul>
 800ef28:	a363      	add	r3, pc, #396	; (adr r3, 800f0b8 <atan+0x2f0>)
 800ef2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef2e:	f7f1 f9c3 	bl	80002b8 <__aeabi_dsub>
 800ef32:	4632      	mov	r2, r6
 800ef34:	463b      	mov	r3, r7
 800ef36:	f7f1 fb77 	bl	8000628 <__aeabi_dmul>
 800ef3a:	a361      	add	r3, pc, #388	; (adr r3, 800f0c0 <atan+0x2f8>)
 800ef3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef40:	f7f1 f9ba 	bl	80002b8 <__aeabi_dsub>
 800ef44:	4632      	mov	r2, r6
 800ef46:	463b      	mov	r3, r7
 800ef48:	f7f1 fb6e 	bl	8000628 <__aeabi_dmul>
 800ef4c:	a35e      	add	r3, pc, #376	; (adr r3, 800f0c8 <atan+0x300>)
 800ef4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef52:	f7f1 f9b1 	bl	80002b8 <__aeabi_dsub>
 800ef56:	4632      	mov	r2, r6
 800ef58:	463b      	mov	r3, r7
 800ef5a:	f7f1 fb65 	bl	8000628 <__aeabi_dmul>
 800ef5e:	a35c      	add	r3, pc, #368	; (adr r3, 800f0d0 <atan+0x308>)
 800ef60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef64:	f7f1 f9a8 	bl	80002b8 <__aeabi_dsub>
 800ef68:	4632      	mov	r2, r6
 800ef6a:	463b      	mov	r3, r7
 800ef6c:	f7f1 fb5c 	bl	8000628 <__aeabi_dmul>
 800ef70:	4602      	mov	r2, r0
 800ef72:	460b      	mov	r3, r1
 800ef74:	4640      	mov	r0, r8
 800ef76:	4649      	mov	r1, r9
 800ef78:	f7f1 f9a0 	bl	80002bc <__adddf3>
 800ef7c:	4622      	mov	r2, r4
 800ef7e:	462b      	mov	r3, r5
 800ef80:	f7f1 fb52 	bl	8000628 <__aeabi_dmul>
 800ef84:	f1ba 3fff 	cmp.w	sl, #4294967295
 800ef88:	4602      	mov	r2, r0
 800ef8a:	460b      	mov	r3, r1
 800ef8c:	d14b      	bne.n	800f026 <atan+0x25e>
 800ef8e:	4620      	mov	r0, r4
 800ef90:	4629      	mov	r1, r5
 800ef92:	f7f1 f991 	bl	80002b8 <__aeabi_dsub>
 800ef96:	e72c      	b.n	800edf2 <atan+0x2a>
 800ef98:	ee10 0a10 	vmov	r0, s0
 800ef9c:	4b53      	ldr	r3, [pc, #332]	; (800f0ec <atan+0x324>)
 800ef9e:	2200      	movs	r2, #0
 800efa0:	4629      	mov	r1, r5
 800efa2:	f7f1 f989 	bl	80002b8 <__aeabi_dsub>
 800efa6:	4b51      	ldr	r3, [pc, #324]	; (800f0ec <atan+0x324>)
 800efa8:	4606      	mov	r6, r0
 800efaa:	460f      	mov	r7, r1
 800efac:	2200      	movs	r2, #0
 800efae:	4620      	mov	r0, r4
 800efb0:	4629      	mov	r1, r5
 800efb2:	f7f1 f983 	bl	80002bc <__adddf3>
 800efb6:	4602      	mov	r2, r0
 800efb8:	460b      	mov	r3, r1
 800efba:	4630      	mov	r0, r6
 800efbc:	4639      	mov	r1, r7
 800efbe:	f7f1 fc5d 	bl	800087c <__aeabi_ddiv>
 800efc2:	f04f 0a01 	mov.w	sl, #1
 800efc6:	4604      	mov	r4, r0
 800efc8:	460d      	mov	r5, r1
 800efca:	e764      	b.n	800ee96 <atan+0xce>
 800efcc:	4b49      	ldr	r3, [pc, #292]	; (800f0f4 <atan+0x32c>)
 800efce:	429e      	cmp	r6, r3
 800efd0:	da1d      	bge.n	800f00e <atan+0x246>
 800efd2:	ee10 0a10 	vmov	r0, s0
 800efd6:	4b48      	ldr	r3, [pc, #288]	; (800f0f8 <atan+0x330>)
 800efd8:	2200      	movs	r2, #0
 800efda:	4629      	mov	r1, r5
 800efdc:	f7f1 f96c 	bl	80002b8 <__aeabi_dsub>
 800efe0:	4b45      	ldr	r3, [pc, #276]	; (800f0f8 <atan+0x330>)
 800efe2:	4606      	mov	r6, r0
 800efe4:	460f      	mov	r7, r1
 800efe6:	2200      	movs	r2, #0
 800efe8:	4620      	mov	r0, r4
 800efea:	4629      	mov	r1, r5
 800efec:	f7f1 fb1c 	bl	8000628 <__aeabi_dmul>
 800eff0:	4b3e      	ldr	r3, [pc, #248]	; (800f0ec <atan+0x324>)
 800eff2:	2200      	movs	r2, #0
 800eff4:	f7f1 f962 	bl	80002bc <__adddf3>
 800eff8:	4602      	mov	r2, r0
 800effa:	460b      	mov	r3, r1
 800effc:	4630      	mov	r0, r6
 800effe:	4639      	mov	r1, r7
 800f000:	f7f1 fc3c 	bl	800087c <__aeabi_ddiv>
 800f004:	f04f 0a02 	mov.w	sl, #2
 800f008:	4604      	mov	r4, r0
 800f00a:	460d      	mov	r5, r1
 800f00c:	e743      	b.n	800ee96 <atan+0xce>
 800f00e:	462b      	mov	r3, r5
 800f010:	ee10 2a10 	vmov	r2, s0
 800f014:	4939      	ldr	r1, [pc, #228]	; (800f0fc <atan+0x334>)
 800f016:	2000      	movs	r0, #0
 800f018:	f7f1 fc30 	bl	800087c <__aeabi_ddiv>
 800f01c:	f04f 0a03 	mov.w	sl, #3
 800f020:	4604      	mov	r4, r0
 800f022:	460d      	mov	r5, r1
 800f024:	e737      	b.n	800ee96 <atan+0xce>
 800f026:	4b36      	ldr	r3, [pc, #216]	; (800f100 <atan+0x338>)
 800f028:	4e36      	ldr	r6, [pc, #216]	; (800f104 <atan+0x33c>)
 800f02a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f032:	f7f1 f941 	bl	80002b8 <__aeabi_dsub>
 800f036:	4622      	mov	r2, r4
 800f038:	462b      	mov	r3, r5
 800f03a:	f7f1 f93d 	bl	80002b8 <__aeabi_dsub>
 800f03e:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800f042:	4602      	mov	r2, r0
 800f044:	460b      	mov	r3, r1
 800f046:	e9d6 0100 	ldrd	r0, r1, [r6]
 800f04a:	f7f1 f935 	bl	80002b8 <__aeabi_dsub>
 800f04e:	f1bb 0f00 	cmp.w	fp, #0
 800f052:	4604      	mov	r4, r0
 800f054:	460d      	mov	r5, r1
 800f056:	f6bf aed6 	bge.w	800ee06 <atan+0x3e>
 800f05a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f05e:	461d      	mov	r5, r3
 800f060:	e6d1      	b.n	800ee06 <atan+0x3e>
 800f062:	a51d      	add	r5, pc, #116	; (adr r5, 800f0d8 <atan+0x310>)
 800f064:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f068:	e6cd      	b.n	800ee06 <atan+0x3e>
 800f06a:	bf00      	nop
 800f06c:	f3af 8000 	nop.w
 800f070:	54442d18 	.word	0x54442d18
 800f074:	bff921fb 	.word	0xbff921fb
 800f078:	8800759c 	.word	0x8800759c
 800f07c:	7e37e43c 	.word	0x7e37e43c
 800f080:	e322da11 	.word	0xe322da11
 800f084:	3f90ad3a 	.word	0x3f90ad3a
 800f088:	24760deb 	.word	0x24760deb
 800f08c:	3fa97b4b 	.word	0x3fa97b4b
 800f090:	a0d03d51 	.word	0xa0d03d51
 800f094:	3fb10d66 	.word	0x3fb10d66
 800f098:	c54c206e 	.word	0xc54c206e
 800f09c:	3fb745cd 	.word	0x3fb745cd
 800f0a0:	920083ff 	.word	0x920083ff
 800f0a4:	3fc24924 	.word	0x3fc24924
 800f0a8:	5555550d 	.word	0x5555550d
 800f0ac:	3fd55555 	.word	0x3fd55555
 800f0b0:	2c6a6c2f 	.word	0x2c6a6c2f
 800f0b4:	bfa2b444 	.word	0xbfa2b444
 800f0b8:	52defd9a 	.word	0x52defd9a
 800f0bc:	3fadde2d 	.word	0x3fadde2d
 800f0c0:	af749a6d 	.word	0xaf749a6d
 800f0c4:	3fb3b0f2 	.word	0x3fb3b0f2
 800f0c8:	fe231671 	.word	0xfe231671
 800f0cc:	3fbc71c6 	.word	0x3fbc71c6
 800f0d0:	9998ebc4 	.word	0x9998ebc4
 800f0d4:	3fc99999 	.word	0x3fc99999
 800f0d8:	54442d18 	.word	0x54442d18
 800f0dc:	3ff921fb 	.word	0x3ff921fb
 800f0e0:	440fffff 	.word	0x440fffff
 800f0e4:	7ff00000 	.word	0x7ff00000
 800f0e8:	3fdbffff 	.word	0x3fdbffff
 800f0ec:	3ff00000 	.word	0x3ff00000
 800f0f0:	3ff2ffff 	.word	0x3ff2ffff
 800f0f4:	40038000 	.word	0x40038000
 800f0f8:	3ff80000 	.word	0x3ff80000
 800f0fc:	bff00000 	.word	0xbff00000
 800f100:	0800f588 	.word	0x0800f588
 800f104:	0800f568 	.word	0x0800f568

0800f108 <fabs>:
 800f108:	ec51 0b10 	vmov	r0, r1, d0
 800f10c:	ee10 2a10 	vmov	r2, s0
 800f110:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f114:	ec43 2b10 	vmov	d0, r2, r3
 800f118:	4770      	bx	lr
 800f11a:	0000      	movs	r0, r0
 800f11c:	0000      	movs	r0, r0
	...

0800f120 <scalbn>:
 800f120:	b570      	push	{r4, r5, r6, lr}
 800f122:	ec55 4b10 	vmov	r4, r5, d0
 800f126:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800f12a:	4606      	mov	r6, r0
 800f12c:	462b      	mov	r3, r5
 800f12e:	b999      	cbnz	r1, 800f158 <scalbn+0x38>
 800f130:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f134:	4323      	orrs	r3, r4
 800f136:	d03f      	beq.n	800f1b8 <scalbn+0x98>
 800f138:	4b35      	ldr	r3, [pc, #212]	; (800f210 <scalbn+0xf0>)
 800f13a:	4629      	mov	r1, r5
 800f13c:	ee10 0a10 	vmov	r0, s0
 800f140:	2200      	movs	r2, #0
 800f142:	f7f1 fa71 	bl	8000628 <__aeabi_dmul>
 800f146:	4b33      	ldr	r3, [pc, #204]	; (800f214 <scalbn+0xf4>)
 800f148:	429e      	cmp	r6, r3
 800f14a:	4604      	mov	r4, r0
 800f14c:	460d      	mov	r5, r1
 800f14e:	da10      	bge.n	800f172 <scalbn+0x52>
 800f150:	a327      	add	r3, pc, #156	; (adr r3, 800f1f0 <scalbn+0xd0>)
 800f152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f156:	e01f      	b.n	800f198 <scalbn+0x78>
 800f158:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800f15c:	4291      	cmp	r1, r2
 800f15e:	d10c      	bne.n	800f17a <scalbn+0x5a>
 800f160:	ee10 2a10 	vmov	r2, s0
 800f164:	4620      	mov	r0, r4
 800f166:	4629      	mov	r1, r5
 800f168:	f7f1 f8a8 	bl	80002bc <__adddf3>
 800f16c:	4604      	mov	r4, r0
 800f16e:	460d      	mov	r5, r1
 800f170:	e022      	b.n	800f1b8 <scalbn+0x98>
 800f172:	460b      	mov	r3, r1
 800f174:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f178:	3936      	subs	r1, #54	; 0x36
 800f17a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800f17e:	4296      	cmp	r6, r2
 800f180:	dd0d      	ble.n	800f19e <scalbn+0x7e>
 800f182:	2d00      	cmp	r5, #0
 800f184:	a11c      	add	r1, pc, #112	; (adr r1, 800f1f8 <scalbn+0xd8>)
 800f186:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f18a:	da02      	bge.n	800f192 <scalbn+0x72>
 800f18c:	a11c      	add	r1, pc, #112	; (adr r1, 800f200 <scalbn+0xe0>)
 800f18e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f192:	a319      	add	r3, pc, #100	; (adr r3, 800f1f8 <scalbn+0xd8>)
 800f194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f198:	f7f1 fa46 	bl	8000628 <__aeabi_dmul>
 800f19c:	e7e6      	b.n	800f16c <scalbn+0x4c>
 800f19e:	1872      	adds	r2, r6, r1
 800f1a0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f1a4:	428a      	cmp	r2, r1
 800f1a6:	dcec      	bgt.n	800f182 <scalbn+0x62>
 800f1a8:	2a00      	cmp	r2, #0
 800f1aa:	dd08      	ble.n	800f1be <scalbn+0x9e>
 800f1ac:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f1b0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f1b4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f1b8:	ec45 4b10 	vmov	d0, r4, r5
 800f1bc:	bd70      	pop	{r4, r5, r6, pc}
 800f1be:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f1c2:	da08      	bge.n	800f1d6 <scalbn+0xb6>
 800f1c4:	2d00      	cmp	r5, #0
 800f1c6:	a10a      	add	r1, pc, #40	; (adr r1, 800f1f0 <scalbn+0xd0>)
 800f1c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f1cc:	dac0      	bge.n	800f150 <scalbn+0x30>
 800f1ce:	a10e      	add	r1, pc, #56	; (adr r1, 800f208 <scalbn+0xe8>)
 800f1d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f1d4:	e7bc      	b.n	800f150 <scalbn+0x30>
 800f1d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f1da:	3236      	adds	r2, #54	; 0x36
 800f1dc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f1e0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f1e4:	4620      	mov	r0, r4
 800f1e6:	4b0c      	ldr	r3, [pc, #48]	; (800f218 <scalbn+0xf8>)
 800f1e8:	2200      	movs	r2, #0
 800f1ea:	e7d5      	b.n	800f198 <scalbn+0x78>
 800f1ec:	f3af 8000 	nop.w
 800f1f0:	c2f8f359 	.word	0xc2f8f359
 800f1f4:	01a56e1f 	.word	0x01a56e1f
 800f1f8:	8800759c 	.word	0x8800759c
 800f1fc:	7e37e43c 	.word	0x7e37e43c
 800f200:	8800759c 	.word	0x8800759c
 800f204:	fe37e43c 	.word	0xfe37e43c
 800f208:	c2f8f359 	.word	0xc2f8f359
 800f20c:	81a56e1f 	.word	0x81a56e1f
 800f210:	43500000 	.word	0x43500000
 800f214:	ffff3cb0 	.word	0xffff3cb0
 800f218:	3c900000 	.word	0x3c900000

0800f21c <with_errno>:
 800f21c:	b570      	push	{r4, r5, r6, lr}
 800f21e:	4604      	mov	r4, r0
 800f220:	460d      	mov	r5, r1
 800f222:	4616      	mov	r6, r2
 800f224:	f7fe fae2 	bl	800d7ec <__errno>
 800f228:	4629      	mov	r1, r5
 800f22a:	6006      	str	r6, [r0, #0]
 800f22c:	4620      	mov	r0, r4
 800f22e:	bd70      	pop	{r4, r5, r6, pc}

0800f230 <xflow>:
 800f230:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f232:	4614      	mov	r4, r2
 800f234:	461d      	mov	r5, r3
 800f236:	b108      	cbz	r0, 800f23c <xflow+0xc>
 800f238:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f23c:	e9cd 2300 	strd	r2, r3, [sp]
 800f240:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f244:	4620      	mov	r0, r4
 800f246:	4629      	mov	r1, r5
 800f248:	f7f1 f9ee 	bl	8000628 <__aeabi_dmul>
 800f24c:	2222      	movs	r2, #34	; 0x22
 800f24e:	b003      	add	sp, #12
 800f250:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f254:	f7ff bfe2 	b.w	800f21c <with_errno>

0800f258 <__math_uflow>:
 800f258:	b508      	push	{r3, lr}
 800f25a:	2200      	movs	r2, #0
 800f25c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f260:	f7ff ffe6 	bl	800f230 <xflow>
 800f264:	ec41 0b10 	vmov	d0, r0, r1
 800f268:	bd08      	pop	{r3, pc}

0800f26a <__math_oflow>:
 800f26a:	b508      	push	{r3, lr}
 800f26c:	2200      	movs	r2, #0
 800f26e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800f272:	f7ff ffdd 	bl	800f230 <xflow>
 800f276:	ec41 0b10 	vmov	d0, r0, r1
 800f27a:	bd08      	pop	{r3, pc}

0800f27c <__ieee754_sqrt>:
 800f27c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f280:	ec55 4b10 	vmov	r4, r5, d0
 800f284:	4e67      	ldr	r6, [pc, #412]	; (800f424 <__ieee754_sqrt+0x1a8>)
 800f286:	43ae      	bics	r6, r5
 800f288:	ee10 0a10 	vmov	r0, s0
 800f28c:	ee10 2a10 	vmov	r2, s0
 800f290:	4629      	mov	r1, r5
 800f292:	462b      	mov	r3, r5
 800f294:	d10d      	bne.n	800f2b2 <__ieee754_sqrt+0x36>
 800f296:	f7f1 f9c7 	bl	8000628 <__aeabi_dmul>
 800f29a:	4602      	mov	r2, r0
 800f29c:	460b      	mov	r3, r1
 800f29e:	4620      	mov	r0, r4
 800f2a0:	4629      	mov	r1, r5
 800f2a2:	f7f1 f80b 	bl	80002bc <__adddf3>
 800f2a6:	4604      	mov	r4, r0
 800f2a8:	460d      	mov	r5, r1
 800f2aa:	ec45 4b10 	vmov	d0, r4, r5
 800f2ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2b2:	2d00      	cmp	r5, #0
 800f2b4:	dc0b      	bgt.n	800f2ce <__ieee754_sqrt+0x52>
 800f2b6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f2ba:	4326      	orrs	r6, r4
 800f2bc:	d0f5      	beq.n	800f2aa <__ieee754_sqrt+0x2e>
 800f2be:	b135      	cbz	r5, 800f2ce <__ieee754_sqrt+0x52>
 800f2c0:	f7f0 fffa 	bl	80002b8 <__aeabi_dsub>
 800f2c4:	4602      	mov	r2, r0
 800f2c6:	460b      	mov	r3, r1
 800f2c8:	f7f1 fad8 	bl	800087c <__aeabi_ddiv>
 800f2cc:	e7eb      	b.n	800f2a6 <__ieee754_sqrt+0x2a>
 800f2ce:	1509      	asrs	r1, r1, #20
 800f2d0:	f000 808d 	beq.w	800f3ee <__ieee754_sqrt+0x172>
 800f2d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f2d8:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800f2dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f2e0:	07c9      	lsls	r1, r1, #31
 800f2e2:	bf5c      	itt	pl
 800f2e4:	005b      	lslpl	r3, r3, #1
 800f2e6:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800f2ea:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f2ee:	bf58      	it	pl
 800f2f0:	0052      	lslpl	r2, r2, #1
 800f2f2:	2500      	movs	r5, #0
 800f2f4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f2f8:	1076      	asrs	r6, r6, #1
 800f2fa:	0052      	lsls	r2, r2, #1
 800f2fc:	f04f 0e16 	mov.w	lr, #22
 800f300:	46ac      	mov	ip, r5
 800f302:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f306:	eb0c 0001 	add.w	r0, ip, r1
 800f30a:	4298      	cmp	r0, r3
 800f30c:	bfde      	ittt	le
 800f30e:	1a1b      	suble	r3, r3, r0
 800f310:	eb00 0c01 	addle.w	ip, r0, r1
 800f314:	186d      	addle	r5, r5, r1
 800f316:	005b      	lsls	r3, r3, #1
 800f318:	f1be 0e01 	subs.w	lr, lr, #1
 800f31c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f320:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800f324:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800f328:	d1ed      	bne.n	800f306 <__ieee754_sqrt+0x8a>
 800f32a:	4674      	mov	r4, lr
 800f32c:	2720      	movs	r7, #32
 800f32e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800f332:	4563      	cmp	r3, ip
 800f334:	eb01 000e 	add.w	r0, r1, lr
 800f338:	dc02      	bgt.n	800f340 <__ieee754_sqrt+0xc4>
 800f33a:	d113      	bne.n	800f364 <__ieee754_sqrt+0xe8>
 800f33c:	4290      	cmp	r0, r2
 800f33e:	d811      	bhi.n	800f364 <__ieee754_sqrt+0xe8>
 800f340:	2800      	cmp	r0, #0
 800f342:	eb00 0e01 	add.w	lr, r0, r1
 800f346:	da57      	bge.n	800f3f8 <__ieee754_sqrt+0x17c>
 800f348:	f1be 0f00 	cmp.w	lr, #0
 800f34c:	db54      	blt.n	800f3f8 <__ieee754_sqrt+0x17c>
 800f34e:	f10c 0801 	add.w	r8, ip, #1
 800f352:	eba3 030c 	sub.w	r3, r3, ip
 800f356:	4290      	cmp	r0, r2
 800f358:	bf88      	it	hi
 800f35a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800f35e:	1a12      	subs	r2, r2, r0
 800f360:	440c      	add	r4, r1
 800f362:	46c4      	mov	ip, r8
 800f364:	005b      	lsls	r3, r3, #1
 800f366:	3f01      	subs	r7, #1
 800f368:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f36c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800f370:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800f374:	d1dd      	bne.n	800f332 <__ieee754_sqrt+0xb6>
 800f376:	4313      	orrs	r3, r2
 800f378:	d01b      	beq.n	800f3b2 <__ieee754_sqrt+0x136>
 800f37a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800f428 <__ieee754_sqrt+0x1ac>
 800f37e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800f42c <__ieee754_sqrt+0x1b0>
 800f382:	e9da 0100 	ldrd	r0, r1, [sl]
 800f386:	e9db 2300 	ldrd	r2, r3, [fp]
 800f38a:	f7f0 ff95 	bl	80002b8 <__aeabi_dsub>
 800f38e:	e9da 8900 	ldrd	r8, r9, [sl]
 800f392:	4602      	mov	r2, r0
 800f394:	460b      	mov	r3, r1
 800f396:	4640      	mov	r0, r8
 800f398:	4649      	mov	r1, r9
 800f39a:	f7f1 fbc1 	bl	8000b20 <__aeabi_dcmple>
 800f39e:	b140      	cbz	r0, 800f3b2 <__ieee754_sqrt+0x136>
 800f3a0:	f1b4 3fff 	cmp.w	r4, #4294967295
 800f3a4:	e9da 0100 	ldrd	r0, r1, [sl]
 800f3a8:	e9db 2300 	ldrd	r2, r3, [fp]
 800f3ac:	d126      	bne.n	800f3fc <__ieee754_sqrt+0x180>
 800f3ae:	3501      	adds	r5, #1
 800f3b0:	463c      	mov	r4, r7
 800f3b2:	106a      	asrs	r2, r5, #1
 800f3b4:	0863      	lsrs	r3, r4, #1
 800f3b6:	07e9      	lsls	r1, r5, #31
 800f3b8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800f3bc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800f3c0:	bf48      	it	mi
 800f3c2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800f3c6:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800f3ca:	461c      	mov	r4, r3
 800f3cc:	e76d      	b.n	800f2aa <__ieee754_sqrt+0x2e>
 800f3ce:	0ad3      	lsrs	r3, r2, #11
 800f3d0:	3815      	subs	r0, #21
 800f3d2:	0552      	lsls	r2, r2, #21
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d0fa      	beq.n	800f3ce <__ieee754_sqrt+0x152>
 800f3d8:	02dc      	lsls	r4, r3, #11
 800f3da:	d50a      	bpl.n	800f3f2 <__ieee754_sqrt+0x176>
 800f3dc:	f1c1 0420 	rsb	r4, r1, #32
 800f3e0:	fa22 f404 	lsr.w	r4, r2, r4
 800f3e4:	1e4d      	subs	r5, r1, #1
 800f3e6:	408a      	lsls	r2, r1
 800f3e8:	4323      	orrs	r3, r4
 800f3ea:	1b41      	subs	r1, r0, r5
 800f3ec:	e772      	b.n	800f2d4 <__ieee754_sqrt+0x58>
 800f3ee:	4608      	mov	r0, r1
 800f3f0:	e7f0      	b.n	800f3d4 <__ieee754_sqrt+0x158>
 800f3f2:	005b      	lsls	r3, r3, #1
 800f3f4:	3101      	adds	r1, #1
 800f3f6:	e7ef      	b.n	800f3d8 <__ieee754_sqrt+0x15c>
 800f3f8:	46e0      	mov	r8, ip
 800f3fa:	e7aa      	b.n	800f352 <__ieee754_sqrt+0xd6>
 800f3fc:	f7f0 ff5e 	bl	80002bc <__adddf3>
 800f400:	e9da 8900 	ldrd	r8, r9, [sl]
 800f404:	4602      	mov	r2, r0
 800f406:	460b      	mov	r3, r1
 800f408:	4640      	mov	r0, r8
 800f40a:	4649      	mov	r1, r9
 800f40c:	f7f1 fb7e 	bl	8000b0c <__aeabi_dcmplt>
 800f410:	b120      	cbz	r0, 800f41c <__ieee754_sqrt+0x1a0>
 800f412:	1ca0      	adds	r0, r4, #2
 800f414:	bf08      	it	eq
 800f416:	3501      	addeq	r5, #1
 800f418:	3402      	adds	r4, #2
 800f41a:	e7ca      	b.n	800f3b2 <__ieee754_sqrt+0x136>
 800f41c:	3401      	adds	r4, #1
 800f41e:	f024 0401 	bic.w	r4, r4, #1
 800f422:	e7c6      	b.n	800f3b2 <__ieee754_sqrt+0x136>
 800f424:	7ff00000 	.word	0x7ff00000
 800f428:	200000a0 	.word	0x200000a0
 800f42c:	200000a8 	.word	0x200000a8

0800f430 <_init>:
 800f430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f432:	bf00      	nop
 800f434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f436:	bc08      	pop	{r3}
 800f438:	469e      	mov	lr, r3
 800f43a:	4770      	bx	lr

0800f43c <_fini>:
 800f43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f43e:	bf00      	nop
 800f440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f442:	bc08      	pop	{r3}
 800f444:	469e      	mov	lr, r3
 800f446:	4770      	bx	lr
