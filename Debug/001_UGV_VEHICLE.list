
001_UGV_VEHICLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fa54  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  0800fc28  0800fc28  0001fc28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fd88  0800fd88  00020140  2**0
                  CONTENTS
  4 .ARM          00000008  0800fd88  0800fd88  0001fd88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fd90  0800fd90  00020140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fd90  0800fd90  0001fd90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fd94  0800fd94  0001fd94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000140  20000000  0800fd98  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000055a4  20000140  0800fed8  00020140  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200056e4  0800fed8  000256e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY
 13 .debug_info   00029090  00000000  00000000  000201b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000069be  00000000  00000000  00049243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f50  00000000  00000000  0004fc08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000180b  00000000  00000000  00051b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00008c33  00000000  00000000  00053363  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002e9f5  00000000  00000000  0005bf96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e36a3  00000000  00000000  0008a98b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000088e4  00000000  00000000  0016e030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00176914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000140 	.word	0x20000140
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800fc0c 	.word	0x0800fc0c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000144 	.word	0x20000144
 800020c:	0800fc0c 	.word	0x0800fc0c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2uiz>:
 8000b88:	004a      	lsls	r2, r1, #1
 8000b8a:	d211      	bcs.n	8000bb0 <__aeabi_d2uiz+0x28>
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d211      	bcs.n	8000bb6 <__aeabi_d2uiz+0x2e>
 8000b92:	d50d      	bpl.n	8000bb0 <__aeabi_d2uiz+0x28>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d40e      	bmi.n	8000bbc <__aeabi_d2uiz+0x34>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_d2uiz+0x3a>
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0000 	mov.w	r0, #0
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b970 	b.w	8000f60 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9e08      	ldr	r6, [sp, #32]
 8000c9e:	460d      	mov	r5, r1
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	460f      	mov	r7, r1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d14a      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4694      	mov	ip, r2
 8000cac:	d965      	bls.n	8000d7a <__udivmoddi4+0xe2>
 8000cae:	fab2 f382 	clz	r3, r2
 8000cb2:	b143      	cbz	r3, 8000cc6 <__udivmoddi4+0x2e>
 8000cb4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cb8:	f1c3 0220 	rsb	r2, r3, #32
 8000cbc:	409f      	lsls	r7, r3
 8000cbe:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc2:	4317      	orrs	r7, r2
 8000cc4:	409c      	lsls	r4, r3
 8000cc6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cca:	fa1f f58c 	uxth.w	r5, ip
 8000cce:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cd2:	0c22      	lsrs	r2, r4, #16
 8000cd4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cd8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cdc:	fb01 f005 	mul.w	r0, r1, r5
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	d90a      	bls.n	8000cfa <__udivmoddi4+0x62>
 8000ce4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ce8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cec:	f080 811c 	bcs.w	8000f28 <__udivmoddi4+0x290>
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	f240 8119 	bls.w	8000f28 <__udivmoddi4+0x290>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	4462      	add	r2, ip
 8000cfa:	1a12      	subs	r2, r2, r0
 8000cfc:	b2a4      	uxth	r4, r4
 8000cfe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d06:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0a:	fb00 f505 	mul.w	r5, r0, r5
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	d90a      	bls.n	8000d28 <__udivmoddi4+0x90>
 8000d12:	eb1c 0404 	adds.w	r4, ip, r4
 8000d16:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1a:	f080 8107 	bcs.w	8000f2c <__udivmoddi4+0x294>
 8000d1e:	42a5      	cmp	r5, r4
 8000d20:	f240 8104 	bls.w	8000f2c <__udivmoddi4+0x294>
 8000d24:	4464      	add	r4, ip
 8000d26:	3802      	subs	r0, #2
 8000d28:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d2c:	1b64      	subs	r4, r4, r5
 8000d2e:	2100      	movs	r1, #0
 8000d30:	b11e      	cbz	r6, 8000d3a <__udivmoddi4+0xa2>
 8000d32:	40dc      	lsrs	r4, r3
 8000d34:	2300      	movs	r3, #0
 8000d36:	e9c6 4300 	strd	r4, r3, [r6]
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0xbc>
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	f000 80ed 	beq.w	8000f22 <__udivmoddi4+0x28a>
 8000d48:	2100      	movs	r1, #0
 8000d4a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d54:	fab3 f183 	clz	r1, r3
 8000d58:	2900      	cmp	r1, #0
 8000d5a:	d149      	bne.n	8000df0 <__udivmoddi4+0x158>
 8000d5c:	42ab      	cmp	r3, r5
 8000d5e:	d302      	bcc.n	8000d66 <__udivmoddi4+0xce>
 8000d60:	4282      	cmp	r2, r0
 8000d62:	f200 80f8 	bhi.w	8000f56 <__udivmoddi4+0x2be>
 8000d66:	1a84      	subs	r4, r0, r2
 8000d68:	eb65 0203 	sbc.w	r2, r5, r3
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	4617      	mov	r7, r2
 8000d70:	2e00      	cmp	r6, #0
 8000d72:	d0e2      	beq.n	8000d3a <__udivmoddi4+0xa2>
 8000d74:	e9c6 4700 	strd	r4, r7, [r6]
 8000d78:	e7df      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d7a:	b902      	cbnz	r2, 8000d7e <__udivmoddi4+0xe6>
 8000d7c:	deff      	udf	#255	; 0xff
 8000d7e:	fab2 f382 	clz	r3, r2
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f040 8090 	bne.w	8000ea8 <__udivmoddi4+0x210>
 8000d88:	1a8a      	subs	r2, r1, r2
 8000d8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d8e:	fa1f fe8c 	uxth.w	lr, ip
 8000d92:	2101      	movs	r1, #1
 8000d94:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d98:	fb07 2015 	mls	r0, r7, r5, r2
 8000d9c:	0c22      	lsrs	r2, r4, #16
 8000d9e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000da2:	fb0e f005 	mul.w	r0, lr, r5
 8000da6:	4290      	cmp	r0, r2
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x124>
 8000daa:	eb1c 0202 	adds.w	r2, ip, r2
 8000dae:	f105 38ff 	add.w	r8, r5, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x122>
 8000db4:	4290      	cmp	r0, r2
 8000db6:	f200 80cb 	bhi.w	8000f50 <__udivmoddi4+0x2b8>
 8000dba:	4645      	mov	r5, r8
 8000dbc:	1a12      	subs	r2, r2, r0
 8000dbe:	b2a4      	uxth	r4, r4
 8000dc0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dc4:	fb07 2210 	mls	r2, r7, r0, r2
 8000dc8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dcc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd0:	45a6      	cmp	lr, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x14e>
 8000dd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ddc:	d202      	bcs.n	8000de4 <__udivmoddi4+0x14c>
 8000dde:	45a6      	cmp	lr, r4
 8000de0:	f200 80bb 	bhi.w	8000f5a <__udivmoddi4+0x2c2>
 8000de4:	4610      	mov	r0, r2
 8000de6:	eba4 040e 	sub.w	r4, r4, lr
 8000dea:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dee:	e79f      	b.n	8000d30 <__udivmoddi4+0x98>
 8000df0:	f1c1 0720 	rsb	r7, r1, #32
 8000df4:	408b      	lsls	r3, r1
 8000df6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dfa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dfe:	fa05 f401 	lsl.w	r4, r5, r1
 8000e02:	fa20 f307 	lsr.w	r3, r0, r7
 8000e06:	40fd      	lsrs	r5, r7
 8000e08:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e0c:	4323      	orrs	r3, r4
 8000e0e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e12:	fa1f fe8c 	uxth.w	lr, ip
 8000e16:	fb09 5518 	mls	r5, r9, r8, r5
 8000e1a:	0c1c      	lsrs	r4, r3, #16
 8000e1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e20:	fb08 f50e 	mul.w	r5, r8, lr
 8000e24:	42a5      	cmp	r5, r4
 8000e26:	fa02 f201 	lsl.w	r2, r2, r1
 8000e2a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e2e:	d90b      	bls.n	8000e48 <__udivmoddi4+0x1b0>
 8000e30:	eb1c 0404 	adds.w	r4, ip, r4
 8000e34:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e38:	f080 8088 	bcs.w	8000f4c <__udivmoddi4+0x2b4>
 8000e3c:	42a5      	cmp	r5, r4
 8000e3e:	f240 8085 	bls.w	8000f4c <__udivmoddi4+0x2b4>
 8000e42:	f1a8 0802 	sub.w	r8, r8, #2
 8000e46:	4464      	add	r4, ip
 8000e48:	1b64      	subs	r4, r4, r5
 8000e4a:	b29d      	uxth	r5, r3
 8000e4c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e50:	fb09 4413 	mls	r4, r9, r3, r4
 8000e54:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e58:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x1da>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e68:	d26c      	bcs.n	8000f44 <__udivmoddi4+0x2ac>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	d96a      	bls.n	8000f44 <__udivmoddi4+0x2ac>
 8000e6e:	3b02      	subs	r3, #2
 8000e70:	4464      	add	r4, ip
 8000e72:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e76:	fba3 9502 	umull	r9, r5, r3, r2
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	42ac      	cmp	r4, r5
 8000e80:	46c8      	mov	r8, r9
 8000e82:	46ae      	mov	lr, r5
 8000e84:	d356      	bcc.n	8000f34 <__udivmoddi4+0x29c>
 8000e86:	d053      	beq.n	8000f30 <__udivmoddi4+0x298>
 8000e88:	b156      	cbz	r6, 8000ea0 <__udivmoddi4+0x208>
 8000e8a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e8e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e92:	fa04 f707 	lsl.w	r7, r4, r7
 8000e96:	40ca      	lsrs	r2, r1
 8000e98:	40cc      	lsrs	r4, r1
 8000e9a:	4317      	orrs	r7, r2
 8000e9c:	e9c6 7400 	strd	r7, r4, [r6]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea8:	f1c3 0120 	rsb	r1, r3, #32
 8000eac:	fa02 fc03 	lsl.w	ip, r2, r3
 8000eb0:	fa20 f201 	lsr.w	r2, r0, r1
 8000eb4:	fa25 f101 	lsr.w	r1, r5, r1
 8000eb8:	409d      	lsls	r5, r3
 8000eba:	432a      	orrs	r2, r5
 8000ebc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec0:	fa1f fe8c 	uxth.w	lr, ip
 8000ec4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ec8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ed2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ed6:	428d      	cmp	r5, r1
 8000ed8:	fa04 f403 	lsl.w	r4, r4, r3
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x258>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ee6:	d22f      	bcs.n	8000f48 <__udivmoddi4+0x2b0>
 8000ee8:	428d      	cmp	r5, r1
 8000eea:	d92d      	bls.n	8000f48 <__udivmoddi4+0x2b0>
 8000eec:	3802      	subs	r0, #2
 8000eee:	4461      	add	r1, ip
 8000ef0:	1b49      	subs	r1, r1, r5
 8000ef2:	b292      	uxth	r2, r2
 8000ef4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ef8:	fb07 1115 	mls	r1, r7, r5, r1
 8000efc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f00:	fb05 f10e 	mul.w	r1, r5, lr
 8000f04:	4291      	cmp	r1, r2
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x282>
 8000f08:	eb1c 0202 	adds.w	r2, ip, r2
 8000f0c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f10:	d216      	bcs.n	8000f40 <__udivmoddi4+0x2a8>
 8000f12:	4291      	cmp	r1, r2
 8000f14:	d914      	bls.n	8000f40 <__udivmoddi4+0x2a8>
 8000f16:	3d02      	subs	r5, #2
 8000f18:	4462      	add	r2, ip
 8000f1a:	1a52      	subs	r2, r2, r1
 8000f1c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f20:	e738      	b.n	8000d94 <__udivmoddi4+0xfc>
 8000f22:	4631      	mov	r1, r6
 8000f24:	4630      	mov	r0, r6
 8000f26:	e708      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000f28:	4639      	mov	r1, r7
 8000f2a:	e6e6      	b.n	8000cfa <__udivmoddi4+0x62>
 8000f2c:	4610      	mov	r0, r2
 8000f2e:	e6fb      	b.n	8000d28 <__udivmoddi4+0x90>
 8000f30:	4548      	cmp	r0, r9
 8000f32:	d2a9      	bcs.n	8000e88 <__udivmoddi4+0x1f0>
 8000f34:	ebb9 0802 	subs.w	r8, r9, r2
 8000f38:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	e7a3      	b.n	8000e88 <__udivmoddi4+0x1f0>
 8000f40:	4645      	mov	r5, r8
 8000f42:	e7ea      	b.n	8000f1a <__udivmoddi4+0x282>
 8000f44:	462b      	mov	r3, r5
 8000f46:	e794      	b.n	8000e72 <__udivmoddi4+0x1da>
 8000f48:	4640      	mov	r0, r8
 8000f4a:	e7d1      	b.n	8000ef0 <__udivmoddi4+0x258>
 8000f4c:	46d0      	mov	r8, sl
 8000f4e:	e77b      	b.n	8000e48 <__udivmoddi4+0x1b0>
 8000f50:	3d02      	subs	r5, #2
 8000f52:	4462      	add	r2, ip
 8000f54:	e732      	b.n	8000dbc <__udivmoddi4+0x124>
 8000f56:	4608      	mov	r0, r1
 8000f58:	e70a      	b.n	8000d70 <__udivmoddi4+0xd8>
 8000f5a:	4464      	add	r4, ip
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	e742      	b.n	8000de6 <__udivmoddi4+0x14e>

08000f60 <__aeabi_idiv0>:
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08a      	sub	sp, #40	; 0x28
 8000f68:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]
 8000f76:	60da      	str	r2, [r3, #12]
 8000f78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	613b      	str	r3, [r7, #16]
 8000f7e:	4b46      	ldr	r3, [pc, #280]	; (8001098 <MX_GPIO_Init+0x134>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a45      	ldr	r2, [pc, #276]	; (8001098 <MX_GPIO_Init+0x134>)
 8000f84:	f043 0304 	orr.w	r3, r3, #4
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b43      	ldr	r3, [pc, #268]	; (8001098 <MX_GPIO_Init+0x134>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0304 	and.w	r3, r3, #4
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	4b3f      	ldr	r3, [pc, #252]	; (8001098 <MX_GPIO_Init+0x134>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a3e      	ldr	r2, [pc, #248]	; (8001098 <MX_GPIO_Init+0x134>)
 8000fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b3c      	ldr	r3, [pc, #240]	; (8001098 <MX_GPIO_Init+0x134>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	4b38      	ldr	r3, [pc, #224]	; (8001098 <MX_GPIO_Init+0x134>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a37      	ldr	r2, [pc, #220]	; (8001098 <MX_GPIO_Init+0x134>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b35      	ldr	r3, [pc, #212]	; (8001098 <MX_GPIO_Init+0x134>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	607b      	str	r3, [r7, #4]
 8000fd2:	4b31      	ldr	r3, [pc, #196]	; (8001098 <MX_GPIO_Init+0x134>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a30      	ldr	r2, [pc, #192]	; (8001098 <MX_GPIO_Init+0x134>)
 8000fd8:	f043 0302 	orr.w	r3, r3, #2
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b2e      	ldr	r3, [pc, #184]	; (8001098 <MX_GPIO_Init+0x134>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8000fea:	2201      	movs	r2, #1
 8000fec:	2101      	movs	r1, #1
 8000fee:	482b      	ldr	r0, [pc, #172]	; (800109c <MX_GPIO_Init+0x138>)
 8000ff0:	f001 fd86 	bl	8002b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUZZER_Pin|COMPASS_VCC_Pin, GPIO_PIN_RESET);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f241 0110 	movw	r1, #4112	; 0x1010
 8000ffa:	4828      	ldr	r0, [pc, #160]	; (800109c <MX_GPIO_Init+0x138>)
 8000ffc:	f001 fd80 	bl	8002b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|LID_LED_Pin, GPIO_PIN_RESET);
 8001000:	2200      	movs	r2, #0
 8001002:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8001006:	4826      	ldr	r0, [pc, #152]	; (80010a0 <MX_GPIO_Init+0x13c>)
 8001008:	f001 fd7a 	bl	8002b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800100c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001010:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001012:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001016:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	4619      	mov	r1, r3
 8001022:	481e      	ldr	r0, [pc, #120]	; (800109c <MX_GPIO_Init+0x138>)
 8001024:	f001 fbc0 	bl	80027a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NSS_Pin|BUZZER_Pin|COMPASS_VCC_Pin;
 8001028:	f241 0311 	movw	r3, #4113	; 0x1011
 800102c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102e:	2301      	movs	r3, #1
 8001030:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	2300      	movs	r3, #0
 8001038:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800103a:	f107 0314 	add.w	r3, r7, #20
 800103e:	4619      	mov	r1, r3
 8001040:	4816      	ldr	r0, [pc, #88]	; (800109c <MX_GPIO_Init+0x138>)
 8001042:	f001 fbb1 	bl	80027a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8001046:	2302      	movs	r3, #2
 8001048:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800104a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800104e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	4619      	mov	r1, r3
 800105a:	4810      	ldr	r0, [pc, #64]	; (800109c <MX_GPIO_Init+0x138>)
 800105c:	f001 fba4 	bl	80027a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_Pin|LID_LED_Pin;
 8001060:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001064:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001066:	2301      	movs	r3, #1
 8001068:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106e:	2300      	movs	r3, #0
 8001070:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001072:	f107 0314 	add.w	r3, r7, #20
 8001076:	4619      	mov	r1, r3
 8001078:	4809      	ldr	r0, [pc, #36]	; (80010a0 <MX_GPIO_Init+0x13c>)
 800107a:	f001 fb95 	bl	80027a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	2105      	movs	r1, #5
 8001082:	2007      	movs	r0, #7
 8001084:	f001 fad4 	bl	8002630 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001088:	2007      	movs	r0, #7
 800108a:	f001 faed 	bl	8002668 <HAL_NVIC_EnableIRQ>

}
 800108e:	bf00      	nop
 8001090:	3728      	adds	r7, #40	; 0x28
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40023800 	.word	0x40023800
 800109c:	40020800 	.word	0x40020800
 80010a0:	40020000 	.word	0x40020000

080010a4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == DIO0_Pin)
 80010ae:	88fb      	ldrh	r3, [r7, #6]
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d101      	bne.n	80010b8 <HAL_GPIO_EXTI_Callback+0x14>
	{
		dioIrqCallback();
 80010b4:	f00c fd36 	bl	800db24 <dioIrqCallback>
	}
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010c4:	4b12      	ldr	r3, [pc, #72]	; (8001110 <MX_I2C1_Init+0x50>)
 80010c6:	4a13      	ldr	r2, [pc, #76]	; (8001114 <MX_I2C1_Init+0x54>)
 80010c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010ca:	4b11      	ldr	r3, [pc, #68]	; (8001110 <MX_I2C1_Init+0x50>)
 80010cc:	4a12      	ldr	r2, [pc, #72]	; (8001118 <MX_I2C1_Init+0x58>)
 80010ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010d0:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <MX_I2C1_Init+0x50>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010d6:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <MX_I2C1_Init+0x50>)
 80010d8:	2200      	movs	r2, #0
 80010da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010dc:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <MX_I2C1_Init+0x50>)
 80010de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010e4:	4b0a      	ldr	r3, [pc, #40]	; (8001110 <MX_I2C1_Init+0x50>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010ea:	4b09      	ldr	r3, [pc, #36]	; (8001110 <MX_I2C1_Init+0x50>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010f0:	4b07      	ldr	r3, [pc, #28]	; (8001110 <MX_I2C1_Init+0x50>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <MX_I2C1_Init+0x50>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010fc:	4804      	ldr	r0, [pc, #16]	; (8001110 <MX_I2C1_Init+0x50>)
 80010fe:	f001 fd31 	bl	8002b64 <HAL_I2C_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001108:	f000 f99e 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}
 8001110:	2000015c 	.word	0x2000015c
 8001114:	40005400 	.word	0x40005400
 8001118:	000186a0 	.word	0x000186a0

0800111c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <MX_I2C3_Init+0x50>)
 8001122:	4a13      	ldr	r2, [pc, #76]	; (8001170 <MX_I2C3_Init+0x54>)
 8001124:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001126:	4b11      	ldr	r3, [pc, #68]	; (800116c <MX_I2C3_Init+0x50>)
 8001128:	4a12      	ldr	r2, [pc, #72]	; (8001174 <MX_I2C3_Init+0x58>)
 800112a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800112c:	4b0f      	ldr	r3, [pc, #60]	; (800116c <MX_I2C3_Init+0x50>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001132:	4b0e      	ldr	r3, [pc, #56]	; (800116c <MX_I2C3_Init+0x50>)
 8001134:	2200      	movs	r2, #0
 8001136:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001138:	4b0c      	ldr	r3, [pc, #48]	; (800116c <MX_I2C3_Init+0x50>)
 800113a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800113e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001140:	4b0a      	ldr	r3, [pc, #40]	; (800116c <MX_I2C3_Init+0x50>)
 8001142:	2200      	movs	r2, #0
 8001144:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001146:	4b09      	ldr	r3, [pc, #36]	; (800116c <MX_I2C3_Init+0x50>)
 8001148:	2200      	movs	r2, #0
 800114a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800114c:	4b07      	ldr	r3, [pc, #28]	; (800116c <MX_I2C3_Init+0x50>)
 800114e:	2200      	movs	r2, #0
 8001150:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001152:	4b06      	ldr	r3, [pc, #24]	; (800116c <MX_I2C3_Init+0x50>)
 8001154:	2200      	movs	r2, #0
 8001156:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001158:	4804      	ldr	r0, [pc, #16]	; (800116c <MX_I2C3_Init+0x50>)
 800115a:	f001 fd03 	bl	8002b64 <HAL_I2C_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001164:	f000 f970 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}
 800116c:	200001b0 	.word	0x200001b0
 8001170:	40005c00 	.word	0x40005c00
 8001174:	000186a0 	.word	0x000186a0

08001178 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08c      	sub	sp, #48	; 0x30
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001180:	f107 031c 	add.w	r3, r7, #28
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a42      	ldr	r2, [pc, #264]	; (80012a0 <HAL_I2C_MspInit+0x128>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d12d      	bne.n	80011f6 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	61bb      	str	r3, [r7, #24]
 800119e:	4b41      	ldr	r3, [pc, #260]	; (80012a4 <HAL_I2C_MspInit+0x12c>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a40      	ldr	r2, [pc, #256]	; (80012a4 <HAL_I2C_MspInit+0x12c>)
 80011a4:	f043 0302 	orr.w	r3, r3, #2
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b3e      	ldr	r3, [pc, #248]	; (80012a4 <HAL_I2C_MspInit+0x12c>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	61bb      	str	r3, [r7, #24]
 80011b4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011bc:	2312      	movs	r3, #18
 80011be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c4:	2303      	movs	r3, #3
 80011c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011c8:	2304      	movs	r3, #4
 80011ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011cc:	f107 031c 	add.w	r3, r7, #28
 80011d0:	4619      	mov	r1, r3
 80011d2:	4835      	ldr	r0, [pc, #212]	; (80012a8 <HAL_I2C_MspInit+0x130>)
 80011d4:	f001 fae8 	bl	80027a8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]
 80011dc:	4b31      	ldr	r3, [pc, #196]	; (80012a4 <HAL_I2C_MspInit+0x12c>)
 80011de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e0:	4a30      	ldr	r2, [pc, #192]	; (80012a4 <HAL_I2C_MspInit+0x12c>)
 80011e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011e6:	6413      	str	r3, [r2, #64]	; 0x40
 80011e8:	4b2e      	ldr	r3, [pc, #184]	; (80012a4 <HAL_I2C_MspInit+0x12c>)
 80011ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011f0:	617b      	str	r3, [r7, #20]
 80011f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80011f4:	e050      	b.n	8001298 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a2c      	ldr	r2, [pc, #176]	; (80012ac <HAL_I2C_MspInit+0x134>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d14b      	bne.n	8001298 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001200:	2300      	movs	r3, #0
 8001202:	613b      	str	r3, [r7, #16]
 8001204:	4b27      	ldr	r3, [pc, #156]	; (80012a4 <HAL_I2C_MspInit+0x12c>)
 8001206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001208:	4a26      	ldr	r2, [pc, #152]	; (80012a4 <HAL_I2C_MspInit+0x12c>)
 800120a:	f043 0304 	orr.w	r3, r3, #4
 800120e:	6313      	str	r3, [r2, #48]	; 0x30
 8001210:	4b24      	ldr	r3, [pc, #144]	; (80012a4 <HAL_I2C_MspInit+0x12c>)
 8001212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001214:	f003 0304 	and.w	r3, r3, #4
 8001218:	613b      	str	r3, [r7, #16]
 800121a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121c:	2300      	movs	r3, #0
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	4b20      	ldr	r3, [pc, #128]	; (80012a4 <HAL_I2C_MspInit+0x12c>)
 8001222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001224:	4a1f      	ldr	r2, [pc, #124]	; (80012a4 <HAL_I2C_MspInit+0x12c>)
 8001226:	f043 0301 	orr.w	r3, r3, #1
 800122a:	6313      	str	r3, [r2, #48]	; 0x30
 800122c:	4b1d      	ldr	r3, [pc, #116]	; (80012a4 <HAL_I2C_MspInit+0x12c>)
 800122e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001238:	f44f 7300 	mov.w	r3, #512	; 0x200
 800123c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800123e:	2312      	movs	r3, #18
 8001240:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001246:	2303      	movs	r3, #3
 8001248:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800124a:	2304      	movs	r3, #4
 800124c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800124e:	f107 031c 	add.w	r3, r7, #28
 8001252:	4619      	mov	r1, r3
 8001254:	4816      	ldr	r0, [pc, #88]	; (80012b0 <HAL_I2C_MspInit+0x138>)
 8001256:	f001 faa7 	bl	80027a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800125a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800125e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001260:	2312      	movs	r3, #18
 8001262:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001268:	2303      	movs	r3, #3
 800126a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800126c:	2304      	movs	r3, #4
 800126e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001270:	f107 031c 	add.w	r3, r7, #28
 8001274:	4619      	mov	r1, r3
 8001276:	480f      	ldr	r0, [pc, #60]	; (80012b4 <HAL_I2C_MspInit+0x13c>)
 8001278:	f001 fa96 	bl	80027a8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800127c:	2300      	movs	r3, #0
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <HAL_I2C_MspInit+0x12c>)
 8001282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001284:	4a07      	ldr	r2, [pc, #28]	; (80012a4 <HAL_I2C_MspInit+0x12c>)
 8001286:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800128a:	6413      	str	r3, [r2, #64]	; 0x40
 800128c:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <HAL_I2C_MspInit+0x12c>)
 800128e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001290:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	68bb      	ldr	r3, [r7, #8]
}
 8001298:	bf00      	nop
 800129a:	3730      	adds	r7, #48	; 0x30
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40005400 	.word	0x40005400
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40020400 	.word	0x40020400
 80012ac:	40005c00 	.word	0x40005c00
 80012b0:	40020800 	.word	0x40020800
 80012b4:	40020000 	.word	0x40020000

080012b8 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80012bc:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <MX_IWDG_Init+0x2c>)
 80012be:	4a0a      	ldr	r2, [pc, #40]	; (80012e8 <MX_IWDG_Init+0x30>)
 80012c0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_8;
 80012c2:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <MX_IWDG_Init+0x2c>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 2000;
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <MX_IWDG_Init+0x2c>)
 80012ca:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80012ce:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80012d0:	4804      	ldr	r0, [pc, #16]	; (80012e4 <MX_IWDG_Init+0x2c>)
 80012d2:	f002 fd99 	bl	8003e08 <HAL_IWDG_Init>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80012dc:	f000 f8b4 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80012e0:	bf00      	nop
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000204 	.word	0x20000204
 80012e8:	40003000 	.word	0x40003000

080012ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012f0:	f001 f880 	bl	80023f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012f4:	f000 f822 	bl	800133c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012f8:	f7ff fe34 	bl	8000f64 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80012fc:	f000 ff64 	bl	80021c8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001300:	f000 fb60 	bl	80019c4 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001304:	f000 f8a6 	bl	8001454 <MX_SPI1_Init>
  MX_TIM12_Init();
 8001308:	f000 fd32 	bl	8001d70 <MX_TIM12_Init>
  MX_I2C1_Init();
 800130c:	f7ff fed8 	bl	80010c0 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001310:	f000 fbcc 	bl	8001aac <MX_TIM3_Init>
  MX_TIM4_Init();
 8001314:	f000 fc46 	bl	8001ba4 <MX_TIM4_Init>
  MX_SPI2_Init();
 8001318:	f000 f8d2 	bl	80014c0 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 800131c:	f000 ff7e 	bl	800221c <MX_USART3_UART_Init>
  MX_IWDG_Init();
 8001320:	f7ff ffca 	bl	80012b8 <MX_IWDG_Init>
  MX_TIM8_Init();
 8001324:	f000 fc96 	bl	8001c54 <MX_TIM8_Init>
  MX_TIM1_Init();
 8001328:	f000 faca 	bl	80018c0 <MX_TIM1_Init>
  MX_I2C3_Init();
 800132c:	f7ff fef6 	bl	800111c <MX_I2C3_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  ugvMain();
 8001330:	f00c fac8 	bl	800d8c4 <ugvMain>
	  break;
 8001334:	bf00      	nop
 8001336:	2300      	movs	r3, #0

  }
  /* USER CODE END 3 */
}
 8001338:	4618      	mov	r0, r3
 800133a:	bd80      	pop	{r7, pc}

0800133c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b094      	sub	sp, #80	; 0x50
 8001340:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001342:	f107 031c 	add.w	r3, r7, #28
 8001346:	2234      	movs	r2, #52	; 0x34
 8001348:	2100      	movs	r1, #0
 800134a:	4618      	mov	r0, r3
 800134c:	f00c fda0 	bl	800de90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001350:	f107 0308 	add.w	r3, r7, #8
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001360:	2300      	movs	r3, #0
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	4b2d      	ldr	r3, [pc, #180]	; (800141c <SystemClock_Config+0xe0>)
 8001366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001368:	4a2c      	ldr	r2, [pc, #176]	; (800141c <SystemClock_Config+0xe0>)
 800136a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800136e:	6413      	str	r3, [r2, #64]	; 0x40
 8001370:	4b2a      	ldr	r3, [pc, #168]	; (800141c <SystemClock_Config+0xe0>)
 8001372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001378:	607b      	str	r3, [r7, #4]
 800137a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800137c:	2300      	movs	r3, #0
 800137e:	603b      	str	r3, [r7, #0]
 8001380:	4b27      	ldr	r3, [pc, #156]	; (8001420 <SystemClock_Config+0xe4>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a26      	ldr	r2, [pc, #152]	; (8001420 <SystemClock_Config+0xe4>)
 8001386:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800138a:	6013      	str	r3, [r2, #0]
 800138c:	4b24      	ldr	r3, [pc, #144]	; (8001420 <SystemClock_Config+0xe4>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001394:	603b      	str	r3, [r7, #0]
 8001396:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001398:	230a      	movs	r3, #10
 800139a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800139c:	2301      	movs	r3, #1
 800139e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013a0:	2310      	movs	r3, #16
 80013a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80013a4:	2301      	movs	r3, #1
 80013a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013a8:	2302      	movs	r3, #2
 80013aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013ac:	2300      	movs	r3, #0
 80013ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013b0:	2308      	movs	r3, #8
 80013b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80013b4:	23b4      	movs	r3, #180	; 0xb4
 80013b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013b8:	2302      	movs	r3, #2
 80013ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80013bc:	2302      	movs	r3, #2
 80013be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013c0:	2302      	movs	r3, #2
 80013c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013c4:	f107 031c 	add.w	r3, r7, #28
 80013c8:	4618      	mov	r0, r3
 80013ca:	f003 f93b 	bl	8004644 <HAL_RCC_OscConfig>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80013d4:	f000 f838 	bl	8001448 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80013d8:	f002 fd68 	bl	8003eac <HAL_PWREx_EnableOverDrive>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80013e2:	f000 f831 	bl	8001448 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013e6:	230f      	movs	r3, #15
 80013e8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ea:	2302      	movs	r3, #2
 80013ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ee:	2300      	movs	r3, #0
 80013f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013fc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013fe:	f107 0308 	add.w	r3, r7, #8
 8001402:	2105      	movs	r1, #5
 8001404:	4618      	mov	r0, r3
 8001406:	f002 fda1 	bl	8003f4c <HAL_RCC_ClockConfig>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8001410:	f000 f81a 	bl	8001448 <Error_Handler>
  }
}
 8001414:	bf00      	nop
 8001416:	3750      	adds	r7, #80	; 0x50
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40023800 	.word	0x40023800
 8001420:	40007000 	.word	0x40007000

08001424 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a04      	ldr	r2, [pc, #16]	; (8001444 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d101      	bne.n	800143a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001436:	f000 ffff 	bl	8002438 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40001000 	.word	0x40001000

08001448 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800144c:	b672      	cpsid	i
}
 800144e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001450:	e7fe      	b.n	8001450 <Error_Handler+0x8>
	...

08001454 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001458:	4b17      	ldr	r3, [pc, #92]	; (80014b8 <MX_SPI1_Init+0x64>)
 800145a:	4a18      	ldr	r2, [pc, #96]	; (80014bc <MX_SPI1_Init+0x68>)
 800145c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800145e:	4b16      	ldr	r3, [pc, #88]	; (80014b8 <MX_SPI1_Init+0x64>)
 8001460:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001464:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001466:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <MX_SPI1_Init+0x64>)
 8001468:	2200      	movs	r2, #0
 800146a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800146c:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <MX_SPI1_Init+0x64>)
 800146e:	2200      	movs	r2, #0
 8001470:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001472:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <MX_SPI1_Init+0x64>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001478:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <MX_SPI1_Init+0x64>)
 800147a:	2200      	movs	r2, #0
 800147c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800147e:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <MX_SPI1_Init+0x64>)
 8001480:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001484:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001486:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <MX_SPI1_Init+0x64>)
 8001488:	2218      	movs	r2, #24
 800148a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800148c:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <MX_SPI1_Init+0x64>)
 800148e:	2200      	movs	r2, #0
 8001490:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001492:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <MX_SPI1_Init+0x64>)
 8001494:	2200      	movs	r2, #0
 8001496:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001498:	4b07      	ldr	r3, [pc, #28]	; (80014b8 <MX_SPI1_Init+0x64>)
 800149a:	2200      	movs	r2, #0
 800149c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <MX_SPI1_Init+0x64>)
 80014a0:	220a      	movs	r2, #10
 80014a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014a4:	4804      	ldr	r0, [pc, #16]	; (80014b8 <MX_SPI1_Init+0x64>)
 80014a6:	f003 fb6b 	bl	8004b80 <HAL_SPI_Init>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80014b0:	f7ff ffca 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20000210 	.word	0x20000210
 80014bc:	40013000 	.word	0x40013000

080014c0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80014c4:	4b17      	ldr	r3, [pc, #92]	; (8001524 <MX_SPI2_Init+0x64>)
 80014c6:	4a18      	ldr	r2, [pc, #96]	; (8001528 <MX_SPI2_Init+0x68>)
 80014c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80014ca:	4b16      	ldr	r3, [pc, #88]	; (8001524 <MX_SPI2_Init+0x64>)
 80014cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014d0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80014d2:	4b14      	ldr	r3, [pc, #80]	; (8001524 <MX_SPI2_Init+0x64>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80014d8:	4b12      	ldr	r3, [pc, #72]	; (8001524 <MX_SPI2_Init+0x64>)
 80014da:	2200      	movs	r2, #0
 80014dc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014de:	4b11      	ldr	r3, [pc, #68]	; (8001524 <MX_SPI2_Init+0x64>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014e4:	4b0f      	ldr	r3, [pc, #60]	; (8001524 <MX_SPI2_Init+0x64>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80014ea:	4b0e      	ldr	r3, [pc, #56]	; (8001524 <MX_SPI2_Init+0x64>)
 80014ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014f0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80014f2:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <MX_SPI2_Init+0x64>)
 80014f4:	2218      	movs	r2, #24
 80014f6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014f8:	4b0a      	ldr	r3, [pc, #40]	; (8001524 <MX_SPI2_Init+0x64>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80014fe:	4b09      	ldr	r3, [pc, #36]	; (8001524 <MX_SPI2_Init+0x64>)
 8001500:	2200      	movs	r2, #0
 8001502:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001504:	4b07      	ldr	r3, [pc, #28]	; (8001524 <MX_SPI2_Init+0x64>)
 8001506:	2200      	movs	r2, #0
 8001508:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800150a:	4b06      	ldr	r3, [pc, #24]	; (8001524 <MX_SPI2_Init+0x64>)
 800150c:	220a      	movs	r2, #10
 800150e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001510:	4804      	ldr	r0, [pc, #16]	; (8001524 <MX_SPI2_Init+0x64>)
 8001512:	f003 fb35 	bl	8004b80 <HAL_SPI_Init>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800151c:	f7ff ff94 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20000268 	.word	0x20000268
 8001528:	40003800 	.word	0x40003800

0800152c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08c      	sub	sp, #48	; 0x30
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001534:	f107 031c 	add.w	r3, r7, #28
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a41      	ldr	r2, [pc, #260]	; (8001650 <HAL_SPI_MspInit+0x124>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d12c      	bne.n	80015a8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	61bb      	str	r3, [r7, #24]
 8001552:	4b40      	ldr	r3, [pc, #256]	; (8001654 <HAL_SPI_MspInit+0x128>)
 8001554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001556:	4a3f      	ldr	r2, [pc, #252]	; (8001654 <HAL_SPI_MspInit+0x128>)
 8001558:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800155c:	6453      	str	r3, [r2, #68]	; 0x44
 800155e:	4b3d      	ldr	r3, [pc, #244]	; (8001654 <HAL_SPI_MspInit+0x128>)
 8001560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001562:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001566:	61bb      	str	r3, [r7, #24]
 8001568:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
 800156e:	4b39      	ldr	r3, [pc, #228]	; (8001654 <HAL_SPI_MspInit+0x128>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4a38      	ldr	r2, [pc, #224]	; (8001654 <HAL_SPI_MspInit+0x128>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	6313      	str	r3, [r2, #48]	; 0x30
 800157a:	4b36      	ldr	r3, [pc, #216]	; (8001654 <HAL_SPI_MspInit+0x128>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	617b      	str	r3, [r7, #20]
 8001584:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001586:	23e0      	movs	r3, #224	; 0xe0
 8001588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158a:	2302      	movs	r3, #2
 800158c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001592:	2303      	movs	r3, #3
 8001594:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001596:	2305      	movs	r3, #5
 8001598:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159a:	f107 031c 	add.w	r3, r7, #28
 800159e:	4619      	mov	r1, r3
 80015a0:	482d      	ldr	r0, [pc, #180]	; (8001658 <HAL_SPI_MspInit+0x12c>)
 80015a2:	f001 f901 	bl	80027a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80015a6:	e04f      	b.n	8001648 <HAL_SPI_MspInit+0x11c>
  else if(spiHandle->Instance==SPI2)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a2b      	ldr	r2, [pc, #172]	; (800165c <HAL_SPI_MspInit+0x130>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d14a      	bne.n	8001648 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	613b      	str	r3, [r7, #16]
 80015b6:	4b27      	ldr	r3, [pc, #156]	; (8001654 <HAL_SPI_MspInit+0x128>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	4a26      	ldr	r2, [pc, #152]	; (8001654 <HAL_SPI_MspInit+0x128>)
 80015bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c0:	6413      	str	r3, [r2, #64]	; 0x40
 80015c2:	4b24      	ldr	r3, [pc, #144]	; (8001654 <HAL_SPI_MspInit+0x128>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ca:	613b      	str	r3, [r7, #16]
 80015cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	4b20      	ldr	r3, [pc, #128]	; (8001654 <HAL_SPI_MspInit+0x128>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	4a1f      	ldr	r2, [pc, #124]	; (8001654 <HAL_SPI_MspInit+0x128>)
 80015d8:	f043 0304 	orr.w	r3, r3, #4
 80015dc:	6313      	str	r3, [r2, #48]	; 0x30
 80015de:	4b1d      	ldr	r3, [pc, #116]	; (8001654 <HAL_SPI_MspInit+0x128>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	f003 0304 	and.w	r3, r3, #4
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	4b19      	ldr	r3, [pc, #100]	; (8001654 <HAL_SPI_MspInit+0x128>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	4a18      	ldr	r2, [pc, #96]	; (8001654 <HAL_SPI_MspInit+0x128>)
 80015f4:	f043 0302 	orr.w	r3, r3, #2
 80015f8:	6313      	str	r3, [r2, #48]	; 0x30
 80015fa:	4b16      	ldr	r3, [pc, #88]	; (8001654 <HAL_SPI_MspInit+0x128>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001606:	230c      	movs	r3, #12
 8001608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160a:	2302      	movs	r3, #2
 800160c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001612:	2303      	movs	r3, #3
 8001614:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001616:	2305      	movs	r3, #5
 8001618:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800161a:	f107 031c 	add.w	r3, r7, #28
 800161e:	4619      	mov	r1, r3
 8001620:	480f      	ldr	r0, [pc, #60]	; (8001660 <HAL_SPI_MspInit+0x134>)
 8001622:	f001 f8c1 	bl	80027a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001626:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800162a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162c:	2302      	movs	r3, #2
 800162e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001634:	2303      	movs	r3, #3
 8001636:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001638:	2305      	movs	r3, #5
 800163a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163c:	f107 031c 	add.w	r3, r7, #28
 8001640:	4619      	mov	r1, r3
 8001642:	4808      	ldr	r0, [pc, #32]	; (8001664 <HAL_SPI_MspInit+0x138>)
 8001644:	f001 f8b0 	bl	80027a8 <HAL_GPIO_Init>
}
 8001648:	bf00      	nop
 800164a:	3730      	adds	r7, #48	; 0x30
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40013000 	.word	0x40013000
 8001654:	40023800 	.word	0x40023800
 8001658:	40020000 	.word	0x40020000
 800165c:	40003800 	.word	0x40003800
 8001660:	40020800 	.word	0x40020800
 8001664:	40020400 	.word	0x40020400

08001668 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	607b      	str	r3, [r7, #4]
 8001672:	4b12      	ldr	r3, [pc, #72]	; (80016bc <HAL_MspInit+0x54>)
 8001674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001676:	4a11      	ldr	r2, [pc, #68]	; (80016bc <HAL_MspInit+0x54>)
 8001678:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800167c:	6453      	str	r3, [r2, #68]	; 0x44
 800167e:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <HAL_MspInit+0x54>)
 8001680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001682:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	603b      	str	r3, [r7, #0]
 800168e:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <HAL_MspInit+0x54>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	4a0a      	ldr	r2, [pc, #40]	; (80016bc <HAL_MspInit+0x54>)
 8001694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001698:	6413      	str	r3, [r2, #64]	; 0x40
 800169a:	4b08      	ldr	r3, [pc, #32]	; (80016bc <HAL_MspInit+0x54>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a2:	603b      	str	r3, [r7, #0]
 80016a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016a6:	2200      	movs	r2, #0
 80016a8:	210f      	movs	r1, #15
 80016aa:	f06f 0001 	mvn.w	r0, #1
 80016ae:	f000 ffbf 	bl	8002630 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40023800 	.word	0x40023800

080016c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b08e      	sub	sp, #56	; 0x38
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80016c8:	2300      	movs	r3, #0
 80016ca:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80016cc:	2300      	movs	r3, #0
 80016ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80016d0:	2300      	movs	r3, #0
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	4b33      	ldr	r3, [pc, #204]	; (80017a4 <HAL_InitTick+0xe4>)
 80016d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d8:	4a32      	ldr	r2, [pc, #200]	; (80017a4 <HAL_InitTick+0xe4>)
 80016da:	f043 0310 	orr.w	r3, r3, #16
 80016de:	6413      	str	r3, [r2, #64]	; 0x40
 80016e0:	4b30      	ldr	r3, [pc, #192]	; (80017a4 <HAL_InitTick+0xe4>)
 80016e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e4:	f003 0310 	and.w	r3, r3, #16
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016ec:	f107 0210 	add.w	r2, r7, #16
 80016f0:	f107 0314 	add.w	r3, r7, #20
 80016f4:	4611      	mov	r1, r2
 80016f6:	4618      	mov	r0, r3
 80016f8:	f002 fd42 	bl	8004180 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80016fc:	6a3b      	ldr	r3, [r7, #32]
 80016fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001702:	2b00      	cmp	r3, #0
 8001704:	d103      	bne.n	800170e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001706:	f002 fd13 	bl	8004130 <HAL_RCC_GetPCLK1Freq>
 800170a:	6378      	str	r0, [r7, #52]	; 0x34
 800170c:	e004      	b.n	8001718 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800170e:	f002 fd0f 	bl	8004130 <HAL_RCC_GetPCLK1Freq>
 8001712:	4603      	mov	r3, r0
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800171a:	4a23      	ldr	r2, [pc, #140]	; (80017a8 <HAL_InitTick+0xe8>)
 800171c:	fba2 2303 	umull	r2, r3, r2, r3
 8001720:	0c9b      	lsrs	r3, r3, #18
 8001722:	3b01      	subs	r3, #1
 8001724:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001726:	4b21      	ldr	r3, [pc, #132]	; (80017ac <HAL_InitTick+0xec>)
 8001728:	4a21      	ldr	r2, [pc, #132]	; (80017b0 <HAL_InitTick+0xf0>)
 800172a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800172c:	4b1f      	ldr	r3, [pc, #124]	; (80017ac <HAL_InitTick+0xec>)
 800172e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001732:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001734:	4a1d      	ldr	r2, [pc, #116]	; (80017ac <HAL_InitTick+0xec>)
 8001736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001738:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800173a:	4b1c      	ldr	r3, [pc, #112]	; (80017ac <HAL_InitTick+0xec>)
 800173c:	2200      	movs	r2, #0
 800173e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001740:	4b1a      	ldr	r3, [pc, #104]	; (80017ac <HAL_InitTick+0xec>)
 8001742:	2200      	movs	r2, #0
 8001744:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001746:	4b19      	ldr	r3, [pc, #100]	; (80017ac <HAL_InitTick+0xec>)
 8001748:	2200      	movs	r2, #0
 800174a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800174c:	4817      	ldr	r0, [pc, #92]	; (80017ac <HAL_InitTick+0xec>)
 800174e:	f003 fe7d 	bl	800544c <HAL_TIM_Base_Init>
 8001752:	4603      	mov	r3, r0
 8001754:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001758:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800175c:	2b00      	cmp	r3, #0
 800175e:	d11b      	bne.n	8001798 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001760:	4812      	ldr	r0, [pc, #72]	; (80017ac <HAL_InitTick+0xec>)
 8001762:	f003 fecd 	bl	8005500 <HAL_TIM_Base_Start_IT>
 8001766:	4603      	mov	r3, r0
 8001768:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800176c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001770:	2b00      	cmp	r3, #0
 8001772:	d111      	bne.n	8001798 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001774:	2036      	movs	r0, #54	; 0x36
 8001776:	f000 ff77 	bl	8002668 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2b0f      	cmp	r3, #15
 800177e:	d808      	bhi.n	8001792 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001780:	2200      	movs	r2, #0
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	2036      	movs	r0, #54	; 0x36
 8001786:	f000 ff53 	bl	8002630 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800178a:	4a0a      	ldr	r2, [pc, #40]	; (80017b4 <HAL_InitTick+0xf4>)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6013      	str	r3, [r2, #0]
 8001790:	e002      	b.n	8001798 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001798:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800179c:	4618      	mov	r0, r3
 800179e:	3738      	adds	r7, #56	; 0x38
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40023800 	.word	0x40023800
 80017a8:	431bde83 	.word	0x431bde83
 80017ac:	200002c0 	.word	0x200002c0
 80017b0:	40001000 	.word	0x40001000
 80017b4:	20000004 	.word	0x20000004

080017b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017bc:	e7fe      	b.n	80017bc <NMI_Handler+0x4>

080017be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017be:	b480      	push	{r7}
 80017c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017c2:	e7fe      	b.n	80017c2 <HardFault_Handler+0x4>

080017c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c8:	e7fe      	b.n	80017c8 <MemManage_Handler+0x4>

080017ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ce:	e7fe      	b.n	80017ce <BusFault_Handler+0x4>

080017d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d4:	e7fe      	b.n	80017d4 <UsageFault_Handler+0x4>

080017d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d6:	b480      	push	{r7}
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 80017e8:	2002      	movs	r0, #2
 80017ea:	f001 f9a3 	bl	8002b34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
	...

080017f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017f8:	4802      	ldr	r0, [pc, #8]	; (8001804 <TIM2_IRQHandler+0x10>)
 80017fa:	f004 f981 	bl	8005b00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000354 	.word	0x20000354

08001808 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800180c:	4802      	ldr	r0, [pc, #8]	; (8001818 <USART3_IRQHandler+0x10>)
 800180e:	f005 f92b 	bl	8006a68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000504 	.word	0x20000504

0800181c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001820:	4802      	ldr	r0, [pc, #8]	; (800182c <TIM6_DAC_IRQHandler+0x10>)
 8001822:	f004 f96d 	bl	8005b00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	200002c0 	.word	0x200002c0

08001830 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001838:	4a14      	ldr	r2, [pc, #80]	; (800188c <_sbrk+0x5c>)
 800183a:	4b15      	ldr	r3, [pc, #84]	; (8001890 <_sbrk+0x60>)
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001844:	4b13      	ldr	r3, [pc, #76]	; (8001894 <_sbrk+0x64>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d102      	bne.n	8001852 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800184c:	4b11      	ldr	r3, [pc, #68]	; (8001894 <_sbrk+0x64>)
 800184e:	4a12      	ldr	r2, [pc, #72]	; (8001898 <_sbrk+0x68>)
 8001850:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001852:	4b10      	ldr	r3, [pc, #64]	; (8001894 <_sbrk+0x64>)
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4413      	add	r3, r2
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	429a      	cmp	r2, r3
 800185e:	d207      	bcs.n	8001870 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001860:	f00c fb86 	bl	800df70 <__errno>
 8001864:	4603      	mov	r3, r0
 8001866:	220c      	movs	r2, #12
 8001868:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800186a:	f04f 33ff 	mov.w	r3, #4294967295
 800186e:	e009      	b.n	8001884 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001870:	4b08      	ldr	r3, [pc, #32]	; (8001894 <_sbrk+0x64>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001876:	4b07      	ldr	r3, [pc, #28]	; (8001894 <_sbrk+0x64>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4413      	add	r3, r2
 800187e:	4a05      	ldr	r2, [pc, #20]	; (8001894 <_sbrk+0x64>)
 8001880:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001882:	68fb      	ldr	r3, [r7, #12]
}
 8001884:	4618      	mov	r0, r3
 8001886:	3718      	adds	r7, #24
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20020000 	.word	0x20020000
 8001890:	00000400 	.word	0x00000400
 8001894:	20000308 	.word	0x20000308
 8001898:	200056e8 	.word	0x200056e8

0800189c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018a0:	4b06      	ldr	r3, [pc, #24]	; (80018bc <SystemInit+0x20>)
 80018a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018a6:	4a05      	ldr	r2, [pc, #20]	; (80018bc <SystemInit+0x20>)
 80018a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b092      	sub	sp, #72	; 0x48
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
 80018de:	611a      	str	r2, [r3, #16]
 80018e0:	615a      	str	r2, [r3, #20]
 80018e2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018e4:	1d3b      	adds	r3, r7, #4
 80018e6:	2220      	movs	r2, #32
 80018e8:	2100      	movs	r1, #0
 80018ea:	4618      	mov	r0, r3
 80018ec:	f00c fad0 	bl	800de90 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018f0:	4b32      	ldr	r3, [pc, #200]	; (80019bc <MX_TIM1_Init+0xfc>)
 80018f2:	4a33      	ldr	r2, [pc, #204]	; (80019c0 <MX_TIM1_Init+0x100>)
 80018f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180 - 1;
 80018f6:	4b31      	ldr	r3, [pc, #196]	; (80019bc <MX_TIM1_Init+0xfc>)
 80018f8:	22b3      	movs	r2, #179	; 0xb3
 80018fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018fc:	4b2f      	ldr	r3, [pc, #188]	; (80019bc <MX_TIM1_Init+0xfc>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8001902:	4b2e      	ldr	r3, [pc, #184]	; (80019bc <MX_TIM1_Init+0xfc>)
 8001904:	2264      	movs	r2, #100	; 0x64
 8001906:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001908:	4b2c      	ldr	r3, [pc, #176]	; (80019bc <MX_TIM1_Init+0xfc>)
 800190a:	2200      	movs	r2, #0
 800190c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800190e:	4b2b      	ldr	r3, [pc, #172]	; (80019bc <MX_TIM1_Init+0xfc>)
 8001910:	2200      	movs	r2, #0
 8001912:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001914:	4b29      	ldr	r3, [pc, #164]	; (80019bc <MX_TIM1_Init+0xfc>)
 8001916:	2200      	movs	r2, #0
 8001918:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800191a:	4828      	ldr	r0, [pc, #160]	; (80019bc <MX_TIM1_Init+0xfc>)
 800191c:	f003 fe60 	bl	80055e0 <HAL_TIM_PWM_Init>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8001926:	f7ff fd8f 	bl	8001448 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800192a:	2300      	movs	r3, #0
 800192c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800192e:	2300      	movs	r3, #0
 8001930:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001932:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001936:	4619      	mov	r1, r3
 8001938:	4820      	ldr	r0, [pc, #128]	; (80019bc <MX_TIM1_Init+0xfc>)
 800193a:	f004 ff3d 	bl	80067b8 <HAL_TIMEx_MasterConfigSynchronization>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8001944:	f7ff fd80 	bl	8001448 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001948:	2360      	movs	r3, #96	; 0x60
 800194a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800194c:	2300      	movs	r3, #0
 800194e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001950:	2300      	movs	r3, #0
 8001952:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001954:	2300      	movs	r3, #0
 8001956:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001958:	2300      	movs	r3, #0
 800195a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800195c:	2300      	movs	r3, #0
 800195e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001960:	2300      	movs	r3, #0
 8001962:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001964:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001968:	2208      	movs	r2, #8
 800196a:	4619      	mov	r1, r3
 800196c:	4813      	ldr	r0, [pc, #76]	; (80019bc <MX_TIM1_Init+0xfc>)
 800196e:	f004 fa53 	bl	8005e18 <HAL_TIM_PWM_ConfigChannel>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8001978:	f7ff fd66 	bl	8001448 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800197c:	2300      	movs	r3, #0
 800197e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001980:	2300      	movs	r3, #0
 8001982:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001984:	2300      	movs	r3, #0
 8001986:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001988:	2300      	movs	r3, #0
 800198a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001990:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001994:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001996:	2300      	movs	r3, #0
 8001998:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800199a:	1d3b      	adds	r3, r7, #4
 800199c:	4619      	mov	r1, r3
 800199e:	4807      	ldr	r0, [pc, #28]	; (80019bc <MX_TIM1_Init+0xfc>)
 80019a0:	f004 ff86 	bl	80068b0 <HAL_TIMEx_ConfigBreakDeadTime>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 80019aa:	f7ff fd4d 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80019ae:	4803      	ldr	r0, [pc, #12]	; (80019bc <MX_TIM1_Init+0xfc>)
 80019b0:	f000 fb32 	bl	8002018 <HAL_TIM_MspPostInit>

}
 80019b4:	bf00      	nop
 80019b6:	3748      	adds	r7, #72	; 0x48
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	2000030c 	.word	0x2000030c
 80019c0:	40010000 	.word	0x40010000

080019c4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ca:	f107 0310 	add.w	r3, r7, #16
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80019d4:	463b      	mov	r3, r7
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]
 80019dc:	609a      	str	r2, [r3, #8]
 80019de:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019e0:	4b31      	ldr	r3, [pc, #196]	; (8001aa8 <MX_TIM2_Init+0xe4>)
 80019e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90 - 1;
 80019e8:	4b2f      	ldr	r3, [pc, #188]	; (8001aa8 <MX_TIM2_Init+0xe4>)
 80019ea:	2259      	movs	r2, #89	; 0x59
 80019ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ee:	4b2e      	ldr	r3, [pc, #184]	; (8001aa8 <MX_TIM2_Init+0xe4>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80019f4:	4b2c      	ldr	r3, [pc, #176]	; (8001aa8 <MX_TIM2_Init+0xe4>)
 80019f6:	f04f 32ff 	mov.w	r2, #4294967295
 80019fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019fc:	4b2a      	ldr	r3, [pc, #168]	; (8001aa8 <MX_TIM2_Init+0xe4>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a02:	4b29      	ldr	r3, [pc, #164]	; (8001aa8 <MX_TIM2_Init+0xe4>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001a08:	4827      	ldr	r0, [pc, #156]	; (8001aa8 <MX_TIM2_Init+0xe4>)
 8001a0a:	f003 ff01 	bl	8005810 <HAL_TIM_IC_Init>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001a14:	f7ff fd18 	bl	8001448 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a20:	f107 0310 	add.w	r3, r7, #16
 8001a24:	4619      	mov	r1, r3
 8001a26:	4820      	ldr	r0, [pc, #128]	; (8001aa8 <MX_TIM2_Init+0xe4>)
 8001a28:	f004 fec6 	bl	80067b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001a32:	f7ff fd09 	bl	8001448 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001a36:	230a      	movs	r3, #10
 8001a38:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001a46:	463b      	mov	r3, r7
 8001a48:	2200      	movs	r2, #0
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4816      	ldr	r0, [pc, #88]	; (8001aa8 <MX_TIM2_Init+0xe4>)
 8001a4e:	f004 f947 	bl	8005ce0 <HAL_TIM_IC_ConfigChannel>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001a58:	f7ff fcf6 	bl	8001448 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001a5c:	463b      	mov	r3, r7
 8001a5e:	2204      	movs	r2, #4
 8001a60:	4619      	mov	r1, r3
 8001a62:	4811      	ldr	r0, [pc, #68]	; (8001aa8 <MX_TIM2_Init+0xe4>)
 8001a64:	f004 f93c 	bl	8005ce0 <HAL_TIM_IC_ConfigChannel>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8001a6e:	f7ff fceb 	bl	8001448 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001a72:	463b      	mov	r3, r7
 8001a74:	2208      	movs	r2, #8
 8001a76:	4619      	mov	r1, r3
 8001a78:	480b      	ldr	r0, [pc, #44]	; (8001aa8 <MX_TIM2_Init+0xe4>)
 8001a7a:	f004 f931 	bl	8005ce0 <HAL_TIM_IC_ConfigChannel>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_TIM2_Init+0xc4>
  {
    Error_Handler();
 8001a84:	f7ff fce0 	bl	8001448 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001a88:	463b      	mov	r3, r7
 8001a8a:	220c      	movs	r2, #12
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4806      	ldr	r0, [pc, #24]	; (8001aa8 <MX_TIM2_Init+0xe4>)
 8001a90:	f004 f926 	bl	8005ce0 <HAL_TIM_IC_ConfigChannel>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001a9a:	f7ff fcd5 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a9e:	bf00      	nop
 8001aa0:	3718      	adds	r7, #24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000354 	.word	0x20000354

08001aac <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08e      	sub	sp, #56	; 0x38
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ab2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001abc:	f107 0314 	add.w	r3, r7, #20
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
 8001aca:	611a      	str	r2, [r3, #16]
 8001acc:	615a      	str	r2, [r3, #20]
 8001ace:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001ad0:	1d3b      	adds	r3, r7, #4
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	605a      	str	r2, [r3, #4]
 8001ad8:	609a      	str	r2, [r3, #8]
 8001ada:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001adc:	4b2f      	ldr	r3, [pc, #188]	; (8001b9c <MX_TIM3_Init+0xf0>)
 8001ade:	4a30      	ldr	r2, [pc, #192]	; (8001ba0 <MX_TIM3_Init+0xf4>)
 8001ae0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 180 - 1;
 8001ae2:	4b2e      	ldr	r3, [pc, #184]	; (8001b9c <MX_TIM3_Init+0xf0>)
 8001ae4:	22b3      	movs	r2, #179	; 0xb3
 8001ae6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae8:	4b2c      	ldr	r3, [pc, #176]	; (8001b9c <MX_TIM3_Init+0xf0>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8001aee:	4b2b      	ldr	r3, [pc, #172]	; (8001b9c <MX_TIM3_Init+0xf0>)
 8001af0:	2264      	movs	r2, #100	; 0x64
 8001af2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001af4:	4b29      	ldr	r3, [pc, #164]	; (8001b9c <MX_TIM3_Init+0xf0>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001afa:	4b28      	ldr	r3, [pc, #160]	; (8001b9c <MX_TIM3_Init+0xf0>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b00:	4826      	ldr	r0, [pc, #152]	; (8001b9c <MX_TIM3_Init+0xf0>)
 8001b02:	f003 fd6d 	bl	80055e0 <HAL_TIM_PWM_Init>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001b0c:	f7ff fc9c 	bl	8001448 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001b10:	4822      	ldr	r0, [pc, #136]	; (8001b9c <MX_TIM3_Init+0xf0>)
 8001b12:	f003 fe7d 	bl	8005810 <HAL_TIM_IC_Init>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8001b1c:	f7ff fc94 	bl	8001448 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b20:	2300      	movs	r3, #0
 8001b22:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b24:	2300      	movs	r3, #0
 8001b26:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	481b      	ldr	r0, [pc, #108]	; (8001b9c <MX_TIM3_Init+0xf0>)
 8001b30:	f004 fe42 	bl	80067b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001b3a:	f7ff fc85 	bl	8001448 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b3e:	2360      	movs	r3, #96	; 0x60
 8001b40:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 0;
 8001b42:	2300      	movs	r3, #0
 8001b44:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b4e:	f107 0314 	add.w	r3, r7, #20
 8001b52:	2200      	movs	r2, #0
 8001b54:	4619      	mov	r1, r3
 8001b56:	4811      	ldr	r0, [pc, #68]	; (8001b9c <MX_TIM3_Init+0xf0>)
 8001b58:	f004 f95e 	bl	8005e18 <HAL_TIM_PWM_ConfigChannel>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8001b62:	f7ff fc71 	bl	8001448 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b66:	2300      	movs	r3, #0
 8001b68:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001b72:	2300      	movs	r3, #0
 8001b74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001b76:	1d3b      	adds	r3, r7, #4
 8001b78:	2204      	movs	r2, #4
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4807      	ldr	r0, [pc, #28]	; (8001b9c <MX_TIM3_Init+0xf0>)
 8001b7e:	f004 f8af 	bl	8005ce0 <HAL_TIM_IC_ConfigChannel>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8001b88:	f7ff fc5e 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b8c:	4803      	ldr	r0, [pc, #12]	; (8001b9c <MX_TIM3_Init+0xf0>)
 8001b8e:	f000 fa43 	bl	8002018 <HAL_TIM_MspPostInit>

}
 8001b92:	bf00      	nop
 8001b94:	3738      	adds	r7, #56	; 0x38
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	2000039c 	.word	0x2000039c
 8001ba0:	40000400 	.word	0x40000400

08001ba4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08a      	sub	sp, #40	; 0x28
 8001ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001baa:	f107 0320 	add.w	r3, r7, #32
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bb4:	1d3b      	adds	r3, r7, #4
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	605a      	str	r2, [r3, #4]
 8001bbc:	609a      	str	r2, [r3, #8]
 8001bbe:	60da      	str	r2, [r3, #12]
 8001bc0:	611a      	str	r2, [r3, #16]
 8001bc2:	615a      	str	r2, [r3, #20]
 8001bc4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001bc6:	4b21      	ldr	r3, [pc, #132]	; (8001c4c <MX_TIM4_Init+0xa8>)
 8001bc8:	4a21      	ldr	r2, [pc, #132]	; (8001c50 <MX_TIM4_Init+0xac>)
 8001bca:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 180 - 1;
 8001bcc:	4b1f      	ldr	r3, [pc, #124]	; (8001c4c <MX_TIM4_Init+0xa8>)
 8001bce:	22b3      	movs	r2, #179	; 0xb3
 8001bd0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bd2:	4b1e      	ldr	r3, [pc, #120]	; (8001c4c <MX_TIM4_Init+0xa8>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8001bd8:	4b1c      	ldr	r3, [pc, #112]	; (8001c4c <MX_TIM4_Init+0xa8>)
 8001bda:	2264      	movs	r2, #100	; 0x64
 8001bdc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bde:	4b1b      	ldr	r3, [pc, #108]	; (8001c4c <MX_TIM4_Init+0xa8>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001be4:	4b19      	ldr	r3, [pc, #100]	; (8001c4c <MX_TIM4_Init+0xa8>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001bea:	4818      	ldr	r0, [pc, #96]	; (8001c4c <MX_TIM4_Init+0xa8>)
 8001bec:	f003 fcf8 	bl	80055e0 <HAL_TIM_PWM_Init>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8001bf6:	f7ff fc27 	bl	8001448 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c02:	f107 0320 	add.w	r3, r7, #32
 8001c06:	4619      	mov	r1, r3
 8001c08:	4810      	ldr	r0, [pc, #64]	; (8001c4c <MX_TIM4_Init+0xa8>)
 8001c0a:	f004 fdd5 	bl	80067b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8001c14:	f7ff fc18 	bl	8001448 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c18:	2360      	movs	r3, #96	; 0x60
 8001c1a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c20:	2300      	movs	r3, #0
 8001c22:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c24:	2300      	movs	r3, #0
 8001c26:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c28:	1d3b      	adds	r3, r7, #4
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4807      	ldr	r0, [pc, #28]	; (8001c4c <MX_TIM4_Init+0xa8>)
 8001c30:	f004 f8f2 	bl	8005e18 <HAL_TIM_PWM_ConfigChannel>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001c3a:	f7ff fc05 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001c3e:	4803      	ldr	r0, [pc, #12]	; (8001c4c <MX_TIM4_Init+0xa8>)
 8001c40:	f000 f9ea 	bl	8002018 <HAL_TIM_MspPostInit>

}
 8001c44:	bf00      	nop
 8001c46:	3728      	adds	r7, #40	; 0x28
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	200003e4 	.word	0x200003e4
 8001c50:	40000800 	.word	0x40000800

08001c54 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b092      	sub	sp, #72	; 0x48
 8001c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c5a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	60da      	str	r2, [r3, #12]
 8001c72:	611a      	str	r2, [r3, #16]
 8001c74:	615a      	str	r2, [r3, #20]
 8001c76:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c78:	1d3b      	adds	r3, r7, #4
 8001c7a:	2220      	movs	r2, #32
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f00c f906 	bl	800de90 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001c84:	4b38      	ldr	r3, [pc, #224]	; (8001d68 <MX_TIM8_Init+0x114>)
 8001c86:	4a39      	ldr	r2, [pc, #228]	; (8001d6c <MX_TIM8_Init+0x118>)
 8001c88:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 180 - 1;
 8001c8a:	4b37      	ldr	r3, [pc, #220]	; (8001d68 <MX_TIM8_Init+0x114>)
 8001c8c:	22b3      	movs	r2, #179	; 0xb3
 8001c8e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c90:	4b35      	ldr	r3, [pc, #212]	; (8001d68 <MX_TIM8_Init+0x114>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100;
 8001c96:	4b34      	ldr	r3, [pc, #208]	; (8001d68 <MX_TIM8_Init+0x114>)
 8001c98:	2264      	movs	r2, #100	; 0x64
 8001c9a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c9c:	4b32      	ldr	r3, [pc, #200]	; (8001d68 <MX_TIM8_Init+0x114>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001ca2:	4b31      	ldr	r3, [pc, #196]	; (8001d68 <MX_TIM8_Init+0x114>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ca8:	4b2f      	ldr	r3, [pc, #188]	; (8001d68 <MX_TIM8_Init+0x114>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001cae:	482e      	ldr	r0, [pc, #184]	; (8001d68 <MX_TIM8_Init+0x114>)
 8001cb0:	f003 fc96 	bl	80055e0 <HAL_TIM_PWM_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_TIM8_Init+0x6a>
  {
    Error_Handler();
 8001cba:	f7ff fbc5 	bl	8001448 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001cc6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4826      	ldr	r0, [pc, #152]	; (8001d68 <MX_TIM8_Init+0x114>)
 8001cce:	f004 fd73 	bl	80067b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_TIM8_Init+0x88>
  {
    Error_Handler();
 8001cd8:	f7ff fbb6 	bl	8001448 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cdc:	2360      	movs	r3, #96	; 0x60
 8001cde:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cec:	2300      	movs	r3, #0
 8001cee:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cfc:	2204      	movs	r2, #4
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4819      	ldr	r0, [pc, #100]	; (8001d68 <MX_TIM8_Init+0x114>)
 8001d02:	f004 f889 	bl	8005e18 <HAL_TIM_PWM_ConfigChannel>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_TIM8_Init+0xbc>
  {
    Error_Handler();
 8001d0c:	f7ff fb9c 	bl	8001448 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d14:	2208      	movs	r2, #8
 8001d16:	4619      	mov	r1, r3
 8001d18:	4813      	ldr	r0, [pc, #76]	; (8001d68 <MX_TIM8_Init+0x114>)
 8001d1a:	f004 f87d 	bl	8005e18 <HAL_TIM_PWM_ConfigChannel>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_TIM8_Init+0xd4>
  {
    Error_Handler();
 8001d24:	f7ff fb90 	bl	8001448 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d30:	2300      	movs	r3, #0
 8001d32:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d34:	2300      	movs	r3, #0
 8001d36:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d40:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d42:	2300      	movs	r3, #0
 8001d44:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001d46:	1d3b      	adds	r3, r7, #4
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4807      	ldr	r0, [pc, #28]	; (8001d68 <MX_TIM8_Init+0x114>)
 8001d4c:	f004 fdb0 	bl	80068b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_TIM8_Init+0x106>
  {
    Error_Handler();
 8001d56:	f7ff fb77 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001d5a:	4803      	ldr	r0, [pc, #12]	; (8001d68 <MX_TIM8_Init+0x114>)
 8001d5c:	f000 f95c 	bl	8002018 <HAL_TIM_MspPostInit>

}
 8001d60:	bf00      	nop
 8001d62:	3748      	adds	r7, #72	; 0x48
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	2000042c 	.word	0x2000042c
 8001d6c:	40010400 	.word	0x40010400

08001d70 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b088      	sub	sp, #32
 8001d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d76:	1d3b      	adds	r3, r7, #4
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	611a      	str	r2, [r3, #16]
 8001d84:	615a      	str	r2, [r3, #20]
 8001d86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001d88:	4b1a      	ldr	r3, [pc, #104]	; (8001df4 <MX_TIM12_Init+0x84>)
 8001d8a:	4a1b      	ldr	r2, [pc, #108]	; (8001df8 <MX_TIM12_Init+0x88>)
 8001d8c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 1800-1;
 8001d8e:	4b19      	ldr	r3, [pc, #100]	; (8001df4 <MX_TIM12_Init+0x84>)
 8001d90:	f240 7207 	movw	r2, #1799	; 0x707
 8001d94:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d96:	4b17      	ldr	r3, [pc, #92]	; (8001df4 <MX_TIM12_Init+0x84>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000-1;
 8001d9c:	4b15      	ldr	r3, [pc, #84]	; (8001df4 <MX_TIM12_Init+0x84>)
 8001d9e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001da2:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001da4:	4b13      	ldr	r3, [pc, #76]	; (8001df4 <MX_TIM12_Init+0x84>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001daa:	4b12      	ldr	r3, [pc, #72]	; (8001df4 <MX_TIM12_Init+0x84>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001db0:	4810      	ldr	r0, [pc, #64]	; (8001df4 <MX_TIM12_Init+0x84>)
 8001db2:	f003 fc15 	bl	80055e0 <HAL_TIM_PWM_Init>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_TIM12_Init+0x50>
  {
    Error_Handler();
 8001dbc:	f7ff fb44 	bl	8001448 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dc0:	2360      	movs	r3, #96	; 0x60
 8001dc2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dd0:	1d3b      	adds	r3, r7, #4
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4807      	ldr	r0, [pc, #28]	; (8001df4 <MX_TIM12_Init+0x84>)
 8001dd8:	f004 f81e 	bl	8005e18 <HAL_TIM_PWM_ConfigChannel>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_TIM12_Init+0x76>
  {
    Error_Handler();
 8001de2:	f7ff fb31 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001de6:	4803      	ldr	r0, [pc, #12]	; (8001df4 <MX_TIM12_Init+0x84>)
 8001de8:	f000 f916 	bl	8002018 <HAL_TIM_MspPostInit>

}
 8001dec:	bf00      	nop
 8001dee:	3720      	adds	r7, #32
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	20000474 	.word	0x20000474
 8001df8:	40001800 	.word	0x40001800

08001dfc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b08e      	sub	sp, #56	; 0x38
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	60da      	str	r2, [r3, #12]
 8001e12:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM1)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a41      	ldr	r2, [pc, #260]	; (8001f20 <HAL_TIM_PWM_MspInit+0x124>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d10e      	bne.n	8001e3c <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	623b      	str	r3, [r7, #32]
 8001e22:	4b40      	ldr	r3, [pc, #256]	; (8001f24 <HAL_TIM_PWM_MspInit+0x128>)
 8001e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e26:	4a3f      	ldr	r2, [pc, #252]	; (8001f24 <HAL_TIM_PWM_MspInit+0x128>)
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e2e:	4b3d      	ldr	r3, [pc, #244]	; (8001f24 <HAL_TIM_PWM_MspInit+0x128>)
 8001e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	623b      	str	r3, [r7, #32]
 8001e38:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8001e3a:	e06c      	b.n	8001f16 <HAL_TIM_PWM_MspInit+0x11a>
  else if(tim_pwmHandle->Instance==TIM3)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a39      	ldr	r2, [pc, #228]	; (8001f28 <HAL_TIM_PWM_MspInit+0x12c>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d12c      	bne.n	8001ea0 <HAL_TIM_PWM_MspInit+0xa4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	61fb      	str	r3, [r7, #28]
 8001e4a:	4b36      	ldr	r3, [pc, #216]	; (8001f24 <HAL_TIM_PWM_MspInit+0x128>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	4a35      	ldr	r2, [pc, #212]	; (8001f24 <HAL_TIM_PWM_MspInit+0x128>)
 8001e50:	f043 0302 	orr.w	r3, r3, #2
 8001e54:	6413      	str	r3, [r2, #64]	; 0x40
 8001e56:	4b33      	ldr	r3, [pc, #204]	; (8001f24 <HAL_TIM_PWM_MspInit+0x128>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	61fb      	str	r3, [r7, #28]
 8001e60:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	61bb      	str	r3, [r7, #24]
 8001e66:	4b2f      	ldr	r3, [pc, #188]	; (8001f24 <HAL_TIM_PWM_MspInit+0x128>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	4a2e      	ldr	r2, [pc, #184]	; (8001f24 <HAL_TIM_PWM_MspInit+0x128>)
 8001e6c:	f043 0302 	orr.w	r3, r3, #2
 8001e70:	6313      	str	r3, [r2, #48]	; 0x30
 8001e72:	4b2c      	ldr	r3, [pc, #176]	; (8001f24 <HAL_TIM_PWM_MspInit+0x128>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	61bb      	str	r3, [r7, #24]
 8001e7c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e7e:	2320      	movs	r3, #32
 8001e80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e82:	2302      	movs	r3, #2
 8001e84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e8e:	2302      	movs	r3, #2
 8001e90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e96:	4619      	mov	r1, r3
 8001e98:	4824      	ldr	r0, [pc, #144]	; (8001f2c <HAL_TIM_PWM_MspInit+0x130>)
 8001e9a:	f000 fc85 	bl	80027a8 <HAL_GPIO_Init>
}
 8001e9e:	e03a      	b.n	8001f16 <HAL_TIM_PWM_MspInit+0x11a>
  else if(tim_pwmHandle->Instance==TIM4)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a22      	ldr	r2, [pc, #136]	; (8001f30 <HAL_TIM_PWM_MspInit+0x134>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d10e      	bne.n	8001ec8 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]
 8001eae:	4b1d      	ldr	r3, [pc, #116]	; (8001f24 <HAL_TIM_PWM_MspInit+0x128>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	4a1c      	ldr	r2, [pc, #112]	; (8001f24 <HAL_TIM_PWM_MspInit+0x128>)
 8001eb4:	f043 0304 	orr.w	r3, r3, #4
 8001eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eba:	4b1a      	ldr	r3, [pc, #104]	; (8001f24 <HAL_TIM_PWM_MspInit+0x128>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	f003 0304 	and.w	r3, r3, #4
 8001ec2:	617b      	str	r3, [r7, #20]
 8001ec4:	697b      	ldr	r3, [r7, #20]
}
 8001ec6:	e026      	b.n	8001f16 <HAL_TIM_PWM_MspInit+0x11a>
  else if(tim_pwmHandle->Instance==TIM8)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a19      	ldr	r2, [pc, #100]	; (8001f34 <HAL_TIM_PWM_MspInit+0x138>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d10e      	bne.n	8001ef0 <HAL_TIM_PWM_MspInit+0xf4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	613b      	str	r3, [r7, #16]
 8001ed6:	4b13      	ldr	r3, [pc, #76]	; (8001f24 <HAL_TIM_PWM_MspInit+0x128>)
 8001ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eda:	4a12      	ldr	r2, [pc, #72]	; (8001f24 <HAL_TIM_PWM_MspInit+0x128>)
 8001edc:	f043 0302 	orr.w	r3, r3, #2
 8001ee0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ee2:	4b10      	ldr	r3, [pc, #64]	; (8001f24 <HAL_TIM_PWM_MspInit+0x128>)
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	613b      	str	r3, [r7, #16]
 8001eec:	693b      	ldr	r3, [r7, #16]
}
 8001eee:	e012      	b.n	8001f16 <HAL_TIM_PWM_MspInit+0x11a>
  else if(tim_pwmHandle->Instance==TIM12)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a10      	ldr	r2, [pc, #64]	; (8001f38 <HAL_TIM_PWM_MspInit+0x13c>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d10d      	bne.n	8001f16 <HAL_TIM_PWM_MspInit+0x11a>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <HAL_TIM_PWM_MspInit+0x128>)
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	4a08      	ldr	r2, [pc, #32]	; (8001f24 <HAL_TIM_PWM_MspInit+0x128>)
 8001f04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f08:	6413      	str	r3, [r2, #64]	; 0x40
 8001f0a:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <HAL_TIM_PWM_MspInit+0x128>)
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	68fb      	ldr	r3, [r7, #12]
}
 8001f16:	bf00      	nop
 8001f18:	3738      	adds	r7, #56	; 0x38
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40010000 	.word	0x40010000
 8001f24:	40023800 	.word	0x40023800
 8001f28:	40000400 	.word	0x40000400
 8001f2c:	40020400 	.word	0x40020400
 8001f30:	40000800 	.word	0x40000800
 8001f34:	40010400 	.word	0x40010400
 8001f38:	40001800 	.word	0x40001800

08001f3c <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b08a      	sub	sp, #40	; 0x28
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f44:	f107 0314 	add.w	r3, r7, #20
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	609a      	str	r2, [r3, #8]
 8001f50:	60da      	str	r2, [r3, #12]
 8001f52:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f5c:	d152      	bne.n	8002004 <HAL_TIM_IC_MspInit+0xc8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	613b      	str	r3, [r7, #16]
 8001f62:	4b2a      	ldr	r3, [pc, #168]	; (800200c <HAL_TIM_IC_MspInit+0xd0>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	4a29      	ldr	r2, [pc, #164]	; (800200c <HAL_TIM_IC_MspInit+0xd0>)
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f6e:	4b27      	ldr	r3, [pc, #156]	; (800200c <HAL_TIM_IC_MspInit+0xd0>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	613b      	str	r3, [r7, #16]
 8001f78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	4b23      	ldr	r3, [pc, #140]	; (800200c <HAL_TIM_IC_MspInit+0xd0>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	4a22      	ldr	r2, [pc, #136]	; (800200c <HAL_TIM_IC_MspInit+0xd0>)
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8a:	4b20      	ldr	r3, [pc, #128]	; (800200c <HAL_TIM_IC_MspInit+0xd0>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	4b1c      	ldr	r3, [pc, #112]	; (800200c <HAL_TIM_IC_MspInit+0xd0>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	4a1b      	ldr	r2, [pc, #108]	; (800200c <HAL_TIM_IC_MspInit+0xd0>)
 8001fa0:	f043 0302 	orr.w	r3, r3, #2
 8001fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa6:	4b19      	ldr	r3, [pc, #100]	; (800200c <HAL_TIM_IC_MspInit+0xd0>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	60bb      	str	r3, [r7, #8]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB2     ------> TIM2_CH4
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc6:	f107 0314 	add.w	r3, r7, #20
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4810      	ldr	r0, [pc, #64]	; (8002010 <HAL_TIM_IC_MspInit+0xd4>)
 8001fce:	f000 fbeb 	bl	80027a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 8001fd2:	f240 4304 	movw	r3, #1028	; 0x404
 8001fd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe8:	f107 0314 	add.w	r3, r7, #20
 8001fec:	4619      	mov	r1, r3
 8001fee:	4809      	ldr	r0, [pc, #36]	; (8002014 <HAL_TIM_IC_MspInit+0xd8>)
 8001ff0:	f000 fbda 	bl	80027a8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	2105      	movs	r1, #5
 8001ff8:	201c      	movs	r0, #28
 8001ffa:	f000 fb19 	bl	8002630 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ffe:	201c      	movs	r0, #28
 8002000:	f000 fb32 	bl	8002668 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002004:	bf00      	nop
 8002006:	3728      	adds	r7, #40	; 0x28
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40023800 	.word	0x40023800
 8002010:	40020000 	.word	0x40020000
 8002014:	40020400 	.word	0x40020400

08002018 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b08c      	sub	sp, #48	; 0x30
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002020:	f107 031c 	add.w	r3, r7, #28
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	609a      	str	r2, [r3, #8]
 800202c:	60da      	str	r2, [r3, #12]
 800202e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a5b      	ldr	r2, [pc, #364]	; (80021a4 <HAL_TIM_MspPostInit+0x18c>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d11f      	bne.n	800207a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	61bb      	str	r3, [r7, #24]
 800203e:	4b5a      	ldr	r3, [pc, #360]	; (80021a8 <HAL_TIM_MspPostInit+0x190>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	4a59      	ldr	r2, [pc, #356]	; (80021a8 <HAL_TIM_MspPostInit+0x190>)
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	6313      	str	r3, [r2, #48]	; 0x30
 800204a:	4b57      	ldr	r3, [pc, #348]	; (80021a8 <HAL_TIM_MspPostInit+0x190>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	61bb      	str	r3, [r7, #24]
 8002054:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002056:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800205a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205c:	2302      	movs	r3, #2
 800205e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002060:	2300      	movs	r3, #0
 8002062:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002064:	2300      	movs	r3, #0
 8002066:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002068:	2301      	movs	r3, #1
 800206a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800206c:	f107 031c 	add.w	r3, r7, #28
 8002070:	4619      	mov	r1, r3
 8002072:	484e      	ldr	r0, [pc, #312]	; (80021ac <HAL_TIM_MspPostInit+0x194>)
 8002074:	f000 fb98 	bl	80027a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002078:	e090      	b.n	800219c <HAL_TIM_MspPostInit+0x184>
  else if(timHandle->Instance==TIM3)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a4c      	ldr	r2, [pc, #304]	; (80021b0 <HAL_TIM_MspPostInit+0x198>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d11e      	bne.n	80020c2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002084:	2300      	movs	r3, #0
 8002086:	617b      	str	r3, [r7, #20]
 8002088:	4b47      	ldr	r3, [pc, #284]	; (80021a8 <HAL_TIM_MspPostInit+0x190>)
 800208a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208c:	4a46      	ldr	r2, [pc, #280]	; (80021a8 <HAL_TIM_MspPostInit+0x190>)
 800208e:	f043 0304 	orr.w	r3, r3, #4
 8002092:	6313      	str	r3, [r2, #48]	; 0x30
 8002094:	4b44      	ldr	r3, [pc, #272]	; (80021a8 <HAL_TIM_MspPostInit+0x190>)
 8002096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	617b      	str	r3, [r7, #20]
 800209e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80020a0:	2340      	movs	r3, #64	; 0x40
 80020a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a4:	2302      	movs	r3, #2
 80020a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ac:	2300      	movs	r3, #0
 80020ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020b0:	2302      	movs	r3, #2
 80020b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020b4:	f107 031c 	add.w	r3, r7, #28
 80020b8:	4619      	mov	r1, r3
 80020ba:	483e      	ldr	r0, [pc, #248]	; (80021b4 <HAL_TIM_MspPostInit+0x19c>)
 80020bc:	f000 fb74 	bl	80027a8 <HAL_GPIO_Init>
}
 80020c0:	e06c      	b.n	800219c <HAL_TIM_MspPostInit+0x184>
  else if(timHandle->Instance==TIM4)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a3c      	ldr	r2, [pc, #240]	; (80021b8 <HAL_TIM_MspPostInit+0x1a0>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d11e      	bne.n	800210a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020cc:	2300      	movs	r3, #0
 80020ce:	613b      	str	r3, [r7, #16]
 80020d0:	4b35      	ldr	r3, [pc, #212]	; (80021a8 <HAL_TIM_MspPostInit+0x190>)
 80020d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d4:	4a34      	ldr	r2, [pc, #208]	; (80021a8 <HAL_TIM_MspPostInit+0x190>)
 80020d6:	f043 0302 	orr.w	r3, r3, #2
 80020da:	6313      	str	r3, [r2, #48]	; 0x30
 80020dc:	4b32      	ldr	r3, [pc, #200]	; (80021a8 <HAL_TIM_MspPostInit+0x190>)
 80020de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	613b      	str	r3, [r7, #16]
 80020e6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80020e8:	2340      	movs	r3, #64	; 0x40
 80020ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ec:	2302      	movs	r3, #2
 80020ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f4:	2300      	movs	r3, #0
 80020f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80020f8:	2302      	movs	r3, #2
 80020fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020fc:	f107 031c 	add.w	r3, r7, #28
 8002100:	4619      	mov	r1, r3
 8002102:	482e      	ldr	r0, [pc, #184]	; (80021bc <HAL_TIM_MspPostInit+0x1a4>)
 8002104:	f000 fb50 	bl	80027a8 <HAL_GPIO_Init>
}
 8002108:	e048      	b.n	800219c <HAL_TIM_MspPostInit+0x184>
  else if(timHandle->Instance==TIM8)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a2c      	ldr	r2, [pc, #176]	; (80021c0 <HAL_TIM_MspPostInit+0x1a8>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d11f      	bne.n	8002154 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002114:	2300      	movs	r3, #0
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	4b23      	ldr	r3, [pc, #140]	; (80021a8 <HAL_TIM_MspPostInit+0x190>)
 800211a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211c:	4a22      	ldr	r2, [pc, #136]	; (80021a8 <HAL_TIM_MspPostInit+0x190>)
 800211e:	f043 0304 	orr.w	r3, r3, #4
 8002122:	6313      	str	r3, [r2, #48]	; 0x30
 8002124:	4b20      	ldr	r3, [pc, #128]	; (80021a8 <HAL_TIM_MspPostInit+0x190>)
 8002126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002130:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002134:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002136:	2302      	movs	r3, #2
 8002138:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213a:	2300      	movs	r3, #0
 800213c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800213e:	2300      	movs	r3, #0
 8002140:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002142:	2303      	movs	r3, #3
 8002144:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002146:	f107 031c 	add.w	r3, r7, #28
 800214a:	4619      	mov	r1, r3
 800214c:	4819      	ldr	r0, [pc, #100]	; (80021b4 <HAL_TIM_MspPostInit+0x19c>)
 800214e:	f000 fb2b 	bl	80027a8 <HAL_GPIO_Init>
}
 8002152:	e023      	b.n	800219c <HAL_TIM_MspPostInit+0x184>
  else if(timHandle->Instance==TIM12)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a1a      	ldr	r2, [pc, #104]	; (80021c4 <HAL_TIM_MspPostInit+0x1ac>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d11e      	bne.n	800219c <HAL_TIM_MspPostInit+0x184>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <HAL_TIM_MspPostInit+0x190>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	4a10      	ldr	r2, [pc, #64]	; (80021a8 <HAL_TIM_MspPostInit+0x190>)
 8002168:	f043 0302 	orr.w	r3, r3, #2
 800216c:	6313      	str	r3, [r2, #48]	; 0x30
 800216e:	4b0e      	ldr	r3, [pc, #56]	; (80021a8 <HAL_TIM_MspPostInit+0x190>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	60bb      	str	r3, [r7, #8]
 8002178:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800217a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800217e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002180:	2302      	movs	r3, #2
 8002182:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002184:	2300      	movs	r3, #0
 8002186:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002188:	2300      	movs	r3, #0
 800218a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800218c:	2309      	movs	r3, #9
 800218e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002190:	f107 031c 	add.w	r3, r7, #28
 8002194:	4619      	mov	r1, r3
 8002196:	4809      	ldr	r0, [pc, #36]	; (80021bc <HAL_TIM_MspPostInit+0x1a4>)
 8002198:	f000 fb06 	bl	80027a8 <HAL_GPIO_Init>
}
 800219c:	bf00      	nop
 800219e:	3730      	adds	r7, #48	; 0x30
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40010000 	.word	0x40010000
 80021a8:	40023800 	.word	0x40023800
 80021ac:	40020000 	.word	0x40020000
 80021b0:	40000400 	.word	0x40000400
 80021b4:	40020800 	.word	0x40020800
 80021b8:	40000800 	.word	0x40000800
 80021bc:	40020400 	.word	0x40020400
 80021c0:	40010400 	.word	0x40010400
 80021c4:	40001800 	.word	0x40001800

080021c8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021cc:	4b11      	ldr	r3, [pc, #68]	; (8002214 <MX_USART2_UART_Init+0x4c>)
 80021ce:	4a12      	ldr	r2, [pc, #72]	; (8002218 <MX_USART2_UART_Init+0x50>)
 80021d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021d2:	4b10      	ldr	r3, [pc, #64]	; (8002214 <MX_USART2_UART_Init+0x4c>)
 80021d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021da:	4b0e      	ldr	r3, [pc, #56]	; (8002214 <MX_USART2_UART_Init+0x4c>)
 80021dc:	2200      	movs	r2, #0
 80021de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021e0:	4b0c      	ldr	r3, [pc, #48]	; (8002214 <MX_USART2_UART_Init+0x4c>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021e6:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <MX_USART2_UART_Init+0x4c>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021ec:	4b09      	ldr	r3, [pc, #36]	; (8002214 <MX_USART2_UART_Init+0x4c>)
 80021ee:	220c      	movs	r2, #12
 80021f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021f2:	4b08      	ldr	r3, [pc, #32]	; (8002214 <MX_USART2_UART_Init+0x4c>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021f8:	4b06      	ldr	r3, [pc, #24]	; (8002214 <MX_USART2_UART_Init+0x4c>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021fe:	4805      	ldr	r0, [pc, #20]	; (8002214 <MX_USART2_UART_Init+0x4c>)
 8002200:	f004 fbbc 	bl	800697c <HAL_UART_Init>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800220a:	f7ff f91d 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	200004bc 	.word	0x200004bc
 8002218:	40004400 	.word	0x40004400

0800221c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002220:	4b11      	ldr	r3, [pc, #68]	; (8002268 <MX_USART3_UART_Init+0x4c>)
 8002222:	4a12      	ldr	r2, [pc, #72]	; (800226c <MX_USART3_UART_Init+0x50>)
 8002224:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002226:	4b10      	ldr	r3, [pc, #64]	; (8002268 <MX_USART3_UART_Init+0x4c>)
 8002228:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800222c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800222e:	4b0e      	ldr	r3, [pc, #56]	; (8002268 <MX_USART3_UART_Init+0x4c>)
 8002230:	2200      	movs	r2, #0
 8002232:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002234:	4b0c      	ldr	r3, [pc, #48]	; (8002268 <MX_USART3_UART_Init+0x4c>)
 8002236:	2200      	movs	r2, #0
 8002238:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800223a:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <MX_USART3_UART_Init+0x4c>)
 800223c:	2200      	movs	r2, #0
 800223e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002240:	4b09      	ldr	r3, [pc, #36]	; (8002268 <MX_USART3_UART_Init+0x4c>)
 8002242:	220c      	movs	r2, #12
 8002244:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002246:	4b08      	ldr	r3, [pc, #32]	; (8002268 <MX_USART3_UART_Init+0x4c>)
 8002248:	2200      	movs	r2, #0
 800224a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800224c:	4b06      	ldr	r3, [pc, #24]	; (8002268 <MX_USART3_UART_Init+0x4c>)
 800224e:	2200      	movs	r2, #0
 8002250:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002252:	4805      	ldr	r0, [pc, #20]	; (8002268 <MX_USART3_UART_Init+0x4c>)
 8002254:	f004 fb92 	bl	800697c <HAL_UART_Init>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800225e:	f7ff f8f3 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	20000504 	.word	0x20000504
 800226c:	40004800 	.word	0x40004800

08002270 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b08c      	sub	sp, #48	; 0x30
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002278:	f107 031c 	add.w	r3, r7, #28
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	605a      	str	r2, [r3, #4]
 8002282:	609a      	str	r2, [r3, #8]
 8002284:	60da      	str	r2, [r3, #12]
 8002286:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a36      	ldr	r2, [pc, #216]	; (8002368 <HAL_UART_MspInit+0xf8>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d12c      	bne.n	80022ec <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	61bb      	str	r3, [r7, #24]
 8002296:	4b35      	ldr	r3, [pc, #212]	; (800236c <HAL_UART_MspInit+0xfc>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	4a34      	ldr	r2, [pc, #208]	; (800236c <HAL_UART_MspInit+0xfc>)
 800229c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022a0:	6413      	str	r3, [r2, #64]	; 0x40
 80022a2:	4b32      	ldr	r3, [pc, #200]	; (800236c <HAL_UART_MspInit+0xfc>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022aa:	61bb      	str	r3, [r7, #24]
 80022ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]
 80022b2:	4b2e      	ldr	r3, [pc, #184]	; (800236c <HAL_UART_MspInit+0xfc>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	4a2d      	ldr	r2, [pc, #180]	; (800236c <HAL_UART_MspInit+0xfc>)
 80022b8:	f043 0301 	orr.w	r3, r3, #1
 80022bc:	6313      	str	r3, [r2, #48]	; 0x30
 80022be:	4b2b      	ldr	r3, [pc, #172]	; (800236c <HAL_UART_MspInit+0xfc>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	617b      	str	r3, [r7, #20]
 80022c8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80022ca:	230c      	movs	r3, #12
 80022cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ce:	2302      	movs	r3, #2
 80022d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d6:	2303      	movs	r3, #3
 80022d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022da:	2307      	movs	r3, #7
 80022dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022de:	f107 031c 	add.w	r3, r7, #28
 80022e2:	4619      	mov	r1, r3
 80022e4:	4822      	ldr	r0, [pc, #136]	; (8002370 <HAL_UART_MspInit+0x100>)
 80022e6:	f000 fa5f 	bl	80027a8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80022ea:	e039      	b.n	8002360 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART3)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a20      	ldr	r2, [pc, #128]	; (8002374 <HAL_UART_MspInit+0x104>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d134      	bne.n	8002360 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80022f6:	2300      	movs	r3, #0
 80022f8:	613b      	str	r3, [r7, #16]
 80022fa:	4b1c      	ldr	r3, [pc, #112]	; (800236c <HAL_UART_MspInit+0xfc>)
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	4a1b      	ldr	r2, [pc, #108]	; (800236c <HAL_UART_MspInit+0xfc>)
 8002300:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002304:	6413      	str	r3, [r2, #64]	; 0x40
 8002306:	4b19      	ldr	r3, [pc, #100]	; (800236c <HAL_UART_MspInit+0xfc>)
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800230e:	613b      	str	r3, [r7, #16]
 8002310:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002312:	2300      	movs	r3, #0
 8002314:	60fb      	str	r3, [r7, #12]
 8002316:	4b15      	ldr	r3, [pc, #84]	; (800236c <HAL_UART_MspInit+0xfc>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231a:	4a14      	ldr	r2, [pc, #80]	; (800236c <HAL_UART_MspInit+0xfc>)
 800231c:	f043 0304 	orr.w	r3, r3, #4
 8002320:	6313      	str	r3, [r2, #48]	; 0x30
 8002322:	4b12      	ldr	r3, [pc, #72]	; (800236c <HAL_UART_MspInit+0xfc>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	f003 0304 	and.w	r3, r3, #4
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800232e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002334:	2302      	movs	r3, #2
 8002336:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002338:	2300      	movs	r3, #0
 800233a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800233c:	2303      	movs	r3, #3
 800233e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002340:	2307      	movs	r3, #7
 8002342:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002344:	f107 031c 	add.w	r3, r7, #28
 8002348:	4619      	mov	r1, r3
 800234a:	480b      	ldr	r0, [pc, #44]	; (8002378 <HAL_UART_MspInit+0x108>)
 800234c:	f000 fa2c 	bl	80027a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002350:	2200      	movs	r2, #0
 8002352:	2105      	movs	r1, #5
 8002354:	2027      	movs	r0, #39	; 0x27
 8002356:	f000 f96b 	bl	8002630 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800235a:	2027      	movs	r0, #39	; 0x27
 800235c:	f000 f984 	bl	8002668 <HAL_NVIC_EnableIRQ>
}
 8002360:	bf00      	nop
 8002362:	3730      	adds	r7, #48	; 0x30
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40004400 	.word	0x40004400
 800236c:	40023800 	.word	0x40023800
 8002370:	40020000 	.word	0x40020000
 8002374:	40004800 	.word	0x40004800
 8002378:	40020800 	.word	0x40020800

0800237c <HAL_UART_RxCpltCallback>:
}

/* USER CODE BEGIN 1 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a04      	ldr	r2, [pc, #16]	; (800239c <HAL_UART_RxCpltCallback+0x20>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d101      	bne.n	8002392 <HAL_UART_RxCpltCallback+0x16>
	{
		GPS_Callback();
 800238e:	f007 ffb1 	bl	800a2f4 <GPS_Callback>
	}
}
 8002392:	bf00      	nop
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	40004800 	.word	0x40004800

080023a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80023a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023d8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80023a4:	f7ff fa7a 	bl	800189c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023a8:	480c      	ldr	r0, [pc, #48]	; (80023dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023aa:	490d      	ldr	r1, [pc, #52]	; (80023e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023ac:	4a0d      	ldr	r2, [pc, #52]	; (80023e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023b0:	e002      	b.n	80023b8 <LoopCopyDataInit>

080023b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023b6:	3304      	adds	r3, #4

080023b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023bc:	d3f9      	bcc.n	80023b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023be:	4a0a      	ldr	r2, [pc, #40]	; (80023e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023c0:	4c0a      	ldr	r4, [pc, #40]	; (80023ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80023c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023c4:	e001      	b.n	80023ca <LoopFillZerobss>

080023c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023c8:	3204      	adds	r2, #4

080023ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023cc:	d3fb      	bcc.n	80023c6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80023ce:	f00b fdd5 	bl	800df7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023d2:	f7fe ff8b 	bl	80012ec <main>
  bx  lr    
 80023d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023e0:	20000140 	.word	0x20000140
  ldr r2, =_sidata
 80023e4:	0800fd98 	.word	0x0800fd98
  ldr r2, =_sbss
 80023e8:	20000140 	.word	0x20000140
  ldr r4, =_ebss
 80023ec:	200056e4 	.word	0x200056e4

080023f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023f0:	e7fe      	b.n	80023f0 <ADC_IRQHandler>
	...

080023f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023f8:	4b0e      	ldr	r3, [pc, #56]	; (8002434 <HAL_Init+0x40>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a0d      	ldr	r2, [pc, #52]	; (8002434 <HAL_Init+0x40>)
 80023fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002402:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002404:	4b0b      	ldr	r3, [pc, #44]	; (8002434 <HAL_Init+0x40>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a0a      	ldr	r2, [pc, #40]	; (8002434 <HAL_Init+0x40>)
 800240a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800240e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002410:	4b08      	ldr	r3, [pc, #32]	; (8002434 <HAL_Init+0x40>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a07      	ldr	r2, [pc, #28]	; (8002434 <HAL_Init+0x40>)
 8002416:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800241a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800241c:	2003      	movs	r0, #3
 800241e:	f000 f8fc 	bl	800261a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002422:	200f      	movs	r0, #15
 8002424:	f7ff f94c 	bl	80016c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002428:	f7ff f91e 	bl	8001668 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	40023c00 	.word	0x40023c00

08002438 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800243c:	4b06      	ldr	r3, [pc, #24]	; (8002458 <HAL_IncTick+0x20>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	461a      	mov	r2, r3
 8002442:	4b06      	ldr	r3, [pc, #24]	; (800245c <HAL_IncTick+0x24>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4413      	add	r3, r2
 8002448:	4a04      	ldr	r2, [pc, #16]	; (800245c <HAL_IncTick+0x24>)
 800244a:	6013      	str	r3, [r2, #0]
}
 800244c:	bf00      	nop
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	20000008 	.word	0x20000008
 800245c:	2000054c 	.word	0x2000054c

08002460 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  return uwTick;
 8002464:	4b03      	ldr	r3, [pc, #12]	; (8002474 <HAL_GetTick+0x14>)
 8002466:	681b      	ldr	r3, [r3, #0]
}
 8002468:	4618      	mov	r0, r3
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	2000054c 	.word	0x2000054c

08002478 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002480:	f7ff ffee 	bl	8002460 <HAL_GetTick>
 8002484:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002490:	d005      	beq.n	800249e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002492:	4b0a      	ldr	r3, [pc, #40]	; (80024bc <HAL_Delay+0x44>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	461a      	mov	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	4413      	add	r3, r2
 800249c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800249e:	bf00      	nop
 80024a0:	f7ff ffde 	bl	8002460 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d8f7      	bhi.n	80024a0 <HAL_Delay+0x28>
  {
  }
}
 80024b0:	bf00      	nop
 80024b2:	bf00      	nop
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	20000008 	.word	0x20000008

080024c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024d0:	4b0c      	ldr	r3, [pc, #48]	; (8002504 <__NVIC_SetPriorityGrouping+0x44>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024dc:	4013      	ands	r3, r2
 80024de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024f2:	4a04      	ldr	r2, [pc, #16]	; (8002504 <__NVIC_SetPriorityGrouping+0x44>)
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	60d3      	str	r3, [r2, #12]
}
 80024f8:	bf00      	nop
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	e000ed00 	.word	0xe000ed00

08002508 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800250c:	4b04      	ldr	r3, [pc, #16]	; (8002520 <__NVIC_GetPriorityGrouping+0x18>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	0a1b      	lsrs	r3, r3, #8
 8002512:	f003 0307 	and.w	r3, r3, #7
}
 8002516:	4618      	mov	r0, r3
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	e000ed00 	.word	0xe000ed00

08002524 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	4603      	mov	r3, r0
 800252c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800252e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002532:	2b00      	cmp	r3, #0
 8002534:	db0b      	blt.n	800254e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002536:	79fb      	ldrb	r3, [r7, #7]
 8002538:	f003 021f 	and.w	r2, r3, #31
 800253c:	4907      	ldr	r1, [pc, #28]	; (800255c <__NVIC_EnableIRQ+0x38>)
 800253e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002542:	095b      	lsrs	r3, r3, #5
 8002544:	2001      	movs	r0, #1
 8002546:	fa00 f202 	lsl.w	r2, r0, r2
 800254a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	e000e100 	.word	0xe000e100

08002560 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	4603      	mov	r3, r0
 8002568:	6039      	str	r1, [r7, #0]
 800256a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800256c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002570:	2b00      	cmp	r3, #0
 8002572:	db0a      	blt.n	800258a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	b2da      	uxtb	r2, r3
 8002578:	490c      	ldr	r1, [pc, #48]	; (80025ac <__NVIC_SetPriority+0x4c>)
 800257a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257e:	0112      	lsls	r2, r2, #4
 8002580:	b2d2      	uxtb	r2, r2
 8002582:	440b      	add	r3, r1
 8002584:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002588:	e00a      	b.n	80025a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	b2da      	uxtb	r2, r3
 800258e:	4908      	ldr	r1, [pc, #32]	; (80025b0 <__NVIC_SetPriority+0x50>)
 8002590:	79fb      	ldrb	r3, [r7, #7]
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	3b04      	subs	r3, #4
 8002598:	0112      	lsls	r2, r2, #4
 800259a:	b2d2      	uxtb	r2, r2
 800259c:	440b      	add	r3, r1
 800259e:	761a      	strb	r2, [r3, #24]
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	e000e100 	.word	0xe000e100
 80025b0:	e000ed00 	.word	0xe000ed00

080025b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b089      	sub	sp, #36	; 0x24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	f1c3 0307 	rsb	r3, r3, #7
 80025ce:	2b04      	cmp	r3, #4
 80025d0:	bf28      	it	cs
 80025d2:	2304      	movcs	r3, #4
 80025d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	3304      	adds	r3, #4
 80025da:	2b06      	cmp	r3, #6
 80025dc:	d902      	bls.n	80025e4 <NVIC_EncodePriority+0x30>
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	3b03      	subs	r3, #3
 80025e2:	e000      	b.n	80025e6 <NVIC_EncodePriority+0x32>
 80025e4:	2300      	movs	r3, #0
 80025e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e8:	f04f 32ff 	mov.w	r2, #4294967295
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	43da      	mvns	r2, r3
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	401a      	ands	r2, r3
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	fa01 f303 	lsl.w	r3, r1, r3
 8002606:	43d9      	mvns	r1, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800260c:	4313      	orrs	r3, r2
         );
}
 800260e:	4618      	mov	r0, r3
 8002610:	3724      	adds	r7, #36	; 0x24
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr

0800261a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b082      	sub	sp, #8
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7ff ff4c 	bl	80024c0 <__NVIC_SetPriorityGrouping>
}
 8002628:	bf00      	nop
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
 800263c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800263e:	2300      	movs	r3, #0
 8002640:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002642:	f7ff ff61 	bl	8002508 <__NVIC_GetPriorityGrouping>
 8002646:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	68b9      	ldr	r1, [r7, #8]
 800264c:	6978      	ldr	r0, [r7, #20]
 800264e:	f7ff ffb1 	bl	80025b4 <NVIC_EncodePriority>
 8002652:	4602      	mov	r2, r0
 8002654:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002658:	4611      	mov	r1, r2
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff ff80 	bl	8002560 <__NVIC_SetPriority>
}
 8002660:	bf00      	nop
 8002662:	3718      	adds	r7, #24
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	4603      	mov	r3, r0
 8002670:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002676:	4618      	mov	r0, r3
 8002678:	f7ff ff54 	bl	8002524 <__NVIC_EnableIRQ>
}
 800267c:	bf00      	nop
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002690:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002692:	f7ff fee5 	bl	8002460 <HAL_GetTick>
 8002696:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d008      	beq.n	80026b6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2280      	movs	r2, #128	; 0x80
 80026a8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e052      	b.n	800275c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 0216 	bic.w	r2, r2, #22
 80026c4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	695a      	ldr	r2, [r3, #20]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026d4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d103      	bne.n	80026e6 <HAL_DMA_Abort+0x62>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d007      	beq.n	80026f6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f022 0208 	bic.w	r2, r2, #8
 80026f4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f022 0201 	bic.w	r2, r2, #1
 8002704:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002706:	e013      	b.n	8002730 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002708:	f7ff feaa 	bl	8002460 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b05      	cmp	r3, #5
 8002714:	d90c      	bls.n	8002730 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2220      	movs	r2, #32
 800271a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2203      	movs	r2, #3
 8002720:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e015      	b.n	800275c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1e4      	bne.n	8002708 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002742:	223f      	movs	r2, #63	; 0x3f
 8002744:	409a      	lsls	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3710      	adds	r7, #16
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d004      	beq.n	8002782 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2280      	movs	r2, #128	; 0x80
 800277c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e00c      	b.n	800279c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2205      	movs	r2, #5
 8002786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f022 0201 	bic.w	r2, r2, #1
 8002798:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b089      	sub	sp, #36	; 0x24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027b2:	2300      	movs	r3, #0
 80027b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027b6:	2300      	movs	r3, #0
 80027b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027ba:	2300      	movs	r3, #0
 80027bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027be:	2300      	movs	r3, #0
 80027c0:	61fb      	str	r3, [r7, #28]
 80027c2:	e165      	b.n	8002a90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027c4:	2201      	movs	r2, #1
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	4013      	ands	r3, r2
 80027d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	429a      	cmp	r2, r3
 80027de:	f040 8154 	bne.w	8002a8a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d005      	beq.n	80027fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d130      	bne.n	800285c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	2203      	movs	r2, #3
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	43db      	mvns	r3, r3
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	4013      	ands	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	68da      	ldr	r2, [r3, #12]
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	4313      	orrs	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002830:	2201      	movs	r2, #1
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	091b      	lsrs	r3, r3, #4
 8002846:	f003 0201 	and.w	r2, r3, #1
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4313      	orrs	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f003 0303 	and.w	r3, r3, #3
 8002864:	2b03      	cmp	r3, #3
 8002866:	d017      	beq.n	8002898 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	2203      	movs	r2, #3
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	43db      	mvns	r3, r3
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4013      	ands	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4313      	orrs	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f003 0303 	and.w	r3, r3, #3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d123      	bne.n	80028ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	08da      	lsrs	r2, r3, #3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3208      	adds	r2, #8
 80028ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	220f      	movs	r2, #15
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	43db      	mvns	r3, r3
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4013      	ands	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	691a      	ldr	r2, [r3, #16]
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	f003 0307 	and.w	r3, r3, #7
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	4313      	orrs	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	08da      	lsrs	r2, r3, #3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	3208      	adds	r2, #8
 80028e6:	69b9      	ldr	r1, [r7, #24]
 80028e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	2203      	movs	r2, #3
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	43db      	mvns	r3, r3
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4013      	ands	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f003 0203 	and.w	r2, r3, #3
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	4313      	orrs	r3, r2
 8002918:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 80ae 	beq.w	8002a8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	60fb      	str	r3, [r7, #12]
 8002932:	4b5d      	ldr	r3, [pc, #372]	; (8002aa8 <HAL_GPIO_Init+0x300>)
 8002934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002936:	4a5c      	ldr	r2, [pc, #368]	; (8002aa8 <HAL_GPIO_Init+0x300>)
 8002938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800293c:	6453      	str	r3, [r2, #68]	; 0x44
 800293e:	4b5a      	ldr	r3, [pc, #360]	; (8002aa8 <HAL_GPIO_Init+0x300>)
 8002940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800294a:	4a58      	ldr	r2, [pc, #352]	; (8002aac <HAL_GPIO_Init+0x304>)
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	089b      	lsrs	r3, r3, #2
 8002950:	3302      	adds	r3, #2
 8002952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002956:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	f003 0303 	and.w	r3, r3, #3
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	220f      	movs	r2, #15
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	43db      	mvns	r3, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4013      	ands	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a4f      	ldr	r2, [pc, #316]	; (8002ab0 <HAL_GPIO_Init+0x308>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d025      	beq.n	80029c2 <HAL_GPIO_Init+0x21a>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a4e      	ldr	r2, [pc, #312]	; (8002ab4 <HAL_GPIO_Init+0x30c>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d01f      	beq.n	80029be <HAL_GPIO_Init+0x216>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a4d      	ldr	r2, [pc, #308]	; (8002ab8 <HAL_GPIO_Init+0x310>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d019      	beq.n	80029ba <HAL_GPIO_Init+0x212>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a4c      	ldr	r2, [pc, #304]	; (8002abc <HAL_GPIO_Init+0x314>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d013      	beq.n	80029b6 <HAL_GPIO_Init+0x20e>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a4b      	ldr	r2, [pc, #300]	; (8002ac0 <HAL_GPIO_Init+0x318>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d00d      	beq.n	80029b2 <HAL_GPIO_Init+0x20a>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a4a      	ldr	r2, [pc, #296]	; (8002ac4 <HAL_GPIO_Init+0x31c>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d007      	beq.n	80029ae <HAL_GPIO_Init+0x206>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a49      	ldr	r2, [pc, #292]	; (8002ac8 <HAL_GPIO_Init+0x320>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d101      	bne.n	80029aa <HAL_GPIO_Init+0x202>
 80029a6:	2306      	movs	r3, #6
 80029a8:	e00c      	b.n	80029c4 <HAL_GPIO_Init+0x21c>
 80029aa:	2307      	movs	r3, #7
 80029ac:	e00a      	b.n	80029c4 <HAL_GPIO_Init+0x21c>
 80029ae:	2305      	movs	r3, #5
 80029b0:	e008      	b.n	80029c4 <HAL_GPIO_Init+0x21c>
 80029b2:	2304      	movs	r3, #4
 80029b4:	e006      	b.n	80029c4 <HAL_GPIO_Init+0x21c>
 80029b6:	2303      	movs	r3, #3
 80029b8:	e004      	b.n	80029c4 <HAL_GPIO_Init+0x21c>
 80029ba:	2302      	movs	r3, #2
 80029bc:	e002      	b.n	80029c4 <HAL_GPIO_Init+0x21c>
 80029be:	2301      	movs	r3, #1
 80029c0:	e000      	b.n	80029c4 <HAL_GPIO_Init+0x21c>
 80029c2:	2300      	movs	r3, #0
 80029c4:	69fa      	ldr	r2, [r7, #28]
 80029c6:	f002 0203 	and.w	r2, r2, #3
 80029ca:	0092      	lsls	r2, r2, #2
 80029cc:	4093      	lsls	r3, r2
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029d4:	4935      	ldr	r1, [pc, #212]	; (8002aac <HAL_GPIO_Init+0x304>)
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	089b      	lsrs	r3, r3, #2
 80029da:	3302      	adds	r3, #2
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029e2:	4b3a      	ldr	r3, [pc, #232]	; (8002acc <HAL_GPIO_Init+0x324>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	43db      	mvns	r3, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4013      	ands	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a06:	4a31      	ldr	r2, [pc, #196]	; (8002acc <HAL_GPIO_Init+0x324>)
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a0c:	4b2f      	ldr	r3, [pc, #188]	; (8002acc <HAL_GPIO_Init+0x324>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	43db      	mvns	r3, r3
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d003      	beq.n	8002a30 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a30:	4a26      	ldr	r2, [pc, #152]	; (8002acc <HAL_GPIO_Init+0x324>)
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a36:	4b25      	ldr	r3, [pc, #148]	; (8002acc <HAL_GPIO_Init+0x324>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	4013      	ands	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a5a:	4a1c      	ldr	r2, [pc, #112]	; (8002acc <HAL_GPIO_Init+0x324>)
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a60:	4b1a      	ldr	r3, [pc, #104]	; (8002acc <HAL_GPIO_Init+0x324>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d003      	beq.n	8002a84 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a84:	4a11      	ldr	r2, [pc, #68]	; (8002acc <HAL_GPIO_Init+0x324>)
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	61fb      	str	r3, [r7, #28]
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	2b0f      	cmp	r3, #15
 8002a94:	f67f ae96 	bls.w	80027c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a98:	bf00      	nop
 8002a9a:	bf00      	nop
 8002a9c:	3724      	adds	r7, #36	; 0x24
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	40013800 	.word	0x40013800
 8002ab0:	40020000 	.word	0x40020000
 8002ab4:	40020400 	.word	0x40020400
 8002ab8:	40020800 	.word	0x40020800
 8002abc:	40020c00 	.word	0x40020c00
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	40021400 	.word	0x40021400
 8002ac8:	40021800 	.word	0x40021800
 8002acc:	40013c00 	.word	0x40013c00

08002ad0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	460b      	mov	r3, r1
 8002ada:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	691a      	ldr	r2, [r3, #16]
 8002ae0:	887b      	ldrh	r3, [r7, #2]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d002      	beq.n	8002aee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	73fb      	strb	r3, [r7, #15]
 8002aec:	e001      	b.n	8002af2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002aee:	2300      	movs	r3, #0
 8002af0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3714      	adds	r7, #20
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	460b      	mov	r3, r1
 8002b0a:	807b      	strh	r3, [r7, #2]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b10:	787b      	ldrb	r3, [r7, #1]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b16:	887a      	ldrh	r2, [r7, #2]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b1c:	e003      	b.n	8002b26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b1e:	887b      	ldrh	r3, [r7, #2]
 8002b20:	041a      	lsls	r2, r3, #16
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	619a      	str	r2, [r3, #24]
}
 8002b26:	bf00      	nop
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
	...

08002b34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b3e:	4b08      	ldr	r3, [pc, #32]	; (8002b60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b40:	695a      	ldr	r2, [r3, #20]
 8002b42:	88fb      	ldrh	r3, [r7, #6]
 8002b44:	4013      	ands	r3, r2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d006      	beq.n	8002b58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b4a:	4a05      	ldr	r2, [pc, #20]	; (8002b60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b4c:	88fb      	ldrh	r3, [r7, #6]
 8002b4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b50:	88fb      	ldrh	r3, [r7, #6]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7fe faa6 	bl	80010a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b58:	bf00      	nop
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40013c00 	.word	0x40013c00

08002b64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e12b      	b.n	8002dce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d106      	bne.n	8002b90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7fe faf4 	bl	8001178 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2224      	movs	r2, #36	; 0x24
 8002b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 0201 	bic.w	r2, r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bb6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bc6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002bc8:	f001 fab2 	bl	8004130 <HAL_RCC_GetPCLK1Freq>
 8002bcc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	4a81      	ldr	r2, [pc, #516]	; (8002dd8 <HAL_I2C_Init+0x274>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d807      	bhi.n	8002be8 <HAL_I2C_Init+0x84>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	4a80      	ldr	r2, [pc, #512]	; (8002ddc <HAL_I2C_Init+0x278>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	bf94      	ite	ls
 8002be0:	2301      	movls	r3, #1
 8002be2:	2300      	movhi	r3, #0
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	e006      	b.n	8002bf6 <HAL_I2C_Init+0x92>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	4a7d      	ldr	r2, [pc, #500]	; (8002de0 <HAL_I2C_Init+0x27c>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	bf94      	ite	ls
 8002bf0:	2301      	movls	r3, #1
 8002bf2:	2300      	movhi	r3, #0
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e0e7      	b.n	8002dce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	4a78      	ldr	r2, [pc, #480]	; (8002de4 <HAL_I2C_Init+0x280>)
 8002c02:	fba2 2303 	umull	r2, r3, r2, r3
 8002c06:	0c9b      	lsrs	r3, r3, #18
 8002c08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68ba      	ldr	r2, [r7, #8]
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	4a6a      	ldr	r2, [pc, #424]	; (8002dd8 <HAL_I2C_Init+0x274>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d802      	bhi.n	8002c38 <HAL_I2C_Init+0xd4>
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	3301      	adds	r3, #1
 8002c36:	e009      	b.n	8002c4c <HAL_I2C_Init+0xe8>
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c3e:	fb02 f303 	mul.w	r3, r2, r3
 8002c42:	4a69      	ldr	r2, [pc, #420]	; (8002de8 <HAL_I2C_Init+0x284>)
 8002c44:	fba2 2303 	umull	r2, r3, r2, r3
 8002c48:	099b      	lsrs	r3, r3, #6
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	6812      	ldr	r2, [r2, #0]
 8002c50:	430b      	orrs	r3, r1
 8002c52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c5e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	495c      	ldr	r1, [pc, #368]	; (8002dd8 <HAL_I2C_Init+0x274>)
 8002c68:	428b      	cmp	r3, r1
 8002c6a:	d819      	bhi.n	8002ca0 <HAL_I2C_Init+0x13c>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	1e59      	subs	r1, r3, #1
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c7a:	1c59      	adds	r1, r3, #1
 8002c7c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002c80:	400b      	ands	r3, r1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00a      	beq.n	8002c9c <HAL_I2C_Init+0x138>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	1e59      	subs	r1, r3, #1
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c94:	3301      	adds	r3, #1
 8002c96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c9a:	e051      	b.n	8002d40 <HAL_I2C_Init+0x1dc>
 8002c9c:	2304      	movs	r3, #4
 8002c9e:	e04f      	b.n	8002d40 <HAL_I2C_Init+0x1dc>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d111      	bne.n	8002ccc <HAL_I2C_Init+0x168>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	1e58      	subs	r0, r3, #1
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6859      	ldr	r1, [r3, #4]
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	440b      	add	r3, r1
 8002cb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cba:	3301      	adds	r3, #1
 8002cbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	bf0c      	ite	eq
 8002cc4:	2301      	moveq	r3, #1
 8002cc6:	2300      	movne	r3, #0
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	e012      	b.n	8002cf2 <HAL_I2C_Init+0x18e>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	1e58      	subs	r0, r3, #1
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6859      	ldr	r1, [r3, #4]
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	440b      	add	r3, r1
 8002cda:	0099      	lsls	r1, r3, #2
 8002cdc:	440b      	add	r3, r1
 8002cde:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	bf0c      	ite	eq
 8002cec:	2301      	moveq	r3, #1
 8002cee:	2300      	movne	r3, #0
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <HAL_I2C_Init+0x196>
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e022      	b.n	8002d40 <HAL_I2C_Init+0x1dc>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10e      	bne.n	8002d20 <HAL_I2C_Init+0x1bc>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	1e58      	subs	r0, r3, #1
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6859      	ldr	r1, [r3, #4]
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	440b      	add	r3, r1
 8002d10:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d14:	3301      	adds	r3, #1
 8002d16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d1e:	e00f      	b.n	8002d40 <HAL_I2C_Init+0x1dc>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	1e58      	subs	r0, r3, #1
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6859      	ldr	r1, [r3, #4]
 8002d28:	460b      	mov	r3, r1
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	440b      	add	r3, r1
 8002d2e:	0099      	lsls	r1, r3, #2
 8002d30:	440b      	add	r3, r1
 8002d32:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d36:	3301      	adds	r3, #1
 8002d38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d40:	6879      	ldr	r1, [r7, #4]
 8002d42:	6809      	ldr	r1, [r1, #0]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	69da      	ldr	r2, [r3, #28]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	430a      	orrs	r2, r1
 8002d62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	6911      	ldr	r1, [r2, #16]
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	68d2      	ldr	r2, [r2, #12]
 8002d7a:	4311      	orrs	r1, r2
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	6812      	ldr	r2, [r2, #0]
 8002d80:	430b      	orrs	r3, r1
 8002d82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	695a      	ldr	r2, [r3, #20]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	431a      	orrs	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f042 0201 	orr.w	r2, r2, #1
 8002dae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2220      	movs	r2, #32
 8002dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	000186a0 	.word	0x000186a0
 8002ddc:	001e847f 	.word	0x001e847f
 8002de0:	003d08ff 	.word	0x003d08ff
 8002de4:	431bde83 	.word	0x431bde83
 8002de8:	10624dd3 	.word	0x10624dd3

08002dec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b088      	sub	sp, #32
 8002df0:	af02      	add	r7, sp, #8
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	4608      	mov	r0, r1
 8002df6:	4611      	mov	r1, r2
 8002df8:	461a      	mov	r2, r3
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	817b      	strh	r3, [r7, #10]
 8002dfe:	460b      	mov	r3, r1
 8002e00:	813b      	strh	r3, [r7, #8]
 8002e02:	4613      	mov	r3, r2
 8002e04:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e06:	f7ff fb2b 	bl	8002460 <HAL_GetTick>
 8002e0a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b20      	cmp	r3, #32
 8002e16:	f040 80d9 	bne.w	8002fcc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	9300      	str	r3, [sp, #0]
 8002e1e:	2319      	movs	r3, #25
 8002e20:	2201      	movs	r2, #1
 8002e22:	496d      	ldr	r1, [pc, #436]	; (8002fd8 <HAL_I2C_Mem_Write+0x1ec>)
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f000 fdb9 	bl	800399c <I2C_WaitOnFlagUntilTimeout>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002e30:	2302      	movs	r3, #2
 8002e32:	e0cc      	b.n	8002fce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d101      	bne.n	8002e42 <HAL_I2C_Mem_Write+0x56>
 8002e3e:	2302      	movs	r3, #2
 8002e40:	e0c5      	b.n	8002fce <HAL_I2C_Mem_Write+0x1e2>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d007      	beq.n	8002e68 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 0201 	orr.w	r2, r2, #1
 8002e66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2221      	movs	r2, #33	; 0x21
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2240      	movs	r2, #64	; 0x40
 8002e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6a3a      	ldr	r2, [r7, #32]
 8002e92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	4a4d      	ldr	r2, [pc, #308]	; (8002fdc <HAL_I2C_Mem_Write+0x1f0>)
 8002ea8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002eaa:	88f8      	ldrh	r0, [r7, #6]
 8002eac:	893a      	ldrh	r2, [r7, #8]
 8002eae:	8979      	ldrh	r1, [r7, #10]
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	9301      	str	r3, [sp, #4]
 8002eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb6:	9300      	str	r3, [sp, #0]
 8002eb8:	4603      	mov	r3, r0
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f000 fbf0 	bl	80036a0 <I2C_RequestMemoryWrite>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d052      	beq.n	8002f6c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e081      	b.n	8002fce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eca:	697a      	ldr	r2, [r7, #20]
 8002ecc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f000 fe7e 	bl	8003bd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00d      	beq.n	8002ef6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	2b04      	cmp	r3, #4
 8002ee0:	d107      	bne.n	8002ef2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ef0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e06b      	b.n	8002fce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efa:	781a      	ldrb	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f06:	1c5a      	adds	r2, r3, #1
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f10:	3b01      	subs	r3, #1
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	f003 0304 	and.w	r3, r3, #4
 8002f30:	2b04      	cmp	r3, #4
 8002f32:	d11b      	bne.n	8002f6c <HAL_I2C_Mem_Write+0x180>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d017      	beq.n	8002f6c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f40:	781a      	ldrb	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	1c5a      	adds	r2, r3, #1
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f56:	3b01      	subs	r3, #1
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	3b01      	subs	r3, #1
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1aa      	bne.n	8002eca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f000 fe71 	bl	8003c60 <I2C_WaitOnBTFFlagUntilTimeout>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00d      	beq.n	8002fa0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f88:	2b04      	cmp	r3, #4
 8002f8a:	d107      	bne.n	8002f9c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f9a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e016      	b.n	8002fce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	e000      	b.n	8002fce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002fcc:	2302      	movs	r3, #2
  }
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3718      	adds	r7, #24
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	00100002 	.word	0x00100002
 8002fdc:	ffff0000 	.word	0xffff0000

08002fe0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b08c      	sub	sp, #48	; 0x30
 8002fe4:	af02      	add	r7, sp, #8
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	4608      	mov	r0, r1
 8002fea:	4611      	mov	r1, r2
 8002fec:	461a      	mov	r2, r3
 8002fee:	4603      	mov	r3, r0
 8002ff0:	817b      	strh	r3, [r7, #10]
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	813b      	strh	r3, [r7, #8]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ffa:	f7ff fa31 	bl	8002460 <HAL_GetTick>
 8002ffe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b20      	cmp	r3, #32
 800300a:	f040 8214 	bne.w	8003436 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003010:	9300      	str	r3, [sp, #0]
 8003012:	2319      	movs	r3, #25
 8003014:	2201      	movs	r2, #1
 8003016:	497b      	ldr	r1, [pc, #492]	; (8003204 <HAL_I2C_Mem_Read+0x224>)
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f000 fcbf 	bl	800399c <I2C_WaitOnFlagUntilTimeout>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003024:	2302      	movs	r3, #2
 8003026:	e207      	b.n	8003438 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800302e:	2b01      	cmp	r3, #1
 8003030:	d101      	bne.n	8003036 <HAL_I2C_Mem_Read+0x56>
 8003032:	2302      	movs	r3, #2
 8003034:	e200      	b.n	8003438 <HAL_I2C_Mem_Read+0x458>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2201      	movs	r2, #1
 800303a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	2b01      	cmp	r3, #1
 800304a:	d007      	beq.n	800305c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f042 0201 	orr.w	r2, r2, #1
 800305a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800306a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2222      	movs	r2, #34	; 0x22
 8003070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2240      	movs	r2, #64	; 0x40
 8003078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003086:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800308c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003092:	b29a      	uxth	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	4a5b      	ldr	r2, [pc, #364]	; (8003208 <HAL_I2C_Mem_Read+0x228>)
 800309c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800309e:	88f8      	ldrh	r0, [r7, #6]
 80030a0:	893a      	ldrh	r2, [r7, #8]
 80030a2:	8979      	ldrh	r1, [r7, #10]
 80030a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a6:	9301      	str	r3, [sp, #4]
 80030a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030aa:	9300      	str	r3, [sp, #0]
 80030ac:	4603      	mov	r3, r0
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f000 fb8c 	bl	80037cc <I2C_RequestMemoryRead>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e1bc      	b.n	8003438 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d113      	bne.n	80030ee <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030c6:	2300      	movs	r3, #0
 80030c8:	623b      	str	r3, [r7, #32]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	695b      	ldr	r3, [r3, #20]
 80030d0:	623b      	str	r3, [r7, #32]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	623b      	str	r3, [r7, #32]
 80030da:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	e190      	b.n	8003410 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d11b      	bne.n	800312e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003104:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003106:	2300      	movs	r3, #0
 8003108:	61fb      	str	r3, [r7, #28]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	695b      	ldr	r3, [r3, #20]
 8003110:	61fb      	str	r3, [r7, #28]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	61fb      	str	r3, [r7, #28]
 800311a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800312a:	601a      	str	r2, [r3, #0]
 800312c:	e170      	b.n	8003410 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003132:	2b02      	cmp	r3, #2
 8003134:	d11b      	bne.n	800316e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003144:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003154:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003156:	2300      	movs	r3, #0
 8003158:	61bb      	str	r3, [r7, #24]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	61bb      	str	r3, [r7, #24]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	61bb      	str	r3, [r7, #24]
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	e150      	b.n	8003410 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800316e:	2300      	movs	r3, #0
 8003170:	617b      	str	r3, [r7, #20]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	695b      	ldr	r3, [r3, #20]
 8003178:	617b      	str	r3, [r7, #20]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	617b      	str	r3, [r7, #20]
 8003182:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003184:	e144      	b.n	8003410 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800318a:	2b03      	cmp	r3, #3
 800318c:	f200 80f1 	bhi.w	8003372 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003194:	2b01      	cmp	r3, #1
 8003196:	d123      	bne.n	80031e0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800319a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f000 fda7 	bl	8003cf0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d001      	beq.n	80031ac <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e145      	b.n	8003438 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	691a      	ldr	r2, [r3, #16]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b6:	b2d2      	uxtb	r2, r2
 80031b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031be:	1c5a      	adds	r2, r3, #1
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c8:	3b01      	subs	r3, #1
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	3b01      	subs	r3, #1
 80031d8:	b29a      	uxth	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031de:	e117      	b.n	8003410 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d14e      	bne.n	8003286 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ea:	9300      	str	r3, [sp, #0]
 80031ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ee:	2200      	movs	r2, #0
 80031f0:	4906      	ldr	r1, [pc, #24]	; (800320c <HAL_I2C_Mem_Read+0x22c>)
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f000 fbd2 	bl	800399c <I2C_WaitOnFlagUntilTimeout>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d008      	beq.n	8003210 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e11a      	b.n	8003438 <HAL_I2C_Mem_Read+0x458>
 8003202:	bf00      	nop
 8003204:	00100002 	.word	0x00100002
 8003208:	ffff0000 	.word	0xffff0000
 800320c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800321e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	691a      	ldr	r2, [r3, #16]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322a:	b2d2      	uxtb	r2, r2
 800322c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003232:	1c5a      	adds	r2, r3, #1
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800323c:	3b01      	subs	r3, #1
 800323e:	b29a      	uxth	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003248:	b29b      	uxth	r3, r3
 800324a:	3b01      	subs	r3, #1
 800324c:	b29a      	uxth	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	691a      	ldr	r2, [r3, #16]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325c:	b2d2      	uxtb	r2, r2
 800325e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003264:	1c5a      	adds	r2, r3, #1
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800326e:	3b01      	subs	r3, #1
 8003270:	b29a      	uxth	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800327a:	b29b      	uxth	r3, r3
 800327c:	3b01      	subs	r3, #1
 800327e:	b29a      	uxth	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003284:	e0c4      	b.n	8003410 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003288:	9300      	str	r3, [sp, #0]
 800328a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800328c:	2200      	movs	r2, #0
 800328e:	496c      	ldr	r1, [pc, #432]	; (8003440 <HAL_I2C_Mem_Read+0x460>)
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f000 fb83 	bl	800399c <I2C_WaitOnFlagUntilTimeout>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e0cb      	b.n	8003438 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	691a      	ldr	r2, [r3, #16]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	b2d2      	uxtb	r2, r2
 80032bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c2:	1c5a      	adds	r2, r3, #1
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032cc:	3b01      	subs	r3, #1
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d8:	b29b      	uxth	r3, r3
 80032da:	3b01      	subs	r3, #1
 80032dc:	b29a      	uxth	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e8:	2200      	movs	r2, #0
 80032ea:	4955      	ldr	r1, [pc, #340]	; (8003440 <HAL_I2C_Mem_Read+0x460>)
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f000 fb55 	bl	800399c <I2C_WaitOnFlagUntilTimeout>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e09d      	b.n	8003438 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800330a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	691a      	ldr	r2, [r3, #16]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003316:	b2d2      	uxtb	r2, r2
 8003318:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331e:	1c5a      	adds	r2, r3, #1
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003328:	3b01      	subs	r3, #1
 800332a:	b29a      	uxth	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003334:	b29b      	uxth	r3, r3
 8003336:	3b01      	subs	r3, #1
 8003338:	b29a      	uxth	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	691a      	ldr	r2, [r3, #16]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003348:	b2d2      	uxtb	r2, r2
 800334a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003350:	1c5a      	adds	r2, r3, #1
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800335a:	3b01      	subs	r3, #1
 800335c:	b29a      	uxth	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003366:	b29b      	uxth	r3, r3
 8003368:	3b01      	subs	r3, #1
 800336a:	b29a      	uxth	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003370:	e04e      	b.n	8003410 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003374:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f000 fcba 	bl	8003cf0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e058      	b.n	8003438 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	691a      	ldr	r2, [r3, #16]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003390:	b2d2      	uxtb	r2, r2
 8003392:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	1c5a      	adds	r2, r3, #1
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a2:	3b01      	subs	r3, #1
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	3b01      	subs	r3, #1
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	f003 0304 	and.w	r3, r3, #4
 80033c2:	2b04      	cmp	r3, #4
 80033c4:	d124      	bne.n	8003410 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ca:	2b03      	cmp	r3, #3
 80033cc:	d107      	bne.n	80033de <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033dc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	691a      	ldr	r2, [r3, #16]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e8:	b2d2      	uxtb	r2, r2
 80033ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f0:	1c5a      	adds	r2, r3, #1
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033fa:	3b01      	subs	r3, #1
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003406:	b29b      	uxth	r3, r3
 8003408:	3b01      	subs	r3, #1
 800340a:	b29a      	uxth	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003414:	2b00      	cmp	r3, #0
 8003416:	f47f aeb6 	bne.w	8003186 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2220      	movs	r2, #32
 800341e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003432:	2300      	movs	r3, #0
 8003434:	e000      	b.n	8003438 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003436:	2302      	movs	r3, #2
  }
}
 8003438:	4618      	mov	r0, r3
 800343a:	3728      	adds	r7, #40	; 0x28
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	00010004 	.word	0x00010004

08003444 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b08a      	sub	sp, #40	; 0x28
 8003448:	af02      	add	r7, sp, #8
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	607a      	str	r2, [r7, #4]
 800344e:	603b      	str	r3, [r7, #0]
 8003450:	460b      	mov	r3, r1
 8003452:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003454:	f7ff f804 	bl	8002460 <HAL_GetTick>
 8003458:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800345a:	2300      	movs	r3, #0
 800345c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b20      	cmp	r3, #32
 8003468:	f040 8111 	bne.w	800368e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	9300      	str	r3, [sp, #0]
 8003470:	2319      	movs	r3, #25
 8003472:	2201      	movs	r2, #1
 8003474:	4988      	ldr	r1, [pc, #544]	; (8003698 <HAL_I2C_IsDeviceReady+0x254>)
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f000 fa90 	bl	800399c <I2C_WaitOnFlagUntilTimeout>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003482:	2302      	movs	r3, #2
 8003484:	e104      	b.n	8003690 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800348c:	2b01      	cmp	r3, #1
 800348e:	d101      	bne.n	8003494 <HAL_I2C_IsDeviceReady+0x50>
 8003490:	2302      	movs	r3, #2
 8003492:	e0fd      	b.n	8003690 <HAL_I2C_IsDeviceReady+0x24c>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d007      	beq.n	80034ba <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f042 0201 	orr.w	r2, r2, #1
 80034b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2224      	movs	r2, #36	; 0x24
 80034ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	4a70      	ldr	r2, [pc, #448]	; (800369c <HAL_I2C_IsDeviceReady+0x258>)
 80034dc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034ec:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f000 fa4e 	bl	800399c <I2C_WaitOnFlagUntilTimeout>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00d      	beq.n	8003522 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003510:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003514:	d103      	bne.n	800351e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f44f 7200 	mov.w	r2, #512	; 0x200
 800351c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e0b6      	b.n	8003690 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003522:	897b      	ldrh	r3, [r7, #10]
 8003524:	b2db      	uxtb	r3, r3
 8003526:	461a      	mov	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003530:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003532:	f7fe ff95 	bl	8002460 <HAL_GetTick>
 8003536:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b02      	cmp	r3, #2
 8003544:	bf0c      	ite	eq
 8003546:	2301      	moveq	r3, #1
 8003548:	2300      	movne	r3, #0
 800354a:	b2db      	uxtb	r3, r3
 800354c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003558:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800355c:	bf0c      	ite	eq
 800355e:	2301      	moveq	r3, #1
 8003560:	2300      	movne	r3, #0
 8003562:	b2db      	uxtb	r3, r3
 8003564:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003566:	e025      	b.n	80035b4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003568:	f7fe ff7a 	bl	8002460 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	429a      	cmp	r2, r3
 8003576:	d302      	bcc.n	800357e <HAL_I2C_IsDeviceReady+0x13a>
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d103      	bne.n	8003586 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	22a0      	movs	r2, #160	; 0xa0
 8003582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	695b      	ldr	r3, [r3, #20]
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b02      	cmp	r3, #2
 8003592:	bf0c      	ite	eq
 8003594:	2301      	moveq	r3, #1
 8003596:	2300      	movne	r3, #0
 8003598:	b2db      	uxtb	r3, r3
 800359a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035aa:	bf0c      	ite	eq
 80035ac:	2301      	moveq	r3, #1
 80035ae:	2300      	movne	r3, #0
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2ba0      	cmp	r3, #160	; 0xa0
 80035be:	d005      	beq.n	80035cc <HAL_I2C_IsDeviceReady+0x188>
 80035c0:	7dfb      	ldrb	r3, [r7, #23]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d102      	bne.n	80035cc <HAL_I2C_IsDeviceReady+0x188>
 80035c6:	7dbb      	ldrb	r3, [r7, #22]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0cd      	beq.n	8003568 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2220      	movs	r2, #32
 80035d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d129      	bne.n	8003636 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035f0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035f2:	2300      	movs	r3, #0
 80035f4:	613b      	str	r3, [r7, #16]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	613b      	str	r3, [r7, #16]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	613b      	str	r3, [r7, #16]
 8003606:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	9300      	str	r3, [sp, #0]
 800360c:	2319      	movs	r3, #25
 800360e:	2201      	movs	r2, #1
 8003610:	4921      	ldr	r1, [pc, #132]	; (8003698 <HAL_I2C_IsDeviceReady+0x254>)
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f000 f9c2 	bl	800399c <I2C_WaitOnFlagUntilTimeout>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e036      	b.n	8003690 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2220      	movs	r2, #32
 8003626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003632:	2300      	movs	r3, #0
 8003634:	e02c      	b.n	8003690 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003644:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800364e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	9300      	str	r3, [sp, #0]
 8003654:	2319      	movs	r3, #25
 8003656:	2201      	movs	r2, #1
 8003658:	490f      	ldr	r1, [pc, #60]	; (8003698 <HAL_I2C_IsDeviceReady+0x254>)
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f000 f99e 	bl	800399c <I2C_WaitOnFlagUntilTimeout>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e012      	b.n	8003690 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	3301      	adds	r3, #1
 800366e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	429a      	cmp	r2, r3
 8003676:	f4ff af32 	bcc.w	80034de <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2220      	movs	r2, #32
 800367e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e000      	b.n	8003690 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800368e:	2302      	movs	r3, #2
  }
}
 8003690:	4618      	mov	r0, r3
 8003692:	3720      	adds	r7, #32
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	00100002 	.word	0x00100002
 800369c:	ffff0000 	.word	0xffff0000

080036a0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b088      	sub	sp, #32
 80036a4:	af02      	add	r7, sp, #8
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	4608      	mov	r0, r1
 80036aa:	4611      	mov	r1, r2
 80036ac:	461a      	mov	r2, r3
 80036ae:	4603      	mov	r3, r0
 80036b0:	817b      	strh	r3, [r7, #10]
 80036b2:	460b      	mov	r3, r1
 80036b4:	813b      	strh	r3, [r7, #8]
 80036b6:	4613      	mov	r3, r2
 80036b8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	6a3b      	ldr	r3, [r7, #32]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f000 f960 	bl	800399c <I2C_WaitOnFlagUntilTimeout>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00d      	beq.n	80036fe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036f0:	d103      	bne.n	80036fa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e05f      	b.n	80037be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036fe:	897b      	ldrh	r3, [r7, #10]
 8003700:	b2db      	uxtb	r3, r3
 8003702:	461a      	mov	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800370c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	6a3a      	ldr	r2, [r7, #32]
 8003712:	492d      	ldr	r1, [pc, #180]	; (80037c8 <I2C_RequestMemoryWrite+0x128>)
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f000 f9bb 	bl	8003a90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e04c      	b.n	80037be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003724:	2300      	movs	r3, #0
 8003726:	617b      	str	r3, [r7, #20]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	617b      	str	r3, [r7, #20]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	617b      	str	r3, [r7, #20]
 8003738:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800373a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800373c:	6a39      	ldr	r1, [r7, #32]
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f000 fa46 	bl	8003bd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00d      	beq.n	8003766 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374e:	2b04      	cmp	r3, #4
 8003750:	d107      	bne.n	8003762 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003760:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e02b      	b.n	80037be <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003766:	88fb      	ldrh	r3, [r7, #6]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d105      	bne.n	8003778 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800376c:	893b      	ldrh	r3, [r7, #8]
 800376e:	b2da      	uxtb	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	611a      	str	r2, [r3, #16]
 8003776:	e021      	b.n	80037bc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003778:	893b      	ldrh	r3, [r7, #8]
 800377a:	0a1b      	lsrs	r3, r3, #8
 800377c:	b29b      	uxth	r3, r3
 800377e:	b2da      	uxtb	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003788:	6a39      	ldr	r1, [r7, #32]
 800378a:	68f8      	ldr	r0, [r7, #12]
 800378c:	f000 fa20 	bl	8003bd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00d      	beq.n	80037b2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	2b04      	cmp	r3, #4
 800379c:	d107      	bne.n	80037ae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e005      	b.n	80037be <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037b2:	893b      	ldrh	r3, [r7, #8]
 80037b4:	b2da      	uxtb	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3718      	adds	r7, #24
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	00010002 	.word	0x00010002

080037cc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b088      	sub	sp, #32
 80037d0:	af02      	add	r7, sp, #8
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	4608      	mov	r0, r1
 80037d6:	4611      	mov	r1, r2
 80037d8:	461a      	mov	r2, r3
 80037da:	4603      	mov	r3, r0
 80037dc:	817b      	strh	r3, [r7, #10]
 80037de:	460b      	mov	r3, r1
 80037e0:	813b      	strh	r3, [r7, #8]
 80037e2:	4613      	mov	r3, r2
 80037e4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037f4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003804:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003808:	9300      	str	r3, [sp, #0]
 800380a:	6a3b      	ldr	r3, [r7, #32]
 800380c:	2200      	movs	r2, #0
 800380e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003812:	68f8      	ldr	r0, [r7, #12]
 8003814:	f000 f8c2 	bl	800399c <I2C_WaitOnFlagUntilTimeout>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00d      	beq.n	800383a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003828:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800382c:	d103      	bne.n	8003836 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003834:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e0aa      	b.n	8003990 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800383a:	897b      	ldrh	r3, [r7, #10]
 800383c:	b2db      	uxtb	r3, r3
 800383e:	461a      	mov	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003848:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384c:	6a3a      	ldr	r2, [r7, #32]
 800384e:	4952      	ldr	r1, [pc, #328]	; (8003998 <I2C_RequestMemoryRead+0x1cc>)
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f000 f91d 	bl	8003a90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e097      	b.n	8003990 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003860:	2300      	movs	r3, #0
 8003862:	617b      	str	r3, [r7, #20]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	617b      	str	r3, [r7, #20]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	617b      	str	r3, [r7, #20]
 8003874:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003878:	6a39      	ldr	r1, [r7, #32]
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f000 f9a8 	bl	8003bd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00d      	beq.n	80038a2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388a:	2b04      	cmp	r3, #4
 800388c:	d107      	bne.n	800389e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800389c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e076      	b.n	8003990 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038a2:	88fb      	ldrh	r3, [r7, #6]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d105      	bne.n	80038b4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038a8:	893b      	ldrh	r3, [r7, #8]
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	611a      	str	r2, [r3, #16]
 80038b2:	e021      	b.n	80038f8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80038b4:	893b      	ldrh	r3, [r7, #8]
 80038b6:	0a1b      	lsrs	r3, r3, #8
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	b2da      	uxtb	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038c4:	6a39      	ldr	r1, [r7, #32]
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f000 f982 	bl	8003bd0 <I2C_WaitOnTXEFlagUntilTimeout>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00d      	beq.n	80038ee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d6:	2b04      	cmp	r3, #4
 80038d8:	d107      	bne.n	80038ea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e050      	b.n	8003990 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038ee:	893b      	ldrh	r3, [r7, #8]
 80038f0:	b2da      	uxtb	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038fa:	6a39      	ldr	r1, [r7, #32]
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f000 f967 	bl	8003bd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00d      	beq.n	8003924 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390c:	2b04      	cmp	r3, #4
 800390e:	d107      	bne.n	8003920 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800391e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e035      	b.n	8003990 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003932:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	6a3b      	ldr	r3, [r7, #32]
 800393a:	2200      	movs	r2, #0
 800393c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f000 f82b 	bl	800399c <I2C_WaitOnFlagUntilTimeout>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00d      	beq.n	8003968 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800395a:	d103      	bne.n	8003964 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003962:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e013      	b.n	8003990 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003968:	897b      	ldrh	r3, [r7, #10]
 800396a:	b2db      	uxtb	r3, r3
 800396c:	f043 0301 	orr.w	r3, r3, #1
 8003970:	b2da      	uxtb	r2, r3
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397a:	6a3a      	ldr	r2, [r7, #32]
 800397c:	4906      	ldr	r1, [pc, #24]	; (8003998 <I2C_RequestMemoryRead+0x1cc>)
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f000 f886 	bl	8003a90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e000      	b.n	8003990 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3718      	adds	r7, #24
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	00010002 	.word	0x00010002

0800399c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	603b      	str	r3, [r7, #0]
 80039a8:	4613      	mov	r3, r2
 80039aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039ac:	e048      	b.n	8003a40 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b4:	d044      	beq.n	8003a40 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039b6:	f7fe fd53 	bl	8002460 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	683a      	ldr	r2, [r7, #0]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d302      	bcc.n	80039cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d139      	bne.n	8003a40 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	0c1b      	lsrs	r3, r3, #16
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d10d      	bne.n	80039f2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	695b      	ldr	r3, [r3, #20]
 80039dc:	43da      	mvns	r2, r3
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	4013      	ands	r3, r2
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	bf0c      	ite	eq
 80039e8:	2301      	moveq	r3, #1
 80039ea:	2300      	movne	r3, #0
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	461a      	mov	r2, r3
 80039f0:	e00c      	b.n	8003a0c <I2C_WaitOnFlagUntilTimeout+0x70>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	43da      	mvns	r2, r3
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	4013      	ands	r3, r2
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	bf0c      	ite	eq
 8003a04:	2301      	moveq	r3, #1
 8003a06:	2300      	movne	r3, #0
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	79fb      	ldrb	r3, [r7, #7]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d116      	bne.n	8003a40 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2c:	f043 0220 	orr.w	r2, r3, #32
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e023      	b.n	8003a88 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	0c1b      	lsrs	r3, r3, #16
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d10d      	bne.n	8003a66 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	695b      	ldr	r3, [r3, #20]
 8003a50:	43da      	mvns	r2, r3
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	4013      	ands	r3, r2
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	bf0c      	ite	eq
 8003a5c:	2301      	moveq	r3, #1
 8003a5e:	2300      	movne	r3, #0
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	461a      	mov	r2, r3
 8003a64:	e00c      	b.n	8003a80 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	43da      	mvns	r2, r3
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	4013      	ands	r3, r2
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	bf0c      	ite	eq
 8003a78:	2301      	moveq	r3, #1
 8003a7a:	2300      	movne	r3, #0
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	461a      	mov	r2, r3
 8003a80:	79fb      	ldrb	r3, [r7, #7]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d093      	beq.n	80039ae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
 8003a9c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a9e:	e071      	b.n	8003b84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aae:	d123      	bne.n	8003af8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003abe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ac8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae4:	f043 0204 	orr.w	r2, r3, #4
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e067      	b.n	8003bc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003afe:	d041      	beq.n	8003b84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b00:	f7fe fcae 	bl	8002460 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d302      	bcc.n	8003b16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d136      	bne.n	8003b84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	0c1b      	lsrs	r3, r3, #16
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d10c      	bne.n	8003b3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	43da      	mvns	r2, r3
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	bf14      	ite	ne
 8003b32:	2301      	movne	r3, #1
 8003b34:	2300      	moveq	r3, #0
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	e00b      	b.n	8003b52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	43da      	mvns	r2, r3
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	4013      	ands	r3, r2
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	bf14      	ite	ne
 8003b4c:	2301      	movne	r3, #1
 8003b4e:	2300      	moveq	r3, #0
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d016      	beq.n	8003b84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2220      	movs	r2, #32
 8003b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b70:	f043 0220 	orr.w	r2, r3, #32
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e021      	b.n	8003bc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	0c1b      	lsrs	r3, r3, #16
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d10c      	bne.n	8003ba8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	695b      	ldr	r3, [r3, #20]
 8003b94:	43da      	mvns	r2, r3
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	bf14      	ite	ne
 8003ba0:	2301      	movne	r3, #1
 8003ba2:	2300      	moveq	r3, #0
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	e00b      	b.n	8003bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	43da      	mvns	r2, r3
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	bf14      	ite	ne
 8003bba:	2301      	movne	r3, #1
 8003bbc:	2300      	moveq	r3, #0
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f47f af6d 	bne.w	8003aa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3710      	adds	r7, #16
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bdc:	e034      	b.n	8003c48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	f000 f8e3 	bl	8003daa <I2C_IsAcknowledgeFailed>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e034      	b.n	8003c58 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf4:	d028      	beq.n	8003c48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bf6:	f7fe fc33 	bl	8002460 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	68ba      	ldr	r2, [r7, #8]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d302      	bcc.n	8003c0c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d11d      	bne.n	8003c48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c16:	2b80      	cmp	r3, #128	; 0x80
 8003c18:	d016      	beq.n	8003c48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2220      	movs	r2, #32
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c34:	f043 0220 	orr.w	r2, r3, #32
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e007      	b.n	8003c58 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c52:	2b80      	cmp	r3, #128	; 0x80
 8003c54:	d1c3      	bne.n	8003bde <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3710      	adds	r7, #16
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c6c:	e034      	b.n	8003cd8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	f000 f89b 	bl	8003daa <I2C_IsAcknowledgeFailed>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e034      	b.n	8003ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c84:	d028      	beq.n	8003cd8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c86:	f7fe fbeb 	bl	8002460 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	68ba      	ldr	r2, [r7, #8]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d302      	bcc.n	8003c9c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d11d      	bne.n	8003cd8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	f003 0304 	and.w	r3, r3, #4
 8003ca6:	2b04      	cmp	r3, #4
 8003ca8:	d016      	beq.n	8003cd8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc4:	f043 0220 	orr.w	r2, r3, #32
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e007      	b.n	8003ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	f003 0304 	and.w	r3, r3, #4
 8003ce2:	2b04      	cmp	r3, #4
 8003ce4:	d1c3      	bne.n	8003c6e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003cfc:	e049      	b.n	8003d92 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	f003 0310 	and.w	r3, r3, #16
 8003d08:	2b10      	cmp	r3, #16
 8003d0a:	d119      	bne.n	8003d40 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f06f 0210 	mvn.w	r2, #16
 8003d14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e030      	b.n	8003da2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d40:	f7fe fb8e 	bl	8002460 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	68ba      	ldr	r2, [r7, #8]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d302      	bcc.n	8003d56 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d11d      	bne.n	8003d92 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d60:	2b40      	cmp	r3, #64	; 0x40
 8003d62:	d016      	beq.n	8003d92 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2220      	movs	r2, #32
 8003d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	f043 0220 	orr.w	r2, r3, #32
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e007      	b.n	8003da2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	695b      	ldr	r3, [r3, #20]
 8003d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d9c:	2b40      	cmp	r3, #64	; 0x40
 8003d9e:	d1ae      	bne.n	8003cfe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003daa:	b480      	push	{r7}
 8003dac:	b083      	sub	sp, #12
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dc0:	d11b      	bne.n	8003dfa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003dca:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2220      	movs	r2, #32
 8003dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	f043 0204 	orr.w	r2, r3, #4
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e000      	b.n	8003dfc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e034      	b.n	8003e84 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8003e22:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f245 5255 	movw	r2, #21845	; 0x5555
 8003e2c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	6852      	ldr	r2, [r2, #4]
 8003e36:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	6892      	ldr	r2, [r2, #8]
 8003e40:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003e42:	f7fe fb0d 	bl	8002460 <HAL_GetTick>
 8003e46:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003e48:	e00f      	b.n	8003e6a <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003e4a:	f7fe fb09 	bl	8002460 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b31      	cmp	r3, #49	; 0x31
 8003e56:	d908      	bls.n	8003e6a <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	f003 0303 	and.w	r3, r3, #3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d001      	beq.n	8003e6a <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e00c      	b.n	8003e84 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	f003 0303 	and.w	r3, r3, #3
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1e8      	bne.n	8003e4a <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003e80:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003e9c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	603b      	str	r3, [r7, #0]
 8003eba:	4b20      	ldr	r3, [pc, #128]	; (8003f3c <HAL_PWREx_EnableOverDrive+0x90>)
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	4a1f      	ldr	r2, [pc, #124]	; (8003f3c <HAL_PWREx_EnableOverDrive+0x90>)
 8003ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ec6:	4b1d      	ldr	r3, [pc, #116]	; (8003f3c <HAL_PWREx_EnableOverDrive+0x90>)
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ece:	603b      	str	r3, [r7, #0]
 8003ed0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003ed2:	4b1b      	ldr	r3, [pc, #108]	; (8003f40 <HAL_PWREx_EnableOverDrive+0x94>)
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ed8:	f7fe fac2 	bl	8002460 <HAL_GetTick>
 8003edc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ede:	e009      	b.n	8003ef4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ee0:	f7fe fabe 	bl	8002460 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003eee:	d901      	bls.n	8003ef4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e01f      	b.n	8003f34 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ef4:	4b13      	ldr	r3, [pc, #76]	; (8003f44 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f00:	d1ee      	bne.n	8003ee0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003f02:	4b11      	ldr	r3, [pc, #68]	; (8003f48 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f04:	2201      	movs	r2, #1
 8003f06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f08:	f7fe faaa 	bl	8002460 <HAL_GetTick>
 8003f0c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f0e:	e009      	b.n	8003f24 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f10:	f7fe faa6 	bl	8002460 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f1e:	d901      	bls.n	8003f24 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e007      	b.n	8003f34 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f24:	4b07      	ldr	r3, [pc, #28]	; (8003f44 <HAL_PWREx_EnableOverDrive+0x98>)
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f30:	d1ee      	bne.n	8003f10 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3708      	adds	r7, #8
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	40023800 	.word	0x40023800
 8003f40:	420e0040 	.word	0x420e0040
 8003f44:	40007000 	.word	0x40007000
 8003f48:	420e0044 	.word	0x420e0044

08003f4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d101      	bne.n	8003f60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e0cc      	b.n	80040fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f60:	4b68      	ldr	r3, [pc, #416]	; (8004104 <HAL_RCC_ClockConfig+0x1b8>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 030f 	and.w	r3, r3, #15
 8003f68:	683a      	ldr	r2, [r7, #0]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d90c      	bls.n	8003f88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f6e:	4b65      	ldr	r3, [pc, #404]	; (8004104 <HAL_RCC_ClockConfig+0x1b8>)
 8003f70:	683a      	ldr	r2, [r7, #0]
 8003f72:	b2d2      	uxtb	r2, r2
 8003f74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f76:	4b63      	ldr	r3, [pc, #396]	; (8004104 <HAL_RCC_ClockConfig+0x1b8>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 030f 	and.w	r3, r3, #15
 8003f7e:	683a      	ldr	r2, [r7, #0]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d001      	beq.n	8003f88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e0b8      	b.n	80040fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d020      	beq.n	8003fd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0304 	and.w	r3, r3, #4
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d005      	beq.n	8003fac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fa0:	4b59      	ldr	r3, [pc, #356]	; (8004108 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	4a58      	ldr	r2, [pc, #352]	; (8004108 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003faa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0308 	and.w	r3, r3, #8
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d005      	beq.n	8003fc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fb8:	4b53      	ldr	r3, [pc, #332]	; (8004108 <HAL_RCC_ClockConfig+0x1bc>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	4a52      	ldr	r2, [pc, #328]	; (8004108 <HAL_RCC_ClockConfig+0x1bc>)
 8003fbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003fc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fc4:	4b50      	ldr	r3, [pc, #320]	; (8004108 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	494d      	ldr	r1, [pc, #308]	; (8004108 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d044      	beq.n	800406c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d107      	bne.n	8003ffa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fea:	4b47      	ldr	r3, [pc, #284]	; (8004108 <HAL_RCC_ClockConfig+0x1bc>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d119      	bne.n	800402a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e07f      	b.n	80040fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d003      	beq.n	800400a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004006:	2b03      	cmp	r3, #3
 8004008:	d107      	bne.n	800401a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800400a:	4b3f      	ldr	r3, [pc, #252]	; (8004108 <HAL_RCC_ClockConfig+0x1bc>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d109      	bne.n	800402a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e06f      	b.n	80040fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800401a:	4b3b      	ldr	r3, [pc, #236]	; (8004108 <HAL_RCC_ClockConfig+0x1bc>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d101      	bne.n	800402a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e067      	b.n	80040fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800402a:	4b37      	ldr	r3, [pc, #220]	; (8004108 <HAL_RCC_ClockConfig+0x1bc>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f023 0203 	bic.w	r2, r3, #3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	4934      	ldr	r1, [pc, #208]	; (8004108 <HAL_RCC_ClockConfig+0x1bc>)
 8004038:	4313      	orrs	r3, r2
 800403a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800403c:	f7fe fa10 	bl	8002460 <HAL_GetTick>
 8004040:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004042:	e00a      	b.n	800405a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004044:	f7fe fa0c 	bl	8002460 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004052:	4293      	cmp	r3, r2
 8004054:	d901      	bls.n	800405a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e04f      	b.n	80040fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800405a:	4b2b      	ldr	r3, [pc, #172]	; (8004108 <HAL_RCC_ClockConfig+0x1bc>)
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f003 020c 	and.w	r2, r3, #12
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	429a      	cmp	r2, r3
 800406a:	d1eb      	bne.n	8004044 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800406c:	4b25      	ldr	r3, [pc, #148]	; (8004104 <HAL_RCC_ClockConfig+0x1b8>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 030f 	and.w	r3, r3, #15
 8004074:	683a      	ldr	r2, [r7, #0]
 8004076:	429a      	cmp	r2, r3
 8004078:	d20c      	bcs.n	8004094 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800407a:	4b22      	ldr	r3, [pc, #136]	; (8004104 <HAL_RCC_ClockConfig+0x1b8>)
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	b2d2      	uxtb	r2, r2
 8004080:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004082:	4b20      	ldr	r3, [pc, #128]	; (8004104 <HAL_RCC_ClockConfig+0x1b8>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 030f 	and.w	r3, r3, #15
 800408a:	683a      	ldr	r2, [r7, #0]
 800408c:	429a      	cmp	r2, r3
 800408e:	d001      	beq.n	8004094 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e032      	b.n	80040fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0304 	and.w	r3, r3, #4
 800409c:	2b00      	cmp	r3, #0
 800409e:	d008      	beq.n	80040b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040a0:	4b19      	ldr	r3, [pc, #100]	; (8004108 <HAL_RCC_ClockConfig+0x1bc>)
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	4916      	ldr	r1, [pc, #88]	; (8004108 <HAL_RCC_ClockConfig+0x1bc>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0308 	and.w	r3, r3, #8
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d009      	beq.n	80040d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040be:	4b12      	ldr	r3, [pc, #72]	; (8004108 <HAL_RCC_ClockConfig+0x1bc>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	00db      	lsls	r3, r3, #3
 80040cc:	490e      	ldr	r1, [pc, #56]	; (8004108 <HAL_RCC_ClockConfig+0x1bc>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040d2:	f000 f887 	bl	80041e4 <HAL_RCC_GetSysClockFreq>
 80040d6:	4602      	mov	r2, r0
 80040d8:	4b0b      	ldr	r3, [pc, #44]	; (8004108 <HAL_RCC_ClockConfig+0x1bc>)
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	091b      	lsrs	r3, r3, #4
 80040de:	f003 030f 	and.w	r3, r3, #15
 80040e2:	490a      	ldr	r1, [pc, #40]	; (800410c <HAL_RCC_ClockConfig+0x1c0>)
 80040e4:	5ccb      	ldrb	r3, [r1, r3]
 80040e6:	fa22 f303 	lsr.w	r3, r2, r3
 80040ea:	4a09      	ldr	r2, [pc, #36]	; (8004110 <HAL_RCC_ClockConfig+0x1c4>)
 80040ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80040ee:	4b09      	ldr	r3, [pc, #36]	; (8004114 <HAL_RCC_ClockConfig+0x1c8>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7fd fae4 	bl	80016c0 <HAL_InitTick>

  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	40023c00 	.word	0x40023c00
 8004108:	40023800 	.word	0x40023800
 800410c:	0800fc78 	.word	0x0800fc78
 8004110:	20000000 	.word	0x20000000
 8004114:	20000004 	.word	0x20000004

08004118 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004118:	b480      	push	{r7}
 800411a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800411c:	4b03      	ldr	r3, [pc, #12]	; (800412c <HAL_RCC_GetHCLKFreq+0x14>)
 800411e:	681b      	ldr	r3, [r3, #0]
}
 8004120:	4618      	mov	r0, r3
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	20000000 	.word	0x20000000

08004130 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004134:	f7ff fff0 	bl	8004118 <HAL_RCC_GetHCLKFreq>
 8004138:	4602      	mov	r2, r0
 800413a:	4b05      	ldr	r3, [pc, #20]	; (8004150 <HAL_RCC_GetPCLK1Freq+0x20>)
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	0a9b      	lsrs	r3, r3, #10
 8004140:	f003 0307 	and.w	r3, r3, #7
 8004144:	4903      	ldr	r1, [pc, #12]	; (8004154 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004146:	5ccb      	ldrb	r3, [r1, r3]
 8004148:	fa22 f303 	lsr.w	r3, r2, r3
}
 800414c:	4618      	mov	r0, r3
 800414e:	bd80      	pop	{r7, pc}
 8004150:	40023800 	.word	0x40023800
 8004154:	0800fc88 	.word	0x0800fc88

08004158 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800415c:	f7ff ffdc 	bl	8004118 <HAL_RCC_GetHCLKFreq>
 8004160:	4602      	mov	r2, r0
 8004162:	4b05      	ldr	r3, [pc, #20]	; (8004178 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	0b5b      	lsrs	r3, r3, #13
 8004168:	f003 0307 	and.w	r3, r3, #7
 800416c:	4903      	ldr	r1, [pc, #12]	; (800417c <HAL_RCC_GetPCLK2Freq+0x24>)
 800416e:	5ccb      	ldrb	r3, [r1, r3]
 8004170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004174:	4618      	mov	r0, r3
 8004176:	bd80      	pop	{r7, pc}
 8004178:	40023800 	.word	0x40023800
 800417c:	0800fc88 	.word	0x0800fc88

08004180 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	220f      	movs	r2, #15
 800418e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004190:	4b12      	ldr	r3, [pc, #72]	; (80041dc <HAL_RCC_GetClockConfig+0x5c>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f003 0203 	and.w	r2, r3, #3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800419c:	4b0f      	ldr	r3, [pc, #60]	; (80041dc <HAL_RCC_GetClockConfig+0x5c>)
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80041a8:	4b0c      	ldr	r3, [pc, #48]	; (80041dc <HAL_RCC_GetClockConfig+0x5c>)
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80041b4:	4b09      	ldr	r3, [pc, #36]	; (80041dc <HAL_RCC_GetClockConfig+0x5c>)
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	08db      	lsrs	r3, r3, #3
 80041ba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80041c2:	4b07      	ldr	r3, [pc, #28]	; (80041e0 <HAL_RCC_GetClockConfig+0x60>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 020f 	and.w	r2, r3, #15
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	601a      	str	r2, [r3, #0]
}
 80041ce:	bf00      	nop
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	40023800 	.word	0x40023800
 80041e0:	40023c00 	.word	0x40023c00

080041e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041e8:	b0ae      	sub	sp, #184	; 0xb8
 80041ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80041ec:	2300      	movs	r3, #0
 80041ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80041f2:	2300      	movs	r3, #0
 80041f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80041f8:	2300      	movs	r3, #0
 80041fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80041fe:	2300      	movs	r3, #0
 8004200:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004204:	2300      	movs	r3, #0
 8004206:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800420a:	4bcb      	ldr	r3, [pc, #812]	; (8004538 <HAL_RCC_GetSysClockFreq+0x354>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f003 030c 	and.w	r3, r3, #12
 8004212:	2b0c      	cmp	r3, #12
 8004214:	f200 8206 	bhi.w	8004624 <HAL_RCC_GetSysClockFreq+0x440>
 8004218:	a201      	add	r2, pc, #4	; (adr r2, 8004220 <HAL_RCC_GetSysClockFreq+0x3c>)
 800421a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421e:	bf00      	nop
 8004220:	08004255 	.word	0x08004255
 8004224:	08004625 	.word	0x08004625
 8004228:	08004625 	.word	0x08004625
 800422c:	08004625 	.word	0x08004625
 8004230:	0800425d 	.word	0x0800425d
 8004234:	08004625 	.word	0x08004625
 8004238:	08004625 	.word	0x08004625
 800423c:	08004625 	.word	0x08004625
 8004240:	08004265 	.word	0x08004265
 8004244:	08004625 	.word	0x08004625
 8004248:	08004625 	.word	0x08004625
 800424c:	08004625 	.word	0x08004625
 8004250:	08004455 	.word	0x08004455
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004254:	4bb9      	ldr	r3, [pc, #740]	; (800453c <HAL_RCC_GetSysClockFreq+0x358>)
 8004256:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800425a:	e1e7      	b.n	800462c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800425c:	4bb8      	ldr	r3, [pc, #736]	; (8004540 <HAL_RCC_GetSysClockFreq+0x35c>)
 800425e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004262:	e1e3      	b.n	800462c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004264:	4bb4      	ldr	r3, [pc, #720]	; (8004538 <HAL_RCC_GetSysClockFreq+0x354>)
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800426c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004270:	4bb1      	ldr	r3, [pc, #708]	; (8004538 <HAL_RCC_GetSysClockFreq+0x354>)
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d071      	beq.n	8004360 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800427c:	4bae      	ldr	r3, [pc, #696]	; (8004538 <HAL_RCC_GetSysClockFreq+0x354>)
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	099b      	lsrs	r3, r3, #6
 8004282:	2200      	movs	r2, #0
 8004284:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004288:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800428c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004290:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004294:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004298:	2300      	movs	r3, #0
 800429a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800429e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80042a2:	4622      	mov	r2, r4
 80042a4:	462b      	mov	r3, r5
 80042a6:	f04f 0000 	mov.w	r0, #0
 80042aa:	f04f 0100 	mov.w	r1, #0
 80042ae:	0159      	lsls	r1, r3, #5
 80042b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042b4:	0150      	lsls	r0, r2, #5
 80042b6:	4602      	mov	r2, r0
 80042b8:	460b      	mov	r3, r1
 80042ba:	4621      	mov	r1, r4
 80042bc:	1a51      	subs	r1, r2, r1
 80042be:	6439      	str	r1, [r7, #64]	; 0x40
 80042c0:	4629      	mov	r1, r5
 80042c2:	eb63 0301 	sbc.w	r3, r3, r1
 80042c6:	647b      	str	r3, [r7, #68]	; 0x44
 80042c8:	f04f 0200 	mov.w	r2, #0
 80042cc:	f04f 0300 	mov.w	r3, #0
 80042d0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80042d4:	4649      	mov	r1, r9
 80042d6:	018b      	lsls	r3, r1, #6
 80042d8:	4641      	mov	r1, r8
 80042da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042de:	4641      	mov	r1, r8
 80042e0:	018a      	lsls	r2, r1, #6
 80042e2:	4641      	mov	r1, r8
 80042e4:	1a51      	subs	r1, r2, r1
 80042e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80042e8:	4649      	mov	r1, r9
 80042ea:	eb63 0301 	sbc.w	r3, r3, r1
 80042ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042f0:	f04f 0200 	mov.w	r2, #0
 80042f4:	f04f 0300 	mov.w	r3, #0
 80042f8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80042fc:	4649      	mov	r1, r9
 80042fe:	00cb      	lsls	r3, r1, #3
 8004300:	4641      	mov	r1, r8
 8004302:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004306:	4641      	mov	r1, r8
 8004308:	00ca      	lsls	r2, r1, #3
 800430a:	4610      	mov	r0, r2
 800430c:	4619      	mov	r1, r3
 800430e:	4603      	mov	r3, r0
 8004310:	4622      	mov	r2, r4
 8004312:	189b      	adds	r3, r3, r2
 8004314:	633b      	str	r3, [r7, #48]	; 0x30
 8004316:	462b      	mov	r3, r5
 8004318:	460a      	mov	r2, r1
 800431a:	eb42 0303 	adc.w	r3, r2, r3
 800431e:	637b      	str	r3, [r7, #52]	; 0x34
 8004320:	f04f 0200 	mov.w	r2, #0
 8004324:	f04f 0300 	mov.w	r3, #0
 8004328:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800432c:	4629      	mov	r1, r5
 800432e:	024b      	lsls	r3, r1, #9
 8004330:	4621      	mov	r1, r4
 8004332:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004336:	4621      	mov	r1, r4
 8004338:	024a      	lsls	r2, r1, #9
 800433a:	4610      	mov	r0, r2
 800433c:	4619      	mov	r1, r3
 800433e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004342:	2200      	movs	r2, #0
 8004344:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004348:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800434c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004350:	f7fc fc8a 	bl	8000c68 <__aeabi_uldivmod>
 8004354:	4602      	mov	r2, r0
 8004356:	460b      	mov	r3, r1
 8004358:	4613      	mov	r3, r2
 800435a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800435e:	e067      	b.n	8004430 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004360:	4b75      	ldr	r3, [pc, #468]	; (8004538 <HAL_RCC_GetSysClockFreq+0x354>)
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	099b      	lsrs	r3, r3, #6
 8004366:	2200      	movs	r2, #0
 8004368:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800436c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004370:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004374:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004378:	67bb      	str	r3, [r7, #120]	; 0x78
 800437a:	2300      	movs	r3, #0
 800437c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800437e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004382:	4622      	mov	r2, r4
 8004384:	462b      	mov	r3, r5
 8004386:	f04f 0000 	mov.w	r0, #0
 800438a:	f04f 0100 	mov.w	r1, #0
 800438e:	0159      	lsls	r1, r3, #5
 8004390:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004394:	0150      	lsls	r0, r2, #5
 8004396:	4602      	mov	r2, r0
 8004398:	460b      	mov	r3, r1
 800439a:	4621      	mov	r1, r4
 800439c:	1a51      	subs	r1, r2, r1
 800439e:	62b9      	str	r1, [r7, #40]	; 0x28
 80043a0:	4629      	mov	r1, r5
 80043a2:	eb63 0301 	sbc.w	r3, r3, r1
 80043a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043a8:	f04f 0200 	mov.w	r2, #0
 80043ac:	f04f 0300 	mov.w	r3, #0
 80043b0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80043b4:	4649      	mov	r1, r9
 80043b6:	018b      	lsls	r3, r1, #6
 80043b8:	4641      	mov	r1, r8
 80043ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043be:	4641      	mov	r1, r8
 80043c0:	018a      	lsls	r2, r1, #6
 80043c2:	4641      	mov	r1, r8
 80043c4:	ebb2 0a01 	subs.w	sl, r2, r1
 80043c8:	4649      	mov	r1, r9
 80043ca:	eb63 0b01 	sbc.w	fp, r3, r1
 80043ce:	f04f 0200 	mov.w	r2, #0
 80043d2:	f04f 0300 	mov.w	r3, #0
 80043d6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80043da:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80043de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043e2:	4692      	mov	sl, r2
 80043e4:	469b      	mov	fp, r3
 80043e6:	4623      	mov	r3, r4
 80043e8:	eb1a 0303 	adds.w	r3, sl, r3
 80043ec:	623b      	str	r3, [r7, #32]
 80043ee:	462b      	mov	r3, r5
 80043f0:	eb4b 0303 	adc.w	r3, fp, r3
 80043f4:	627b      	str	r3, [r7, #36]	; 0x24
 80043f6:	f04f 0200 	mov.w	r2, #0
 80043fa:	f04f 0300 	mov.w	r3, #0
 80043fe:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004402:	4629      	mov	r1, r5
 8004404:	028b      	lsls	r3, r1, #10
 8004406:	4621      	mov	r1, r4
 8004408:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800440c:	4621      	mov	r1, r4
 800440e:	028a      	lsls	r2, r1, #10
 8004410:	4610      	mov	r0, r2
 8004412:	4619      	mov	r1, r3
 8004414:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004418:	2200      	movs	r2, #0
 800441a:	673b      	str	r3, [r7, #112]	; 0x70
 800441c:	677a      	str	r2, [r7, #116]	; 0x74
 800441e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004422:	f7fc fc21 	bl	8000c68 <__aeabi_uldivmod>
 8004426:	4602      	mov	r2, r0
 8004428:	460b      	mov	r3, r1
 800442a:	4613      	mov	r3, r2
 800442c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004430:	4b41      	ldr	r3, [pc, #260]	; (8004538 <HAL_RCC_GetSysClockFreq+0x354>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	0c1b      	lsrs	r3, r3, #16
 8004436:	f003 0303 	and.w	r3, r3, #3
 800443a:	3301      	adds	r3, #1
 800443c:	005b      	lsls	r3, r3, #1
 800443e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004442:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004446:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800444a:	fbb2 f3f3 	udiv	r3, r2, r3
 800444e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004452:	e0eb      	b.n	800462c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004454:	4b38      	ldr	r3, [pc, #224]	; (8004538 <HAL_RCC_GetSysClockFreq+0x354>)
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800445c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004460:	4b35      	ldr	r3, [pc, #212]	; (8004538 <HAL_RCC_GetSysClockFreq+0x354>)
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d06b      	beq.n	8004544 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800446c:	4b32      	ldr	r3, [pc, #200]	; (8004538 <HAL_RCC_GetSysClockFreq+0x354>)
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	099b      	lsrs	r3, r3, #6
 8004472:	2200      	movs	r2, #0
 8004474:	66bb      	str	r3, [r7, #104]	; 0x68
 8004476:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004478:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800447a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800447e:	663b      	str	r3, [r7, #96]	; 0x60
 8004480:	2300      	movs	r3, #0
 8004482:	667b      	str	r3, [r7, #100]	; 0x64
 8004484:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004488:	4622      	mov	r2, r4
 800448a:	462b      	mov	r3, r5
 800448c:	f04f 0000 	mov.w	r0, #0
 8004490:	f04f 0100 	mov.w	r1, #0
 8004494:	0159      	lsls	r1, r3, #5
 8004496:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800449a:	0150      	lsls	r0, r2, #5
 800449c:	4602      	mov	r2, r0
 800449e:	460b      	mov	r3, r1
 80044a0:	4621      	mov	r1, r4
 80044a2:	1a51      	subs	r1, r2, r1
 80044a4:	61b9      	str	r1, [r7, #24]
 80044a6:	4629      	mov	r1, r5
 80044a8:	eb63 0301 	sbc.w	r3, r3, r1
 80044ac:	61fb      	str	r3, [r7, #28]
 80044ae:	f04f 0200 	mov.w	r2, #0
 80044b2:	f04f 0300 	mov.w	r3, #0
 80044b6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80044ba:	4659      	mov	r1, fp
 80044bc:	018b      	lsls	r3, r1, #6
 80044be:	4651      	mov	r1, sl
 80044c0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044c4:	4651      	mov	r1, sl
 80044c6:	018a      	lsls	r2, r1, #6
 80044c8:	4651      	mov	r1, sl
 80044ca:	ebb2 0801 	subs.w	r8, r2, r1
 80044ce:	4659      	mov	r1, fp
 80044d0:	eb63 0901 	sbc.w	r9, r3, r1
 80044d4:	f04f 0200 	mov.w	r2, #0
 80044d8:	f04f 0300 	mov.w	r3, #0
 80044dc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044e0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044e4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044e8:	4690      	mov	r8, r2
 80044ea:	4699      	mov	r9, r3
 80044ec:	4623      	mov	r3, r4
 80044ee:	eb18 0303 	adds.w	r3, r8, r3
 80044f2:	613b      	str	r3, [r7, #16]
 80044f4:	462b      	mov	r3, r5
 80044f6:	eb49 0303 	adc.w	r3, r9, r3
 80044fa:	617b      	str	r3, [r7, #20]
 80044fc:	f04f 0200 	mov.w	r2, #0
 8004500:	f04f 0300 	mov.w	r3, #0
 8004504:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004508:	4629      	mov	r1, r5
 800450a:	024b      	lsls	r3, r1, #9
 800450c:	4621      	mov	r1, r4
 800450e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004512:	4621      	mov	r1, r4
 8004514:	024a      	lsls	r2, r1, #9
 8004516:	4610      	mov	r0, r2
 8004518:	4619      	mov	r1, r3
 800451a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800451e:	2200      	movs	r2, #0
 8004520:	65bb      	str	r3, [r7, #88]	; 0x58
 8004522:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004524:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004528:	f7fc fb9e 	bl	8000c68 <__aeabi_uldivmod>
 800452c:	4602      	mov	r2, r0
 800452e:	460b      	mov	r3, r1
 8004530:	4613      	mov	r3, r2
 8004532:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004536:	e065      	b.n	8004604 <HAL_RCC_GetSysClockFreq+0x420>
 8004538:	40023800 	.word	0x40023800
 800453c:	00f42400 	.word	0x00f42400
 8004540:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004544:	4b3d      	ldr	r3, [pc, #244]	; (800463c <HAL_RCC_GetSysClockFreq+0x458>)
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	099b      	lsrs	r3, r3, #6
 800454a:	2200      	movs	r2, #0
 800454c:	4618      	mov	r0, r3
 800454e:	4611      	mov	r1, r2
 8004550:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004554:	653b      	str	r3, [r7, #80]	; 0x50
 8004556:	2300      	movs	r3, #0
 8004558:	657b      	str	r3, [r7, #84]	; 0x54
 800455a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800455e:	4642      	mov	r2, r8
 8004560:	464b      	mov	r3, r9
 8004562:	f04f 0000 	mov.w	r0, #0
 8004566:	f04f 0100 	mov.w	r1, #0
 800456a:	0159      	lsls	r1, r3, #5
 800456c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004570:	0150      	lsls	r0, r2, #5
 8004572:	4602      	mov	r2, r0
 8004574:	460b      	mov	r3, r1
 8004576:	4641      	mov	r1, r8
 8004578:	1a51      	subs	r1, r2, r1
 800457a:	60b9      	str	r1, [r7, #8]
 800457c:	4649      	mov	r1, r9
 800457e:	eb63 0301 	sbc.w	r3, r3, r1
 8004582:	60fb      	str	r3, [r7, #12]
 8004584:	f04f 0200 	mov.w	r2, #0
 8004588:	f04f 0300 	mov.w	r3, #0
 800458c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004590:	4659      	mov	r1, fp
 8004592:	018b      	lsls	r3, r1, #6
 8004594:	4651      	mov	r1, sl
 8004596:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800459a:	4651      	mov	r1, sl
 800459c:	018a      	lsls	r2, r1, #6
 800459e:	4651      	mov	r1, sl
 80045a0:	1a54      	subs	r4, r2, r1
 80045a2:	4659      	mov	r1, fp
 80045a4:	eb63 0501 	sbc.w	r5, r3, r1
 80045a8:	f04f 0200 	mov.w	r2, #0
 80045ac:	f04f 0300 	mov.w	r3, #0
 80045b0:	00eb      	lsls	r3, r5, #3
 80045b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045b6:	00e2      	lsls	r2, r4, #3
 80045b8:	4614      	mov	r4, r2
 80045ba:	461d      	mov	r5, r3
 80045bc:	4643      	mov	r3, r8
 80045be:	18e3      	adds	r3, r4, r3
 80045c0:	603b      	str	r3, [r7, #0]
 80045c2:	464b      	mov	r3, r9
 80045c4:	eb45 0303 	adc.w	r3, r5, r3
 80045c8:	607b      	str	r3, [r7, #4]
 80045ca:	f04f 0200 	mov.w	r2, #0
 80045ce:	f04f 0300 	mov.w	r3, #0
 80045d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045d6:	4629      	mov	r1, r5
 80045d8:	028b      	lsls	r3, r1, #10
 80045da:	4621      	mov	r1, r4
 80045dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80045e0:	4621      	mov	r1, r4
 80045e2:	028a      	lsls	r2, r1, #10
 80045e4:	4610      	mov	r0, r2
 80045e6:	4619      	mov	r1, r3
 80045e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80045ec:	2200      	movs	r2, #0
 80045ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80045f0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80045f2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80045f6:	f7fc fb37 	bl	8000c68 <__aeabi_uldivmod>
 80045fa:	4602      	mov	r2, r0
 80045fc:	460b      	mov	r3, r1
 80045fe:	4613      	mov	r3, r2
 8004600:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004604:	4b0d      	ldr	r3, [pc, #52]	; (800463c <HAL_RCC_GetSysClockFreq+0x458>)
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	0f1b      	lsrs	r3, r3, #28
 800460a:	f003 0307 	and.w	r3, r3, #7
 800460e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004612:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004616:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800461a:	fbb2 f3f3 	udiv	r3, r2, r3
 800461e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004622:	e003      	b.n	800462c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004624:	4b06      	ldr	r3, [pc, #24]	; (8004640 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004626:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800462a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800462c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004630:	4618      	mov	r0, r3
 8004632:	37b8      	adds	r7, #184	; 0xb8
 8004634:	46bd      	mov	sp, r7
 8004636:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800463a:	bf00      	nop
 800463c:	40023800 	.word	0x40023800
 8004640:	00f42400 	.word	0x00f42400

08004644 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b086      	sub	sp, #24
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e28d      	b.n	8004b72 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	2b00      	cmp	r3, #0
 8004660:	f000 8083 	beq.w	800476a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004664:	4b94      	ldr	r3, [pc, #592]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f003 030c 	and.w	r3, r3, #12
 800466c:	2b04      	cmp	r3, #4
 800466e:	d019      	beq.n	80046a4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004670:	4b91      	ldr	r3, [pc, #580]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004678:	2b08      	cmp	r3, #8
 800467a:	d106      	bne.n	800468a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800467c:	4b8e      	ldr	r3, [pc, #568]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004684:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004688:	d00c      	beq.n	80046a4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800468a:	4b8b      	ldr	r3, [pc, #556]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004692:	2b0c      	cmp	r3, #12
 8004694:	d112      	bne.n	80046bc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004696:	4b88      	ldr	r3, [pc, #544]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800469e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046a2:	d10b      	bne.n	80046bc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046a4:	4b84      	ldr	r3, [pc, #528]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d05b      	beq.n	8004768 <HAL_RCC_OscConfig+0x124>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d157      	bne.n	8004768 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e25a      	b.n	8004b72 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046c4:	d106      	bne.n	80046d4 <HAL_RCC_OscConfig+0x90>
 80046c6:	4b7c      	ldr	r3, [pc, #496]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a7b      	ldr	r2, [pc, #492]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 80046cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046d0:	6013      	str	r3, [r2, #0]
 80046d2:	e01d      	b.n	8004710 <HAL_RCC_OscConfig+0xcc>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046dc:	d10c      	bne.n	80046f8 <HAL_RCC_OscConfig+0xb4>
 80046de:	4b76      	ldr	r3, [pc, #472]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a75      	ldr	r2, [pc, #468]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 80046e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046e8:	6013      	str	r3, [r2, #0]
 80046ea:	4b73      	ldr	r3, [pc, #460]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a72      	ldr	r2, [pc, #456]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 80046f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046f4:	6013      	str	r3, [r2, #0]
 80046f6:	e00b      	b.n	8004710 <HAL_RCC_OscConfig+0xcc>
 80046f8:	4b6f      	ldr	r3, [pc, #444]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a6e      	ldr	r2, [pc, #440]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 80046fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004702:	6013      	str	r3, [r2, #0]
 8004704:	4b6c      	ldr	r3, [pc, #432]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a6b      	ldr	r2, [pc, #428]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 800470a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800470e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d013      	beq.n	8004740 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004718:	f7fd fea2 	bl	8002460 <HAL_GetTick>
 800471c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800471e:	e008      	b.n	8004732 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004720:	f7fd fe9e 	bl	8002460 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b64      	cmp	r3, #100	; 0x64
 800472c:	d901      	bls.n	8004732 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e21f      	b.n	8004b72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004732:	4b61      	ldr	r3, [pc, #388]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d0f0      	beq.n	8004720 <HAL_RCC_OscConfig+0xdc>
 800473e:	e014      	b.n	800476a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004740:	f7fd fe8e 	bl	8002460 <HAL_GetTick>
 8004744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004746:	e008      	b.n	800475a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004748:	f7fd fe8a 	bl	8002460 <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	2b64      	cmp	r3, #100	; 0x64
 8004754:	d901      	bls.n	800475a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e20b      	b.n	8004b72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800475a:	4b57      	ldr	r3, [pc, #348]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1f0      	bne.n	8004748 <HAL_RCC_OscConfig+0x104>
 8004766:	e000      	b.n	800476a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004768:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d06f      	beq.n	8004856 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004776:	4b50      	ldr	r3, [pc, #320]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f003 030c 	and.w	r3, r3, #12
 800477e:	2b00      	cmp	r3, #0
 8004780:	d017      	beq.n	80047b2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004782:	4b4d      	ldr	r3, [pc, #308]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800478a:	2b08      	cmp	r3, #8
 800478c:	d105      	bne.n	800479a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800478e:	4b4a      	ldr	r3, [pc, #296]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00b      	beq.n	80047b2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800479a:	4b47      	ldr	r3, [pc, #284]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80047a2:	2b0c      	cmp	r3, #12
 80047a4:	d11c      	bne.n	80047e0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047a6:	4b44      	ldr	r3, [pc, #272]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d116      	bne.n	80047e0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047b2:	4b41      	ldr	r3, [pc, #260]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d005      	beq.n	80047ca <HAL_RCC_OscConfig+0x186>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d001      	beq.n	80047ca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e1d3      	b.n	8004b72 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ca:	4b3b      	ldr	r3, [pc, #236]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	4937      	ldr	r1, [pc, #220]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047de:	e03a      	b.n	8004856 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d020      	beq.n	800482a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047e8:	4b34      	ldr	r3, [pc, #208]	; (80048bc <HAL_RCC_OscConfig+0x278>)
 80047ea:	2201      	movs	r2, #1
 80047ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ee:	f7fd fe37 	bl	8002460 <HAL_GetTick>
 80047f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047f4:	e008      	b.n	8004808 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047f6:	f7fd fe33 	bl	8002460 <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	2b02      	cmp	r3, #2
 8004802:	d901      	bls.n	8004808 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e1b4      	b.n	8004b72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004808:	4b2b      	ldr	r3, [pc, #172]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d0f0      	beq.n	80047f6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004814:	4b28      	ldr	r3, [pc, #160]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	00db      	lsls	r3, r3, #3
 8004822:	4925      	ldr	r1, [pc, #148]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 8004824:	4313      	orrs	r3, r2
 8004826:	600b      	str	r3, [r1, #0]
 8004828:	e015      	b.n	8004856 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800482a:	4b24      	ldr	r3, [pc, #144]	; (80048bc <HAL_RCC_OscConfig+0x278>)
 800482c:	2200      	movs	r2, #0
 800482e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004830:	f7fd fe16 	bl	8002460 <HAL_GetTick>
 8004834:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004836:	e008      	b.n	800484a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004838:	f7fd fe12 	bl	8002460 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	2b02      	cmp	r3, #2
 8004844:	d901      	bls.n	800484a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e193      	b.n	8004b72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800484a:	4b1b      	ldr	r3, [pc, #108]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1f0      	bne.n	8004838 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0308 	and.w	r3, r3, #8
 800485e:	2b00      	cmp	r3, #0
 8004860:	d036      	beq.n	80048d0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d016      	beq.n	8004898 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800486a:	4b15      	ldr	r3, [pc, #84]	; (80048c0 <HAL_RCC_OscConfig+0x27c>)
 800486c:	2201      	movs	r2, #1
 800486e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004870:	f7fd fdf6 	bl	8002460 <HAL_GetTick>
 8004874:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004876:	e008      	b.n	800488a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004878:	f7fd fdf2 	bl	8002460 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b02      	cmp	r3, #2
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e173      	b.n	8004b72 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800488a:	4b0b      	ldr	r3, [pc, #44]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 800488c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d0f0      	beq.n	8004878 <HAL_RCC_OscConfig+0x234>
 8004896:	e01b      	b.n	80048d0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004898:	4b09      	ldr	r3, [pc, #36]	; (80048c0 <HAL_RCC_OscConfig+0x27c>)
 800489a:	2200      	movs	r2, #0
 800489c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800489e:	f7fd fddf 	bl	8002460 <HAL_GetTick>
 80048a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048a4:	e00e      	b.n	80048c4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048a6:	f7fd fddb 	bl	8002460 <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d907      	bls.n	80048c4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e15c      	b.n	8004b72 <HAL_RCC_OscConfig+0x52e>
 80048b8:	40023800 	.word	0x40023800
 80048bc:	42470000 	.word	0x42470000
 80048c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048c4:	4b8a      	ldr	r3, [pc, #552]	; (8004af0 <HAL_RCC_OscConfig+0x4ac>)
 80048c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d1ea      	bne.n	80048a6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0304 	and.w	r3, r3, #4
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f000 8097 	beq.w	8004a0c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048de:	2300      	movs	r3, #0
 80048e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048e2:	4b83      	ldr	r3, [pc, #524]	; (8004af0 <HAL_RCC_OscConfig+0x4ac>)
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d10f      	bne.n	800490e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048ee:	2300      	movs	r3, #0
 80048f0:	60bb      	str	r3, [r7, #8]
 80048f2:	4b7f      	ldr	r3, [pc, #508]	; (8004af0 <HAL_RCC_OscConfig+0x4ac>)
 80048f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f6:	4a7e      	ldr	r2, [pc, #504]	; (8004af0 <HAL_RCC_OscConfig+0x4ac>)
 80048f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048fc:	6413      	str	r3, [r2, #64]	; 0x40
 80048fe:	4b7c      	ldr	r3, [pc, #496]	; (8004af0 <HAL_RCC_OscConfig+0x4ac>)
 8004900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004906:	60bb      	str	r3, [r7, #8]
 8004908:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800490a:	2301      	movs	r3, #1
 800490c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800490e:	4b79      	ldr	r3, [pc, #484]	; (8004af4 <HAL_RCC_OscConfig+0x4b0>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004916:	2b00      	cmp	r3, #0
 8004918:	d118      	bne.n	800494c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800491a:	4b76      	ldr	r3, [pc, #472]	; (8004af4 <HAL_RCC_OscConfig+0x4b0>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a75      	ldr	r2, [pc, #468]	; (8004af4 <HAL_RCC_OscConfig+0x4b0>)
 8004920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004924:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004926:	f7fd fd9b 	bl	8002460 <HAL_GetTick>
 800492a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800492c:	e008      	b.n	8004940 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800492e:	f7fd fd97 	bl	8002460 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	2b02      	cmp	r3, #2
 800493a:	d901      	bls.n	8004940 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e118      	b.n	8004b72 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004940:	4b6c      	ldr	r3, [pc, #432]	; (8004af4 <HAL_RCC_OscConfig+0x4b0>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004948:	2b00      	cmp	r3, #0
 800494a:	d0f0      	beq.n	800492e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d106      	bne.n	8004962 <HAL_RCC_OscConfig+0x31e>
 8004954:	4b66      	ldr	r3, [pc, #408]	; (8004af0 <HAL_RCC_OscConfig+0x4ac>)
 8004956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004958:	4a65      	ldr	r2, [pc, #404]	; (8004af0 <HAL_RCC_OscConfig+0x4ac>)
 800495a:	f043 0301 	orr.w	r3, r3, #1
 800495e:	6713      	str	r3, [r2, #112]	; 0x70
 8004960:	e01c      	b.n	800499c <HAL_RCC_OscConfig+0x358>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	2b05      	cmp	r3, #5
 8004968:	d10c      	bne.n	8004984 <HAL_RCC_OscConfig+0x340>
 800496a:	4b61      	ldr	r3, [pc, #388]	; (8004af0 <HAL_RCC_OscConfig+0x4ac>)
 800496c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496e:	4a60      	ldr	r2, [pc, #384]	; (8004af0 <HAL_RCC_OscConfig+0x4ac>)
 8004970:	f043 0304 	orr.w	r3, r3, #4
 8004974:	6713      	str	r3, [r2, #112]	; 0x70
 8004976:	4b5e      	ldr	r3, [pc, #376]	; (8004af0 <HAL_RCC_OscConfig+0x4ac>)
 8004978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800497a:	4a5d      	ldr	r2, [pc, #372]	; (8004af0 <HAL_RCC_OscConfig+0x4ac>)
 800497c:	f043 0301 	orr.w	r3, r3, #1
 8004980:	6713      	str	r3, [r2, #112]	; 0x70
 8004982:	e00b      	b.n	800499c <HAL_RCC_OscConfig+0x358>
 8004984:	4b5a      	ldr	r3, [pc, #360]	; (8004af0 <HAL_RCC_OscConfig+0x4ac>)
 8004986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004988:	4a59      	ldr	r2, [pc, #356]	; (8004af0 <HAL_RCC_OscConfig+0x4ac>)
 800498a:	f023 0301 	bic.w	r3, r3, #1
 800498e:	6713      	str	r3, [r2, #112]	; 0x70
 8004990:	4b57      	ldr	r3, [pc, #348]	; (8004af0 <HAL_RCC_OscConfig+0x4ac>)
 8004992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004994:	4a56      	ldr	r2, [pc, #344]	; (8004af0 <HAL_RCC_OscConfig+0x4ac>)
 8004996:	f023 0304 	bic.w	r3, r3, #4
 800499a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d015      	beq.n	80049d0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049a4:	f7fd fd5c 	bl	8002460 <HAL_GetTick>
 80049a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049aa:	e00a      	b.n	80049c2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049ac:	f7fd fd58 	bl	8002460 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e0d7      	b.n	8004b72 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049c2:	4b4b      	ldr	r3, [pc, #300]	; (8004af0 <HAL_RCC_OscConfig+0x4ac>)
 80049c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d0ee      	beq.n	80049ac <HAL_RCC_OscConfig+0x368>
 80049ce:	e014      	b.n	80049fa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d0:	f7fd fd46 	bl	8002460 <HAL_GetTick>
 80049d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049d6:	e00a      	b.n	80049ee <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049d8:	f7fd fd42 	bl	8002460 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e0c1      	b.n	8004b72 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049ee:	4b40      	ldr	r3, [pc, #256]	; (8004af0 <HAL_RCC_OscConfig+0x4ac>)
 80049f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1ee      	bne.n	80049d8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049fa:	7dfb      	ldrb	r3, [r7, #23]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d105      	bne.n	8004a0c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a00:	4b3b      	ldr	r3, [pc, #236]	; (8004af0 <HAL_RCC_OscConfig+0x4ac>)
 8004a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a04:	4a3a      	ldr	r2, [pc, #232]	; (8004af0 <HAL_RCC_OscConfig+0x4ac>)
 8004a06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a0a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f000 80ad 	beq.w	8004b70 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a16:	4b36      	ldr	r3, [pc, #216]	; (8004af0 <HAL_RCC_OscConfig+0x4ac>)
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f003 030c 	and.w	r3, r3, #12
 8004a1e:	2b08      	cmp	r3, #8
 8004a20:	d060      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d145      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a2a:	4b33      	ldr	r3, [pc, #204]	; (8004af8 <HAL_RCC_OscConfig+0x4b4>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a30:	f7fd fd16 	bl	8002460 <HAL_GetTick>
 8004a34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a36:	e008      	b.n	8004a4a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a38:	f7fd fd12 	bl	8002460 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e093      	b.n	8004b72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a4a:	4b29      	ldr	r3, [pc, #164]	; (8004af0 <HAL_RCC_OscConfig+0x4ac>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1f0      	bne.n	8004a38 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	69da      	ldr	r2, [r3, #28]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
 8004a5e:	431a      	orrs	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a64:	019b      	lsls	r3, r3, #6
 8004a66:	431a      	orrs	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6c:	085b      	lsrs	r3, r3, #1
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	041b      	lsls	r3, r3, #16
 8004a72:	431a      	orrs	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a78:	061b      	lsls	r3, r3, #24
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a80:	071b      	lsls	r3, r3, #28
 8004a82:	491b      	ldr	r1, [pc, #108]	; (8004af0 <HAL_RCC_OscConfig+0x4ac>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a88:	4b1b      	ldr	r3, [pc, #108]	; (8004af8 <HAL_RCC_OscConfig+0x4b4>)
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a8e:	f7fd fce7 	bl	8002460 <HAL_GetTick>
 8004a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a94:	e008      	b.n	8004aa8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a96:	f7fd fce3 	bl	8002460 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d901      	bls.n	8004aa8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e064      	b.n	8004b72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aa8:	4b11      	ldr	r3, [pc, #68]	; (8004af0 <HAL_RCC_OscConfig+0x4ac>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d0f0      	beq.n	8004a96 <HAL_RCC_OscConfig+0x452>
 8004ab4:	e05c      	b.n	8004b70 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ab6:	4b10      	ldr	r3, [pc, #64]	; (8004af8 <HAL_RCC_OscConfig+0x4b4>)
 8004ab8:	2200      	movs	r2, #0
 8004aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004abc:	f7fd fcd0 	bl	8002460 <HAL_GetTick>
 8004ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ac2:	e008      	b.n	8004ad6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ac4:	f7fd fccc 	bl	8002460 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e04d      	b.n	8004b72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ad6:	4b06      	ldr	r3, [pc, #24]	; (8004af0 <HAL_RCC_OscConfig+0x4ac>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1f0      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x480>
 8004ae2:	e045      	b.n	8004b70 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d107      	bne.n	8004afc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e040      	b.n	8004b72 <HAL_RCC_OscConfig+0x52e>
 8004af0:	40023800 	.word	0x40023800
 8004af4:	40007000 	.word	0x40007000
 8004af8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004afc:	4b1f      	ldr	r3, [pc, #124]	; (8004b7c <HAL_RCC_OscConfig+0x538>)
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d030      	beq.n	8004b6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d129      	bne.n	8004b6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d122      	bne.n	8004b6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d119      	bne.n	8004b6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b42:	085b      	lsrs	r3, r3, #1
 8004b44:	3b01      	subs	r3, #1
 8004b46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d10f      	bne.n	8004b6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d107      	bne.n	8004b6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b66:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d001      	beq.n	8004b70 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e000      	b.n	8004b72 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3718      	adds	r7, #24
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	40023800 	.word	0x40023800

08004b80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e07b      	b.n	8004c8a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d108      	bne.n	8004bac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ba2:	d009      	beq.n	8004bb8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	61da      	str	r2, [r3, #28]
 8004baa:	e005      	b.n	8004bb8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d106      	bne.n	8004bd8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f7fc fcaa 	bl	800152c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2202      	movs	r2, #2
 8004bdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c00:	431a      	orrs	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	f003 0302 	and.w	r3, r3, #2
 8004c14:	431a      	orrs	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	431a      	orrs	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c28:	431a      	orrs	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c32:	431a      	orrs	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a1b      	ldr	r3, [r3, #32]
 8004c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c3c:	ea42 0103 	orr.w	r1, r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c44:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	0c1b      	lsrs	r3, r3, #16
 8004c56:	f003 0104 	and.w	r1, r3, #4
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5e:	f003 0210 	and.w	r2, r3, #16
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	430a      	orrs	r2, r1
 8004c68:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	69da      	ldr	r2, [r3, #28]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c78:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3708      	adds	r7, #8
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c92:	b580      	push	{r7, lr}
 8004c94:	b088      	sub	sp, #32
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	60f8      	str	r0, [r7, #12]
 8004c9a:	60b9      	str	r1, [r7, #8]
 8004c9c:	603b      	str	r3, [r7, #0]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d101      	bne.n	8004cb4 <HAL_SPI_Transmit+0x22>
 8004cb0:	2302      	movs	r3, #2
 8004cb2:	e12d      	b.n	8004f10 <HAL_SPI_Transmit+0x27e>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cbc:	f7fd fbd0 	bl	8002460 <HAL_GetTick>
 8004cc0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004cc2:	88fb      	ldrh	r3, [r7, #6]
 8004cc4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d002      	beq.n	8004cd8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004cd2:	2302      	movs	r3, #2
 8004cd4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004cd6:	e116      	b.n	8004f06 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d002      	beq.n	8004ce4 <HAL_SPI_Transmit+0x52>
 8004cde:	88fb      	ldrh	r3, [r7, #6]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d102      	bne.n	8004cea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ce8:	e10d      	b.n	8004f06 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2203      	movs	r2, #3
 8004cee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	68ba      	ldr	r2, [r7, #8]
 8004cfc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	88fa      	ldrh	r2, [r7, #6]
 8004d02:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	88fa      	ldrh	r2, [r7, #6]
 8004d08:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d30:	d10f      	bne.n	8004d52 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d40:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d50:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5c:	2b40      	cmp	r3, #64	; 0x40
 8004d5e:	d007      	beq.n	8004d70 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d78:	d14f      	bne.n	8004e1a <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d002      	beq.n	8004d88 <HAL_SPI_Transmit+0xf6>
 8004d82:	8afb      	ldrh	r3, [r7, #22]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d142      	bne.n	8004e0e <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8c:	881a      	ldrh	r2, [r3, #0]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d98:	1c9a      	adds	r2, r3, #2
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	3b01      	subs	r3, #1
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004dac:	e02f      	b.n	8004e0e <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f003 0302 	and.w	r3, r3, #2
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d112      	bne.n	8004de2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc0:	881a      	ldrh	r2, [r3, #0]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dcc:	1c9a      	adds	r2, r3, #2
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	3b01      	subs	r3, #1
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	86da      	strh	r2, [r3, #54]	; 0x36
 8004de0:	e015      	b.n	8004e0e <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004de2:	f7fd fb3d 	bl	8002460 <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	683a      	ldr	r2, [r7, #0]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d803      	bhi.n	8004dfa <HAL_SPI_Transmit+0x168>
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df8:	d102      	bne.n	8004e00 <HAL_SPI_Transmit+0x16e>
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d106      	bne.n	8004e0e <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004e0c:	e07b      	b.n	8004f06 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d1ca      	bne.n	8004dae <HAL_SPI_Transmit+0x11c>
 8004e18:	e050      	b.n	8004ebc <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d002      	beq.n	8004e28 <HAL_SPI_Transmit+0x196>
 8004e22:	8afb      	ldrh	r3, [r7, #22]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d144      	bne.n	8004eb2 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	330c      	adds	r3, #12
 8004e32:	7812      	ldrb	r2, [r2, #0]
 8004e34:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e3a:	1c5a      	adds	r2, r3, #1
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	3b01      	subs	r3, #1
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004e4e:	e030      	b.n	8004eb2 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d113      	bne.n	8004e86 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	330c      	adds	r3, #12
 8004e68:	7812      	ldrb	r2, [r2, #0]
 8004e6a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e70:	1c5a      	adds	r2, r3, #1
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	86da      	strh	r2, [r3, #54]	; 0x36
 8004e84:	e015      	b.n	8004eb2 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e86:	f7fd faeb 	bl	8002460 <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	683a      	ldr	r2, [r7, #0]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d803      	bhi.n	8004e9e <HAL_SPI_Transmit+0x20c>
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9c:	d102      	bne.n	8004ea4 <HAL_SPI_Transmit+0x212>
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d106      	bne.n	8004eb2 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004eb0:	e029      	b.n	8004f06 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1c9      	bne.n	8004e50 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ebc:	69ba      	ldr	r2, [r7, #24]
 8004ebe:	6839      	ldr	r1, [r7, #0]
 8004ec0:	68f8      	ldr	r0, [r7, #12]
 8004ec2:	f000 fa6f 	bl	80053a4 <SPI_EndRxTxTransaction>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d002      	beq.n	8004ed2 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2220      	movs	r2, #32
 8004ed0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d10a      	bne.n	8004ef0 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004eda:	2300      	movs	r3, #0
 8004edc:	613b      	str	r3, [r7, #16]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	613b      	str	r3, [r7, #16]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	613b      	str	r3, [r7, #16]
 8004eee:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d002      	beq.n	8004efe <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	77fb      	strb	r3, [r7, #31]
 8004efc:	e003      	b.n	8004f06 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3720      	adds	r7, #32
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b08c      	sub	sp, #48	; 0x30
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]
 8004f24:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004f26:	2301      	movs	r3, #1
 8004f28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d101      	bne.n	8004f3e <HAL_SPI_TransmitReceive+0x26>
 8004f3a:	2302      	movs	r3, #2
 8004f3c:	e198      	b.n	8005270 <HAL_SPI_TransmitReceive+0x358>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f46:	f7fd fa8b 	bl	8002460 <HAL_GetTick>
 8004f4a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004f5c:	887b      	ldrh	r3, [r7, #2]
 8004f5e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d00f      	beq.n	8004f88 <HAL_SPI_TransmitReceive+0x70>
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f6e:	d107      	bne.n	8004f80 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d103      	bne.n	8004f80 <HAL_SPI_TransmitReceive+0x68>
 8004f78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f7c:	2b04      	cmp	r3, #4
 8004f7e:	d003      	beq.n	8004f88 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004f80:	2302      	movs	r3, #2
 8004f82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004f86:	e16d      	b.n	8005264 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d005      	beq.n	8004f9a <HAL_SPI_TransmitReceive+0x82>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d002      	beq.n	8004f9a <HAL_SPI_TransmitReceive+0x82>
 8004f94:	887b      	ldrh	r3, [r7, #2]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d103      	bne.n	8004fa2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004fa0:	e160      	b.n	8005264 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	2b04      	cmp	r3, #4
 8004fac:	d003      	beq.n	8004fb6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2205      	movs	r2, #5
 8004fb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	887a      	ldrh	r2, [r7, #2]
 8004fc6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	887a      	ldrh	r2, [r7, #2]
 8004fcc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	68ba      	ldr	r2, [r7, #8]
 8004fd2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	887a      	ldrh	r2, [r7, #2]
 8004fd8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	887a      	ldrh	r2, [r7, #2]
 8004fde:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff6:	2b40      	cmp	r3, #64	; 0x40
 8004ff8:	d007      	beq.n	800500a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005008:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005012:	d17c      	bne.n	800510e <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d002      	beq.n	8005022 <HAL_SPI_TransmitReceive+0x10a>
 800501c:	8b7b      	ldrh	r3, [r7, #26]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d16a      	bne.n	80050f8 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005026:	881a      	ldrh	r2, [r3, #0]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005032:	1c9a      	adds	r2, r3, #2
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800503c:	b29b      	uxth	r3, r3
 800503e:	3b01      	subs	r3, #1
 8005040:	b29a      	uxth	r2, r3
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005046:	e057      	b.n	80050f8 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	2b02      	cmp	r3, #2
 8005054:	d11b      	bne.n	800508e <HAL_SPI_TransmitReceive+0x176>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800505a:	b29b      	uxth	r3, r3
 800505c:	2b00      	cmp	r3, #0
 800505e:	d016      	beq.n	800508e <HAL_SPI_TransmitReceive+0x176>
 8005060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005062:	2b01      	cmp	r3, #1
 8005064:	d113      	bne.n	800508e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506a:	881a      	ldrh	r2, [r3, #0]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005076:	1c9a      	adds	r2, r3, #2
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005080:	b29b      	uxth	r3, r3
 8005082:	3b01      	subs	r3, #1
 8005084:	b29a      	uxth	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800508a:	2300      	movs	r3, #0
 800508c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f003 0301 	and.w	r3, r3, #1
 8005098:	2b01      	cmp	r3, #1
 800509a:	d119      	bne.n	80050d0 <HAL_SPI_TransmitReceive+0x1b8>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d014      	beq.n	80050d0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68da      	ldr	r2, [r3, #12]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b0:	b292      	uxth	r2, r2
 80050b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b8:	1c9a      	adds	r2, r3, #2
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	3b01      	subs	r3, #1
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80050cc:	2301      	movs	r3, #1
 80050ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80050d0:	f7fd f9c6 	bl	8002460 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050dc:	429a      	cmp	r2, r3
 80050de:	d80b      	bhi.n	80050f8 <HAL_SPI_TransmitReceive+0x1e0>
 80050e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e6:	d007      	beq.n	80050f8 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80050f6:	e0b5      	b.n	8005264 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1a2      	bne.n	8005048 <HAL_SPI_TransmitReceive+0x130>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005106:	b29b      	uxth	r3, r3
 8005108:	2b00      	cmp	r3, #0
 800510a:	d19d      	bne.n	8005048 <HAL_SPI_TransmitReceive+0x130>
 800510c:	e080      	b.n	8005210 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d002      	beq.n	800511c <HAL_SPI_TransmitReceive+0x204>
 8005116:	8b7b      	ldrh	r3, [r7, #26]
 8005118:	2b01      	cmp	r3, #1
 800511a:	d16f      	bne.n	80051fc <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	330c      	adds	r3, #12
 8005126:	7812      	ldrb	r2, [r2, #0]
 8005128:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512e:	1c5a      	adds	r2, r3, #1
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005138:	b29b      	uxth	r3, r3
 800513a:	3b01      	subs	r3, #1
 800513c:	b29a      	uxth	r2, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005142:	e05b      	b.n	80051fc <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f003 0302 	and.w	r3, r3, #2
 800514e:	2b02      	cmp	r3, #2
 8005150:	d11c      	bne.n	800518c <HAL_SPI_TransmitReceive+0x274>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005156:	b29b      	uxth	r3, r3
 8005158:	2b00      	cmp	r3, #0
 800515a:	d017      	beq.n	800518c <HAL_SPI_TransmitReceive+0x274>
 800515c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800515e:	2b01      	cmp	r3, #1
 8005160:	d114      	bne.n	800518c <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	330c      	adds	r3, #12
 800516c:	7812      	ldrb	r2, [r2, #0]
 800516e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005174:	1c5a      	adds	r2, r3, #1
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800517e:	b29b      	uxth	r3, r3
 8005180:	3b01      	subs	r3, #1
 8005182:	b29a      	uxth	r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005188:	2300      	movs	r3, #0
 800518a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f003 0301 	and.w	r3, r3, #1
 8005196:	2b01      	cmp	r3, #1
 8005198:	d119      	bne.n	80051ce <HAL_SPI_TransmitReceive+0x2b6>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800519e:	b29b      	uxth	r3, r3
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d014      	beq.n	80051ce <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68da      	ldr	r2, [r3, #12]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ae:	b2d2      	uxtb	r2, r2
 80051b0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b6:	1c5a      	adds	r2, r3, #1
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	3b01      	subs	r3, #1
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80051ca:	2301      	movs	r3, #1
 80051cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80051ce:	f7fd f947 	bl	8002460 <HAL_GetTick>
 80051d2:	4602      	mov	r2, r0
 80051d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051da:	429a      	cmp	r2, r3
 80051dc:	d803      	bhi.n	80051e6 <HAL_SPI_TransmitReceive+0x2ce>
 80051de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e4:	d102      	bne.n	80051ec <HAL_SPI_TransmitReceive+0x2d4>
 80051e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d107      	bne.n	80051fc <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80051fa:	e033      	b.n	8005264 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005200:	b29b      	uxth	r3, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	d19e      	bne.n	8005144 <HAL_SPI_TransmitReceive+0x22c>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800520a:	b29b      	uxth	r3, r3
 800520c:	2b00      	cmp	r3, #0
 800520e:	d199      	bne.n	8005144 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005212:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	f000 f8c5 	bl	80053a4 <SPI_EndRxTxTransaction>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d006      	beq.n	800522e <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2220      	movs	r2, #32
 800522a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800522c:	e01a      	b.n	8005264 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d10a      	bne.n	800524c <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005236:	2300      	movs	r3, #0
 8005238:	617b      	str	r3, [r7, #20]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	617b      	str	r3, [r7, #20]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	617b      	str	r3, [r7, #20]
 800524a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005250:	2b00      	cmp	r3, #0
 8005252:	d003      	beq.n	800525c <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800525a:	e003      	b.n	8005264 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800526c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005270:	4618      	mov	r0, r3
 8005272:	3730      	adds	r7, #48	; 0x30
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005286:	b2db      	uxtb	r3, r3
}
 8005288:	4618      	mov	r0, r3
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b088      	sub	sp, #32
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	603b      	str	r3, [r7, #0]
 80052a0:	4613      	mov	r3, r2
 80052a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80052a4:	f7fd f8dc 	bl	8002460 <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ac:	1a9b      	subs	r3, r3, r2
 80052ae:	683a      	ldr	r2, [r7, #0]
 80052b0:	4413      	add	r3, r2
 80052b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80052b4:	f7fd f8d4 	bl	8002460 <HAL_GetTick>
 80052b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80052ba:	4b39      	ldr	r3, [pc, #228]	; (80053a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	015b      	lsls	r3, r3, #5
 80052c0:	0d1b      	lsrs	r3, r3, #20
 80052c2:	69fa      	ldr	r2, [r7, #28]
 80052c4:	fb02 f303 	mul.w	r3, r2, r3
 80052c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052ca:	e054      	b.n	8005376 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d2:	d050      	beq.n	8005376 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80052d4:	f7fd f8c4 	bl	8002460 <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	69fa      	ldr	r2, [r7, #28]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d902      	bls.n	80052ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d13d      	bne.n	8005366 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	685a      	ldr	r2, [r3, #4]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80052f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005302:	d111      	bne.n	8005328 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800530c:	d004      	beq.n	8005318 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005316:	d107      	bne.n	8005328 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005326:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800532c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005330:	d10f      	bne.n	8005352 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005340:	601a      	str	r2, [r3, #0]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005350:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2201      	movs	r2, #1
 8005356:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e017      	b.n	8005396 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d101      	bne.n	8005370 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800536c:	2300      	movs	r3, #0
 800536e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	3b01      	subs	r3, #1
 8005374:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	689a      	ldr	r2, [r3, #8]
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	4013      	ands	r3, r2
 8005380:	68ba      	ldr	r2, [r7, #8]
 8005382:	429a      	cmp	r2, r3
 8005384:	bf0c      	ite	eq
 8005386:	2301      	moveq	r3, #1
 8005388:	2300      	movne	r3, #0
 800538a:	b2db      	uxtb	r3, r3
 800538c:	461a      	mov	r2, r3
 800538e:	79fb      	ldrb	r3, [r7, #7]
 8005390:	429a      	cmp	r2, r3
 8005392:	d19b      	bne.n	80052cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3720      	adds	r7, #32
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	20000000 	.word	0x20000000

080053a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b088      	sub	sp, #32
 80053a8:	af02      	add	r7, sp, #8
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	9300      	str	r3, [sp, #0]
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	2201      	movs	r2, #1
 80053b8:	2102      	movs	r1, #2
 80053ba:	68f8      	ldr	r0, [r7, #12]
 80053bc:	f7ff ff6a 	bl	8005294 <SPI_WaitFlagStateUntilTimeout>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d007      	beq.n	80053d6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ca:	f043 0220 	orr.w	r2, r3, #32
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e032      	b.n	800543c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80053d6:	4b1b      	ldr	r3, [pc, #108]	; (8005444 <SPI_EndRxTxTransaction+0xa0>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a1b      	ldr	r2, [pc, #108]	; (8005448 <SPI_EndRxTxTransaction+0xa4>)
 80053dc:	fba2 2303 	umull	r2, r3, r2, r3
 80053e0:	0d5b      	lsrs	r3, r3, #21
 80053e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80053e6:	fb02 f303 	mul.w	r3, r2, r3
 80053ea:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053f4:	d112      	bne.n	800541c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	9300      	str	r3, [sp, #0]
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	2200      	movs	r2, #0
 80053fe:	2180      	movs	r1, #128	; 0x80
 8005400:	68f8      	ldr	r0, [r7, #12]
 8005402:	f7ff ff47 	bl	8005294 <SPI_WaitFlagStateUntilTimeout>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d016      	beq.n	800543a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005410:	f043 0220 	orr.w	r2, r3, #32
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e00f      	b.n	800543c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00a      	beq.n	8005438 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	3b01      	subs	r3, #1
 8005426:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005432:	2b80      	cmp	r3, #128	; 0x80
 8005434:	d0f2      	beq.n	800541c <SPI_EndRxTxTransaction+0x78>
 8005436:	e000      	b.n	800543a <SPI_EndRxTxTransaction+0x96>
        break;
 8005438:	bf00      	nop
  }

  return HAL_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	3718      	adds	r7, #24
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	20000000 	.word	0x20000000
 8005448:	165e9f81 	.word	0x165e9f81

0800544c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e041      	b.n	80054e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005464:	b2db      	uxtb	r3, r3
 8005466:	2b00      	cmp	r3, #0
 8005468:	d106      	bne.n	8005478 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 f839 	bl	80054ea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2202      	movs	r2, #2
 800547c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	3304      	adds	r3, #4
 8005488:	4619      	mov	r1, r3
 800548a:	4610      	mov	r0, r2
 800548c:	f000 fde8 	bl	8006060 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3708      	adds	r7, #8
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}

080054ea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80054ea:	b480      	push	{r7}
 80054ec:	b083      	sub	sp, #12
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80054f2:	bf00      	nop
 80054f4:	370c      	adds	r7, #12
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
	...

08005500 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800550e:	b2db      	uxtb	r3, r3
 8005510:	2b01      	cmp	r3, #1
 8005512:	d001      	beq.n	8005518 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e04e      	b.n	80055b6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2202      	movs	r2, #2
 800551c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68da      	ldr	r2, [r3, #12]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f042 0201 	orr.w	r2, r2, #1
 800552e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a23      	ldr	r2, [pc, #140]	; (80055c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d022      	beq.n	8005580 <HAL_TIM_Base_Start_IT+0x80>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005542:	d01d      	beq.n	8005580 <HAL_TIM_Base_Start_IT+0x80>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a1f      	ldr	r2, [pc, #124]	; (80055c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d018      	beq.n	8005580 <HAL_TIM_Base_Start_IT+0x80>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a1e      	ldr	r2, [pc, #120]	; (80055cc <HAL_TIM_Base_Start_IT+0xcc>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d013      	beq.n	8005580 <HAL_TIM_Base_Start_IT+0x80>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a1c      	ldr	r2, [pc, #112]	; (80055d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d00e      	beq.n	8005580 <HAL_TIM_Base_Start_IT+0x80>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a1b      	ldr	r2, [pc, #108]	; (80055d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d009      	beq.n	8005580 <HAL_TIM_Base_Start_IT+0x80>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a19      	ldr	r2, [pc, #100]	; (80055d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d004      	beq.n	8005580 <HAL_TIM_Base_Start_IT+0x80>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a18      	ldr	r2, [pc, #96]	; (80055dc <HAL_TIM_Base_Start_IT+0xdc>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d111      	bne.n	80055a4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f003 0307 	and.w	r3, r3, #7
 800558a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2b06      	cmp	r3, #6
 8005590:	d010      	beq.n	80055b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f042 0201 	orr.w	r2, r2, #1
 80055a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055a2:	e007      	b.n	80055b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f042 0201 	orr.w	r2, r2, #1
 80055b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3714      	adds	r7, #20
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	40010000 	.word	0x40010000
 80055c8:	40000400 	.word	0x40000400
 80055cc:	40000800 	.word	0x40000800
 80055d0:	40000c00 	.word	0x40000c00
 80055d4:	40010400 	.word	0x40010400
 80055d8:	40014000 	.word	0x40014000
 80055dc:	40001800 	.word	0x40001800

080055e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d101      	bne.n	80055f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e041      	b.n	8005676 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d106      	bne.n	800560c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f7fc fbf8 	bl	8001dfc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2202      	movs	r2, #2
 8005610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	3304      	adds	r3, #4
 800561c:	4619      	mov	r1, r3
 800561e:	4610      	mov	r0, r2
 8005620:	f000 fd1e 	bl	8006060 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3708      	adds	r7, #8
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
	...

08005680 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d109      	bne.n	80056a4 <HAL_TIM_PWM_Start+0x24>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005696:	b2db      	uxtb	r3, r3
 8005698:	2b01      	cmp	r3, #1
 800569a:	bf14      	ite	ne
 800569c:	2301      	movne	r3, #1
 800569e:	2300      	moveq	r3, #0
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	e022      	b.n	80056ea <HAL_TIM_PWM_Start+0x6a>
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	2b04      	cmp	r3, #4
 80056a8:	d109      	bne.n	80056be <HAL_TIM_PWM_Start+0x3e>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	bf14      	ite	ne
 80056b6:	2301      	movne	r3, #1
 80056b8:	2300      	moveq	r3, #0
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	e015      	b.n	80056ea <HAL_TIM_PWM_Start+0x6a>
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	2b08      	cmp	r3, #8
 80056c2:	d109      	bne.n	80056d8 <HAL_TIM_PWM_Start+0x58>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	bf14      	ite	ne
 80056d0:	2301      	movne	r3, #1
 80056d2:	2300      	moveq	r3, #0
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	e008      	b.n	80056ea <HAL_TIM_PWM_Start+0x6a>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	bf14      	ite	ne
 80056e4:	2301      	movne	r3, #1
 80056e6:	2300      	moveq	r3, #0
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d001      	beq.n	80056f2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e07c      	b.n	80057ec <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d104      	bne.n	8005702 <HAL_TIM_PWM_Start+0x82>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2202      	movs	r2, #2
 80056fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005700:	e013      	b.n	800572a <HAL_TIM_PWM_Start+0xaa>
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	2b04      	cmp	r3, #4
 8005706:	d104      	bne.n	8005712 <HAL_TIM_PWM_Start+0x92>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2202      	movs	r2, #2
 800570c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005710:	e00b      	b.n	800572a <HAL_TIM_PWM_Start+0xaa>
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	2b08      	cmp	r3, #8
 8005716:	d104      	bne.n	8005722 <HAL_TIM_PWM_Start+0xa2>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2202      	movs	r2, #2
 800571c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005720:	e003      	b.n	800572a <HAL_TIM_PWM_Start+0xaa>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2202      	movs	r2, #2
 8005726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2201      	movs	r2, #1
 8005730:	6839      	ldr	r1, [r7, #0]
 8005732:	4618      	mov	r0, r3
 8005734:	f001 f81a 	bl	800676c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a2d      	ldr	r2, [pc, #180]	; (80057f4 <HAL_TIM_PWM_Start+0x174>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d004      	beq.n	800574c <HAL_TIM_PWM_Start+0xcc>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a2c      	ldr	r2, [pc, #176]	; (80057f8 <HAL_TIM_PWM_Start+0x178>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d101      	bne.n	8005750 <HAL_TIM_PWM_Start+0xd0>
 800574c:	2301      	movs	r3, #1
 800574e:	e000      	b.n	8005752 <HAL_TIM_PWM_Start+0xd2>
 8005750:	2300      	movs	r3, #0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d007      	beq.n	8005766 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005764:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a22      	ldr	r2, [pc, #136]	; (80057f4 <HAL_TIM_PWM_Start+0x174>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d022      	beq.n	80057b6 <HAL_TIM_PWM_Start+0x136>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005778:	d01d      	beq.n	80057b6 <HAL_TIM_PWM_Start+0x136>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a1f      	ldr	r2, [pc, #124]	; (80057fc <HAL_TIM_PWM_Start+0x17c>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d018      	beq.n	80057b6 <HAL_TIM_PWM_Start+0x136>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a1d      	ldr	r2, [pc, #116]	; (8005800 <HAL_TIM_PWM_Start+0x180>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d013      	beq.n	80057b6 <HAL_TIM_PWM_Start+0x136>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a1c      	ldr	r2, [pc, #112]	; (8005804 <HAL_TIM_PWM_Start+0x184>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d00e      	beq.n	80057b6 <HAL_TIM_PWM_Start+0x136>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a16      	ldr	r2, [pc, #88]	; (80057f8 <HAL_TIM_PWM_Start+0x178>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d009      	beq.n	80057b6 <HAL_TIM_PWM_Start+0x136>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a18      	ldr	r2, [pc, #96]	; (8005808 <HAL_TIM_PWM_Start+0x188>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d004      	beq.n	80057b6 <HAL_TIM_PWM_Start+0x136>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a16      	ldr	r2, [pc, #88]	; (800580c <HAL_TIM_PWM_Start+0x18c>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d111      	bne.n	80057da <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	f003 0307 	and.w	r3, r3, #7
 80057c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2b06      	cmp	r3, #6
 80057c6:	d010      	beq.n	80057ea <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f042 0201 	orr.w	r2, r2, #1
 80057d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057d8:	e007      	b.n	80057ea <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f042 0201 	orr.w	r2, r2, #1
 80057e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3710      	adds	r7, #16
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	40010000 	.word	0x40010000
 80057f8:	40010400 	.word	0x40010400
 80057fc:	40000400 	.word	0x40000400
 8005800:	40000800 	.word	0x40000800
 8005804:	40000c00 	.word	0x40000c00
 8005808:	40014000 	.word	0x40014000
 800580c:	40001800 	.word	0x40001800

08005810 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d101      	bne.n	8005822 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e041      	b.n	80058a6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005828:	b2db      	uxtb	r3, r3
 800582a:	2b00      	cmp	r3, #0
 800582c:	d106      	bne.n	800583c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f7fc fb80 	bl	8001f3c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2202      	movs	r2, #2
 8005840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	3304      	adds	r3, #4
 800584c:	4619      	mov	r1, r3
 800584e:	4610      	mov	r0, r2
 8005850:	f000 fc06 	bl	8006060 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3708      	adds	r7, #8
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
	...

080058b0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058ba:	2300      	movs	r3, #0
 80058bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d104      	bne.n	80058ce <HAL_TIM_IC_Start_IT+0x1e>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	e013      	b.n	80058f6 <HAL_TIM_IC_Start_IT+0x46>
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	2b04      	cmp	r3, #4
 80058d2:	d104      	bne.n	80058de <HAL_TIM_IC_Start_IT+0x2e>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	e00b      	b.n	80058f6 <HAL_TIM_IC_Start_IT+0x46>
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	2b08      	cmp	r3, #8
 80058e2:	d104      	bne.n	80058ee <HAL_TIM_IC_Start_IT+0x3e>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	e003      	b.n	80058f6 <HAL_TIM_IC_Start_IT+0x46>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d104      	bne.n	8005908 <HAL_TIM_IC_Start_IT+0x58>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005904:	b2db      	uxtb	r3, r3
 8005906:	e013      	b.n	8005930 <HAL_TIM_IC_Start_IT+0x80>
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	2b04      	cmp	r3, #4
 800590c:	d104      	bne.n	8005918 <HAL_TIM_IC_Start_IT+0x68>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005914:	b2db      	uxtb	r3, r3
 8005916:	e00b      	b.n	8005930 <HAL_TIM_IC_Start_IT+0x80>
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	2b08      	cmp	r3, #8
 800591c:	d104      	bne.n	8005928 <HAL_TIM_IC_Start_IT+0x78>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005924:	b2db      	uxtb	r3, r3
 8005926:	e003      	b.n	8005930 <HAL_TIM_IC_Start_IT+0x80>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800592e:	b2db      	uxtb	r3, r3
 8005930:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005932:	7bbb      	ldrb	r3, [r7, #14]
 8005934:	2b01      	cmp	r3, #1
 8005936:	d102      	bne.n	800593e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005938:	7b7b      	ldrb	r3, [r7, #13]
 800593a:	2b01      	cmp	r3, #1
 800593c:	d001      	beq.n	8005942 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e0cc      	b.n	8005adc <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d104      	bne.n	8005952 <HAL_TIM_IC_Start_IT+0xa2>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2202      	movs	r2, #2
 800594c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005950:	e013      	b.n	800597a <HAL_TIM_IC_Start_IT+0xca>
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	2b04      	cmp	r3, #4
 8005956:	d104      	bne.n	8005962 <HAL_TIM_IC_Start_IT+0xb2>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2202      	movs	r2, #2
 800595c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005960:	e00b      	b.n	800597a <HAL_TIM_IC_Start_IT+0xca>
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	2b08      	cmp	r3, #8
 8005966:	d104      	bne.n	8005972 <HAL_TIM_IC_Start_IT+0xc2>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2202      	movs	r2, #2
 800596c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005970:	e003      	b.n	800597a <HAL_TIM_IC_Start_IT+0xca>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2202      	movs	r2, #2
 8005976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d104      	bne.n	800598a <HAL_TIM_IC_Start_IT+0xda>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2202      	movs	r2, #2
 8005984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005988:	e013      	b.n	80059b2 <HAL_TIM_IC_Start_IT+0x102>
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	2b04      	cmp	r3, #4
 800598e:	d104      	bne.n	800599a <HAL_TIM_IC_Start_IT+0xea>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2202      	movs	r2, #2
 8005994:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005998:	e00b      	b.n	80059b2 <HAL_TIM_IC_Start_IT+0x102>
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	2b08      	cmp	r3, #8
 800599e:	d104      	bne.n	80059aa <HAL_TIM_IC_Start_IT+0xfa>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2202      	movs	r2, #2
 80059a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059a8:	e003      	b.n	80059b2 <HAL_TIM_IC_Start_IT+0x102>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2202      	movs	r2, #2
 80059ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	2b0c      	cmp	r3, #12
 80059b6:	d841      	bhi.n	8005a3c <HAL_TIM_IC_Start_IT+0x18c>
 80059b8:	a201      	add	r2, pc, #4	; (adr r2, 80059c0 <HAL_TIM_IC_Start_IT+0x110>)
 80059ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059be:	bf00      	nop
 80059c0:	080059f5 	.word	0x080059f5
 80059c4:	08005a3d 	.word	0x08005a3d
 80059c8:	08005a3d 	.word	0x08005a3d
 80059cc:	08005a3d 	.word	0x08005a3d
 80059d0:	08005a07 	.word	0x08005a07
 80059d4:	08005a3d 	.word	0x08005a3d
 80059d8:	08005a3d 	.word	0x08005a3d
 80059dc:	08005a3d 	.word	0x08005a3d
 80059e0:	08005a19 	.word	0x08005a19
 80059e4:	08005a3d 	.word	0x08005a3d
 80059e8:	08005a3d 	.word	0x08005a3d
 80059ec:	08005a3d 	.word	0x08005a3d
 80059f0:	08005a2b 	.word	0x08005a2b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68da      	ldr	r2, [r3, #12]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f042 0202 	orr.w	r2, r2, #2
 8005a02:	60da      	str	r2, [r3, #12]
      break;
 8005a04:	e01d      	b.n	8005a42 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68da      	ldr	r2, [r3, #12]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f042 0204 	orr.w	r2, r2, #4
 8005a14:	60da      	str	r2, [r3, #12]
      break;
 8005a16:	e014      	b.n	8005a42 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68da      	ldr	r2, [r3, #12]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f042 0208 	orr.w	r2, r2, #8
 8005a26:	60da      	str	r2, [r3, #12]
      break;
 8005a28:	e00b      	b.n	8005a42 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68da      	ldr	r2, [r3, #12]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f042 0210 	orr.w	r2, r2, #16
 8005a38:	60da      	str	r2, [r3, #12]
      break;
 8005a3a:	e002      	b.n	8005a42 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a40:	bf00      	nop
  }

  if (status == HAL_OK)
 8005a42:	7bfb      	ldrb	r3, [r7, #15]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d148      	bne.n	8005ada <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	6839      	ldr	r1, [r7, #0]
 8005a50:	4618      	mov	r0, r3
 8005a52:	f000 fe8b 	bl	800676c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a22      	ldr	r2, [pc, #136]	; (8005ae4 <HAL_TIM_IC_Start_IT+0x234>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d022      	beq.n	8005aa6 <HAL_TIM_IC_Start_IT+0x1f6>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a68:	d01d      	beq.n	8005aa6 <HAL_TIM_IC_Start_IT+0x1f6>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a1e      	ldr	r2, [pc, #120]	; (8005ae8 <HAL_TIM_IC_Start_IT+0x238>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d018      	beq.n	8005aa6 <HAL_TIM_IC_Start_IT+0x1f6>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a1c      	ldr	r2, [pc, #112]	; (8005aec <HAL_TIM_IC_Start_IT+0x23c>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d013      	beq.n	8005aa6 <HAL_TIM_IC_Start_IT+0x1f6>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a1b      	ldr	r2, [pc, #108]	; (8005af0 <HAL_TIM_IC_Start_IT+0x240>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d00e      	beq.n	8005aa6 <HAL_TIM_IC_Start_IT+0x1f6>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a19      	ldr	r2, [pc, #100]	; (8005af4 <HAL_TIM_IC_Start_IT+0x244>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d009      	beq.n	8005aa6 <HAL_TIM_IC_Start_IT+0x1f6>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a18      	ldr	r2, [pc, #96]	; (8005af8 <HAL_TIM_IC_Start_IT+0x248>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d004      	beq.n	8005aa6 <HAL_TIM_IC_Start_IT+0x1f6>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a16      	ldr	r2, [pc, #88]	; (8005afc <HAL_TIM_IC_Start_IT+0x24c>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d111      	bne.n	8005aca <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	f003 0307 	and.w	r3, r3, #7
 8005ab0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	2b06      	cmp	r3, #6
 8005ab6:	d010      	beq.n	8005ada <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f042 0201 	orr.w	r2, r2, #1
 8005ac6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ac8:	e007      	b.n	8005ada <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f042 0201 	orr.w	r2, r2, #1
 8005ad8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3710      	adds	r7, #16
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	40010000 	.word	0x40010000
 8005ae8:	40000400 	.word	0x40000400
 8005aec:	40000800 	.word	0x40000800
 8005af0:	40000c00 	.word	0x40000c00
 8005af4:	40010400 	.word	0x40010400
 8005af8:	40014000 	.word	0x40014000
 8005afc:	40001800 	.word	0x40001800

08005b00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	f003 0302 	and.w	r3, r3, #2
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d020      	beq.n	8005b64 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f003 0302 	and.w	r3, r3, #2
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d01b      	beq.n	8005b64 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f06f 0202 	mvn.w	r2, #2
 8005b34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	f003 0303 	and.w	r3, r3, #3
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d003      	beq.n	8005b52 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f007 f866 	bl	800cc1c <HAL_TIM_IC_CaptureCallback>
 8005b50:	e005      	b.n	8005b5e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 fa66 	bl	8006024 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f000 fa6d 	bl	8006038 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	f003 0304 	and.w	r3, r3, #4
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d020      	beq.n	8005bb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f003 0304 	and.w	r3, r3, #4
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d01b      	beq.n	8005bb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f06f 0204 	mvn.w	r2, #4
 8005b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2202      	movs	r2, #2
 8005b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	699b      	ldr	r3, [r3, #24]
 8005b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d003      	beq.n	8005b9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f007 f840 	bl	800cc1c <HAL_TIM_IC_CaptureCallback>
 8005b9c:	e005      	b.n	8005baa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 fa40 	bl	8006024 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f000 fa47 	bl	8006038 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	f003 0308 	and.w	r3, r3, #8
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d020      	beq.n	8005bfc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f003 0308 	and.w	r3, r3, #8
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d01b      	beq.n	8005bfc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f06f 0208 	mvn.w	r2, #8
 8005bcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2204      	movs	r2, #4
 8005bd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	69db      	ldr	r3, [r3, #28]
 8005bda:	f003 0303 	and.w	r3, r3, #3
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d003      	beq.n	8005bea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f007 f81a 	bl	800cc1c <HAL_TIM_IC_CaptureCallback>
 8005be8:	e005      	b.n	8005bf6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 fa1a 	bl	8006024 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 fa21 	bl	8006038 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	f003 0310 	and.w	r3, r3, #16
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d020      	beq.n	8005c48 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f003 0310 	and.w	r3, r3, #16
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d01b      	beq.n	8005c48 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f06f 0210 	mvn.w	r2, #16
 8005c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2208      	movs	r2, #8
 8005c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	69db      	ldr	r3, [r3, #28]
 8005c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d003      	beq.n	8005c36 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f006 fff4 	bl	800cc1c <HAL_TIM_IC_CaptureCallback>
 8005c34:	e005      	b.n	8005c42 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 f9f4 	bl	8006024 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 f9fb 	bl	8006038 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	f003 0301 	and.w	r3, r3, #1
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00c      	beq.n	8005c6c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f003 0301 	and.w	r3, r3, #1
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d007      	beq.n	8005c6c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f06f 0201 	mvn.w	r2, #1
 8005c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f7fb fbdc 	bl	8001424 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00c      	beq.n	8005c90 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d007      	beq.n	8005c90 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 fe6c 	bl	8006968 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d00c      	beq.n	8005cb4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d007      	beq.n	8005cb4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 f9cc 	bl	800604c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	f003 0320 	and.w	r3, r3, #32
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00c      	beq.n	8005cd8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f003 0320 	and.w	r3, r3, #32
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d007      	beq.n	8005cd8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f06f 0220 	mvn.w	r2, #32
 8005cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 fe3e 	bl	8006954 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005cd8:	bf00      	nop
 8005cda:	3710      	adds	r7, #16
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b086      	sub	sp, #24
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cec:	2300      	movs	r3, #0
 8005cee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d101      	bne.n	8005cfe <HAL_TIM_IC_ConfigChannel+0x1e>
 8005cfa:	2302      	movs	r3, #2
 8005cfc:	e088      	b.n	8005e10 <HAL_TIM_IC_ConfigChannel+0x130>
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2201      	movs	r2, #1
 8005d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d11b      	bne.n	8005d44 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005d1c:	f000 fbfc 	bl	8006518 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	699a      	ldr	r2, [r3, #24]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f022 020c 	bic.w	r2, r2, #12
 8005d2e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	6999      	ldr	r1, [r3, #24]
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	689a      	ldr	r2, [r3, #8]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	619a      	str	r2, [r3, #24]
 8005d42:	e060      	b.n	8005e06 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2b04      	cmp	r3, #4
 8005d48:	d11c      	bne.n	8005d84 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005d5a:	f000 fc51 	bl	8006600 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	699a      	ldr	r2, [r3, #24]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005d6c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	6999      	ldr	r1, [r3, #24]
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	021a      	lsls	r2, r3, #8
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	430a      	orrs	r2, r1
 8005d80:	619a      	str	r2, [r3, #24]
 8005d82:	e040      	b.n	8005e06 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2b08      	cmp	r3, #8
 8005d88:	d11b      	bne.n	8005dc2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005d9a:	f000 fc6e 	bl	800667a <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	69da      	ldr	r2, [r3, #28]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f022 020c 	bic.w	r2, r2, #12
 8005dac:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	69d9      	ldr	r1, [r3, #28]
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	689a      	ldr	r2, [r3, #8]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	430a      	orrs	r2, r1
 8005dbe:	61da      	str	r2, [r3, #28]
 8005dc0:	e021      	b.n	8005e06 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2b0c      	cmp	r3, #12
 8005dc6:	d11c      	bne.n	8005e02 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005dd8:	f000 fc8b 	bl	80066f2 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	69da      	ldr	r2, [r3, #28]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005dea:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	69d9      	ldr	r1, [r3, #28]
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	021a      	lsls	r2, r3, #8
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	430a      	orrs	r2, r1
 8005dfe:	61da      	str	r2, [r3, #28]
 8005e00:	e001      	b.n	8005e06 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3718      	adds	r7, #24
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b086      	sub	sp, #24
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e24:	2300      	movs	r3, #0
 8005e26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d101      	bne.n	8005e36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e32:	2302      	movs	r3, #2
 8005e34:	e0ae      	b.n	8005f94 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2b0c      	cmp	r3, #12
 8005e42:	f200 809f 	bhi.w	8005f84 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005e46:	a201      	add	r2, pc, #4	; (adr r2, 8005e4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e4c:	08005e81 	.word	0x08005e81
 8005e50:	08005f85 	.word	0x08005f85
 8005e54:	08005f85 	.word	0x08005f85
 8005e58:	08005f85 	.word	0x08005f85
 8005e5c:	08005ec1 	.word	0x08005ec1
 8005e60:	08005f85 	.word	0x08005f85
 8005e64:	08005f85 	.word	0x08005f85
 8005e68:	08005f85 	.word	0x08005f85
 8005e6c:	08005f03 	.word	0x08005f03
 8005e70:	08005f85 	.word	0x08005f85
 8005e74:	08005f85 	.word	0x08005f85
 8005e78:	08005f85 	.word	0x08005f85
 8005e7c:	08005f43 	.word	0x08005f43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68b9      	ldr	r1, [r7, #8]
 8005e86:	4618      	mov	r0, r3
 8005e88:	f000 f996 	bl	80061b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	699a      	ldr	r2, [r3, #24]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f042 0208 	orr.w	r2, r2, #8
 8005e9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	699a      	ldr	r2, [r3, #24]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f022 0204 	bic.w	r2, r2, #4
 8005eaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	6999      	ldr	r1, [r3, #24]
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	691a      	ldr	r2, [r3, #16]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	430a      	orrs	r2, r1
 8005ebc:	619a      	str	r2, [r3, #24]
      break;
 8005ebe:	e064      	b.n	8005f8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68b9      	ldr	r1, [r7, #8]
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f000 f9e6 	bl	8006298 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	699a      	ldr	r2, [r3, #24]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005eda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	699a      	ldr	r2, [r3, #24]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005eea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	6999      	ldr	r1, [r3, #24]
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	021a      	lsls	r2, r3, #8
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	430a      	orrs	r2, r1
 8005efe:	619a      	str	r2, [r3, #24]
      break;
 8005f00:	e043      	b.n	8005f8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68b9      	ldr	r1, [r7, #8]
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f000 fa3b 	bl	8006384 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	69da      	ldr	r2, [r3, #28]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f042 0208 	orr.w	r2, r2, #8
 8005f1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	69da      	ldr	r2, [r3, #28]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f022 0204 	bic.w	r2, r2, #4
 8005f2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	69d9      	ldr	r1, [r3, #28]
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	691a      	ldr	r2, [r3, #16]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	430a      	orrs	r2, r1
 8005f3e:	61da      	str	r2, [r3, #28]
      break;
 8005f40:	e023      	b.n	8005f8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68b9      	ldr	r1, [r7, #8]
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f000 fa8f 	bl	800646c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	69da      	ldr	r2, [r3, #28]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	69da      	ldr	r2, [r3, #28]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	69d9      	ldr	r1, [r3, #28]
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	021a      	lsls	r2, r3, #8
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	430a      	orrs	r2, r1
 8005f80:	61da      	str	r2, [r3, #28]
      break;
 8005f82:	e002      	b.n	8005f8a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	75fb      	strb	r3, [r7, #23]
      break;
 8005f88:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f92:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3718      	adds	r7, #24
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	2b0c      	cmp	r3, #12
 8005fae:	d831      	bhi.n	8006014 <HAL_TIM_ReadCapturedValue+0x78>
 8005fb0:	a201      	add	r2, pc, #4	; (adr r2, 8005fb8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb6:	bf00      	nop
 8005fb8:	08005fed 	.word	0x08005fed
 8005fbc:	08006015 	.word	0x08006015
 8005fc0:	08006015 	.word	0x08006015
 8005fc4:	08006015 	.word	0x08006015
 8005fc8:	08005ff7 	.word	0x08005ff7
 8005fcc:	08006015 	.word	0x08006015
 8005fd0:	08006015 	.word	0x08006015
 8005fd4:	08006015 	.word	0x08006015
 8005fd8:	08006001 	.word	0x08006001
 8005fdc:	08006015 	.word	0x08006015
 8005fe0:	08006015 	.word	0x08006015
 8005fe4:	08006015 	.word	0x08006015
 8005fe8:	0800600b 	.word	0x0800600b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ff2:	60fb      	str	r3, [r7, #12]

      break;
 8005ff4:	e00f      	b.n	8006016 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffc:	60fb      	str	r3, [r7, #12]

      break;
 8005ffe:	e00a      	b.n	8006016 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006006:	60fb      	str	r3, [r7, #12]

      break;
 8006008:	e005      	b.n	8006016 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006010:	60fb      	str	r3, [r7, #12]

      break;
 8006012:	e000      	b.n	8006016 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006014:	bf00      	nop
  }

  return tmpreg;
 8006016:	68fb      	ldr	r3, [r7, #12]
}
 8006018:	4618      	mov	r0, r3
 800601a:	3714      	adds	r7, #20
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800602c:	bf00      	nop
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006040:	bf00      	nop
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006054:	bf00      	nop
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006060:	b480      	push	{r7}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a46      	ldr	r2, [pc, #280]	; (800618c <TIM_Base_SetConfig+0x12c>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d013      	beq.n	80060a0 <TIM_Base_SetConfig+0x40>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800607e:	d00f      	beq.n	80060a0 <TIM_Base_SetConfig+0x40>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a43      	ldr	r2, [pc, #268]	; (8006190 <TIM_Base_SetConfig+0x130>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d00b      	beq.n	80060a0 <TIM_Base_SetConfig+0x40>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a42      	ldr	r2, [pc, #264]	; (8006194 <TIM_Base_SetConfig+0x134>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d007      	beq.n	80060a0 <TIM_Base_SetConfig+0x40>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a41      	ldr	r2, [pc, #260]	; (8006198 <TIM_Base_SetConfig+0x138>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d003      	beq.n	80060a0 <TIM_Base_SetConfig+0x40>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a40      	ldr	r2, [pc, #256]	; (800619c <TIM_Base_SetConfig+0x13c>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d108      	bne.n	80060b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a35      	ldr	r2, [pc, #212]	; (800618c <TIM_Base_SetConfig+0x12c>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d02b      	beq.n	8006112 <TIM_Base_SetConfig+0xb2>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060c0:	d027      	beq.n	8006112 <TIM_Base_SetConfig+0xb2>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a32      	ldr	r2, [pc, #200]	; (8006190 <TIM_Base_SetConfig+0x130>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d023      	beq.n	8006112 <TIM_Base_SetConfig+0xb2>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a31      	ldr	r2, [pc, #196]	; (8006194 <TIM_Base_SetConfig+0x134>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d01f      	beq.n	8006112 <TIM_Base_SetConfig+0xb2>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a30      	ldr	r2, [pc, #192]	; (8006198 <TIM_Base_SetConfig+0x138>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d01b      	beq.n	8006112 <TIM_Base_SetConfig+0xb2>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a2f      	ldr	r2, [pc, #188]	; (800619c <TIM_Base_SetConfig+0x13c>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d017      	beq.n	8006112 <TIM_Base_SetConfig+0xb2>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a2e      	ldr	r2, [pc, #184]	; (80061a0 <TIM_Base_SetConfig+0x140>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d013      	beq.n	8006112 <TIM_Base_SetConfig+0xb2>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a2d      	ldr	r2, [pc, #180]	; (80061a4 <TIM_Base_SetConfig+0x144>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d00f      	beq.n	8006112 <TIM_Base_SetConfig+0xb2>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a2c      	ldr	r2, [pc, #176]	; (80061a8 <TIM_Base_SetConfig+0x148>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d00b      	beq.n	8006112 <TIM_Base_SetConfig+0xb2>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a2b      	ldr	r2, [pc, #172]	; (80061ac <TIM_Base_SetConfig+0x14c>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d007      	beq.n	8006112 <TIM_Base_SetConfig+0xb2>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a2a      	ldr	r2, [pc, #168]	; (80061b0 <TIM_Base_SetConfig+0x150>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d003      	beq.n	8006112 <TIM_Base_SetConfig+0xb2>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a29      	ldr	r2, [pc, #164]	; (80061b4 <TIM_Base_SetConfig+0x154>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d108      	bne.n	8006124 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006118:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	4313      	orrs	r3, r2
 8006122:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	695b      	ldr	r3, [r3, #20]
 800612e:	4313      	orrs	r3, r2
 8006130:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	689a      	ldr	r2, [r3, #8]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4a10      	ldr	r2, [pc, #64]	; (800618c <TIM_Base_SetConfig+0x12c>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d003      	beq.n	8006158 <TIM_Base_SetConfig+0xf8>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a12      	ldr	r2, [pc, #72]	; (800619c <TIM_Base_SetConfig+0x13c>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d103      	bne.n	8006160 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	691a      	ldr	r2, [r3, #16]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	f003 0301 	and.w	r3, r3, #1
 800616e:	2b01      	cmp	r3, #1
 8006170:	d105      	bne.n	800617e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	f023 0201 	bic.w	r2, r3, #1
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	611a      	str	r2, [r3, #16]
  }
}
 800617e:	bf00      	nop
 8006180:	3714      	adds	r7, #20
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop
 800618c:	40010000 	.word	0x40010000
 8006190:	40000400 	.word	0x40000400
 8006194:	40000800 	.word	0x40000800
 8006198:	40000c00 	.word	0x40000c00
 800619c:	40010400 	.word	0x40010400
 80061a0:	40014000 	.word	0x40014000
 80061a4:	40014400 	.word	0x40014400
 80061a8:	40014800 	.word	0x40014800
 80061ac:	40001800 	.word	0x40001800
 80061b0:	40001c00 	.word	0x40001c00
 80061b4:	40002000 	.word	0x40002000

080061b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b087      	sub	sp, #28
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a1b      	ldr	r3, [r3, #32]
 80061c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a1b      	ldr	r3, [r3, #32]
 80061cc:	f023 0201 	bic.w	r2, r3, #1
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f023 0303 	bic.w	r3, r3, #3
 80061ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	f023 0302 	bic.w	r3, r3, #2
 8006200:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	697a      	ldr	r2, [r7, #20]
 8006208:	4313      	orrs	r3, r2
 800620a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4a20      	ldr	r2, [pc, #128]	; (8006290 <TIM_OC1_SetConfig+0xd8>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d003      	beq.n	800621c <TIM_OC1_SetConfig+0x64>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4a1f      	ldr	r2, [pc, #124]	; (8006294 <TIM_OC1_SetConfig+0xdc>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d10c      	bne.n	8006236 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	f023 0308 	bic.w	r3, r3, #8
 8006222:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	697a      	ldr	r2, [r7, #20]
 800622a:	4313      	orrs	r3, r2
 800622c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	f023 0304 	bic.w	r3, r3, #4
 8006234:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a15      	ldr	r2, [pc, #84]	; (8006290 <TIM_OC1_SetConfig+0xd8>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d003      	beq.n	8006246 <TIM_OC1_SetConfig+0x8e>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a14      	ldr	r2, [pc, #80]	; (8006294 <TIM_OC1_SetConfig+0xdc>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d111      	bne.n	800626a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800624c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006254:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	695b      	ldr	r3, [r3, #20]
 800625a:	693a      	ldr	r2, [r7, #16]
 800625c:	4313      	orrs	r3, r2
 800625e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	699b      	ldr	r3, [r3, #24]
 8006264:	693a      	ldr	r2, [r7, #16]
 8006266:	4313      	orrs	r3, r2
 8006268:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	693a      	ldr	r2, [r7, #16]
 800626e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	685a      	ldr	r2, [r3, #4]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	697a      	ldr	r2, [r7, #20]
 8006282:	621a      	str	r2, [r3, #32]
}
 8006284:	bf00      	nop
 8006286:	371c      	adds	r7, #28
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr
 8006290:	40010000 	.word	0x40010000
 8006294:	40010400 	.word	0x40010400

08006298 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006298:	b480      	push	{r7}
 800629a:	b087      	sub	sp, #28
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a1b      	ldr	r3, [r3, #32]
 80062a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6a1b      	ldr	r3, [r3, #32]
 80062ac:	f023 0210 	bic.w	r2, r3, #16
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	021b      	lsls	r3, r3, #8
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	4313      	orrs	r3, r2
 80062da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	f023 0320 	bic.w	r3, r3, #32
 80062e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	011b      	lsls	r3, r3, #4
 80062ea:	697a      	ldr	r2, [r7, #20]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a22      	ldr	r2, [pc, #136]	; (800637c <TIM_OC2_SetConfig+0xe4>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d003      	beq.n	8006300 <TIM_OC2_SetConfig+0x68>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a21      	ldr	r2, [pc, #132]	; (8006380 <TIM_OC2_SetConfig+0xe8>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d10d      	bne.n	800631c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006306:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	011b      	lsls	r3, r3, #4
 800630e:	697a      	ldr	r2, [r7, #20]
 8006310:	4313      	orrs	r3, r2
 8006312:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800631a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4a17      	ldr	r2, [pc, #92]	; (800637c <TIM_OC2_SetConfig+0xe4>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d003      	beq.n	800632c <TIM_OC2_SetConfig+0x94>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a16      	ldr	r2, [pc, #88]	; (8006380 <TIM_OC2_SetConfig+0xe8>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d113      	bne.n	8006354 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006332:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800633a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	695b      	ldr	r3, [r3, #20]
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	693a      	ldr	r2, [r7, #16]
 8006344:	4313      	orrs	r3, r2
 8006346:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	699b      	ldr	r3, [r3, #24]
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	4313      	orrs	r3, r2
 8006352:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	693a      	ldr	r2, [r7, #16]
 8006358:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	685a      	ldr	r2, [r3, #4]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	697a      	ldr	r2, [r7, #20]
 800636c:	621a      	str	r2, [r3, #32]
}
 800636e:	bf00      	nop
 8006370:	371c      	adds	r7, #28
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	40010000 	.word	0x40010000
 8006380:	40010400 	.word	0x40010400

08006384 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006384:	b480      	push	{r7}
 8006386:	b087      	sub	sp, #28
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a1b      	ldr	r3, [r3, #32]
 8006392:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a1b      	ldr	r3, [r3, #32]
 8006398:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	69db      	ldr	r3, [r3, #28]
 80063aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f023 0303 	bic.w	r3, r3, #3
 80063ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	021b      	lsls	r3, r3, #8
 80063d4:	697a      	ldr	r2, [r7, #20]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a21      	ldr	r2, [pc, #132]	; (8006464 <TIM_OC3_SetConfig+0xe0>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d003      	beq.n	80063ea <TIM_OC3_SetConfig+0x66>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a20      	ldr	r2, [pc, #128]	; (8006468 <TIM_OC3_SetConfig+0xe4>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d10d      	bne.n	8006406 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	021b      	lsls	r3, r3, #8
 80063f8:	697a      	ldr	r2, [r7, #20]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006404:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a16      	ldr	r2, [pc, #88]	; (8006464 <TIM_OC3_SetConfig+0xe0>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d003      	beq.n	8006416 <TIM_OC3_SetConfig+0x92>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a15      	ldr	r2, [pc, #84]	; (8006468 <TIM_OC3_SetConfig+0xe4>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d113      	bne.n	800643e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800641c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006424:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	695b      	ldr	r3, [r3, #20]
 800642a:	011b      	lsls	r3, r3, #4
 800642c:	693a      	ldr	r2, [r7, #16]
 800642e:	4313      	orrs	r3, r2
 8006430:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	699b      	ldr	r3, [r3, #24]
 8006436:	011b      	lsls	r3, r3, #4
 8006438:	693a      	ldr	r2, [r7, #16]
 800643a:	4313      	orrs	r3, r2
 800643c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	693a      	ldr	r2, [r7, #16]
 8006442:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	685a      	ldr	r2, [r3, #4]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	697a      	ldr	r2, [r7, #20]
 8006456:	621a      	str	r2, [r3, #32]
}
 8006458:	bf00      	nop
 800645a:	371c      	adds	r7, #28
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr
 8006464:	40010000 	.word	0x40010000
 8006468:	40010400 	.word	0x40010400

0800646c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800646c:	b480      	push	{r7}
 800646e:	b087      	sub	sp, #28
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a1b      	ldr	r3, [r3, #32]
 800647a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6a1b      	ldr	r3, [r3, #32]
 8006480:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	69db      	ldr	r3, [r3, #28]
 8006492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800649a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	021b      	lsls	r3, r3, #8
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	031b      	lsls	r3, r3, #12
 80064be:	693a      	ldr	r2, [r7, #16]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a12      	ldr	r2, [pc, #72]	; (8006510 <TIM_OC4_SetConfig+0xa4>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d003      	beq.n	80064d4 <TIM_OC4_SetConfig+0x68>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4a11      	ldr	r2, [pc, #68]	; (8006514 <TIM_OC4_SetConfig+0xa8>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d109      	bne.n	80064e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	695b      	ldr	r3, [r3, #20]
 80064e0:	019b      	lsls	r3, r3, #6
 80064e2:	697a      	ldr	r2, [r7, #20]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	697a      	ldr	r2, [r7, #20]
 80064ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	685a      	ldr	r2, [r3, #4]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	693a      	ldr	r2, [r7, #16]
 8006500:	621a      	str	r2, [r3, #32]
}
 8006502:	bf00      	nop
 8006504:	371c      	adds	r7, #28
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop
 8006510:	40010000 	.word	0x40010000
 8006514:	40010400 	.word	0x40010400

08006518 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006518:	b480      	push	{r7}
 800651a:	b087      	sub	sp, #28
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	607a      	str	r2, [r7, #4]
 8006524:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6a1b      	ldr	r3, [r3, #32]
 800652a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6a1b      	ldr	r3, [r3, #32]
 8006530:	f023 0201 	bic.w	r2, r3, #1
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	699b      	ldr	r3, [r3, #24]
 800653c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	4a28      	ldr	r2, [pc, #160]	; (80065e4 <TIM_TI1_SetConfig+0xcc>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d01b      	beq.n	800657e <TIM_TI1_SetConfig+0x66>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800654c:	d017      	beq.n	800657e <TIM_TI1_SetConfig+0x66>
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	4a25      	ldr	r2, [pc, #148]	; (80065e8 <TIM_TI1_SetConfig+0xd0>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d013      	beq.n	800657e <TIM_TI1_SetConfig+0x66>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	4a24      	ldr	r2, [pc, #144]	; (80065ec <TIM_TI1_SetConfig+0xd4>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d00f      	beq.n	800657e <TIM_TI1_SetConfig+0x66>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	4a23      	ldr	r2, [pc, #140]	; (80065f0 <TIM_TI1_SetConfig+0xd8>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d00b      	beq.n	800657e <TIM_TI1_SetConfig+0x66>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	4a22      	ldr	r2, [pc, #136]	; (80065f4 <TIM_TI1_SetConfig+0xdc>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d007      	beq.n	800657e <TIM_TI1_SetConfig+0x66>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	4a21      	ldr	r2, [pc, #132]	; (80065f8 <TIM_TI1_SetConfig+0xe0>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d003      	beq.n	800657e <TIM_TI1_SetConfig+0x66>
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	4a20      	ldr	r2, [pc, #128]	; (80065fc <TIM_TI1_SetConfig+0xe4>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d101      	bne.n	8006582 <TIM_TI1_SetConfig+0x6a>
 800657e:	2301      	movs	r3, #1
 8006580:	e000      	b.n	8006584 <TIM_TI1_SetConfig+0x6c>
 8006582:	2300      	movs	r3, #0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d008      	beq.n	800659a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	f023 0303 	bic.w	r3, r3, #3
 800658e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006590:	697a      	ldr	r2, [r7, #20]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4313      	orrs	r3, r2
 8006596:	617b      	str	r3, [r7, #20]
 8006598:	e003      	b.n	80065a2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	f043 0301 	orr.w	r3, r3, #1
 80065a0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	011b      	lsls	r3, r3, #4
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	697a      	ldr	r2, [r7, #20]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	f023 030a 	bic.w	r3, r3, #10
 80065bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	f003 030a 	and.w	r3, r3, #10
 80065c4:	693a      	ldr	r2, [r7, #16]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	697a      	ldr	r2, [r7, #20]
 80065ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	693a      	ldr	r2, [r7, #16]
 80065d4:	621a      	str	r2, [r3, #32]
}
 80065d6:	bf00      	nop
 80065d8:	371c      	adds	r7, #28
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop
 80065e4:	40010000 	.word	0x40010000
 80065e8:	40000400 	.word	0x40000400
 80065ec:	40000800 	.word	0x40000800
 80065f0:	40000c00 	.word	0x40000c00
 80065f4:	40010400 	.word	0x40010400
 80065f8:	40014000 	.word	0x40014000
 80065fc:	40001800 	.word	0x40001800

08006600 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006600:	b480      	push	{r7}
 8006602:	b087      	sub	sp, #28
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	607a      	str	r2, [r7, #4]
 800660c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	6a1b      	ldr	r3, [r3, #32]
 8006612:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6a1b      	ldr	r3, [r3, #32]
 8006618:	f023 0210 	bic.w	r2, r3, #16
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800662c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	021b      	lsls	r3, r3, #8
 8006632:	693a      	ldr	r2, [r7, #16]
 8006634:	4313      	orrs	r3, r2
 8006636:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800663e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	031b      	lsls	r3, r3, #12
 8006644:	b29b      	uxth	r3, r3
 8006646:	693a      	ldr	r2, [r7, #16]
 8006648:	4313      	orrs	r3, r2
 800664a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006652:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	011b      	lsls	r3, r3, #4
 8006658:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800665c:	697a      	ldr	r2, [r7, #20]
 800665e:	4313      	orrs	r3, r2
 8006660:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	693a      	ldr	r2, [r7, #16]
 8006666:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	697a      	ldr	r2, [r7, #20]
 800666c:	621a      	str	r2, [r3, #32]
}
 800666e:	bf00      	nop
 8006670:	371c      	adds	r7, #28
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr

0800667a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800667a:	b480      	push	{r7}
 800667c:	b087      	sub	sp, #28
 800667e:	af00      	add	r7, sp, #0
 8006680:	60f8      	str	r0, [r7, #12]
 8006682:	60b9      	str	r1, [r7, #8]
 8006684:	607a      	str	r2, [r7, #4]
 8006686:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6a1b      	ldr	r3, [r3, #32]
 800668c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	69db      	ldr	r3, [r3, #28]
 800669e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	f023 0303 	bic.w	r3, r3, #3
 80066a6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80066a8:	693a      	ldr	r2, [r7, #16]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066b6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	011b      	lsls	r3, r3, #4
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	693a      	ldr	r2, [r7, #16]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80066ca:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	021b      	lsls	r3, r3, #8
 80066d0:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80066d4:	697a      	ldr	r2, [r7, #20]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	693a      	ldr	r2, [r7, #16]
 80066de:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	697a      	ldr	r2, [r7, #20]
 80066e4:	621a      	str	r2, [r3, #32]
}
 80066e6:	bf00      	nop
 80066e8:	371c      	adds	r7, #28
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr

080066f2 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80066f2:	b480      	push	{r7}
 80066f4:	b087      	sub	sp, #28
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	60f8      	str	r0, [r7, #12]
 80066fa:	60b9      	str	r1, [r7, #8]
 80066fc:	607a      	str	r2, [r7, #4]
 80066fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6a1b      	ldr	r3, [r3, #32]
 8006704:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6a1b      	ldr	r3, [r3, #32]
 800670a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	69db      	ldr	r3, [r3, #28]
 8006716:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800671e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	021b      	lsls	r3, r3, #8
 8006724:	693a      	ldr	r2, [r7, #16]
 8006726:	4313      	orrs	r3, r2
 8006728:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006730:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	031b      	lsls	r3, r3, #12
 8006736:	b29b      	uxth	r3, r3
 8006738:	693a      	ldr	r2, [r7, #16]
 800673a:	4313      	orrs	r3, r2
 800673c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006744:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	031b      	lsls	r3, r3, #12
 800674a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800674e:	697a      	ldr	r2, [r7, #20]
 8006750:	4313      	orrs	r3, r2
 8006752:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	693a      	ldr	r2, [r7, #16]
 8006758:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	697a      	ldr	r2, [r7, #20]
 800675e:	621a      	str	r2, [r3, #32]
}
 8006760:	bf00      	nop
 8006762:	371c      	adds	r7, #28
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800676c:	b480      	push	{r7}
 800676e:	b087      	sub	sp, #28
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	f003 031f 	and.w	r3, r3, #31
 800677e:	2201      	movs	r2, #1
 8006780:	fa02 f303 	lsl.w	r3, r2, r3
 8006784:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6a1a      	ldr	r2, [r3, #32]
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	43db      	mvns	r3, r3
 800678e:	401a      	ands	r2, r3
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6a1a      	ldr	r2, [r3, #32]
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	f003 031f 	and.w	r3, r3, #31
 800679e:	6879      	ldr	r1, [r7, #4]
 80067a0:	fa01 f303 	lsl.w	r3, r1, r3
 80067a4:	431a      	orrs	r2, r3
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	621a      	str	r2, [r3, #32]
}
 80067aa:	bf00      	nop
 80067ac:	371c      	adds	r7, #28
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
	...

080067b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d101      	bne.n	80067d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067cc:	2302      	movs	r3, #2
 80067ce:	e05a      	b.n	8006886 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2202      	movs	r2, #2
 80067dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	4313      	orrs	r3, r2
 8006800:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a21      	ldr	r2, [pc, #132]	; (8006894 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d022      	beq.n	800685a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800681c:	d01d      	beq.n	800685a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a1d      	ldr	r2, [pc, #116]	; (8006898 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d018      	beq.n	800685a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a1b      	ldr	r2, [pc, #108]	; (800689c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d013      	beq.n	800685a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a1a      	ldr	r2, [pc, #104]	; (80068a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d00e      	beq.n	800685a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a18      	ldr	r2, [pc, #96]	; (80068a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d009      	beq.n	800685a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a17      	ldr	r2, [pc, #92]	; (80068a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d004      	beq.n	800685a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a15      	ldr	r2, [pc, #84]	; (80068ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d10c      	bne.n	8006874 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006860:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	68ba      	ldr	r2, [r7, #8]
 8006868:	4313      	orrs	r3, r2
 800686a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68ba      	ldr	r2, [r7, #8]
 8006872:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	3714      	adds	r7, #20
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	40010000 	.word	0x40010000
 8006898:	40000400 	.word	0x40000400
 800689c:	40000800 	.word	0x40000800
 80068a0:	40000c00 	.word	0x40000c00
 80068a4:	40010400 	.word	0x40010400
 80068a8:	40014000 	.word	0x40014000
 80068ac:	40001800 	.word	0x40001800

080068b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80068ba:	2300      	movs	r3, #0
 80068bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d101      	bne.n	80068cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80068c8:	2302      	movs	r3, #2
 80068ca:	e03d      	b.n	8006948 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	4313      	orrs	r3, r2
 80068e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4313      	orrs	r3, r2
 800690a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	4313      	orrs	r3, r2
 8006918:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	695b      	ldr	r3, [r3, #20]
 8006924:	4313      	orrs	r3, r2
 8006926:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	69db      	ldr	r3, [r3, #28]
 8006932:	4313      	orrs	r3, r2
 8006934:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006946:	2300      	movs	r3, #0
}
 8006948:	4618      	mov	r0, r3
 800694a:	3714      	adds	r7, #20
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800695c:	bf00      	nop
 800695e:	370c      	adds	r7, #12
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006970:	bf00      	nop
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d101      	bne.n	800698e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e042      	b.n	8006a14 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006994:	b2db      	uxtb	r3, r3
 8006996:	2b00      	cmp	r3, #0
 8006998:	d106      	bne.n	80069a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f7fb fc64 	bl	8002270 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2224      	movs	r2, #36	; 0x24
 80069ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	68da      	ldr	r2, [r3, #12]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80069be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 fcdb 	bl	800737c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	691a      	ldr	r2, [r3, #16]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80069d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	695a      	ldr	r2, [r3, #20]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80069e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	68da      	ldr	r2, [r3, #12]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80069f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2220      	movs	r2, #32
 8006a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2220      	movs	r2, #32
 8006a08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3708      	adds	r7, #8
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	4613      	mov	r3, r2
 8006a28:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	2b20      	cmp	r3, #32
 8006a34:	d112      	bne.n	8006a5c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d002      	beq.n	8006a42 <HAL_UART_Receive_IT+0x26>
 8006a3c:	88fb      	ldrh	r3, [r7, #6]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d101      	bne.n	8006a46 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	e00b      	b.n	8006a5e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006a4c:	88fb      	ldrh	r3, [r7, #6]
 8006a4e:	461a      	mov	r2, r3
 8006a50:	68b9      	ldr	r1, [r7, #8]
 8006a52:	68f8      	ldr	r0, [r7, #12]
 8006a54:	f000 faba 	bl	8006fcc <UART_Start_Receive_IT>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	e000      	b.n	8006a5e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006a5c:	2302      	movs	r3, #2
  }
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3710      	adds	r7, #16
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
	...

08006a68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b0ba      	sub	sp, #232	; 0xe8
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	695b      	ldr	r3, [r3, #20]
 8006a8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006a94:	2300      	movs	r3, #0
 8006a96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a9e:	f003 030f 	and.w	r3, r3, #15
 8006aa2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006aa6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d10f      	bne.n	8006ace <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ab2:	f003 0320 	and.w	r3, r3, #32
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d009      	beq.n	8006ace <HAL_UART_IRQHandler+0x66>
 8006aba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006abe:	f003 0320 	and.w	r3, r3, #32
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d003      	beq.n	8006ace <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 fb99 	bl	80071fe <UART_Receive_IT>
      return;
 8006acc:	e25b      	b.n	8006f86 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006ace:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	f000 80de 	beq.w	8006c94 <HAL_UART_IRQHandler+0x22c>
 8006ad8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006adc:	f003 0301 	and.w	r3, r3, #1
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d106      	bne.n	8006af2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ae8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	f000 80d1 	beq.w	8006c94 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006af6:	f003 0301 	and.w	r3, r3, #1
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d00b      	beq.n	8006b16 <HAL_UART_IRQHandler+0xae>
 8006afe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d005      	beq.n	8006b16 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b0e:	f043 0201 	orr.w	r2, r3, #1
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b1a:	f003 0304 	and.w	r3, r3, #4
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d00b      	beq.n	8006b3a <HAL_UART_IRQHandler+0xd2>
 8006b22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b26:	f003 0301 	and.w	r3, r3, #1
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d005      	beq.n	8006b3a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b32:	f043 0202 	orr.w	r2, r3, #2
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b3e:	f003 0302 	and.w	r3, r3, #2
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00b      	beq.n	8006b5e <HAL_UART_IRQHandler+0xf6>
 8006b46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b4a:	f003 0301 	and.w	r3, r3, #1
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d005      	beq.n	8006b5e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b56:	f043 0204 	orr.w	r2, r3, #4
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b62:	f003 0308 	and.w	r3, r3, #8
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d011      	beq.n	8006b8e <HAL_UART_IRQHandler+0x126>
 8006b6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b6e:	f003 0320 	and.w	r3, r3, #32
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d105      	bne.n	8006b82 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006b76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b7a:	f003 0301 	and.w	r3, r3, #1
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d005      	beq.n	8006b8e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b86:	f043 0208 	orr.w	r2, r3, #8
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	f000 81f2 	beq.w	8006f7c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b9c:	f003 0320 	and.w	r3, r3, #32
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d008      	beq.n	8006bb6 <HAL_UART_IRQHandler+0x14e>
 8006ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ba8:	f003 0320 	and.w	r3, r3, #32
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d002      	beq.n	8006bb6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 fb24 	bl	80071fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	695b      	ldr	r3, [r3, #20]
 8006bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bc0:	2b40      	cmp	r3, #64	; 0x40
 8006bc2:	bf0c      	ite	eq
 8006bc4:	2301      	moveq	r3, #1
 8006bc6:	2300      	movne	r3, #0
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bd2:	f003 0308 	and.w	r3, r3, #8
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d103      	bne.n	8006be2 <HAL_UART_IRQHandler+0x17a>
 8006bda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d04f      	beq.n	8006c82 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 fa2c 	bl	8007040 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	695b      	ldr	r3, [r3, #20]
 8006bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bf2:	2b40      	cmp	r3, #64	; 0x40
 8006bf4:	d141      	bne.n	8006c7a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	3314      	adds	r3, #20
 8006bfc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c04:	e853 3f00 	ldrex	r3, [r3]
 8006c08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006c0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	3314      	adds	r3, #20
 8006c1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006c22:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006c26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006c2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006c32:	e841 2300 	strex	r3, r2, [r1]
 8006c36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006c3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d1d9      	bne.n	8006bf6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d013      	beq.n	8006c72 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c4e:	4a7e      	ldr	r2, [pc, #504]	; (8006e48 <HAL_UART_IRQHandler+0x3e0>)
 8006c50:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c56:	4618      	mov	r0, r3
 8006c58:	f7fb fd84 	bl	8002764 <HAL_DMA_Abort_IT>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d016      	beq.n	8006c90 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006c6c:	4610      	mov	r0, r2
 8006c6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c70:	e00e      	b.n	8006c90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 f994 	bl	8006fa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c78:	e00a      	b.n	8006c90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 f990 	bl	8006fa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c80:	e006      	b.n	8006c90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 f98c 	bl	8006fa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006c8e:	e175      	b.n	8006f7c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c90:	bf00      	nop
    return;
 8006c92:	e173      	b.n	8006f7c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	f040 814f 	bne.w	8006f3c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ca2:	f003 0310 	and.w	r3, r3, #16
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	f000 8148 	beq.w	8006f3c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006cac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cb0:	f003 0310 	and.w	r3, r3, #16
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	f000 8141 	beq.w	8006f3c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006cba:	2300      	movs	r3, #0
 8006cbc:	60bb      	str	r3, [r7, #8]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	60bb      	str	r3, [r7, #8]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	60bb      	str	r3, [r7, #8]
 8006cce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	695b      	ldr	r3, [r3, #20]
 8006cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cda:	2b40      	cmp	r3, #64	; 0x40
 8006cdc:	f040 80b6 	bne.w	8006e4c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006cec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f000 8145 	beq.w	8006f80 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006cfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	f080 813e 	bcs.w	8006f80 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d0a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d10:	69db      	ldr	r3, [r3, #28]
 8006d12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d16:	f000 8088 	beq.w	8006e2a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	330c      	adds	r3, #12
 8006d20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d28:	e853 3f00 	ldrex	r3, [r3]
 8006d2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006d30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	330c      	adds	r3, #12
 8006d42:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006d46:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006d4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006d52:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006d56:	e841 2300 	strex	r3, r2, [r1]
 8006d5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006d5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d1d9      	bne.n	8006d1a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	3314      	adds	r3, #20
 8006d6c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d70:	e853 3f00 	ldrex	r3, [r3]
 8006d74:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006d76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d78:	f023 0301 	bic.w	r3, r3, #1
 8006d7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	3314      	adds	r3, #20
 8006d86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006d8a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006d8e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d90:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006d92:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006d96:	e841 2300 	strex	r3, r2, [r1]
 8006d9a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006d9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d1e1      	bne.n	8006d66 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	3314      	adds	r3, #20
 8006da8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006daa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006dac:	e853 3f00 	ldrex	r3, [r3]
 8006db0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006db2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006db4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006db8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	3314      	adds	r3, #20
 8006dc2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006dc6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006dc8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006dcc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006dce:	e841 2300 	strex	r3, r2, [r1]
 8006dd2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006dd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d1e3      	bne.n	8006da2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2220      	movs	r2, #32
 8006dde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	330c      	adds	r3, #12
 8006dee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006df2:	e853 3f00 	ldrex	r3, [r3]
 8006df6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006df8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dfa:	f023 0310 	bic.w	r3, r3, #16
 8006dfe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	330c      	adds	r3, #12
 8006e08:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006e0c:	65ba      	str	r2, [r7, #88]	; 0x58
 8006e0e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e14:	e841 2300 	strex	r3, r2, [r1]
 8006e18:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006e1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d1e3      	bne.n	8006de8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e24:	4618      	mov	r0, r3
 8006e26:	f7fb fc2d 	bl	8002684 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2202      	movs	r2, #2
 8006e2e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	1ad3      	subs	r3, r2, r3
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	4619      	mov	r1, r3
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 f8b7 	bl	8006fb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006e46:	e09b      	b.n	8006f80 <HAL_UART_IRQHandler+0x518>
 8006e48:	08007107 	.word	0x08007107
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	1ad3      	subs	r3, r2, r3
 8006e58:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	f000 808e 	beq.w	8006f84 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006e68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	f000 8089 	beq.w	8006f84 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	330c      	adds	r3, #12
 8006e78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e7c:	e853 3f00 	ldrex	r3, [r3]
 8006e80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	330c      	adds	r3, #12
 8006e92:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006e96:	647a      	str	r2, [r7, #68]	; 0x44
 8006e98:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e9e:	e841 2300 	strex	r3, r2, [r1]
 8006ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d1e3      	bne.n	8006e72 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	3314      	adds	r3, #20
 8006eb0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb4:	e853 3f00 	ldrex	r3, [r3]
 8006eb8:	623b      	str	r3, [r7, #32]
   return(result);
 8006eba:	6a3b      	ldr	r3, [r7, #32]
 8006ebc:	f023 0301 	bic.w	r3, r3, #1
 8006ec0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	3314      	adds	r3, #20
 8006eca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006ece:	633a      	str	r2, [r7, #48]	; 0x30
 8006ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ed4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ed6:	e841 2300 	strex	r3, r2, [r1]
 8006eda:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d1e3      	bne.n	8006eaa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2220      	movs	r2, #32
 8006ee6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	330c      	adds	r3, #12
 8006ef6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	e853 3f00 	ldrex	r3, [r3]
 8006efe:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f023 0310 	bic.w	r3, r3, #16
 8006f06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	330c      	adds	r3, #12
 8006f10:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006f14:	61fa      	str	r2, [r7, #28]
 8006f16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f18:	69b9      	ldr	r1, [r7, #24]
 8006f1a:	69fa      	ldr	r2, [r7, #28]
 8006f1c:	e841 2300 	strex	r3, r2, [r1]
 8006f20:	617b      	str	r3, [r7, #20]
   return(result);
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d1e3      	bne.n	8006ef0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2202      	movs	r2, #2
 8006f2c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f2e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f32:	4619      	mov	r1, r3
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 f83d 	bl	8006fb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006f3a:	e023      	b.n	8006f84 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006f3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d009      	beq.n	8006f5c <HAL_UART_IRQHandler+0x4f4>
 8006f48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d003      	beq.n	8006f5c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 f8ea 	bl	800712e <UART_Transmit_IT>
    return;
 8006f5a:	e014      	b.n	8006f86 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006f5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d00e      	beq.n	8006f86 <HAL_UART_IRQHandler+0x51e>
 8006f68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d008      	beq.n	8006f86 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 f92a 	bl	80071ce <UART_EndTransmit_IT>
    return;
 8006f7a:	e004      	b.n	8006f86 <HAL_UART_IRQHandler+0x51e>
    return;
 8006f7c:	bf00      	nop
 8006f7e:	e002      	b.n	8006f86 <HAL_UART_IRQHandler+0x51e>
      return;
 8006f80:	bf00      	nop
 8006f82:	e000      	b.n	8006f86 <HAL_UART_IRQHandler+0x51e>
      return;
 8006f84:	bf00      	nop
  }
}
 8006f86:	37e8      	adds	r7, #232	; 0xe8
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006f94:	bf00      	nop
 8006f96:	370c      	adds	r7, #12
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr

08006fa0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006fa8:	bf00      	nop
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006fc0:	bf00      	nop
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b085      	sub	sp, #20
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	68ba      	ldr	r2, [r7, #8]
 8006fde:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	88fa      	ldrh	r2, [r7, #6]
 8006fe4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	88fa      	ldrh	r2, [r7, #6]
 8006fea:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2222      	movs	r2, #34	; 0x22
 8006ff6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	691b      	ldr	r3, [r3, #16]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d007      	beq.n	8007012 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	68da      	ldr	r2, [r3, #12]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007010:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	695a      	ldr	r2, [r3, #20]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f042 0201 	orr.w	r2, r2, #1
 8007020:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	68da      	ldr	r2, [r3, #12]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f042 0220 	orr.w	r2, r2, #32
 8007030:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007032:	2300      	movs	r3, #0
}
 8007034:	4618      	mov	r0, r3
 8007036:	3714      	adds	r7, #20
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007040:	b480      	push	{r7}
 8007042:	b095      	sub	sp, #84	; 0x54
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	330c      	adds	r3, #12
 800704e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007052:	e853 3f00 	ldrex	r3, [r3]
 8007056:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800705a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800705e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	330c      	adds	r3, #12
 8007066:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007068:	643a      	str	r2, [r7, #64]	; 0x40
 800706a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800706c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800706e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007070:	e841 2300 	strex	r3, r2, [r1]
 8007074:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007078:	2b00      	cmp	r3, #0
 800707a:	d1e5      	bne.n	8007048 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	3314      	adds	r3, #20
 8007082:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007084:	6a3b      	ldr	r3, [r7, #32]
 8007086:	e853 3f00 	ldrex	r3, [r3]
 800708a:	61fb      	str	r3, [r7, #28]
   return(result);
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	f023 0301 	bic.w	r3, r3, #1
 8007092:	64bb      	str	r3, [r7, #72]	; 0x48
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	3314      	adds	r3, #20
 800709a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800709c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800709e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070a4:	e841 2300 	strex	r3, r2, [r1]
 80070a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d1e5      	bne.n	800707c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d119      	bne.n	80070ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	330c      	adds	r3, #12
 80070be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	e853 3f00 	ldrex	r3, [r3]
 80070c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	f023 0310 	bic.w	r3, r3, #16
 80070ce:	647b      	str	r3, [r7, #68]	; 0x44
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	330c      	adds	r3, #12
 80070d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070d8:	61ba      	str	r2, [r7, #24]
 80070da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070dc:	6979      	ldr	r1, [r7, #20]
 80070de:	69ba      	ldr	r2, [r7, #24]
 80070e0:	e841 2300 	strex	r3, r2, [r1]
 80070e4:	613b      	str	r3, [r7, #16]
   return(result);
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d1e5      	bne.n	80070b8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2220      	movs	r2, #32
 80070f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80070fa:	bf00      	nop
 80070fc:	3754      	adds	r7, #84	; 0x54
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr

08007106 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007106:	b580      	push	{r7, lr}
 8007108:	b084      	sub	sp, #16
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007112:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2200      	movs	r2, #0
 8007118:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2200      	movs	r2, #0
 800711e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007120:	68f8      	ldr	r0, [r7, #12]
 8007122:	f7ff ff3d 	bl	8006fa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007126:	bf00      	nop
 8007128:	3710      	adds	r7, #16
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800712e:	b480      	push	{r7}
 8007130:	b085      	sub	sp, #20
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800713c:	b2db      	uxtb	r3, r3
 800713e:	2b21      	cmp	r3, #33	; 0x21
 8007140:	d13e      	bne.n	80071c0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800714a:	d114      	bne.n	8007176 <UART_Transmit_IT+0x48>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d110      	bne.n	8007176 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6a1b      	ldr	r3, [r3, #32]
 8007158:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	881b      	ldrh	r3, [r3, #0]
 800715e:	461a      	mov	r2, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007168:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a1b      	ldr	r3, [r3, #32]
 800716e:	1c9a      	adds	r2, r3, #2
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	621a      	str	r2, [r3, #32]
 8007174:	e008      	b.n	8007188 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a1b      	ldr	r3, [r3, #32]
 800717a:	1c59      	adds	r1, r3, #1
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	6211      	str	r1, [r2, #32]
 8007180:	781a      	ldrb	r2, [r3, #0]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800718c:	b29b      	uxth	r3, r3
 800718e:	3b01      	subs	r3, #1
 8007190:	b29b      	uxth	r3, r3
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	4619      	mov	r1, r3
 8007196:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007198:	2b00      	cmp	r3, #0
 800719a:	d10f      	bne.n	80071bc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68da      	ldr	r2, [r3, #12]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80071aa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	68da      	ldr	r2, [r3, #12]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071ba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80071bc:	2300      	movs	r3, #0
 80071be:	e000      	b.n	80071c2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80071c0:	2302      	movs	r3, #2
  }
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3714      	adds	r7, #20
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr

080071ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b082      	sub	sp, #8
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	68da      	ldr	r2, [r3, #12]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2220      	movs	r2, #32
 80071ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f7ff fecc 	bl	8006f8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80071f4:	2300      	movs	r3, #0
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3708      	adds	r7, #8
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b08c      	sub	sp, #48	; 0x30
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800720c:	b2db      	uxtb	r3, r3
 800720e:	2b22      	cmp	r3, #34	; 0x22
 8007210:	f040 80ae 	bne.w	8007370 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800721c:	d117      	bne.n	800724e <UART_Receive_IT+0x50>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d113      	bne.n	800724e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007226:	2300      	movs	r3, #0
 8007228:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800722e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	b29b      	uxth	r3, r3
 8007238:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800723c:	b29a      	uxth	r2, r3
 800723e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007240:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007246:	1c9a      	adds	r2, r3, #2
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	629a      	str	r2, [r3, #40]	; 0x28
 800724c:	e026      	b.n	800729c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007252:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007254:	2300      	movs	r3, #0
 8007256:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007260:	d007      	beq.n	8007272 <UART_Receive_IT+0x74>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d10a      	bne.n	8007280 <UART_Receive_IT+0x82>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	691b      	ldr	r3, [r3, #16]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d106      	bne.n	8007280 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	b2da      	uxtb	r2, r3
 800727a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800727c:	701a      	strb	r2, [r3, #0]
 800727e:	e008      	b.n	8007292 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	b2db      	uxtb	r3, r3
 8007288:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800728c:	b2da      	uxtb	r2, r3
 800728e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007290:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007296:	1c5a      	adds	r2, r3, #1
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	3b01      	subs	r3, #1
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	4619      	mov	r1, r3
 80072aa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d15d      	bne.n	800736c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	68da      	ldr	r2, [r3, #12]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f022 0220 	bic.w	r2, r2, #32
 80072be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	68da      	ldr	r2, [r3, #12]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	695a      	ldr	r2, [r3, #20]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f022 0201 	bic.w	r2, r2, #1
 80072de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2220      	movs	r2, #32
 80072e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d135      	bne.n	8007362 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	330c      	adds	r3, #12
 8007302:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	e853 3f00 	ldrex	r3, [r3]
 800730a:	613b      	str	r3, [r7, #16]
   return(result);
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	f023 0310 	bic.w	r3, r3, #16
 8007312:	627b      	str	r3, [r7, #36]	; 0x24
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	330c      	adds	r3, #12
 800731a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800731c:	623a      	str	r2, [r7, #32]
 800731e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007320:	69f9      	ldr	r1, [r7, #28]
 8007322:	6a3a      	ldr	r2, [r7, #32]
 8007324:	e841 2300 	strex	r3, r2, [r1]
 8007328:	61bb      	str	r3, [r7, #24]
   return(result);
 800732a:	69bb      	ldr	r3, [r7, #24]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d1e5      	bne.n	80072fc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f003 0310 	and.w	r3, r3, #16
 800733a:	2b10      	cmp	r3, #16
 800733c:	d10a      	bne.n	8007354 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800733e:	2300      	movs	r3, #0
 8007340:	60fb      	str	r3, [r7, #12]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	60fb      	str	r3, [r7, #12]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	60fb      	str	r3, [r7, #12]
 8007352:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007358:	4619      	mov	r1, r3
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f7ff fe2a 	bl	8006fb4 <HAL_UARTEx_RxEventCallback>
 8007360:	e002      	b.n	8007368 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f7fb f80a 	bl	800237c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007368:	2300      	movs	r3, #0
 800736a:	e002      	b.n	8007372 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800736c:	2300      	movs	r3, #0
 800736e:	e000      	b.n	8007372 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007370:	2302      	movs	r3, #2
  }
}
 8007372:	4618      	mov	r0, r3
 8007374:	3730      	adds	r7, #48	; 0x30
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
	...

0800737c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800737c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007380:	b0c0      	sub	sp, #256	; 0x100
 8007382:	af00      	add	r7, sp, #0
 8007384:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	691b      	ldr	r3, [r3, #16]
 8007390:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007398:	68d9      	ldr	r1, [r3, #12]
 800739a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	ea40 0301 	orr.w	r3, r0, r1
 80073a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80073a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073aa:	689a      	ldr	r2, [r3, #8]
 80073ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073b0:	691b      	ldr	r3, [r3, #16]
 80073b2:	431a      	orrs	r2, r3
 80073b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073b8:	695b      	ldr	r3, [r3, #20]
 80073ba:	431a      	orrs	r2, r3
 80073bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073c0:	69db      	ldr	r3, [r3, #28]
 80073c2:	4313      	orrs	r3, r2
 80073c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80073c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80073d4:	f021 010c 	bic.w	r1, r1, #12
 80073d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80073e2:	430b      	orrs	r3, r1
 80073e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80073e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	695b      	ldr	r3, [r3, #20]
 80073ee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80073f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073f6:	6999      	ldr	r1, [r3, #24]
 80073f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	ea40 0301 	orr.w	r3, r0, r1
 8007402:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	4b8f      	ldr	r3, [pc, #572]	; (8007648 <UART_SetConfig+0x2cc>)
 800740c:	429a      	cmp	r2, r3
 800740e:	d005      	beq.n	800741c <UART_SetConfig+0xa0>
 8007410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	4b8d      	ldr	r3, [pc, #564]	; (800764c <UART_SetConfig+0x2d0>)
 8007418:	429a      	cmp	r2, r3
 800741a:	d104      	bne.n	8007426 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800741c:	f7fc fe9c 	bl	8004158 <HAL_RCC_GetPCLK2Freq>
 8007420:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007424:	e003      	b.n	800742e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007426:	f7fc fe83 	bl	8004130 <HAL_RCC_GetPCLK1Freq>
 800742a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800742e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007432:	69db      	ldr	r3, [r3, #28]
 8007434:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007438:	f040 810c 	bne.w	8007654 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800743c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007440:	2200      	movs	r2, #0
 8007442:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007446:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800744a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800744e:	4622      	mov	r2, r4
 8007450:	462b      	mov	r3, r5
 8007452:	1891      	adds	r1, r2, r2
 8007454:	65b9      	str	r1, [r7, #88]	; 0x58
 8007456:	415b      	adcs	r3, r3
 8007458:	65fb      	str	r3, [r7, #92]	; 0x5c
 800745a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800745e:	4621      	mov	r1, r4
 8007460:	eb12 0801 	adds.w	r8, r2, r1
 8007464:	4629      	mov	r1, r5
 8007466:	eb43 0901 	adc.w	r9, r3, r1
 800746a:	f04f 0200 	mov.w	r2, #0
 800746e:	f04f 0300 	mov.w	r3, #0
 8007472:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007476:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800747a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800747e:	4690      	mov	r8, r2
 8007480:	4699      	mov	r9, r3
 8007482:	4623      	mov	r3, r4
 8007484:	eb18 0303 	adds.w	r3, r8, r3
 8007488:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800748c:	462b      	mov	r3, r5
 800748e:	eb49 0303 	adc.w	r3, r9, r3
 8007492:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80074a2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80074a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80074aa:	460b      	mov	r3, r1
 80074ac:	18db      	adds	r3, r3, r3
 80074ae:	653b      	str	r3, [r7, #80]	; 0x50
 80074b0:	4613      	mov	r3, r2
 80074b2:	eb42 0303 	adc.w	r3, r2, r3
 80074b6:	657b      	str	r3, [r7, #84]	; 0x54
 80074b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80074bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80074c0:	f7f9 fbd2 	bl	8000c68 <__aeabi_uldivmod>
 80074c4:	4602      	mov	r2, r0
 80074c6:	460b      	mov	r3, r1
 80074c8:	4b61      	ldr	r3, [pc, #388]	; (8007650 <UART_SetConfig+0x2d4>)
 80074ca:	fba3 2302 	umull	r2, r3, r3, r2
 80074ce:	095b      	lsrs	r3, r3, #5
 80074d0:	011c      	lsls	r4, r3, #4
 80074d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074d6:	2200      	movs	r2, #0
 80074d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80074dc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80074e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80074e4:	4642      	mov	r2, r8
 80074e6:	464b      	mov	r3, r9
 80074e8:	1891      	adds	r1, r2, r2
 80074ea:	64b9      	str	r1, [r7, #72]	; 0x48
 80074ec:	415b      	adcs	r3, r3
 80074ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80074f4:	4641      	mov	r1, r8
 80074f6:	eb12 0a01 	adds.w	sl, r2, r1
 80074fa:	4649      	mov	r1, r9
 80074fc:	eb43 0b01 	adc.w	fp, r3, r1
 8007500:	f04f 0200 	mov.w	r2, #0
 8007504:	f04f 0300 	mov.w	r3, #0
 8007508:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800750c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007510:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007514:	4692      	mov	sl, r2
 8007516:	469b      	mov	fp, r3
 8007518:	4643      	mov	r3, r8
 800751a:	eb1a 0303 	adds.w	r3, sl, r3
 800751e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007522:	464b      	mov	r3, r9
 8007524:	eb4b 0303 	adc.w	r3, fp, r3
 8007528:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800752c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007538:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800753c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007540:	460b      	mov	r3, r1
 8007542:	18db      	adds	r3, r3, r3
 8007544:	643b      	str	r3, [r7, #64]	; 0x40
 8007546:	4613      	mov	r3, r2
 8007548:	eb42 0303 	adc.w	r3, r2, r3
 800754c:	647b      	str	r3, [r7, #68]	; 0x44
 800754e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007552:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007556:	f7f9 fb87 	bl	8000c68 <__aeabi_uldivmod>
 800755a:	4602      	mov	r2, r0
 800755c:	460b      	mov	r3, r1
 800755e:	4611      	mov	r1, r2
 8007560:	4b3b      	ldr	r3, [pc, #236]	; (8007650 <UART_SetConfig+0x2d4>)
 8007562:	fba3 2301 	umull	r2, r3, r3, r1
 8007566:	095b      	lsrs	r3, r3, #5
 8007568:	2264      	movs	r2, #100	; 0x64
 800756a:	fb02 f303 	mul.w	r3, r2, r3
 800756e:	1acb      	subs	r3, r1, r3
 8007570:	00db      	lsls	r3, r3, #3
 8007572:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007576:	4b36      	ldr	r3, [pc, #216]	; (8007650 <UART_SetConfig+0x2d4>)
 8007578:	fba3 2302 	umull	r2, r3, r3, r2
 800757c:	095b      	lsrs	r3, r3, #5
 800757e:	005b      	lsls	r3, r3, #1
 8007580:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007584:	441c      	add	r4, r3
 8007586:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800758a:	2200      	movs	r2, #0
 800758c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007590:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007594:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007598:	4642      	mov	r2, r8
 800759a:	464b      	mov	r3, r9
 800759c:	1891      	adds	r1, r2, r2
 800759e:	63b9      	str	r1, [r7, #56]	; 0x38
 80075a0:	415b      	adcs	r3, r3
 80075a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80075a8:	4641      	mov	r1, r8
 80075aa:	1851      	adds	r1, r2, r1
 80075ac:	6339      	str	r1, [r7, #48]	; 0x30
 80075ae:	4649      	mov	r1, r9
 80075b0:	414b      	adcs	r3, r1
 80075b2:	637b      	str	r3, [r7, #52]	; 0x34
 80075b4:	f04f 0200 	mov.w	r2, #0
 80075b8:	f04f 0300 	mov.w	r3, #0
 80075bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80075c0:	4659      	mov	r1, fp
 80075c2:	00cb      	lsls	r3, r1, #3
 80075c4:	4651      	mov	r1, sl
 80075c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075ca:	4651      	mov	r1, sl
 80075cc:	00ca      	lsls	r2, r1, #3
 80075ce:	4610      	mov	r0, r2
 80075d0:	4619      	mov	r1, r3
 80075d2:	4603      	mov	r3, r0
 80075d4:	4642      	mov	r2, r8
 80075d6:	189b      	adds	r3, r3, r2
 80075d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80075dc:	464b      	mov	r3, r9
 80075de:	460a      	mov	r2, r1
 80075e0:	eb42 0303 	adc.w	r3, r2, r3
 80075e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80075e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80075f4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80075f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80075fc:	460b      	mov	r3, r1
 80075fe:	18db      	adds	r3, r3, r3
 8007600:	62bb      	str	r3, [r7, #40]	; 0x28
 8007602:	4613      	mov	r3, r2
 8007604:	eb42 0303 	adc.w	r3, r2, r3
 8007608:	62fb      	str	r3, [r7, #44]	; 0x2c
 800760a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800760e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007612:	f7f9 fb29 	bl	8000c68 <__aeabi_uldivmod>
 8007616:	4602      	mov	r2, r0
 8007618:	460b      	mov	r3, r1
 800761a:	4b0d      	ldr	r3, [pc, #52]	; (8007650 <UART_SetConfig+0x2d4>)
 800761c:	fba3 1302 	umull	r1, r3, r3, r2
 8007620:	095b      	lsrs	r3, r3, #5
 8007622:	2164      	movs	r1, #100	; 0x64
 8007624:	fb01 f303 	mul.w	r3, r1, r3
 8007628:	1ad3      	subs	r3, r2, r3
 800762a:	00db      	lsls	r3, r3, #3
 800762c:	3332      	adds	r3, #50	; 0x32
 800762e:	4a08      	ldr	r2, [pc, #32]	; (8007650 <UART_SetConfig+0x2d4>)
 8007630:	fba2 2303 	umull	r2, r3, r2, r3
 8007634:	095b      	lsrs	r3, r3, #5
 8007636:	f003 0207 	and.w	r2, r3, #7
 800763a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4422      	add	r2, r4
 8007642:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007644:	e106      	b.n	8007854 <UART_SetConfig+0x4d8>
 8007646:	bf00      	nop
 8007648:	40011000 	.word	0x40011000
 800764c:	40011400 	.word	0x40011400
 8007650:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007654:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007658:	2200      	movs	r2, #0
 800765a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800765e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007662:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007666:	4642      	mov	r2, r8
 8007668:	464b      	mov	r3, r9
 800766a:	1891      	adds	r1, r2, r2
 800766c:	6239      	str	r1, [r7, #32]
 800766e:	415b      	adcs	r3, r3
 8007670:	627b      	str	r3, [r7, #36]	; 0x24
 8007672:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007676:	4641      	mov	r1, r8
 8007678:	1854      	adds	r4, r2, r1
 800767a:	4649      	mov	r1, r9
 800767c:	eb43 0501 	adc.w	r5, r3, r1
 8007680:	f04f 0200 	mov.w	r2, #0
 8007684:	f04f 0300 	mov.w	r3, #0
 8007688:	00eb      	lsls	r3, r5, #3
 800768a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800768e:	00e2      	lsls	r2, r4, #3
 8007690:	4614      	mov	r4, r2
 8007692:	461d      	mov	r5, r3
 8007694:	4643      	mov	r3, r8
 8007696:	18e3      	adds	r3, r4, r3
 8007698:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800769c:	464b      	mov	r3, r9
 800769e:	eb45 0303 	adc.w	r3, r5, r3
 80076a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80076a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80076b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80076b6:	f04f 0200 	mov.w	r2, #0
 80076ba:	f04f 0300 	mov.w	r3, #0
 80076be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80076c2:	4629      	mov	r1, r5
 80076c4:	008b      	lsls	r3, r1, #2
 80076c6:	4621      	mov	r1, r4
 80076c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076cc:	4621      	mov	r1, r4
 80076ce:	008a      	lsls	r2, r1, #2
 80076d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80076d4:	f7f9 fac8 	bl	8000c68 <__aeabi_uldivmod>
 80076d8:	4602      	mov	r2, r0
 80076da:	460b      	mov	r3, r1
 80076dc:	4b60      	ldr	r3, [pc, #384]	; (8007860 <UART_SetConfig+0x4e4>)
 80076de:	fba3 2302 	umull	r2, r3, r3, r2
 80076e2:	095b      	lsrs	r3, r3, #5
 80076e4:	011c      	lsls	r4, r3, #4
 80076e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076ea:	2200      	movs	r2, #0
 80076ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80076f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80076f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80076f8:	4642      	mov	r2, r8
 80076fa:	464b      	mov	r3, r9
 80076fc:	1891      	adds	r1, r2, r2
 80076fe:	61b9      	str	r1, [r7, #24]
 8007700:	415b      	adcs	r3, r3
 8007702:	61fb      	str	r3, [r7, #28]
 8007704:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007708:	4641      	mov	r1, r8
 800770a:	1851      	adds	r1, r2, r1
 800770c:	6139      	str	r1, [r7, #16]
 800770e:	4649      	mov	r1, r9
 8007710:	414b      	adcs	r3, r1
 8007712:	617b      	str	r3, [r7, #20]
 8007714:	f04f 0200 	mov.w	r2, #0
 8007718:	f04f 0300 	mov.w	r3, #0
 800771c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007720:	4659      	mov	r1, fp
 8007722:	00cb      	lsls	r3, r1, #3
 8007724:	4651      	mov	r1, sl
 8007726:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800772a:	4651      	mov	r1, sl
 800772c:	00ca      	lsls	r2, r1, #3
 800772e:	4610      	mov	r0, r2
 8007730:	4619      	mov	r1, r3
 8007732:	4603      	mov	r3, r0
 8007734:	4642      	mov	r2, r8
 8007736:	189b      	adds	r3, r3, r2
 8007738:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800773c:	464b      	mov	r3, r9
 800773e:	460a      	mov	r2, r1
 8007740:	eb42 0303 	adc.w	r3, r2, r3
 8007744:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	67bb      	str	r3, [r7, #120]	; 0x78
 8007752:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007754:	f04f 0200 	mov.w	r2, #0
 8007758:	f04f 0300 	mov.w	r3, #0
 800775c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007760:	4649      	mov	r1, r9
 8007762:	008b      	lsls	r3, r1, #2
 8007764:	4641      	mov	r1, r8
 8007766:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800776a:	4641      	mov	r1, r8
 800776c:	008a      	lsls	r2, r1, #2
 800776e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007772:	f7f9 fa79 	bl	8000c68 <__aeabi_uldivmod>
 8007776:	4602      	mov	r2, r0
 8007778:	460b      	mov	r3, r1
 800777a:	4611      	mov	r1, r2
 800777c:	4b38      	ldr	r3, [pc, #224]	; (8007860 <UART_SetConfig+0x4e4>)
 800777e:	fba3 2301 	umull	r2, r3, r3, r1
 8007782:	095b      	lsrs	r3, r3, #5
 8007784:	2264      	movs	r2, #100	; 0x64
 8007786:	fb02 f303 	mul.w	r3, r2, r3
 800778a:	1acb      	subs	r3, r1, r3
 800778c:	011b      	lsls	r3, r3, #4
 800778e:	3332      	adds	r3, #50	; 0x32
 8007790:	4a33      	ldr	r2, [pc, #204]	; (8007860 <UART_SetConfig+0x4e4>)
 8007792:	fba2 2303 	umull	r2, r3, r2, r3
 8007796:	095b      	lsrs	r3, r3, #5
 8007798:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800779c:	441c      	add	r4, r3
 800779e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077a2:	2200      	movs	r2, #0
 80077a4:	673b      	str	r3, [r7, #112]	; 0x70
 80077a6:	677a      	str	r2, [r7, #116]	; 0x74
 80077a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80077ac:	4642      	mov	r2, r8
 80077ae:	464b      	mov	r3, r9
 80077b0:	1891      	adds	r1, r2, r2
 80077b2:	60b9      	str	r1, [r7, #8]
 80077b4:	415b      	adcs	r3, r3
 80077b6:	60fb      	str	r3, [r7, #12]
 80077b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80077bc:	4641      	mov	r1, r8
 80077be:	1851      	adds	r1, r2, r1
 80077c0:	6039      	str	r1, [r7, #0]
 80077c2:	4649      	mov	r1, r9
 80077c4:	414b      	adcs	r3, r1
 80077c6:	607b      	str	r3, [r7, #4]
 80077c8:	f04f 0200 	mov.w	r2, #0
 80077cc:	f04f 0300 	mov.w	r3, #0
 80077d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80077d4:	4659      	mov	r1, fp
 80077d6:	00cb      	lsls	r3, r1, #3
 80077d8:	4651      	mov	r1, sl
 80077da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80077de:	4651      	mov	r1, sl
 80077e0:	00ca      	lsls	r2, r1, #3
 80077e2:	4610      	mov	r0, r2
 80077e4:	4619      	mov	r1, r3
 80077e6:	4603      	mov	r3, r0
 80077e8:	4642      	mov	r2, r8
 80077ea:	189b      	adds	r3, r3, r2
 80077ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80077ee:	464b      	mov	r3, r9
 80077f0:	460a      	mov	r2, r1
 80077f2:	eb42 0303 	adc.w	r3, r2, r3
 80077f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80077f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	663b      	str	r3, [r7, #96]	; 0x60
 8007802:	667a      	str	r2, [r7, #100]	; 0x64
 8007804:	f04f 0200 	mov.w	r2, #0
 8007808:	f04f 0300 	mov.w	r3, #0
 800780c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007810:	4649      	mov	r1, r9
 8007812:	008b      	lsls	r3, r1, #2
 8007814:	4641      	mov	r1, r8
 8007816:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800781a:	4641      	mov	r1, r8
 800781c:	008a      	lsls	r2, r1, #2
 800781e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007822:	f7f9 fa21 	bl	8000c68 <__aeabi_uldivmod>
 8007826:	4602      	mov	r2, r0
 8007828:	460b      	mov	r3, r1
 800782a:	4b0d      	ldr	r3, [pc, #52]	; (8007860 <UART_SetConfig+0x4e4>)
 800782c:	fba3 1302 	umull	r1, r3, r3, r2
 8007830:	095b      	lsrs	r3, r3, #5
 8007832:	2164      	movs	r1, #100	; 0x64
 8007834:	fb01 f303 	mul.w	r3, r1, r3
 8007838:	1ad3      	subs	r3, r2, r3
 800783a:	011b      	lsls	r3, r3, #4
 800783c:	3332      	adds	r3, #50	; 0x32
 800783e:	4a08      	ldr	r2, [pc, #32]	; (8007860 <UART_SetConfig+0x4e4>)
 8007840:	fba2 2303 	umull	r2, r3, r2, r3
 8007844:	095b      	lsrs	r3, r3, #5
 8007846:	f003 020f 	and.w	r2, r3, #15
 800784a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4422      	add	r2, r4
 8007852:	609a      	str	r2, [r3, #8]
}
 8007854:	bf00      	nop
 8007856:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800785a:	46bd      	mov	sp, r7
 800785c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007860:	51eb851f 	.word	0x51eb851f

08007864 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007864:	b580      	push	{r7, lr}
 8007866:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007868:	4b05      	ldr	r3, [pc, #20]	; (8007880 <SysTick_Handler+0x1c>)
 800786a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800786c:	f001 fcaa 	bl	80091c4 <xTaskGetSchedulerState>
 8007870:	4603      	mov	r3, r0
 8007872:	2b01      	cmp	r3, #1
 8007874:	d001      	beq.n	800787a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007876:	f002 fa8f 	bl	8009d98 <xPortSysTickHandler>
  }
}
 800787a:	bf00      	nop
 800787c:	bd80      	pop	{r7, pc}
 800787e:	bf00      	nop
 8007880:	e000e010 	.word	0xe000e010

08007884 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007884:	b480      	push	{r7}
 8007886:	b085      	sub	sp, #20
 8007888:	af00      	add	r7, sp, #0
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	60b9      	str	r1, [r7, #8]
 800788e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	4a07      	ldr	r2, [pc, #28]	; (80078b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8007894:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	4a06      	ldr	r2, [pc, #24]	; (80078b4 <vApplicationGetIdleTaskMemory+0x30>)
 800789a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2280      	movs	r2, #128	; 0x80
 80078a0:	601a      	str	r2, [r3, #0]
}
 80078a2:	bf00      	nop
 80078a4:	3714      	adds	r7, #20
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr
 80078ae:	bf00      	nop
 80078b0:	20000550 	.word	0x20000550
 80078b4:	200005f8 	.word	0x200005f8

080078b8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80078b8:	b480      	push	{r7}
 80078ba:	b085      	sub	sp, #20
 80078bc:	af00      	add	r7, sp, #0
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	60b9      	str	r1, [r7, #8]
 80078c2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	4a07      	ldr	r2, [pc, #28]	; (80078e4 <vApplicationGetTimerTaskMemory+0x2c>)
 80078c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	4a06      	ldr	r2, [pc, #24]	; (80078e8 <vApplicationGetTimerTaskMemory+0x30>)
 80078ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80078d6:	601a      	str	r2, [r3, #0]
}
 80078d8:	bf00      	nop
 80078da:	3714      	adds	r7, #20
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr
 80078e4:	200007f8 	.word	0x200007f8
 80078e8:	200008a0 	.word	0x200008a0

080078ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f103 0208 	add.w	r2, r3, #8
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f04f 32ff 	mov.w	r2, #4294967295
 8007904:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f103 0208 	add.w	r2, r3, #8
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f103 0208 	add.w	r2, r3, #8
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007920:	bf00      	nop
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800793a:	bf00      	nop
 800793c:	370c      	adds	r7, #12
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr

08007946 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007946:	b480      	push	{r7}
 8007948:	b085      	sub	sp, #20
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
 800794e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	68fa      	ldr	r2, [r7, #12]
 800795a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	689a      	ldr	r2, [r3, #8]
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	683a      	ldr	r2, [r7, #0]
 800796a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	683a      	ldr	r2, [r7, #0]
 8007970:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	1c5a      	adds	r2, r3, #1
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	601a      	str	r2, [r3, #0]
}
 8007982:	bf00      	nop
 8007984:	3714      	adds	r7, #20
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr

0800798e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800798e:	b480      	push	{r7}
 8007990:	b085      	sub	sp, #20
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
 8007996:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079a4:	d103      	bne.n	80079ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	691b      	ldr	r3, [r3, #16]
 80079aa:	60fb      	str	r3, [r7, #12]
 80079ac:	e00c      	b.n	80079c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	3308      	adds	r3, #8
 80079b2:	60fb      	str	r3, [r7, #12]
 80079b4:	e002      	b.n	80079bc <vListInsert+0x2e>
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	60fb      	str	r3, [r7, #12]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	68ba      	ldr	r2, [r7, #8]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d2f6      	bcs.n	80079b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	685a      	ldr	r2, [r3, #4]
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	683a      	ldr	r2, [r7, #0]
 80079d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	68fa      	ldr	r2, [r7, #12]
 80079dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	683a      	ldr	r2, [r7, #0]
 80079e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	687a      	ldr	r2, [r7, #4]
 80079e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	1c5a      	adds	r2, r3, #1
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	601a      	str	r2, [r3, #0]
}
 80079f4:	bf00      	nop
 80079f6:	3714      	adds	r7, #20
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007a00:	b480      	push	{r7}
 8007a02:	b085      	sub	sp, #20
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	691b      	ldr	r3, [r3, #16]
 8007a0c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	6892      	ldr	r2, [r2, #8]
 8007a16:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	687a      	ldr	r2, [r7, #4]
 8007a1e:	6852      	ldr	r2, [r2, #4]
 8007a20:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d103      	bne.n	8007a34 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	689a      	ldr	r2, [r3, #8]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	1e5a      	subs	r2, r3, #1
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3714      	adds	r7, #20
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d10a      	bne.n	8007a7e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a6c:	f383 8811 	msr	BASEPRI, r3
 8007a70:	f3bf 8f6f 	isb	sy
 8007a74:	f3bf 8f4f 	dsb	sy
 8007a78:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007a7a:	bf00      	nop
 8007a7c:	e7fe      	b.n	8007a7c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007a7e:	f002 f8f9 	bl	8009c74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a8a:	68f9      	ldr	r1, [r7, #12]
 8007a8c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007a8e:	fb01 f303 	mul.w	r3, r1, r3
 8007a92:	441a      	add	r2, r3
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aae:	3b01      	subs	r3, #1
 8007ab0:	68f9      	ldr	r1, [r7, #12]
 8007ab2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007ab4:	fb01 f303 	mul.w	r3, r1, r3
 8007ab8:	441a      	add	r2, r3
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	22ff      	movs	r2, #255	; 0xff
 8007ac2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	22ff      	movs	r2, #255	; 0xff
 8007aca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d114      	bne.n	8007afe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	691b      	ldr	r3, [r3, #16]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d01a      	beq.n	8007b12 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	3310      	adds	r3, #16
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f001 f9ad 	bl	8008e40 <xTaskRemoveFromEventList>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d012      	beq.n	8007b12 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007aec:	4b0c      	ldr	r3, [pc, #48]	; (8007b20 <xQueueGenericReset+0xcc>)
 8007aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007af2:	601a      	str	r2, [r3, #0]
 8007af4:	f3bf 8f4f 	dsb	sy
 8007af8:	f3bf 8f6f 	isb	sy
 8007afc:	e009      	b.n	8007b12 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	3310      	adds	r3, #16
 8007b02:	4618      	mov	r0, r3
 8007b04:	f7ff fef2 	bl	80078ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	3324      	adds	r3, #36	; 0x24
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f7ff feed 	bl	80078ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007b12:	f002 f8df 	bl	8009cd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007b16:	2301      	movs	r3, #1
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3710      	adds	r7, #16
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}
 8007b20:	e000ed04 	.word	0xe000ed04

08007b24 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b08e      	sub	sp, #56	; 0x38
 8007b28:	af02      	add	r7, sp, #8
 8007b2a:	60f8      	str	r0, [r7, #12]
 8007b2c:	60b9      	str	r1, [r7, #8]
 8007b2e:	607a      	str	r2, [r7, #4]
 8007b30:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d10a      	bne.n	8007b4e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3c:	f383 8811 	msr	BASEPRI, r3
 8007b40:	f3bf 8f6f 	isb	sy
 8007b44:	f3bf 8f4f 	dsb	sy
 8007b48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007b4a:	bf00      	nop
 8007b4c:	e7fe      	b.n	8007b4c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d10a      	bne.n	8007b6a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b58:	f383 8811 	msr	BASEPRI, r3
 8007b5c:	f3bf 8f6f 	isb	sy
 8007b60:	f3bf 8f4f 	dsb	sy
 8007b64:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007b66:	bf00      	nop
 8007b68:	e7fe      	b.n	8007b68 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d002      	beq.n	8007b76 <xQueueGenericCreateStatic+0x52>
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d001      	beq.n	8007b7a <xQueueGenericCreateStatic+0x56>
 8007b76:	2301      	movs	r3, #1
 8007b78:	e000      	b.n	8007b7c <xQueueGenericCreateStatic+0x58>
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d10a      	bne.n	8007b96 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b84:	f383 8811 	msr	BASEPRI, r3
 8007b88:	f3bf 8f6f 	isb	sy
 8007b8c:	f3bf 8f4f 	dsb	sy
 8007b90:	623b      	str	r3, [r7, #32]
}
 8007b92:	bf00      	nop
 8007b94:	e7fe      	b.n	8007b94 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d102      	bne.n	8007ba2 <xQueueGenericCreateStatic+0x7e>
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d101      	bne.n	8007ba6 <xQueueGenericCreateStatic+0x82>
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	e000      	b.n	8007ba8 <xQueueGenericCreateStatic+0x84>
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d10a      	bne.n	8007bc2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb0:	f383 8811 	msr	BASEPRI, r3
 8007bb4:	f3bf 8f6f 	isb	sy
 8007bb8:	f3bf 8f4f 	dsb	sy
 8007bbc:	61fb      	str	r3, [r7, #28]
}
 8007bbe:	bf00      	nop
 8007bc0:	e7fe      	b.n	8007bc0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007bc2:	2350      	movs	r3, #80	; 0x50
 8007bc4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	2b50      	cmp	r3, #80	; 0x50
 8007bca:	d00a      	beq.n	8007be2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd0:	f383 8811 	msr	BASEPRI, r3
 8007bd4:	f3bf 8f6f 	isb	sy
 8007bd8:	f3bf 8f4f 	dsb	sy
 8007bdc:	61bb      	str	r3, [r7, #24]
}
 8007bde:	bf00      	nop
 8007be0:	e7fe      	b.n	8007be0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007be2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d00d      	beq.n	8007c0a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007bf6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bfc:	9300      	str	r3, [sp, #0]
 8007bfe:	4613      	mov	r3, r2
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	68b9      	ldr	r1, [r7, #8]
 8007c04:	68f8      	ldr	r0, [r7, #12]
 8007c06:	f000 f83f 	bl	8007c88 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3730      	adds	r7, #48	; 0x30
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b08a      	sub	sp, #40	; 0x28
 8007c18:	af02      	add	r7, sp, #8
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	4613      	mov	r3, r2
 8007c20:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d10a      	bne.n	8007c3e <xQueueGenericCreate+0x2a>
	__asm volatile
 8007c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c2c:	f383 8811 	msr	BASEPRI, r3
 8007c30:	f3bf 8f6f 	isb	sy
 8007c34:	f3bf 8f4f 	dsb	sy
 8007c38:	613b      	str	r3, [r7, #16]
}
 8007c3a:	bf00      	nop
 8007c3c:	e7fe      	b.n	8007c3c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	68ba      	ldr	r2, [r7, #8]
 8007c42:	fb02 f303 	mul.w	r3, r2, r3
 8007c46:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007c48:	69fb      	ldr	r3, [r7, #28]
 8007c4a:	3350      	adds	r3, #80	; 0x50
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f002 f933 	bl	8009eb8 <pvPortMalloc>
 8007c52:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007c54:	69bb      	ldr	r3, [r7, #24]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d011      	beq.n	8007c7e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007c5a:	69bb      	ldr	r3, [r7, #24]
 8007c5c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	3350      	adds	r3, #80	; 0x50
 8007c62:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007c64:	69bb      	ldr	r3, [r7, #24]
 8007c66:	2200      	movs	r2, #0
 8007c68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007c6c:	79fa      	ldrb	r2, [r7, #7]
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	9300      	str	r3, [sp, #0]
 8007c72:	4613      	mov	r3, r2
 8007c74:	697a      	ldr	r2, [r7, #20]
 8007c76:	68b9      	ldr	r1, [r7, #8]
 8007c78:	68f8      	ldr	r0, [r7, #12]
 8007c7a:	f000 f805 	bl	8007c88 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007c7e:	69bb      	ldr	r3, [r7, #24]
	}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3720      	adds	r7, #32
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	60f8      	str	r0, [r7, #12]
 8007c90:	60b9      	str	r1, [r7, #8]
 8007c92:	607a      	str	r2, [r7, #4]
 8007c94:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d103      	bne.n	8007ca4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007c9c:	69bb      	ldr	r3, [r7, #24]
 8007c9e:	69ba      	ldr	r2, [r7, #24]
 8007ca0:	601a      	str	r2, [r3, #0]
 8007ca2:	e002      	b.n	8007caa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007ca4:	69bb      	ldr	r3, [r7, #24]
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007cb0:	69bb      	ldr	r3, [r7, #24]
 8007cb2:	68ba      	ldr	r2, [r7, #8]
 8007cb4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007cb6:	2101      	movs	r1, #1
 8007cb8:	69b8      	ldr	r0, [r7, #24]
 8007cba:	f7ff fecb 	bl	8007a54 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007cbe:	69bb      	ldr	r3, [r7, #24]
 8007cc0:	78fa      	ldrb	r2, [r7, #3]
 8007cc2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007cc6:	bf00      	nop
 8007cc8:	3710      	adds	r7, #16
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
	...

08007cd0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b08e      	sub	sp, #56	; 0x38
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	60b9      	str	r1, [r7, #8]
 8007cda:	607a      	str	r2, [r7, #4]
 8007cdc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d10a      	bne.n	8007d02 <xQueueGenericSend+0x32>
	__asm volatile
 8007cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf0:	f383 8811 	msr	BASEPRI, r3
 8007cf4:	f3bf 8f6f 	isb	sy
 8007cf8:	f3bf 8f4f 	dsb	sy
 8007cfc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007cfe:	bf00      	nop
 8007d00:	e7fe      	b.n	8007d00 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d103      	bne.n	8007d10 <xQueueGenericSend+0x40>
 8007d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d101      	bne.n	8007d14 <xQueueGenericSend+0x44>
 8007d10:	2301      	movs	r3, #1
 8007d12:	e000      	b.n	8007d16 <xQueueGenericSend+0x46>
 8007d14:	2300      	movs	r3, #0
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d10a      	bne.n	8007d30 <xQueueGenericSend+0x60>
	__asm volatile
 8007d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d1e:	f383 8811 	msr	BASEPRI, r3
 8007d22:	f3bf 8f6f 	isb	sy
 8007d26:	f3bf 8f4f 	dsb	sy
 8007d2a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007d2c:	bf00      	nop
 8007d2e:	e7fe      	b.n	8007d2e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	2b02      	cmp	r3, #2
 8007d34:	d103      	bne.n	8007d3e <xQueueGenericSend+0x6e>
 8007d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d101      	bne.n	8007d42 <xQueueGenericSend+0x72>
 8007d3e:	2301      	movs	r3, #1
 8007d40:	e000      	b.n	8007d44 <xQueueGenericSend+0x74>
 8007d42:	2300      	movs	r3, #0
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d10a      	bne.n	8007d5e <xQueueGenericSend+0x8e>
	__asm volatile
 8007d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d4c:	f383 8811 	msr	BASEPRI, r3
 8007d50:	f3bf 8f6f 	isb	sy
 8007d54:	f3bf 8f4f 	dsb	sy
 8007d58:	623b      	str	r3, [r7, #32]
}
 8007d5a:	bf00      	nop
 8007d5c:	e7fe      	b.n	8007d5c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d5e:	f001 fa31 	bl	80091c4 <xTaskGetSchedulerState>
 8007d62:	4603      	mov	r3, r0
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d102      	bne.n	8007d6e <xQueueGenericSend+0x9e>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d101      	bne.n	8007d72 <xQueueGenericSend+0xa2>
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e000      	b.n	8007d74 <xQueueGenericSend+0xa4>
 8007d72:	2300      	movs	r3, #0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d10a      	bne.n	8007d8e <xQueueGenericSend+0xbe>
	__asm volatile
 8007d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d7c:	f383 8811 	msr	BASEPRI, r3
 8007d80:	f3bf 8f6f 	isb	sy
 8007d84:	f3bf 8f4f 	dsb	sy
 8007d88:	61fb      	str	r3, [r7, #28]
}
 8007d8a:	bf00      	nop
 8007d8c:	e7fe      	b.n	8007d8c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d8e:	f001 ff71 	bl	8009c74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d302      	bcc.n	8007da4 <xQueueGenericSend+0xd4>
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	2b02      	cmp	r3, #2
 8007da2:	d129      	bne.n	8007df8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007da4:	683a      	ldr	r2, [r7, #0]
 8007da6:	68b9      	ldr	r1, [r7, #8]
 8007da8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007daa:	f000 fa0b 	bl	80081c4 <prvCopyDataToQueue>
 8007dae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d010      	beq.n	8007dda <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dba:	3324      	adds	r3, #36	; 0x24
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f001 f83f 	bl	8008e40 <xTaskRemoveFromEventList>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d013      	beq.n	8007df0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007dc8:	4b3f      	ldr	r3, [pc, #252]	; (8007ec8 <xQueueGenericSend+0x1f8>)
 8007dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dce:	601a      	str	r2, [r3, #0]
 8007dd0:	f3bf 8f4f 	dsb	sy
 8007dd4:	f3bf 8f6f 	isb	sy
 8007dd8:	e00a      	b.n	8007df0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d007      	beq.n	8007df0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007de0:	4b39      	ldr	r3, [pc, #228]	; (8007ec8 <xQueueGenericSend+0x1f8>)
 8007de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007de6:	601a      	str	r2, [r3, #0]
 8007de8:	f3bf 8f4f 	dsb	sy
 8007dec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007df0:	f001 ff70 	bl	8009cd4 <vPortExitCritical>
				return pdPASS;
 8007df4:	2301      	movs	r3, #1
 8007df6:	e063      	b.n	8007ec0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d103      	bne.n	8007e06 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007dfe:	f001 ff69 	bl	8009cd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007e02:	2300      	movs	r3, #0
 8007e04:	e05c      	b.n	8007ec0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d106      	bne.n	8007e1a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e0c:	f107 0314 	add.w	r3, r7, #20
 8007e10:	4618      	mov	r0, r3
 8007e12:	f001 f879 	bl	8008f08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e16:	2301      	movs	r3, #1
 8007e18:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e1a:	f001 ff5b 	bl	8009cd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e1e:	f000 fde5 	bl	80089ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e22:	f001 ff27 	bl	8009c74 <vPortEnterCritical>
 8007e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e2c:	b25b      	sxtb	r3, r3
 8007e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e32:	d103      	bne.n	8007e3c <xQueueGenericSend+0x16c>
 8007e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e36:	2200      	movs	r2, #0
 8007e38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e42:	b25b      	sxtb	r3, r3
 8007e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e48:	d103      	bne.n	8007e52 <xQueueGenericSend+0x182>
 8007e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e52:	f001 ff3f 	bl	8009cd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e56:	1d3a      	adds	r2, r7, #4
 8007e58:	f107 0314 	add.w	r3, r7, #20
 8007e5c:	4611      	mov	r1, r2
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f001 f868 	bl	8008f34 <xTaskCheckForTimeOut>
 8007e64:	4603      	mov	r3, r0
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d124      	bne.n	8007eb4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007e6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e6c:	f000 faa2 	bl	80083b4 <prvIsQueueFull>
 8007e70:	4603      	mov	r3, r0
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d018      	beq.n	8007ea8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e78:	3310      	adds	r3, #16
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	4611      	mov	r1, r2
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f000 ff8e 	bl	8008da0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007e84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e86:	f000 fa2d 	bl	80082e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007e8a:	f000 fdbd 	bl	8008a08 <xTaskResumeAll>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	f47f af7c 	bne.w	8007d8e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007e96:	4b0c      	ldr	r3, [pc, #48]	; (8007ec8 <xQueueGenericSend+0x1f8>)
 8007e98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e9c:	601a      	str	r2, [r3, #0]
 8007e9e:	f3bf 8f4f 	dsb	sy
 8007ea2:	f3bf 8f6f 	isb	sy
 8007ea6:	e772      	b.n	8007d8e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007ea8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007eaa:	f000 fa1b 	bl	80082e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007eae:	f000 fdab 	bl	8008a08 <xTaskResumeAll>
 8007eb2:	e76c      	b.n	8007d8e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007eb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007eb6:	f000 fa15 	bl	80082e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007eba:	f000 fda5 	bl	8008a08 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007ebe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3738      	adds	r7, #56	; 0x38
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}
 8007ec8:	e000ed04 	.word	0xe000ed04

08007ecc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b090      	sub	sp, #64	; 0x40
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	60b9      	str	r1, [r7, #8]
 8007ed6:	607a      	str	r2, [r7, #4]
 8007ed8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d10a      	bne.n	8007efa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee8:	f383 8811 	msr	BASEPRI, r3
 8007eec:	f3bf 8f6f 	isb	sy
 8007ef0:	f3bf 8f4f 	dsb	sy
 8007ef4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007ef6:	bf00      	nop
 8007ef8:	e7fe      	b.n	8007ef8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d103      	bne.n	8007f08 <xQueueGenericSendFromISR+0x3c>
 8007f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d101      	bne.n	8007f0c <xQueueGenericSendFromISR+0x40>
 8007f08:	2301      	movs	r3, #1
 8007f0a:	e000      	b.n	8007f0e <xQueueGenericSendFromISR+0x42>
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d10a      	bne.n	8007f28 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f16:	f383 8811 	msr	BASEPRI, r3
 8007f1a:	f3bf 8f6f 	isb	sy
 8007f1e:	f3bf 8f4f 	dsb	sy
 8007f22:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007f24:	bf00      	nop
 8007f26:	e7fe      	b.n	8007f26 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	2b02      	cmp	r3, #2
 8007f2c:	d103      	bne.n	8007f36 <xQueueGenericSendFromISR+0x6a>
 8007f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d101      	bne.n	8007f3a <xQueueGenericSendFromISR+0x6e>
 8007f36:	2301      	movs	r3, #1
 8007f38:	e000      	b.n	8007f3c <xQueueGenericSendFromISR+0x70>
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d10a      	bne.n	8007f56 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f44:	f383 8811 	msr	BASEPRI, r3
 8007f48:	f3bf 8f6f 	isb	sy
 8007f4c:	f3bf 8f4f 	dsb	sy
 8007f50:	623b      	str	r3, [r7, #32]
}
 8007f52:	bf00      	nop
 8007f54:	e7fe      	b.n	8007f54 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f56:	f001 ff6f 	bl	8009e38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007f5a:	f3ef 8211 	mrs	r2, BASEPRI
 8007f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f62:	f383 8811 	msr	BASEPRI, r3
 8007f66:	f3bf 8f6f 	isb	sy
 8007f6a:	f3bf 8f4f 	dsb	sy
 8007f6e:	61fa      	str	r2, [r7, #28]
 8007f70:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007f72:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007f74:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d302      	bcc.n	8007f88 <xQueueGenericSendFromISR+0xbc>
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	2b02      	cmp	r3, #2
 8007f86:	d12f      	bne.n	8007fe8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f96:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f98:	683a      	ldr	r2, [r7, #0]
 8007f9a:	68b9      	ldr	r1, [r7, #8]
 8007f9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007f9e:	f000 f911 	bl	80081c4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007fa2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007faa:	d112      	bne.n	8007fd2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d016      	beq.n	8007fe2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb6:	3324      	adds	r3, #36	; 0x24
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f000 ff41 	bl	8008e40 <xTaskRemoveFromEventList>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d00e      	beq.n	8007fe2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d00b      	beq.n	8007fe2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2201      	movs	r2, #1
 8007fce:	601a      	str	r2, [r3, #0]
 8007fd0:	e007      	b.n	8007fe2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007fd2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	b25a      	sxtb	r2, r3
 8007fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007fe6:	e001      	b.n	8007fec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fee:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007ff6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007ff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3740      	adds	r7, #64	; 0x40
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
	...

08008004 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b08c      	sub	sp, #48	; 0x30
 8008008:	af00      	add	r7, sp, #0
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	60b9      	str	r1, [r7, #8]
 800800e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008010:	2300      	movs	r3, #0
 8008012:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800801a:	2b00      	cmp	r3, #0
 800801c:	d10a      	bne.n	8008034 <xQueueReceive+0x30>
	__asm volatile
 800801e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008022:	f383 8811 	msr	BASEPRI, r3
 8008026:	f3bf 8f6f 	isb	sy
 800802a:	f3bf 8f4f 	dsb	sy
 800802e:	623b      	str	r3, [r7, #32]
}
 8008030:	bf00      	nop
 8008032:	e7fe      	b.n	8008032 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d103      	bne.n	8008042 <xQueueReceive+0x3e>
 800803a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800803c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800803e:	2b00      	cmp	r3, #0
 8008040:	d101      	bne.n	8008046 <xQueueReceive+0x42>
 8008042:	2301      	movs	r3, #1
 8008044:	e000      	b.n	8008048 <xQueueReceive+0x44>
 8008046:	2300      	movs	r3, #0
 8008048:	2b00      	cmp	r3, #0
 800804a:	d10a      	bne.n	8008062 <xQueueReceive+0x5e>
	__asm volatile
 800804c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008050:	f383 8811 	msr	BASEPRI, r3
 8008054:	f3bf 8f6f 	isb	sy
 8008058:	f3bf 8f4f 	dsb	sy
 800805c:	61fb      	str	r3, [r7, #28]
}
 800805e:	bf00      	nop
 8008060:	e7fe      	b.n	8008060 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008062:	f001 f8af 	bl	80091c4 <xTaskGetSchedulerState>
 8008066:	4603      	mov	r3, r0
 8008068:	2b00      	cmp	r3, #0
 800806a:	d102      	bne.n	8008072 <xQueueReceive+0x6e>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d101      	bne.n	8008076 <xQueueReceive+0x72>
 8008072:	2301      	movs	r3, #1
 8008074:	e000      	b.n	8008078 <xQueueReceive+0x74>
 8008076:	2300      	movs	r3, #0
 8008078:	2b00      	cmp	r3, #0
 800807a:	d10a      	bne.n	8008092 <xQueueReceive+0x8e>
	__asm volatile
 800807c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008080:	f383 8811 	msr	BASEPRI, r3
 8008084:	f3bf 8f6f 	isb	sy
 8008088:	f3bf 8f4f 	dsb	sy
 800808c:	61bb      	str	r3, [r7, #24]
}
 800808e:	bf00      	nop
 8008090:	e7fe      	b.n	8008090 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008092:	f001 fdef 	bl	8009c74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800809a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800809c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d01f      	beq.n	80080e2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80080a2:	68b9      	ldr	r1, [r7, #8]
 80080a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080a6:	f000 f8f7 	bl	8008298 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80080aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ac:	1e5a      	subs	r2, r3, #1
 80080ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b4:	691b      	ldr	r3, [r3, #16]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d00f      	beq.n	80080da <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080bc:	3310      	adds	r3, #16
 80080be:	4618      	mov	r0, r3
 80080c0:	f000 febe 	bl	8008e40 <xTaskRemoveFromEventList>
 80080c4:	4603      	mov	r3, r0
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d007      	beq.n	80080da <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80080ca:	4b3d      	ldr	r3, [pc, #244]	; (80081c0 <xQueueReceive+0x1bc>)
 80080cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080d0:	601a      	str	r2, [r3, #0]
 80080d2:	f3bf 8f4f 	dsb	sy
 80080d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80080da:	f001 fdfb 	bl	8009cd4 <vPortExitCritical>
				return pdPASS;
 80080de:	2301      	movs	r3, #1
 80080e0:	e069      	b.n	80081b6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d103      	bne.n	80080f0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80080e8:	f001 fdf4 	bl	8009cd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80080ec:	2300      	movs	r3, #0
 80080ee:	e062      	b.n	80081b6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80080f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d106      	bne.n	8008104 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80080f6:	f107 0310 	add.w	r3, r7, #16
 80080fa:	4618      	mov	r0, r3
 80080fc:	f000 ff04 	bl	8008f08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008100:	2301      	movs	r3, #1
 8008102:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008104:	f001 fde6 	bl	8009cd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008108:	f000 fc70 	bl	80089ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800810c:	f001 fdb2 	bl	8009c74 <vPortEnterCritical>
 8008110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008112:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008116:	b25b      	sxtb	r3, r3
 8008118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800811c:	d103      	bne.n	8008126 <xQueueReceive+0x122>
 800811e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008120:	2200      	movs	r2, #0
 8008122:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008128:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800812c:	b25b      	sxtb	r3, r3
 800812e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008132:	d103      	bne.n	800813c <xQueueReceive+0x138>
 8008134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008136:	2200      	movs	r2, #0
 8008138:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800813c:	f001 fdca 	bl	8009cd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008140:	1d3a      	adds	r2, r7, #4
 8008142:	f107 0310 	add.w	r3, r7, #16
 8008146:	4611      	mov	r1, r2
 8008148:	4618      	mov	r0, r3
 800814a:	f000 fef3 	bl	8008f34 <xTaskCheckForTimeOut>
 800814e:	4603      	mov	r3, r0
 8008150:	2b00      	cmp	r3, #0
 8008152:	d123      	bne.n	800819c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008154:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008156:	f000 f917 	bl	8008388 <prvIsQueueEmpty>
 800815a:	4603      	mov	r3, r0
 800815c:	2b00      	cmp	r3, #0
 800815e:	d017      	beq.n	8008190 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008162:	3324      	adds	r3, #36	; 0x24
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	4611      	mov	r1, r2
 8008168:	4618      	mov	r0, r3
 800816a:	f000 fe19 	bl	8008da0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800816e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008170:	f000 f8b8 	bl	80082e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008174:	f000 fc48 	bl	8008a08 <xTaskResumeAll>
 8008178:	4603      	mov	r3, r0
 800817a:	2b00      	cmp	r3, #0
 800817c:	d189      	bne.n	8008092 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800817e:	4b10      	ldr	r3, [pc, #64]	; (80081c0 <xQueueReceive+0x1bc>)
 8008180:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008184:	601a      	str	r2, [r3, #0]
 8008186:	f3bf 8f4f 	dsb	sy
 800818a:	f3bf 8f6f 	isb	sy
 800818e:	e780      	b.n	8008092 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008190:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008192:	f000 f8a7 	bl	80082e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008196:	f000 fc37 	bl	8008a08 <xTaskResumeAll>
 800819a:	e77a      	b.n	8008092 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800819c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800819e:	f000 f8a1 	bl	80082e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80081a2:	f000 fc31 	bl	8008a08 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80081a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081a8:	f000 f8ee 	bl	8008388 <prvIsQueueEmpty>
 80081ac:	4603      	mov	r3, r0
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	f43f af6f 	beq.w	8008092 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80081b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3730      	adds	r7, #48	; 0x30
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	e000ed04 	.word	0xe000ed04

080081c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b086      	sub	sp, #24
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	60b9      	str	r1, [r7, #8]
 80081ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80081d0:	2300      	movs	r3, #0
 80081d2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081d8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d10d      	bne.n	80081fe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d14d      	bne.n	8008286 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	4618      	mov	r0, r3
 80081f0:	f001 f806 	bl	8009200 <xTaskPriorityDisinherit>
 80081f4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2200      	movs	r2, #0
 80081fa:	609a      	str	r2, [r3, #8]
 80081fc:	e043      	b.n	8008286 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d119      	bne.n	8008238 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	6858      	ldr	r0, [r3, #4]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800820c:	461a      	mov	r2, r3
 800820e:	68b9      	ldr	r1, [r7, #8]
 8008210:	f005 feda 	bl	800dfc8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	685a      	ldr	r2, [r3, #4]
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821c:	441a      	add	r2, r3
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	685a      	ldr	r2, [r3, #4]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	429a      	cmp	r2, r3
 800822c:	d32b      	bcc.n	8008286 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	605a      	str	r2, [r3, #4]
 8008236:	e026      	b.n	8008286 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	68d8      	ldr	r0, [r3, #12]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008240:	461a      	mov	r2, r3
 8008242:	68b9      	ldr	r1, [r7, #8]
 8008244:	f005 fec0 	bl	800dfc8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	68da      	ldr	r2, [r3, #12]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008250:	425b      	negs	r3, r3
 8008252:	441a      	add	r2, r3
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	68da      	ldr	r2, [r3, #12]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	429a      	cmp	r2, r3
 8008262:	d207      	bcs.n	8008274 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	689a      	ldr	r2, [r3, #8]
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800826c:	425b      	negs	r3, r3
 800826e:	441a      	add	r2, r3
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2b02      	cmp	r3, #2
 8008278:	d105      	bne.n	8008286 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d002      	beq.n	8008286 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	3b01      	subs	r3, #1
 8008284:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	1c5a      	adds	r2, r3, #1
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800828e:	697b      	ldr	r3, [r7, #20]
}
 8008290:	4618      	mov	r0, r3
 8008292:	3718      	adds	r7, #24
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d018      	beq.n	80082dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	68da      	ldr	r2, [r3, #12]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082b2:	441a      	add	r2, r3
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	68da      	ldr	r2, [r3, #12]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d303      	bcc.n	80082cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	68d9      	ldr	r1, [r3, #12]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d4:	461a      	mov	r2, r3
 80082d6:	6838      	ldr	r0, [r7, #0]
 80082d8:	f005 fe76 	bl	800dfc8 <memcpy>
	}
}
 80082dc:	bf00      	nop
 80082de:	3708      	adds	r7, #8
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b084      	sub	sp, #16
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80082ec:	f001 fcc2 	bl	8009c74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80082f8:	e011      	b.n	800831e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d012      	beq.n	8008328 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	3324      	adds	r3, #36	; 0x24
 8008306:	4618      	mov	r0, r3
 8008308:	f000 fd9a 	bl	8008e40 <xTaskRemoveFromEventList>
 800830c:	4603      	mov	r3, r0
 800830e:	2b00      	cmp	r3, #0
 8008310:	d001      	beq.n	8008316 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008312:	f000 fe71 	bl	8008ff8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008316:	7bfb      	ldrb	r3, [r7, #15]
 8008318:	3b01      	subs	r3, #1
 800831a:	b2db      	uxtb	r3, r3
 800831c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800831e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008322:	2b00      	cmp	r3, #0
 8008324:	dce9      	bgt.n	80082fa <prvUnlockQueue+0x16>
 8008326:	e000      	b.n	800832a <prvUnlockQueue+0x46>
					break;
 8008328:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	22ff      	movs	r2, #255	; 0xff
 800832e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008332:	f001 fccf 	bl	8009cd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008336:	f001 fc9d 	bl	8009c74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008340:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008342:	e011      	b.n	8008368 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	691b      	ldr	r3, [r3, #16]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d012      	beq.n	8008372 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	3310      	adds	r3, #16
 8008350:	4618      	mov	r0, r3
 8008352:	f000 fd75 	bl	8008e40 <xTaskRemoveFromEventList>
 8008356:	4603      	mov	r3, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d001      	beq.n	8008360 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800835c:	f000 fe4c 	bl	8008ff8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008360:	7bbb      	ldrb	r3, [r7, #14]
 8008362:	3b01      	subs	r3, #1
 8008364:	b2db      	uxtb	r3, r3
 8008366:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008368:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800836c:	2b00      	cmp	r3, #0
 800836e:	dce9      	bgt.n	8008344 <prvUnlockQueue+0x60>
 8008370:	e000      	b.n	8008374 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008372:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	22ff      	movs	r2, #255	; 0xff
 8008378:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800837c:	f001 fcaa 	bl	8009cd4 <vPortExitCritical>
}
 8008380:	bf00      	nop
 8008382:	3710      	adds	r7, #16
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008390:	f001 fc70 	bl	8009c74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008398:	2b00      	cmp	r3, #0
 800839a:	d102      	bne.n	80083a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800839c:	2301      	movs	r3, #1
 800839e:	60fb      	str	r3, [r7, #12]
 80083a0:	e001      	b.n	80083a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80083a2:	2300      	movs	r3, #0
 80083a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80083a6:	f001 fc95 	bl	8009cd4 <vPortExitCritical>

	return xReturn;
 80083aa:	68fb      	ldr	r3, [r7, #12]
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3710      	adds	r7, #16
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b084      	sub	sp, #16
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80083bc:	f001 fc5a 	bl	8009c74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d102      	bne.n	80083d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80083cc:	2301      	movs	r3, #1
 80083ce:	60fb      	str	r3, [r7, #12]
 80083d0:	e001      	b.n	80083d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80083d2:	2300      	movs	r3, #0
 80083d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80083d6:	f001 fc7d 	bl	8009cd4 <vPortExitCritical>

	return xReturn;
 80083da:	68fb      	ldr	r3, [r7, #12]
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3710      	adds	r7, #16
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80083e4:	b480      	push	{r7}
 80083e6:	b085      	sub	sp, #20
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083ee:	2300      	movs	r3, #0
 80083f0:	60fb      	str	r3, [r7, #12]
 80083f2:	e014      	b.n	800841e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80083f4:	4a0f      	ldr	r2, [pc, #60]	; (8008434 <vQueueAddToRegistry+0x50>)
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d10b      	bne.n	8008418 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008400:	490c      	ldr	r1, [pc, #48]	; (8008434 <vQueueAddToRegistry+0x50>)
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	683a      	ldr	r2, [r7, #0]
 8008406:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800840a:	4a0a      	ldr	r2, [pc, #40]	; (8008434 <vQueueAddToRegistry+0x50>)
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	00db      	lsls	r3, r3, #3
 8008410:	4413      	add	r3, r2
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008416:	e006      	b.n	8008426 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	3301      	adds	r3, #1
 800841c:	60fb      	str	r3, [r7, #12]
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2b07      	cmp	r3, #7
 8008422:	d9e7      	bls.n	80083f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008424:	bf00      	nop
 8008426:	bf00      	nop
 8008428:	3714      	adds	r7, #20
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr
 8008432:	bf00      	nop
 8008434:	20000ca0 	.word	0x20000ca0

08008438 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008438:	b580      	push	{r7, lr}
 800843a:	b086      	sub	sp, #24
 800843c:	af00      	add	r7, sp, #0
 800843e:	60f8      	str	r0, [r7, #12]
 8008440:	60b9      	str	r1, [r7, #8]
 8008442:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008448:	f001 fc14 	bl	8009c74 <vPortEnterCritical>
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008452:	b25b      	sxtb	r3, r3
 8008454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008458:	d103      	bne.n	8008462 <vQueueWaitForMessageRestricted+0x2a>
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	2200      	movs	r2, #0
 800845e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008468:	b25b      	sxtb	r3, r3
 800846a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800846e:	d103      	bne.n	8008478 <vQueueWaitForMessageRestricted+0x40>
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	2200      	movs	r2, #0
 8008474:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008478:	f001 fc2c 	bl	8009cd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008480:	2b00      	cmp	r3, #0
 8008482:	d106      	bne.n	8008492 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	3324      	adds	r3, #36	; 0x24
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	68b9      	ldr	r1, [r7, #8]
 800848c:	4618      	mov	r0, r3
 800848e:	f000 fcab 	bl	8008de8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008492:	6978      	ldr	r0, [r7, #20]
 8008494:	f7ff ff26 	bl	80082e4 <prvUnlockQueue>
	}
 8008498:	bf00      	nop
 800849a:	3718      	adds	r7, #24
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}

080084a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b08e      	sub	sp, #56	; 0x38
 80084a4:	af04      	add	r7, sp, #16
 80084a6:	60f8      	str	r0, [r7, #12]
 80084a8:	60b9      	str	r1, [r7, #8]
 80084aa:	607a      	str	r2, [r7, #4]
 80084ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80084ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d10a      	bne.n	80084ca <xTaskCreateStatic+0x2a>
	__asm volatile
 80084b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b8:	f383 8811 	msr	BASEPRI, r3
 80084bc:	f3bf 8f6f 	isb	sy
 80084c0:	f3bf 8f4f 	dsb	sy
 80084c4:	623b      	str	r3, [r7, #32]
}
 80084c6:	bf00      	nop
 80084c8:	e7fe      	b.n	80084c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80084ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d10a      	bne.n	80084e6 <xTaskCreateStatic+0x46>
	__asm volatile
 80084d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d4:	f383 8811 	msr	BASEPRI, r3
 80084d8:	f3bf 8f6f 	isb	sy
 80084dc:	f3bf 8f4f 	dsb	sy
 80084e0:	61fb      	str	r3, [r7, #28]
}
 80084e2:	bf00      	nop
 80084e4:	e7fe      	b.n	80084e4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80084e6:	23a8      	movs	r3, #168	; 0xa8
 80084e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	2ba8      	cmp	r3, #168	; 0xa8
 80084ee:	d00a      	beq.n	8008506 <xTaskCreateStatic+0x66>
	__asm volatile
 80084f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f4:	f383 8811 	msr	BASEPRI, r3
 80084f8:	f3bf 8f6f 	isb	sy
 80084fc:	f3bf 8f4f 	dsb	sy
 8008500:	61bb      	str	r3, [r7, #24]
}
 8008502:	bf00      	nop
 8008504:	e7fe      	b.n	8008504 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008506:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800850a:	2b00      	cmp	r3, #0
 800850c:	d01e      	beq.n	800854c <xTaskCreateStatic+0xac>
 800850e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008510:	2b00      	cmp	r3, #0
 8008512:	d01b      	beq.n	800854c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008516:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800851c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800851e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008520:	2202      	movs	r2, #2
 8008522:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008526:	2300      	movs	r3, #0
 8008528:	9303      	str	r3, [sp, #12]
 800852a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852c:	9302      	str	r3, [sp, #8]
 800852e:	f107 0314 	add.w	r3, r7, #20
 8008532:	9301      	str	r3, [sp, #4]
 8008534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008536:	9300      	str	r3, [sp, #0]
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	687a      	ldr	r2, [r7, #4]
 800853c:	68b9      	ldr	r1, [r7, #8]
 800853e:	68f8      	ldr	r0, [r7, #12]
 8008540:	f000 f850 	bl	80085e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008544:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008546:	f000 f8f3 	bl	8008730 <prvAddNewTaskToReadyList>
 800854a:	e001      	b.n	8008550 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800854c:	2300      	movs	r3, #0
 800854e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008550:	697b      	ldr	r3, [r7, #20]
	}
 8008552:	4618      	mov	r0, r3
 8008554:	3728      	adds	r7, #40	; 0x28
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}

0800855a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800855a:	b580      	push	{r7, lr}
 800855c:	b08c      	sub	sp, #48	; 0x30
 800855e:	af04      	add	r7, sp, #16
 8008560:	60f8      	str	r0, [r7, #12]
 8008562:	60b9      	str	r1, [r7, #8]
 8008564:	603b      	str	r3, [r7, #0]
 8008566:	4613      	mov	r3, r2
 8008568:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800856a:	88fb      	ldrh	r3, [r7, #6]
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	4618      	mov	r0, r3
 8008570:	f001 fca2 	bl	8009eb8 <pvPortMalloc>
 8008574:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d00e      	beq.n	800859a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800857c:	20a8      	movs	r0, #168	; 0xa8
 800857e:	f001 fc9b 	bl	8009eb8 <pvPortMalloc>
 8008582:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008584:	69fb      	ldr	r3, [r7, #28]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d003      	beq.n	8008592 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	697a      	ldr	r2, [r7, #20]
 800858e:	631a      	str	r2, [r3, #48]	; 0x30
 8008590:	e005      	b.n	800859e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008592:	6978      	ldr	r0, [r7, #20]
 8008594:	f001 fd5c 	bl	800a050 <vPortFree>
 8008598:	e001      	b.n	800859e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800859a:	2300      	movs	r3, #0
 800859c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800859e:	69fb      	ldr	r3, [r7, #28]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d017      	beq.n	80085d4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80085a4:	69fb      	ldr	r3, [r7, #28]
 80085a6:	2200      	movs	r2, #0
 80085a8:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80085ac:	88fa      	ldrh	r2, [r7, #6]
 80085ae:	2300      	movs	r3, #0
 80085b0:	9303      	str	r3, [sp, #12]
 80085b2:	69fb      	ldr	r3, [r7, #28]
 80085b4:	9302      	str	r3, [sp, #8]
 80085b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b8:	9301      	str	r3, [sp, #4]
 80085ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085bc:	9300      	str	r3, [sp, #0]
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	68b9      	ldr	r1, [r7, #8]
 80085c2:	68f8      	ldr	r0, [r7, #12]
 80085c4:	f000 f80e 	bl	80085e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80085c8:	69f8      	ldr	r0, [r7, #28]
 80085ca:	f000 f8b1 	bl	8008730 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80085ce:	2301      	movs	r3, #1
 80085d0:	61bb      	str	r3, [r7, #24]
 80085d2:	e002      	b.n	80085da <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80085d4:	f04f 33ff 	mov.w	r3, #4294967295
 80085d8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80085da:	69bb      	ldr	r3, [r7, #24]
	}
 80085dc:	4618      	mov	r0, r3
 80085de:	3720      	adds	r7, #32
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b088      	sub	sp, #32
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	60f8      	str	r0, [r7, #12]
 80085ec:	60b9      	str	r1, [r7, #8]
 80085ee:	607a      	str	r2, [r7, #4]
 80085f0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80085f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	461a      	mov	r2, r3
 80085fc:	21a5      	movs	r1, #165	; 0xa5
 80085fe:	f005 fc47 	bl	800de90 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008604:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800860c:	3b01      	subs	r3, #1
 800860e:	009b      	lsls	r3, r3, #2
 8008610:	4413      	add	r3, r2
 8008612:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008614:	69bb      	ldr	r3, [r7, #24]
 8008616:	f023 0307 	bic.w	r3, r3, #7
 800861a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800861c:	69bb      	ldr	r3, [r7, #24]
 800861e:	f003 0307 	and.w	r3, r3, #7
 8008622:	2b00      	cmp	r3, #0
 8008624:	d00a      	beq.n	800863c <prvInitialiseNewTask+0x58>
	__asm volatile
 8008626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800862a:	f383 8811 	msr	BASEPRI, r3
 800862e:	f3bf 8f6f 	isb	sy
 8008632:	f3bf 8f4f 	dsb	sy
 8008636:	617b      	str	r3, [r7, #20]
}
 8008638:	bf00      	nop
 800863a:	e7fe      	b.n	800863a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d01f      	beq.n	8008682 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008642:	2300      	movs	r3, #0
 8008644:	61fb      	str	r3, [r7, #28]
 8008646:	e012      	b.n	800866e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008648:	68ba      	ldr	r2, [r7, #8]
 800864a:	69fb      	ldr	r3, [r7, #28]
 800864c:	4413      	add	r3, r2
 800864e:	7819      	ldrb	r1, [r3, #0]
 8008650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008652:	69fb      	ldr	r3, [r7, #28]
 8008654:	4413      	add	r3, r2
 8008656:	3334      	adds	r3, #52	; 0x34
 8008658:	460a      	mov	r2, r1
 800865a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800865c:	68ba      	ldr	r2, [r7, #8]
 800865e:	69fb      	ldr	r3, [r7, #28]
 8008660:	4413      	add	r3, r2
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d006      	beq.n	8008676 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008668:	69fb      	ldr	r3, [r7, #28]
 800866a:	3301      	adds	r3, #1
 800866c:	61fb      	str	r3, [r7, #28]
 800866e:	69fb      	ldr	r3, [r7, #28]
 8008670:	2b0f      	cmp	r3, #15
 8008672:	d9e9      	bls.n	8008648 <prvInitialiseNewTask+0x64>
 8008674:	e000      	b.n	8008678 <prvInitialiseNewTask+0x94>
			{
				break;
 8008676:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867a:	2200      	movs	r2, #0
 800867c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008680:	e003      	b.n	800868a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008684:	2200      	movs	r2, #0
 8008686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800868a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800868c:	2b37      	cmp	r3, #55	; 0x37
 800868e:	d901      	bls.n	8008694 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008690:	2337      	movs	r3, #55	; 0x37
 8008692:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008696:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008698:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800869a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800869e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80086a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a2:	2200      	movs	r2, #0
 80086a4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80086a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a8:	3304      	adds	r3, #4
 80086aa:	4618      	mov	r0, r3
 80086ac:	f7ff f93e 	bl	800792c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80086b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b2:	3318      	adds	r3, #24
 80086b4:	4618      	mov	r0, r3
 80086b6:	f7ff f939 	bl	800792c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80086ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80086c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80086ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086ce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80086d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d2:	2200      	movs	r2, #0
 80086d4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80086d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086da:	2200      	movs	r2, #0
 80086dc:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80086e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e2:	3354      	adds	r3, #84	; 0x54
 80086e4:	224c      	movs	r2, #76	; 0x4c
 80086e6:	2100      	movs	r1, #0
 80086e8:	4618      	mov	r0, r3
 80086ea:	f005 fbd1 	bl	800de90 <memset>
 80086ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f0:	4a0c      	ldr	r2, [pc, #48]	; (8008724 <prvInitialiseNewTask+0x140>)
 80086f2:	659a      	str	r2, [r3, #88]	; 0x58
 80086f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f6:	4a0c      	ldr	r2, [pc, #48]	; (8008728 <prvInitialiseNewTask+0x144>)
 80086f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80086fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086fc:	4a0b      	ldr	r2, [pc, #44]	; (800872c <prvInitialiseNewTask+0x148>)
 80086fe:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008700:	683a      	ldr	r2, [r7, #0]
 8008702:	68f9      	ldr	r1, [r7, #12]
 8008704:	69b8      	ldr	r0, [r7, #24]
 8008706:	f001 f98b 	bl	8009a20 <pxPortInitialiseStack>
 800870a:	4602      	mov	r2, r0
 800870c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800870e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008712:	2b00      	cmp	r3, #0
 8008714:	d002      	beq.n	800871c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008718:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800871a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800871c:	bf00      	nop
 800871e:	3720      	adds	r7, #32
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}
 8008724:	2000559c 	.word	0x2000559c
 8008728:	20005604 	.word	0x20005604
 800872c:	2000566c 	.word	0x2000566c

08008730 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b082      	sub	sp, #8
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008738:	f001 fa9c 	bl	8009c74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800873c:	4b2d      	ldr	r3, [pc, #180]	; (80087f4 <prvAddNewTaskToReadyList+0xc4>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	3301      	adds	r3, #1
 8008742:	4a2c      	ldr	r2, [pc, #176]	; (80087f4 <prvAddNewTaskToReadyList+0xc4>)
 8008744:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008746:	4b2c      	ldr	r3, [pc, #176]	; (80087f8 <prvAddNewTaskToReadyList+0xc8>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d109      	bne.n	8008762 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800874e:	4a2a      	ldr	r2, [pc, #168]	; (80087f8 <prvAddNewTaskToReadyList+0xc8>)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008754:	4b27      	ldr	r3, [pc, #156]	; (80087f4 <prvAddNewTaskToReadyList+0xc4>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	2b01      	cmp	r3, #1
 800875a:	d110      	bne.n	800877e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800875c:	f000 fc70 	bl	8009040 <prvInitialiseTaskLists>
 8008760:	e00d      	b.n	800877e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008762:	4b26      	ldr	r3, [pc, #152]	; (80087fc <prvAddNewTaskToReadyList+0xcc>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d109      	bne.n	800877e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800876a:	4b23      	ldr	r3, [pc, #140]	; (80087f8 <prvAddNewTaskToReadyList+0xc8>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008774:	429a      	cmp	r2, r3
 8008776:	d802      	bhi.n	800877e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008778:	4a1f      	ldr	r2, [pc, #124]	; (80087f8 <prvAddNewTaskToReadyList+0xc8>)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800877e:	4b20      	ldr	r3, [pc, #128]	; (8008800 <prvAddNewTaskToReadyList+0xd0>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	3301      	adds	r3, #1
 8008784:	4a1e      	ldr	r2, [pc, #120]	; (8008800 <prvAddNewTaskToReadyList+0xd0>)
 8008786:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008788:	4b1d      	ldr	r3, [pc, #116]	; (8008800 <prvAddNewTaskToReadyList+0xd0>)
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008794:	4b1b      	ldr	r3, [pc, #108]	; (8008804 <prvAddNewTaskToReadyList+0xd4>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	429a      	cmp	r2, r3
 800879a:	d903      	bls.n	80087a4 <prvAddNewTaskToReadyList+0x74>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a0:	4a18      	ldr	r2, [pc, #96]	; (8008804 <prvAddNewTaskToReadyList+0xd4>)
 80087a2:	6013      	str	r3, [r2, #0]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087a8:	4613      	mov	r3, r2
 80087aa:	009b      	lsls	r3, r3, #2
 80087ac:	4413      	add	r3, r2
 80087ae:	009b      	lsls	r3, r3, #2
 80087b0:	4a15      	ldr	r2, [pc, #84]	; (8008808 <prvAddNewTaskToReadyList+0xd8>)
 80087b2:	441a      	add	r2, r3
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	3304      	adds	r3, #4
 80087b8:	4619      	mov	r1, r3
 80087ba:	4610      	mov	r0, r2
 80087bc:	f7ff f8c3 	bl	8007946 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80087c0:	f001 fa88 	bl	8009cd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80087c4:	4b0d      	ldr	r3, [pc, #52]	; (80087fc <prvAddNewTaskToReadyList+0xcc>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d00e      	beq.n	80087ea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80087cc:	4b0a      	ldr	r3, [pc, #40]	; (80087f8 <prvAddNewTaskToReadyList+0xc8>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d207      	bcs.n	80087ea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80087da:	4b0c      	ldr	r3, [pc, #48]	; (800880c <prvAddNewTaskToReadyList+0xdc>)
 80087dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087e0:	601a      	str	r2, [r3, #0]
 80087e2:	f3bf 8f4f 	dsb	sy
 80087e6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087ea:	bf00      	nop
 80087ec:	3708      	adds	r7, #8
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
 80087f2:	bf00      	nop
 80087f4:	200011b4 	.word	0x200011b4
 80087f8:	20000ce0 	.word	0x20000ce0
 80087fc:	200011c0 	.word	0x200011c0
 8008800:	200011d0 	.word	0x200011d0
 8008804:	200011bc 	.word	0x200011bc
 8008808:	20000ce4 	.word	0x20000ce4
 800880c:	e000ed04 	.word	0xe000ed04

08008810 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8008810:	b580      	push	{r7, lr}
 8008812:	b08a      	sub	sp, #40	; 0x28
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800881a:	2300      	movs	r3, #0
 800881c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d10a      	bne.n	800883a <vTaskDelayUntil+0x2a>
	__asm volatile
 8008824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008828:	f383 8811 	msr	BASEPRI, r3
 800882c:	f3bf 8f6f 	isb	sy
 8008830:	f3bf 8f4f 	dsb	sy
 8008834:	617b      	str	r3, [r7, #20]
}
 8008836:	bf00      	nop
 8008838:	e7fe      	b.n	8008838 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d10a      	bne.n	8008856 <vTaskDelayUntil+0x46>
	__asm volatile
 8008840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008844:	f383 8811 	msr	BASEPRI, r3
 8008848:	f3bf 8f6f 	isb	sy
 800884c:	f3bf 8f4f 	dsb	sy
 8008850:	613b      	str	r3, [r7, #16]
}
 8008852:	bf00      	nop
 8008854:	e7fe      	b.n	8008854 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8008856:	4b2a      	ldr	r3, [pc, #168]	; (8008900 <vTaskDelayUntil+0xf0>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d00a      	beq.n	8008874 <vTaskDelayUntil+0x64>
	__asm volatile
 800885e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008862:	f383 8811 	msr	BASEPRI, r3
 8008866:	f3bf 8f6f 	isb	sy
 800886a:	f3bf 8f4f 	dsb	sy
 800886e:	60fb      	str	r3, [r7, #12]
}
 8008870:	bf00      	nop
 8008872:	e7fe      	b.n	8008872 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8008874:	f000 f8ba 	bl	80089ec <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8008878:	4b22      	ldr	r3, [pc, #136]	; (8008904 <vTaskDelayUntil+0xf4>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	683a      	ldr	r2, [r7, #0]
 8008884:	4413      	add	r3, r2
 8008886:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	6a3a      	ldr	r2, [r7, #32]
 800888e:	429a      	cmp	r2, r3
 8008890:	d20b      	bcs.n	80088aa <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	69fa      	ldr	r2, [r7, #28]
 8008898:	429a      	cmp	r2, r3
 800889a:	d211      	bcs.n	80088c0 <vTaskDelayUntil+0xb0>
 800889c:	69fa      	ldr	r2, [r7, #28]
 800889e:	6a3b      	ldr	r3, [r7, #32]
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d90d      	bls.n	80088c0 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80088a4:	2301      	movs	r3, #1
 80088a6:	627b      	str	r3, [r7, #36]	; 0x24
 80088a8:	e00a      	b.n	80088c0 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	69fa      	ldr	r2, [r7, #28]
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d303      	bcc.n	80088bc <vTaskDelayUntil+0xac>
 80088b4:	69fa      	ldr	r2, [r7, #28]
 80088b6:	6a3b      	ldr	r3, [r7, #32]
 80088b8:	429a      	cmp	r2, r3
 80088ba:	d901      	bls.n	80088c0 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80088bc:	2301      	movs	r3, #1
 80088be:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	69fa      	ldr	r2, [r7, #28]
 80088c4:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80088c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d006      	beq.n	80088da <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80088cc:	69fa      	ldr	r2, [r7, #28]
 80088ce:	6a3b      	ldr	r3, [r7, #32]
 80088d0:	1ad3      	subs	r3, r2, r3
 80088d2:	2100      	movs	r1, #0
 80088d4:	4618      	mov	r0, r3
 80088d6:	f000 fd01 	bl	80092dc <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80088da:	f000 f895 	bl	8008a08 <xTaskResumeAll>
 80088de:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80088e0:	69bb      	ldr	r3, [r7, #24]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d107      	bne.n	80088f6 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 80088e6:	4b08      	ldr	r3, [pc, #32]	; (8008908 <vTaskDelayUntil+0xf8>)
 80088e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088ec:	601a      	str	r2, [r3, #0]
 80088ee:	f3bf 8f4f 	dsb	sy
 80088f2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80088f6:	bf00      	nop
 80088f8:	3728      	adds	r7, #40	; 0x28
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
 80088fe:	bf00      	nop
 8008900:	200011dc 	.word	0x200011dc
 8008904:	200011b8 	.word	0x200011b8
 8008908:	e000ed04 	.word	0xe000ed04

0800890c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b08a      	sub	sp, #40	; 0x28
 8008910:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008912:	2300      	movs	r3, #0
 8008914:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008916:	2300      	movs	r3, #0
 8008918:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800891a:	463a      	mov	r2, r7
 800891c:	1d39      	adds	r1, r7, #4
 800891e:	f107 0308 	add.w	r3, r7, #8
 8008922:	4618      	mov	r0, r3
 8008924:	f7fe ffae 	bl	8007884 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008928:	6839      	ldr	r1, [r7, #0]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	68ba      	ldr	r2, [r7, #8]
 800892e:	9202      	str	r2, [sp, #8]
 8008930:	9301      	str	r3, [sp, #4]
 8008932:	2300      	movs	r3, #0
 8008934:	9300      	str	r3, [sp, #0]
 8008936:	2300      	movs	r3, #0
 8008938:	460a      	mov	r2, r1
 800893a:	4924      	ldr	r1, [pc, #144]	; (80089cc <vTaskStartScheduler+0xc0>)
 800893c:	4824      	ldr	r0, [pc, #144]	; (80089d0 <vTaskStartScheduler+0xc4>)
 800893e:	f7ff fdaf 	bl	80084a0 <xTaskCreateStatic>
 8008942:	4603      	mov	r3, r0
 8008944:	4a23      	ldr	r2, [pc, #140]	; (80089d4 <vTaskStartScheduler+0xc8>)
 8008946:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008948:	4b22      	ldr	r3, [pc, #136]	; (80089d4 <vTaskStartScheduler+0xc8>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d002      	beq.n	8008956 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008950:	2301      	movs	r3, #1
 8008952:	617b      	str	r3, [r7, #20]
 8008954:	e001      	b.n	800895a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008956:	2300      	movs	r3, #0
 8008958:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	2b01      	cmp	r3, #1
 800895e:	d102      	bne.n	8008966 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008960:	f000 fd10 	bl	8009384 <xTimerCreateTimerTask>
 8008964:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	2b01      	cmp	r3, #1
 800896a:	d11b      	bne.n	80089a4 <vTaskStartScheduler+0x98>
	__asm volatile
 800896c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008970:	f383 8811 	msr	BASEPRI, r3
 8008974:	f3bf 8f6f 	isb	sy
 8008978:	f3bf 8f4f 	dsb	sy
 800897c:	613b      	str	r3, [r7, #16]
}
 800897e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008980:	4b15      	ldr	r3, [pc, #84]	; (80089d8 <vTaskStartScheduler+0xcc>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	3354      	adds	r3, #84	; 0x54
 8008986:	4a15      	ldr	r2, [pc, #84]	; (80089dc <vTaskStartScheduler+0xd0>)
 8008988:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800898a:	4b15      	ldr	r3, [pc, #84]	; (80089e0 <vTaskStartScheduler+0xd4>)
 800898c:	f04f 32ff 	mov.w	r2, #4294967295
 8008990:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008992:	4b14      	ldr	r3, [pc, #80]	; (80089e4 <vTaskStartScheduler+0xd8>)
 8008994:	2201      	movs	r2, #1
 8008996:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008998:	4b13      	ldr	r3, [pc, #76]	; (80089e8 <vTaskStartScheduler+0xdc>)
 800899a:	2200      	movs	r2, #0
 800899c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800899e:	f001 f8c7 	bl	8009b30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80089a2:	e00e      	b.n	80089c2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089aa:	d10a      	bne.n	80089c2 <vTaskStartScheduler+0xb6>
	__asm volatile
 80089ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b0:	f383 8811 	msr	BASEPRI, r3
 80089b4:	f3bf 8f6f 	isb	sy
 80089b8:	f3bf 8f4f 	dsb	sy
 80089bc:	60fb      	str	r3, [r7, #12]
}
 80089be:	bf00      	nop
 80089c0:	e7fe      	b.n	80089c0 <vTaskStartScheduler+0xb4>
}
 80089c2:	bf00      	nop
 80089c4:	3718      	adds	r7, #24
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
 80089ca:	bf00      	nop
 80089cc:	0800fc28 	.word	0x0800fc28
 80089d0:	08009011 	.word	0x08009011
 80089d4:	200011d8 	.word	0x200011d8
 80089d8:	20000ce0 	.word	0x20000ce0
 80089dc:	20000128 	.word	0x20000128
 80089e0:	200011d4 	.word	0x200011d4
 80089e4:	200011c0 	.word	0x200011c0
 80089e8:	200011b8 	.word	0x200011b8

080089ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80089ec:	b480      	push	{r7}
 80089ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80089f0:	4b04      	ldr	r3, [pc, #16]	; (8008a04 <vTaskSuspendAll+0x18>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	3301      	adds	r3, #1
 80089f6:	4a03      	ldr	r2, [pc, #12]	; (8008a04 <vTaskSuspendAll+0x18>)
 80089f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80089fa:	bf00      	nop
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr
 8008a04:	200011dc 	.word	0x200011dc

08008a08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b084      	sub	sp, #16
 8008a0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008a12:	2300      	movs	r3, #0
 8008a14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008a16:	4b42      	ldr	r3, [pc, #264]	; (8008b20 <xTaskResumeAll+0x118>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d10a      	bne.n	8008a34 <xTaskResumeAll+0x2c>
	__asm volatile
 8008a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a22:	f383 8811 	msr	BASEPRI, r3
 8008a26:	f3bf 8f6f 	isb	sy
 8008a2a:	f3bf 8f4f 	dsb	sy
 8008a2e:	603b      	str	r3, [r7, #0]
}
 8008a30:	bf00      	nop
 8008a32:	e7fe      	b.n	8008a32 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008a34:	f001 f91e 	bl	8009c74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008a38:	4b39      	ldr	r3, [pc, #228]	; (8008b20 <xTaskResumeAll+0x118>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	3b01      	subs	r3, #1
 8008a3e:	4a38      	ldr	r2, [pc, #224]	; (8008b20 <xTaskResumeAll+0x118>)
 8008a40:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a42:	4b37      	ldr	r3, [pc, #220]	; (8008b20 <xTaskResumeAll+0x118>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d162      	bne.n	8008b10 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008a4a:	4b36      	ldr	r3, [pc, #216]	; (8008b24 <xTaskResumeAll+0x11c>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d05e      	beq.n	8008b10 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a52:	e02f      	b.n	8008ab4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a54:	4b34      	ldr	r3, [pc, #208]	; (8008b28 <xTaskResumeAll+0x120>)
 8008a56:	68db      	ldr	r3, [r3, #12]
 8008a58:	68db      	ldr	r3, [r3, #12]
 8008a5a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	3318      	adds	r3, #24
 8008a60:	4618      	mov	r0, r3
 8008a62:	f7fe ffcd 	bl	8007a00 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	3304      	adds	r3, #4
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f7fe ffc8 	bl	8007a00 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a74:	4b2d      	ldr	r3, [pc, #180]	; (8008b2c <xTaskResumeAll+0x124>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d903      	bls.n	8008a84 <xTaskResumeAll+0x7c>
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a80:	4a2a      	ldr	r2, [pc, #168]	; (8008b2c <xTaskResumeAll+0x124>)
 8008a82:	6013      	str	r3, [r2, #0]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a88:	4613      	mov	r3, r2
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	4413      	add	r3, r2
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	4a27      	ldr	r2, [pc, #156]	; (8008b30 <xTaskResumeAll+0x128>)
 8008a92:	441a      	add	r2, r3
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	3304      	adds	r3, #4
 8008a98:	4619      	mov	r1, r3
 8008a9a:	4610      	mov	r0, r2
 8008a9c:	f7fe ff53 	bl	8007946 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aa4:	4b23      	ldr	r3, [pc, #140]	; (8008b34 <xTaskResumeAll+0x12c>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d302      	bcc.n	8008ab4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008aae:	4b22      	ldr	r3, [pc, #136]	; (8008b38 <xTaskResumeAll+0x130>)
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008ab4:	4b1c      	ldr	r3, [pc, #112]	; (8008b28 <xTaskResumeAll+0x120>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d1cb      	bne.n	8008a54 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d001      	beq.n	8008ac6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008ac2:	f000 fb5f 	bl	8009184 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008ac6:	4b1d      	ldr	r3, [pc, #116]	; (8008b3c <xTaskResumeAll+0x134>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d010      	beq.n	8008af4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008ad2:	f000 f847 	bl	8008b64 <xTaskIncrementTick>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d002      	beq.n	8008ae2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008adc:	4b16      	ldr	r3, [pc, #88]	; (8008b38 <xTaskResumeAll+0x130>)
 8008ade:	2201      	movs	r2, #1
 8008ae0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	3b01      	subs	r3, #1
 8008ae6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d1f1      	bne.n	8008ad2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008aee:	4b13      	ldr	r3, [pc, #76]	; (8008b3c <xTaskResumeAll+0x134>)
 8008af0:	2200      	movs	r2, #0
 8008af2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008af4:	4b10      	ldr	r3, [pc, #64]	; (8008b38 <xTaskResumeAll+0x130>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d009      	beq.n	8008b10 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008afc:	2301      	movs	r3, #1
 8008afe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008b00:	4b0f      	ldr	r3, [pc, #60]	; (8008b40 <xTaskResumeAll+0x138>)
 8008b02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b06:	601a      	str	r2, [r3, #0]
 8008b08:	f3bf 8f4f 	dsb	sy
 8008b0c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008b10:	f001 f8e0 	bl	8009cd4 <vPortExitCritical>

	return xAlreadyYielded;
 8008b14:	68bb      	ldr	r3, [r7, #8]
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3710      	adds	r7, #16
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	200011dc 	.word	0x200011dc
 8008b24:	200011b4 	.word	0x200011b4
 8008b28:	20001174 	.word	0x20001174
 8008b2c:	200011bc 	.word	0x200011bc
 8008b30:	20000ce4 	.word	0x20000ce4
 8008b34:	20000ce0 	.word	0x20000ce0
 8008b38:	200011c8 	.word	0x200011c8
 8008b3c:	200011c4 	.word	0x200011c4
 8008b40:	e000ed04 	.word	0xe000ed04

08008b44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008b44:	b480      	push	{r7}
 8008b46:	b083      	sub	sp, #12
 8008b48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008b4a:	4b05      	ldr	r3, [pc, #20]	; (8008b60 <xTaskGetTickCount+0x1c>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008b50:	687b      	ldr	r3, [r7, #4]
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	370c      	adds	r7, #12
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr
 8008b5e:	bf00      	nop
 8008b60:	200011b8 	.word	0x200011b8

08008b64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b086      	sub	sp, #24
 8008b68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b6e:	4b4f      	ldr	r3, [pc, #316]	; (8008cac <xTaskIncrementTick+0x148>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	f040 808f 	bne.w	8008c96 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008b78:	4b4d      	ldr	r3, [pc, #308]	; (8008cb0 <xTaskIncrementTick+0x14c>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	3301      	adds	r3, #1
 8008b7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008b80:	4a4b      	ldr	r2, [pc, #300]	; (8008cb0 <xTaskIncrementTick+0x14c>)
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d120      	bne.n	8008bce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008b8c:	4b49      	ldr	r3, [pc, #292]	; (8008cb4 <xTaskIncrementTick+0x150>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d00a      	beq.n	8008bac <xTaskIncrementTick+0x48>
	__asm volatile
 8008b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9a:	f383 8811 	msr	BASEPRI, r3
 8008b9e:	f3bf 8f6f 	isb	sy
 8008ba2:	f3bf 8f4f 	dsb	sy
 8008ba6:	603b      	str	r3, [r7, #0]
}
 8008ba8:	bf00      	nop
 8008baa:	e7fe      	b.n	8008baa <xTaskIncrementTick+0x46>
 8008bac:	4b41      	ldr	r3, [pc, #260]	; (8008cb4 <xTaskIncrementTick+0x150>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	60fb      	str	r3, [r7, #12]
 8008bb2:	4b41      	ldr	r3, [pc, #260]	; (8008cb8 <xTaskIncrementTick+0x154>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4a3f      	ldr	r2, [pc, #252]	; (8008cb4 <xTaskIncrementTick+0x150>)
 8008bb8:	6013      	str	r3, [r2, #0]
 8008bba:	4a3f      	ldr	r2, [pc, #252]	; (8008cb8 <xTaskIncrementTick+0x154>)
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	6013      	str	r3, [r2, #0]
 8008bc0:	4b3e      	ldr	r3, [pc, #248]	; (8008cbc <xTaskIncrementTick+0x158>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	3301      	adds	r3, #1
 8008bc6:	4a3d      	ldr	r2, [pc, #244]	; (8008cbc <xTaskIncrementTick+0x158>)
 8008bc8:	6013      	str	r3, [r2, #0]
 8008bca:	f000 fadb 	bl	8009184 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008bce:	4b3c      	ldr	r3, [pc, #240]	; (8008cc0 <xTaskIncrementTick+0x15c>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	693a      	ldr	r2, [r7, #16]
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d349      	bcc.n	8008c6c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008bd8:	4b36      	ldr	r3, [pc, #216]	; (8008cb4 <xTaskIncrementTick+0x150>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d104      	bne.n	8008bec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008be2:	4b37      	ldr	r3, [pc, #220]	; (8008cc0 <xTaskIncrementTick+0x15c>)
 8008be4:	f04f 32ff 	mov.w	r2, #4294967295
 8008be8:	601a      	str	r2, [r3, #0]
					break;
 8008bea:	e03f      	b.n	8008c6c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bec:	4b31      	ldr	r3, [pc, #196]	; (8008cb4 <xTaskIncrementTick+0x150>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	68db      	ldr	r3, [r3, #12]
 8008bf2:	68db      	ldr	r3, [r3, #12]
 8008bf4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008bfc:	693a      	ldr	r2, [r7, #16]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d203      	bcs.n	8008c0c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008c04:	4a2e      	ldr	r2, [pc, #184]	; (8008cc0 <xTaskIncrementTick+0x15c>)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008c0a:	e02f      	b.n	8008c6c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	3304      	adds	r3, #4
 8008c10:	4618      	mov	r0, r3
 8008c12:	f7fe fef5 	bl	8007a00 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d004      	beq.n	8008c28 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	3318      	adds	r3, #24
 8008c22:	4618      	mov	r0, r3
 8008c24:	f7fe feec 	bl	8007a00 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c2c:	4b25      	ldr	r3, [pc, #148]	; (8008cc4 <xTaskIncrementTick+0x160>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d903      	bls.n	8008c3c <xTaskIncrementTick+0xd8>
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c38:	4a22      	ldr	r2, [pc, #136]	; (8008cc4 <xTaskIncrementTick+0x160>)
 8008c3a:	6013      	str	r3, [r2, #0]
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c40:	4613      	mov	r3, r2
 8008c42:	009b      	lsls	r3, r3, #2
 8008c44:	4413      	add	r3, r2
 8008c46:	009b      	lsls	r3, r3, #2
 8008c48:	4a1f      	ldr	r2, [pc, #124]	; (8008cc8 <xTaskIncrementTick+0x164>)
 8008c4a:	441a      	add	r2, r3
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	3304      	adds	r3, #4
 8008c50:	4619      	mov	r1, r3
 8008c52:	4610      	mov	r0, r2
 8008c54:	f7fe fe77 	bl	8007946 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c5c:	4b1b      	ldr	r3, [pc, #108]	; (8008ccc <xTaskIncrementTick+0x168>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d3b8      	bcc.n	8008bd8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008c66:	2301      	movs	r3, #1
 8008c68:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c6a:	e7b5      	b.n	8008bd8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008c6c:	4b17      	ldr	r3, [pc, #92]	; (8008ccc <xTaskIncrementTick+0x168>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c72:	4915      	ldr	r1, [pc, #84]	; (8008cc8 <xTaskIncrementTick+0x164>)
 8008c74:	4613      	mov	r3, r2
 8008c76:	009b      	lsls	r3, r3, #2
 8008c78:	4413      	add	r3, r2
 8008c7a:	009b      	lsls	r3, r3, #2
 8008c7c:	440b      	add	r3, r1
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d901      	bls.n	8008c88 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008c84:	2301      	movs	r3, #1
 8008c86:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008c88:	4b11      	ldr	r3, [pc, #68]	; (8008cd0 <xTaskIncrementTick+0x16c>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d007      	beq.n	8008ca0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008c90:	2301      	movs	r3, #1
 8008c92:	617b      	str	r3, [r7, #20]
 8008c94:	e004      	b.n	8008ca0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008c96:	4b0f      	ldr	r3, [pc, #60]	; (8008cd4 <xTaskIncrementTick+0x170>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	3301      	adds	r3, #1
 8008c9c:	4a0d      	ldr	r2, [pc, #52]	; (8008cd4 <xTaskIncrementTick+0x170>)
 8008c9e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008ca0:	697b      	ldr	r3, [r7, #20]
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3718      	adds	r7, #24
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
 8008caa:	bf00      	nop
 8008cac:	200011dc 	.word	0x200011dc
 8008cb0:	200011b8 	.word	0x200011b8
 8008cb4:	2000116c 	.word	0x2000116c
 8008cb8:	20001170 	.word	0x20001170
 8008cbc:	200011cc 	.word	0x200011cc
 8008cc0:	200011d4 	.word	0x200011d4
 8008cc4:	200011bc 	.word	0x200011bc
 8008cc8:	20000ce4 	.word	0x20000ce4
 8008ccc:	20000ce0 	.word	0x20000ce0
 8008cd0:	200011c8 	.word	0x200011c8
 8008cd4:	200011c4 	.word	0x200011c4

08008cd8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b085      	sub	sp, #20
 8008cdc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008cde:	4b2a      	ldr	r3, [pc, #168]	; (8008d88 <vTaskSwitchContext+0xb0>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d003      	beq.n	8008cee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008ce6:	4b29      	ldr	r3, [pc, #164]	; (8008d8c <vTaskSwitchContext+0xb4>)
 8008ce8:	2201      	movs	r2, #1
 8008cea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008cec:	e046      	b.n	8008d7c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008cee:	4b27      	ldr	r3, [pc, #156]	; (8008d8c <vTaskSwitchContext+0xb4>)
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cf4:	4b26      	ldr	r3, [pc, #152]	; (8008d90 <vTaskSwitchContext+0xb8>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	60fb      	str	r3, [r7, #12]
 8008cfa:	e010      	b.n	8008d1e <vTaskSwitchContext+0x46>
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d10a      	bne.n	8008d18 <vTaskSwitchContext+0x40>
	__asm volatile
 8008d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d06:	f383 8811 	msr	BASEPRI, r3
 8008d0a:	f3bf 8f6f 	isb	sy
 8008d0e:	f3bf 8f4f 	dsb	sy
 8008d12:	607b      	str	r3, [r7, #4]
}
 8008d14:	bf00      	nop
 8008d16:	e7fe      	b.n	8008d16 <vTaskSwitchContext+0x3e>
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	3b01      	subs	r3, #1
 8008d1c:	60fb      	str	r3, [r7, #12]
 8008d1e:	491d      	ldr	r1, [pc, #116]	; (8008d94 <vTaskSwitchContext+0xbc>)
 8008d20:	68fa      	ldr	r2, [r7, #12]
 8008d22:	4613      	mov	r3, r2
 8008d24:	009b      	lsls	r3, r3, #2
 8008d26:	4413      	add	r3, r2
 8008d28:	009b      	lsls	r3, r3, #2
 8008d2a:	440b      	add	r3, r1
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d0e4      	beq.n	8008cfc <vTaskSwitchContext+0x24>
 8008d32:	68fa      	ldr	r2, [r7, #12]
 8008d34:	4613      	mov	r3, r2
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	4413      	add	r3, r2
 8008d3a:	009b      	lsls	r3, r3, #2
 8008d3c:	4a15      	ldr	r2, [pc, #84]	; (8008d94 <vTaskSwitchContext+0xbc>)
 8008d3e:	4413      	add	r3, r2
 8008d40:	60bb      	str	r3, [r7, #8]
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	685a      	ldr	r2, [r3, #4]
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	605a      	str	r2, [r3, #4]
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	685a      	ldr	r2, [r3, #4]
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	3308      	adds	r3, #8
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d104      	bne.n	8008d62 <vTaskSwitchContext+0x8a>
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	685a      	ldr	r2, [r3, #4]
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	605a      	str	r2, [r3, #4]
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	68db      	ldr	r3, [r3, #12]
 8008d68:	4a0b      	ldr	r2, [pc, #44]	; (8008d98 <vTaskSwitchContext+0xc0>)
 8008d6a:	6013      	str	r3, [r2, #0]
 8008d6c:	4a08      	ldr	r2, [pc, #32]	; (8008d90 <vTaskSwitchContext+0xb8>)
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008d72:	4b09      	ldr	r3, [pc, #36]	; (8008d98 <vTaskSwitchContext+0xc0>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	3354      	adds	r3, #84	; 0x54
 8008d78:	4a08      	ldr	r2, [pc, #32]	; (8008d9c <vTaskSwitchContext+0xc4>)
 8008d7a:	6013      	str	r3, [r2, #0]
}
 8008d7c:	bf00      	nop
 8008d7e:	3714      	adds	r7, #20
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr
 8008d88:	200011dc 	.word	0x200011dc
 8008d8c:	200011c8 	.word	0x200011c8
 8008d90:	200011bc 	.word	0x200011bc
 8008d94:	20000ce4 	.word	0x20000ce4
 8008d98:	20000ce0 	.word	0x20000ce0
 8008d9c:	20000128 	.word	0x20000128

08008da0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d10a      	bne.n	8008dc6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db4:	f383 8811 	msr	BASEPRI, r3
 8008db8:	f3bf 8f6f 	isb	sy
 8008dbc:	f3bf 8f4f 	dsb	sy
 8008dc0:	60fb      	str	r3, [r7, #12]
}
 8008dc2:	bf00      	nop
 8008dc4:	e7fe      	b.n	8008dc4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008dc6:	4b07      	ldr	r3, [pc, #28]	; (8008de4 <vTaskPlaceOnEventList+0x44>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	3318      	adds	r3, #24
 8008dcc:	4619      	mov	r1, r3
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f7fe fddd 	bl	800798e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008dd4:	2101      	movs	r1, #1
 8008dd6:	6838      	ldr	r0, [r7, #0]
 8008dd8:	f000 fa80 	bl	80092dc <prvAddCurrentTaskToDelayedList>
}
 8008ddc:	bf00      	nop
 8008dde:	3710      	adds	r7, #16
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}
 8008de4:	20000ce0 	.word	0x20000ce0

08008de8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b086      	sub	sp, #24
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	60f8      	str	r0, [r7, #12]
 8008df0:	60b9      	str	r1, [r7, #8]
 8008df2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d10a      	bne.n	8008e10 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dfe:	f383 8811 	msr	BASEPRI, r3
 8008e02:	f3bf 8f6f 	isb	sy
 8008e06:	f3bf 8f4f 	dsb	sy
 8008e0a:	617b      	str	r3, [r7, #20]
}
 8008e0c:	bf00      	nop
 8008e0e:	e7fe      	b.n	8008e0e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e10:	4b0a      	ldr	r3, [pc, #40]	; (8008e3c <vTaskPlaceOnEventListRestricted+0x54>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	3318      	adds	r3, #24
 8008e16:	4619      	mov	r1, r3
 8008e18:	68f8      	ldr	r0, [r7, #12]
 8008e1a:	f7fe fd94 	bl	8007946 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d002      	beq.n	8008e2a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008e24:	f04f 33ff 	mov.w	r3, #4294967295
 8008e28:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008e2a:	6879      	ldr	r1, [r7, #4]
 8008e2c:	68b8      	ldr	r0, [r7, #8]
 8008e2e:	f000 fa55 	bl	80092dc <prvAddCurrentTaskToDelayedList>
	}
 8008e32:	bf00      	nop
 8008e34:	3718      	adds	r7, #24
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}
 8008e3a:	bf00      	nop
 8008e3c:	20000ce0 	.word	0x20000ce0

08008e40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b086      	sub	sp, #24
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	68db      	ldr	r3, [r3, #12]
 8008e4c:	68db      	ldr	r3, [r3, #12]
 8008e4e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d10a      	bne.n	8008e6c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e5a:	f383 8811 	msr	BASEPRI, r3
 8008e5e:	f3bf 8f6f 	isb	sy
 8008e62:	f3bf 8f4f 	dsb	sy
 8008e66:	60fb      	str	r3, [r7, #12]
}
 8008e68:	bf00      	nop
 8008e6a:	e7fe      	b.n	8008e6a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	3318      	adds	r3, #24
 8008e70:	4618      	mov	r0, r3
 8008e72:	f7fe fdc5 	bl	8007a00 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e76:	4b1e      	ldr	r3, [pc, #120]	; (8008ef0 <xTaskRemoveFromEventList+0xb0>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d11d      	bne.n	8008eba <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	3304      	adds	r3, #4
 8008e82:	4618      	mov	r0, r3
 8008e84:	f7fe fdbc 	bl	8007a00 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e8c:	4b19      	ldr	r3, [pc, #100]	; (8008ef4 <xTaskRemoveFromEventList+0xb4>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d903      	bls.n	8008e9c <xTaskRemoveFromEventList+0x5c>
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e98:	4a16      	ldr	r2, [pc, #88]	; (8008ef4 <xTaskRemoveFromEventList+0xb4>)
 8008e9a:	6013      	str	r3, [r2, #0]
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ea0:	4613      	mov	r3, r2
 8008ea2:	009b      	lsls	r3, r3, #2
 8008ea4:	4413      	add	r3, r2
 8008ea6:	009b      	lsls	r3, r3, #2
 8008ea8:	4a13      	ldr	r2, [pc, #76]	; (8008ef8 <xTaskRemoveFromEventList+0xb8>)
 8008eaa:	441a      	add	r2, r3
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	3304      	adds	r3, #4
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	4610      	mov	r0, r2
 8008eb4:	f7fe fd47 	bl	8007946 <vListInsertEnd>
 8008eb8:	e005      	b.n	8008ec6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	3318      	adds	r3, #24
 8008ebe:	4619      	mov	r1, r3
 8008ec0:	480e      	ldr	r0, [pc, #56]	; (8008efc <xTaskRemoveFromEventList+0xbc>)
 8008ec2:	f7fe fd40 	bl	8007946 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eca:	4b0d      	ldr	r3, [pc, #52]	; (8008f00 <xTaskRemoveFromEventList+0xc0>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d905      	bls.n	8008ee0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008ed8:	4b0a      	ldr	r3, [pc, #40]	; (8008f04 <xTaskRemoveFromEventList+0xc4>)
 8008eda:	2201      	movs	r2, #1
 8008edc:	601a      	str	r2, [r3, #0]
 8008ede:	e001      	b.n	8008ee4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008ee4:	697b      	ldr	r3, [r7, #20]
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3718      	adds	r7, #24
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	200011dc 	.word	0x200011dc
 8008ef4:	200011bc 	.word	0x200011bc
 8008ef8:	20000ce4 	.word	0x20000ce4
 8008efc:	20001174 	.word	0x20001174
 8008f00:	20000ce0 	.word	0x20000ce0
 8008f04:	200011c8 	.word	0x200011c8

08008f08 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b083      	sub	sp, #12
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008f10:	4b06      	ldr	r3, [pc, #24]	; (8008f2c <vTaskInternalSetTimeOutState+0x24>)
 8008f12:	681a      	ldr	r2, [r3, #0]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008f18:	4b05      	ldr	r3, [pc, #20]	; (8008f30 <vTaskInternalSetTimeOutState+0x28>)
 8008f1a:	681a      	ldr	r2, [r3, #0]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	605a      	str	r2, [r3, #4]
}
 8008f20:	bf00      	nop
 8008f22:	370c      	adds	r7, #12
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr
 8008f2c:	200011cc 	.word	0x200011cc
 8008f30:	200011b8 	.word	0x200011b8

08008f34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b088      	sub	sp, #32
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d10a      	bne.n	8008f5a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f48:	f383 8811 	msr	BASEPRI, r3
 8008f4c:	f3bf 8f6f 	isb	sy
 8008f50:	f3bf 8f4f 	dsb	sy
 8008f54:	613b      	str	r3, [r7, #16]
}
 8008f56:	bf00      	nop
 8008f58:	e7fe      	b.n	8008f58 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d10a      	bne.n	8008f76 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f64:	f383 8811 	msr	BASEPRI, r3
 8008f68:	f3bf 8f6f 	isb	sy
 8008f6c:	f3bf 8f4f 	dsb	sy
 8008f70:	60fb      	str	r3, [r7, #12]
}
 8008f72:	bf00      	nop
 8008f74:	e7fe      	b.n	8008f74 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008f76:	f000 fe7d 	bl	8009c74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008f7a:	4b1d      	ldr	r3, [pc, #116]	; (8008ff0 <xTaskCheckForTimeOut+0xbc>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	69ba      	ldr	r2, [r7, #24]
 8008f86:	1ad3      	subs	r3, r2, r3
 8008f88:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f92:	d102      	bne.n	8008f9a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008f94:	2300      	movs	r3, #0
 8008f96:	61fb      	str	r3, [r7, #28]
 8008f98:	e023      	b.n	8008fe2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681a      	ldr	r2, [r3, #0]
 8008f9e:	4b15      	ldr	r3, [pc, #84]	; (8008ff4 <xTaskCheckForTimeOut+0xc0>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	d007      	beq.n	8008fb6 <xTaskCheckForTimeOut+0x82>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	69ba      	ldr	r2, [r7, #24]
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d302      	bcc.n	8008fb6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	61fb      	str	r3, [r7, #28]
 8008fb4:	e015      	b.n	8008fe2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	697a      	ldr	r2, [r7, #20]
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d20b      	bcs.n	8008fd8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	681a      	ldr	r2, [r3, #0]
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	1ad2      	subs	r2, r2, r3
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f7ff ff9b 	bl	8008f08 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	61fb      	str	r3, [r7, #28]
 8008fd6:	e004      	b.n	8008fe2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008fe2:	f000 fe77 	bl	8009cd4 <vPortExitCritical>

	return xReturn;
 8008fe6:	69fb      	ldr	r3, [r7, #28]
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3720      	adds	r7, #32
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}
 8008ff0:	200011b8 	.word	0x200011b8
 8008ff4:	200011cc 	.word	0x200011cc

08008ff8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008ffc:	4b03      	ldr	r3, [pc, #12]	; (800900c <vTaskMissedYield+0x14>)
 8008ffe:	2201      	movs	r2, #1
 8009000:	601a      	str	r2, [r3, #0]
}
 8009002:	bf00      	nop
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr
 800900c:	200011c8 	.word	0x200011c8

08009010 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b082      	sub	sp, #8
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009018:	f000 f852 	bl	80090c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800901c:	4b06      	ldr	r3, [pc, #24]	; (8009038 <prvIdleTask+0x28>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	2b01      	cmp	r3, #1
 8009022:	d9f9      	bls.n	8009018 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009024:	4b05      	ldr	r3, [pc, #20]	; (800903c <prvIdleTask+0x2c>)
 8009026:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800902a:	601a      	str	r2, [r3, #0]
 800902c:	f3bf 8f4f 	dsb	sy
 8009030:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009034:	e7f0      	b.n	8009018 <prvIdleTask+0x8>
 8009036:	bf00      	nop
 8009038:	20000ce4 	.word	0x20000ce4
 800903c:	e000ed04 	.word	0xe000ed04

08009040 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b082      	sub	sp, #8
 8009044:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009046:	2300      	movs	r3, #0
 8009048:	607b      	str	r3, [r7, #4]
 800904a:	e00c      	b.n	8009066 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800904c:	687a      	ldr	r2, [r7, #4]
 800904e:	4613      	mov	r3, r2
 8009050:	009b      	lsls	r3, r3, #2
 8009052:	4413      	add	r3, r2
 8009054:	009b      	lsls	r3, r3, #2
 8009056:	4a12      	ldr	r2, [pc, #72]	; (80090a0 <prvInitialiseTaskLists+0x60>)
 8009058:	4413      	add	r3, r2
 800905a:	4618      	mov	r0, r3
 800905c:	f7fe fc46 	bl	80078ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	3301      	adds	r3, #1
 8009064:	607b      	str	r3, [r7, #4]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2b37      	cmp	r3, #55	; 0x37
 800906a:	d9ef      	bls.n	800904c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800906c:	480d      	ldr	r0, [pc, #52]	; (80090a4 <prvInitialiseTaskLists+0x64>)
 800906e:	f7fe fc3d 	bl	80078ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009072:	480d      	ldr	r0, [pc, #52]	; (80090a8 <prvInitialiseTaskLists+0x68>)
 8009074:	f7fe fc3a 	bl	80078ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009078:	480c      	ldr	r0, [pc, #48]	; (80090ac <prvInitialiseTaskLists+0x6c>)
 800907a:	f7fe fc37 	bl	80078ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800907e:	480c      	ldr	r0, [pc, #48]	; (80090b0 <prvInitialiseTaskLists+0x70>)
 8009080:	f7fe fc34 	bl	80078ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009084:	480b      	ldr	r0, [pc, #44]	; (80090b4 <prvInitialiseTaskLists+0x74>)
 8009086:	f7fe fc31 	bl	80078ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800908a:	4b0b      	ldr	r3, [pc, #44]	; (80090b8 <prvInitialiseTaskLists+0x78>)
 800908c:	4a05      	ldr	r2, [pc, #20]	; (80090a4 <prvInitialiseTaskLists+0x64>)
 800908e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009090:	4b0a      	ldr	r3, [pc, #40]	; (80090bc <prvInitialiseTaskLists+0x7c>)
 8009092:	4a05      	ldr	r2, [pc, #20]	; (80090a8 <prvInitialiseTaskLists+0x68>)
 8009094:	601a      	str	r2, [r3, #0]
}
 8009096:	bf00      	nop
 8009098:	3708      	adds	r7, #8
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}
 800909e:	bf00      	nop
 80090a0:	20000ce4 	.word	0x20000ce4
 80090a4:	20001144 	.word	0x20001144
 80090a8:	20001158 	.word	0x20001158
 80090ac:	20001174 	.word	0x20001174
 80090b0:	20001188 	.word	0x20001188
 80090b4:	200011a0 	.word	0x200011a0
 80090b8:	2000116c 	.word	0x2000116c
 80090bc:	20001170 	.word	0x20001170

080090c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b082      	sub	sp, #8
 80090c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80090c6:	e019      	b.n	80090fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80090c8:	f000 fdd4 	bl	8009c74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090cc:	4b10      	ldr	r3, [pc, #64]	; (8009110 <prvCheckTasksWaitingTermination+0x50>)
 80090ce:	68db      	ldr	r3, [r3, #12]
 80090d0:	68db      	ldr	r3, [r3, #12]
 80090d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	3304      	adds	r3, #4
 80090d8:	4618      	mov	r0, r3
 80090da:	f7fe fc91 	bl	8007a00 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80090de:	4b0d      	ldr	r3, [pc, #52]	; (8009114 <prvCheckTasksWaitingTermination+0x54>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	3b01      	subs	r3, #1
 80090e4:	4a0b      	ldr	r2, [pc, #44]	; (8009114 <prvCheckTasksWaitingTermination+0x54>)
 80090e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80090e8:	4b0b      	ldr	r3, [pc, #44]	; (8009118 <prvCheckTasksWaitingTermination+0x58>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	3b01      	subs	r3, #1
 80090ee:	4a0a      	ldr	r2, [pc, #40]	; (8009118 <prvCheckTasksWaitingTermination+0x58>)
 80090f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80090f2:	f000 fdef 	bl	8009cd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f000 f810 	bl	800911c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80090fc:	4b06      	ldr	r3, [pc, #24]	; (8009118 <prvCheckTasksWaitingTermination+0x58>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d1e1      	bne.n	80090c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009104:	bf00      	nop
 8009106:	bf00      	nop
 8009108:	3708      	adds	r7, #8
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	20001188 	.word	0x20001188
 8009114:	200011b4 	.word	0x200011b4
 8009118:	2000119c 	.word	0x2000119c

0800911c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	3354      	adds	r3, #84	; 0x54
 8009128:	4618      	mov	r0, r3
 800912a:	f004 fecb 	bl	800dec4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009134:	2b00      	cmp	r3, #0
 8009136:	d108      	bne.n	800914a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800913c:	4618      	mov	r0, r3
 800913e:	f000 ff87 	bl	800a050 <vPortFree>
				vPortFree( pxTCB );
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 ff84 	bl	800a050 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009148:	e018      	b.n	800917c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009150:	2b01      	cmp	r3, #1
 8009152:	d103      	bne.n	800915c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f000 ff7b 	bl	800a050 <vPortFree>
	}
 800915a:	e00f      	b.n	800917c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009162:	2b02      	cmp	r3, #2
 8009164:	d00a      	beq.n	800917c <prvDeleteTCB+0x60>
	__asm volatile
 8009166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800916a:	f383 8811 	msr	BASEPRI, r3
 800916e:	f3bf 8f6f 	isb	sy
 8009172:	f3bf 8f4f 	dsb	sy
 8009176:	60fb      	str	r3, [r7, #12]
}
 8009178:	bf00      	nop
 800917a:	e7fe      	b.n	800917a <prvDeleteTCB+0x5e>
	}
 800917c:	bf00      	nop
 800917e:	3710      	adds	r7, #16
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}

08009184 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009184:	b480      	push	{r7}
 8009186:	b083      	sub	sp, #12
 8009188:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800918a:	4b0c      	ldr	r3, [pc, #48]	; (80091bc <prvResetNextTaskUnblockTime+0x38>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d104      	bne.n	800919e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009194:	4b0a      	ldr	r3, [pc, #40]	; (80091c0 <prvResetNextTaskUnblockTime+0x3c>)
 8009196:	f04f 32ff 	mov.w	r2, #4294967295
 800919a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800919c:	e008      	b.n	80091b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800919e:	4b07      	ldr	r3, [pc, #28]	; (80091bc <prvResetNextTaskUnblockTime+0x38>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	68db      	ldr	r3, [r3, #12]
 80091a4:	68db      	ldr	r3, [r3, #12]
 80091a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	4a04      	ldr	r2, [pc, #16]	; (80091c0 <prvResetNextTaskUnblockTime+0x3c>)
 80091ae:	6013      	str	r3, [r2, #0]
}
 80091b0:	bf00      	nop
 80091b2:	370c      	adds	r7, #12
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr
 80091bc:	2000116c 	.word	0x2000116c
 80091c0:	200011d4 	.word	0x200011d4

080091c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80091c4:	b480      	push	{r7}
 80091c6:	b083      	sub	sp, #12
 80091c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80091ca:	4b0b      	ldr	r3, [pc, #44]	; (80091f8 <xTaskGetSchedulerState+0x34>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d102      	bne.n	80091d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80091d2:	2301      	movs	r3, #1
 80091d4:	607b      	str	r3, [r7, #4]
 80091d6:	e008      	b.n	80091ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091d8:	4b08      	ldr	r3, [pc, #32]	; (80091fc <xTaskGetSchedulerState+0x38>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d102      	bne.n	80091e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80091e0:	2302      	movs	r3, #2
 80091e2:	607b      	str	r3, [r7, #4]
 80091e4:	e001      	b.n	80091ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80091e6:	2300      	movs	r3, #0
 80091e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80091ea:	687b      	ldr	r3, [r7, #4]
	}
 80091ec:	4618      	mov	r0, r3
 80091ee:	370c      	adds	r7, #12
 80091f0:	46bd      	mov	sp, r7
 80091f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f6:	4770      	bx	lr
 80091f8:	200011c0 	.word	0x200011c0
 80091fc:	200011dc 	.word	0x200011dc

08009200 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009200:	b580      	push	{r7, lr}
 8009202:	b086      	sub	sp, #24
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800920c:	2300      	movs	r3, #0
 800920e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d056      	beq.n	80092c4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009216:	4b2e      	ldr	r3, [pc, #184]	; (80092d0 <xTaskPriorityDisinherit+0xd0>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	693a      	ldr	r2, [r7, #16]
 800921c:	429a      	cmp	r2, r3
 800921e:	d00a      	beq.n	8009236 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009224:	f383 8811 	msr	BASEPRI, r3
 8009228:	f3bf 8f6f 	isb	sy
 800922c:	f3bf 8f4f 	dsb	sy
 8009230:	60fb      	str	r3, [r7, #12]
}
 8009232:	bf00      	nop
 8009234:	e7fe      	b.n	8009234 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800923a:	2b00      	cmp	r3, #0
 800923c:	d10a      	bne.n	8009254 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800923e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009242:	f383 8811 	msr	BASEPRI, r3
 8009246:	f3bf 8f6f 	isb	sy
 800924a:	f3bf 8f4f 	dsb	sy
 800924e:	60bb      	str	r3, [r7, #8]
}
 8009250:	bf00      	nop
 8009252:	e7fe      	b.n	8009252 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009258:	1e5a      	subs	r2, r3, #1
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009266:	429a      	cmp	r2, r3
 8009268:	d02c      	beq.n	80092c4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800926e:	2b00      	cmp	r3, #0
 8009270:	d128      	bne.n	80092c4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	3304      	adds	r3, #4
 8009276:	4618      	mov	r0, r3
 8009278:	f7fe fbc2 	bl	8007a00 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009288:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009294:	4b0f      	ldr	r3, [pc, #60]	; (80092d4 <xTaskPriorityDisinherit+0xd4>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	429a      	cmp	r2, r3
 800929a:	d903      	bls.n	80092a4 <xTaskPriorityDisinherit+0xa4>
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a0:	4a0c      	ldr	r2, [pc, #48]	; (80092d4 <xTaskPriorityDisinherit+0xd4>)
 80092a2:	6013      	str	r3, [r2, #0]
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092a8:	4613      	mov	r3, r2
 80092aa:	009b      	lsls	r3, r3, #2
 80092ac:	4413      	add	r3, r2
 80092ae:	009b      	lsls	r3, r3, #2
 80092b0:	4a09      	ldr	r2, [pc, #36]	; (80092d8 <xTaskPriorityDisinherit+0xd8>)
 80092b2:	441a      	add	r2, r3
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	3304      	adds	r3, #4
 80092b8:	4619      	mov	r1, r3
 80092ba:	4610      	mov	r0, r2
 80092bc:	f7fe fb43 	bl	8007946 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80092c0:	2301      	movs	r3, #1
 80092c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80092c4:	697b      	ldr	r3, [r7, #20]
	}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3718      	adds	r7, #24
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	bf00      	nop
 80092d0:	20000ce0 	.word	0x20000ce0
 80092d4:	200011bc 	.word	0x200011bc
 80092d8:	20000ce4 	.word	0x20000ce4

080092dc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b084      	sub	sp, #16
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80092e6:	4b21      	ldr	r3, [pc, #132]	; (800936c <prvAddCurrentTaskToDelayedList+0x90>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80092ec:	4b20      	ldr	r3, [pc, #128]	; (8009370 <prvAddCurrentTaskToDelayedList+0x94>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	3304      	adds	r3, #4
 80092f2:	4618      	mov	r0, r3
 80092f4:	f7fe fb84 	bl	8007a00 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092fe:	d10a      	bne.n	8009316 <prvAddCurrentTaskToDelayedList+0x3a>
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d007      	beq.n	8009316 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009306:	4b1a      	ldr	r3, [pc, #104]	; (8009370 <prvAddCurrentTaskToDelayedList+0x94>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	3304      	adds	r3, #4
 800930c:	4619      	mov	r1, r3
 800930e:	4819      	ldr	r0, [pc, #100]	; (8009374 <prvAddCurrentTaskToDelayedList+0x98>)
 8009310:	f7fe fb19 	bl	8007946 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009314:	e026      	b.n	8009364 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009316:	68fa      	ldr	r2, [r7, #12]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	4413      	add	r3, r2
 800931c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800931e:	4b14      	ldr	r3, [pc, #80]	; (8009370 <prvAddCurrentTaskToDelayedList+0x94>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	68ba      	ldr	r2, [r7, #8]
 8009324:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009326:	68ba      	ldr	r2, [r7, #8]
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	429a      	cmp	r2, r3
 800932c:	d209      	bcs.n	8009342 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800932e:	4b12      	ldr	r3, [pc, #72]	; (8009378 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009330:	681a      	ldr	r2, [r3, #0]
 8009332:	4b0f      	ldr	r3, [pc, #60]	; (8009370 <prvAddCurrentTaskToDelayedList+0x94>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	3304      	adds	r3, #4
 8009338:	4619      	mov	r1, r3
 800933a:	4610      	mov	r0, r2
 800933c:	f7fe fb27 	bl	800798e <vListInsert>
}
 8009340:	e010      	b.n	8009364 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009342:	4b0e      	ldr	r3, [pc, #56]	; (800937c <prvAddCurrentTaskToDelayedList+0xa0>)
 8009344:	681a      	ldr	r2, [r3, #0]
 8009346:	4b0a      	ldr	r3, [pc, #40]	; (8009370 <prvAddCurrentTaskToDelayedList+0x94>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	3304      	adds	r3, #4
 800934c:	4619      	mov	r1, r3
 800934e:	4610      	mov	r0, r2
 8009350:	f7fe fb1d 	bl	800798e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009354:	4b0a      	ldr	r3, [pc, #40]	; (8009380 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	68ba      	ldr	r2, [r7, #8]
 800935a:	429a      	cmp	r2, r3
 800935c:	d202      	bcs.n	8009364 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800935e:	4a08      	ldr	r2, [pc, #32]	; (8009380 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	6013      	str	r3, [r2, #0]
}
 8009364:	bf00      	nop
 8009366:	3710      	adds	r7, #16
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}
 800936c:	200011b8 	.word	0x200011b8
 8009370:	20000ce0 	.word	0x20000ce0
 8009374:	200011a0 	.word	0x200011a0
 8009378:	20001170 	.word	0x20001170
 800937c:	2000116c 	.word	0x2000116c
 8009380:	200011d4 	.word	0x200011d4

08009384 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b08a      	sub	sp, #40	; 0x28
 8009388:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800938a:	2300      	movs	r3, #0
 800938c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800938e:	f000 fb07 	bl	80099a0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009392:	4b1c      	ldr	r3, [pc, #112]	; (8009404 <xTimerCreateTimerTask+0x80>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d021      	beq.n	80093de <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800939a:	2300      	movs	r3, #0
 800939c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800939e:	2300      	movs	r3, #0
 80093a0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80093a2:	1d3a      	adds	r2, r7, #4
 80093a4:	f107 0108 	add.w	r1, r7, #8
 80093a8:	f107 030c 	add.w	r3, r7, #12
 80093ac:	4618      	mov	r0, r3
 80093ae:	f7fe fa83 	bl	80078b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80093b2:	6879      	ldr	r1, [r7, #4]
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	68fa      	ldr	r2, [r7, #12]
 80093b8:	9202      	str	r2, [sp, #8]
 80093ba:	9301      	str	r3, [sp, #4]
 80093bc:	2302      	movs	r3, #2
 80093be:	9300      	str	r3, [sp, #0]
 80093c0:	2300      	movs	r3, #0
 80093c2:	460a      	mov	r2, r1
 80093c4:	4910      	ldr	r1, [pc, #64]	; (8009408 <xTimerCreateTimerTask+0x84>)
 80093c6:	4811      	ldr	r0, [pc, #68]	; (800940c <xTimerCreateTimerTask+0x88>)
 80093c8:	f7ff f86a 	bl	80084a0 <xTaskCreateStatic>
 80093cc:	4603      	mov	r3, r0
 80093ce:	4a10      	ldr	r2, [pc, #64]	; (8009410 <xTimerCreateTimerTask+0x8c>)
 80093d0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80093d2:	4b0f      	ldr	r3, [pc, #60]	; (8009410 <xTimerCreateTimerTask+0x8c>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d001      	beq.n	80093de <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80093da:	2301      	movs	r3, #1
 80093dc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d10a      	bne.n	80093fa <xTimerCreateTimerTask+0x76>
	__asm volatile
 80093e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e8:	f383 8811 	msr	BASEPRI, r3
 80093ec:	f3bf 8f6f 	isb	sy
 80093f0:	f3bf 8f4f 	dsb	sy
 80093f4:	613b      	str	r3, [r7, #16]
}
 80093f6:	bf00      	nop
 80093f8:	e7fe      	b.n	80093f8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80093fa:	697b      	ldr	r3, [r7, #20]
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3718      	adds	r7, #24
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}
 8009404:	20001210 	.word	0x20001210
 8009408:	0800fc30 	.word	0x0800fc30
 800940c:	08009549 	.word	0x08009549
 8009410:	20001214 	.word	0x20001214

08009414 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b08a      	sub	sp, #40	; 0x28
 8009418:	af00      	add	r7, sp, #0
 800941a:	60f8      	str	r0, [r7, #12]
 800941c:	60b9      	str	r1, [r7, #8]
 800941e:	607a      	str	r2, [r7, #4]
 8009420:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009422:	2300      	movs	r3, #0
 8009424:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d10a      	bne.n	8009442 <xTimerGenericCommand+0x2e>
	__asm volatile
 800942c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009430:	f383 8811 	msr	BASEPRI, r3
 8009434:	f3bf 8f6f 	isb	sy
 8009438:	f3bf 8f4f 	dsb	sy
 800943c:	623b      	str	r3, [r7, #32]
}
 800943e:	bf00      	nop
 8009440:	e7fe      	b.n	8009440 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009442:	4b1a      	ldr	r3, [pc, #104]	; (80094ac <xTimerGenericCommand+0x98>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d02a      	beq.n	80094a0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	2b05      	cmp	r3, #5
 800945a:	dc18      	bgt.n	800948e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800945c:	f7ff feb2 	bl	80091c4 <xTaskGetSchedulerState>
 8009460:	4603      	mov	r3, r0
 8009462:	2b02      	cmp	r3, #2
 8009464:	d109      	bne.n	800947a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009466:	4b11      	ldr	r3, [pc, #68]	; (80094ac <xTimerGenericCommand+0x98>)
 8009468:	6818      	ldr	r0, [r3, #0]
 800946a:	f107 0110 	add.w	r1, r7, #16
 800946e:	2300      	movs	r3, #0
 8009470:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009472:	f7fe fc2d 	bl	8007cd0 <xQueueGenericSend>
 8009476:	6278      	str	r0, [r7, #36]	; 0x24
 8009478:	e012      	b.n	80094a0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800947a:	4b0c      	ldr	r3, [pc, #48]	; (80094ac <xTimerGenericCommand+0x98>)
 800947c:	6818      	ldr	r0, [r3, #0]
 800947e:	f107 0110 	add.w	r1, r7, #16
 8009482:	2300      	movs	r3, #0
 8009484:	2200      	movs	r2, #0
 8009486:	f7fe fc23 	bl	8007cd0 <xQueueGenericSend>
 800948a:	6278      	str	r0, [r7, #36]	; 0x24
 800948c:	e008      	b.n	80094a0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800948e:	4b07      	ldr	r3, [pc, #28]	; (80094ac <xTimerGenericCommand+0x98>)
 8009490:	6818      	ldr	r0, [r3, #0]
 8009492:	f107 0110 	add.w	r1, r7, #16
 8009496:	2300      	movs	r3, #0
 8009498:	683a      	ldr	r2, [r7, #0]
 800949a:	f7fe fd17 	bl	8007ecc <xQueueGenericSendFromISR>
 800949e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80094a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3728      	adds	r7, #40	; 0x28
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}
 80094aa:	bf00      	nop
 80094ac:	20001210 	.word	0x20001210

080094b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b088      	sub	sp, #32
 80094b4:	af02      	add	r7, sp, #8
 80094b6:	6078      	str	r0, [r7, #4]
 80094b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094ba:	4b22      	ldr	r3, [pc, #136]	; (8009544 <prvProcessExpiredTimer+0x94>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	68db      	ldr	r3, [r3, #12]
 80094c0:	68db      	ldr	r3, [r3, #12]
 80094c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	3304      	adds	r3, #4
 80094c8:	4618      	mov	r0, r3
 80094ca:	f7fe fa99 	bl	8007a00 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094d4:	f003 0304 	and.w	r3, r3, #4
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d022      	beq.n	8009522 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	699a      	ldr	r2, [r3, #24]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	18d1      	adds	r1, r2, r3
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	683a      	ldr	r2, [r7, #0]
 80094e8:	6978      	ldr	r0, [r7, #20]
 80094ea:	f000 f8d1 	bl	8009690 <prvInsertTimerInActiveList>
 80094ee:	4603      	mov	r3, r0
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d01f      	beq.n	8009534 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80094f4:	2300      	movs	r3, #0
 80094f6:	9300      	str	r3, [sp, #0]
 80094f8:	2300      	movs	r3, #0
 80094fa:	687a      	ldr	r2, [r7, #4]
 80094fc:	2100      	movs	r1, #0
 80094fe:	6978      	ldr	r0, [r7, #20]
 8009500:	f7ff ff88 	bl	8009414 <xTimerGenericCommand>
 8009504:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d113      	bne.n	8009534 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800950c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009510:	f383 8811 	msr	BASEPRI, r3
 8009514:	f3bf 8f6f 	isb	sy
 8009518:	f3bf 8f4f 	dsb	sy
 800951c:	60fb      	str	r3, [r7, #12]
}
 800951e:	bf00      	nop
 8009520:	e7fe      	b.n	8009520 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009528:	f023 0301 	bic.w	r3, r3, #1
 800952c:	b2da      	uxtb	r2, r3
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	6a1b      	ldr	r3, [r3, #32]
 8009538:	6978      	ldr	r0, [r7, #20]
 800953a:	4798      	blx	r3
}
 800953c:	bf00      	nop
 800953e:	3718      	adds	r7, #24
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}
 8009544:	20001208 	.word	0x20001208

08009548 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b084      	sub	sp, #16
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009550:	f107 0308 	add.w	r3, r7, #8
 8009554:	4618      	mov	r0, r3
 8009556:	f000 f857 	bl	8009608 <prvGetNextExpireTime>
 800955a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	4619      	mov	r1, r3
 8009560:	68f8      	ldr	r0, [r7, #12]
 8009562:	f000 f803 	bl	800956c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009566:	f000 f8d5 	bl	8009714 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800956a:	e7f1      	b.n	8009550 <prvTimerTask+0x8>

0800956c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b084      	sub	sp, #16
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
 8009574:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009576:	f7ff fa39 	bl	80089ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800957a:	f107 0308 	add.w	r3, r7, #8
 800957e:	4618      	mov	r0, r3
 8009580:	f000 f866 	bl	8009650 <prvSampleTimeNow>
 8009584:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d130      	bne.n	80095ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d10a      	bne.n	80095a8 <prvProcessTimerOrBlockTask+0x3c>
 8009592:	687a      	ldr	r2, [r7, #4]
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	429a      	cmp	r2, r3
 8009598:	d806      	bhi.n	80095a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800959a:	f7ff fa35 	bl	8008a08 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800959e:	68f9      	ldr	r1, [r7, #12]
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f7ff ff85 	bl	80094b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80095a6:	e024      	b.n	80095f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d008      	beq.n	80095c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80095ae:	4b13      	ldr	r3, [pc, #76]	; (80095fc <prvProcessTimerOrBlockTask+0x90>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d101      	bne.n	80095bc <prvProcessTimerOrBlockTask+0x50>
 80095b8:	2301      	movs	r3, #1
 80095ba:	e000      	b.n	80095be <prvProcessTimerOrBlockTask+0x52>
 80095bc:	2300      	movs	r3, #0
 80095be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80095c0:	4b0f      	ldr	r3, [pc, #60]	; (8009600 <prvProcessTimerOrBlockTask+0x94>)
 80095c2:	6818      	ldr	r0, [r3, #0]
 80095c4:	687a      	ldr	r2, [r7, #4]
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	1ad3      	subs	r3, r2, r3
 80095ca:	683a      	ldr	r2, [r7, #0]
 80095cc:	4619      	mov	r1, r3
 80095ce:	f7fe ff33 	bl	8008438 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80095d2:	f7ff fa19 	bl	8008a08 <xTaskResumeAll>
 80095d6:	4603      	mov	r3, r0
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d10a      	bne.n	80095f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80095dc:	4b09      	ldr	r3, [pc, #36]	; (8009604 <prvProcessTimerOrBlockTask+0x98>)
 80095de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095e2:	601a      	str	r2, [r3, #0]
 80095e4:	f3bf 8f4f 	dsb	sy
 80095e8:	f3bf 8f6f 	isb	sy
}
 80095ec:	e001      	b.n	80095f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80095ee:	f7ff fa0b 	bl	8008a08 <xTaskResumeAll>
}
 80095f2:	bf00      	nop
 80095f4:	3710      	adds	r7, #16
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	bf00      	nop
 80095fc:	2000120c 	.word	0x2000120c
 8009600:	20001210 	.word	0x20001210
 8009604:	e000ed04 	.word	0xe000ed04

08009608 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009608:	b480      	push	{r7}
 800960a:	b085      	sub	sp, #20
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009610:	4b0e      	ldr	r3, [pc, #56]	; (800964c <prvGetNextExpireTime+0x44>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d101      	bne.n	800961e <prvGetNextExpireTime+0x16>
 800961a:	2201      	movs	r2, #1
 800961c:	e000      	b.n	8009620 <prvGetNextExpireTime+0x18>
 800961e:	2200      	movs	r2, #0
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d105      	bne.n	8009638 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800962c:	4b07      	ldr	r3, [pc, #28]	; (800964c <prvGetNextExpireTime+0x44>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	68db      	ldr	r3, [r3, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	60fb      	str	r3, [r7, #12]
 8009636:	e001      	b.n	800963c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009638:	2300      	movs	r3, #0
 800963a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800963c:	68fb      	ldr	r3, [r7, #12]
}
 800963e:	4618      	mov	r0, r3
 8009640:	3714      	adds	r7, #20
 8009642:	46bd      	mov	sp, r7
 8009644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009648:	4770      	bx	lr
 800964a:	bf00      	nop
 800964c:	20001208 	.word	0x20001208

08009650 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009658:	f7ff fa74 	bl	8008b44 <xTaskGetTickCount>
 800965c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800965e:	4b0b      	ldr	r3, [pc, #44]	; (800968c <prvSampleTimeNow+0x3c>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	68fa      	ldr	r2, [r7, #12]
 8009664:	429a      	cmp	r2, r3
 8009666:	d205      	bcs.n	8009674 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009668:	f000 f936 	bl	80098d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2201      	movs	r2, #1
 8009670:	601a      	str	r2, [r3, #0]
 8009672:	e002      	b.n	800967a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2200      	movs	r2, #0
 8009678:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800967a:	4a04      	ldr	r2, [pc, #16]	; (800968c <prvSampleTimeNow+0x3c>)
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009680:	68fb      	ldr	r3, [r7, #12]
}
 8009682:	4618      	mov	r0, r3
 8009684:	3710      	adds	r7, #16
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}
 800968a:	bf00      	nop
 800968c:	20001218 	.word	0x20001218

08009690 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b086      	sub	sp, #24
 8009694:	af00      	add	r7, sp, #0
 8009696:	60f8      	str	r0, [r7, #12]
 8009698:	60b9      	str	r1, [r7, #8]
 800969a:	607a      	str	r2, [r7, #4]
 800969c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800969e:	2300      	movs	r3, #0
 80096a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	68ba      	ldr	r2, [r7, #8]
 80096a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	68fa      	ldr	r2, [r7, #12]
 80096ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80096ae:	68ba      	ldr	r2, [r7, #8]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	429a      	cmp	r2, r3
 80096b4:	d812      	bhi.n	80096dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096b6:	687a      	ldr	r2, [r7, #4]
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	1ad2      	subs	r2, r2, r3
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	699b      	ldr	r3, [r3, #24]
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d302      	bcc.n	80096ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80096c4:	2301      	movs	r3, #1
 80096c6:	617b      	str	r3, [r7, #20]
 80096c8:	e01b      	b.n	8009702 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80096ca:	4b10      	ldr	r3, [pc, #64]	; (800970c <prvInsertTimerInActiveList+0x7c>)
 80096cc:	681a      	ldr	r2, [r3, #0]
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	3304      	adds	r3, #4
 80096d2:	4619      	mov	r1, r3
 80096d4:	4610      	mov	r0, r2
 80096d6:	f7fe f95a 	bl	800798e <vListInsert>
 80096da:	e012      	b.n	8009702 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80096dc:	687a      	ldr	r2, [r7, #4]
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d206      	bcs.n	80096f2 <prvInsertTimerInActiveList+0x62>
 80096e4:	68ba      	ldr	r2, [r7, #8]
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d302      	bcc.n	80096f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80096ec:	2301      	movs	r3, #1
 80096ee:	617b      	str	r3, [r7, #20]
 80096f0:	e007      	b.n	8009702 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80096f2:	4b07      	ldr	r3, [pc, #28]	; (8009710 <prvInsertTimerInActiveList+0x80>)
 80096f4:	681a      	ldr	r2, [r3, #0]
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	3304      	adds	r3, #4
 80096fa:	4619      	mov	r1, r3
 80096fc:	4610      	mov	r0, r2
 80096fe:	f7fe f946 	bl	800798e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009702:	697b      	ldr	r3, [r7, #20]
}
 8009704:	4618      	mov	r0, r3
 8009706:	3718      	adds	r7, #24
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}
 800970c:	2000120c 	.word	0x2000120c
 8009710:	20001208 	.word	0x20001208

08009714 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b08e      	sub	sp, #56	; 0x38
 8009718:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800971a:	e0ca      	b.n	80098b2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2b00      	cmp	r3, #0
 8009720:	da18      	bge.n	8009754 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009722:	1d3b      	adds	r3, r7, #4
 8009724:	3304      	adds	r3, #4
 8009726:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800972a:	2b00      	cmp	r3, #0
 800972c:	d10a      	bne.n	8009744 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800972e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009732:	f383 8811 	msr	BASEPRI, r3
 8009736:	f3bf 8f6f 	isb	sy
 800973a:	f3bf 8f4f 	dsb	sy
 800973e:	61fb      	str	r3, [r7, #28]
}
 8009740:	bf00      	nop
 8009742:	e7fe      	b.n	8009742 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800974a:	6850      	ldr	r0, [r2, #4]
 800974c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800974e:	6892      	ldr	r2, [r2, #8]
 8009750:	4611      	mov	r1, r2
 8009752:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2b00      	cmp	r3, #0
 8009758:	f2c0 80ab 	blt.w	80098b2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009762:	695b      	ldr	r3, [r3, #20]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d004      	beq.n	8009772 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800976a:	3304      	adds	r3, #4
 800976c:	4618      	mov	r0, r3
 800976e:	f7fe f947 	bl	8007a00 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009772:	463b      	mov	r3, r7
 8009774:	4618      	mov	r0, r3
 8009776:	f7ff ff6b 	bl	8009650 <prvSampleTimeNow>
 800977a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2b09      	cmp	r3, #9
 8009780:	f200 8096 	bhi.w	80098b0 <prvProcessReceivedCommands+0x19c>
 8009784:	a201      	add	r2, pc, #4	; (adr r2, 800978c <prvProcessReceivedCommands+0x78>)
 8009786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800978a:	bf00      	nop
 800978c:	080097b5 	.word	0x080097b5
 8009790:	080097b5 	.word	0x080097b5
 8009794:	080097b5 	.word	0x080097b5
 8009798:	08009829 	.word	0x08009829
 800979c:	0800983d 	.word	0x0800983d
 80097a0:	08009887 	.word	0x08009887
 80097a4:	080097b5 	.word	0x080097b5
 80097a8:	080097b5 	.word	0x080097b5
 80097ac:	08009829 	.word	0x08009829
 80097b0:	0800983d 	.word	0x0800983d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80097b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097ba:	f043 0301 	orr.w	r3, r3, #1
 80097be:	b2da      	uxtb	r2, r3
 80097c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80097c6:	68ba      	ldr	r2, [r7, #8]
 80097c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ca:	699b      	ldr	r3, [r3, #24]
 80097cc:	18d1      	adds	r1, r2, r3
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097d4:	f7ff ff5c 	bl	8009690 <prvInsertTimerInActiveList>
 80097d8:	4603      	mov	r3, r0
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d069      	beq.n	80098b2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80097de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097e0:	6a1b      	ldr	r3, [r3, #32]
 80097e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80097e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097ec:	f003 0304 	and.w	r3, r3, #4
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d05e      	beq.n	80098b2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80097f4:	68ba      	ldr	r2, [r7, #8]
 80097f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f8:	699b      	ldr	r3, [r3, #24]
 80097fa:	441a      	add	r2, r3
 80097fc:	2300      	movs	r3, #0
 80097fe:	9300      	str	r3, [sp, #0]
 8009800:	2300      	movs	r3, #0
 8009802:	2100      	movs	r1, #0
 8009804:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009806:	f7ff fe05 	bl	8009414 <xTimerGenericCommand>
 800980a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800980c:	6a3b      	ldr	r3, [r7, #32]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d14f      	bne.n	80098b2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009816:	f383 8811 	msr	BASEPRI, r3
 800981a:	f3bf 8f6f 	isb	sy
 800981e:	f3bf 8f4f 	dsb	sy
 8009822:	61bb      	str	r3, [r7, #24]
}
 8009824:	bf00      	nop
 8009826:	e7fe      	b.n	8009826 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800982a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800982e:	f023 0301 	bic.w	r3, r3, #1
 8009832:	b2da      	uxtb	r2, r3
 8009834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009836:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800983a:	e03a      	b.n	80098b2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800983c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800983e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009842:	f043 0301 	orr.w	r3, r3, #1
 8009846:	b2da      	uxtb	r2, r3
 8009848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800984a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800984e:	68ba      	ldr	r2, [r7, #8]
 8009850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009852:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009856:	699b      	ldr	r3, [r3, #24]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d10a      	bne.n	8009872 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800985c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009860:	f383 8811 	msr	BASEPRI, r3
 8009864:	f3bf 8f6f 	isb	sy
 8009868:	f3bf 8f4f 	dsb	sy
 800986c:	617b      	str	r3, [r7, #20]
}
 800986e:	bf00      	nop
 8009870:	e7fe      	b.n	8009870 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009874:	699a      	ldr	r2, [r3, #24]
 8009876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009878:	18d1      	adds	r1, r2, r3
 800987a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800987c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800987e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009880:	f7ff ff06 	bl	8009690 <prvInsertTimerInActiveList>
					break;
 8009884:	e015      	b.n	80098b2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009888:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800988c:	f003 0302 	and.w	r3, r3, #2
 8009890:	2b00      	cmp	r3, #0
 8009892:	d103      	bne.n	800989c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009894:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009896:	f000 fbdb 	bl	800a050 <vPortFree>
 800989a:	e00a      	b.n	80098b2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800989c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800989e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80098a2:	f023 0301 	bic.w	r3, r3, #1
 80098a6:	b2da      	uxtb	r2, r3
 80098a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80098ae:	e000      	b.n	80098b2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80098b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80098b2:	4b08      	ldr	r3, [pc, #32]	; (80098d4 <prvProcessReceivedCommands+0x1c0>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	1d39      	adds	r1, r7, #4
 80098b8:	2200      	movs	r2, #0
 80098ba:	4618      	mov	r0, r3
 80098bc:	f7fe fba2 	bl	8008004 <xQueueReceive>
 80098c0:	4603      	mov	r3, r0
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	f47f af2a 	bne.w	800971c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80098c8:	bf00      	nop
 80098ca:	bf00      	nop
 80098cc:	3730      	adds	r7, #48	; 0x30
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}
 80098d2:	bf00      	nop
 80098d4:	20001210 	.word	0x20001210

080098d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b088      	sub	sp, #32
 80098dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80098de:	e048      	b.n	8009972 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80098e0:	4b2d      	ldr	r3, [pc, #180]	; (8009998 <prvSwitchTimerLists+0xc0>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	68db      	ldr	r3, [r3, #12]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098ea:	4b2b      	ldr	r3, [pc, #172]	; (8009998 <prvSwitchTimerLists+0xc0>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	68db      	ldr	r3, [r3, #12]
 80098f0:	68db      	ldr	r3, [r3, #12]
 80098f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	3304      	adds	r3, #4
 80098f8:	4618      	mov	r0, r3
 80098fa:	f7fe f881 	bl	8007a00 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	6a1b      	ldr	r3, [r3, #32]
 8009902:	68f8      	ldr	r0, [r7, #12]
 8009904:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800990c:	f003 0304 	and.w	r3, r3, #4
 8009910:	2b00      	cmp	r3, #0
 8009912:	d02e      	beq.n	8009972 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	699b      	ldr	r3, [r3, #24]
 8009918:	693a      	ldr	r2, [r7, #16]
 800991a:	4413      	add	r3, r2
 800991c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800991e:	68ba      	ldr	r2, [r7, #8]
 8009920:	693b      	ldr	r3, [r7, #16]
 8009922:	429a      	cmp	r2, r3
 8009924:	d90e      	bls.n	8009944 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	68ba      	ldr	r2, [r7, #8]
 800992a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	68fa      	ldr	r2, [r7, #12]
 8009930:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009932:	4b19      	ldr	r3, [pc, #100]	; (8009998 <prvSwitchTimerLists+0xc0>)
 8009934:	681a      	ldr	r2, [r3, #0]
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	3304      	adds	r3, #4
 800993a:	4619      	mov	r1, r3
 800993c:	4610      	mov	r0, r2
 800993e:	f7fe f826 	bl	800798e <vListInsert>
 8009942:	e016      	b.n	8009972 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009944:	2300      	movs	r3, #0
 8009946:	9300      	str	r3, [sp, #0]
 8009948:	2300      	movs	r3, #0
 800994a:	693a      	ldr	r2, [r7, #16]
 800994c:	2100      	movs	r1, #0
 800994e:	68f8      	ldr	r0, [r7, #12]
 8009950:	f7ff fd60 	bl	8009414 <xTimerGenericCommand>
 8009954:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d10a      	bne.n	8009972 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800995c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009960:	f383 8811 	msr	BASEPRI, r3
 8009964:	f3bf 8f6f 	isb	sy
 8009968:	f3bf 8f4f 	dsb	sy
 800996c:	603b      	str	r3, [r7, #0]
}
 800996e:	bf00      	nop
 8009970:	e7fe      	b.n	8009970 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009972:	4b09      	ldr	r3, [pc, #36]	; (8009998 <prvSwitchTimerLists+0xc0>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d1b1      	bne.n	80098e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800997c:	4b06      	ldr	r3, [pc, #24]	; (8009998 <prvSwitchTimerLists+0xc0>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009982:	4b06      	ldr	r3, [pc, #24]	; (800999c <prvSwitchTimerLists+0xc4>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4a04      	ldr	r2, [pc, #16]	; (8009998 <prvSwitchTimerLists+0xc0>)
 8009988:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800998a:	4a04      	ldr	r2, [pc, #16]	; (800999c <prvSwitchTimerLists+0xc4>)
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	6013      	str	r3, [r2, #0]
}
 8009990:	bf00      	nop
 8009992:	3718      	adds	r7, #24
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}
 8009998:	20001208 	.word	0x20001208
 800999c:	2000120c 	.word	0x2000120c

080099a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b082      	sub	sp, #8
 80099a4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80099a6:	f000 f965 	bl	8009c74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80099aa:	4b15      	ldr	r3, [pc, #84]	; (8009a00 <prvCheckForValidListAndQueue+0x60>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d120      	bne.n	80099f4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80099b2:	4814      	ldr	r0, [pc, #80]	; (8009a04 <prvCheckForValidListAndQueue+0x64>)
 80099b4:	f7fd ff9a 	bl	80078ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80099b8:	4813      	ldr	r0, [pc, #76]	; (8009a08 <prvCheckForValidListAndQueue+0x68>)
 80099ba:	f7fd ff97 	bl	80078ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80099be:	4b13      	ldr	r3, [pc, #76]	; (8009a0c <prvCheckForValidListAndQueue+0x6c>)
 80099c0:	4a10      	ldr	r2, [pc, #64]	; (8009a04 <prvCheckForValidListAndQueue+0x64>)
 80099c2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80099c4:	4b12      	ldr	r3, [pc, #72]	; (8009a10 <prvCheckForValidListAndQueue+0x70>)
 80099c6:	4a10      	ldr	r2, [pc, #64]	; (8009a08 <prvCheckForValidListAndQueue+0x68>)
 80099c8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80099ca:	2300      	movs	r3, #0
 80099cc:	9300      	str	r3, [sp, #0]
 80099ce:	4b11      	ldr	r3, [pc, #68]	; (8009a14 <prvCheckForValidListAndQueue+0x74>)
 80099d0:	4a11      	ldr	r2, [pc, #68]	; (8009a18 <prvCheckForValidListAndQueue+0x78>)
 80099d2:	2110      	movs	r1, #16
 80099d4:	200a      	movs	r0, #10
 80099d6:	f7fe f8a5 	bl	8007b24 <xQueueGenericCreateStatic>
 80099da:	4603      	mov	r3, r0
 80099dc:	4a08      	ldr	r2, [pc, #32]	; (8009a00 <prvCheckForValidListAndQueue+0x60>)
 80099de:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80099e0:	4b07      	ldr	r3, [pc, #28]	; (8009a00 <prvCheckForValidListAndQueue+0x60>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d005      	beq.n	80099f4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80099e8:	4b05      	ldr	r3, [pc, #20]	; (8009a00 <prvCheckForValidListAndQueue+0x60>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	490b      	ldr	r1, [pc, #44]	; (8009a1c <prvCheckForValidListAndQueue+0x7c>)
 80099ee:	4618      	mov	r0, r3
 80099f0:	f7fe fcf8 	bl	80083e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80099f4:	f000 f96e 	bl	8009cd4 <vPortExitCritical>
}
 80099f8:	bf00      	nop
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
 80099fe:	bf00      	nop
 8009a00:	20001210 	.word	0x20001210
 8009a04:	200011e0 	.word	0x200011e0
 8009a08:	200011f4 	.word	0x200011f4
 8009a0c:	20001208 	.word	0x20001208
 8009a10:	2000120c 	.word	0x2000120c
 8009a14:	200012bc 	.word	0x200012bc
 8009a18:	2000121c 	.word	0x2000121c
 8009a1c:	0800fc38 	.word	0x0800fc38

08009a20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009a20:	b480      	push	{r7}
 8009a22:	b085      	sub	sp, #20
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	60f8      	str	r0, [r7, #12]
 8009a28:	60b9      	str	r1, [r7, #8]
 8009a2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	3b04      	subs	r3, #4
 8009a30:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009a38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	3b04      	subs	r3, #4
 8009a3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	f023 0201 	bic.w	r2, r3, #1
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	3b04      	subs	r3, #4
 8009a4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009a50:	4a0c      	ldr	r2, [pc, #48]	; (8009a84 <pxPortInitialiseStack+0x64>)
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	3b14      	subs	r3, #20
 8009a5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009a5c:	687a      	ldr	r2, [r7, #4]
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	3b04      	subs	r3, #4
 8009a66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	f06f 0202 	mvn.w	r2, #2
 8009a6e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	3b20      	subs	r3, #32
 8009a74:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009a76:	68fb      	ldr	r3, [r7, #12]
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3714      	adds	r7, #20
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a82:	4770      	bx	lr
 8009a84:	08009a89 	.word	0x08009a89

08009a88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b085      	sub	sp, #20
 8009a8c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009a92:	4b12      	ldr	r3, [pc, #72]	; (8009adc <prvTaskExitError+0x54>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a9a:	d00a      	beq.n	8009ab2 <prvTaskExitError+0x2a>
	__asm volatile
 8009a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa0:	f383 8811 	msr	BASEPRI, r3
 8009aa4:	f3bf 8f6f 	isb	sy
 8009aa8:	f3bf 8f4f 	dsb	sy
 8009aac:	60fb      	str	r3, [r7, #12]
}
 8009aae:	bf00      	nop
 8009ab0:	e7fe      	b.n	8009ab0 <prvTaskExitError+0x28>
	__asm volatile
 8009ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab6:	f383 8811 	msr	BASEPRI, r3
 8009aba:	f3bf 8f6f 	isb	sy
 8009abe:	f3bf 8f4f 	dsb	sy
 8009ac2:	60bb      	str	r3, [r7, #8]
}
 8009ac4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009ac6:	bf00      	nop
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d0fc      	beq.n	8009ac8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009ace:	bf00      	nop
 8009ad0:	bf00      	nop
 8009ad2:	3714      	adds	r7, #20
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ada:	4770      	bx	lr
 8009adc:	2000000c 	.word	0x2000000c

08009ae0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009ae0:	4b07      	ldr	r3, [pc, #28]	; (8009b00 <pxCurrentTCBConst2>)
 8009ae2:	6819      	ldr	r1, [r3, #0]
 8009ae4:	6808      	ldr	r0, [r1, #0]
 8009ae6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aea:	f380 8809 	msr	PSP, r0
 8009aee:	f3bf 8f6f 	isb	sy
 8009af2:	f04f 0000 	mov.w	r0, #0
 8009af6:	f380 8811 	msr	BASEPRI, r0
 8009afa:	4770      	bx	lr
 8009afc:	f3af 8000 	nop.w

08009b00 <pxCurrentTCBConst2>:
 8009b00:	20000ce0 	.word	0x20000ce0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009b04:	bf00      	nop
 8009b06:	bf00      	nop

08009b08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009b08:	4808      	ldr	r0, [pc, #32]	; (8009b2c <prvPortStartFirstTask+0x24>)
 8009b0a:	6800      	ldr	r0, [r0, #0]
 8009b0c:	6800      	ldr	r0, [r0, #0]
 8009b0e:	f380 8808 	msr	MSP, r0
 8009b12:	f04f 0000 	mov.w	r0, #0
 8009b16:	f380 8814 	msr	CONTROL, r0
 8009b1a:	b662      	cpsie	i
 8009b1c:	b661      	cpsie	f
 8009b1e:	f3bf 8f4f 	dsb	sy
 8009b22:	f3bf 8f6f 	isb	sy
 8009b26:	df00      	svc	0
 8009b28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009b2a:	bf00      	nop
 8009b2c:	e000ed08 	.word	0xe000ed08

08009b30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b086      	sub	sp, #24
 8009b34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009b36:	4b46      	ldr	r3, [pc, #280]	; (8009c50 <xPortStartScheduler+0x120>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	4a46      	ldr	r2, [pc, #280]	; (8009c54 <xPortStartScheduler+0x124>)
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d10a      	bne.n	8009b56 <xPortStartScheduler+0x26>
	__asm volatile
 8009b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b44:	f383 8811 	msr	BASEPRI, r3
 8009b48:	f3bf 8f6f 	isb	sy
 8009b4c:	f3bf 8f4f 	dsb	sy
 8009b50:	613b      	str	r3, [r7, #16]
}
 8009b52:	bf00      	nop
 8009b54:	e7fe      	b.n	8009b54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009b56:	4b3e      	ldr	r3, [pc, #248]	; (8009c50 <xPortStartScheduler+0x120>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4a3f      	ldr	r2, [pc, #252]	; (8009c58 <xPortStartScheduler+0x128>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d10a      	bne.n	8009b76 <xPortStartScheduler+0x46>
	__asm volatile
 8009b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b64:	f383 8811 	msr	BASEPRI, r3
 8009b68:	f3bf 8f6f 	isb	sy
 8009b6c:	f3bf 8f4f 	dsb	sy
 8009b70:	60fb      	str	r3, [r7, #12]
}
 8009b72:	bf00      	nop
 8009b74:	e7fe      	b.n	8009b74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009b76:	4b39      	ldr	r3, [pc, #228]	; (8009c5c <xPortStartScheduler+0x12c>)
 8009b78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	781b      	ldrb	r3, [r3, #0]
 8009b7e:	b2db      	uxtb	r3, r3
 8009b80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	22ff      	movs	r2, #255	; 0xff
 8009b86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	781b      	ldrb	r3, [r3, #0]
 8009b8c:	b2db      	uxtb	r3, r3
 8009b8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009b90:	78fb      	ldrb	r3, [r7, #3]
 8009b92:	b2db      	uxtb	r3, r3
 8009b94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009b98:	b2da      	uxtb	r2, r3
 8009b9a:	4b31      	ldr	r3, [pc, #196]	; (8009c60 <xPortStartScheduler+0x130>)
 8009b9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009b9e:	4b31      	ldr	r3, [pc, #196]	; (8009c64 <xPortStartScheduler+0x134>)
 8009ba0:	2207      	movs	r2, #7
 8009ba2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ba4:	e009      	b.n	8009bba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009ba6:	4b2f      	ldr	r3, [pc, #188]	; (8009c64 <xPortStartScheduler+0x134>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	3b01      	subs	r3, #1
 8009bac:	4a2d      	ldr	r2, [pc, #180]	; (8009c64 <xPortStartScheduler+0x134>)
 8009bae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009bb0:	78fb      	ldrb	r3, [r7, #3]
 8009bb2:	b2db      	uxtb	r3, r3
 8009bb4:	005b      	lsls	r3, r3, #1
 8009bb6:	b2db      	uxtb	r3, r3
 8009bb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009bba:	78fb      	ldrb	r3, [r7, #3]
 8009bbc:	b2db      	uxtb	r3, r3
 8009bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bc2:	2b80      	cmp	r3, #128	; 0x80
 8009bc4:	d0ef      	beq.n	8009ba6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009bc6:	4b27      	ldr	r3, [pc, #156]	; (8009c64 <xPortStartScheduler+0x134>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f1c3 0307 	rsb	r3, r3, #7
 8009bce:	2b04      	cmp	r3, #4
 8009bd0:	d00a      	beq.n	8009be8 <xPortStartScheduler+0xb8>
	__asm volatile
 8009bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd6:	f383 8811 	msr	BASEPRI, r3
 8009bda:	f3bf 8f6f 	isb	sy
 8009bde:	f3bf 8f4f 	dsb	sy
 8009be2:	60bb      	str	r3, [r7, #8]
}
 8009be4:	bf00      	nop
 8009be6:	e7fe      	b.n	8009be6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009be8:	4b1e      	ldr	r3, [pc, #120]	; (8009c64 <xPortStartScheduler+0x134>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	021b      	lsls	r3, r3, #8
 8009bee:	4a1d      	ldr	r2, [pc, #116]	; (8009c64 <xPortStartScheduler+0x134>)
 8009bf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009bf2:	4b1c      	ldr	r3, [pc, #112]	; (8009c64 <xPortStartScheduler+0x134>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009bfa:	4a1a      	ldr	r2, [pc, #104]	; (8009c64 <xPortStartScheduler+0x134>)
 8009bfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	b2da      	uxtb	r2, r3
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009c06:	4b18      	ldr	r3, [pc, #96]	; (8009c68 <xPortStartScheduler+0x138>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	4a17      	ldr	r2, [pc, #92]	; (8009c68 <xPortStartScheduler+0x138>)
 8009c0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009c10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009c12:	4b15      	ldr	r3, [pc, #84]	; (8009c68 <xPortStartScheduler+0x138>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	4a14      	ldr	r2, [pc, #80]	; (8009c68 <xPortStartScheduler+0x138>)
 8009c18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009c1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009c1e:	f000 f8dd 	bl	8009ddc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009c22:	4b12      	ldr	r3, [pc, #72]	; (8009c6c <xPortStartScheduler+0x13c>)
 8009c24:	2200      	movs	r2, #0
 8009c26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009c28:	f000 f8fc 	bl	8009e24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009c2c:	4b10      	ldr	r3, [pc, #64]	; (8009c70 <xPortStartScheduler+0x140>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	4a0f      	ldr	r2, [pc, #60]	; (8009c70 <xPortStartScheduler+0x140>)
 8009c32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009c36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009c38:	f7ff ff66 	bl	8009b08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009c3c:	f7ff f84c 	bl	8008cd8 <vTaskSwitchContext>
	prvTaskExitError();
 8009c40:	f7ff ff22 	bl	8009a88 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009c44:	2300      	movs	r3, #0
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3718      	adds	r7, #24
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}
 8009c4e:	bf00      	nop
 8009c50:	e000ed00 	.word	0xe000ed00
 8009c54:	410fc271 	.word	0x410fc271
 8009c58:	410fc270 	.word	0x410fc270
 8009c5c:	e000e400 	.word	0xe000e400
 8009c60:	2000130c 	.word	0x2000130c
 8009c64:	20001310 	.word	0x20001310
 8009c68:	e000ed20 	.word	0xe000ed20
 8009c6c:	2000000c 	.word	0x2000000c
 8009c70:	e000ef34 	.word	0xe000ef34

08009c74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009c74:	b480      	push	{r7}
 8009c76:	b083      	sub	sp, #12
 8009c78:	af00      	add	r7, sp, #0
	__asm volatile
 8009c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c7e:	f383 8811 	msr	BASEPRI, r3
 8009c82:	f3bf 8f6f 	isb	sy
 8009c86:	f3bf 8f4f 	dsb	sy
 8009c8a:	607b      	str	r3, [r7, #4]
}
 8009c8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009c8e:	4b0f      	ldr	r3, [pc, #60]	; (8009ccc <vPortEnterCritical+0x58>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	3301      	adds	r3, #1
 8009c94:	4a0d      	ldr	r2, [pc, #52]	; (8009ccc <vPortEnterCritical+0x58>)
 8009c96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009c98:	4b0c      	ldr	r3, [pc, #48]	; (8009ccc <vPortEnterCritical+0x58>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	2b01      	cmp	r3, #1
 8009c9e:	d10f      	bne.n	8009cc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009ca0:	4b0b      	ldr	r3, [pc, #44]	; (8009cd0 <vPortEnterCritical+0x5c>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	b2db      	uxtb	r3, r3
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d00a      	beq.n	8009cc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8009caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cae:	f383 8811 	msr	BASEPRI, r3
 8009cb2:	f3bf 8f6f 	isb	sy
 8009cb6:	f3bf 8f4f 	dsb	sy
 8009cba:	603b      	str	r3, [r7, #0]
}
 8009cbc:	bf00      	nop
 8009cbe:	e7fe      	b.n	8009cbe <vPortEnterCritical+0x4a>
	}
}
 8009cc0:	bf00      	nop
 8009cc2:	370c      	adds	r7, #12
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr
 8009ccc:	2000000c 	.word	0x2000000c
 8009cd0:	e000ed04 	.word	0xe000ed04

08009cd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b083      	sub	sp, #12
 8009cd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009cda:	4b12      	ldr	r3, [pc, #72]	; (8009d24 <vPortExitCritical+0x50>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d10a      	bne.n	8009cf8 <vPortExitCritical+0x24>
	__asm volatile
 8009ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce6:	f383 8811 	msr	BASEPRI, r3
 8009cea:	f3bf 8f6f 	isb	sy
 8009cee:	f3bf 8f4f 	dsb	sy
 8009cf2:	607b      	str	r3, [r7, #4]
}
 8009cf4:	bf00      	nop
 8009cf6:	e7fe      	b.n	8009cf6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009cf8:	4b0a      	ldr	r3, [pc, #40]	; (8009d24 <vPortExitCritical+0x50>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	3b01      	subs	r3, #1
 8009cfe:	4a09      	ldr	r2, [pc, #36]	; (8009d24 <vPortExitCritical+0x50>)
 8009d00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009d02:	4b08      	ldr	r3, [pc, #32]	; (8009d24 <vPortExitCritical+0x50>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d105      	bne.n	8009d16 <vPortExitCritical+0x42>
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	f383 8811 	msr	BASEPRI, r3
}
 8009d14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009d16:	bf00      	nop
 8009d18:	370c      	adds	r7, #12
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d20:	4770      	bx	lr
 8009d22:	bf00      	nop
 8009d24:	2000000c 	.word	0x2000000c
	...

08009d30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009d30:	f3ef 8009 	mrs	r0, PSP
 8009d34:	f3bf 8f6f 	isb	sy
 8009d38:	4b15      	ldr	r3, [pc, #84]	; (8009d90 <pxCurrentTCBConst>)
 8009d3a:	681a      	ldr	r2, [r3, #0]
 8009d3c:	f01e 0f10 	tst.w	lr, #16
 8009d40:	bf08      	it	eq
 8009d42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009d46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d4a:	6010      	str	r0, [r2, #0]
 8009d4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009d50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009d54:	f380 8811 	msr	BASEPRI, r0
 8009d58:	f3bf 8f4f 	dsb	sy
 8009d5c:	f3bf 8f6f 	isb	sy
 8009d60:	f7fe ffba 	bl	8008cd8 <vTaskSwitchContext>
 8009d64:	f04f 0000 	mov.w	r0, #0
 8009d68:	f380 8811 	msr	BASEPRI, r0
 8009d6c:	bc09      	pop	{r0, r3}
 8009d6e:	6819      	ldr	r1, [r3, #0]
 8009d70:	6808      	ldr	r0, [r1, #0]
 8009d72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d76:	f01e 0f10 	tst.w	lr, #16
 8009d7a:	bf08      	it	eq
 8009d7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009d80:	f380 8809 	msr	PSP, r0
 8009d84:	f3bf 8f6f 	isb	sy
 8009d88:	4770      	bx	lr
 8009d8a:	bf00      	nop
 8009d8c:	f3af 8000 	nop.w

08009d90 <pxCurrentTCBConst>:
 8009d90:	20000ce0 	.word	0x20000ce0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009d94:	bf00      	nop
 8009d96:	bf00      	nop

08009d98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b082      	sub	sp, #8
 8009d9c:	af00      	add	r7, sp, #0
	__asm volatile
 8009d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da2:	f383 8811 	msr	BASEPRI, r3
 8009da6:	f3bf 8f6f 	isb	sy
 8009daa:	f3bf 8f4f 	dsb	sy
 8009dae:	607b      	str	r3, [r7, #4]
}
 8009db0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009db2:	f7fe fed7 	bl	8008b64 <xTaskIncrementTick>
 8009db6:	4603      	mov	r3, r0
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d003      	beq.n	8009dc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009dbc:	4b06      	ldr	r3, [pc, #24]	; (8009dd8 <xPortSysTickHandler+0x40>)
 8009dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dc2:	601a      	str	r2, [r3, #0]
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	f383 8811 	msr	BASEPRI, r3
}
 8009dce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009dd0:	bf00      	nop
 8009dd2:	3708      	adds	r7, #8
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}
 8009dd8:	e000ed04 	.word	0xe000ed04

08009ddc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009ddc:	b480      	push	{r7}
 8009dde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009de0:	4b0b      	ldr	r3, [pc, #44]	; (8009e10 <vPortSetupTimerInterrupt+0x34>)
 8009de2:	2200      	movs	r2, #0
 8009de4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009de6:	4b0b      	ldr	r3, [pc, #44]	; (8009e14 <vPortSetupTimerInterrupt+0x38>)
 8009de8:	2200      	movs	r2, #0
 8009dea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009dec:	4b0a      	ldr	r3, [pc, #40]	; (8009e18 <vPortSetupTimerInterrupt+0x3c>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4a0a      	ldr	r2, [pc, #40]	; (8009e1c <vPortSetupTimerInterrupt+0x40>)
 8009df2:	fba2 2303 	umull	r2, r3, r2, r3
 8009df6:	099b      	lsrs	r3, r3, #6
 8009df8:	4a09      	ldr	r2, [pc, #36]	; (8009e20 <vPortSetupTimerInterrupt+0x44>)
 8009dfa:	3b01      	subs	r3, #1
 8009dfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009dfe:	4b04      	ldr	r3, [pc, #16]	; (8009e10 <vPortSetupTimerInterrupt+0x34>)
 8009e00:	2207      	movs	r2, #7
 8009e02:	601a      	str	r2, [r3, #0]
}
 8009e04:	bf00      	nop
 8009e06:	46bd      	mov	sp, r7
 8009e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0c:	4770      	bx	lr
 8009e0e:	bf00      	nop
 8009e10:	e000e010 	.word	0xe000e010
 8009e14:	e000e018 	.word	0xe000e018
 8009e18:	20000000 	.word	0x20000000
 8009e1c:	10624dd3 	.word	0x10624dd3
 8009e20:	e000e014 	.word	0xe000e014

08009e24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009e24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009e34 <vPortEnableVFP+0x10>
 8009e28:	6801      	ldr	r1, [r0, #0]
 8009e2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009e2e:	6001      	str	r1, [r0, #0]
 8009e30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009e32:	bf00      	nop
 8009e34:	e000ed88 	.word	0xe000ed88

08009e38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009e38:	b480      	push	{r7}
 8009e3a:	b085      	sub	sp, #20
 8009e3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009e3e:	f3ef 8305 	mrs	r3, IPSR
 8009e42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	2b0f      	cmp	r3, #15
 8009e48:	d914      	bls.n	8009e74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009e4a:	4a17      	ldr	r2, [pc, #92]	; (8009ea8 <vPortValidateInterruptPriority+0x70>)
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	4413      	add	r3, r2
 8009e50:	781b      	ldrb	r3, [r3, #0]
 8009e52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009e54:	4b15      	ldr	r3, [pc, #84]	; (8009eac <vPortValidateInterruptPriority+0x74>)
 8009e56:	781b      	ldrb	r3, [r3, #0]
 8009e58:	7afa      	ldrb	r2, [r7, #11]
 8009e5a:	429a      	cmp	r2, r3
 8009e5c:	d20a      	bcs.n	8009e74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e62:	f383 8811 	msr	BASEPRI, r3
 8009e66:	f3bf 8f6f 	isb	sy
 8009e6a:	f3bf 8f4f 	dsb	sy
 8009e6e:	607b      	str	r3, [r7, #4]
}
 8009e70:	bf00      	nop
 8009e72:	e7fe      	b.n	8009e72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009e74:	4b0e      	ldr	r3, [pc, #56]	; (8009eb0 <vPortValidateInterruptPriority+0x78>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009e7c:	4b0d      	ldr	r3, [pc, #52]	; (8009eb4 <vPortValidateInterruptPriority+0x7c>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	429a      	cmp	r2, r3
 8009e82:	d90a      	bls.n	8009e9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e88:	f383 8811 	msr	BASEPRI, r3
 8009e8c:	f3bf 8f6f 	isb	sy
 8009e90:	f3bf 8f4f 	dsb	sy
 8009e94:	603b      	str	r3, [r7, #0]
}
 8009e96:	bf00      	nop
 8009e98:	e7fe      	b.n	8009e98 <vPortValidateInterruptPriority+0x60>
	}
 8009e9a:	bf00      	nop
 8009e9c:	3714      	adds	r7, #20
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea4:	4770      	bx	lr
 8009ea6:	bf00      	nop
 8009ea8:	e000e3f0 	.word	0xe000e3f0
 8009eac:	2000130c 	.word	0x2000130c
 8009eb0:	e000ed0c 	.word	0xe000ed0c
 8009eb4:	20001310 	.word	0x20001310

08009eb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b08a      	sub	sp, #40	; 0x28
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009ec4:	f7fe fd92 	bl	80089ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009ec8:	4b5b      	ldr	r3, [pc, #364]	; (800a038 <pvPortMalloc+0x180>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d101      	bne.n	8009ed4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009ed0:	f000 f920 	bl	800a114 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009ed4:	4b59      	ldr	r3, [pc, #356]	; (800a03c <pvPortMalloc+0x184>)
 8009ed6:	681a      	ldr	r2, [r3, #0]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	4013      	ands	r3, r2
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	f040 8093 	bne.w	800a008 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d01d      	beq.n	8009f24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009ee8:	2208      	movs	r2, #8
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	4413      	add	r3, r2
 8009eee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f003 0307 	and.w	r3, r3, #7
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d014      	beq.n	8009f24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f023 0307 	bic.w	r3, r3, #7
 8009f00:	3308      	adds	r3, #8
 8009f02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f003 0307 	and.w	r3, r3, #7
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d00a      	beq.n	8009f24 <pvPortMalloc+0x6c>
	__asm volatile
 8009f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f12:	f383 8811 	msr	BASEPRI, r3
 8009f16:	f3bf 8f6f 	isb	sy
 8009f1a:	f3bf 8f4f 	dsb	sy
 8009f1e:	617b      	str	r3, [r7, #20]
}
 8009f20:	bf00      	nop
 8009f22:	e7fe      	b.n	8009f22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d06e      	beq.n	800a008 <pvPortMalloc+0x150>
 8009f2a:	4b45      	ldr	r3, [pc, #276]	; (800a040 <pvPortMalloc+0x188>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	687a      	ldr	r2, [r7, #4]
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d869      	bhi.n	800a008 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009f34:	4b43      	ldr	r3, [pc, #268]	; (800a044 <pvPortMalloc+0x18c>)
 8009f36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009f38:	4b42      	ldr	r3, [pc, #264]	; (800a044 <pvPortMalloc+0x18c>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f3e:	e004      	b.n	8009f4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f4c:	685b      	ldr	r3, [r3, #4]
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	429a      	cmp	r2, r3
 8009f52:	d903      	bls.n	8009f5c <pvPortMalloc+0xa4>
 8009f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d1f1      	bne.n	8009f40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009f5c:	4b36      	ldr	r3, [pc, #216]	; (800a038 <pvPortMalloc+0x180>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d050      	beq.n	800a008 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009f66:	6a3b      	ldr	r3, [r7, #32]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	2208      	movs	r2, #8
 8009f6c:	4413      	add	r3, r2
 8009f6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f72:	681a      	ldr	r2, [r3, #0]
 8009f74:	6a3b      	ldr	r3, [r7, #32]
 8009f76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f7a:	685a      	ldr	r2, [r3, #4]
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	1ad2      	subs	r2, r2, r3
 8009f80:	2308      	movs	r3, #8
 8009f82:	005b      	lsls	r3, r3, #1
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d91f      	bls.n	8009fc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	4413      	add	r3, r2
 8009f8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f90:	69bb      	ldr	r3, [r7, #24]
 8009f92:	f003 0307 	and.w	r3, r3, #7
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d00a      	beq.n	8009fb0 <pvPortMalloc+0xf8>
	__asm volatile
 8009f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f9e:	f383 8811 	msr	BASEPRI, r3
 8009fa2:	f3bf 8f6f 	isb	sy
 8009fa6:	f3bf 8f4f 	dsb	sy
 8009faa:	613b      	str	r3, [r7, #16]
}
 8009fac:	bf00      	nop
 8009fae:	e7fe      	b.n	8009fae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb2:	685a      	ldr	r2, [r3, #4]
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	1ad2      	subs	r2, r2, r3
 8009fb8:	69bb      	ldr	r3, [r7, #24]
 8009fba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fbe:	687a      	ldr	r2, [r7, #4]
 8009fc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009fc2:	69b8      	ldr	r0, [r7, #24]
 8009fc4:	f000 f908 	bl	800a1d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009fc8:	4b1d      	ldr	r3, [pc, #116]	; (800a040 <pvPortMalloc+0x188>)
 8009fca:	681a      	ldr	r2, [r3, #0]
 8009fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fce:	685b      	ldr	r3, [r3, #4]
 8009fd0:	1ad3      	subs	r3, r2, r3
 8009fd2:	4a1b      	ldr	r2, [pc, #108]	; (800a040 <pvPortMalloc+0x188>)
 8009fd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009fd6:	4b1a      	ldr	r3, [pc, #104]	; (800a040 <pvPortMalloc+0x188>)
 8009fd8:	681a      	ldr	r2, [r3, #0]
 8009fda:	4b1b      	ldr	r3, [pc, #108]	; (800a048 <pvPortMalloc+0x190>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	429a      	cmp	r2, r3
 8009fe0:	d203      	bcs.n	8009fea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009fe2:	4b17      	ldr	r3, [pc, #92]	; (800a040 <pvPortMalloc+0x188>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	4a18      	ldr	r2, [pc, #96]	; (800a048 <pvPortMalloc+0x190>)
 8009fe8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fec:	685a      	ldr	r2, [r3, #4]
 8009fee:	4b13      	ldr	r3, [pc, #76]	; (800a03c <pvPortMalloc+0x184>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	431a      	orrs	r2, r3
 8009ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009ffe:	4b13      	ldr	r3, [pc, #76]	; (800a04c <pvPortMalloc+0x194>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	3301      	adds	r3, #1
 800a004:	4a11      	ldr	r2, [pc, #68]	; (800a04c <pvPortMalloc+0x194>)
 800a006:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a008:	f7fe fcfe 	bl	8008a08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a00c:	69fb      	ldr	r3, [r7, #28]
 800a00e:	f003 0307 	and.w	r3, r3, #7
 800a012:	2b00      	cmp	r3, #0
 800a014:	d00a      	beq.n	800a02c <pvPortMalloc+0x174>
	__asm volatile
 800a016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a01a:	f383 8811 	msr	BASEPRI, r3
 800a01e:	f3bf 8f6f 	isb	sy
 800a022:	f3bf 8f4f 	dsb	sy
 800a026:	60fb      	str	r3, [r7, #12]
}
 800a028:	bf00      	nop
 800a02a:	e7fe      	b.n	800a02a <pvPortMalloc+0x172>
	return pvReturn;
 800a02c:	69fb      	ldr	r3, [r7, #28]
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3728      	adds	r7, #40	; 0x28
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}
 800a036:	bf00      	nop
 800a038:	20004f1c 	.word	0x20004f1c
 800a03c:	20004f30 	.word	0x20004f30
 800a040:	20004f20 	.word	0x20004f20
 800a044:	20004f14 	.word	0x20004f14
 800a048:	20004f24 	.word	0x20004f24
 800a04c:	20004f28 	.word	0x20004f28

0800a050 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b086      	sub	sp, #24
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d04d      	beq.n	800a0fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a062:	2308      	movs	r3, #8
 800a064:	425b      	negs	r3, r3
 800a066:	697a      	ldr	r2, [r7, #20]
 800a068:	4413      	add	r3, r2
 800a06a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	685a      	ldr	r2, [r3, #4]
 800a074:	4b24      	ldr	r3, [pc, #144]	; (800a108 <vPortFree+0xb8>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	4013      	ands	r3, r2
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d10a      	bne.n	800a094 <vPortFree+0x44>
	__asm volatile
 800a07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a082:	f383 8811 	msr	BASEPRI, r3
 800a086:	f3bf 8f6f 	isb	sy
 800a08a:	f3bf 8f4f 	dsb	sy
 800a08e:	60fb      	str	r3, [r7, #12]
}
 800a090:	bf00      	nop
 800a092:	e7fe      	b.n	800a092 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d00a      	beq.n	800a0b2 <vPortFree+0x62>
	__asm volatile
 800a09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a0:	f383 8811 	msr	BASEPRI, r3
 800a0a4:	f3bf 8f6f 	isb	sy
 800a0a8:	f3bf 8f4f 	dsb	sy
 800a0ac:	60bb      	str	r3, [r7, #8]
}
 800a0ae:	bf00      	nop
 800a0b0:	e7fe      	b.n	800a0b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	685a      	ldr	r2, [r3, #4]
 800a0b6:	4b14      	ldr	r3, [pc, #80]	; (800a108 <vPortFree+0xb8>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	4013      	ands	r3, r2
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d01e      	beq.n	800a0fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a0c0:	693b      	ldr	r3, [r7, #16]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d11a      	bne.n	800a0fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	685a      	ldr	r2, [r3, #4]
 800a0cc:	4b0e      	ldr	r3, [pc, #56]	; (800a108 <vPortFree+0xb8>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	43db      	mvns	r3, r3
 800a0d2:	401a      	ands	r2, r3
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a0d8:	f7fe fc88 	bl	80089ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	685a      	ldr	r2, [r3, #4]
 800a0e0:	4b0a      	ldr	r3, [pc, #40]	; (800a10c <vPortFree+0xbc>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	4413      	add	r3, r2
 800a0e6:	4a09      	ldr	r2, [pc, #36]	; (800a10c <vPortFree+0xbc>)
 800a0e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a0ea:	6938      	ldr	r0, [r7, #16]
 800a0ec:	f000 f874 	bl	800a1d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a0f0:	4b07      	ldr	r3, [pc, #28]	; (800a110 <vPortFree+0xc0>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	3301      	adds	r3, #1
 800a0f6:	4a06      	ldr	r2, [pc, #24]	; (800a110 <vPortFree+0xc0>)
 800a0f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a0fa:	f7fe fc85 	bl	8008a08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a0fe:	bf00      	nop
 800a100:	3718      	adds	r7, #24
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}
 800a106:	bf00      	nop
 800a108:	20004f30 	.word	0x20004f30
 800a10c:	20004f20 	.word	0x20004f20
 800a110:	20004f2c 	.word	0x20004f2c

0800a114 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a114:	b480      	push	{r7}
 800a116:	b085      	sub	sp, #20
 800a118:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a11a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a11e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a120:	4b27      	ldr	r3, [pc, #156]	; (800a1c0 <prvHeapInit+0xac>)
 800a122:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	f003 0307 	and.w	r3, r3, #7
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d00c      	beq.n	800a148 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	3307      	adds	r3, #7
 800a132:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	f023 0307 	bic.w	r3, r3, #7
 800a13a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a13c:	68ba      	ldr	r2, [r7, #8]
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	1ad3      	subs	r3, r2, r3
 800a142:	4a1f      	ldr	r2, [pc, #124]	; (800a1c0 <prvHeapInit+0xac>)
 800a144:	4413      	add	r3, r2
 800a146:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a14c:	4a1d      	ldr	r2, [pc, #116]	; (800a1c4 <prvHeapInit+0xb0>)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a152:	4b1c      	ldr	r3, [pc, #112]	; (800a1c4 <prvHeapInit+0xb0>)
 800a154:	2200      	movs	r2, #0
 800a156:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	68ba      	ldr	r2, [r7, #8]
 800a15c:	4413      	add	r3, r2
 800a15e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a160:	2208      	movs	r2, #8
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	1a9b      	subs	r3, r3, r2
 800a166:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f023 0307 	bic.w	r3, r3, #7
 800a16e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	4a15      	ldr	r2, [pc, #84]	; (800a1c8 <prvHeapInit+0xb4>)
 800a174:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a176:	4b14      	ldr	r3, [pc, #80]	; (800a1c8 <prvHeapInit+0xb4>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	2200      	movs	r2, #0
 800a17c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a17e:	4b12      	ldr	r3, [pc, #72]	; (800a1c8 <prvHeapInit+0xb4>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	2200      	movs	r2, #0
 800a184:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	68fa      	ldr	r2, [r7, #12]
 800a18e:	1ad2      	subs	r2, r2, r3
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a194:	4b0c      	ldr	r3, [pc, #48]	; (800a1c8 <prvHeapInit+0xb4>)
 800a196:	681a      	ldr	r2, [r3, #0]
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	4a0a      	ldr	r2, [pc, #40]	; (800a1cc <prvHeapInit+0xb8>)
 800a1a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	685b      	ldr	r3, [r3, #4]
 800a1a8:	4a09      	ldr	r2, [pc, #36]	; (800a1d0 <prvHeapInit+0xbc>)
 800a1aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a1ac:	4b09      	ldr	r3, [pc, #36]	; (800a1d4 <prvHeapInit+0xc0>)
 800a1ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a1b2:	601a      	str	r2, [r3, #0]
}
 800a1b4:	bf00      	nop
 800a1b6:	3714      	adds	r7, #20
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr
 800a1c0:	20001314 	.word	0x20001314
 800a1c4:	20004f14 	.word	0x20004f14
 800a1c8:	20004f1c 	.word	0x20004f1c
 800a1cc:	20004f24 	.word	0x20004f24
 800a1d0:	20004f20 	.word	0x20004f20
 800a1d4:	20004f30 	.word	0x20004f30

0800a1d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b085      	sub	sp, #20
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a1e0:	4b28      	ldr	r3, [pc, #160]	; (800a284 <prvInsertBlockIntoFreeList+0xac>)
 800a1e2:	60fb      	str	r3, [r7, #12]
 800a1e4:	e002      	b.n	800a1ec <prvInsertBlockIntoFreeList+0x14>
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	60fb      	str	r3, [r7, #12]
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	687a      	ldr	r2, [r7, #4]
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d8f7      	bhi.n	800a1e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	685b      	ldr	r3, [r3, #4]
 800a1fe:	68ba      	ldr	r2, [r7, #8]
 800a200:	4413      	add	r3, r2
 800a202:	687a      	ldr	r2, [r7, #4]
 800a204:	429a      	cmp	r2, r3
 800a206:	d108      	bne.n	800a21a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	685a      	ldr	r2, [r3, #4]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	685b      	ldr	r3, [r3, #4]
 800a210:	441a      	add	r2, r3
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	685b      	ldr	r3, [r3, #4]
 800a222:	68ba      	ldr	r2, [r7, #8]
 800a224:	441a      	add	r2, r3
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	429a      	cmp	r2, r3
 800a22c:	d118      	bne.n	800a260 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681a      	ldr	r2, [r3, #0]
 800a232:	4b15      	ldr	r3, [pc, #84]	; (800a288 <prvInsertBlockIntoFreeList+0xb0>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	429a      	cmp	r2, r3
 800a238:	d00d      	beq.n	800a256 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	685a      	ldr	r2, [r3, #4]
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	685b      	ldr	r3, [r3, #4]
 800a244:	441a      	add	r2, r3
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	681a      	ldr	r2, [r3, #0]
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	601a      	str	r2, [r3, #0]
 800a254:	e008      	b.n	800a268 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a256:	4b0c      	ldr	r3, [pc, #48]	; (800a288 <prvInsertBlockIntoFreeList+0xb0>)
 800a258:	681a      	ldr	r2, [r3, #0]
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	601a      	str	r2, [r3, #0]
 800a25e:	e003      	b.n	800a268 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681a      	ldr	r2, [r3, #0]
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a268:	68fa      	ldr	r2, [r7, #12]
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	429a      	cmp	r2, r3
 800a26e:	d002      	beq.n	800a276 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	687a      	ldr	r2, [r7, #4]
 800a274:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a276:	bf00      	nop
 800a278:	3714      	adds	r7, #20
 800a27a:	46bd      	mov	sp, r7
 800a27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a280:	4770      	bx	lr
 800a282:	bf00      	nop
 800a284:	20004f14 	.word	0x20004f14
 800a288:	20004f1c 	.word	0x20004f1c

0800a28c <databaseQueueInit>:
QueueHandle_t sensorDataQueue = NULL;
LoraTransmit loraTx;
LoraTransmit loraRx;

void databaseQueueInit(uint16_t len, uint16_t size)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b082      	sub	sp, #8
 800a290:	af00      	add	r7, sp, #0
 800a292:	4603      	mov	r3, r0
 800a294:	460a      	mov	r2, r1
 800a296:	80fb      	strh	r3, [r7, #6]
 800a298:	4613      	mov	r3, r2
 800a29a:	80bb      	strh	r3, [r7, #4]
	sensorDataQueue = xQueueCreate(len, size);
 800a29c:	88fb      	ldrh	r3, [r7, #6]
 800a29e:	88b9      	ldrh	r1, [r7, #4]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f7fd fcb6 	bl	8007c14 <xQueueGenericCreate>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	4a03      	ldr	r2, [pc, #12]	; (800a2b8 <databaseQueueInit+0x2c>)
 800a2ac:	6013      	str	r3, [r2, #0]
}
 800a2ae:	bf00      	nop
 800a2b0:	3708      	adds	r7, #8
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
 800a2b6:	bf00      	nop
 800a2b8:	20004f34 	.word	0x20004f34

0800a2bc <GPS_Init>:
//////////////////////////////////////////////////////////////
/*
 * This function start the uart interrupt
 */
void GPS_Init(UART_HandleTypeDef *uart, GPS *gps)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b082      	sub	sp, #8
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	6039      	str	r1, [r7, #0]
	gpsUart = uart;
 800a2c6:	4a08      	ldr	r2, [pc, #32]	; (800a2e8 <GPS_Init+0x2c>)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6013      	str	r3, [r2, #0]
	_gps = gps;
 800a2cc:	4a07      	ldr	r2, [pc, #28]	; (800a2ec <GPS_Init+0x30>)
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(gpsUart, &rxGps , 1);
 800a2d2:	4b05      	ldr	r3, [pc, #20]	; (800a2e8 <GPS_Init+0x2c>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	4905      	ldr	r1, [pc, #20]	; (800a2f0 <GPS_Init+0x34>)
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f7fc fb9e 	bl	8006a1c <HAL_UART_Receive_IT>
}
 800a2e0:	bf00      	nop
 800a2e2:	3708      	adds	r7, #8
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}
 800a2e8:	20004f6c 	.word	0x20004f6c
 800a2ec:	20005070 	.word	0x20005070
 800a2f0:	2000506c 	.word	0x2000506c

0800a2f4 <GPS_Callback>:
//////////////////////////////////////////////////////////////
/*
 * When rx pin read, store the datas in ringBuff structure
 */
void GPS_Callback(void)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(gpsUart, &rxGps, 1);
 800a2f8:	4b15      	ldr	r3, [pc, #84]	; (800a350 <GPS_Callback+0x5c>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	2201      	movs	r2, #1
 800a2fe:	4915      	ldr	r1, [pc, #84]	; (800a354 <GPS_Callback+0x60>)
 800a300:	4618      	mov	r0, r3
 800a302:	f7fc fb8b 	bl	8006a1c <HAL_UART_Receive_IT>
	ringBuff.rxGps[HEAD_INCREASE] = rxGps;
 800a306:	4b14      	ldr	r3, [pc, #80]	; (800a358 <GPS_Callback+0x64>)
 800a308:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 800a30c:	b2db      	uxtb	r3, r3
 800a30e:	3301      	adds	r3, #1
 800a310:	461a      	mov	r2, r3
 800a312:	4b12      	ldr	r3, [pc, #72]	; (800a35c <GPS_Callback+0x68>)
 800a314:	fba3 1302 	umull	r1, r3, r3, r2
 800a318:	091b      	lsrs	r3, r3, #4
 800a31a:	21fa      	movs	r1, #250	; 0xfa
 800a31c:	fb01 f303 	mul.w	r3, r1, r3
 800a320:	1ad3      	subs	r3, r2, r3
 800a322:	b2da      	uxtb	r2, r3
 800a324:	4b0c      	ldr	r3, [pc, #48]	; (800a358 <GPS_Callback+0x64>)
 800a326:	4611      	mov	r1, r2
 800a328:	f883 10fb 	strb.w	r1, [r3, #251]	; 0xfb
 800a32c:	4b09      	ldr	r3, [pc, #36]	; (800a354 <GPS_Callback+0x60>)
 800a32e:	7819      	ldrb	r1, [r3, #0]
 800a330:	4b09      	ldr	r3, [pc, #36]	; (800a358 <GPS_Callback+0x64>)
 800a332:	5499      	strb	r1, [r3, r2]
	if(rxGps == '\r')	GPS_Parse();
 800a334:	4b07      	ldr	r3, [pc, #28]	; (800a354 <GPS_Callback+0x60>)
 800a336:	781b      	ldrb	r3, [r3, #0]
 800a338:	2b0d      	cmp	r3, #13
 800a33a:	d101      	bne.n	800a340 <GPS_Callback+0x4c>
 800a33c:	f000 f812 	bl	800a364 <GPS_Parse>
	gpsIrqTime = HAL_GetTick();
 800a340:	f7f8 f88e 	bl	8002460 <HAL_GetTick>
 800a344:	4603      	mov	r3, r0
 800a346:	4a06      	ldr	r2, [pc, #24]	; (800a360 <GPS_Callback+0x6c>)
 800a348:	6013      	str	r3, [r2, #0]
}
 800a34a:	bf00      	nop
 800a34c:	bd80      	pop	{r7, pc}
 800a34e:	bf00      	nop
 800a350:	20004f6c 	.word	0x20004f6c
 800a354:	2000506c 	.word	0x2000506c
 800a358:	20004f70 	.word	0x20004f70
 800a35c:	10624dd3 	.word	0x10624dd3
 800a360:	20005074 	.word	0x20005074

0800a364 <GPS_Parse>:
/////////////////////////////////////////////////////////////
/*
 * This function parses parameters and store them in GPS structure
 */
GPS_State GPS_Parse()
{
 800a364:	b580      	push	{r7, lr}
 800a366:	af00      	add	r7, sp, #0
	while(TAIL_READ != '$')					//tail değerini $ olana kadar arttırır
 800a368:	e01d      	b.n	800a3a6 <GPS_Parse+0x42>
	{
		if(ringBuff.tail == ringBuff.head) return NO_CONNECTION;
 800a36a:	4b47      	ldr	r3, [pc, #284]	; (800a488 <GPS_Parse+0x124>)
 800a36c:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a370:	b2da      	uxtb	r2, r3
 800a372:	4b45      	ldr	r3, [pc, #276]	; (800a488 <GPS_Parse+0x124>)
 800a374:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 800a378:	b2db      	uxtb	r3, r3
 800a37a:	429a      	cmp	r2, r3
 800a37c:	d101      	bne.n	800a382 <GPS_Parse+0x1e>
 800a37e:	2300      	movs	r3, #0
 800a380:	e07f      	b.n	800a482 <GPS_Parse+0x11e>
		TAIL_INCREASE;						//tail değerini arttırır
 800a382:	4b41      	ldr	r3, [pc, #260]	; (800a488 <GPS_Parse+0x124>)
 800a384:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a388:	b2db      	uxtb	r3, r3
 800a38a:	3301      	adds	r3, #1
 800a38c:	461a      	mov	r2, r3
 800a38e:	4b3f      	ldr	r3, [pc, #252]	; (800a48c <GPS_Parse+0x128>)
 800a390:	fba3 1302 	umull	r1, r3, r3, r2
 800a394:	091b      	lsrs	r3, r3, #4
 800a396:	21fa      	movs	r1, #250	; 0xfa
 800a398:	fb01 f303 	mul.w	r3, r1, r3
 800a39c:	1ad3      	subs	r3, r2, r3
 800a39e:	b2da      	uxtb	r2, r3
 800a3a0:	4b39      	ldr	r3, [pc, #228]	; (800a488 <GPS_Parse+0x124>)
 800a3a2:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
	while(TAIL_READ != '$')					//tail değerini $ olana kadar arttırır
 800a3a6:	4b38      	ldr	r3, [pc, #224]	; (800a488 <GPS_Parse+0x124>)
 800a3a8:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a3ac:	b2db      	uxtb	r3, r3
 800a3ae:	4a37      	ldr	r2, [pc, #220]	; (800a48c <GPS_Parse+0x128>)
 800a3b0:	fba2 1203 	umull	r1, r2, r2, r3
 800a3b4:	0912      	lsrs	r2, r2, #4
 800a3b6:	21fa      	movs	r1, #250	; 0xfa
 800a3b8:	fb01 f202 	mul.w	r2, r1, r2
 800a3bc:	1a9b      	subs	r3, r3, r2
 800a3be:	b2db      	uxtb	r3, r3
 800a3c0:	461a      	mov	r2, r3
 800a3c2:	4b31      	ldr	r3, [pc, #196]	; (800a488 <GPS_Parse+0x124>)
 800a3c4:	5c9b      	ldrb	r3, [r3, r2]
 800a3c6:	2b24      	cmp	r3, #36	; 0x24
 800a3c8:	d1cf      	bne.n	800a36a <GPS_Parse+0x6>
	}

	TAIL_INCREASE;							//$ ifadesinden sonraki kısma geçer
 800a3ca:	4b2f      	ldr	r3, [pc, #188]	; (800a488 <GPS_Parse+0x124>)
 800a3cc:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a3d0:	b2db      	uxtb	r3, r3
 800a3d2:	3301      	adds	r3, #1
 800a3d4:	461a      	mov	r2, r3
 800a3d6:	4b2d      	ldr	r3, [pc, #180]	; (800a48c <GPS_Parse+0x128>)
 800a3d8:	fba3 1302 	umull	r1, r3, r3, r2
 800a3dc:	091b      	lsrs	r3, r3, #4
 800a3de:	21fa      	movs	r1, #250	; 0xfa
 800a3e0:	fb01 f303 	mul.w	r3, r1, r3
 800a3e4:	1ad3      	subs	r3, r2, r3
 800a3e6:	b2da      	uxtb	r2, r3
 800a3e8:	4b27      	ldr	r3, [pc, #156]	; (800a488 <GPS_Parse+0x124>)
 800a3ea:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa

	if(strncmp((char*)&ringBuff.rxGps[ringBuff.tail], GPGGA_STR, 5) == 0)
 800a3ee:	4b26      	ldr	r3, [pc, #152]	; (800a488 <GPS_Parse+0x124>)
 800a3f0:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a3f4:	b2db      	uxtb	r3, r3
 800a3f6:	461a      	mov	r2, r3
 800a3f8:	4b23      	ldr	r3, [pc, #140]	; (800a488 <GPS_Parse+0x124>)
 800a3fa:	4413      	add	r3, r2
 800a3fc:	2205      	movs	r2, #5
 800a3fe:	4924      	ldr	r1, [pc, #144]	; (800a490 <GPS_Parse+0x12c>)
 800a400:	4618      	mov	r0, r3
 800a402:	f003 fd4d 	bl	800dea0 <strncmp>
 800a406:	4603      	mov	r3, r0
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d103      	bne.n	800a414 <GPS_Parse+0xb0>
	{
		return GPS_GPGGA_Parse();
 800a40c:	f000 fd5c 	bl	800aec8 <GPS_GPGGA_Parse>
 800a410:	4603      	mov	r3, r0
 800a412:	e036      	b.n	800a482 <GPS_Parse+0x11e>
	}
	else if(strncmp((char*)&ringBuff.rxGps[ringBuff.tail], GPRMC_STR, 5) == 0)
 800a414:	4b1c      	ldr	r3, [pc, #112]	; (800a488 <GPS_Parse+0x124>)
 800a416:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a41a:	b2db      	uxtb	r3, r3
 800a41c:	461a      	mov	r2, r3
 800a41e:	4b1a      	ldr	r3, [pc, #104]	; (800a488 <GPS_Parse+0x124>)
 800a420:	4413      	add	r3, r2
 800a422:	2205      	movs	r2, #5
 800a424:	491b      	ldr	r1, [pc, #108]	; (800a494 <GPS_Parse+0x130>)
 800a426:	4618      	mov	r0, r3
 800a428:	f003 fd3a 	bl	800dea0 <strncmp>
 800a42c:	4603      	mov	r3, r0
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d10b      	bne.n	800a44a <GPS_Parse+0xe6>
	{
		return (_gps->gpsState == POSITION_FIXED)? GPS_GPRMC_Parse() : NO_CONNECTION;
 800a432:	4b19      	ldr	r3, [pc, #100]	; (800a498 <GPS_Parse+0x134>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a43a:	2b02      	cmp	r3, #2
 800a43c:	d103      	bne.n	800a446 <GPS_Parse+0xe2>
 800a43e:	f000 f82f 	bl	800a4a0 <GPS_GPRMC_Parse>
 800a442:	4603      	mov	r3, r0
 800a444:	e01d      	b.n	800a482 <GPS_Parse+0x11e>
 800a446:	2300      	movs	r3, #0
 800a448:	e01b      	b.n	800a482 <GPS_Parse+0x11e>
	}
	else if(strncmp((char*)&ringBuff.rxGps[ringBuff.tail], GPVTG_STR, 5) == 0)
 800a44a:	4b0f      	ldr	r3, [pc, #60]	; (800a488 <GPS_Parse+0x124>)
 800a44c:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a450:	b2db      	uxtb	r3, r3
 800a452:	461a      	mov	r2, r3
 800a454:	4b0c      	ldr	r3, [pc, #48]	; (800a488 <GPS_Parse+0x124>)
 800a456:	4413      	add	r3, r2
 800a458:	2205      	movs	r2, #5
 800a45a:	4910      	ldr	r1, [pc, #64]	; (800a49c <GPS_Parse+0x138>)
 800a45c:	4618      	mov	r0, r3
 800a45e:	f003 fd1f 	bl	800dea0 <strncmp>
 800a462:	4603      	mov	r3, r0
 800a464:	2b00      	cmp	r3, #0
 800a466:	d10b      	bne.n	800a480 <GPS_Parse+0x11c>
	{
		return (_gps->gpsState == POSITION_FIXED)? GPS_GPVTG_Parse() : NO_CONNECTION;
 800a468:	4b0b      	ldr	r3, [pc, #44]	; (800a498 <GPS_Parse+0x134>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a470:	2b02      	cmp	r3, #2
 800a472:	d103      	bne.n	800a47c <GPS_Parse+0x118>
 800a474:	f000 ff28 	bl	800b2c8 <GPS_GPVTG_Parse>
 800a478:	4603      	mov	r3, r0
 800a47a:	e002      	b.n	800a482 <GPS_Parse+0x11e>
 800a47c:	2300      	movs	r3, #0
 800a47e:	e000      	b.n	800a482 <GPS_Parse+0x11e>
	}
	return NO_CONNECTION;
 800a480:	2300      	movs	r3, #0
}
 800a482:	4618      	mov	r0, r3
 800a484:	bd80      	pop	{r7, pc}
 800a486:	bf00      	nop
 800a488:	20004f70 	.word	0x20004f70
 800a48c:	10624dd3 	.word	0x10624dd3
 800a490:	0800fc40 	.word	0x0800fc40
 800a494:	0800fc48 	.word	0x0800fc48
 800a498:	20005070 	.word	0x20005070
 800a49c:	0800fc50 	.word	0x0800fc50

0800a4a0 <GPS_GPRMC_Parse>:
/*
 * GPRMC verilerini çözer ve gps değerine atar
 * -tarih, saat, enlem, boylam-
 */
GPS_State GPS_GPRMC_Parse()
{
 800a4a0:	b5b0      	push	{r4, r5, r7, lr}
 800a4a2:	af00      	add	r7, sp, #0
	if(!GPS_CheckSumControl(&ringBuff.rxGps[ringBuff.tail]))
 800a4a4:	4b07      	ldr	r3, [pc, #28]	; (800a4c4 <GPS_GPRMC_Parse+0x24>)
 800a4a6:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a4aa:	b2db      	uxtb	r3, r3
 800a4ac:	461a      	mov	r2, r3
 800a4ae:	4b05      	ldr	r3, [pc, #20]	; (800a4c4 <GPS_GPRMC_Parse+0x24>)
 800a4b0:	4413      	add	r3, r2
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f001 f8d8 	bl	800b668 <GPS_CheckSumControl>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d104      	bne.n	800a4c8 <GPS_GPRMC_Parse+0x28>
	{
		return WRONG_DATA;
 800a4be:	2301      	movs	r3, #1
 800a4c0:	f000 bcfa 	b.w	800aeb8 <GPS_GPRMC_Parse+0xa18>
 800a4c4:	20004f70 	.word	0x20004f70
	}

	if(ringBuff.rxGps[(ringBuff.tail + 16) % BUFF_SIZE] == 'A' && GPS_CheckSumControl(&ringBuff.rxGps[ringBuff.tail])) // okuma işlemi doğru
 800a4c8:	4bb8      	ldr	r3, [pc, #736]	; (800a7ac <GPS_GPRMC_Parse+0x30c>)
 800a4ca:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a4ce:	b2db      	uxtb	r3, r3
 800a4d0:	3310      	adds	r3, #16
 800a4d2:	461a      	mov	r2, r3
 800a4d4:	4bb6      	ldr	r3, [pc, #728]	; (800a7b0 <GPS_GPRMC_Parse+0x310>)
 800a4d6:	fba3 1302 	umull	r1, r3, r3, r2
 800a4da:	091b      	lsrs	r3, r3, #4
 800a4dc:	21fa      	movs	r1, #250	; 0xfa
 800a4de:	fb01 f303 	mul.w	r3, r1, r3
 800a4e2:	1ad3      	subs	r3, r2, r3
 800a4e4:	4ab1      	ldr	r2, [pc, #708]	; (800a7ac <GPS_GPRMC_Parse+0x30c>)
 800a4e6:	5cd3      	ldrb	r3, [r2, r3]
 800a4e8:	2b41      	cmp	r3, #65	; 0x41
 800a4ea:	f040 84e4 	bne.w	800aeb6 <GPS_GPRMC_Parse+0xa16>
 800a4ee:	4baf      	ldr	r3, [pc, #700]	; (800a7ac <GPS_GPRMC_Parse+0x30c>)
 800a4f0:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a4f4:	b2db      	uxtb	r3, r3
 800a4f6:	461a      	mov	r2, r3
 800a4f8:	4bac      	ldr	r3, [pc, #688]	; (800a7ac <GPS_GPRMC_Parse+0x30c>)
 800a4fa:	4413      	add	r3, r2
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f001 f8b3 	bl	800b668 <GPS_CheckSumControl>
 800a502:	4603      	mov	r3, r0
 800a504:	2b00      	cmp	r3, #0
 800a506:	f000 84d6 	beq.w	800aeb6 <GPS_GPRMC_Parse+0xa16>
	{
		TAIL_INCREASE_TO_COMMA;
 800a50a:	4ba8      	ldr	r3, [pc, #672]	; (800a7ac <GPS_GPRMC_Parse+0x30c>)
 800a50c:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a510:	b2db      	uxtb	r3, r3
 800a512:	1c5a      	adds	r2, r3, #1
 800a514:	b2d1      	uxtb	r1, r2
 800a516:	4aa5      	ldr	r2, [pc, #660]	; (800a7ac <GPS_GPRMC_Parse+0x30c>)
 800a518:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a51c:	4aa4      	ldr	r2, [pc, #656]	; (800a7b0 <GPS_GPRMC_Parse+0x310>)
 800a51e:	fba2 1203 	umull	r1, r2, r2, r3
 800a522:	0912      	lsrs	r2, r2, #4
 800a524:	21fa      	movs	r1, #250	; 0xfa
 800a526:	fb01 f202 	mul.w	r2, r1, r2
 800a52a:	1a9b      	subs	r3, r3, r2
 800a52c:	b2db      	uxtb	r3, r3
 800a52e:	461a      	mov	r2, r3
 800a530:	4b9e      	ldr	r3, [pc, #632]	; (800a7ac <GPS_GPRMC_Parse+0x30c>)
 800a532:	5c9b      	ldrb	r3, [r3, r2]
 800a534:	2b2c      	cmp	r3, #44	; 0x2c
 800a536:	d1e8      	bne.n	800a50a <GPS_GPRMC_Parse+0x6a>
		//↑ ifadesi tail değerini attırır çünkü "GPRMC," ifadesi 6 karakterden oluşuyor
		_gps->hour = (TAIL_READ_P - ASCII_NUMBER) * 10 + (TAIL_READ_P - ASCII_NUMBER) + TURKIYE_UTC;
 800a538:	4b9c      	ldr	r3, [pc, #624]	; (800a7ac <GPS_GPRMC_Parse+0x30c>)
 800a53a:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a53e:	b2db      	uxtb	r3, r3
 800a540:	1c5a      	adds	r2, r3, #1
 800a542:	b2d1      	uxtb	r1, r2
 800a544:	4a99      	ldr	r2, [pc, #612]	; (800a7ac <GPS_GPRMC_Parse+0x30c>)
 800a546:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a54a:	4a99      	ldr	r2, [pc, #612]	; (800a7b0 <GPS_GPRMC_Parse+0x310>)
 800a54c:	fba2 1203 	umull	r1, r2, r2, r3
 800a550:	0912      	lsrs	r2, r2, #4
 800a552:	21fa      	movs	r1, #250	; 0xfa
 800a554:	fb01 f202 	mul.w	r2, r1, r2
 800a558:	1a9b      	subs	r3, r3, r2
 800a55a:	b2db      	uxtb	r3, r3
 800a55c:	461a      	mov	r2, r3
 800a55e:	4b93      	ldr	r3, [pc, #588]	; (800a7ac <GPS_GPRMC_Parse+0x30c>)
 800a560:	5c9b      	ldrb	r3, [r3, r2]
 800a562:	461a      	mov	r2, r3
 800a564:	0092      	lsls	r2, r2, #2
 800a566:	4413      	add	r3, r2
 800a568:	005b      	lsls	r3, r3, #1
 800a56a:	b2da      	uxtb	r2, r3
 800a56c:	4b8f      	ldr	r3, [pc, #572]	; (800a7ac <GPS_GPRMC_Parse+0x30c>)
 800a56e:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a572:	b2db      	uxtb	r3, r3
 800a574:	1c59      	adds	r1, r3, #1
 800a576:	b2c8      	uxtb	r0, r1
 800a578:	498c      	ldr	r1, [pc, #560]	; (800a7ac <GPS_GPRMC_Parse+0x30c>)
 800a57a:	f881 00fa 	strb.w	r0, [r1, #250]	; 0xfa
 800a57e:	498c      	ldr	r1, [pc, #560]	; (800a7b0 <GPS_GPRMC_Parse+0x310>)
 800a580:	fba1 0103 	umull	r0, r1, r1, r3
 800a584:	0909      	lsrs	r1, r1, #4
 800a586:	20fa      	movs	r0, #250	; 0xfa
 800a588:	fb00 f101 	mul.w	r1, r0, r1
 800a58c:	1a5b      	subs	r3, r3, r1
 800a58e:	b2db      	uxtb	r3, r3
 800a590:	4619      	mov	r1, r3
 800a592:	4b86      	ldr	r3, [pc, #536]	; (800a7ac <GPS_GPRMC_Parse+0x30c>)
 800a594:	5c5b      	ldrb	r3, [r3, r1]
 800a596:	4413      	add	r3, r2
 800a598:	b2da      	uxtb	r2, r3
 800a59a:	4b86      	ldr	r3, [pc, #536]	; (800a7b4 <GPS_GPRMC_Parse+0x314>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	3a0d      	subs	r2, #13
 800a5a0:	b2d2      	uxtb	r2, r2
 800a5a2:	701a      	strb	r2, [r3, #0]
		_gps->minute = (TAIL_READ_P - ASCII_NUMBER) * 10 + (TAIL_READ_P - ASCII_NUMBER);
 800a5a4:	4b81      	ldr	r3, [pc, #516]	; (800a7ac <GPS_GPRMC_Parse+0x30c>)
 800a5a6:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a5aa:	b2db      	uxtb	r3, r3
 800a5ac:	1c5a      	adds	r2, r3, #1
 800a5ae:	b2d1      	uxtb	r1, r2
 800a5b0:	4a7e      	ldr	r2, [pc, #504]	; (800a7ac <GPS_GPRMC_Parse+0x30c>)
 800a5b2:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a5b6:	4a7e      	ldr	r2, [pc, #504]	; (800a7b0 <GPS_GPRMC_Parse+0x310>)
 800a5b8:	fba2 1203 	umull	r1, r2, r2, r3
 800a5bc:	0912      	lsrs	r2, r2, #4
 800a5be:	21fa      	movs	r1, #250	; 0xfa
 800a5c0:	fb01 f202 	mul.w	r2, r1, r2
 800a5c4:	1a9b      	subs	r3, r3, r2
 800a5c6:	b2db      	uxtb	r3, r3
 800a5c8:	461a      	mov	r2, r3
 800a5ca:	4b78      	ldr	r3, [pc, #480]	; (800a7ac <GPS_GPRMC_Parse+0x30c>)
 800a5cc:	5c9b      	ldrb	r3, [r3, r2]
 800a5ce:	461a      	mov	r2, r3
 800a5d0:	0092      	lsls	r2, r2, #2
 800a5d2:	4413      	add	r3, r2
 800a5d4:	005b      	lsls	r3, r3, #1
 800a5d6:	b2da      	uxtb	r2, r3
 800a5d8:	4b74      	ldr	r3, [pc, #464]	; (800a7ac <GPS_GPRMC_Parse+0x30c>)
 800a5da:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a5de:	b2db      	uxtb	r3, r3
 800a5e0:	1c59      	adds	r1, r3, #1
 800a5e2:	b2c8      	uxtb	r0, r1
 800a5e4:	4971      	ldr	r1, [pc, #452]	; (800a7ac <GPS_GPRMC_Parse+0x30c>)
 800a5e6:	f881 00fa 	strb.w	r0, [r1, #250]	; 0xfa
 800a5ea:	4971      	ldr	r1, [pc, #452]	; (800a7b0 <GPS_GPRMC_Parse+0x310>)
 800a5ec:	fba1 0103 	umull	r0, r1, r1, r3
 800a5f0:	0909      	lsrs	r1, r1, #4
 800a5f2:	20fa      	movs	r0, #250	; 0xfa
 800a5f4:	fb00 f101 	mul.w	r1, r0, r1
 800a5f8:	1a5b      	subs	r3, r3, r1
 800a5fa:	b2db      	uxtb	r3, r3
 800a5fc:	4619      	mov	r1, r3
 800a5fe:	4b6b      	ldr	r3, [pc, #428]	; (800a7ac <GPS_GPRMC_Parse+0x30c>)
 800a600:	5c5b      	ldrb	r3, [r3, r1]
 800a602:	4413      	add	r3, r2
 800a604:	b2da      	uxtb	r2, r3
 800a606:	4b6b      	ldr	r3, [pc, #428]	; (800a7b4 <GPS_GPRMC_Parse+0x314>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	3a10      	subs	r2, #16
 800a60c:	b2d2      	uxtb	r2, r2
 800a60e:	705a      	strb	r2, [r3, #1]
		_gps->second = (TAIL_READ_P - ASCII_NUMBER) * 10 + (TAIL_READ_P - ASCII_NUMBER);
 800a610:	4b66      	ldr	r3, [pc, #408]	; (800a7ac <GPS_GPRMC_Parse+0x30c>)
 800a612:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a616:	b2db      	uxtb	r3, r3
 800a618:	1c5a      	adds	r2, r3, #1
 800a61a:	b2d1      	uxtb	r1, r2
 800a61c:	4a63      	ldr	r2, [pc, #396]	; (800a7ac <GPS_GPRMC_Parse+0x30c>)
 800a61e:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a622:	4a63      	ldr	r2, [pc, #396]	; (800a7b0 <GPS_GPRMC_Parse+0x310>)
 800a624:	fba2 1203 	umull	r1, r2, r2, r3
 800a628:	0912      	lsrs	r2, r2, #4
 800a62a:	21fa      	movs	r1, #250	; 0xfa
 800a62c:	fb01 f202 	mul.w	r2, r1, r2
 800a630:	1a9b      	subs	r3, r3, r2
 800a632:	b2db      	uxtb	r3, r3
 800a634:	461a      	mov	r2, r3
 800a636:	4b5d      	ldr	r3, [pc, #372]	; (800a7ac <GPS_GPRMC_Parse+0x30c>)
 800a638:	5c9b      	ldrb	r3, [r3, r2]
 800a63a:	461a      	mov	r2, r3
 800a63c:	0092      	lsls	r2, r2, #2
 800a63e:	4413      	add	r3, r2
 800a640:	005b      	lsls	r3, r3, #1
 800a642:	b2da      	uxtb	r2, r3
 800a644:	4b59      	ldr	r3, [pc, #356]	; (800a7ac <GPS_GPRMC_Parse+0x30c>)
 800a646:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a64a:	b2db      	uxtb	r3, r3
 800a64c:	1c59      	adds	r1, r3, #1
 800a64e:	b2c8      	uxtb	r0, r1
 800a650:	4956      	ldr	r1, [pc, #344]	; (800a7ac <GPS_GPRMC_Parse+0x30c>)
 800a652:	f881 00fa 	strb.w	r0, [r1, #250]	; 0xfa
 800a656:	4956      	ldr	r1, [pc, #344]	; (800a7b0 <GPS_GPRMC_Parse+0x310>)
 800a658:	fba1 0103 	umull	r0, r1, r1, r3
 800a65c:	0909      	lsrs	r1, r1, #4
 800a65e:	20fa      	movs	r0, #250	; 0xfa
 800a660:	fb00 f101 	mul.w	r1, r0, r1
 800a664:	1a5b      	subs	r3, r3, r1
 800a666:	b2db      	uxtb	r3, r3
 800a668:	4619      	mov	r1, r3
 800a66a:	4b50      	ldr	r3, [pc, #320]	; (800a7ac <GPS_GPRMC_Parse+0x30c>)
 800a66c:	5c5b      	ldrb	r3, [r3, r1]
 800a66e:	4413      	add	r3, r2
 800a670:	b2da      	uxtb	r2, r3
 800a672:	4b50      	ldr	r3, [pc, #320]	; (800a7b4 <GPS_GPRMC_Parse+0x314>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	3a10      	subs	r2, #16
 800a678:	b2d2      	uxtb	r2, r2
 800a67a:	709a      	strb	r2, [r3, #2]

		TAIL_INCREASE_TO_COMMA;
 800a67c:	4b4b      	ldr	r3, [pc, #300]	; (800a7ac <GPS_GPRMC_Parse+0x30c>)
 800a67e:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a682:	b2db      	uxtb	r3, r3
 800a684:	1c5a      	adds	r2, r3, #1
 800a686:	b2d1      	uxtb	r1, r2
 800a688:	4a48      	ldr	r2, [pc, #288]	; (800a7ac <GPS_GPRMC_Parse+0x30c>)
 800a68a:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a68e:	4a48      	ldr	r2, [pc, #288]	; (800a7b0 <GPS_GPRMC_Parse+0x310>)
 800a690:	fba2 1203 	umull	r1, r2, r2, r3
 800a694:	0912      	lsrs	r2, r2, #4
 800a696:	21fa      	movs	r1, #250	; 0xfa
 800a698:	fb01 f202 	mul.w	r2, r1, r2
 800a69c:	1a9b      	subs	r3, r3, r2
 800a69e:	b2db      	uxtb	r3, r3
 800a6a0:	461a      	mov	r2, r3
 800a6a2:	4b42      	ldr	r3, [pc, #264]	; (800a7ac <GPS_GPRMC_Parse+0x30c>)
 800a6a4:	5c9b      	ldrb	r3, [r3, r2]
 800a6a6:	2b2c      	cmp	r3, #44	; 0x2c
 800a6a8:	d1e8      	bne.n	800a67c <GPS_GPRMC_Parse+0x1dc>
		TAIL_INCREASE_TO_COMMA;
 800a6aa:	4b40      	ldr	r3, [pc, #256]	; (800a7ac <GPS_GPRMC_Parse+0x30c>)
 800a6ac:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a6b0:	b2db      	uxtb	r3, r3
 800a6b2:	1c5a      	adds	r2, r3, #1
 800a6b4:	b2d1      	uxtb	r1, r2
 800a6b6:	4a3d      	ldr	r2, [pc, #244]	; (800a7ac <GPS_GPRMC_Parse+0x30c>)
 800a6b8:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a6bc:	4a3c      	ldr	r2, [pc, #240]	; (800a7b0 <GPS_GPRMC_Parse+0x310>)
 800a6be:	fba2 1203 	umull	r1, r2, r2, r3
 800a6c2:	0912      	lsrs	r2, r2, #4
 800a6c4:	21fa      	movs	r1, #250	; 0xfa
 800a6c6:	fb01 f202 	mul.w	r2, r1, r2
 800a6ca:	1a9b      	subs	r3, r3, r2
 800a6cc:	b2db      	uxtb	r3, r3
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	4b36      	ldr	r3, [pc, #216]	; (800a7ac <GPS_GPRMC_Parse+0x30c>)
 800a6d2:	5c9b      	ldrb	r3, [r3, r2]
 800a6d4:	2b2c      	cmp	r3, #44	; 0x2c
 800a6d6:	d1e8      	bne.n	800a6aa <GPS_GPRMC_Parse+0x20a>

		//genlik değerinin alır
		_gps->latitudeDegree = (TAIL_READ_P - ASCII_NUMBER) * 10 + (TAIL_READ_P - ASCII_NUMBER);
 800a6d8:	4b34      	ldr	r3, [pc, #208]	; (800a7ac <GPS_GPRMC_Parse+0x30c>)
 800a6da:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a6de:	b2db      	uxtb	r3, r3
 800a6e0:	1c5a      	adds	r2, r3, #1
 800a6e2:	b2d1      	uxtb	r1, r2
 800a6e4:	4a31      	ldr	r2, [pc, #196]	; (800a7ac <GPS_GPRMC_Parse+0x30c>)
 800a6e6:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a6ea:	4a31      	ldr	r2, [pc, #196]	; (800a7b0 <GPS_GPRMC_Parse+0x310>)
 800a6ec:	fba2 1203 	umull	r1, r2, r2, r3
 800a6f0:	0912      	lsrs	r2, r2, #4
 800a6f2:	21fa      	movs	r1, #250	; 0xfa
 800a6f4:	fb01 f202 	mul.w	r2, r1, r2
 800a6f8:	1a9b      	subs	r3, r3, r2
 800a6fa:	b2db      	uxtb	r3, r3
 800a6fc:	461a      	mov	r2, r3
 800a6fe:	4b2b      	ldr	r3, [pc, #172]	; (800a7ac <GPS_GPRMC_Parse+0x30c>)
 800a700:	5c9b      	ldrb	r3, [r3, r2]
 800a702:	461a      	mov	r2, r3
 800a704:	0092      	lsls	r2, r2, #2
 800a706:	4413      	add	r3, r2
 800a708:	005b      	lsls	r3, r3, #1
 800a70a:	b2da      	uxtb	r2, r3
 800a70c:	4b27      	ldr	r3, [pc, #156]	; (800a7ac <GPS_GPRMC_Parse+0x30c>)
 800a70e:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a712:	b2db      	uxtb	r3, r3
 800a714:	1c59      	adds	r1, r3, #1
 800a716:	b2c8      	uxtb	r0, r1
 800a718:	4924      	ldr	r1, [pc, #144]	; (800a7ac <GPS_GPRMC_Parse+0x30c>)
 800a71a:	f881 00fa 	strb.w	r0, [r1, #250]	; 0xfa
 800a71e:	4924      	ldr	r1, [pc, #144]	; (800a7b0 <GPS_GPRMC_Parse+0x310>)
 800a720:	fba1 0103 	umull	r0, r1, r1, r3
 800a724:	0909      	lsrs	r1, r1, #4
 800a726:	20fa      	movs	r0, #250	; 0xfa
 800a728:	fb00 f101 	mul.w	r1, r0, r1
 800a72c:	1a5b      	subs	r3, r3, r1
 800a72e:	b2db      	uxtb	r3, r3
 800a730:	4619      	mov	r1, r3
 800a732:	4b1e      	ldr	r3, [pc, #120]	; (800a7ac <GPS_GPRMC_Parse+0x30c>)
 800a734:	5c5b      	ldrb	r3, [r3, r1]
 800a736:	4413      	add	r3, r2
 800a738:	b2da      	uxtb	r2, r3
 800a73a:	4b1e      	ldr	r3, [pc, #120]	; (800a7b4 <GPS_GPRMC_Parse+0x314>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	3a10      	subs	r2, #16
 800a740:	b2d2      	uxtb	r2, r2
 800a742:	70da      	strb	r2, [r3, #3]
		_gps->latitudeMinute = (TAIL_READ_P - ASCII_NUMBER) * 10.0 + (TAIL_READ_P - ASCII_NUMBER);
 800a744:	4b19      	ldr	r3, [pc, #100]	; (800a7ac <GPS_GPRMC_Parse+0x30c>)
 800a746:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a74a:	b2db      	uxtb	r3, r3
 800a74c:	1c5a      	adds	r2, r3, #1
 800a74e:	b2d1      	uxtb	r1, r2
 800a750:	4a16      	ldr	r2, [pc, #88]	; (800a7ac <GPS_GPRMC_Parse+0x30c>)
 800a752:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a756:	4a16      	ldr	r2, [pc, #88]	; (800a7b0 <GPS_GPRMC_Parse+0x310>)
 800a758:	fba2 1203 	umull	r1, r2, r2, r3
 800a75c:	0912      	lsrs	r2, r2, #4
 800a75e:	21fa      	movs	r1, #250	; 0xfa
 800a760:	fb01 f202 	mul.w	r2, r1, r2
 800a764:	1a9b      	subs	r3, r3, r2
 800a766:	b2db      	uxtb	r3, r3
 800a768:	461a      	mov	r2, r3
 800a76a:	4b10      	ldr	r3, [pc, #64]	; (800a7ac <GPS_GPRMC_Parse+0x30c>)
 800a76c:	5c9b      	ldrb	r3, [r3, r2]
 800a76e:	3b30      	subs	r3, #48	; 0x30
 800a770:	4618      	mov	r0, r3
 800a772:	f7f5 feef 	bl	8000554 <__aeabi_i2d>
 800a776:	f04f 0200 	mov.w	r2, #0
 800a77a:	4b0f      	ldr	r3, [pc, #60]	; (800a7b8 <GPS_GPRMC_Parse+0x318>)
 800a77c:	f7f5 ff54 	bl	8000628 <__aeabi_dmul>
 800a780:	4602      	mov	r2, r0
 800a782:	460b      	mov	r3, r1
 800a784:	4614      	mov	r4, r2
 800a786:	461d      	mov	r5, r3
 800a788:	4b08      	ldr	r3, [pc, #32]	; (800a7ac <GPS_GPRMC_Parse+0x30c>)
 800a78a:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a78e:	b2db      	uxtb	r3, r3
 800a790:	1c5a      	adds	r2, r3, #1
 800a792:	b2d1      	uxtb	r1, r2
 800a794:	4a05      	ldr	r2, [pc, #20]	; (800a7ac <GPS_GPRMC_Parse+0x30c>)
 800a796:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a79a:	4a05      	ldr	r2, [pc, #20]	; (800a7b0 <GPS_GPRMC_Parse+0x310>)
 800a79c:	fba2 1203 	umull	r1, r2, r2, r3
 800a7a0:	0912      	lsrs	r2, r2, #4
 800a7a2:	21fa      	movs	r1, #250	; 0xfa
 800a7a4:	fb01 f202 	mul.w	r2, r1, r2
 800a7a8:	1a9b      	subs	r3, r3, r2
 800a7aa:	e007      	b.n	800a7bc <GPS_GPRMC_Parse+0x31c>
 800a7ac:	20004f70 	.word	0x20004f70
 800a7b0:	10624dd3 	.word	0x10624dd3
 800a7b4:	20005070 	.word	0x20005070
 800a7b8:	40240000 	.word	0x40240000
 800a7bc:	b2db      	uxtb	r3, r3
 800a7be:	461a      	mov	r2, r3
 800a7c0:	4b70      	ldr	r3, [pc, #448]	; (800a984 <GPS_GPRMC_Parse+0x4e4>)
 800a7c2:	5c9b      	ldrb	r3, [r3, r2]
 800a7c4:	3b30      	subs	r3, #48	; 0x30
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f7f5 fec4 	bl	8000554 <__aeabi_i2d>
 800a7cc:	4602      	mov	r2, r0
 800a7ce:	460b      	mov	r3, r1
 800a7d0:	4620      	mov	r0, r4
 800a7d2:	4629      	mov	r1, r5
 800a7d4:	f7f5 fd72 	bl	80002bc <__adddf3>
 800a7d8:	4602      	mov	r2, r0
 800a7da:	460b      	mov	r3, r1
 800a7dc:	496a      	ldr	r1, [pc, #424]	; (800a988 <GPS_GPRMC_Parse+0x4e8>)
 800a7de:	680c      	ldr	r4, [r1, #0]
 800a7e0:	4610      	mov	r0, r2
 800a7e2:	4619      	mov	r1, r3
 800a7e4:	f7f6 f9d0 	bl	8000b88 <__aeabi_d2uiz>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	b2db      	uxtb	r3, r3
 800a7ec:	7123      	strb	r3, [r4, #4]
		TAIL_INCREASE;		// "." geçtik
 800a7ee:	4b65      	ldr	r3, [pc, #404]	; (800a984 <GPS_GPRMC_Parse+0x4e4>)
 800a7f0:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a7f4:	b2db      	uxtb	r3, r3
 800a7f6:	3301      	adds	r3, #1
 800a7f8:	461a      	mov	r2, r3
 800a7fa:	4b64      	ldr	r3, [pc, #400]	; (800a98c <GPS_GPRMC_Parse+0x4ec>)
 800a7fc:	fba3 1302 	umull	r1, r3, r3, r2
 800a800:	091b      	lsrs	r3, r3, #4
 800a802:	21fa      	movs	r1, #250	; 0xfa
 800a804:	fb01 f303 	mul.w	r3, r1, r3
 800a808:	1ad3      	subs	r3, r2, r3
 800a80a:	b2da      	uxtb	r2, r3
 800a80c:	4b5d      	ldr	r3, [pc, #372]	; (800a984 <GPS_GPRMC_Parse+0x4e4>)
 800a80e:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
		_gps->latitudeSecond = ((TAIL_READ_P - ASCII_NUMBER) *100.0 + (TAIL_READ_P - ASCII_NUMBER)*10.0 + (TAIL_READ_P - ASCII_NUMBER)*1.0) / 1000 * 60;
 800a812:	4b5c      	ldr	r3, [pc, #368]	; (800a984 <GPS_GPRMC_Parse+0x4e4>)
 800a814:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a818:	b2db      	uxtb	r3, r3
 800a81a:	1c5a      	adds	r2, r3, #1
 800a81c:	b2d1      	uxtb	r1, r2
 800a81e:	4a59      	ldr	r2, [pc, #356]	; (800a984 <GPS_GPRMC_Parse+0x4e4>)
 800a820:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a824:	4a59      	ldr	r2, [pc, #356]	; (800a98c <GPS_GPRMC_Parse+0x4ec>)
 800a826:	fba2 1203 	umull	r1, r2, r2, r3
 800a82a:	0912      	lsrs	r2, r2, #4
 800a82c:	21fa      	movs	r1, #250	; 0xfa
 800a82e:	fb01 f202 	mul.w	r2, r1, r2
 800a832:	1a9b      	subs	r3, r3, r2
 800a834:	b2db      	uxtb	r3, r3
 800a836:	461a      	mov	r2, r3
 800a838:	4b52      	ldr	r3, [pc, #328]	; (800a984 <GPS_GPRMC_Parse+0x4e4>)
 800a83a:	5c9b      	ldrb	r3, [r3, r2]
 800a83c:	3b30      	subs	r3, #48	; 0x30
 800a83e:	4618      	mov	r0, r3
 800a840:	f7f5 fe88 	bl	8000554 <__aeabi_i2d>
 800a844:	f04f 0200 	mov.w	r2, #0
 800a848:	4b51      	ldr	r3, [pc, #324]	; (800a990 <GPS_GPRMC_Parse+0x4f0>)
 800a84a:	f7f5 feed 	bl	8000628 <__aeabi_dmul>
 800a84e:	4602      	mov	r2, r0
 800a850:	460b      	mov	r3, r1
 800a852:	4614      	mov	r4, r2
 800a854:	461d      	mov	r5, r3
 800a856:	4b4b      	ldr	r3, [pc, #300]	; (800a984 <GPS_GPRMC_Parse+0x4e4>)
 800a858:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a85c:	b2db      	uxtb	r3, r3
 800a85e:	1c5a      	adds	r2, r3, #1
 800a860:	b2d1      	uxtb	r1, r2
 800a862:	4a48      	ldr	r2, [pc, #288]	; (800a984 <GPS_GPRMC_Parse+0x4e4>)
 800a864:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a868:	4a48      	ldr	r2, [pc, #288]	; (800a98c <GPS_GPRMC_Parse+0x4ec>)
 800a86a:	fba2 1203 	umull	r1, r2, r2, r3
 800a86e:	0912      	lsrs	r2, r2, #4
 800a870:	21fa      	movs	r1, #250	; 0xfa
 800a872:	fb01 f202 	mul.w	r2, r1, r2
 800a876:	1a9b      	subs	r3, r3, r2
 800a878:	b2db      	uxtb	r3, r3
 800a87a:	461a      	mov	r2, r3
 800a87c:	4b41      	ldr	r3, [pc, #260]	; (800a984 <GPS_GPRMC_Parse+0x4e4>)
 800a87e:	5c9b      	ldrb	r3, [r3, r2]
 800a880:	3b30      	subs	r3, #48	; 0x30
 800a882:	4618      	mov	r0, r3
 800a884:	f7f5 fe66 	bl	8000554 <__aeabi_i2d>
 800a888:	f04f 0200 	mov.w	r2, #0
 800a88c:	4b41      	ldr	r3, [pc, #260]	; (800a994 <GPS_GPRMC_Parse+0x4f4>)
 800a88e:	f7f5 fecb 	bl	8000628 <__aeabi_dmul>
 800a892:	4602      	mov	r2, r0
 800a894:	460b      	mov	r3, r1
 800a896:	4620      	mov	r0, r4
 800a898:	4629      	mov	r1, r5
 800a89a:	f7f5 fd0f 	bl	80002bc <__adddf3>
 800a89e:	4602      	mov	r2, r0
 800a8a0:	460b      	mov	r3, r1
 800a8a2:	4614      	mov	r4, r2
 800a8a4:	461d      	mov	r5, r3
 800a8a6:	4b37      	ldr	r3, [pc, #220]	; (800a984 <GPS_GPRMC_Parse+0x4e4>)
 800a8a8:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a8ac:	b2db      	uxtb	r3, r3
 800a8ae:	1c5a      	adds	r2, r3, #1
 800a8b0:	b2d1      	uxtb	r1, r2
 800a8b2:	4a34      	ldr	r2, [pc, #208]	; (800a984 <GPS_GPRMC_Parse+0x4e4>)
 800a8b4:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a8b8:	4a34      	ldr	r2, [pc, #208]	; (800a98c <GPS_GPRMC_Parse+0x4ec>)
 800a8ba:	fba2 1203 	umull	r1, r2, r2, r3
 800a8be:	0912      	lsrs	r2, r2, #4
 800a8c0:	21fa      	movs	r1, #250	; 0xfa
 800a8c2:	fb01 f202 	mul.w	r2, r1, r2
 800a8c6:	1a9b      	subs	r3, r3, r2
 800a8c8:	b2db      	uxtb	r3, r3
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	4b2d      	ldr	r3, [pc, #180]	; (800a984 <GPS_GPRMC_Parse+0x4e4>)
 800a8ce:	5c9b      	ldrb	r3, [r3, r2]
 800a8d0:	3b30      	subs	r3, #48	; 0x30
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f7f5 fe3e 	bl	8000554 <__aeabi_i2d>
 800a8d8:	4602      	mov	r2, r0
 800a8da:	460b      	mov	r3, r1
 800a8dc:	4620      	mov	r0, r4
 800a8de:	4629      	mov	r1, r5
 800a8e0:	f7f5 fcec 	bl	80002bc <__adddf3>
 800a8e4:	4602      	mov	r2, r0
 800a8e6:	460b      	mov	r3, r1
 800a8e8:	4610      	mov	r0, r2
 800a8ea:	4619      	mov	r1, r3
 800a8ec:	f04f 0200 	mov.w	r2, #0
 800a8f0:	4b29      	ldr	r3, [pc, #164]	; (800a998 <GPS_GPRMC_Parse+0x4f8>)
 800a8f2:	f7f5 ffc3 	bl	800087c <__aeabi_ddiv>
 800a8f6:	4602      	mov	r2, r0
 800a8f8:	460b      	mov	r3, r1
 800a8fa:	4610      	mov	r0, r2
 800a8fc:	4619      	mov	r1, r3
 800a8fe:	f04f 0200 	mov.w	r2, #0
 800a902:	4b26      	ldr	r3, [pc, #152]	; (800a99c <GPS_GPRMC_Parse+0x4fc>)
 800a904:	f7f5 fe90 	bl	8000628 <__aeabi_dmul>
 800a908:	4602      	mov	r2, r0
 800a90a:	460b      	mov	r3, r1
 800a90c:	491e      	ldr	r1, [pc, #120]	; (800a988 <GPS_GPRMC_Parse+0x4e8>)
 800a90e:	680c      	ldr	r4, [r1, #0]
 800a910:	4610      	mov	r0, r2
 800a912:	4619      	mov	r1, r3
 800a914:	f7f6 f958 	bl	8000bc8 <__aeabi_d2f>
 800a918:	4603      	mov	r3, r0
 800a91a:	60a3      	str	r3, [r4, #8]

		TAIL_INCREASE_TO_COMMA;
 800a91c:	4b19      	ldr	r3, [pc, #100]	; (800a984 <GPS_GPRMC_Parse+0x4e4>)
 800a91e:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a922:	b2db      	uxtb	r3, r3
 800a924:	1c5a      	adds	r2, r3, #1
 800a926:	b2d1      	uxtb	r1, r2
 800a928:	4a16      	ldr	r2, [pc, #88]	; (800a984 <GPS_GPRMC_Parse+0x4e4>)
 800a92a:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a92e:	4a17      	ldr	r2, [pc, #92]	; (800a98c <GPS_GPRMC_Parse+0x4ec>)
 800a930:	fba2 1203 	umull	r1, r2, r2, r3
 800a934:	0912      	lsrs	r2, r2, #4
 800a936:	21fa      	movs	r1, #250	; 0xfa
 800a938:	fb01 f202 	mul.w	r2, r1, r2
 800a93c:	1a9b      	subs	r3, r3, r2
 800a93e:	b2db      	uxtb	r3, r3
 800a940:	461a      	mov	r2, r3
 800a942:	4b10      	ldr	r3, [pc, #64]	; (800a984 <GPS_GPRMC_Parse+0x4e4>)
 800a944:	5c9b      	ldrb	r3, [r3, r2]
 800a946:	2b2c      	cmp	r3, #44	; 0x2c
 800a948:	d1e8      	bne.n	800a91c <GPS_GPRMC_Parse+0x47c>

		// Pole bilgisini alır
		if(TAIL_READ_P == 'N')	_gps->locationLat = NORTH;
 800a94a:	4b0e      	ldr	r3, [pc, #56]	; (800a984 <GPS_GPRMC_Parse+0x4e4>)
 800a94c:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a950:	b2db      	uxtb	r3, r3
 800a952:	1c5a      	adds	r2, r3, #1
 800a954:	b2d1      	uxtb	r1, r2
 800a956:	4a0b      	ldr	r2, [pc, #44]	; (800a984 <GPS_GPRMC_Parse+0x4e4>)
 800a958:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a95c:	4a0b      	ldr	r2, [pc, #44]	; (800a98c <GPS_GPRMC_Parse+0x4ec>)
 800a95e:	fba2 1203 	umull	r1, r2, r2, r3
 800a962:	0912      	lsrs	r2, r2, #4
 800a964:	21fa      	movs	r1, #250	; 0xfa
 800a966:	fb01 f202 	mul.w	r2, r1, r2
 800a96a:	1a9b      	subs	r3, r3, r2
 800a96c:	b2db      	uxtb	r3, r3
 800a96e:	461a      	mov	r2, r3
 800a970:	4b04      	ldr	r3, [pc, #16]	; (800a984 <GPS_GPRMC_Parse+0x4e4>)
 800a972:	5c9b      	ldrb	r3, [r3, r2]
 800a974:	2b4e      	cmp	r3, #78	; 0x4e
 800a976:	d113      	bne.n	800a9a0 <GPS_GPRMC_Parse+0x500>
 800a978:	4b03      	ldr	r3, [pc, #12]	; (800a988 <GPS_GPRMC_Parse+0x4e8>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	2200      	movs	r2, #0
 800a97e:	731a      	strb	r2, [r3, #12]
 800a980:	e012      	b.n	800a9a8 <GPS_GPRMC_Parse+0x508>
 800a982:	bf00      	nop
 800a984:	20004f70 	.word	0x20004f70
 800a988:	20005070 	.word	0x20005070
 800a98c:	10624dd3 	.word	0x10624dd3
 800a990:	40590000 	.word	0x40590000
 800a994:	40240000 	.word	0x40240000
 800a998:	408f4000 	.word	0x408f4000
 800a99c:	404e0000 	.word	0x404e0000
		else 					_gps->locationLat = SOUTH;
 800a9a0:	4bc1      	ldr	r3, [pc, #772]	; (800aca8 <GPS_GPRMC_Parse+0x808>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	2201      	movs	r2, #1
 800a9a6:	731a      	strb	r2, [r3, #12]

		TAIL_INCREASE_TO_COMMA;		// "," geçtik
 800a9a8:	4bc0      	ldr	r3, [pc, #768]	; (800acac <GPS_GPRMC_Parse+0x80c>)
 800a9aa:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a9ae:	b2db      	uxtb	r3, r3
 800a9b0:	1c5a      	adds	r2, r3, #1
 800a9b2:	b2d1      	uxtb	r1, r2
 800a9b4:	4abd      	ldr	r2, [pc, #756]	; (800acac <GPS_GPRMC_Parse+0x80c>)
 800a9b6:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a9ba:	4abd      	ldr	r2, [pc, #756]	; (800acb0 <GPS_GPRMC_Parse+0x810>)
 800a9bc:	fba2 1203 	umull	r1, r2, r2, r3
 800a9c0:	0912      	lsrs	r2, r2, #4
 800a9c2:	21fa      	movs	r1, #250	; 0xfa
 800a9c4:	fb01 f202 	mul.w	r2, r1, r2
 800a9c8:	1a9b      	subs	r3, r3, r2
 800a9ca:	b2db      	uxtb	r3, r3
 800a9cc:	461a      	mov	r2, r3
 800a9ce:	4bb7      	ldr	r3, [pc, #732]	; (800acac <GPS_GPRMC_Parse+0x80c>)
 800a9d0:	5c9b      	ldrb	r3, [r3, r2]
 800a9d2:	2b2c      	cmp	r3, #44	; 0x2c
 800a9d4:	d1e8      	bne.n	800a9a8 <GPS_GPRMC_Parse+0x508>

		// Boylam bilgisini alır
		_gps->longitudeDegree = (TAIL_READ_P - ASCII_NUMBER) * 100 + (TAIL_READ_P - ASCII_NUMBER) * 10 + (TAIL_READ_P - ASCII_NUMBER);
 800a9d6:	4bb5      	ldr	r3, [pc, #724]	; (800acac <GPS_GPRMC_Parse+0x80c>)
 800a9d8:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a9dc:	b2db      	uxtb	r3, r3
 800a9de:	1c5a      	adds	r2, r3, #1
 800a9e0:	b2d1      	uxtb	r1, r2
 800a9e2:	4ab2      	ldr	r2, [pc, #712]	; (800acac <GPS_GPRMC_Parse+0x80c>)
 800a9e4:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a9e8:	4ab1      	ldr	r2, [pc, #708]	; (800acb0 <GPS_GPRMC_Parse+0x810>)
 800a9ea:	fba2 1203 	umull	r1, r2, r2, r3
 800a9ee:	0912      	lsrs	r2, r2, #4
 800a9f0:	21fa      	movs	r1, #250	; 0xfa
 800a9f2:	fb01 f202 	mul.w	r2, r1, r2
 800a9f6:	1a9b      	subs	r3, r3, r2
 800a9f8:	b2db      	uxtb	r3, r3
 800a9fa:	461a      	mov	r2, r3
 800a9fc:	4bab      	ldr	r3, [pc, #684]	; (800acac <GPS_GPRMC_Parse+0x80c>)
 800a9fe:	5c9b      	ldrb	r3, [r3, r2]
 800aa00:	461a      	mov	r2, r3
 800aa02:	0092      	lsls	r2, r2, #2
 800aa04:	4413      	add	r3, r2
 800aa06:	461a      	mov	r2, r3
 800aa08:	0091      	lsls	r1, r2, #2
 800aa0a:	461a      	mov	r2, r3
 800aa0c:	460b      	mov	r3, r1
 800aa0e:	4413      	add	r3, r2
 800aa10:	009b      	lsls	r3, r3, #2
 800aa12:	b2da      	uxtb	r2, r3
 800aa14:	4ba5      	ldr	r3, [pc, #660]	; (800acac <GPS_GPRMC_Parse+0x80c>)
 800aa16:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800aa1a:	b2db      	uxtb	r3, r3
 800aa1c:	1c59      	adds	r1, r3, #1
 800aa1e:	b2c8      	uxtb	r0, r1
 800aa20:	49a2      	ldr	r1, [pc, #648]	; (800acac <GPS_GPRMC_Parse+0x80c>)
 800aa22:	f881 00fa 	strb.w	r0, [r1, #250]	; 0xfa
 800aa26:	49a2      	ldr	r1, [pc, #648]	; (800acb0 <GPS_GPRMC_Parse+0x810>)
 800aa28:	fba1 0103 	umull	r0, r1, r1, r3
 800aa2c:	0909      	lsrs	r1, r1, #4
 800aa2e:	20fa      	movs	r0, #250	; 0xfa
 800aa30:	fb00 f101 	mul.w	r1, r0, r1
 800aa34:	1a5b      	subs	r3, r3, r1
 800aa36:	b2db      	uxtb	r3, r3
 800aa38:	4619      	mov	r1, r3
 800aa3a:	4b9c      	ldr	r3, [pc, #624]	; (800acac <GPS_GPRMC_Parse+0x80c>)
 800aa3c:	5c5b      	ldrb	r3, [r3, r1]
 800aa3e:	4619      	mov	r1, r3
 800aa40:	0089      	lsls	r1, r1, #2
 800aa42:	440b      	add	r3, r1
 800aa44:	005b      	lsls	r3, r3, #1
 800aa46:	b2db      	uxtb	r3, r3
 800aa48:	4413      	add	r3, r2
 800aa4a:	b2da      	uxtb	r2, r3
 800aa4c:	4b97      	ldr	r3, [pc, #604]	; (800acac <GPS_GPRMC_Parse+0x80c>)
 800aa4e:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800aa52:	b2db      	uxtb	r3, r3
 800aa54:	1c59      	adds	r1, r3, #1
 800aa56:	b2c8      	uxtb	r0, r1
 800aa58:	4994      	ldr	r1, [pc, #592]	; (800acac <GPS_GPRMC_Parse+0x80c>)
 800aa5a:	f881 00fa 	strb.w	r0, [r1, #250]	; 0xfa
 800aa5e:	4994      	ldr	r1, [pc, #592]	; (800acb0 <GPS_GPRMC_Parse+0x810>)
 800aa60:	fba1 0103 	umull	r0, r1, r1, r3
 800aa64:	0909      	lsrs	r1, r1, #4
 800aa66:	20fa      	movs	r0, #250	; 0xfa
 800aa68:	fb00 f101 	mul.w	r1, r0, r1
 800aa6c:	1a5b      	subs	r3, r3, r1
 800aa6e:	b2db      	uxtb	r3, r3
 800aa70:	4619      	mov	r1, r3
 800aa72:	4b8e      	ldr	r3, [pc, #568]	; (800acac <GPS_GPRMC_Parse+0x80c>)
 800aa74:	5c5b      	ldrb	r3, [r3, r1]
 800aa76:	4413      	add	r3, r2
 800aa78:	b2da      	uxtb	r2, r3
 800aa7a:	4b8b      	ldr	r3, [pc, #556]	; (800aca8 <GPS_GPRMC_Parse+0x808>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	3230      	adds	r2, #48	; 0x30
 800aa80:	b2d2      	uxtb	r2, r2
 800aa82:	735a      	strb	r2, [r3, #13]
		_gps->longitudeMinute = (TAIL_READ_P - ASCII_NUMBER) * 10.0 + (TAIL_READ_P - ASCII_NUMBER);
 800aa84:	4b89      	ldr	r3, [pc, #548]	; (800acac <GPS_GPRMC_Parse+0x80c>)
 800aa86:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800aa8a:	b2db      	uxtb	r3, r3
 800aa8c:	1c5a      	adds	r2, r3, #1
 800aa8e:	b2d1      	uxtb	r1, r2
 800aa90:	4a86      	ldr	r2, [pc, #536]	; (800acac <GPS_GPRMC_Parse+0x80c>)
 800aa92:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800aa96:	4a86      	ldr	r2, [pc, #536]	; (800acb0 <GPS_GPRMC_Parse+0x810>)
 800aa98:	fba2 1203 	umull	r1, r2, r2, r3
 800aa9c:	0912      	lsrs	r2, r2, #4
 800aa9e:	21fa      	movs	r1, #250	; 0xfa
 800aaa0:	fb01 f202 	mul.w	r2, r1, r2
 800aaa4:	1a9b      	subs	r3, r3, r2
 800aaa6:	b2db      	uxtb	r3, r3
 800aaa8:	461a      	mov	r2, r3
 800aaaa:	4b80      	ldr	r3, [pc, #512]	; (800acac <GPS_GPRMC_Parse+0x80c>)
 800aaac:	5c9b      	ldrb	r3, [r3, r2]
 800aaae:	3b30      	subs	r3, #48	; 0x30
 800aab0:	4618      	mov	r0, r3
 800aab2:	f7f5 fd4f 	bl	8000554 <__aeabi_i2d>
 800aab6:	f04f 0200 	mov.w	r2, #0
 800aaba:	4b7e      	ldr	r3, [pc, #504]	; (800acb4 <GPS_GPRMC_Parse+0x814>)
 800aabc:	f7f5 fdb4 	bl	8000628 <__aeabi_dmul>
 800aac0:	4602      	mov	r2, r0
 800aac2:	460b      	mov	r3, r1
 800aac4:	4614      	mov	r4, r2
 800aac6:	461d      	mov	r5, r3
 800aac8:	4b78      	ldr	r3, [pc, #480]	; (800acac <GPS_GPRMC_Parse+0x80c>)
 800aaca:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800aace:	b2db      	uxtb	r3, r3
 800aad0:	1c5a      	adds	r2, r3, #1
 800aad2:	b2d1      	uxtb	r1, r2
 800aad4:	4a75      	ldr	r2, [pc, #468]	; (800acac <GPS_GPRMC_Parse+0x80c>)
 800aad6:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800aada:	4a75      	ldr	r2, [pc, #468]	; (800acb0 <GPS_GPRMC_Parse+0x810>)
 800aadc:	fba2 1203 	umull	r1, r2, r2, r3
 800aae0:	0912      	lsrs	r2, r2, #4
 800aae2:	21fa      	movs	r1, #250	; 0xfa
 800aae4:	fb01 f202 	mul.w	r2, r1, r2
 800aae8:	1a9b      	subs	r3, r3, r2
 800aaea:	b2db      	uxtb	r3, r3
 800aaec:	461a      	mov	r2, r3
 800aaee:	4b6f      	ldr	r3, [pc, #444]	; (800acac <GPS_GPRMC_Parse+0x80c>)
 800aaf0:	5c9b      	ldrb	r3, [r3, r2]
 800aaf2:	3b30      	subs	r3, #48	; 0x30
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	f7f5 fd2d 	bl	8000554 <__aeabi_i2d>
 800aafa:	4602      	mov	r2, r0
 800aafc:	460b      	mov	r3, r1
 800aafe:	4620      	mov	r0, r4
 800ab00:	4629      	mov	r1, r5
 800ab02:	f7f5 fbdb 	bl	80002bc <__adddf3>
 800ab06:	4602      	mov	r2, r0
 800ab08:	460b      	mov	r3, r1
 800ab0a:	4967      	ldr	r1, [pc, #412]	; (800aca8 <GPS_GPRMC_Parse+0x808>)
 800ab0c:	680c      	ldr	r4, [r1, #0]
 800ab0e:	4610      	mov	r0, r2
 800ab10:	4619      	mov	r1, r3
 800ab12:	f7f6 f839 	bl	8000b88 <__aeabi_d2uiz>
 800ab16:	4603      	mov	r3, r0
 800ab18:	b2db      	uxtb	r3, r3
 800ab1a:	73a3      	strb	r3, [r4, #14]
		TAIL_INCREASE;		// "." geçtik
 800ab1c:	4b63      	ldr	r3, [pc, #396]	; (800acac <GPS_GPRMC_Parse+0x80c>)
 800ab1e:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800ab22:	b2db      	uxtb	r3, r3
 800ab24:	3301      	adds	r3, #1
 800ab26:	461a      	mov	r2, r3
 800ab28:	4b61      	ldr	r3, [pc, #388]	; (800acb0 <GPS_GPRMC_Parse+0x810>)
 800ab2a:	fba3 1302 	umull	r1, r3, r3, r2
 800ab2e:	091b      	lsrs	r3, r3, #4
 800ab30:	21fa      	movs	r1, #250	; 0xfa
 800ab32:	fb01 f303 	mul.w	r3, r1, r3
 800ab36:	1ad3      	subs	r3, r2, r3
 800ab38:	b2da      	uxtb	r2, r3
 800ab3a:	4b5c      	ldr	r3, [pc, #368]	; (800acac <GPS_GPRMC_Parse+0x80c>)
 800ab3c:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
		_gps->longitudeSecond = ((TAIL_READ_P - ASCII_NUMBER) * 100.0 + (TAIL_READ_P - ASCII_NUMBER) * 10.0 + (TAIL_READ_P - ASCII_NUMBER) * 1.0) / 1000 * 60;
 800ab40:	4b5a      	ldr	r3, [pc, #360]	; (800acac <GPS_GPRMC_Parse+0x80c>)
 800ab42:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800ab46:	b2db      	uxtb	r3, r3
 800ab48:	1c5a      	adds	r2, r3, #1
 800ab4a:	b2d1      	uxtb	r1, r2
 800ab4c:	4a57      	ldr	r2, [pc, #348]	; (800acac <GPS_GPRMC_Parse+0x80c>)
 800ab4e:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800ab52:	4a57      	ldr	r2, [pc, #348]	; (800acb0 <GPS_GPRMC_Parse+0x810>)
 800ab54:	fba2 1203 	umull	r1, r2, r2, r3
 800ab58:	0912      	lsrs	r2, r2, #4
 800ab5a:	21fa      	movs	r1, #250	; 0xfa
 800ab5c:	fb01 f202 	mul.w	r2, r1, r2
 800ab60:	1a9b      	subs	r3, r3, r2
 800ab62:	b2db      	uxtb	r3, r3
 800ab64:	461a      	mov	r2, r3
 800ab66:	4b51      	ldr	r3, [pc, #324]	; (800acac <GPS_GPRMC_Parse+0x80c>)
 800ab68:	5c9b      	ldrb	r3, [r3, r2]
 800ab6a:	3b30      	subs	r3, #48	; 0x30
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f7f5 fcf1 	bl	8000554 <__aeabi_i2d>
 800ab72:	f04f 0200 	mov.w	r2, #0
 800ab76:	4b50      	ldr	r3, [pc, #320]	; (800acb8 <GPS_GPRMC_Parse+0x818>)
 800ab78:	f7f5 fd56 	bl	8000628 <__aeabi_dmul>
 800ab7c:	4602      	mov	r2, r0
 800ab7e:	460b      	mov	r3, r1
 800ab80:	4614      	mov	r4, r2
 800ab82:	461d      	mov	r5, r3
 800ab84:	4b49      	ldr	r3, [pc, #292]	; (800acac <GPS_GPRMC_Parse+0x80c>)
 800ab86:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800ab8a:	b2db      	uxtb	r3, r3
 800ab8c:	1c5a      	adds	r2, r3, #1
 800ab8e:	b2d1      	uxtb	r1, r2
 800ab90:	4a46      	ldr	r2, [pc, #280]	; (800acac <GPS_GPRMC_Parse+0x80c>)
 800ab92:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800ab96:	4a46      	ldr	r2, [pc, #280]	; (800acb0 <GPS_GPRMC_Parse+0x810>)
 800ab98:	fba2 1203 	umull	r1, r2, r2, r3
 800ab9c:	0912      	lsrs	r2, r2, #4
 800ab9e:	21fa      	movs	r1, #250	; 0xfa
 800aba0:	fb01 f202 	mul.w	r2, r1, r2
 800aba4:	1a9b      	subs	r3, r3, r2
 800aba6:	b2db      	uxtb	r3, r3
 800aba8:	461a      	mov	r2, r3
 800abaa:	4b40      	ldr	r3, [pc, #256]	; (800acac <GPS_GPRMC_Parse+0x80c>)
 800abac:	5c9b      	ldrb	r3, [r3, r2]
 800abae:	3b30      	subs	r3, #48	; 0x30
 800abb0:	4618      	mov	r0, r3
 800abb2:	f7f5 fccf 	bl	8000554 <__aeabi_i2d>
 800abb6:	f04f 0200 	mov.w	r2, #0
 800abba:	4b3e      	ldr	r3, [pc, #248]	; (800acb4 <GPS_GPRMC_Parse+0x814>)
 800abbc:	f7f5 fd34 	bl	8000628 <__aeabi_dmul>
 800abc0:	4602      	mov	r2, r0
 800abc2:	460b      	mov	r3, r1
 800abc4:	4620      	mov	r0, r4
 800abc6:	4629      	mov	r1, r5
 800abc8:	f7f5 fb78 	bl	80002bc <__adddf3>
 800abcc:	4602      	mov	r2, r0
 800abce:	460b      	mov	r3, r1
 800abd0:	4614      	mov	r4, r2
 800abd2:	461d      	mov	r5, r3
 800abd4:	4b35      	ldr	r3, [pc, #212]	; (800acac <GPS_GPRMC_Parse+0x80c>)
 800abd6:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800abda:	b2db      	uxtb	r3, r3
 800abdc:	1c5a      	adds	r2, r3, #1
 800abde:	b2d1      	uxtb	r1, r2
 800abe0:	4a32      	ldr	r2, [pc, #200]	; (800acac <GPS_GPRMC_Parse+0x80c>)
 800abe2:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800abe6:	4a32      	ldr	r2, [pc, #200]	; (800acb0 <GPS_GPRMC_Parse+0x810>)
 800abe8:	fba2 1203 	umull	r1, r2, r2, r3
 800abec:	0912      	lsrs	r2, r2, #4
 800abee:	21fa      	movs	r1, #250	; 0xfa
 800abf0:	fb01 f202 	mul.w	r2, r1, r2
 800abf4:	1a9b      	subs	r3, r3, r2
 800abf6:	b2db      	uxtb	r3, r3
 800abf8:	461a      	mov	r2, r3
 800abfa:	4b2c      	ldr	r3, [pc, #176]	; (800acac <GPS_GPRMC_Parse+0x80c>)
 800abfc:	5c9b      	ldrb	r3, [r3, r2]
 800abfe:	3b30      	subs	r3, #48	; 0x30
 800ac00:	4618      	mov	r0, r3
 800ac02:	f7f5 fca7 	bl	8000554 <__aeabi_i2d>
 800ac06:	4602      	mov	r2, r0
 800ac08:	460b      	mov	r3, r1
 800ac0a:	4620      	mov	r0, r4
 800ac0c:	4629      	mov	r1, r5
 800ac0e:	f7f5 fb55 	bl	80002bc <__adddf3>
 800ac12:	4602      	mov	r2, r0
 800ac14:	460b      	mov	r3, r1
 800ac16:	4610      	mov	r0, r2
 800ac18:	4619      	mov	r1, r3
 800ac1a:	f04f 0200 	mov.w	r2, #0
 800ac1e:	4b27      	ldr	r3, [pc, #156]	; (800acbc <GPS_GPRMC_Parse+0x81c>)
 800ac20:	f7f5 fe2c 	bl	800087c <__aeabi_ddiv>
 800ac24:	4602      	mov	r2, r0
 800ac26:	460b      	mov	r3, r1
 800ac28:	4610      	mov	r0, r2
 800ac2a:	4619      	mov	r1, r3
 800ac2c:	f04f 0200 	mov.w	r2, #0
 800ac30:	4b23      	ldr	r3, [pc, #140]	; (800acc0 <GPS_GPRMC_Parse+0x820>)
 800ac32:	f7f5 fcf9 	bl	8000628 <__aeabi_dmul>
 800ac36:	4602      	mov	r2, r0
 800ac38:	460b      	mov	r3, r1
 800ac3a:	491b      	ldr	r1, [pc, #108]	; (800aca8 <GPS_GPRMC_Parse+0x808>)
 800ac3c:	680c      	ldr	r4, [r1, #0]
 800ac3e:	4610      	mov	r0, r2
 800ac40:	4619      	mov	r1, r3
 800ac42:	f7f5 ffc1 	bl	8000bc8 <__aeabi_d2f>
 800ac46:	4603      	mov	r3, r0
 800ac48:	6123      	str	r3, [r4, #16]

		// yer yer bilgisi alır
		TAIL_INCREASE_TO_COMMA;
 800ac4a:	4b18      	ldr	r3, [pc, #96]	; (800acac <GPS_GPRMC_Parse+0x80c>)
 800ac4c:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800ac50:	b2db      	uxtb	r3, r3
 800ac52:	1c5a      	adds	r2, r3, #1
 800ac54:	b2d1      	uxtb	r1, r2
 800ac56:	4a15      	ldr	r2, [pc, #84]	; (800acac <GPS_GPRMC_Parse+0x80c>)
 800ac58:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800ac5c:	4a14      	ldr	r2, [pc, #80]	; (800acb0 <GPS_GPRMC_Parse+0x810>)
 800ac5e:	fba2 1203 	umull	r1, r2, r2, r3
 800ac62:	0912      	lsrs	r2, r2, #4
 800ac64:	21fa      	movs	r1, #250	; 0xfa
 800ac66:	fb01 f202 	mul.w	r2, r1, r2
 800ac6a:	1a9b      	subs	r3, r3, r2
 800ac6c:	b2db      	uxtb	r3, r3
 800ac6e:	461a      	mov	r2, r3
 800ac70:	4b0e      	ldr	r3, [pc, #56]	; (800acac <GPS_GPRMC_Parse+0x80c>)
 800ac72:	5c9b      	ldrb	r3, [r3, r2]
 800ac74:	2b2c      	cmp	r3, #44	; 0x2c
 800ac76:	d1e8      	bne.n	800ac4a <GPS_GPRMC_Parse+0x7aa>
			if(TAIL_READ_P == 'E')	_gps->locationLong = EAST;
 800ac78:	4b0c      	ldr	r3, [pc, #48]	; (800acac <GPS_GPRMC_Parse+0x80c>)
 800ac7a:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800ac7e:	b2db      	uxtb	r3, r3
 800ac80:	1c5a      	adds	r2, r3, #1
 800ac82:	b2d1      	uxtb	r1, r2
 800ac84:	4a09      	ldr	r2, [pc, #36]	; (800acac <GPS_GPRMC_Parse+0x80c>)
 800ac86:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800ac8a:	4a09      	ldr	r2, [pc, #36]	; (800acb0 <GPS_GPRMC_Parse+0x810>)
 800ac8c:	fba2 1203 	umull	r1, r2, r2, r3
 800ac90:	0912      	lsrs	r2, r2, #4
 800ac92:	21fa      	movs	r1, #250	; 0xfa
 800ac94:	fb01 f202 	mul.w	r2, r1, r2
 800ac98:	1a9b      	subs	r3, r3, r2
 800ac9a:	b2db      	uxtb	r3, r3
 800ac9c:	461a      	mov	r2, r3
 800ac9e:	4b03      	ldr	r3, [pc, #12]	; (800acac <GPS_GPRMC_Parse+0x80c>)
 800aca0:	5c9b      	ldrb	r3, [r3, r2]
 800aca2:	2b45      	cmp	r3, #69	; 0x45
 800aca4:	d113      	bne.n	800acce <GPS_GPRMC_Parse+0x82e>
 800aca6:	e00d      	b.n	800acc4 <GPS_GPRMC_Parse+0x824>
 800aca8:	20005070 	.word	0x20005070
 800acac:	20004f70 	.word	0x20004f70
 800acb0:	10624dd3 	.word	0x10624dd3
 800acb4:	40240000 	.word	0x40240000
 800acb8:	40590000 	.word	0x40590000
 800acbc:	408f4000 	.word	0x408f4000
 800acc0:	404e0000 	.word	0x404e0000
 800acc4:	4b7d      	ldr	r3, [pc, #500]	; (800aebc <GPS_GPRMC_Parse+0xa1c>)
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	2202      	movs	r2, #2
 800acca:	751a      	strb	r2, [r3, #20]
 800accc:	e003      	b.n	800acd6 <GPS_GPRMC_Parse+0x836>
			else 					_gps->locationLong = WEST;
 800acce:	4b7b      	ldr	r3, [pc, #492]	; (800aebc <GPS_GPRMC_Parse+0xa1c>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	2203      	movs	r2, #3
 800acd4:	751a      	strb	r2, [r3, #20]

		TAIL_INCREASE_TO_COMMA;
 800acd6:	4b7a      	ldr	r3, [pc, #488]	; (800aec0 <GPS_GPRMC_Parse+0xa20>)
 800acd8:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800acdc:	b2db      	uxtb	r3, r3
 800acde:	1c5a      	adds	r2, r3, #1
 800ace0:	b2d1      	uxtb	r1, r2
 800ace2:	4a77      	ldr	r2, [pc, #476]	; (800aec0 <GPS_GPRMC_Parse+0xa20>)
 800ace4:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800ace8:	4a76      	ldr	r2, [pc, #472]	; (800aec4 <GPS_GPRMC_Parse+0xa24>)
 800acea:	fba2 1203 	umull	r1, r2, r2, r3
 800acee:	0912      	lsrs	r2, r2, #4
 800acf0:	21fa      	movs	r1, #250	; 0xfa
 800acf2:	fb01 f202 	mul.w	r2, r1, r2
 800acf6:	1a9b      	subs	r3, r3, r2
 800acf8:	b2db      	uxtb	r3, r3
 800acfa:	461a      	mov	r2, r3
 800acfc:	4b70      	ldr	r3, [pc, #448]	; (800aec0 <GPS_GPRMC_Parse+0xa20>)
 800acfe:	5c9b      	ldrb	r3, [r3, r2]
 800ad00:	2b2c      	cmp	r3, #44	; 0x2c
 800ad02:	d1e8      	bne.n	800acd6 <GPS_GPRMC_Parse+0x836>
		TAIL_INCREASE_TO_COMMA;
 800ad04:	4b6e      	ldr	r3, [pc, #440]	; (800aec0 <GPS_GPRMC_Parse+0xa20>)
 800ad06:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800ad0a:	b2db      	uxtb	r3, r3
 800ad0c:	1c5a      	adds	r2, r3, #1
 800ad0e:	b2d1      	uxtb	r1, r2
 800ad10:	4a6b      	ldr	r2, [pc, #428]	; (800aec0 <GPS_GPRMC_Parse+0xa20>)
 800ad12:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800ad16:	4a6b      	ldr	r2, [pc, #428]	; (800aec4 <GPS_GPRMC_Parse+0xa24>)
 800ad18:	fba2 1203 	umull	r1, r2, r2, r3
 800ad1c:	0912      	lsrs	r2, r2, #4
 800ad1e:	21fa      	movs	r1, #250	; 0xfa
 800ad20:	fb01 f202 	mul.w	r2, r1, r2
 800ad24:	1a9b      	subs	r3, r3, r2
 800ad26:	b2db      	uxtb	r3, r3
 800ad28:	461a      	mov	r2, r3
 800ad2a:	4b65      	ldr	r3, [pc, #404]	; (800aec0 <GPS_GPRMC_Parse+0xa20>)
 800ad2c:	5c9b      	ldrb	r3, [r3, r2]
 800ad2e:	2b2c      	cmp	r3, #44	; 0x2c
 800ad30:	d1e8      	bne.n	800ad04 <GPS_GPRMC_Parse+0x864>
		TAIL_INCREASE_TO_COMMA;
 800ad32:	4b63      	ldr	r3, [pc, #396]	; (800aec0 <GPS_GPRMC_Parse+0xa20>)
 800ad34:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800ad38:	b2db      	uxtb	r3, r3
 800ad3a:	1c5a      	adds	r2, r3, #1
 800ad3c:	b2d1      	uxtb	r1, r2
 800ad3e:	4a60      	ldr	r2, [pc, #384]	; (800aec0 <GPS_GPRMC_Parse+0xa20>)
 800ad40:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800ad44:	4a5f      	ldr	r2, [pc, #380]	; (800aec4 <GPS_GPRMC_Parse+0xa24>)
 800ad46:	fba2 1203 	umull	r1, r2, r2, r3
 800ad4a:	0912      	lsrs	r2, r2, #4
 800ad4c:	21fa      	movs	r1, #250	; 0xfa
 800ad4e:	fb01 f202 	mul.w	r2, r1, r2
 800ad52:	1a9b      	subs	r3, r3, r2
 800ad54:	b2db      	uxtb	r3, r3
 800ad56:	461a      	mov	r2, r3
 800ad58:	4b59      	ldr	r3, [pc, #356]	; (800aec0 <GPS_GPRMC_Parse+0xa20>)
 800ad5a:	5c9b      	ldrb	r3, [r3, r2]
 800ad5c:	2b2c      	cmp	r3, #44	; 0x2c
 800ad5e:	d1e8      	bne.n	800ad32 <GPS_GPRMC_Parse+0x892>

		// Tarih bilgisini alır
		_gps->day = (TAIL_READ_P - ASCII_NUMBER) * 10 + (TAIL_READ_P - ASCII_NUMBER);
 800ad60:	4b57      	ldr	r3, [pc, #348]	; (800aec0 <GPS_GPRMC_Parse+0xa20>)
 800ad62:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800ad66:	b2db      	uxtb	r3, r3
 800ad68:	1c5a      	adds	r2, r3, #1
 800ad6a:	b2d1      	uxtb	r1, r2
 800ad6c:	4a54      	ldr	r2, [pc, #336]	; (800aec0 <GPS_GPRMC_Parse+0xa20>)
 800ad6e:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800ad72:	4a54      	ldr	r2, [pc, #336]	; (800aec4 <GPS_GPRMC_Parse+0xa24>)
 800ad74:	fba2 1203 	umull	r1, r2, r2, r3
 800ad78:	0912      	lsrs	r2, r2, #4
 800ad7a:	21fa      	movs	r1, #250	; 0xfa
 800ad7c:	fb01 f202 	mul.w	r2, r1, r2
 800ad80:	1a9b      	subs	r3, r3, r2
 800ad82:	b2db      	uxtb	r3, r3
 800ad84:	461a      	mov	r2, r3
 800ad86:	4b4e      	ldr	r3, [pc, #312]	; (800aec0 <GPS_GPRMC_Parse+0xa20>)
 800ad88:	5c9b      	ldrb	r3, [r3, r2]
 800ad8a:	461a      	mov	r2, r3
 800ad8c:	0092      	lsls	r2, r2, #2
 800ad8e:	4413      	add	r3, r2
 800ad90:	005b      	lsls	r3, r3, #1
 800ad92:	b2da      	uxtb	r2, r3
 800ad94:	4b4a      	ldr	r3, [pc, #296]	; (800aec0 <GPS_GPRMC_Parse+0xa20>)
 800ad96:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800ad9a:	b2db      	uxtb	r3, r3
 800ad9c:	1c59      	adds	r1, r3, #1
 800ad9e:	b2c8      	uxtb	r0, r1
 800ada0:	4947      	ldr	r1, [pc, #284]	; (800aec0 <GPS_GPRMC_Parse+0xa20>)
 800ada2:	f881 00fa 	strb.w	r0, [r1, #250]	; 0xfa
 800ada6:	4947      	ldr	r1, [pc, #284]	; (800aec4 <GPS_GPRMC_Parse+0xa24>)
 800ada8:	fba1 0103 	umull	r0, r1, r1, r3
 800adac:	0909      	lsrs	r1, r1, #4
 800adae:	20fa      	movs	r0, #250	; 0xfa
 800adb0:	fb00 f101 	mul.w	r1, r0, r1
 800adb4:	1a5b      	subs	r3, r3, r1
 800adb6:	b2db      	uxtb	r3, r3
 800adb8:	4619      	mov	r1, r3
 800adba:	4b41      	ldr	r3, [pc, #260]	; (800aec0 <GPS_GPRMC_Parse+0xa20>)
 800adbc:	5c5b      	ldrb	r3, [r3, r1]
 800adbe:	4413      	add	r3, r2
 800adc0:	b2da      	uxtb	r2, r3
 800adc2:	4b3e      	ldr	r3, [pc, #248]	; (800aebc <GPS_GPRMC_Parse+0xa1c>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	3a10      	subs	r2, #16
 800adc8:	b2d2      	uxtb	r2, r2
 800adca:	755a      	strb	r2, [r3, #21]
		_gps->month = (TAIL_READ_P - ASCII_NUMBER) * 10 + (TAIL_READ_P - ASCII_NUMBER);
 800adcc:	4b3c      	ldr	r3, [pc, #240]	; (800aec0 <GPS_GPRMC_Parse+0xa20>)
 800adce:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800add2:	b2db      	uxtb	r3, r3
 800add4:	1c5a      	adds	r2, r3, #1
 800add6:	b2d1      	uxtb	r1, r2
 800add8:	4a39      	ldr	r2, [pc, #228]	; (800aec0 <GPS_GPRMC_Parse+0xa20>)
 800adda:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800adde:	4a39      	ldr	r2, [pc, #228]	; (800aec4 <GPS_GPRMC_Parse+0xa24>)
 800ade0:	fba2 1203 	umull	r1, r2, r2, r3
 800ade4:	0912      	lsrs	r2, r2, #4
 800ade6:	21fa      	movs	r1, #250	; 0xfa
 800ade8:	fb01 f202 	mul.w	r2, r1, r2
 800adec:	1a9b      	subs	r3, r3, r2
 800adee:	b2db      	uxtb	r3, r3
 800adf0:	461a      	mov	r2, r3
 800adf2:	4b33      	ldr	r3, [pc, #204]	; (800aec0 <GPS_GPRMC_Parse+0xa20>)
 800adf4:	5c9b      	ldrb	r3, [r3, r2]
 800adf6:	461a      	mov	r2, r3
 800adf8:	0092      	lsls	r2, r2, #2
 800adfa:	4413      	add	r3, r2
 800adfc:	005b      	lsls	r3, r3, #1
 800adfe:	b2da      	uxtb	r2, r3
 800ae00:	4b2f      	ldr	r3, [pc, #188]	; (800aec0 <GPS_GPRMC_Parse+0xa20>)
 800ae02:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800ae06:	b2db      	uxtb	r3, r3
 800ae08:	1c59      	adds	r1, r3, #1
 800ae0a:	b2c8      	uxtb	r0, r1
 800ae0c:	492c      	ldr	r1, [pc, #176]	; (800aec0 <GPS_GPRMC_Parse+0xa20>)
 800ae0e:	f881 00fa 	strb.w	r0, [r1, #250]	; 0xfa
 800ae12:	492c      	ldr	r1, [pc, #176]	; (800aec4 <GPS_GPRMC_Parse+0xa24>)
 800ae14:	fba1 0103 	umull	r0, r1, r1, r3
 800ae18:	0909      	lsrs	r1, r1, #4
 800ae1a:	20fa      	movs	r0, #250	; 0xfa
 800ae1c:	fb00 f101 	mul.w	r1, r0, r1
 800ae20:	1a5b      	subs	r3, r3, r1
 800ae22:	b2db      	uxtb	r3, r3
 800ae24:	4619      	mov	r1, r3
 800ae26:	4b26      	ldr	r3, [pc, #152]	; (800aec0 <GPS_GPRMC_Parse+0xa20>)
 800ae28:	5c5b      	ldrb	r3, [r3, r1]
 800ae2a:	4413      	add	r3, r2
 800ae2c:	b2da      	uxtb	r2, r3
 800ae2e:	4b23      	ldr	r3, [pc, #140]	; (800aebc <GPS_GPRMC_Parse+0xa1c>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	3a10      	subs	r2, #16
 800ae34:	b2d2      	uxtb	r2, r2
 800ae36:	759a      	strb	r2, [r3, #22]
		_gps->year = 2000 + (TAIL_READ_P - ASCII_NUMBER) * 10 + (TAIL_READ_P - ASCII_NUMBER);
 800ae38:	4b21      	ldr	r3, [pc, #132]	; (800aec0 <GPS_GPRMC_Parse+0xa20>)
 800ae3a:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800ae3e:	b2db      	uxtb	r3, r3
 800ae40:	1c5a      	adds	r2, r3, #1
 800ae42:	b2d1      	uxtb	r1, r2
 800ae44:	4a1e      	ldr	r2, [pc, #120]	; (800aec0 <GPS_GPRMC_Parse+0xa20>)
 800ae46:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800ae4a:	4a1e      	ldr	r2, [pc, #120]	; (800aec4 <GPS_GPRMC_Parse+0xa24>)
 800ae4c:	fba2 1203 	umull	r1, r2, r2, r3
 800ae50:	0912      	lsrs	r2, r2, #4
 800ae52:	21fa      	movs	r1, #250	; 0xfa
 800ae54:	fb01 f202 	mul.w	r2, r1, r2
 800ae58:	1a9b      	subs	r3, r3, r2
 800ae5a:	b2db      	uxtb	r3, r3
 800ae5c:	461a      	mov	r2, r3
 800ae5e:	4b18      	ldr	r3, [pc, #96]	; (800aec0 <GPS_GPRMC_Parse+0xa20>)
 800ae60:	5c9b      	ldrb	r3, [r3, r2]
 800ae62:	3b30      	subs	r3, #48	; 0x30
 800ae64:	b29b      	uxth	r3, r3
 800ae66:	461a      	mov	r2, r3
 800ae68:	0092      	lsls	r2, r2, #2
 800ae6a:	4413      	add	r3, r2
 800ae6c:	005b      	lsls	r3, r3, #1
 800ae6e:	b29a      	uxth	r2, r3
 800ae70:	4b13      	ldr	r3, [pc, #76]	; (800aec0 <GPS_GPRMC_Parse+0xa20>)
 800ae72:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800ae76:	b2db      	uxtb	r3, r3
 800ae78:	1c59      	adds	r1, r3, #1
 800ae7a:	b2c8      	uxtb	r0, r1
 800ae7c:	4910      	ldr	r1, [pc, #64]	; (800aec0 <GPS_GPRMC_Parse+0xa20>)
 800ae7e:	f881 00fa 	strb.w	r0, [r1, #250]	; 0xfa
 800ae82:	4910      	ldr	r1, [pc, #64]	; (800aec4 <GPS_GPRMC_Parse+0xa24>)
 800ae84:	fba1 0103 	umull	r0, r1, r1, r3
 800ae88:	0909      	lsrs	r1, r1, #4
 800ae8a:	20fa      	movs	r0, #250	; 0xfa
 800ae8c:	fb00 f101 	mul.w	r1, r0, r1
 800ae90:	1a5b      	subs	r3, r3, r1
 800ae92:	b2db      	uxtb	r3, r3
 800ae94:	4619      	mov	r1, r3
 800ae96:	4b0a      	ldr	r3, [pc, #40]	; (800aec0 <GPS_GPRMC_Parse+0xa20>)
 800ae98:	5c5b      	ldrb	r3, [r3, r1]
 800ae9a:	b29b      	uxth	r3, r3
 800ae9c:	4413      	add	r3, r2
 800ae9e:	b29a      	uxth	r2, r3
 800aea0:	4b06      	ldr	r3, [pc, #24]	; (800aebc <GPS_GPRMC_Parse+0xa1c>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f502 62f4 	add.w	r2, r2, #1952	; 0x7a0
 800aea8:	b292      	uxth	r2, r2
 800aeaa:	831a      	strh	r2, [r3, #24]

		return _gps->gpsState;
 800aeac:	4b03      	ldr	r3, [pc, #12]	; (800aebc <GPS_GPRMC_Parse+0xa1c>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800aeb4:	e000      	b.n	800aeb8 <GPS_GPRMC_Parse+0xa18>
	}
	else	return WRONG_DATA;
 800aeb6:	2301      	movs	r3, #1
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	bdb0      	pop	{r4, r5, r7, pc}
 800aebc:	20005070 	.word	0x20005070
 800aec0:	20004f70 	.word	0x20004f70
 800aec4:	10624dd3 	.word	0x10624dd3

0800aec8 <GPS_GPGGA_Parse>:
/////////////////////////////////////////////////////////////
/*
 * GPGGA verilerini çözer ve gps değerine atar	-uydu sayısı ve yükseklik-
 */
GPS_State GPS_GPGGA_Parse()
{
 800aec8:	b5b0      	push	{r4, r5, r7, lr}
 800aeca:	af00      	add	r7, sp, #0
	if(!GPS_CheckSumControl(&ringBuff.rxGps[ringBuff.tail]))
 800aecc:	4b58      	ldr	r3, [pc, #352]	; (800b030 <GPS_GPGGA_Parse+0x168>)
 800aece:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800aed2:	b2db      	uxtb	r3, r3
 800aed4:	461a      	mov	r2, r3
 800aed6:	4b56      	ldr	r3, [pc, #344]	; (800b030 <GPS_GPGGA_Parse+0x168>)
 800aed8:	4413      	add	r3, r2
 800aeda:	4618      	mov	r0, r3
 800aedc:	f000 fbc4 	bl	800b668 <GPS_CheckSumControl>
 800aee0:	4603      	mov	r3, r0
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d101      	bne.n	800aeea <GPS_GPGGA_Parse+0x22>
	{
		return WRONG_DATA;
 800aee6:	2301      	movs	r3, #1
 800aee8:	e1e2      	b.n	800b2b0 <GPS_GPGGA_Parse+0x3e8>
	}
	else
	{
		TAIL_INCREASE_TO_COMMA;					// "GPGGA," sonrasına geçer
 800aeea:	4b51      	ldr	r3, [pc, #324]	; (800b030 <GPS_GPGGA_Parse+0x168>)
 800aeec:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800aef0:	b2db      	uxtb	r3, r3
 800aef2:	1c5a      	adds	r2, r3, #1
 800aef4:	b2d1      	uxtb	r1, r2
 800aef6:	4a4e      	ldr	r2, [pc, #312]	; (800b030 <GPS_GPGGA_Parse+0x168>)
 800aef8:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800aefc:	4a4d      	ldr	r2, [pc, #308]	; (800b034 <GPS_GPGGA_Parse+0x16c>)
 800aefe:	fba2 1203 	umull	r1, r2, r2, r3
 800af02:	0912      	lsrs	r2, r2, #4
 800af04:	21fa      	movs	r1, #250	; 0xfa
 800af06:	fb01 f202 	mul.w	r2, r1, r2
 800af0a:	1a9b      	subs	r3, r3, r2
 800af0c:	b2db      	uxtb	r3, r3
 800af0e:	461a      	mov	r2, r3
 800af10:	4b47      	ldr	r3, [pc, #284]	; (800b030 <GPS_GPGGA_Parse+0x168>)
 800af12:	5c9b      	ldrb	r3, [r3, r2]
 800af14:	2b2c      	cmp	r3, #44	; 0x2c
 800af16:	d1e8      	bne.n	800aeea <GPS_GPGGA_Parse+0x22>
		TAIL_INCREASE_TO_COMMA;					// "tarih sonrasına geçer
 800af18:	4b45      	ldr	r3, [pc, #276]	; (800b030 <GPS_GPGGA_Parse+0x168>)
 800af1a:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800af1e:	b2db      	uxtb	r3, r3
 800af20:	1c5a      	adds	r2, r3, #1
 800af22:	b2d1      	uxtb	r1, r2
 800af24:	4a42      	ldr	r2, [pc, #264]	; (800b030 <GPS_GPGGA_Parse+0x168>)
 800af26:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800af2a:	4a42      	ldr	r2, [pc, #264]	; (800b034 <GPS_GPGGA_Parse+0x16c>)
 800af2c:	fba2 1203 	umull	r1, r2, r2, r3
 800af30:	0912      	lsrs	r2, r2, #4
 800af32:	21fa      	movs	r1, #250	; 0xfa
 800af34:	fb01 f202 	mul.w	r2, r1, r2
 800af38:	1a9b      	subs	r3, r3, r2
 800af3a:	b2db      	uxtb	r3, r3
 800af3c:	461a      	mov	r2, r3
 800af3e:	4b3c      	ldr	r3, [pc, #240]	; (800b030 <GPS_GPGGA_Parse+0x168>)
 800af40:	5c9b      	ldrb	r3, [r3, r2]
 800af42:	2b2c      	cmp	r3, #44	; 0x2c
 800af44:	d1e8      	bne.n	800af18 <GPS_GPGGA_Parse+0x50>
		TAIL_INCREASE_TO_COMMA;					// enlem sonrasına geçer
 800af46:	4b3a      	ldr	r3, [pc, #232]	; (800b030 <GPS_GPGGA_Parse+0x168>)
 800af48:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800af4c:	b2db      	uxtb	r3, r3
 800af4e:	1c5a      	adds	r2, r3, #1
 800af50:	b2d1      	uxtb	r1, r2
 800af52:	4a37      	ldr	r2, [pc, #220]	; (800b030 <GPS_GPGGA_Parse+0x168>)
 800af54:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800af58:	4a36      	ldr	r2, [pc, #216]	; (800b034 <GPS_GPGGA_Parse+0x16c>)
 800af5a:	fba2 1203 	umull	r1, r2, r2, r3
 800af5e:	0912      	lsrs	r2, r2, #4
 800af60:	21fa      	movs	r1, #250	; 0xfa
 800af62:	fb01 f202 	mul.w	r2, r1, r2
 800af66:	1a9b      	subs	r3, r3, r2
 800af68:	b2db      	uxtb	r3, r3
 800af6a:	461a      	mov	r2, r3
 800af6c:	4b30      	ldr	r3, [pc, #192]	; (800b030 <GPS_GPGGA_Parse+0x168>)
 800af6e:	5c9b      	ldrb	r3, [r3, r2]
 800af70:	2b2c      	cmp	r3, #44	; 0x2c
 800af72:	d1e8      	bne.n	800af46 <GPS_GPGGA_Parse+0x7e>
		TAIL_INCREASE_TO_COMMA;					// boylam sonrasına geçer
 800af74:	4b2e      	ldr	r3, [pc, #184]	; (800b030 <GPS_GPGGA_Parse+0x168>)
 800af76:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800af7a:	b2db      	uxtb	r3, r3
 800af7c:	1c5a      	adds	r2, r3, #1
 800af7e:	b2d1      	uxtb	r1, r2
 800af80:	4a2b      	ldr	r2, [pc, #172]	; (800b030 <GPS_GPGGA_Parse+0x168>)
 800af82:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800af86:	4a2b      	ldr	r2, [pc, #172]	; (800b034 <GPS_GPGGA_Parse+0x16c>)
 800af88:	fba2 1203 	umull	r1, r2, r2, r3
 800af8c:	0912      	lsrs	r2, r2, #4
 800af8e:	21fa      	movs	r1, #250	; 0xfa
 800af90:	fb01 f202 	mul.w	r2, r1, r2
 800af94:	1a9b      	subs	r3, r3, r2
 800af96:	b2db      	uxtb	r3, r3
 800af98:	461a      	mov	r2, r3
 800af9a:	4b25      	ldr	r3, [pc, #148]	; (800b030 <GPS_GPGGA_Parse+0x168>)
 800af9c:	5c9b      	ldrb	r3, [r3, r2]
 800af9e:	2b2c      	cmp	r3, #44	; 0x2c
 800afa0:	d1e8      	bne.n	800af74 <GPS_GPGGA_Parse+0xac>
		TAIL_INCREASE_TO_COMMA;					// Boylam bölgesinin başına geçer
 800afa2:	4b23      	ldr	r3, [pc, #140]	; (800b030 <GPS_GPGGA_Parse+0x168>)
 800afa4:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800afa8:	b2db      	uxtb	r3, r3
 800afaa:	1c5a      	adds	r2, r3, #1
 800afac:	b2d1      	uxtb	r1, r2
 800afae:	4a20      	ldr	r2, [pc, #128]	; (800b030 <GPS_GPGGA_Parse+0x168>)
 800afb0:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800afb4:	4a1f      	ldr	r2, [pc, #124]	; (800b034 <GPS_GPGGA_Parse+0x16c>)
 800afb6:	fba2 1203 	umull	r1, r2, r2, r3
 800afba:	0912      	lsrs	r2, r2, #4
 800afbc:	21fa      	movs	r1, #250	; 0xfa
 800afbe:	fb01 f202 	mul.w	r2, r1, r2
 800afc2:	1a9b      	subs	r3, r3, r2
 800afc4:	b2db      	uxtb	r3, r3
 800afc6:	461a      	mov	r2, r3
 800afc8:	4b19      	ldr	r3, [pc, #100]	; (800b030 <GPS_GPGGA_Parse+0x168>)
 800afca:	5c9b      	ldrb	r3, [r3, r2]
 800afcc:	2b2c      	cmp	r3, #44	; 0x2c
 800afce:	d1e8      	bne.n	800afa2 <GPS_GPGGA_Parse+0xda>
		TAIL_INCREASE_TO_COMMA;					// Boylam bölgesinin sonuna geçer
 800afd0:	4b17      	ldr	r3, [pc, #92]	; (800b030 <GPS_GPGGA_Parse+0x168>)
 800afd2:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800afd6:	b2db      	uxtb	r3, r3
 800afd8:	1c5a      	adds	r2, r3, #1
 800afda:	b2d1      	uxtb	r1, r2
 800afdc:	4a14      	ldr	r2, [pc, #80]	; (800b030 <GPS_GPGGA_Parse+0x168>)
 800afde:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800afe2:	4a14      	ldr	r2, [pc, #80]	; (800b034 <GPS_GPGGA_Parse+0x16c>)
 800afe4:	fba2 1203 	umull	r1, r2, r2, r3
 800afe8:	0912      	lsrs	r2, r2, #4
 800afea:	21fa      	movs	r1, #250	; 0xfa
 800afec:	fb01 f202 	mul.w	r2, r1, r2
 800aff0:	1a9b      	subs	r3, r3, r2
 800aff2:	b2db      	uxtb	r3, r3
 800aff4:	461a      	mov	r2, r3
 800aff6:	4b0e      	ldr	r3, [pc, #56]	; (800b030 <GPS_GPGGA_Parse+0x168>)
 800aff8:	5c9b      	ldrb	r3, [r3, r2]
 800affa:	2b2c      	cmp	r3, #44	; 0x2c
 800affc:	d1e8      	bne.n	800afd0 <GPS_GPGGA_Parse+0x108>

		if(TAIL_READ == '0')					//GNSS Position Fix Indicator
 800affe:	4b0c      	ldr	r3, [pc, #48]	; (800b030 <GPS_GPGGA_Parse+0x168>)
 800b000:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800b004:	b2db      	uxtb	r3, r3
 800b006:	4a0b      	ldr	r2, [pc, #44]	; (800b034 <GPS_GPGGA_Parse+0x16c>)
 800b008:	fba2 1203 	umull	r1, r2, r2, r3
 800b00c:	0912      	lsrs	r2, r2, #4
 800b00e:	21fa      	movs	r1, #250	; 0xfa
 800b010:	fb01 f202 	mul.w	r2, r1, r2
 800b014:	1a9b      	subs	r3, r3, r2
 800b016:	b2db      	uxtb	r3, r3
 800b018:	461a      	mov	r2, r3
 800b01a:	4b05      	ldr	r3, [pc, #20]	; (800b030 <GPS_GPGGA_Parse+0x168>)
 800b01c:	5c9b      	ldrb	r3, [r3, r2]
 800b01e:	2b30      	cmp	r3, #48	; 0x30
 800b020:	d10c      	bne.n	800b03c <GPS_GPGGA_Parse+0x174>
		{
			_gps->gpsState = NO_CONNECTION;
 800b022:	4b05      	ldr	r3, [pc, #20]	; (800b038 <GPS_GPGGA_Parse+0x170>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	2200      	movs	r2, #0
 800b028:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			return NO_CONNECTION;
 800b02c:	2300      	movs	r3, #0
 800b02e:	e13f      	b.n	800b2b0 <GPS_GPGGA_Parse+0x3e8>
 800b030:	20004f70 	.word	0x20004f70
 800b034:	10624dd3 	.word	0x10624dd3
 800b038:	20005070 	.word	0x20005070
		}
		else
			_gps->gpsState = POSITION_FIXED;
 800b03c:	4b9d      	ldr	r3, [pc, #628]	; (800b2b4 <GPS_GPGGA_Parse+0x3ec>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	2202      	movs	r2, #2
 800b042:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		if(TAIL_READ_P != 0)
 800b046:	4b9c      	ldr	r3, [pc, #624]	; (800b2b8 <GPS_GPGGA_Parse+0x3f0>)
 800b048:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800b04c:	b2db      	uxtb	r3, r3
 800b04e:	1c5a      	adds	r2, r3, #1
 800b050:	b2d1      	uxtb	r1, r2
 800b052:	4a99      	ldr	r2, [pc, #612]	; (800b2b8 <GPS_GPGGA_Parse+0x3f0>)
 800b054:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800b058:	4a98      	ldr	r2, [pc, #608]	; (800b2bc <GPS_GPGGA_Parse+0x3f4>)
 800b05a:	fba2 1203 	umull	r1, r2, r2, r3
 800b05e:	0912      	lsrs	r2, r2, #4
 800b060:	21fa      	movs	r1, #250	; 0xfa
 800b062:	fb01 f202 	mul.w	r2, r1, r2
 800b066:	1a9b      	subs	r3, r3, r2
 800b068:	b2db      	uxtb	r3, r3
 800b06a:	461a      	mov	r2, r3
 800b06c:	4b92      	ldr	r3, [pc, #584]	; (800b2b8 <GPS_GPGGA_Parse+0x3f0>)
 800b06e:	5c9b      	ldrb	r3, [r3, r2]
 800b070:	2b00      	cmp	r3, #0
 800b072:	f000 8119 	beq.w	800b2a8 <GPS_GPGGA_Parse+0x3e0>
		{
			TAIL_INCREASE_TO_COMMA;	// "," geçer
 800b076:	4b90      	ldr	r3, [pc, #576]	; (800b2b8 <GPS_GPGGA_Parse+0x3f0>)
 800b078:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800b07c:	b2db      	uxtb	r3, r3
 800b07e:	1c5a      	adds	r2, r3, #1
 800b080:	b2d1      	uxtb	r1, r2
 800b082:	4a8d      	ldr	r2, [pc, #564]	; (800b2b8 <GPS_GPGGA_Parse+0x3f0>)
 800b084:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800b088:	4a8c      	ldr	r2, [pc, #560]	; (800b2bc <GPS_GPGGA_Parse+0x3f4>)
 800b08a:	fba2 1203 	umull	r1, r2, r2, r3
 800b08e:	0912      	lsrs	r2, r2, #4
 800b090:	21fa      	movs	r1, #250	; 0xfa
 800b092:	fb01 f202 	mul.w	r2, r1, r2
 800b096:	1a9b      	subs	r3, r3, r2
 800b098:	b2db      	uxtb	r3, r3
 800b09a:	461a      	mov	r2, r3
 800b09c:	4b86      	ldr	r3, [pc, #536]	; (800b2b8 <GPS_GPGGA_Parse+0x3f0>)
 800b09e:	5c9b      	ldrb	r3, [r3, r2]
 800b0a0:	2b2c      	cmp	r3, #44	; 0x2c
 800b0a2:	d1e8      	bne.n	800b076 <GPS_GPGGA_Parse+0x1ae>
			_gps->numberOfSatellite = (TAIL_READ_P - ASCII_NUMBER) * 10 + (TAIL_READ_P - ASCII_NUMBER);
 800b0a4:	4b84      	ldr	r3, [pc, #528]	; (800b2b8 <GPS_GPGGA_Parse+0x3f0>)
 800b0a6:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800b0aa:	b2db      	uxtb	r3, r3
 800b0ac:	1c5a      	adds	r2, r3, #1
 800b0ae:	b2d1      	uxtb	r1, r2
 800b0b0:	4a81      	ldr	r2, [pc, #516]	; (800b2b8 <GPS_GPGGA_Parse+0x3f0>)
 800b0b2:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800b0b6:	4a81      	ldr	r2, [pc, #516]	; (800b2bc <GPS_GPGGA_Parse+0x3f4>)
 800b0b8:	fba2 1203 	umull	r1, r2, r2, r3
 800b0bc:	0912      	lsrs	r2, r2, #4
 800b0be:	21fa      	movs	r1, #250	; 0xfa
 800b0c0:	fb01 f202 	mul.w	r2, r1, r2
 800b0c4:	1a9b      	subs	r3, r3, r2
 800b0c6:	b2db      	uxtb	r3, r3
 800b0c8:	461a      	mov	r2, r3
 800b0ca:	4b7b      	ldr	r3, [pc, #492]	; (800b2b8 <GPS_GPGGA_Parse+0x3f0>)
 800b0cc:	5c9b      	ldrb	r3, [r3, r2]
 800b0ce:	461a      	mov	r2, r3
 800b0d0:	0092      	lsls	r2, r2, #2
 800b0d2:	4413      	add	r3, r2
 800b0d4:	005b      	lsls	r3, r3, #1
 800b0d6:	b2da      	uxtb	r2, r3
 800b0d8:	4b77      	ldr	r3, [pc, #476]	; (800b2b8 <GPS_GPGGA_Parse+0x3f0>)
 800b0da:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800b0de:	b2db      	uxtb	r3, r3
 800b0e0:	1c59      	adds	r1, r3, #1
 800b0e2:	b2c8      	uxtb	r0, r1
 800b0e4:	4974      	ldr	r1, [pc, #464]	; (800b2b8 <GPS_GPGGA_Parse+0x3f0>)
 800b0e6:	f881 00fa 	strb.w	r0, [r1, #250]	; 0xfa
 800b0ea:	4974      	ldr	r1, [pc, #464]	; (800b2bc <GPS_GPGGA_Parse+0x3f4>)
 800b0ec:	fba1 0103 	umull	r0, r1, r1, r3
 800b0f0:	0909      	lsrs	r1, r1, #4
 800b0f2:	20fa      	movs	r0, #250	; 0xfa
 800b0f4:	fb00 f101 	mul.w	r1, r0, r1
 800b0f8:	1a5b      	subs	r3, r3, r1
 800b0fa:	b2db      	uxtb	r3, r3
 800b0fc:	4619      	mov	r1, r3
 800b0fe:	4b6e      	ldr	r3, [pc, #440]	; (800b2b8 <GPS_GPGGA_Parse+0x3f0>)
 800b100:	5c5b      	ldrb	r3, [r3, r1]
 800b102:	4413      	add	r3, r2
 800b104:	b2da      	uxtb	r2, r3
 800b106:	4b6b      	ldr	r3, [pc, #428]	; (800b2b4 <GPS_GPGGA_Parse+0x3ec>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	3a10      	subs	r2, #16
 800b10c:	b2d2      	uxtb	r2, r2
 800b10e:	769a      	strb	r2, [r3, #26]

			TAIL_INCREASE_TO_COMMA;	// ",0.9" geçer
 800b110:	4b69      	ldr	r3, [pc, #420]	; (800b2b8 <GPS_GPGGA_Parse+0x3f0>)
 800b112:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800b116:	b2db      	uxtb	r3, r3
 800b118:	1c5a      	adds	r2, r3, #1
 800b11a:	b2d1      	uxtb	r1, r2
 800b11c:	4a66      	ldr	r2, [pc, #408]	; (800b2b8 <GPS_GPGGA_Parse+0x3f0>)
 800b11e:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800b122:	4a66      	ldr	r2, [pc, #408]	; (800b2bc <GPS_GPGGA_Parse+0x3f4>)
 800b124:	fba2 1203 	umull	r1, r2, r2, r3
 800b128:	0912      	lsrs	r2, r2, #4
 800b12a:	21fa      	movs	r1, #250	; 0xfa
 800b12c:	fb01 f202 	mul.w	r2, r1, r2
 800b130:	1a9b      	subs	r3, r3, r2
 800b132:	b2db      	uxtb	r3, r3
 800b134:	461a      	mov	r2, r3
 800b136:	4b60      	ldr	r3, [pc, #384]	; (800b2b8 <GPS_GPGGA_Parse+0x3f0>)
 800b138:	5c9b      	ldrb	r3, [r3, r2]
 800b13a:	2b2c      	cmp	r3, #44	; 0x2c
 800b13c:	d1e8      	bne.n	800b110 <GPS_GPGGA_Parse+0x248>
			TAIL_INCREASE_TO_COMMA;	// "," geçer
 800b13e:	4b5e      	ldr	r3, [pc, #376]	; (800b2b8 <GPS_GPGGA_Parse+0x3f0>)
 800b140:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800b144:	b2db      	uxtb	r3, r3
 800b146:	1c5a      	adds	r2, r3, #1
 800b148:	b2d1      	uxtb	r1, r2
 800b14a:	4a5b      	ldr	r2, [pc, #364]	; (800b2b8 <GPS_GPGGA_Parse+0x3f0>)
 800b14c:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800b150:	4a5a      	ldr	r2, [pc, #360]	; (800b2bc <GPS_GPGGA_Parse+0x3f4>)
 800b152:	fba2 1203 	umull	r1, r2, r2, r3
 800b156:	0912      	lsrs	r2, r2, #4
 800b158:	21fa      	movs	r1, #250	; 0xfa
 800b15a:	fb01 f202 	mul.w	r2, r1, r2
 800b15e:	1a9b      	subs	r3, r3, r2
 800b160:	b2db      	uxtb	r3, r3
 800b162:	461a      	mov	r2, r3
 800b164:	4b54      	ldr	r3, [pc, #336]	; (800b2b8 <GPS_GPGGA_Parse+0x3f0>)
 800b166:	5c9b      	ldrb	r3, [r3, r2]
 800b168:	2b2c      	cmp	r3, #44	; 0x2c
 800b16a:	d1e8      	bne.n	800b13e <GPS_GPGGA_Parse+0x276>

			_gps->height = (TAIL_READ_P - ASCII_NUMBER) * 100 + (TAIL_READ_P - ASCII_NUMBER) * 10 + (TAIL_READ_P - ASCII_NUMBER);
 800b16c:	4b52      	ldr	r3, [pc, #328]	; (800b2b8 <GPS_GPGGA_Parse+0x3f0>)
 800b16e:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800b172:	b2db      	uxtb	r3, r3
 800b174:	1c5a      	adds	r2, r3, #1
 800b176:	b2d1      	uxtb	r1, r2
 800b178:	4a4f      	ldr	r2, [pc, #316]	; (800b2b8 <GPS_GPGGA_Parse+0x3f0>)
 800b17a:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800b17e:	4a4f      	ldr	r2, [pc, #316]	; (800b2bc <GPS_GPGGA_Parse+0x3f4>)
 800b180:	fba2 1203 	umull	r1, r2, r2, r3
 800b184:	0912      	lsrs	r2, r2, #4
 800b186:	21fa      	movs	r1, #250	; 0xfa
 800b188:	fb01 f202 	mul.w	r2, r1, r2
 800b18c:	1a9b      	subs	r3, r3, r2
 800b18e:	b2db      	uxtb	r3, r3
 800b190:	461a      	mov	r2, r3
 800b192:	4b49      	ldr	r3, [pc, #292]	; (800b2b8 <GPS_GPGGA_Parse+0x3f0>)
 800b194:	5c9b      	ldrb	r3, [r3, r2]
 800b196:	3b30      	subs	r3, #48	; 0x30
 800b198:	2264      	movs	r2, #100	; 0x64
 800b19a:	fb02 f103 	mul.w	r1, r2, r3
 800b19e:	4b46      	ldr	r3, [pc, #280]	; (800b2b8 <GPS_GPGGA_Parse+0x3f0>)
 800b1a0:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800b1a4:	b2db      	uxtb	r3, r3
 800b1a6:	1c5a      	adds	r2, r3, #1
 800b1a8:	b2d0      	uxtb	r0, r2
 800b1aa:	4a43      	ldr	r2, [pc, #268]	; (800b2b8 <GPS_GPGGA_Parse+0x3f0>)
 800b1ac:	f882 00fa 	strb.w	r0, [r2, #250]	; 0xfa
 800b1b0:	4a42      	ldr	r2, [pc, #264]	; (800b2bc <GPS_GPGGA_Parse+0x3f4>)
 800b1b2:	fba2 0203 	umull	r0, r2, r2, r3
 800b1b6:	0912      	lsrs	r2, r2, #4
 800b1b8:	20fa      	movs	r0, #250	; 0xfa
 800b1ba:	fb00 f202 	mul.w	r2, r0, r2
 800b1be:	1a9b      	subs	r3, r3, r2
 800b1c0:	b2db      	uxtb	r3, r3
 800b1c2:	461a      	mov	r2, r3
 800b1c4:	4b3c      	ldr	r3, [pc, #240]	; (800b2b8 <GPS_GPGGA_Parse+0x3f0>)
 800b1c6:	5c9b      	ldrb	r3, [r3, r2]
 800b1c8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800b1cc:	4613      	mov	r3, r2
 800b1ce:	009b      	lsls	r3, r3, #2
 800b1d0:	4413      	add	r3, r2
 800b1d2:	005b      	lsls	r3, r3, #1
 800b1d4:	18ca      	adds	r2, r1, r3
 800b1d6:	4b38      	ldr	r3, [pc, #224]	; (800b2b8 <GPS_GPGGA_Parse+0x3f0>)
 800b1d8:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800b1dc:	b2db      	uxtb	r3, r3
 800b1de:	1c59      	adds	r1, r3, #1
 800b1e0:	b2c8      	uxtb	r0, r1
 800b1e2:	4935      	ldr	r1, [pc, #212]	; (800b2b8 <GPS_GPGGA_Parse+0x3f0>)
 800b1e4:	f881 00fa 	strb.w	r0, [r1, #250]	; 0xfa
 800b1e8:	4934      	ldr	r1, [pc, #208]	; (800b2bc <GPS_GPGGA_Parse+0x3f4>)
 800b1ea:	fba1 0103 	umull	r0, r1, r1, r3
 800b1ee:	0909      	lsrs	r1, r1, #4
 800b1f0:	20fa      	movs	r0, #250	; 0xfa
 800b1f2:	fb00 f101 	mul.w	r1, r0, r1
 800b1f6:	1a5b      	subs	r3, r3, r1
 800b1f8:	b2db      	uxtb	r3, r3
 800b1fa:	4619      	mov	r1, r3
 800b1fc:	4b2e      	ldr	r3, [pc, #184]	; (800b2b8 <GPS_GPGGA_Parse+0x3f0>)
 800b1fe:	5c5b      	ldrb	r3, [r3, r1]
 800b200:	3b30      	subs	r3, #48	; 0x30
 800b202:	441a      	add	r2, r3
 800b204:	4b2b      	ldr	r3, [pc, #172]	; (800b2b4 <GPS_GPGGA_Parse+0x3ec>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	ee07 2a90 	vmov	s15, r2
 800b20c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b210:	edc3 7a07 	vstr	s15, [r3, #28]
			TAIL_INCREASE;
 800b214:	4b28      	ldr	r3, [pc, #160]	; (800b2b8 <GPS_GPGGA_Parse+0x3f0>)
 800b216:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800b21a:	b2db      	uxtb	r3, r3
 800b21c:	3301      	adds	r3, #1
 800b21e:	461a      	mov	r2, r3
 800b220:	4b26      	ldr	r3, [pc, #152]	; (800b2bc <GPS_GPGGA_Parse+0x3f4>)
 800b222:	fba3 1302 	umull	r1, r3, r3, r2
 800b226:	091b      	lsrs	r3, r3, #4
 800b228:	21fa      	movs	r1, #250	; 0xfa
 800b22a:	fb01 f303 	mul.w	r3, r1, r3
 800b22e:	1ad3      	subs	r3, r2, r3
 800b230:	b2da      	uxtb	r2, r3
 800b232:	4b21      	ldr	r3, [pc, #132]	; (800b2b8 <GPS_GPGGA_Parse+0x3f0>)
 800b234:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
			_gps->height += (TAIL_READ_P - ASCII_NUMBER) / 10.0;
 800b238:	4b1f      	ldr	r3, [pc, #124]	; (800b2b8 <GPS_GPGGA_Parse+0x3f0>)
 800b23a:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800b23e:	b2db      	uxtb	r3, r3
 800b240:	1c5a      	adds	r2, r3, #1
 800b242:	b2d1      	uxtb	r1, r2
 800b244:	4a1c      	ldr	r2, [pc, #112]	; (800b2b8 <GPS_GPGGA_Parse+0x3f0>)
 800b246:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800b24a:	4a1c      	ldr	r2, [pc, #112]	; (800b2bc <GPS_GPGGA_Parse+0x3f4>)
 800b24c:	fba2 1203 	umull	r1, r2, r2, r3
 800b250:	0912      	lsrs	r2, r2, #4
 800b252:	21fa      	movs	r1, #250	; 0xfa
 800b254:	fb01 f202 	mul.w	r2, r1, r2
 800b258:	1a9b      	subs	r3, r3, r2
 800b25a:	b2db      	uxtb	r3, r3
 800b25c:	461a      	mov	r2, r3
 800b25e:	4b16      	ldr	r3, [pc, #88]	; (800b2b8 <GPS_GPGGA_Parse+0x3f0>)
 800b260:	5c9b      	ldrb	r3, [r3, r2]
 800b262:	3b30      	subs	r3, #48	; 0x30
 800b264:	4618      	mov	r0, r3
 800b266:	f7f5 f975 	bl	8000554 <__aeabi_i2d>
 800b26a:	f04f 0200 	mov.w	r2, #0
 800b26e:	4b14      	ldr	r3, [pc, #80]	; (800b2c0 <GPS_GPGGA_Parse+0x3f8>)
 800b270:	f7f5 fb04 	bl	800087c <__aeabi_ddiv>
 800b274:	4602      	mov	r2, r0
 800b276:	460b      	mov	r3, r1
 800b278:	4614      	mov	r4, r2
 800b27a:	461d      	mov	r5, r3
 800b27c:	4b0d      	ldr	r3, [pc, #52]	; (800b2b4 <GPS_GPGGA_Parse+0x3ec>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	69db      	ldr	r3, [r3, #28]
 800b282:	4618      	mov	r0, r3
 800b284:	f7f5 f978 	bl	8000578 <__aeabi_f2d>
 800b288:	4602      	mov	r2, r0
 800b28a:	460b      	mov	r3, r1
 800b28c:	4620      	mov	r0, r4
 800b28e:	4629      	mov	r1, r5
 800b290:	f7f5 f814 	bl	80002bc <__adddf3>
 800b294:	4602      	mov	r2, r0
 800b296:	460b      	mov	r3, r1
 800b298:	4906      	ldr	r1, [pc, #24]	; (800b2b4 <GPS_GPGGA_Parse+0x3ec>)
 800b29a:	680c      	ldr	r4, [r1, #0]
 800b29c:	4610      	mov	r0, r2
 800b29e:	4619      	mov	r1, r3
 800b2a0:	f7f5 fc92 	bl	8000bc8 <__aeabi_d2f>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	61e3      	str	r3, [r4, #28]
		}
		return _gps->gpsState;
 800b2a8:	4b02      	ldr	r3, [pc, #8]	; (800b2b4 <GPS_GPGGA_Parse+0x3ec>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	}
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	bdb0      	pop	{r4, r5, r7, pc}
 800b2b4:	20005070 	.word	0x20005070
 800b2b8:	20004f70 	.word	0x20004f70
 800b2bc:	10624dd3 	.word	0x10624dd3
 800b2c0:	40240000 	.word	0x40240000
 800b2c4:	00000000 	.word	0x00000000

0800b2c8 <GPS_GPVTG_Parse>:
/////////////////////////////////////////////////////////////
/*
 * GPVTG verilerini çözer ve gps değerine atar	-hız bilgisi-
 */
GPS_State GPS_GPVTG_Parse()
{
 800b2c8:	b5b0      	push	{r4, r5, r7, lr}
 800b2ca:	b082      	sub	sp, #8
 800b2cc:	af00      	add	r7, sp, #0
	if(!GPS_CheckSumControl(&ringBuff.rxGps[ringBuff.tail]))
 800b2ce:	4b70      	ldr	r3, [pc, #448]	; (800b490 <GPS_GPVTG_Parse+0x1c8>)
 800b2d0:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800b2d4:	b2db      	uxtb	r3, r3
 800b2d6:	461a      	mov	r2, r3
 800b2d8:	4b6d      	ldr	r3, [pc, #436]	; (800b490 <GPS_GPVTG_Parse+0x1c8>)
 800b2da:	4413      	add	r3, r2
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f000 f9c3 	bl	800b668 <GPS_CheckSumControl>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d101      	bne.n	800b2ec <GPS_GPVTG_Parse+0x24>
	{
		return WRONG_DATA;
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	e1a7      	b.n	800b63c <GPS_GPVTG_Parse+0x374>
	}
	else
	{
		TAIL_INCREASE_TO_COMMA;		// "GPVTG,"
 800b2ec:	4b68      	ldr	r3, [pc, #416]	; (800b490 <GPS_GPVTG_Parse+0x1c8>)
 800b2ee:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800b2f2:	b2db      	uxtb	r3, r3
 800b2f4:	1c5a      	adds	r2, r3, #1
 800b2f6:	b2d1      	uxtb	r1, r2
 800b2f8:	4a65      	ldr	r2, [pc, #404]	; (800b490 <GPS_GPVTG_Parse+0x1c8>)
 800b2fa:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800b2fe:	4a65      	ldr	r2, [pc, #404]	; (800b494 <GPS_GPVTG_Parse+0x1cc>)
 800b300:	fba2 1203 	umull	r1, r2, r2, r3
 800b304:	0912      	lsrs	r2, r2, #4
 800b306:	21fa      	movs	r1, #250	; 0xfa
 800b308:	fb01 f202 	mul.w	r2, r1, r2
 800b30c:	1a9b      	subs	r3, r3, r2
 800b30e:	b2db      	uxtb	r3, r3
 800b310:	461a      	mov	r2, r3
 800b312:	4b5f      	ldr	r3, [pc, #380]	; (800b490 <GPS_GPVTG_Parse+0x1c8>)
 800b314:	5c9b      	ldrb	r3, [r3, r2]
 800b316:	2b2c      	cmp	r3, #44	; 0x2c
 800b318:	d1e8      	bne.n	800b2ec <GPS_GPVTG_Parse+0x24>
		TAIL_INCREASE_TO_COMMA;		//
 800b31a:	4b5d      	ldr	r3, [pc, #372]	; (800b490 <GPS_GPVTG_Parse+0x1c8>)
 800b31c:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800b320:	b2db      	uxtb	r3, r3
 800b322:	1c5a      	adds	r2, r3, #1
 800b324:	b2d1      	uxtb	r1, r2
 800b326:	4a5a      	ldr	r2, [pc, #360]	; (800b490 <GPS_GPVTG_Parse+0x1c8>)
 800b328:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800b32c:	4a59      	ldr	r2, [pc, #356]	; (800b494 <GPS_GPVTG_Parse+0x1cc>)
 800b32e:	fba2 1203 	umull	r1, r2, r2, r3
 800b332:	0912      	lsrs	r2, r2, #4
 800b334:	21fa      	movs	r1, #250	; 0xfa
 800b336:	fb01 f202 	mul.w	r2, r1, r2
 800b33a:	1a9b      	subs	r3, r3, r2
 800b33c:	b2db      	uxtb	r3, r3
 800b33e:	461a      	mov	r2, r3
 800b340:	4b53      	ldr	r3, [pc, #332]	; (800b490 <GPS_GPVTG_Parse+0x1c8>)
 800b342:	5c9b      	ldrb	r3, [r3, r2]
 800b344:	2b2c      	cmp	r3, #44	; 0x2c
 800b346:	d1e8      	bne.n	800b31a <GPS_GPVTG_Parse+0x52>
		TAIL_INCREASE_TO_COMMA;
 800b348:	4b51      	ldr	r3, [pc, #324]	; (800b490 <GPS_GPVTG_Parse+0x1c8>)
 800b34a:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800b34e:	b2db      	uxtb	r3, r3
 800b350:	1c5a      	adds	r2, r3, #1
 800b352:	b2d1      	uxtb	r1, r2
 800b354:	4a4e      	ldr	r2, [pc, #312]	; (800b490 <GPS_GPVTG_Parse+0x1c8>)
 800b356:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800b35a:	4a4e      	ldr	r2, [pc, #312]	; (800b494 <GPS_GPVTG_Parse+0x1cc>)
 800b35c:	fba2 1203 	umull	r1, r2, r2, r3
 800b360:	0912      	lsrs	r2, r2, #4
 800b362:	21fa      	movs	r1, #250	; 0xfa
 800b364:	fb01 f202 	mul.w	r2, r1, r2
 800b368:	1a9b      	subs	r3, r3, r2
 800b36a:	b2db      	uxtb	r3, r3
 800b36c:	461a      	mov	r2, r3
 800b36e:	4b48      	ldr	r3, [pc, #288]	; (800b490 <GPS_GPVTG_Parse+0x1c8>)
 800b370:	5c9b      	ldrb	r3, [r3, r2]
 800b372:	2b2c      	cmp	r3, #44	; 0x2c
 800b374:	d1e8      	bne.n	800b348 <GPS_GPVTG_Parse+0x80>
		TAIL_INCREASE_TO_COMMA;
 800b376:	4b46      	ldr	r3, [pc, #280]	; (800b490 <GPS_GPVTG_Parse+0x1c8>)
 800b378:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800b37c:	b2db      	uxtb	r3, r3
 800b37e:	1c5a      	adds	r2, r3, #1
 800b380:	b2d1      	uxtb	r1, r2
 800b382:	4a43      	ldr	r2, [pc, #268]	; (800b490 <GPS_GPVTG_Parse+0x1c8>)
 800b384:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800b388:	4a42      	ldr	r2, [pc, #264]	; (800b494 <GPS_GPVTG_Parse+0x1cc>)
 800b38a:	fba2 1203 	umull	r1, r2, r2, r3
 800b38e:	0912      	lsrs	r2, r2, #4
 800b390:	21fa      	movs	r1, #250	; 0xfa
 800b392:	fb01 f202 	mul.w	r2, r1, r2
 800b396:	1a9b      	subs	r3, r3, r2
 800b398:	b2db      	uxtb	r3, r3
 800b39a:	461a      	mov	r2, r3
 800b39c:	4b3c      	ldr	r3, [pc, #240]	; (800b490 <GPS_GPVTG_Parse+0x1c8>)
 800b39e:	5c9b      	ldrb	r3, [r3, r2]
 800b3a0:	2b2c      	cmp	r3, #44	; 0x2c
 800b3a2:	d1e8      	bne.n	800b376 <GPS_GPVTG_Parse+0xae>
		TAIL_INCREASE_TO_COMMA;
 800b3a4:	4b3a      	ldr	r3, [pc, #232]	; (800b490 <GPS_GPVTG_Parse+0x1c8>)
 800b3a6:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800b3aa:	b2db      	uxtb	r3, r3
 800b3ac:	1c5a      	adds	r2, r3, #1
 800b3ae:	b2d1      	uxtb	r1, r2
 800b3b0:	4a37      	ldr	r2, [pc, #220]	; (800b490 <GPS_GPVTG_Parse+0x1c8>)
 800b3b2:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800b3b6:	4a37      	ldr	r2, [pc, #220]	; (800b494 <GPS_GPVTG_Parse+0x1cc>)
 800b3b8:	fba2 1203 	umull	r1, r2, r2, r3
 800b3bc:	0912      	lsrs	r2, r2, #4
 800b3be:	21fa      	movs	r1, #250	; 0xfa
 800b3c0:	fb01 f202 	mul.w	r2, r1, r2
 800b3c4:	1a9b      	subs	r3, r3, r2
 800b3c6:	b2db      	uxtb	r3, r3
 800b3c8:	461a      	mov	r2, r3
 800b3ca:	4b31      	ldr	r3, [pc, #196]	; (800b490 <GPS_GPVTG_Parse+0x1c8>)
 800b3cc:	5c9b      	ldrb	r3, [r3, r2]
 800b3ce:	2b2c      	cmp	r3, #44	; 0x2c
 800b3d0:	d1e8      	bne.n	800b3a4 <GPS_GPVTG_Parse+0xdc>
		TAIL_INCREASE_TO_COMMA;
 800b3d2:	4b2f      	ldr	r3, [pc, #188]	; (800b490 <GPS_GPVTG_Parse+0x1c8>)
 800b3d4:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800b3d8:	b2db      	uxtb	r3, r3
 800b3da:	1c5a      	adds	r2, r3, #1
 800b3dc:	b2d1      	uxtb	r1, r2
 800b3de:	4a2c      	ldr	r2, [pc, #176]	; (800b490 <GPS_GPVTG_Parse+0x1c8>)
 800b3e0:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800b3e4:	4a2b      	ldr	r2, [pc, #172]	; (800b494 <GPS_GPVTG_Parse+0x1cc>)
 800b3e6:	fba2 1203 	umull	r1, r2, r2, r3
 800b3ea:	0912      	lsrs	r2, r2, #4
 800b3ec:	21fa      	movs	r1, #250	; 0xfa
 800b3ee:	fb01 f202 	mul.w	r2, r1, r2
 800b3f2:	1a9b      	subs	r3, r3, r2
 800b3f4:	b2db      	uxtb	r3, r3
 800b3f6:	461a      	mov	r2, r3
 800b3f8:	4b25      	ldr	r3, [pc, #148]	; (800b490 <GPS_GPVTG_Parse+0x1c8>)
 800b3fa:	5c9b      	ldrb	r3, [r3, r2]
 800b3fc:	2b2c      	cmp	r3, #44	; 0x2c
 800b3fe:	d1e8      	bne.n	800b3d2 <GPS_GPVTG_Parse+0x10a>
		TAIL_INCREASE_TO_COMMA;
 800b400:	4b23      	ldr	r3, [pc, #140]	; (800b490 <GPS_GPVTG_Parse+0x1c8>)
 800b402:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800b406:	b2db      	uxtb	r3, r3
 800b408:	1c5a      	adds	r2, r3, #1
 800b40a:	b2d1      	uxtb	r1, r2
 800b40c:	4a20      	ldr	r2, [pc, #128]	; (800b490 <GPS_GPVTG_Parse+0x1c8>)
 800b40e:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800b412:	4a20      	ldr	r2, [pc, #128]	; (800b494 <GPS_GPVTG_Parse+0x1cc>)
 800b414:	fba2 1203 	umull	r1, r2, r2, r3
 800b418:	0912      	lsrs	r2, r2, #4
 800b41a:	21fa      	movs	r1, #250	; 0xfa
 800b41c:	fb01 f202 	mul.w	r2, r1, r2
 800b420:	1a9b      	subs	r3, r3, r2
 800b422:	b2db      	uxtb	r3, r3
 800b424:	461a      	mov	r2, r3
 800b426:	4b1a      	ldr	r3, [pc, #104]	; (800b490 <GPS_GPVTG_Parse+0x1c8>)
 800b428:	5c9b      	ldrb	r3, [r3, r2]
 800b42a:	2b2c      	cmp	r3, #44	; 0x2c
 800b42c:	d1e8      	bne.n	800b400 <GPS_GPVTG_Parse+0x138>

		uint8_t tailValue1 = ringBuff.tail;
 800b42e:	4b18      	ldr	r3, [pc, #96]	; (800b490 <GPS_GPVTG_Parse+0x1c8>)
 800b430:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800b434:	71bb      	strb	r3, [r7, #6]
		TAIL_INCREASE_DOT;
 800b436:	4b16      	ldr	r3, [pc, #88]	; (800b490 <GPS_GPVTG_Parse+0x1c8>)
 800b438:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800b43c:	b2db      	uxtb	r3, r3
 800b43e:	1c5a      	adds	r2, r3, #1
 800b440:	b2d1      	uxtb	r1, r2
 800b442:	4a13      	ldr	r2, [pc, #76]	; (800b490 <GPS_GPVTG_Parse+0x1c8>)
 800b444:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800b448:	4a12      	ldr	r2, [pc, #72]	; (800b494 <GPS_GPVTG_Parse+0x1cc>)
 800b44a:	fba2 1203 	umull	r1, r2, r2, r3
 800b44e:	0912      	lsrs	r2, r2, #4
 800b450:	21fa      	movs	r1, #250	; 0xfa
 800b452:	fb01 f202 	mul.w	r2, r1, r2
 800b456:	1a9b      	subs	r3, r3, r2
 800b458:	b2db      	uxtb	r3, r3
 800b45a:	461a      	mov	r2, r3
 800b45c:	4b0c      	ldr	r3, [pc, #48]	; (800b490 <GPS_GPVTG_Parse+0x1c8>)
 800b45e:	5c9b      	ldrb	r3, [r3, r2]
 800b460:	2b2e      	cmp	r3, #46	; 0x2e
 800b462:	d1e8      	bne.n	800b436 <GPS_GPVTG_Parse+0x16e>
		uint8_t tailValue2 = ringBuff.tail;
 800b464:	4b0a      	ldr	r3, [pc, #40]	; (800b490 <GPS_GPVTG_Parse+0x1c8>)
 800b466:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800b46a:	717b      	strb	r3, [r7, #5]

		signed char counter= tailValue2 - tailValue1 - 2;
 800b46c:	797a      	ldrb	r2, [r7, #5]
 800b46e:	79bb      	ldrb	r3, [r7, #6]
 800b470:	1ad3      	subs	r3, r2, r3
 800b472:	b2db      	uxtb	r3, r3
 800b474:	3b02      	subs	r3, #2
 800b476:	b2db      	uxtb	r3, r3
 800b478:	71fb      	strb	r3, [r7, #7]
		ringBuff.tail = tailValue1;
 800b47a:	4a05      	ldr	r2, [pc, #20]	; (800b490 <GPS_GPVTG_Parse+0x1c8>)
 800b47c:	79bb      	ldrb	r3, [r7, #6]
 800b47e:	f882 30fa 	strb.w	r3, [r2, #250]	; 0xfa
		_gps->speed = 0;
 800b482:	4b05      	ldr	r3, [pc, #20]	; (800b498 <GPS_GPVTG_Parse+0x1d0>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	f04f 0200 	mov.w	r2, #0
 800b48a:	621a      	str	r2, [r3, #32]
		for(;counter >= 0; counter--)
 800b48c:	e042      	b.n	800b514 <GPS_GPVTG_Parse+0x24c>
 800b48e:	bf00      	nop
 800b490:	20004f70 	.word	0x20004f70
 800b494:	10624dd3 	.word	0x10624dd3
 800b498:	20005070 	.word	0x20005070
		{
			_gps->speed += (TAIL_READ - ASCII_NUMBER) * (uint32_t)pow(10,counter);
 800b49c:	4b6c      	ldr	r3, [pc, #432]	; (800b650 <GPS_GPVTG_Parse+0x388>)
 800b49e:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800b4a2:	b2db      	uxtb	r3, r3
 800b4a4:	4a6b      	ldr	r2, [pc, #428]	; (800b654 <GPS_GPVTG_Parse+0x38c>)
 800b4a6:	fba2 1203 	umull	r1, r2, r2, r3
 800b4aa:	0912      	lsrs	r2, r2, #4
 800b4ac:	21fa      	movs	r1, #250	; 0xfa
 800b4ae:	fb01 f202 	mul.w	r2, r1, r2
 800b4b2:	1a9b      	subs	r3, r3, r2
 800b4b4:	b2db      	uxtb	r3, r3
 800b4b6:	461a      	mov	r2, r3
 800b4b8:	4b65      	ldr	r3, [pc, #404]	; (800b650 <GPS_GPVTG_Parse+0x388>)
 800b4ba:	5c9b      	ldrb	r3, [r3, r2]
 800b4bc:	3b30      	subs	r3, #48	; 0x30
 800b4be:	461c      	mov	r4, r3
 800b4c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	f7f5 f845 	bl	8000554 <__aeabi_i2d>
 800b4ca:	4602      	mov	r2, r0
 800b4cc:	460b      	mov	r3, r1
 800b4ce:	ec43 2b11 	vmov	d1, r2, r3
 800b4d2:	ed9f 0b5d 	vldr	d0, [pc, #372]	; 800b648 <GPS_GPVTG_Parse+0x380>
 800b4d6:	f003 f9c9 	bl	800e86c <pow>
 800b4da:	ec53 2b10 	vmov	r2, r3, d0
 800b4de:	4610      	mov	r0, r2
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	f7f5 fb51 	bl	8000b88 <__aeabi_d2uiz>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	fb03 f204 	mul.w	r2, r3, r4
 800b4ec:	4b5a      	ldr	r3, [pc, #360]	; (800b658 <GPS_GPVTG_Parse+0x390>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	ed93 7a08 	vldr	s14, [r3, #32]
 800b4f4:	ee07 2a90 	vmov	s15, r2
 800b4f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4fc:	4b56      	ldr	r3, [pc, #344]	; (800b658 <GPS_GPVTG_Parse+0x390>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b504:	edc3 7a08 	vstr	s15, [r3, #32]
		for(;counter >= 0; counter--)
 800b508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b50c:	b2db      	uxtb	r3, r3
 800b50e:	3b01      	subs	r3, #1
 800b510:	b2db      	uxtb	r3, r3
 800b512:	71fb      	strb	r3, [r7, #7]
 800b514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	dabf      	bge.n	800b49c <GPS_GPVTG_Parse+0x1d4>
		}
		ringBuff.tail = tailValue2;
 800b51c:	4a4c      	ldr	r2, [pc, #304]	; (800b650 <GPS_GPVTG_Parse+0x388>)
 800b51e:	797b      	ldrb	r3, [r7, #5]
 800b520:	f882 30fa 	strb.w	r3, [r2, #250]	; 0xfa

		_gps->speed += (TAIL_READ_P - ASCII_NUMBER) / 10.0 + (TAIL_READ_P - ASCII_NUMBER) / 100.0 + (TAIL_READ_P - ASCII_NUMBER) / 1000.0;
 800b524:	4b4a      	ldr	r3, [pc, #296]	; (800b650 <GPS_GPVTG_Parse+0x388>)
 800b526:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800b52a:	b2db      	uxtb	r3, r3
 800b52c:	1c5a      	adds	r2, r3, #1
 800b52e:	b2d1      	uxtb	r1, r2
 800b530:	4a47      	ldr	r2, [pc, #284]	; (800b650 <GPS_GPVTG_Parse+0x388>)
 800b532:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800b536:	4a47      	ldr	r2, [pc, #284]	; (800b654 <GPS_GPVTG_Parse+0x38c>)
 800b538:	fba2 1203 	umull	r1, r2, r2, r3
 800b53c:	0912      	lsrs	r2, r2, #4
 800b53e:	21fa      	movs	r1, #250	; 0xfa
 800b540:	fb01 f202 	mul.w	r2, r1, r2
 800b544:	1a9b      	subs	r3, r3, r2
 800b546:	b2db      	uxtb	r3, r3
 800b548:	461a      	mov	r2, r3
 800b54a:	4b41      	ldr	r3, [pc, #260]	; (800b650 <GPS_GPVTG_Parse+0x388>)
 800b54c:	5c9b      	ldrb	r3, [r3, r2]
 800b54e:	3b30      	subs	r3, #48	; 0x30
 800b550:	4618      	mov	r0, r3
 800b552:	f7f4 ffff 	bl	8000554 <__aeabi_i2d>
 800b556:	f04f 0200 	mov.w	r2, #0
 800b55a:	4b40      	ldr	r3, [pc, #256]	; (800b65c <GPS_GPVTG_Parse+0x394>)
 800b55c:	f7f5 f98e 	bl	800087c <__aeabi_ddiv>
 800b560:	4602      	mov	r2, r0
 800b562:	460b      	mov	r3, r1
 800b564:	4614      	mov	r4, r2
 800b566:	461d      	mov	r5, r3
 800b568:	4b39      	ldr	r3, [pc, #228]	; (800b650 <GPS_GPVTG_Parse+0x388>)
 800b56a:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800b56e:	b2db      	uxtb	r3, r3
 800b570:	1c5a      	adds	r2, r3, #1
 800b572:	b2d1      	uxtb	r1, r2
 800b574:	4a36      	ldr	r2, [pc, #216]	; (800b650 <GPS_GPVTG_Parse+0x388>)
 800b576:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800b57a:	4a36      	ldr	r2, [pc, #216]	; (800b654 <GPS_GPVTG_Parse+0x38c>)
 800b57c:	fba2 1203 	umull	r1, r2, r2, r3
 800b580:	0912      	lsrs	r2, r2, #4
 800b582:	21fa      	movs	r1, #250	; 0xfa
 800b584:	fb01 f202 	mul.w	r2, r1, r2
 800b588:	1a9b      	subs	r3, r3, r2
 800b58a:	b2db      	uxtb	r3, r3
 800b58c:	461a      	mov	r2, r3
 800b58e:	4b30      	ldr	r3, [pc, #192]	; (800b650 <GPS_GPVTG_Parse+0x388>)
 800b590:	5c9b      	ldrb	r3, [r3, r2]
 800b592:	3b30      	subs	r3, #48	; 0x30
 800b594:	4618      	mov	r0, r3
 800b596:	f7f4 ffdd 	bl	8000554 <__aeabi_i2d>
 800b59a:	f04f 0200 	mov.w	r2, #0
 800b59e:	4b30      	ldr	r3, [pc, #192]	; (800b660 <GPS_GPVTG_Parse+0x398>)
 800b5a0:	f7f5 f96c 	bl	800087c <__aeabi_ddiv>
 800b5a4:	4602      	mov	r2, r0
 800b5a6:	460b      	mov	r3, r1
 800b5a8:	4620      	mov	r0, r4
 800b5aa:	4629      	mov	r1, r5
 800b5ac:	f7f4 fe86 	bl	80002bc <__adddf3>
 800b5b0:	4602      	mov	r2, r0
 800b5b2:	460b      	mov	r3, r1
 800b5b4:	4614      	mov	r4, r2
 800b5b6:	461d      	mov	r5, r3
 800b5b8:	4b25      	ldr	r3, [pc, #148]	; (800b650 <GPS_GPVTG_Parse+0x388>)
 800b5ba:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800b5be:	b2db      	uxtb	r3, r3
 800b5c0:	1c5a      	adds	r2, r3, #1
 800b5c2:	b2d1      	uxtb	r1, r2
 800b5c4:	4a22      	ldr	r2, [pc, #136]	; (800b650 <GPS_GPVTG_Parse+0x388>)
 800b5c6:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800b5ca:	4a22      	ldr	r2, [pc, #136]	; (800b654 <GPS_GPVTG_Parse+0x38c>)
 800b5cc:	fba2 1203 	umull	r1, r2, r2, r3
 800b5d0:	0912      	lsrs	r2, r2, #4
 800b5d2:	21fa      	movs	r1, #250	; 0xfa
 800b5d4:	fb01 f202 	mul.w	r2, r1, r2
 800b5d8:	1a9b      	subs	r3, r3, r2
 800b5da:	b2db      	uxtb	r3, r3
 800b5dc:	461a      	mov	r2, r3
 800b5de:	4b1c      	ldr	r3, [pc, #112]	; (800b650 <GPS_GPVTG_Parse+0x388>)
 800b5e0:	5c9b      	ldrb	r3, [r3, r2]
 800b5e2:	3b30      	subs	r3, #48	; 0x30
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f7f4 ffb5 	bl	8000554 <__aeabi_i2d>
 800b5ea:	f04f 0200 	mov.w	r2, #0
 800b5ee:	4b1d      	ldr	r3, [pc, #116]	; (800b664 <GPS_GPVTG_Parse+0x39c>)
 800b5f0:	f7f5 f944 	bl	800087c <__aeabi_ddiv>
 800b5f4:	4602      	mov	r2, r0
 800b5f6:	460b      	mov	r3, r1
 800b5f8:	4620      	mov	r0, r4
 800b5fa:	4629      	mov	r1, r5
 800b5fc:	f7f4 fe5e 	bl	80002bc <__adddf3>
 800b600:	4602      	mov	r2, r0
 800b602:	460b      	mov	r3, r1
 800b604:	4614      	mov	r4, r2
 800b606:	461d      	mov	r5, r3
 800b608:	4b13      	ldr	r3, [pc, #76]	; (800b658 <GPS_GPVTG_Parse+0x390>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	6a1b      	ldr	r3, [r3, #32]
 800b60e:	4618      	mov	r0, r3
 800b610:	f7f4 ffb2 	bl	8000578 <__aeabi_f2d>
 800b614:	4602      	mov	r2, r0
 800b616:	460b      	mov	r3, r1
 800b618:	4620      	mov	r0, r4
 800b61a:	4629      	mov	r1, r5
 800b61c:	f7f4 fe4e 	bl	80002bc <__adddf3>
 800b620:	4602      	mov	r2, r0
 800b622:	460b      	mov	r3, r1
 800b624:	490c      	ldr	r1, [pc, #48]	; (800b658 <GPS_GPVTG_Parse+0x390>)
 800b626:	680c      	ldr	r4, [r1, #0]
 800b628:	4610      	mov	r0, r2
 800b62a:	4619      	mov	r1, r3
 800b62c:	f7f5 facc 	bl	8000bc8 <__aeabi_d2f>
 800b630:	4603      	mov	r3, r0
 800b632:	6223      	str	r3, [r4, #32]

		return _gps->gpsState;
 800b634:	4b08      	ldr	r3, [pc, #32]	; (800b658 <GPS_GPVTG_Parse+0x390>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	}
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	3708      	adds	r7, #8
 800b640:	46bd      	mov	sp, r7
 800b642:	bdb0      	pop	{r4, r5, r7, pc}
 800b644:	f3af 8000 	nop.w
 800b648:	00000000 	.word	0x00000000
 800b64c:	40240000 	.word	0x40240000
 800b650:	20004f70 	.word	0x20004f70
 800b654:	10624dd3 	.word	0x10624dd3
 800b658:	20005070 	.word	0x20005070
 800b65c:	40240000 	.word	0x40240000
 800b660:	40590000 	.word	0x40590000
 800b664:	408f4000 	.word	0x408f4000

0800b668 <GPS_CheckSumControl>:

/*
 * tüm değerleri XOR işlemine tabi tutarak bir checksum değeri üretir
 */
uint8_t GPS_CheckSumControl(uint8_t *ptr)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b086      	sub	sp, #24
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
	int i = 0;
 800b670:	2300      	movs	r3, #0
 800b672:	617b      	str	r3, [r7, #20]
	int check = 0;
 800b674:	2300      	movs	r3, #0
 800b676:	613b      	str	r3, [r7, #16]
	char checHexa[5];

	while(ptr[i] != '*')
 800b678:	e00a      	b.n	800b690 <GPS_CheckSumControl+0x28>
	{
		check ^= ptr[i++];
 800b67a:	697b      	ldr	r3, [r7, #20]
 800b67c:	1c5a      	adds	r2, r3, #1
 800b67e:	617a      	str	r2, [r7, #20]
 800b680:	461a      	mov	r2, r3
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	4413      	add	r3, r2
 800b686:	781b      	ldrb	r3, [r3, #0]
 800b688:	461a      	mov	r2, r3
 800b68a:	693b      	ldr	r3, [r7, #16]
 800b68c:	4053      	eors	r3, r2
 800b68e:	613b      	str	r3, [r7, #16]
	while(ptr[i] != '*')
 800b690:	697b      	ldr	r3, [r7, #20]
 800b692:	687a      	ldr	r2, [r7, #4]
 800b694:	4413      	add	r3, r2
 800b696:	781b      	ldrb	r3, [r3, #0]
 800b698:	2b2a      	cmp	r3, #42	; 0x2a
 800b69a:	d1ee      	bne.n	800b67a <GPS_CheckSumControl+0x12>
	}
	sprintf(checHexa,"%x",check);
 800b69c:	f107 0308 	add.w	r3, r7, #8
 800b6a0:	693a      	ldr	r2, [r7, #16]
 800b6a2:	490d      	ldr	r1, [pc, #52]	; (800b6d8 <GPS_CheckSumControl+0x70>)
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f002 fbd3 	bl	800de50 <siprintf>
	return !strncmp((char*)&ptr[++i], checHexa,2);
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	3301      	adds	r3, #1
 800b6ae:	617b      	str	r3, [r7, #20]
 800b6b0:	697b      	ldr	r3, [r7, #20]
 800b6b2:	687a      	ldr	r2, [r7, #4]
 800b6b4:	4413      	add	r3, r2
 800b6b6:	f107 0108 	add.w	r1, r7, #8
 800b6ba:	2202      	movs	r2, #2
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f002 fbef 	bl	800dea0 <strncmp>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	bf0c      	ite	eq
 800b6c8:	2301      	moveq	r3, #1
 800b6ca:	2300      	movne	r3, #0
 800b6cc:	b2db      	uxtb	r3, r3
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3718      	adds	r7, #24
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}
 800b6d6:	bf00      	nop
 800b6d8:	0800fc58 	.word	0x0800fc58

0800b6dc <UGV_motorInit>:
/**
 * @brief initialize the timer pwm setting to driver the motor
 * @return none
 */
void UGV_motorInit()
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	af00      	add	r7, sp, #0
	RCFilter_Init(&rcFilterForward, 0.05f, 0.05f);
 800b6e0:	eddf 0a20 	vldr	s1, [pc, #128]	; 800b764 <UGV_motorInit+0x88>
 800b6e4:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 800b764 <UGV_motorInit+0x88>
 800b6e8:	481f      	ldr	r0, [pc, #124]	; (800b768 <UGV_motorInit+0x8c>)
 800b6ea:	f001 fb59 	bl	800cda0 <RCFilter_Init>
	RCFilter_Init(&rcFilterBackward, 0.05f, 0.05f);
 800b6ee:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800b764 <UGV_motorInit+0x88>
 800b6f2:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 800b764 <UGV_motorInit+0x88>
 800b6f6:	481d      	ldr	r0, [pc, #116]	; (800b76c <UGV_motorInit+0x90>)
 800b6f8:	f001 fb52 	bl	800cda0 <RCFilter_Init>
	RCFilter_Init(&rcFilterRight, 0.65f, 0.65f);
 800b6fc:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800b770 <UGV_motorInit+0x94>
 800b700:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 800b770 <UGV_motorInit+0x94>
 800b704:	481b      	ldr	r0, [pc, #108]	; (800b774 <UGV_motorInit+0x98>)
 800b706:	f001 fb4b 	bl	800cda0 <RCFilter_Init>
	RCFilter_Init(&rcFilterLeft, 0.65f, 0.65f);
 800b70a:	eddf 0a19 	vldr	s1, [pc, #100]	; 800b770 <UGV_motorInit+0x94>
 800b70e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800b770 <UGV_motorInit+0x94>
 800b712:	4819      	ldr	r0, [pc, #100]	; (800b778 <UGV_motorInit+0x9c>)
 800b714:	f001 fb44 	bl	800cda0 <RCFilter_Init>

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 800b718:	2104      	movs	r1, #4
 800b71a:	4818      	ldr	r0, [pc, #96]	; (800b77c <UGV_motorInit+0xa0>)
 800b71c:	f7f9 ffb0 	bl	8005680 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800b720:	2108      	movs	r1, #8
 800b722:	4816      	ldr	r0, [pc, #88]	; (800b77c <UGV_motorInit+0xa0>)
 800b724:	f7f9 ffac 	bl	8005680 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800b728:	2100      	movs	r1, #0
 800b72a:	4815      	ldr	r0, [pc, #84]	; (800b780 <UGV_motorInit+0xa4>)
 800b72c:	f7f9 ffa8 	bl	8005680 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800b730:	2100      	movs	r1, #0
 800b732:	4814      	ldr	r0, [pc, #80]	; (800b784 <UGV_motorInit+0xa8>)
 800b734:	f7f9 ffa4 	bl	8005680 <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 800b738:	4b10      	ldr	r3, [pc, #64]	; (800b77c <UGV_motorInit+0xa0>)
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	2200      	movs	r2, #0
 800b73e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
 800b740:	4b0e      	ldr	r3, [pc, #56]	; (800b77c <UGV_motorInit+0xa0>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	2200      	movs	r2, #0
 800b746:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800b748:	4b0d      	ldr	r3, [pc, #52]	; (800b780 <UGV_motorInit+0xa4>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	2200      	movs	r2, #0
 800b74e:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 800b750:	4b0c      	ldr	r3, [pc, #48]	; (800b784 <UGV_motorInit+0xa8>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	2200      	movs	r2, #0
 800b756:	635a      	str	r2, [r3, #52]	; 0x34

    PIDController_Init(&pid);
 800b758:	480b      	ldr	r0, [pc, #44]	; (800b788 <UGV_motorInit+0xac>)
 800b75a:	f001 f824 	bl	800c7a6 <PIDController_Init>
}
 800b75e:	bf00      	nop
 800b760:	bd80      	pop	{r7, pc}
 800b762:	bf00      	nop
 800b764:	3d4ccccd 	.word	0x3d4ccccd
 800b768:	2000507c 	.word	0x2000507c
 800b76c:	2000508c 	.word	0x2000508c
 800b770:	3f266666 	.word	0x3f266666
 800b774:	2000509c 	.word	0x2000509c
 800b778:	200050ac 	.word	0x200050ac
 800b77c:	2000042c 	.word	0x2000042c
 800b780:	2000039c 	.word	0x2000039c
 800b784:	200003e4 	.word	0x200003e4
 800b788:	20000010 	.word	0x20000010

0800b78c <UGV_motorDrive>:
 * @brief read the channel's adc values and call the neaded functions
 * @param[in] rcChannel global variable
 * @return none
 */
void UGV_motorDrive(RcChannel * rcChannel, float azimuthAngle)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b082      	sub	sp, #8
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
 800b794:	ed87 0a00 	vstr	s0, [r7]
	//!< rc transmitter lock
	if(startFlag == 0)
 800b798:	4b19      	ldr	r3, [pc, #100]	; (800b800 <UGV_motorDrive+0x74>)
 800b79a:	781b      	ldrb	r3, [r3, #0]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d11d      	bne.n	800b7dc <UGV_motorDrive+0x50>
	{
		if((rcChannel->channel2<=(CHANNEL_DOWN + CHANNEL_ERROR)) && (rcChannel->channel1>=(CHANNEL_UP - CHANNEL_ERROR)))
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	885b      	ldrh	r3, [r3, #2]
 800b7a4:	f5b3 6f93 	cmp.w	r3, #1176	; 0x498
 800b7a8:	d218      	bcs.n	800b7dc <UGV_motorDrive+0x50>
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	881b      	ldrh	r3, [r3, #0]
 800b7ae:	f240 7252 	movw	r2, #1874	; 0x752
 800b7b2:	4293      	cmp	r3, r2
 800b7b4:	d912      	bls.n	800b7dc <UGV_motorDrive+0x50>
		{
			while(!((rcChannel->channel1>=CHANNEL_MIDDLE) && (rcChannel->channel2>=CHANNEL_MIDDLE)))
 800b7b6:	e002      	b.n	800b7be <UGV_motorDrive+0x32>
			{
				HAL_IWDG_Refresh(&hiwdg);
 800b7b8:	4812      	ldr	r0, [pc, #72]	; (800b804 <UGV_motorDrive+0x78>)
 800b7ba:	f7f8 fb67 	bl	8003e8c <HAL_IWDG_Refresh>
			while(!((rcChannel->channel1>=CHANNEL_MIDDLE) && (rcChannel->channel2>=CHANNEL_MIDDLE)))
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	881b      	ldrh	r3, [r3, #0]
 800b7c2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800b7c6:	4293      	cmp	r3, r2
 800b7c8:	d9f6      	bls.n	800b7b8 <UGV_motorDrive+0x2c>
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	885b      	ldrh	r3, [r3, #2]
 800b7ce:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	d9f0      	bls.n	800b7b8 <UGV_motorDrive+0x2c>
			}
			startFlag = 1;
 800b7d6:	4b0a      	ldr	r3, [pc, #40]	; (800b800 <UGV_motorDrive+0x74>)
 800b7d8:	2201      	movs	r2, #1
 800b7da:	701a      	strb	r2, [r3, #0]
		}
	}

	if(startFlag)
 800b7dc:	4b08      	ldr	r3, [pc, #32]	; (800b800 <UGV_motorDrive+0x74>)
 800b7de:	781b      	ldrb	r3, [r3, #0]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d009      	beq.n	800b7f8 <UGV_motorDrive+0x6c>
//					rcChannel->channel1 = (rcChannel->channel1 < CHANNEL_DOWN) ? CHANNEL_DOWN : rcChannel->channel1;
//				}
//			}
//		}

		motorUpDown(rcChannel->channel2);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	885b      	ldrh	r3, [r3, #2]
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f000 f80d 	bl	800b808 <motorUpDown>
		motorRightLeft(rcChannel->channel1);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	881b      	ldrh	r3, [r3, #0]
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f000 f8fe 	bl	800b9f4 <motorRightLeft>
	}
}
 800b7f8:	bf00      	nop
 800b7fa:	3708      	adds	r7, #8
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bd80      	pop	{r7, pc}
 800b800:	20005078 	.word	0x20005078
 800b804:	20000204 	.word	0x20000204

0800b808 <motorUpDown>:
 * @brief control the motor forward and backward
 * @param[in] read the channel2 adc value
 * @return none
 */
static void motorUpDown(uint16_t adcVal)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b084      	sub	sp, #16
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	4603      	mov	r3, r0
 800b810:	80fb      	strh	r3, [r7, #6]
	float pwmDuty;

	if(adcVal > (CHANNEL_MIDDLE + CHANNEL_ERROR))
 800b812:	88fb      	ldrh	r3, [r7, #6]
 800b814:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b818:	d954      	bls.n	800b8c4 <motorUpDown+0xbc>
	{
		//clear the backward motor's pwm
		RIGHT_MOTOR_BACKWARD(0);
 800b81a:	4b6c      	ldr	r3, [pc, #432]	; (800b9cc <motorUpDown+0x1c4>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	2200      	movs	r2, #0
 800b820:	639a      	str	r2, [r3, #56]	; 0x38
		LEFT_MOTOR_BACKWARD(0);
 800b822:	4b6b      	ldr	r3, [pc, #428]	; (800b9d0 <motorUpDown+0x1c8>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	2200      	movs	r2, #0
 800b828:	635a      	str	r2, [r3, #52]	; 0x34

		// if channel value between 1600 - 1950, pwmDuty can be 0-350
		pwmDuty = adcVal - (CHANNEL_MIDDLE + CHANNEL_ERROR);
 800b82a:	88fb      	ldrh	r3, [r7, #6]
 800b82c:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 800b830:	ee07 3a90 	vmov	s15, r3
 800b834:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b838:	edc7 7a03 	vstr	s15, [r7, #12]

		//set the duty map 0-100
		pwmDuty = ((pwmDuty / CHANNEL_RANGE) * 100.0f);
 800b83c:	ed97 7a03 	vldr	s14, [r7, #12]
 800b840:	eddf 6a64 	vldr	s13, [pc, #400]	; 800b9d4 <motorUpDown+0x1cc>
 800b844:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b848:	ed9f 7a63 	vldr	s14, [pc, #396]	; 800b9d8 <motorUpDown+0x1d0>
 800b84c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b850:	edc7 7a03 	vstr	s15, [r7, #12]
		//limit the duty to 100
		pwmDuty = (pwmDuty > 100)? 100 : pwmDuty;
 800b854:	edd7 7a03 	vldr	s15, [r7, #12]
 800b858:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800b9d8 <motorUpDown+0x1d0>
 800b85c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b864:	dd01      	ble.n	800b86a <motorUpDown+0x62>
 800b866:	4b5d      	ldr	r3, [pc, #372]	; (800b9dc <motorUpDown+0x1d4>)
 800b868:	e000      	b.n	800b86c <motorUpDown+0x64>
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	60fb      	str	r3, [r7, #12]

		//rc filter	pwm duty range 0-100
		pwmDuty = RCFilter_Update(&rcFilterForward, pwmDuty);
 800b86e:	ed97 0a03 	vldr	s0, [r7, #12]
 800b872:	485b      	ldr	r0, [pc, #364]	; (800b9e0 <motorUpDown+0x1d8>)
 800b874:	f001 fad2 	bl	800ce1c <RCFilter_Update>
 800b878:	ed87 0a03 	vstr	s0, [r7, #12]

		RIGHT_MOTOR_FORWARD((uint8_t)pwmDuty);
 800b87c:	edd7 7a03 	vldr	s15, [r7, #12]
 800b880:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b884:	edc7 7a00 	vstr	s15, [r7]
 800b888:	783b      	ldrb	r3, [r7, #0]
 800b88a:	b2da      	uxtb	r2, r3
 800b88c:	4b4f      	ldr	r3, [pc, #316]	; (800b9cc <motorUpDown+0x1c4>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	63da      	str	r2, [r3, #60]	; 0x3c
		LEFT_MOTOR_FORWARD((uint8_t)pwmDuty);
 800b892:	edd7 7a03 	vldr	s15, [r7, #12]
 800b896:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b89a:	edc7 7a00 	vstr	s15, [r7]
 800b89e:	783b      	ldrb	r3, [r7, #0]
 800b8a0:	b2da      	uxtb	r2, r3
 800b8a2:	4b50      	ldr	r3, [pc, #320]	; (800b9e4 <motorUpDown+0x1dc>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	635a      	str	r2, [r3, #52]	; 0x34

		motorInf.direction = FORWARD;
 800b8a8:	4b4f      	ldr	r3, [pc, #316]	; (800b9e8 <motorUpDown+0x1e0>)
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	701a      	strb	r2, [r3, #0]
		motorInf.forwardPwm = pwmDuty;
 800b8ae:	edd7 7a03 	vldr	s15, [r7, #12]
 800b8b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8b6:	edc7 7a00 	vstr	s15, [r7]
 800b8ba:	783b      	ldrb	r3, [r7, #0]
 800b8bc:	b2da      	uxtb	r2, r3
 800b8be:	4b4a      	ldr	r3, [pc, #296]	; (800b9e8 <motorUpDown+0x1e0>)
 800b8c0:	705a      	strb	r2, [r3, #1]
		LEFT_MOTOR_BACKWARD((uint8_t)pwmDuty);

		motorInf.direction = BACKWARD;
		motorInf.forwardPwm = pwmDuty;
	}
}
 800b8c2:	e07e      	b.n	800b9c2 <motorUpDown+0x1ba>
	else if((adcVal < (CHANNEL_MIDDLE + CHANNEL_ERROR)) && (adcVal > (CHANNEL_MIDDLE - CHANNEL_ERROR)))
 800b8c4:	88fb      	ldrh	r3, [r7, #6]
 800b8c6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b8ca:	d225      	bcs.n	800b918 <motorUpDown+0x110>
 800b8cc:	88fb      	ldrh	r3, [r7, #6]
 800b8ce:	f240 52aa 	movw	r2, #1450	; 0x5aa
 800b8d2:	4293      	cmp	r3, r2
 800b8d4:	d920      	bls.n	800b918 <motorUpDown+0x110>
		RIGHT_MOTOR_FORWARD(0);
 800b8d6:	4b3d      	ldr	r3, [pc, #244]	; (800b9cc <motorUpDown+0x1c4>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	2200      	movs	r2, #0
 800b8dc:	63da      	str	r2, [r3, #60]	; 0x3c
		LEFT_MOTOR_FORWARD(0);
 800b8de:	4b41      	ldr	r3, [pc, #260]	; (800b9e4 <motorUpDown+0x1dc>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	635a      	str	r2, [r3, #52]	; 0x34
		RIGHT_MOTOR_BACKWARD(0);
 800b8e6:	4b39      	ldr	r3, [pc, #228]	; (800b9cc <motorUpDown+0x1c4>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	639a      	str	r2, [r3, #56]	; 0x38
		LEFT_MOTOR_BACKWARD(0);
 800b8ee:	4b38      	ldr	r3, [pc, #224]	; (800b9d0 <motorUpDown+0x1c8>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	635a      	str	r2, [r3, #52]	; 0x34
		RCFilter_Update(&rcFilterForward, 0);
 800b8f6:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 800b9ec <motorUpDown+0x1e4>
 800b8fa:	4839      	ldr	r0, [pc, #228]	; (800b9e0 <motorUpDown+0x1d8>)
 800b8fc:	f001 fa8e 	bl	800ce1c <RCFilter_Update>
		RCFilter_Update(&rcFilterBackward, 0);
 800b900:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 800b9ec <motorUpDown+0x1e4>
 800b904:	483a      	ldr	r0, [pc, #232]	; (800b9f0 <motorUpDown+0x1e8>)
 800b906:	f001 fa89 	bl	800ce1c <RCFilter_Update>
		motorInf.direction = IDLE;
 800b90a:	4b37      	ldr	r3, [pc, #220]	; (800b9e8 <motorUpDown+0x1e0>)
 800b90c:	2201      	movs	r2, #1
 800b90e:	701a      	strb	r2, [r3, #0]
		motorInf.forwardPwm = 0;
 800b910:	4b35      	ldr	r3, [pc, #212]	; (800b9e8 <motorUpDown+0x1e0>)
 800b912:	2200      	movs	r2, #0
 800b914:	705a      	strb	r2, [r3, #1]
}
 800b916:	e054      	b.n	800b9c2 <motorUpDown+0x1ba>
		RIGHT_MOTOR_FORWARD(0);
 800b918:	4b2c      	ldr	r3, [pc, #176]	; (800b9cc <motorUpDown+0x1c4>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	2200      	movs	r2, #0
 800b91e:	63da      	str	r2, [r3, #60]	; 0x3c
		LEFT_MOTOR_FORWARD(0);
 800b920:	4b30      	ldr	r3, [pc, #192]	; (800b9e4 <motorUpDown+0x1dc>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	2200      	movs	r2, #0
 800b926:	635a      	str	r2, [r3, #52]	; 0x34
		pwmDuty = (CHANNEL_MIDDLE - CHANNEL_ERROR) - adcVal;
 800b928:	88fb      	ldrh	r3, [r7, #6]
 800b92a:	f5c3 63b5 	rsb	r3, r3, #1448	; 0x5a8
 800b92e:	3302      	adds	r3, #2
 800b930:	ee07 3a90 	vmov	s15, r3
 800b934:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b938:	edc7 7a03 	vstr	s15, [r7, #12]
		pwmDuty = ((pwmDuty / CHANNEL_RANGE) * 100.0f);
 800b93c:	ed97 7a03 	vldr	s14, [r7, #12]
 800b940:	eddf 6a24 	vldr	s13, [pc, #144]	; 800b9d4 <motorUpDown+0x1cc>
 800b944:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b948:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800b9d8 <motorUpDown+0x1d0>
 800b94c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b950:	edc7 7a03 	vstr	s15, [r7, #12]
		pwmDuty = (pwmDuty > 100)? 100 : pwmDuty;
 800b954:	edd7 7a03 	vldr	s15, [r7, #12]
 800b958:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800b9d8 <motorUpDown+0x1d0>
 800b95c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b964:	dd01      	ble.n	800b96a <motorUpDown+0x162>
 800b966:	4b1d      	ldr	r3, [pc, #116]	; (800b9dc <motorUpDown+0x1d4>)
 800b968:	e000      	b.n	800b96c <motorUpDown+0x164>
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	60fb      	str	r3, [r7, #12]
		pwmDuty = RCFilter_Update(&rcFilterBackward, pwmDuty);
 800b96e:	ed97 0a03 	vldr	s0, [r7, #12]
 800b972:	481f      	ldr	r0, [pc, #124]	; (800b9f0 <motorUpDown+0x1e8>)
 800b974:	f001 fa52 	bl	800ce1c <RCFilter_Update>
 800b978:	ed87 0a03 	vstr	s0, [r7, #12]
		RIGHT_MOTOR_BACKWARD((uint8_t)pwmDuty);
 800b97c:	edd7 7a03 	vldr	s15, [r7, #12]
 800b980:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b984:	edc7 7a00 	vstr	s15, [r7]
 800b988:	783b      	ldrb	r3, [r7, #0]
 800b98a:	b2da      	uxtb	r2, r3
 800b98c:	4b0f      	ldr	r3, [pc, #60]	; (800b9cc <motorUpDown+0x1c4>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	639a      	str	r2, [r3, #56]	; 0x38
		LEFT_MOTOR_BACKWARD((uint8_t)pwmDuty);
 800b992:	edd7 7a03 	vldr	s15, [r7, #12]
 800b996:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b99a:	edc7 7a00 	vstr	s15, [r7]
 800b99e:	783b      	ldrb	r3, [r7, #0]
 800b9a0:	b2da      	uxtb	r2, r3
 800b9a2:	4b0b      	ldr	r3, [pc, #44]	; (800b9d0 <motorUpDown+0x1c8>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	635a      	str	r2, [r3, #52]	; 0x34
		motorInf.direction = BACKWARD;
 800b9a8:	4b0f      	ldr	r3, [pc, #60]	; (800b9e8 <motorUpDown+0x1e0>)
 800b9aa:	2202      	movs	r2, #2
 800b9ac:	701a      	strb	r2, [r3, #0]
		motorInf.forwardPwm = pwmDuty;
 800b9ae:	edd7 7a03 	vldr	s15, [r7, #12]
 800b9b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9b6:	edc7 7a00 	vstr	s15, [r7]
 800b9ba:	783b      	ldrb	r3, [r7, #0]
 800b9bc:	b2da      	uxtb	r2, r3
 800b9be:	4b0a      	ldr	r3, [pc, #40]	; (800b9e8 <motorUpDown+0x1e0>)
 800b9c0:	705a      	strb	r2, [r3, #1]
}
 800b9c2:	bf00      	nop
 800b9c4:	3710      	adds	r7, #16
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bd80      	pop	{r7, pc}
 800b9ca:	bf00      	nop
 800b9cc:	2000042c 	.word	0x2000042c
 800b9d0:	2000039c 	.word	0x2000039c
 800b9d4:	43af0000 	.word	0x43af0000
 800b9d8:	42c80000 	.word	0x42c80000
 800b9dc:	42c80000 	.word	0x42c80000
 800b9e0:	2000507c 	.word	0x2000507c
 800b9e4:	200003e4 	.word	0x200003e4
 800b9e8:	200050bc 	.word	0x200050bc
 800b9ec:	00000000 	.word	0x00000000
 800b9f0:	2000508c 	.word	0x2000508c

0800b9f4 <motorRightLeft>:
 * @brief control the motor right and left
 * @param[in] read the channel1 adc value
 * @return none
 */
static void motorRightLeft(uint16_t adcVal)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b086      	sub	sp, #24
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	80fb      	strh	r3, [r7, #6]
	float pwmDuty;
	float rightMotorPwm;
	float leftMotorPwm;

	if(adcVal > (CHANNEL_MIDDLE + CHANNEL_ERROR))
 800b9fe:	88fb      	ldrh	r3, [r7, #6]
 800ba00:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ba04:	f240 8163 	bls.w	800bcce <motorRightLeft+0x2da>
	{
		if(motorInf.direction == FORWARD)
 800ba08:	4bbb      	ldr	r3, [pc, #748]	; (800bcf8 <motorRightLeft+0x304>)
 800ba0a:	781b      	ldrb	r3, [r3, #0]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	f040 8090 	bne.w	800bb32 <motorRightLeft+0x13e>
		{
			// if channel value between 1550 - 1950, pwmDuty can be 0-400
			pwmDuty = adcVal - (CHANNEL_MIDDLE + CHANNEL_ERROR);
 800ba12:	88fb      	ldrh	r3, [r7, #6]
 800ba14:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 800ba18:	ee07 3a90 	vmov	s15, r3
 800ba1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba20:	edc7 7a05 	vstr	s15, [r7, #20]

			//set the duty map 0-100
			pwmDuty = ((pwmDuty / CHANNEL_RANGE) * 100.0f);
 800ba24:	ed97 7a05 	vldr	s14, [r7, #20]
 800ba28:	eddf 6ab4 	vldr	s13, [pc, #720]	; 800bcfc <motorRightLeft+0x308>
 800ba2c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ba30:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 800bd00 <motorRightLeft+0x30c>
 800ba34:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ba38:	edc7 7a05 	vstr	s15, [r7, #20]

			//add and sub %10 percent from the left and right motor
			leftMotorPwm = motorInf.forwardPwm + pwmDuty * 0.7f;
 800ba3c:	4bae      	ldr	r3, [pc, #696]	; (800bcf8 <motorRightLeft+0x304>)
 800ba3e:	785b      	ldrb	r3, [r3, #1]
 800ba40:	ee07 3a90 	vmov	s15, r3
 800ba44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ba48:	edd7 7a05 	vldr	s15, [r7, #20]
 800ba4c:	eddf 6aad 	vldr	s13, [pc, #692]	; 800bd04 <motorRightLeft+0x310>
 800ba50:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ba54:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba58:	edc7 7a04 	vstr	s15, [r7, #16]
			rightMotorPwm = motorInf.forwardPwm - pwmDuty * 0.7f;
 800ba5c:	4ba6      	ldr	r3, [pc, #664]	; (800bcf8 <motorRightLeft+0x304>)
 800ba5e:	785b      	ldrb	r3, [r3, #1]
 800ba60:	ee07 3a90 	vmov	s15, r3
 800ba64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ba68:	edd7 7a05 	vldr	s15, [r7, #20]
 800ba6c:	eddf 6aa5 	vldr	s13, [pc, #660]	; 800bd04 <motorRightLeft+0x310>
 800ba70:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ba74:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ba78:	edc7 7a03 	vstr	s15, [r7, #12]

			leftMotorPwm = (leftMotorPwm > 100) ? 100 : leftMotorPwm;
 800ba7c:	edd7 7a04 	vldr	s15, [r7, #16]
 800ba80:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 800bd00 <motorRightLeft+0x30c>
 800ba84:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ba88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba8c:	dd01      	ble.n	800ba92 <motorRightLeft+0x9e>
 800ba8e:	4b9e      	ldr	r3, [pc, #632]	; (800bd08 <motorRightLeft+0x314>)
 800ba90:	e000      	b.n	800ba94 <motorRightLeft+0xa0>
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	613b      	str	r3, [r7, #16]
			leftMotorPwm = (leftMotorPwm < 0) ? 0 : leftMotorPwm;
 800ba96:	edd7 7a04 	vldr	s15, [r7, #16]
 800ba9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ba9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baa2:	d502      	bpl.n	800baaa <motorRightLeft+0xb6>
 800baa4:	f04f 0300 	mov.w	r3, #0
 800baa8:	e000      	b.n	800baac <motorRightLeft+0xb8>
 800baaa:	693b      	ldr	r3, [r7, #16]
 800baac:	613b      	str	r3, [r7, #16]

			rightMotorPwm = (rightMotorPwm > 100) ? 100 : rightMotorPwm;
 800baae:	edd7 7a03 	vldr	s15, [r7, #12]
 800bab2:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800bd00 <motorRightLeft+0x30c>
 800bab6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800baba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800babe:	dd01      	ble.n	800bac4 <motorRightLeft+0xd0>
 800bac0:	4b91      	ldr	r3, [pc, #580]	; (800bd08 <motorRightLeft+0x314>)
 800bac2:	e000      	b.n	800bac6 <motorRightLeft+0xd2>
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	60fb      	str	r3, [r7, #12]
			rightMotorPwm = (rightMotorPwm < 0) ? 0 : rightMotorPwm;
 800bac8:	edd7 7a03 	vldr	s15, [r7, #12]
 800bacc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bad4:	d502      	bpl.n	800badc <motorRightLeft+0xe8>
 800bad6:	f04f 0300 	mov.w	r3, #0
 800bada:	e000      	b.n	800bade <motorRightLeft+0xea>
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	60fb      	str	r3, [r7, #12]

			rcFilterRight.out[0] = rcFilterForward.out[0];
 800bae0:	4b8a      	ldr	r3, [pc, #552]	; (800bd0c <motorRightLeft+0x318>)
 800bae2:	689b      	ldr	r3, [r3, #8]
 800bae4:	4a8a      	ldr	r2, [pc, #552]	; (800bd10 <motorRightLeft+0x31c>)
 800bae6:	6093      	str	r3, [r2, #8]
			rcFilterLeft.out[0] = rcFilterForward.out[0];
 800bae8:	4b88      	ldr	r3, [pc, #544]	; (800bd0c <motorRightLeft+0x318>)
 800baea:	689b      	ldr	r3, [r3, #8]
 800baec:	4a89      	ldr	r2, [pc, #548]	; (800bd14 <motorRightLeft+0x320>)
 800baee:	6093      	str	r3, [r2, #8]

			rightMotorPwm = RCFilter_Update(&rcFilterRight, rightMotorPwm);
 800baf0:	ed97 0a03 	vldr	s0, [r7, #12]
 800baf4:	4886      	ldr	r0, [pc, #536]	; (800bd10 <motorRightLeft+0x31c>)
 800baf6:	f001 f991 	bl	800ce1c <RCFilter_Update>
 800bafa:	ed87 0a03 	vstr	s0, [r7, #12]
			leftMotorPwm = RCFilter_Update(&rcFilterLeft, leftMotorPwm);
 800bafe:	ed97 0a04 	vldr	s0, [r7, #16]
 800bb02:	4884      	ldr	r0, [pc, #528]	; (800bd14 <motorRightLeft+0x320>)
 800bb04:	f001 f98a 	bl	800ce1c <RCFilter_Update>
 800bb08:	ed87 0a04 	vstr	s0, [r7, #16]

			LEFT_MOTOR_FORWARD(leftMotorPwm);
 800bb0c:	4b82      	ldr	r3, [pc, #520]	; (800bd18 <motorRightLeft+0x324>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	edd7 7a04 	vldr	s15, [r7, #16]
 800bb14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb18:	ee17 2a90 	vmov	r2, s15
 800bb1c:	635a      	str	r2, [r3, #52]	; 0x34
			RIGHT_MOTOR_FORWARD(rightMotorPwm);
 800bb1e:	4b7f      	ldr	r3, [pc, #508]	; (800bd1c <motorRightLeft+0x328>)
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	edd7 7a03 	vldr	s15, [r7, #12]
 800bb26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb2a:	ee17 2a90 	vmov	r2, s15
 800bb2e:	63da      	str	r2, [r3, #60]	; 0x3c
			LEFT_MOTOR_BACKWARD(leftMotorPwm);
			RIGHT_MOTOR_BACKWARD(rightMotorPwm);
		}
	}

}
 800bb30:	e261      	b.n	800bff6 <motorRightLeft+0x602>
		else if(motorInf.direction == IDLE)
 800bb32:	4b71      	ldr	r3, [pc, #452]	; (800bcf8 <motorRightLeft+0x304>)
 800bb34:	781b      	ldrb	r3, [r3, #0]
 800bb36:	2b01      	cmp	r3, #1
 800bb38:	d139      	bne.n	800bbae <motorRightLeft+0x1ba>
			pwmDuty = adcVal - (CHANNEL_MIDDLE + CHANNEL_ERROR);
 800bb3a:	88fb      	ldrh	r3, [r7, #6]
 800bb3c:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 800bb40:	ee07 3a90 	vmov	s15, r3
 800bb44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb48:	edc7 7a05 	vstr	s15, [r7, #20]
			pwmDuty = ((pwmDuty / CHANNEL_RANGE) * 90.0f);
 800bb4c:	ed97 7a05 	vldr	s14, [r7, #20]
 800bb50:	eddf 6a6a 	vldr	s13, [pc, #424]	; 800bcfc <motorRightLeft+0x308>
 800bb54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bb58:	ed9f 7a71 	vldr	s14, [pc, #452]	; 800bd20 <motorRightLeft+0x32c>
 800bb5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bb60:	edc7 7a05 	vstr	s15, [r7, #20]
			leftMotorPwm = pwmDuty;
 800bb64:	697b      	ldr	r3, [r7, #20]
 800bb66:	613b      	str	r3, [r7, #16]
			rightMotorPwm = pwmDuty;
 800bb68:	697b      	ldr	r3, [r7, #20]
 800bb6a:	60fb      	str	r3, [r7, #12]
			rightMotorPwm = RCFilter_Update(&rcFilterRight, rightMotorPwm);
 800bb6c:	ed97 0a03 	vldr	s0, [r7, #12]
 800bb70:	4867      	ldr	r0, [pc, #412]	; (800bd10 <motorRightLeft+0x31c>)
 800bb72:	f001 f953 	bl	800ce1c <RCFilter_Update>
 800bb76:	ed87 0a03 	vstr	s0, [r7, #12]
			leftMotorPwm = RCFilter_Update(&rcFilterLeft, leftMotorPwm);
 800bb7a:	ed97 0a04 	vldr	s0, [r7, #16]
 800bb7e:	4865      	ldr	r0, [pc, #404]	; (800bd14 <motorRightLeft+0x320>)
 800bb80:	f001 f94c 	bl	800ce1c <RCFilter_Update>
 800bb84:	ed87 0a04 	vstr	s0, [r7, #16]
			LEFT_MOTOR_FORWARD(leftMotorPwm);
 800bb88:	4b63      	ldr	r3, [pc, #396]	; (800bd18 <motorRightLeft+0x324>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	edd7 7a04 	vldr	s15, [r7, #16]
 800bb90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb94:	ee17 2a90 	vmov	r2, s15
 800bb98:	635a      	str	r2, [r3, #52]	; 0x34
			RIGHT_MOTOR_BACKWARD(rightMotorPwm);
 800bb9a:	4b60      	ldr	r3, [pc, #384]	; (800bd1c <motorRightLeft+0x328>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	edd7 7a03 	vldr	s15, [r7, #12]
 800bba2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bba6:	ee17 2a90 	vmov	r2, s15
 800bbaa:	639a      	str	r2, [r3, #56]	; 0x38
}
 800bbac:	e223      	b.n	800bff6 <motorRightLeft+0x602>
			pwmDuty = adcVal - (CHANNEL_MIDDLE + CHANNEL_ERROR);
 800bbae:	88fb      	ldrh	r3, [r7, #6]
 800bbb0:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 800bbb4:	ee07 3a90 	vmov	s15, r3
 800bbb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bbbc:	edc7 7a05 	vstr	s15, [r7, #20]
			pwmDuty = ((pwmDuty / CHANNEL_RANGE) * 100.0f);
 800bbc0:	ed97 7a05 	vldr	s14, [r7, #20]
 800bbc4:	eddf 6a4d 	vldr	s13, [pc, #308]	; 800bcfc <motorRightLeft+0x308>
 800bbc8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bbcc:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800bd00 <motorRightLeft+0x30c>
 800bbd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bbd4:	edc7 7a05 	vstr	s15, [r7, #20]
			leftMotorPwm = motorInf.forwardPwm + pwmDuty * 0.7f;
 800bbd8:	4b47      	ldr	r3, [pc, #284]	; (800bcf8 <motorRightLeft+0x304>)
 800bbda:	785b      	ldrb	r3, [r3, #1]
 800bbdc:	ee07 3a90 	vmov	s15, r3
 800bbe0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bbe4:	edd7 7a05 	vldr	s15, [r7, #20]
 800bbe8:	eddf 6a46 	vldr	s13, [pc, #280]	; 800bd04 <motorRightLeft+0x310>
 800bbec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bbf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bbf4:	edc7 7a04 	vstr	s15, [r7, #16]
			rightMotorPwm = motorInf.forwardPwm - pwmDuty * 0.7f;
 800bbf8:	4b3f      	ldr	r3, [pc, #252]	; (800bcf8 <motorRightLeft+0x304>)
 800bbfa:	785b      	ldrb	r3, [r3, #1]
 800bbfc:	ee07 3a90 	vmov	s15, r3
 800bc00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bc04:	edd7 7a05 	vldr	s15, [r7, #20]
 800bc08:	eddf 6a3e 	vldr	s13, [pc, #248]	; 800bd04 <motorRightLeft+0x310>
 800bc0c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bc10:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bc14:	edc7 7a03 	vstr	s15, [r7, #12]
			leftMotorPwm = (leftMotorPwm > 100) ? 100 : leftMotorPwm;
 800bc18:	edd7 7a04 	vldr	s15, [r7, #16]
 800bc1c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800bd00 <motorRightLeft+0x30c>
 800bc20:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bc24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc28:	dd01      	ble.n	800bc2e <motorRightLeft+0x23a>
 800bc2a:	4b37      	ldr	r3, [pc, #220]	; (800bd08 <motorRightLeft+0x314>)
 800bc2c:	e000      	b.n	800bc30 <motorRightLeft+0x23c>
 800bc2e:	693b      	ldr	r3, [r7, #16]
 800bc30:	613b      	str	r3, [r7, #16]
			leftMotorPwm = (leftMotorPwm < 0) ? 0 : leftMotorPwm;
 800bc32:	edd7 7a04 	vldr	s15, [r7, #16]
 800bc36:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bc3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc3e:	d502      	bpl.n	800bc46 <motorRightLeft+0x252>
 800bc40:	f04f 0300 	mov.w	r3, #0
 800bc44:	e000      	b.n	800bc48 <motorRightLeft+0x254>
 800bc46:	693b      	ldr	r3, [r7, #16]
 800bc48:	613b      	str	r3, [r7, #16]
			rightMotorPwm = (rightMotorPwm > 100) ? 100 : rightMotorPwm;
 800bc4a:	edd7 7a03 	vldr	s15, [r7, #12]
 800bc4e:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800bd00 <motorRightLeft+0x30c>
 800bc52:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bc56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc5a:	dd01      	ble.n	800bc60 <motorRightLeft+0x26c>
 800bc5c:	4b2a      	ldr	r3, [pc, #168]	; (800bd08 <motorRightLeft+0x314>)
 800bc5e:	e000      	b.n	800bc62 <motorRightLeft+0x26e>
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	60fb      	str	r3, [r7, #12]
			rightMotorPwm = (rightMotorPwm < 0) ? 0 : rightMotorPwm;
 800bc64:	edd7 7a03 	vldr	s15, [r7, #12]
 800bc68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bc6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc70:	d502      	bpl.n	800bc78 <motorRightLeft+0x284>
 800bc72:	f04f 0300 	mov.w	r3, #0
 800bc76:	e000      	b.n	800bc7a <motorRightLeft+0x286>
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	60fb      	str	r3, [r7, #12]
			rcFilterRight.out[0] = rcFilterForward.out[0];
 800bc7c:	4b23      	ldr	r3, [pc, #140]	; (800bd0c <motorRightLeft+0x318>)
 800bc7e:	689b      	ldr	r3, [r3, #8]
 800bc80:	4a23      	ldr	r2, [pc, #140]	; (800bd10 <motorRightLeft+0x31c>)
 800bc82:	6093      	str	r3, [r2, #8]
			rcFilterLeft.out[0] = rcFilterForward.out[0];
 800bc84:	4b21      	ldr	r3, [pc, #132]	; (800bd0c <motorRightLeft+0x318>)
 800bc86:	689b      	ldr	r3, [r3, #8]
 800bc88:	4a22      	ldr	r2, [pc, #136]	; (800bd14 <motorRightLeft+0x320>)
 800bc8a:	6093      	str	r3, [r2, #8]
			rightMotorPwm = RCFilter_Update(&rcFilterRight, rightMotorPwm);
 800bc8c:	ed97 0a03 	vldr	s0, [r7, #12]
 800bc90:	481f      	ldr	r0, [pc, #124]	; (800bd10 <motorRightLeft+0x31c>)
 800bc92:	f001 f8c3 	bl	800ce1c <RCFilter_Update>
 800bc96:	ed87 0a03 	vstr	s0, [r7, #12]
			leftMotorPwm = RCFilter_Update(&rcFilterLeft, leftMotorPwm);
 800bc9a:	ed97 0a04 	vldr	s0, [r7, #16]
 800bc9e:	481d      	ldr	r0, [pc, #116]	; (800bd14 <motorRightLeft+0x320>)
 800bca0:	f001 f8bc 	bl	800ce1c <RCFilter_Update>
 800bca4:	ed87 0a04 	vstr	s0, [r7, #16]
			LEFT_MOTOR_BACKWARD(leftMotorPwm);
 800bca8:	4b1e      	ldr	r3, [pc, #120]	; (800bd24 <motorRightLeft+0x330>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	edd7 7a04 	vldr	s15, [r7, #16]
 800bcb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bcb4:	ee17 2a90 	vmov	r2, s15
 800bcb8:	635a      	str	r2, [r3, #52]	; 0x34
			RIGHT_MOTOR_BACKWARD(rightMotorPwm);
 800bcba:	4b18      	ldr	r3, [pc, #96]	; (800bd1c <motorRightLeft+0x328>)
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	edd7 7a03 	vldr	s15, [r7, #12]
 800bcc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bcc6:	ee17 2a90 	vmov	r2, s15
 800bcca:	639a      	str	r2, [r3, #56]	; 0x38
}
 800bccc:	e193      	b.n	800bff6 <motorRightLeft+0x602>
	else if((adcVal < (CHANNEL_MIDDLE + CHANNEL_ERROR)) && (adcVal > (CHANNEL_MIDDLE - CHANNEL_ERROR)))
 800bcce:	88fb      	ldrh	r3, [r7, #6]
 800bcd0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bcd4:	d22a      	bcs.n	800bd2c <motorRightLeft+0x338>
 800bcd6:	88fb      	ldrh	r3, [r7, #6]
 800bcd8:	f240 52aa 	movw	r2, #1450	; 0x5aa
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d925      	bls.n	800bd2c <motorRightLeft+0x338>
		RCFilter_Update(&rcFilterRight, 0);
 800bce0:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800bd28 <motorRightLeft+0x334>
 800bce4:	480a      	ldr	r0, [pc, #40]	; (800bd10 <motorRightLeft+0x31c>)
 800bce6:	f001 f899 	bl	800ce1c <RCFilter_Update>
		RCFilter_Update(&rcFilterLeft, 0);
 800bcea:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800bd28 <motorRightLeft+0x334>
 800bcee:	4809      	ldr	r0, [pc, #36]	; (800bd14 <motorRightLeft+0x320>)
 800bcf0:	f001 f894 	bl	800ce1c <RCFilter_Update>
}
 800bcf4:	e17f      	b.n	800bff6 <motorRightLeft+0x602>
 800bcf6:	bf00      	nop
 800bcf8:	200050bc 	.word	0x200050bc
 800bcfc:	43af0000 	.word	0x43af0000
 800bd00:	42c80000 	.word	0x42c80000
 800bd04:	3f333333 	.word	0x3f333333
 800bd08:	42c80000 	.word	0x42c80000
 800bd0c:	2000507c 	.word	0x2000507c
 800bd10:	2000509c 	.word	0x2000509c
 800bd14:	200050ac 	.word	0x200050ac
 800bd18:	200003e4 	.word	0x200003e4
 800bd1c:	2000042c 	.word	0x2000042c
 800bd20:	42b40000 	.word	0x42b40000
 800bd24:	2000039c 	.word	0x2000039c
 800bd28:	00000000 	.word	0x00000000
		if(motorInf.direction == FORWARD)
 800bd2c:	4bb4      	ldr	r3, [pc, #720]	; (800c000 <motorRightLeft+0x60c>)
 800bd2e:	781b      	ldrb	r3, [r3, #0]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	f040 8091 	bne.w	800be58 <motorRightLeft+0x464>
			pwmDuty = (CHANNEL_MIDDLE - CHANNEL_ERROR) - adcVal;
 800bd36:	88fb      	ldrh	r3, [r7, #6]
 800bd38:	f5c3 63b5 	rsb	r3, r3, #1448	; 0x5a8
 800bd3c:	3302      	adds	r3, #2
 800bd3e:	ee07 3a90 	vmov	s15, r3
 800bd42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bd46:	edc7 7a05 	vstr	s15, [r7, #20]
			pwmDuty = ((pwmDuty / CHANNEL_RANGE) * 100.0f);
 800bd4a:	ed97 7a05 	vldr	s14, [r7, #20]
 800bd4e:	eddf 6aad 	vldr	s13, [pc, #692]	; 800c004 <motorRightLeft+0x610>
 800bd52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bd56:	ed9f 7aac 	vldr	s14, [pc, #688]	; 800c008 <motorRightLeft+0x614>
 800bd5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bd5e:	edc7 7a05 	vstr	s15, [r7, #20]
			leftMotorPwm = motorInf.forwardPwm - pwmDuty * 0.7f;
 800bd62:	4ba7      	ldr	r3, [pc, #668]	; (800c000 <motorRightLeft+0x60c>)
 800bd64:	785b      	ldrb	r3, [r3, #1]
 800bd66:	ee07 3a90 	vmov	s15, r3
 800bd6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bd6e:	edd7 7a05 	vldr	s15, [r7, #20]
 800bd72:	eddf 6aa6 	vldr	s13, [pc, #664]	; 800c00c <motorRightLeft+0x618>
 800bd76:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bd7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bd7e:	edc7 7a04 	vstr	s15, [r7, #16]
			rightMotorPwm = motorInf.forwardPwm + pwmDuty * 0.7f;
 800bd82:	4b9f      	ldr	r3, [pc, #636]	; (800c000 <motorRightLeft+0x60c>)
 800bd84:	785b      	ldrb	r3, [r3, #1]
 800bd86:	ee07 3a90 	vmov	s15, r3
 800bd8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bd8e:	edd7 7a05 	vldr	s15, [r7, #20]
 800bd92:	eddf 6a9e 	vldr	s13, [pc, #632]	; 800c00c <motorRightLeft+0x618>
 800bd96:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bd9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bd9e:	edc7 7a03 	vstr	s15, [r7, #12]
			leftMotorPwm = (leftMotorPwm > 100) ? 100 : leftMotorPwm;
 800bda2:	edd7 7a04 	vldr	s15, [r7, #16]
 800bda6:	ed9f 7a98 	vldr	s14, [pc, #608]	; 800c008 <motorRightLeft+0x614>
 800bdaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bdae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdb2:	dd01      	ble.n	800bdb8 <motorRightLeft+0x3c4>
 800bdb4:	4b96      	ldr	r3, [pc, #600]	; (800c010 <motorRightLeft+0x61c>)
 800bdb6:	e000      	b.n	800bdba <motorRightLeft+0x3c6>
 800bdb8:	693b      	ldr	r3, [r7, #16]
 800bdba:	613b      	str	r3, [r7, #16]
			leftMotorPwm = (leftMotorPwm < 0) ? 0 : leftMotorPwm;
 800bdbc:	edd7 7a04 	vldr	s15, [r7, #16]
 800bdc0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bdc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdc8:	d502      	bpl.n	800bdd0 <motorRightLeft+0x3dc>
 800bdca:	f04f 0300 	mov.w	r3, #0
 800bdce:	e000      	b.n	800bdd2 <motorRightLeft+0x3de>
 800bdd0:	693b      	ldr	r3, [r7, #16]
 800bdd2:	613b      	str	r3, [r7, #16]
			rightMotorPwm = (rightMotorPwm > 100) ? 100 : rightMotorPwm;
 800bdd4:	edd7 7a03 	vldr	s15, [r7, #12]
 800bdd8:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800c008 <motorRightLeft+0x614>
 800bddc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bde0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bde4:	dd01      	ble.n	800bdea <motorRightLeft+0x3f6>
 800bde6:	4b8a      	ldr	r3, [pc, #552]	; (800c010 <motorRightLeft+0x61c>)
 800bde8:	e000      	b.n	800bdec <motorRightLeft+0x3f8>
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	60fb      	str	r3, [r7, #12]
			rightMotorPwm = (rightMotorPwm < 0) ? 0 : rightMotorPwm;
 800bdee:	edd7 7a03 	vldr	s15, [r7, #12]
 800bdf2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bdf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdfa:	d502      	bpl.n	800be02 <motorRightLeft+0x40e>
 800bdfc:	f04f 0300 	mov.w	r3, #0
 800be00:	e000      	b.n	800be04 <motorRightLeft+0x410>
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	60fb      	str	r3, [r7, #12]
			rcFilterRight.out[0] = rcFilterForward.out[0];
 800be06:	4b83      	ldr	r3, [pc, #524]	; (800c014 <motorRightLeft+0x620>)
 800be08:	689b      	ldr	r3, [r3, #8]
 800be0a:	4a83      	ldr	r2, [pc, #524]	; (800c018 <motorRightLeft+0x624>)
 800be0c:	6093      	str	r3, [r2, #8]
			rcFilterLeft.out[0] = rcFilterForward.out[0];
 800be0e:	4b81      	ldr	r3, [pc, #516]	; (800c014 <motorRightLeft+0x620>)
 800be10:	689b      	ldr	r3, [r3, #8]
 800be12:	4a82      	ldr	r2, [pc, #520]	; (800c01c <motorRightLeft+0x628>)
 800be14:	6093      	str	r3, [r2, #8]
			rightMotorPwm = RCFilter_Update(&rcFilterRight, rightMotorPwm);
 800be16:	ed97 0a03 	vldr	s0, [r7, #12]
 800be1a:	487f      	ldr	r0, [pc, #508]	; (800c018 <motorRightLeft+0x624>)
 800be1c:	f000 fffe 	bl	800ce1c <RCFilter_Update>
 800be20:	ed87 0a03 	vstr	s0, [r7, #12]
			leftMotorPwm = RCFilter_Update(&rcFilterLeft, leftMotorPwm);
 800be24:	ed97 0a04 	vldr	s0, [r7, #16]
 800be28:	487c      	ldr	r0, [pc, #496]	; (800c01c <motorRightLeft+0x628>)
 800be2a:	f000 fff7 	bl	800ce1c <RCFilter_Update>
 800be2e:	ed87 0a04 	vstr	s0, [r7, #16]
			LEFT_MOTOR_FORWARD(leftMotorPwm);
 800be32:	4b7b      	ldr	r3, [pc, #492]	; (800c020 <motorRightLeft+0x62c>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	edd7 7a04 	vldr	s15, [r7, #16]
 800be3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be3e:	ee17 2a90 	vmov	r2, s15
 800be42:	635a      	str	r2, [r3, #52]	; 0x34
			RIGHT_MOTOR_FORWARD(rightMotorPwm);
 800be44:	4b77      	ldr	r3, [pc, #476]	; (800c024 <motorRightLeft+0x630>)
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	edd7 7a03 	vldr	s15, [r7, #12]
 800be4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be50:	ee17 2a90 	vmov	r2, s15
 800be54:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800be56:	e0ce      	b.n	800bff6 <motorRightLeft+0x602>
		else if(motorInf.direction == IDLE)
 800be58:	4b69      	ldr	r3, [pc, #420]	; (800c000 <motorRightLeft+0x60c>)
 800be5a:	781b      	ldrb	r3, [r3, #0]
 800be5c:	2b01      	cmp	r3, #1
 800be5e:	d13a      	bne.n	800bed6 <motorRightLeft+0x4e2>
			pwmDuty = (CHANNEL_MIDDLE - CHANNEL_ERROR) - adcVal;
 800be60:	88fb      	ldrh	r3, [r7, #6]
 800be62:	f5c3 63b5 	rsb	r3, r3, #1448	; 0x5a8
 800be66:	3302      	adds	r3, #2
 800be68:	ee07 3a90 	vmov	s15, r3
 800be6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800be70:	edc7 7a05 	vstr	s15, [r7, #20]
			pwmDuty = ((pwmDuty / CHANNEL_RANGE) * 90.0f);
 800be74:	ed97 7a05 	vldr	s14, [r7, #20]
 800be78:	eddf 6a62 	vldr	s13, [pc, #392]	; 800c004 <motorRightLeft+0x610>
 800be7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800be80:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800c028 <motorRightLeft+0x634>
 800be84:	ee67 7a87 	vmul.f32	s15, s15, s14
 800be88:	edc7 7a05 	vstr	s15, [r7, #20]
			leftMotorPwm = pwmDuty;
 800be8c:	697b      	ldr	r3, [r7, #20]
 800be8e:	613b      	str	r3, [r7, #16]
			rightMotorPwm = pwmDuty;
 800be90:	697b      	ldr	r3, [r7, #20]
 800be92:	60fb      	str	r3, [r7, #12]
			rightMotorPwm = RCFilter_Update(&rcFilterRight, rightMotorPwm);
 800be94:	ed97 0a03 	vldr	s0, [r7, #12]
 800be98:	485f      	ldr	r0, [pc, #380]	; (800c018 <motorRightLeft+0x624>)
 800be9a:	f000 ffbf 	bl	800ce1c <RCFilter_Update>
 800be9e:	ed87 0a03 	vstr	s0, [r7, #12]
			leftMotorPwm = RCFilter_Update(&rcFilterLeft, leftMotorPwm);
 800bea2:	ed97 0a04 	vldr	s0, [r7, #16]
 800bea6:	485d      	ldr	r0, [pc, #372]	; (800c01c <motorRightLeft+0x628>)
 800bea8:	f000 ffb8 	bl	800ce1c <RCFilter_Update>
 800beac:	ed87 0a04 	vstr	s0, [r7, #16]
			LEFT_MOTOR_BACKWARD(leftMotorPwm);
 800beb0:	4b5e      	ldr	r3, [pc, #376]	; (800c02c <motorRightLeft+0x638>)
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	edd7 7a04 	vldr	s15, [r7, #16]
 800beb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bebc:	ee17 2a90 	vmov	r2, s15
 800bec0:	635a      	str	r2, [r3, #52]	; 0x34
			RIGHT_MOTOR_FORWARD(rightMotorPwm);
 800bec2:	4b58      	ldr	r3, [pc, #352]	; (800c024 <motorRightLeft+0x630>)
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	edd7 7a03 	vldr	s15, [r7, #12]
 800beca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bece:	ee17 2a90 	vmov	r2, s15
 800bed2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800bed4:	e08f      	b.n	800bff6 <motorRightLeft+0x602>
			pwmDuty = (CHANNEL_MIDDLE - CHANNEL_ERROR) - adcVal;
 800bed6:	88fb      	ldrh	r3, [r7, #6]
 800bed8:	f5c3 63b5 	rsb	r3, r3, #1448	; 0x5a8
 800bedc:	3302      	adds	r3, #2
 800bede:	ee07 3a90 	vmov	s15, r3
 800bee2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bee6:	edc7 7a05 	vstr	s15, [r7, #20]
			pwmDuty = ((pwmDuty / CHANNEL_RANGE) * 100.0f);
 800beea:	ed97 7a05 	vldr	s14, [r7, #20]
 800beee:	eddf 6a45 	vldr	s13, [pc, #276]	; 800c004 <motorRightLeft+0x610>
 800bef2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bef6:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800c008 <motorRightLeft+0x614>
 800befa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800befe:	edc7 7a05 	vstr	s15, [r7, #20]
			leftMotorPwm = motorInf.forwardPwm - pwmDuty * 0.7f;
 800bf02:	4b3f      	ldr	r3, [pc, #252]	; (800c000 <motorRightLeft+0x60c>)
 800bf04:	785b      	ldrb	r3, [r3, #1]
 800bf06:	ee07 3a90 	vmov	s15, r3
 800bf0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bf0e:	edd7 7a05 	vldr	s15, [r7, #20]
 800bf12:	eddf 6a3e 	vldr	s13, [pc, #248]	; 800c00c <motorRightLeft+0x618>
 800bf16:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bf1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bf1e:	edc7 7a04 	vstr	s15, [r7, #16]
			rightMotorPwm = motorInf.forwardPwm + pwmDuty * 0.7f;
 800bf22:	4b37      	ldr	r3, [pc, #220]	; (800c000 <motorRightLeft+0x60c>)
 800bf24:	785b      	ldrb	r3, [r3, #1]
 800bf26:	ee07 3a90 	vmov	s15, r3
 800bf2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bf2e:	edd7 7a05 	vldr	s15, [r7, #20]
 800bf32:	eddf 6a36 	vldr	s13, [pc, #216]	; 800c00c <motorRightLeft+0x618>
 800bf36:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bf3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bf3e:	edc7 7a03 	vstr	s15, [r7, #12]
			leftMotorPwm = (leftMotorPwm > 100) ? 100 : leftMotorPwm;
 800bf42:	edd7 7a04 	vldr	s15, [r7, #16]
 800bf46:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800c008 <motorRightLeft+0x614>
 800bf4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bf4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf52:	dd01      	ble.n	800bf58 <motorRightLeft+0x564>
 800bf54:	4b2e      	ldr	r3, [pc, #184]	; (800c010 <motorRightLeft+0x61c>)
 800bf56:	e000      	b.n	800bf5a <motorRightLeft+0x566>
 800bf58:	693b      	ldr	r3, [r7, #16]
 800bf5a:	613b      	str	r3, [r7, #16]
			leftMotorPwm = (leftMotorPwm < 0) ? 0 : leftMotorPwm;
 800bf5c:	edd7 7a04 	vldr	s15, [r7, #16]
 800bf60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bf64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf68:	d502      	bpl.n	800bf70 <motorRightLeft+0x57c>
 800bf6a:	f04f 0300 	mov.w	r3, #0
 800bf6e:	e000      	b.n	800bf72 <motorRightLeft+0x57e>
 800bf70:	693b      	ldr	r3, [r7, #16]
 800bf72:	613b      	str	r3, [r7, #16]
			rightMotorPwm = (rightMotorPwm > 100) ? 100 : rightMotorPwm;
 800bf74:	edd7 7a03 	vldr	s15, [r7, #12]
 800bf78:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800c008 <motorRightLeft+0x614>
 800bf7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bf80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf84:	dd01      	ble.n	800bf8a <motorRightLeft+0x596>
 800bf86:	4b22      	ldr	r3, [pc, #136]	; (800c010 <motorRightLeft+0x61c>)
 800bf88:	e000      	b.n	800bf8c <motorRightLeft+0x598>
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	60fb      	str	r3, [r7, #12]
			rightMotorPwm = (rightMotorPwm < 0) ? 0 : rightMotorPwm;
 800bf8e:	edd7 7a03 	vldr	s15, [r7, #12]
 800bf92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bf96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf9a:	d502      	bpl.n	800bfa2 <motorRightLeft+0x5ae>
 800bf9c:	f04f 0300 	mov.w	r3, #0
 800bfa0:	e000      	b.n	800bfa4 <motorRightLeft+0x5b0>
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	60fb      	str	r3, [r7, #12]
			rcFilterRight.out[0] = rcFilterForward.out[0];
 800bfa6:	4b1b      	ldr	r3, [pc, #108]	; (800c014 <motorRightLeft+0x620>)
 800bfa8:	689b      	ldr	r3, [r3, #8]
 800bfaa:	4a1b      	ldr	r2, [pc, #108]	; (800c018 <motorRightLeft+0x624>)
 800bfac:	6093      	str	r3, [r2, #8]
			rcFilterLeft.out[0] = rcFilterForward.out[0];
 800bfae:	4b19      	ldr	r3, [pc, #100]	; (800c014 <motorRightLeft+0x620>)
 800bfb0:	689b      	ldr	r3, [r3, #8]
 800bfb2:	4a1a      	ldr	r2, [pc, #104]	; (800c01c <motorRightLeft+0x628>)
 800bfb4:	6093      	str	r3, [r2, #8]
			rightMotorPwm = RCFilter_Update(&rcFilterRight, rightMotorPwm);
 800bfb6:	ed97 0a03 	vldr	s0, [r7, #12]
 800bfba:	4817      	ldr	r0, [pc, #92]	; (800c018 <motorRightLeft+0x624>)
 800bfbc:	f000 ff2e 	bl	800ce1c <RCFilter_Update>
 800bfc0:	ed87 0a03 	vstr	s0, [r7, #12]
			leftMotorPwm = RCFilter_Update(&rcFilterLeft, leftMotorPwm);
 800bfc4:	ed97 0a04 	vldr	s0, [r7, #16]
 800bfc8:	4814      	ldr	r0, [pc, #80]	; (800c01c <motorRightLeft+0x628>)
 800bfca:	f000 ff27 	bl	800ce1c <RCFilter_Update>
 800bfce:	ed87 0a04 	vstr	s0, [r7, #16]
			LEFT_MOTOR_BACKWARD(leftMotorPwm);
 800bfd2:	4b16      	ldr	r3, [pc, #88]	; (800c02c <motorRightLeft+0x638>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	edd7 7a04 	vldr	s15, [r7, #16]
 800bfda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bfde:	ee17 2a90 	vmov	r2, s15
 800bfe2:	635a      	str	r2, [r3, #52]	; 0x34
			RIGHT_MOTOR_BACKWARD(rightMotorPwm);
 800bfe4:	4b0f      	ldr	r3, [pc, #60]	; (800c024 <motorRightLeft+0x630>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	edd7 7a03 	vldr	s15, [r7, #12]
 800bfec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bff0:	ee17 2a90 	vmov	r2, s15
 800bff4:	639a      	str	r2, [r3, #56]	; 0x38
}
 800bff6:	bf00      	nop
 800bff8:	3718      	adds	r7, #24
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd80      	pop	{r7, pc}
 800bffe:	bf00      	nop
 800c000:	200050bc 	.word	0x200050bc
 800c004:	43af0000 	.word	0x43af0000
 800c008:	42c80000 	.word	0x42c80000
 800c00c:	3f333333 	.word	0x3f333333
 800c010:	42c80000 	.word	0x42c80000
 800c014:	2000507c 	.word	0x2000507c
 800c018:	2000509c 	.word	0x2000509c
 800c01c:	200050ac 	.word	0x200050ac
 800c020:	200003e4 	.word	0x200003e4
 800c024:	2000042c 	.word	0x2000042c
 800c028:	42b40000 	.word	0x42b40000
 800c02c:	2000039c 	.word	0x2000039c

0800c030 <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 800c030:	b580      	push	{r7, lr}
 800c032:	b088      	sub	sp, #32
 800c034:	af04      	add	r7, sp, #16
 800c036:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 800c038:	2364      	movs	r3, #100	; 0x64
 800c03a:	9302      	str	r3, [sp, #8]
 800c03c:	2301      	movs	r3, #1
 800c03e:	9301      	str	r3, [sp, #4]
 800c040:	f107 030f 	add.w	r3, r7, #15
 800c044:	9300      	str	r3, [sp, #0]
 800c046:	2301      	movs	r3, #1
 800c048:	2275      	movs	r2, #117	; 0x75
 800c04a:	21d0      	movs	r1, #208	; 0xd0
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f7f6 ffc7 	bl	8002fe0 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 800c052:	7bfb      	ldrb	r3, [r7, #15]
 800c054:	2b68      	cmp	r3, #104	; 0x68
 800c056:	d13d      	bne.n	800c0d4 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 800c058:	2300      	movs	r3, #0
 800c05a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 800c05c:	2364      	movs	r3, #100	; 0x64
 800c05e:	9302      	str	r3, [sp, #8]
 800c060:	2301      	movs	r3, #1
 800c062:	9301      	str	r3, [sp, #4]
 800c064:	f107 030e 	add.w	r3, r7, #14
 800c068:	9300      	str	r3, [sp, #0]
 800c06a:	2301      	movs	r3, #1
 800c06c:	226b      	movs	r2, #107	; 0x6b
 800c06e:	21d0      	movs	r1, #208	; 0xd0
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f7f6 febb 	bl	8002dec <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 800c076:	2307      	movs	r3, #7
 800c078:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 800c07a:	2364      	movs	r3, #100	; 0x64
 800c07c:	9302      	str	r3, [sp, #8]
 800c07e:	2301      	movs	r3, #1
 800c080:	9301      	str	r3, [sp, #4]
 800c082:	f107 030e 	add.w	r3, r7, #14
 800c086:	9300      	str	r3, [sp, #0]
 800c088:	2301      	movs	r3, #1
 800c08a:	2219      	movs	r2, #25
 800c08c:	21d0      	movs	r1, #208	; 0xd0
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	f7f6 feac 	bl	8002dec <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 800c094:	2300      	movs	r3, #0
 800c096:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800c098:	2364      	movs	r3, #100	; 0x64
 800c09a:	9302      	str	r3, [sp, #8]
 800c09c:	2301      	movs	r3, #1
 800c09e:	9301      	str	r3, [sp, #4]
 800c0a0:	f107 030e 	add.w	r3, r7, #14
 800c0a4:	9300      	str	r3, [sp, #0]
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	221c      	movs	r2, #28
 800c0aa:	21d0      	movs	r1, #208	; 0xd0
 800c0ac:	6878      	ldr	r0, [r7, #4]
 800c0ae:	f7f6 fe9d 	bl	8002dec <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800c0b6:	2364      	movs	r3, #100	; 0x64
 800c0b8:	9302      	str	r3, [sp, #8]
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	9301      	str	r3, [sp, #4]
 800c0be:	f107 030e 	add.w	r3, r7, #14
 800c0c2:	9300      	str	r3, [sp, #0]
 800c0c4:	2301      	movs	r3, #1
 800c0c6:	221b      	movs	r2, #27
 800c0c8:	21d0      	movs	r1, #208	; 0xd0
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f7f6 fe8e 	bl	8002dec <HAL_I2C_Mem_Write>
        return 0;
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	e000      	b.n	800c0d6 <MPU6050_Init+0xa6>
    }
    return 1;
 800c0d4:	2301      	movs	r3, #1
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	3710      	adds	r7, #16
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}
	...

0800c0e0 <MPU6050_Read_All>:

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 800c0e0:	b5b0      	push	{r4, r5, r7, lr}
 800c0e2:	b094      	sub	sp, #80	; 0x50
 800c0e4:	af04      	add	r7, sp, #16
 800c0e6:	6078      	str	r0, [r7, #4]
 800c0e8:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 800c0ea:	2364      	movs	r3, #100	; 0x64
 800c0ec:	9302      	str	r3, [sp, #8]
 800c0ee:	230e      	movs	r3, #14
 800c0f0:	9301      	str	r3, [sp, #4]
 800c0f2:	f107 0308 	add.w	r3, r7, #8
 800c0f6:	9300      	str	r3, [sp, #0]
 800c0f8:	2301      	movs	r3, #1
 800c0fa:	223b      	movs	r2, #59	; 0x3b
 800c0fc:	21d0      	movs	r1, #208	; 0xd0
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f7f6 ff6e 	bl	8002fe0 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 800c104:	7a3b      	ldrb	r3, [r7, #8]
 800c106:	021b      	lsls	r3, r3, #8
 800c108:	b21a      	sxth	r2, r3
 800c10a:	7a7b      	ldrb	r3, [r7, #9]
 800c10c:	b21b      	sxth	r3, r3
 800c10e:	4313      	orrs	r3, r2
 800c110:	b21a      	sxth	r2, r3
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 800c116:	7abb      	ldrb	r3, [r7, #10]
 800c118:	021b      	lsls	r3, r3, #8
 800c11a:	b21a      	sxth	r2, r3
 800c11c:	7afb      	ldrb	r3, [r7, #11]
 800c11e:	b21b      	sxth	r3, r3
 800c120:	4313      	orrs	r3, r2
 800c122:	b21a      	sxth	r2, r3
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 800c128:	7b3b      	ldrb	r3, [r7, #12]
 800c12a:	021b      	lsls	r3, r3, #8
 800c12c:	b21a      	sxth	r2, r3
 800c12e:	7b7b      	ldrb	r3, [r7, #13]
 800c130:	b21b      	sxth	r3, r3
 800c132:	4313      	orrs	r3, r2
 800c134:	b21a      	sxth	r2, r3
 800c136:	683b      	ldr	r3, [r7, #0]
 800c138:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 800c13a:	7bbb      	ldrb	r3, [r7, #14]
 800c13c:	021b      	lsls	r3, r3, #8
 800c13e:	b21a      	sxth	r2, r3
 800c140:	7bfb      	ldrb	r3, [r7, #15]
 800c142:	b21b      	sxth	r3, r3
 800c144:	4313      	orrs	r3, r2
 800c146:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 800c148:	7c3b      	ldrb	r3, [r7, #16]
 800c14a:	021b      	lsls	r3, r3, #8
 800c14c:	b21a      	sxth	r2, r3
 800c14e:	7c7b      	ldrb	r3, [r7, #17]
 800c150:	b21b      	sxth	r3, r3
 800c152:	4313      	orrs	r3, r2
 800c154:	b21a      	sxth	r2, r3
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	829a      	strh	r2, [r3, #20]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 800c15a:	7cbb      	ldrb	r3, [r7, #18]
 800c15c:	021b      	lsls	r3, r3, #8
 800c15e:	b21a      	sxth	r2, r3
 800c160:	7cfb      	ldrb	r3, [r7, #19]
 800c162:	b21b      	sxth	r3, r3
 800c164:	4313      	orrs	r3, r2
 800c166:	b21a      	sxth	r2, r3
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	82da      	strh	r2, [r3, #22]
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 800c16c:	7d3b      	ldrb	r3, [r7, #20]
 800c16e:	021b      	lsls	r3, r3, #8
 800c170:	b21a      	sxth	r2, r3
 800c172:	7d7b      	ldrb	r3, [r7, #21]
 800c174:	b21b      	sxth	r3, r3
 800c176:	4313      	orrs	r3, r2
 800c178:	b21a      	sxth	r2, r3
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	831a      	strh	r2, [r3, #24]

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c184:	4618      	mov	r0, r3
 800c186:	f7f4 f9e5 	bl	8000554 <__aeabi_i2d>
 800c18a:	f04f 0200 	mov.w	r2, #0
 800c18e:	4ba6      	ldr	r3, [pc, #664]	; (800c428 <MPU6050_Read_All+0x348>)
 800c190:	f7f4 fb74 	bl	800087c <__aeabi_ddiv>
 800c194:	4602      	mov	r2, r0
 800c196:	460b      	mov	r3, r1
 800c198:	4610      	mov	r0, r2
 800c19a:	4619      	mov	r1, r3
 800c19c:	f7f4 fd14 	bl	8000bc8 <__aeabi_d2f>
 800c1a0:	4602      	mov	r2, r0
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	609a      	str	r2, [r3, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f7f4 f9d1 	bl	8000554 <__aeabi_i2d>
 800c1b2:	f04f 0200 	mov.w	r2, #0
 800c1b6:	4b9c      	ldr	r3, [pc, #624]	; (800c428 <MPU6050_Read_All+0x348>)
 800c1b8:	f7f4 fb60 	bl	800087c <__aeabi_ddiv>
 800c1bc:	4602      	mov	r2, r0
 800c1be:	460b      	mov	r3, r1
 800c1c0:	4610      	mov	r0, r2
 800c1c2:	4619      	mov	r1, r3
 800c1c4:	f7f4 fd00 	bl	8000bc8 <__aeabi_d2f>
 800c1c8:	4602      	mov	r2, r0
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	60da      	str	r2, [r3, #12]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f7f4 f9bd 	bl	8000554 <__aeabi_i2d>
 800c1da:	a38d      	add	r3, pc, #564	; (adr r3, 800c410 <MPU6050_Read_All+0x330>)
 800c1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1e0:	f7f4 fb4c 	bl	800087c <__aeabi_ddiv>
 800c1e4:	4602      	mov	r2, r0
 800c1e6:	460b      	mov	r3, r1
 800c1e8:	4610      	mov	r0, r2
 800c1ea:	4619      	mov	r1, r3
 800c1ec:	f7f4 fcec 	bl	8000bc8 <__aeabi_d2f>
 800c1f0:	4602      	mov	r2, r0
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	611a      	str	r2, [r3, #16]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 800c1f6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800c1fa:	ee07 3a90 	vmov	s15, r3
 800c1fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c202:	eddf 6a8a 	vldr	s13, [pc, #552]	; 800c42c <MPU6050_Read_All+0x34c>
 800c206:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c20a:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800c430 <MPU6050_Read_All+0x350>
 800c20e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c212:	683b      	ldr	r3, [r7, #0]
 800c214:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800c21e:	4618      	mov	r0, r3
 800c220:	f7f4 f998 	bl	8000554 <__aeabi_i2d>
 800c224:	a37c      	add	r3, pc, #496	; (adr r3, 800c418 <MPU6050_Read_All+0x338>)
 800c226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c22a:	f7f4 fb27 	bl	800087c <__aeabi_ddiv>
 800c22e:	4602      	mov	r2, r0
 800c230:	460b      	mov	r3, r1
 800c232:	4610      	mov	r0, r2
 800c234:	4619      	mov	r1, r3
 800c236:	f7f4 fcc7 	bl	8000bc8 <__aeabi_d2f>
 800c23a:	4602      	mov	r2, r0
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	61da      	str	r2, [r3, #28]
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800c246:	4618      	mov	r0, r3
 800c248:	f7f4 f984 	bl	8000554 <__aeabi_i2d>
 800c24c:	a372      	add	r3, pc, #456	; (adr r3, 800c418 <MPU6050_Read_All+0x338>)
 800c24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c252:	f7f4 fb13 	bl	800087c <__aeabi_ddiv>
 800c256:	4602      	mov	r2, r0
 800c258:	460b      	mov	r3, r1
 800c25a:	4610      	mov	r0, r2
 800c25c:	4619      	mov	r1, r3
 800c25e:	f7f4 fcb3 	bl	8000bc8 <__aeabi_d2f>
 800c262:	4602      	mov	r2, r0
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	621a      	str	r2, [r3, #32]
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800c26e:	4618      	mov	r0, r3
 800c270:	f7f4 f970 	bl	8000554 <__aeabi_i2d>
 800c274:	a368      	add	r3, pc, #416	; (adr r3, 800c418 <MPU6050_Read_All+0x338>)
 800c276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c27a:	f7f4 faff 	bl	800087c <__aeabi_ddiv>
 800c27e:	4602      	mov	r2, r0
 800c280:	460b      	mov	r3, r1
 800c282:	4610      	mov	r0, r2
 800c284:	4619      	mov	r1, r3
 800c286:	f7f4 fc9f 	bl	8000bc8 <__aeabi_d2f>
 800c28a:	4602      	mov	r2, r0
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	625a      	str	r2, [r3, #36]	; 0x24

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 800c290:	f7f6 f8e6 	bl	8002460 <HAL_GetTick>
 800c294:	4602      	mov	r2, r0
 800c296:	4b67      	ldr	r3, [pc, #412]	; (800c434 <MPU6050_Read_All+0x354>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	1ad3      	subs	r3, r2, r3
 800c29c:	4618      	mov	r0, r3
 800c29e:	f7f4 f949 	bl	8000534 <__aeabi_ui2d>
 800c2a2:	f04f 0200 	mov.w	r2, #0
 800c2a6:	4b64      	ldr	r3, [pc, #400]	; (800c438 <MPU6050_Read_All+0x358>)
 800c2a8:	f7f4 fae8 	bl	800087c <__aeabi_ddiv>
 800c2ac:	4602      	mov	r2, r0
 800c2ae:	460b      	mov	r3, r1
 800c2b0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 800c2b4:	f7f6 f8d4 	bl	8002460 <HAL_GetTick>
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	4a5e      	ldr	r2, [pc, #376]	; (800c434 <MPU6050_Read_All+0x354>)
 800c2bc:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c2c4:	461a      	mov	r2, r3
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c2cc:	fb03 f202 	mul.w	r2, r3, r2
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c2d6:	4619      	mov	r1, r3
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c2de:	fb01 f303 	mul.w	r3, r1, r3
 800c2e2:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f7f4 f935 	bl	8000554 <__aeabi_i2d>
 800c2ea:	4602      	mov	r2, r0
 800c2ec:	460b      	mov	r3, r1
 800c2ee:	ec43 2b10 	vmov	d0, r2, r3
 800c2f2:	f002 fb2b 	bl	800e94c <sqrt>
 800c2f6:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0) {
 800c2fa:	f04f 0200 	mov.w	r2, #0
 800c2fe:	f04f 0300 	mov.w	r3, #0
 800c302:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800c306:	f7f4 fbf7 	bl	8000af8 <__aeabi_dcmpeq>
 800c30a:	4603      	mov	r3, r0
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d11f      	bne.n	800c350 <MPU6050_Read_All+0x270>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 800c310:	683b      	ldr	r3, [r7, #0]
 800c312:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c316:	4618      	mov	r0, r3
 800c318:	f7f4 f91c 	bl	8000554 <__aeabi_i2d>
 800c31c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c320:	f7f4 faac 	bl	800087c <__aeabi_ddiv>
 800c324:	4602      	mov	r2, r0
 800c326:	460b      	mov	r3, r1
 800c328:	ec43 2b17 	vmov	d7, r2, r3
 800c32c:	eeb0 0a47 	vmov.f32	s0, s14
 800c330:	eef0 0a67 	vmov.f32	s1, s15
 800c334:	f002 fb38 	bl	800e9a8 <atan>
 800c338:	ec51 0b10 	vmov	r0, r1, d0
 800c33c:	a338      	add	r3, pc, #224	; (adr r3, 800c420 <MPU6050_Read_All+0x340>)
 800c33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c342:	f7f4 f971 	bl	8000628 <__aeabi_dmul>
 800c346:	4602      	mov	r2, r0
 800c348:	460b      	mov	r3, r1
 800c34a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 800c34e:	e005      	b.n	800c35c <MPU6050_Read_All+0x27c>
    } else {
        roll = 0.0;
 800c350:	f04f 0200 	mov.w	r2, #0
 800c354:	f04f 0300 	mov.w	r3, #0
 800c358:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c362:	425b      	negs	r3, r3
 800c364:	4618      	mov	r0, r3
 800c366:	f7f4 f8f5 	bl	8000554 <__aeabi_i2d>
 800c36a:	4604      	mov	r4, r0
 800c36c:	460d      	mov	r5, r1
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c374:	4618      	mov	r0, r3
 800c376:	f7f4 f8ed 	bl	8000554 <__aeabi_i2d>
 800c37a:	4602      	mov	r2, r0
 800c37c:	460b      	mov	r3, r1
 800c37e:	ec43 2b11 	vmov	d1, r2, r3
 800c382:	ec45 4b10 	vmov	d0, r4, r5
 800c386:	f002 fa6e 	bl	800e866 <atan2>
 800c38a:	ec51 0b10 	vmov	r0, r1, d0
 800c38e:	a324      	add	r3, pc, #144	; (adr r3, 800c420 <MPU6050_Read_All+0x340>)
 800c390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c394:	f7f4 f948 	bl	8000628 <__aeabi_dmul>
 800c398:	4602      	mov	r2, r0
 800c39a:	460b      	mov	r3, r1
 800c39c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 800c3a0:	f04f 0200 	mov.w	r2, #0
 800c3a4:	4b25      	ldr	r3, [pc, #148]	; (800c43c <MPU6050_Read_All+0x35c>)
 800c3a6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c3aa:	f7f4 fbaf 	bl	8000b0c <__aeabi_dcmplt>
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d009      	beq.n	800c3c8 <MPU6050_Read_All+0x2e8>
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800c3ba:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800c440 <MPU6050_Read_All+0x360>
 800c3be:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c3c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3c6:	dc13      	bgt.n	800c3f0 <MPU6050_Read_All+0x310>
 800c3c8:	f04f 0200 	mov.w	r2, #0
 800c3cc:	4b1d      	ldr	r3, [pc, #116]	; (800c444 <MPU6050_Read_All+0x364>)
 800c3ce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c3d2:	f7f4 fbb9 	bl	8000b48 <__aeabi_dcmpgt>
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d039      	beq.n	800c450 <MPU6050_Read_All+0x370>
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800c3e2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800c448 <MPU6050_Read_All+0x368>
 800c3e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c3ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3ee:	d52f      	bpl.n	800c450 <MPU6050_Read_All+0x370>
        KalmanY.angle = pitch;
 800c3f0:	4916      	ldr	r1, [pc, #88]	; (800c44c <MPU6050_Read_All+0x36c>)
 800c3f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c3f6:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 800c3fa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c3fe:	f7f4 fbe3 	bl	8000bc8 <__aeabi_d2f>
 800c402:	4602      	mov	r2, r0
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	631a      	str	r2, [r3, #48]	; 0x30
 800c408:	e03b      	b.n	800c482 <MPU6050_Read_All+0x3a2>
 800c40a:	bf00      	nop
 800c40c:	f3af 8000 	nop.w
 800c410:	00000000 	.word	0x00000000
 800c414:	40cc2900 	.word	0x40cc2900
 800c418:	00000000 	.word	0x00000000
 800c41c:	40606000 	.word	0x40606000
 800c420:	1a63c1f8 	.word	0x1a63c1f8
 800c424:	404ca5dc 	.word	0x404ca5dc
 800c428:	40d00000 	.word	0x40d00000
 800c42c:	43aa0000 	.word	0x43aa0000
 800c430:	42121eb8 	.word	0x42121eb8
 800c434:	200050c0 	.word	0x200050c0
 800c438:	408f4000 	.word	0x408f4000
 800c43c:	c0568000 	.word	0xc0568000
 800c440:	42b40000 	.word	0x42b40000
 800c444:	40568000 	.word	0x40568000
 800c448:	c2b40000 	.word	0xc2b40000
 800c44c:	20000090 	.word	0x20000090
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	6a1b      	ldr	r3, [r3, #32]
 800c454:	4618      	mov	r0, r3
 800c456:	f7f4 f88f 	bl	8000578 <__aeabi_f2d>
 800c45a:	4602      	mov	r2, r0
 800c45c:	460b      	mov	r3, r1
 800c45e:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800c462:	ec43 2b11 	vmov	d1, r2, r3
 800c466:	ed97 0b06 	vldr	d0, [r7, #24]
 800c46a:	481e      	ldr	r0, [pc, #120]	; (800c4e4 <MPU6050_Read_All+0x404>)
 800c46c:	f000 f840 	bl	800c4f0 <Kalman_getAngle>
 800c470:	ec53 2b10 	vmov	r2, r3, d0
 800c474:	4610      	mov	r0, r2
 800c476:	4619      	mov	r1, r3
 800c478:	f7f4 fba6 	bl	8000bc8 <__aeabi_d2f>
 800c47c:	4602      	mov	r2, r0
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	631a      	str	r2, [r3, #48]	; 0x30
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800c488:	eef0 7ae7 	vabs.f32	s15, s15
 800c48c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800c4e8 <MPU6050_Read_All+0x408>
 800c490:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c498:	dd07      	ble.n	800c4aa <MPU6050_Read_All+0x3ca>
        DataStruct->Gx = -DataStruct->Gx;
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	edd3 7a07 	vldr	s15, [r3, #28]
 800c4a0:	eef1 7a67 	vneg.f32	s15, s15
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	edc3 7a07 	vstr	s15, [r3, #28]
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	6a1b      	ldr	r3, [r3, #32]
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	f7f4 f862 	bl	8000578 <__aeabi_f2d>
 800c4b4:	4602      	mov	r2, r0
 800c4b6:	460b      	mov	r3, r1
 800c4b8:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800c4bc:	ec43 2b11 	vmov	d1, r2, r3
 800c4c0:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800c4c4:	4809      	ldr	r0, [pc, #36]	; (800c4ec <MPU6050_Read_All+0x40c>)
 800c4c6:	f000 f813 	bl	800c4f0 <Kalman_getAngle>
 800c4ca:	ec53 2b10 	vmov	r2, r3, d0
 800c4ce:	4610      	mov	r0, r2
 800c4d0:	4619      	mov	r1, r3
 800c4d2:	f7f4 fb79 	bl	8000bc8 <__aeabi_d2f>
 800c4d6:	4602      	mov	r2, r0
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	62da      	str	r2, [r3, #44]	; 0x2c

}
 800c4dc:	bf00      	nop
 800c4de:	3740      	adds	r7, #64	; 0x40
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	bdb0      	pop	{r4, r5, r7, pc}
 800c4e4:	20000090 	.word	0x20000090
 800c4e8:	42b40000 	.word	0x42b40000
 800c4ec:	20000048 	.word	0x20000048

0800c4f0 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 800c4f0:	b5b0      	push	{r4, r5, r7, lr}
 800c4f2:	b096      	sub	sp, #88	; 0x58
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	61f8      	str	r0, [r7, #28]
 800c4f8:	ed87 0b04 	vstr	d0, [r7, #16]
 800c4fc:	ed87 1b02 	vstr	d1, [r7, #8]
 800c500:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 800c504:	69fb      	ldr	r3, [r7, #28]
 800c506:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c50a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c50e:	f7f3 fed3 	bl	80002b8 <__aeabi_dsub>
 800c512:	4602      	mov	r2, r0
 800c514:	460b      	mov	r3, r1
 800c516:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 800c51a:	69fb      	ldr	r3, [r7, #28]
 800c51c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800c520:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c524:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c528:	f7f4 f87e 	bl	8000628 <__aeabi_dmul>
 800c52c:	4602      	mov	r2, r0
 800c52e:	460b      	mov	r3, r1
 800c530:	4620      	mov	r0, r4
 800c532:	4629      	mov	r1, r5
 800c534:	f7f3 fec2 	bl	80002bc <__adddf3>
 800c538:	4602      	mov	r2, r0
 800c53a:	460b      	mov	r3, r1
 800c53c:	69f9      	ldr	r1, [r7, #28]
 800c53e:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800c542:	69fb      	ldr	r3, [r7, #28]
 800c544:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 800c548:	69fb      	ldr	r3, [r7, #28]
 800c54a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800c54e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c552:	f7f4 f869 	bl	8000628 <__aeabi_dmul>
 800c556:	4602      	mov	r2, r0
 800c558:	460b      	mov	r3, r1
 800c55a:	4610      	mov	r0, r2
 800c55c:	4619      	mov	r1, r3
 800c55e:	69fb      	ldr	r3, [r7, #28]
 800c560:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800c564:	f7f3 fea8 	bl	80002b8 <__aeabi_dsub>
 800c568:	4602      	mov	r2, r0
 800c56a:	460b      	mov	r3, r1
 800c56c:	4610      	mov	r0, r2
 800c56e:	4619      	mov	r1, r3
 800c570:	69fb      	ldr	r3, [r7, #28]
 800c572:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800c576:	f7f3 fe9f 	bl	80002b8 <__aeabi_dsub>
 800c57a:	4602      	mov	r2, r0
 800c57c:	460b      	mov	r3, r1
 800c57e:	4610      	mov	r0, r2
 800c580:	4619      	mov	r1, r3
 800c582:	69fb      	ldr	r3, [r7, #28]
 800c584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c588:	f7f3 fe98 	bl	80002bc <__adddf3>
 800c58c:	4602      	mov	r2, r0
 800c58e:	460b      	mov	r3, r1
 800c590:	4610      	mov	r0, r2
 800c592:	4619      	mov	r1, r3
 800c594:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c598:	f7f4 f846 	bl	8000628 <__aeabi_dmul>
 800c59c:	4602      	mov	r2, r0
 800c59e:	460b      	mov	r3, r1
 800c5a0:	4620      	mov	r0, r4
 800c5a2:	4629      	mov	r1, r5
 800c5a4:	f7f3 fe8a 	bl	80002bc <__adddf3>
 800c5a8:	4602      	mov	r2, r0
 800c5aa:	460b      	mov	r3, r1
 800c5ac:	69f9      	ldr	r1, [r7, #28]
 800c5ae:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 800c5b2:	69fb      	ldr	r3, [r7, #28]
 800c5b4:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 800c5b8:	69fb      	ldr	r3, [r7, #28]
 800c5ba:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800c5be:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5c2:	f7f4 f831 	bl	8000628 <__aeabi_dmul>
 800c5c6:	4602      	mov	r2, r0
 800c5c8:	460b      	mov	r3, r1
 800c5ca:	4620      	mov	r0, r4
 800c5cc:	4629      	mov	r1, r5
 800c5ce:	f7f3 fe73 	bl	80002b8 <__aeabi_dsub>
 800c5d2:	4602      	mov	r2, r0
 800c5d4:	460b      	mov	r3, r1
 800c5d6:	69f9      	ldr	r1, [r7, #28]
 800c5d8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 800c5dc:	69fb      	ldr	r3, [r7, #28]
 800c5de:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800c5e2:	69fb      	ldr	r3, [r7, #28]
 800c5e4:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800c5e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5ec:	f7f4 f81c 	bl	8000628 <__aeabi_dmul>
 800c5f0:	4602      	mov	r2, r0
 800c5f2:	460b      	mov	r3, r1
 800c5f4:	4620      	mov	r0, r4
 800c5f6:	4629      	mov	r1, r5
 800c5f8:	f7f3 fe5e 	bl	80002b8 <__aeabi_dsub>
 800c5fc:	4602      	mov	r2, r0
 800c5fe:	460b      	mov	r3, r1
 800c600:	69f9      	ldr	r1, [r7, #28]
 800c602:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800c606:	69fb      	ldr	r3, [r7, #28]
 800c608:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 800c60c:	69fb      	ldr	r3, [r7, #28]
 800c60e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800c612:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c616:	f7f4 f807 	bl	8000628 <__aeabi_dmul>
 800c61a:	4602      	mov	r2, r0
 800c61c:	460b      	mov	r3, r1
 800c61e:	4620      	mov	r0, r4
 800c620:	4629      	mov	r1, r5
 800c622:	f7f3 fe4b 	bl	80002bc <__adddf3>
 800c626:	4602      	mov	r2, r0
 800c628:	460b      	mov	r3, r1
 800c62a:	69f9      	ldr	r1, [r7, #28]
 800c62c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 800c630:	69fb      	ldr	r3, [r7, #28]
 800c632:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800c636:	69fb      	ldr	r3, [r7, #28]
 800c638:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c63c:	f7f3 fe3e 	bl	80002bc <__adddf3>
 800c640:	4602      	mov	r2, r0
 800c642:	460b      	mov	r3, r1
 800c644:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 800c648:	69fb      	ldr	r3, [r7, #28]
 800c64a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800c64e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c652:	f7f4 f913 	bl	800087c <__aeabi_ddiv>
 800c656:	4602      	mov	r2, r0
 800c658:	460b      	mov	r3, r1
 800c65a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 800c65e:	69fb      	ldr	r3, [r7, #28]
 800c660:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800c664:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c668:	f7f4 f908 	bl	800087c <__aeabi_ddiv>
 800c66c:	4602      	mov	r2, r0
 800c66e:	460b      	mov	r3, r1
 800c670:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 800c674:	69fb      	ldr	r3, [r7, #28]
 800c676:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800c67a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c67e:	f7f3 fe1b 	bl	80002b8 <__aeabi_dsub>
 800c682:	4602      	mov	r2, r0
 800c684:	460b      	mov	r3, r1
 800c686:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 800c68a:	69fb      	ldr	r3, [r7, #28]
 800c68c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800c690:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800c694:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c698:	f7f3 ffc6 	bl	8000628 <__aeabi_dmul>
 800c69c:	4602      	mov	r2, r0
 800c69e:	460b      	mov	r3, r1
 800c6a0:	4620      	mov	r0, r4
 800c6a2:	4629      	mov	r1, r5
 800c6a4:	f7f3 fe0a 	bl	80002bc <__adddf3>
 800c6a8:	4602      	mov	r2, r0
 800c6aa:	460b      	mov	r3, r1
 800c6ac:	69f9      	ldr	r1, [r7, #28]
 800c6ae:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 800c6b2:	69fb      	ldr	r3, [r7, #28]
 800c6b4:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800c6b8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800c6bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c6c0:	f7f3 ffb2 	bl	8000628 <__aeabi_dmul>
 800c6c4:	4602      	mov	r2, r0
 800c6c6:	460b      	mov	r3, r1
 800c6c8:	4620      	mov	r0, r4
 800c6ca:	4629      	mov	r1, r5
 800c6cc:	f7f3 fdf6 	bl	80002bc <__adddf3>
 800c6d0:	4602      	mov	r2, r0
 800c6d2:	460b      	mov	r3, r1
 800c6d4:	69f9      	ldr	r1, [r7, #28]
 800c6d6:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 800c6da:	69fb      	ldr	r3, [r7, #28]
 800c6dc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800c6e0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 800c6e4:	69fb      	ldr	r3, [r7, #28]
 800c6e6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800c6ea:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 800c6ee:	69fb      	ldr	r3, [r7, #28]
 800c6f0:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 800c6f4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800c6f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c6fc:	f7f3 ff94 	bl	8000628 <__aeabi_dmul>
 800c700:	4602      	mov	r2, r0
 800c702:	460b      	mov	r3, r1
 800c704:	4620      	mov	r0, r4
 800c706:	4629      	mov	r1, r5
 800c708:	f7f3 fdd6 	bl	80002b8 <__aeabi_dsub>
 800c70c:	4602      	mov	r2, r0
 800c70e:	460b      	mov	r3, r1
 800c710:	69f9      	ldr	r1, [r7, #28]
 800c712:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 800c716:	69fb      	ldr	r3, [r7, #28]
 800c718:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 800c71c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800c720:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800c724:	f7f3 ff80 	bl	8000628 <__aeabi_dmul>
 800c728:	4602      	mov	r2, r0
 800c72a:	460b      	mov	r3, r1
 800c72c:	4620      	mov	r0, r4
 800c72e:	4629      	mov	r1, r5
 800c730:	f7f3 fdc2 	bl	80002b8 <__aeabi_dsub>
 800c734:	4602      	mov	r2, r0
 800c736:	460b      	mov	r3, r1
 800c738:	69f9      	ldr	r1, [r7, #28]
 800c73a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 800c73e:	69fb      	ldr	r3, [r7, #28]
 800c740:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800c744:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800c748:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c74c:	f7f3 ff6c 	bl	8000628 <__aeabi_dmul>
 800c750:	4602      	mov	r2, r0
 800c752:	460b      	mov	r3, r1
 800c754:	4620      	mov	r0, r4
 800c756:	4629      	mov	r1, r5
 800c758:	f7f3 fdae 	bl	80002b8 <__aeabi_dsub>
 800c75c:	4602      	mov	r2, r0
 800c75e:	460b      	mov	r3, r1
 800c760:	69f9      	ldr	r1, [r7, #28]
 800c762:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 800c766:	69fb      	ldr	r3, [r7, #28]
 800c768:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 800c76c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800c770:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800c774:	f7f3 ff58 	bl	8000628 <__aeabi_dmul>
 800c778:	4602      	mov	r2, r0
 800c77a:	460b      	mov	r3, r1
 800c77c:	4620      	mov	r0, r4
 800c77e:	4629      	mov	r1, r5
 800c780:	f7f3 fd9a 	bl	80002b8 <__aeabi_dsub>
 800c784:	4602      	mov	r2, r0
 800c786:	460b      	mov	r3, r1
 800c788:	69f9      	ldr	r1, [r7, #28]
 800c78a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 800c78e:	69fb      	ldr	r3, [r7, #28]
 800c790:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800c794:	ec43 2b17 	vmov	d7, r2, r3
};
 800c798:	eeb0 0a47 	vmov.f32	s0, s14
 800c79c:	eef0 0a67 	vmov.f32	s1, s15
 800c7a0:	3758      	adds	r7, #88	; 0x58
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	bdb0      	pop	{r4, r5, r7, pc}

0800c7a6 <PIDController_Init>:
#include "PID.h"

void PIDController_Init(PIDController *pid) {
 800c7a6:	b480      	push	{r7}
 800c7a8:	b083      	sub	sp, #12
 800c7aa:	af00      	add	r7, sp, #0
 800c7ac:	6078      	str	r0, [r7, #4]

	/* Clear controller variables */
	pid->integrator = 0.0f;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	f04f 0200 	mov.w	r2, #0
 800c7b4:	625a      	str	r2, [r3, #36]	; 0x24
	pid->prevError  = 0.0f;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	f04f 0200 	mov.w	r2, #0
 800c7bc:	629a      	str	r2, [r3, #40]	; 0x28

	pid->differentiator  = 0.0f;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	f04f 0200 	mov.w	r2, #0
 800c7c4:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->prevMeasurement = 0.0f;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	f04f 0200 	mov.w	r2, #0
 800c7cc:	631a      	str	r2, [r3, #48]	; 0x30

	pid->out = 0.0f;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	f04f 0200 	mov.w	r2, #0
 800c7d4:	635a      	str	r2, [r3, #52]	; 0x34

}
 800c7d6:	bf00      	nop
 800c7d8:	370c      	adds	r7, #12
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e0:	4770      	bx	lr

0800c7e2 <kalman1_filter>:
 * @outputs 
 * @retval  
 *   Estimated result
 */
float kalman1_filter(kalman_state *state, float z_measure)
{
 800c7e2:	b480      	push	{r7}
 800c7e4:	b083      	sub	sp, #12
 800c7e6:	af00      	add	r7, sp, #0
 800c7e8:	6078      	str	r0, [r7, #4]
 800c7ea:	ed87 0a00 	vstr	s0, [r7]
    /* Predict */
    state->x = state->A * state->x;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	ed93 7a01 	vldr	s14, [r3, #4]
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	edd3 7a00 	vldr	s15, [r3]
 800c7fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	edc3 7a00 	vstr	s15, [r3]
    state->p = state->A * state->A * state->p + state->q;  /* p(n|n-1)=A^2*p(n-1|n-1)+q */
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	ed93 7a01 	vldr	s14, [r3, #4]
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	edd3 7a01 	vldr	s15, [r3, #4]
 800c810:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	edd3 7a05 	vldr	s15, [r3, #20]
 800c81a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	edd3 7a03 	vldr	s15, [r3, #12]
 800c824:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	edc3 7a05 	vstr	s15, [r3, #20]

    /* Measurement */
    state->gain = state->p * state->H / (state->p * state->H * state->H + state->r);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	ed93 7a05 	vldr	s14, [r3, #20]
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	edd3 7a02 	vldr	s15, [r3, #8]
 800c83a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	ed93 7a05 	vldr	s14, [r3, #20]
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	edd3 7a02 	vldr	s15, [r3, #8]
 800c84a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	edd3 7a02 	vldr	s15, [r3, #8]
 800c854:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	edd3 7a04 	vldr	s15, [r3, #16]
 800c85e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c862:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	edc3 7a06 	vstr	s15, [r3, #24]
    state->x = state->x + state->gain * (z_measure - state->H * state->x);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	ed93 7a00 	vldr	s14, [r3]
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	edd3 6a06 	vldr	s13, [r3, #24]
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	ed93 6a02 	vldr	s12, [r3, #8]
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	edd3 7a00 	vldr	s15, [r3]
 800c884:	ee66 7a27 	vmul.f32	s15, s12, s15
 800c888:	ed97 6a00 	vldr	s12, [r7]
 800c88c:	ee76 7a67 	vsub.f32	s15, s12, s15
 800c890:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c894:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	edc3 7a00 	vstr	s15, [r3]
    state->p = (1 - state->gain * state->H) * state->p;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	ed93 7a06 	vldr	s14, [r3, #24]
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	edd3 7a02 	vldr	s15, [r3, #8]
 800c8aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c8b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	edd3 7a05 	vldr	s15, [r3, #20]
 800c8bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	edc3 7a05 	vstr	s15, [r3, #20]

    return state->x;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	ee07 3a90 	vmov	s15, r3
}
 800c8ce:	eeb0 0a67 	vmov.f32	s0, s15
 800c8d2:	370c      	adds	r7, #12
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8da:	4770      	bx	lr

0800c8dc <UGV_isDataReady>:
 * @brief check the RDYB bit in polling mode
 * @param[in] qmc global variable
 * @return if data is ready return 1 else 0
 */
uint8_t UGV_isDataReady(Qmc * qmc)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b086      	sub	sp, #24
 800c8e0:	af04      	add	r7, sp, #16
 800c8e2:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(i2c, QMC_SLAVE_ADDR, QMC_STATUS_REG1,
 800c8e4:	4b0b      	ldr	r3, [pc, #44]	; (800c914 <UGV_isDataReady+0x38>)
 800c8e6:	6818      	ldr	r0, [r3, #0]
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	3306      	adds	r3, #6
 800c8ec:	2201      	movs	r2, #1
 800c8ee:	9202      	str	r2, [sp, #8]
 800c8f0:	2201      	movs	r2, #1
 800c8f2:	9201      	str	r2, [sp, #4]
 800c8f4:	9300      	str	r3, [sp, #0]
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	2206      	movs	r2, #6
 800c8fa:	211a      	movs	r1, #26
 800c8fc:	f7f6 fb70 	bl	8002fe0 <HAL_I2C_Mem_Read>
					 1, &qmc->qmcReg.StatusReg.reg, 1, 1);

	return qmc->qmcReg.StatusReg.DRDY;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	799b      	ldrb	r3, [r3, #6]
 800c904:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c908:	b2db      	uxtb	r3, r3
}
 800c90a:	4618      	mov	r0, r3
 800c90c:	3708      	adds	r7, #8
 800c90e:	46bd      	mov	sp, r7
 800c910:	bd80      	pop	{r7, pc}
 800c912:	bf00      	nop
 800c914:	200050c4 	.word	0x200050c4

0800c918 <UGV_getPositionAdc>:
 * @brief read the register adc values and assign
 * @param[in] bmg global variable
 * @return HAL_I2c read return status
 */
HAL_StatusTypeDef UGV_getPositionAdc(Qmc * qmc)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b08a      	sub	sp, #40	; 0x28
 800c91c:	af04      	add	r7, sp, #16
 800c91e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;

	if (HAL_I2C_IsDeviceReady(i2c, QMC_SLAVE_ADDR, 1, 1) != HAL_OK)
 800c920:	4b70      	ldr	r3, [pc, #448]	; (800cae4 <UGV_getPositionAdc+0x1cc>)
 800c922:	6818      	ldr	r0, [r3, #0]
 800c924:	2301      	movs	r3, #1
 800c926:	2201      	movs	r2, #1
 800c928:	211a      	movs	r1, #26
 800c92a:	f7f6 fd8b 	bl	8003444 <HAL_I2C_IsDeviceReady>
 800c92e:	4603      	mov	r3, r0
 800c930:	2b00      	cmp	r3, #0
 800c932:	d001      	beq.n	800c938 <UGV_getPositionAdc+0x20>
		return HAL_BUSY;
 800c934:	2302      	movs	r3, #2
 800c936:	e0d0      	b.n	800cada <UGV_getPositionAdc+0x1c2>

	//read the 0H-6H register in one packet
	if(qmc->qmcConfig.ROL_PNT == ROL_PNT_ENABLE)
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	7c9b      	ldrb	r3, [r3, #18]
 800c93c:	2b01      	cmp	r3, #1
 800c93e:	d113      	bne.n	800c968 <UGV_getPositionAdc+0x50>
	{
		status = HAL_I2C_Mem_Read(i2c, QMC_SLAVE_ADDR, QMC_XOUT_LSB_ADDR,
 800c940:	4b68      	ldr	r3, [pc, #416]	; (800cae4 <UGV_getPositionAdc+0x1cc>)
 800c942:	6818      	ldr	r0, [r3, #0]
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2201      	movs	r2, #1
 800c948:	9202      	str	r2, [sp, #8]
 800c94a:	2207      	movs	r2, #7
 800c94c:	9201      	str	r2, [sp, #4]
 800c94e:	9300      	str	r3, [sp, #0]
 800c950:	2301      	movs	r3, #1
 800c952:	2200      	movs	r2, #0
 800c954:	211a      	movs	r1, #26
 800c956:	f7f6 fb43 	bl	8002fe0 <HAL_I2C_Mem_Read>
 800c95a:	4603      	mov	r3, r0
 800c95c:	73fb      	strb	r3, [r7, #15]
								  1, &qmc->qmcReg.xLsb, QMC_ROL_READ_DATA_LEN, 1);
		if(status != HAL_OK) return status;
 800c95e:	7bfb      	ldrb	r3, [r7, #15]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d024      	beq.n	800c9ae <UGV_getPositionAdc+0x96>
 800c964:	7bfb      	ldrb	r3, [r7, #15]
 800c966:	e0b8      	b.n	800cada <UGV_getPositionAdc+0x1c2>
	}
	else
	{
		uint8_t * offsetPtr = &qmc->qmcReg.xLsb;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	613b      	str	r3, [r7, #16]
		for(int i = 0; i < 6; i++)
 800c96c:	2300      	movs	r3, #0
 800c96e:	617b      	str	r3, [r7, #20]
 800c970:	e01a      	b.n	800c9a8 <UGV_getPositionAdc+0x90>
		{
			status = HAL_I2C_Mem_Read(i2c, QMC_SLAVE_ADDR, i,
 800c972:	4b5c      	ldr	r3, [pc, #368]	; (800cae4 <UGV_getPositionAdc+0x1cc>)
 800c974:	6818      	ldr	r0, [r3, #0]
 800c976:	697b      	ldr	r3, [r7, #20]
 800c978:	b299      	uxth	r1, r3
 800c97a:	697b      	ldr	r3, [r7, #20]
 800c97c:	693a      	ldr	r2, [r7, #16]
 800c97e:	4413      	add	r3, r2
 800c980:	2201      	movs	r2, #1
 800c982:	9202      	str	r2, [sp, #8]
 800c984:	2201      	movs	r2, #1
 800c986:	9201      	str	r2, [sp, #4]
 800c988:	9300      	str	r3, [sp, #0]
 800c98a:	2301      	movs	r3, #1
 800c98c:	460a      	mov	r2, r1
 800c98e:	211a      	movs	r1, #26
 800c990:	f7f6 fb26 	bl	8002fe0 <HAL_I2C_Mem_Read>
 800c994:	4603      	mov	r3, r0
 800c996:	73fb      	strb	r3, [r7, #15]
									  1, &offsetPtr[i], 1, 1);
			if(status != HAL_OK) return status;
 800c998:	7bfb      	ldrb	r3, [r7, #15]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d001      	beq.n	800c9a2 <UGV_getPositionAdc+0x8a>
 800c99e:	7bfb      	ldrb	r3, [r7, #15]
 800c9a0:	e09b      	b.n	800cada <UGV_getPositionAdc+0x1c2>
		for(int i = 0; i < 6; i++)
 800c9a2:	697b      	ldr	r3, [r7, #20]
 800c9a4:	3301      	adds	r3, #1
 800c9a6:	617b      	str	r3, [r7, #20]
 800c9a8:	697b      	ldr	r3, [r7, #20]
 800c9aa:	2b05      	cmp	r3, #5
 800c9ac:	dde1      	ble.n	800c972 <UGV_getPositionAdc+0x5a>
		}
	}

	//read temperature registers
	status = HAL_I2C_Mem_Read(i2c, QMC_SLAVE_ADDR, QMC_TOUT_LSB_ADDR, 1, &qmc->qmcReg.tempLsb, 1, 1);
 800c9ae:	4b4d      	ldr	r3, [pc, #308]	; (800cae4 <UGV_getPositionAdc+0x1cc>)
 800c9b0:	6818      	ldr	r0, [r3, #0]
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	3307      	adds	r3, #7
 800c9b6:	2201      	movs	r2, #1
 800c9b8:	9202      	str	r2, [sp, #8]
 800c9ba:	2201      	movs	r2, #1
 800c9bc:	9201      	str	r2, [sp, #4]
 800c9be:	9300      	str	r3, [sp, #0]
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	2207      	movs	r2, #7
 800c9c4:	211a      	movs	r1, #26
 800c9c6:	f7f6 fb0b 	bl	8002fe0 <HAL_I2C_Mem_Read>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 800c9ce:	7bfb      	ldrb	r3, [r7, #15]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d001      	beq.n	800c9d8 <UGV_getPositionAdc+0xc0>
 800c9d4:	7bfb      	ldrb	r3, [r7, #15]
 800c9d6:	e080      	b.n	800cada <UGV_getPositionAdc+0x1c2>

	status = HAL_I2C_Mem_Read(i2c, QMC_SLAVE_ADDR, QMC_TOUT_MSB_ADDR, 1, &qmc->qmcReg.tempMsb, 1, 1);
 800c9d8:	4b42      	ldr	r3, [pc, #264]	; (800cae4 <UGV_getPositionAdc+0x1cc>)
 800c9da:	6818      	ldr	r0, [r3, #0]
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	3308      	adds	r3, #8
 800c9e0:	2201      	movs	r2, #1
 800c9e2:	9202      	str	r2, [sp, #8]
 800c9e4:	2201      	movs	r2, #1
 800c9e6:	9201      	str	r2, [sp, #4]
 800c9e8:	9300      	str	r3, [sp, #0]
 800c9ea:	2301      	movs	r3, #1
 800c9ec:	2208      	movs	r2, #8
 800c9ee:	211a      	movs	r1, #26
 800c9f0:	f7f6 faf6 	bl	8002fe0 <HAL_I2C_Mem_Read>
 800c9f4:	4603      	mov	r3, r0
 800c9f6:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 800c9f8:	7bfb      	ldrb	r3, [r7, #15]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d001      	beq.n	800ca02 <UGV_getPositionAdc+0xea>
 800c9fe:	7bfb      	ldrb	r3, [r7, #15]
 800ca00:	e06b      	b.n	800cada <UGV_getPositionAdc+0x1c2>

	//casting
	qmc->xPosition   = qmc->qmcReg.xLsb | (qmc->qmcReg.xMsb << 8);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	781b      	ldrb	r3, [r3, #0]
 800ca06:	b21a      	sxth	r2, r3
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	785b      	ldrb	r3, [r3, #1]
 800ca0c:	021b      	lsls	r3, r3, #8
 800ca0e:	b21b      	sxth	r3, r3
 800ca10:	4313      	orrs	r3, r2
 800ca12:	b21a      	sxth	r2, r3
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	829a      	strh	r2, [r3, #20]
	qmc->xPosition = kalman1_filter(&hKalmanX, qmc->xPosition);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800ca1e:	ee07 3a90 	vmov	s15, r3
 800ca22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ca26:	eeb0 0a67 	vmov.f32	s0, s15
 800ca2a:	482f      	ldr	r0, [pc, #188]	; (800cae8 <UGV_getPositionAdc+0x1d0>)
 800ca2c:	f7ff fed9 	bl	800c7e2 <kalman1_filter>
 800ca30:	eef0 7a40 	vmov.f32	s15, s0
 800ca34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ca38:	ee17 3a90 	vmov	r3, s15
 800ca3c:	b21a      	sxth	r2, r3
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	829a      	strh	r2, [r3, #20]

	qmc->yPosition   = qmc->qmcReg.yLsb | (qmc->qmcReg.yMsb << 8);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	789b      	ldrb	r3, [r3, #2]
 800ca46:	b21a      	sxth	r2, r3
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	78db      	ldrb	r3, [r3, #3]
 800ca4c:	021b      	lsls	r3, r3, #8
 800ca4e:	b21b      	sxth	r3, r3
 800ca50:	4313      	orrs	r3, r2
 800ca52:	b21a      	sxth	r2, r3
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	82da      	strh	r2, [r3, #22]
	qmc->yPosition = kalman1_filter(&hKalmanY, qmc->yPosition);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800ca5e:	ee07 3a90 	vmov	s15, r3
 800ca62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ca66:	eeb0 0a67 	vmov.f32	s0, s15
 800ca6a:	4820      	ldr	r0, [pc, #128]	; (800caec <UGV_getPositionAdc+0x1d4>)
 800ca6c:	f7ff feb9 	bl	800c7e2 <kalman1_filter>
 800ca70:	eef0 7a40 	vmov.f32	s15, s0
 800ca74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ca78:	ee17 3a90 	vmov	r3, s15
 800ca7c:	b21a      	sxth	r2, r3
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	82da      	strh	r2, [r3, #22]

	qmc->zPosition   = qmc->qmcReg.zLsb | (qmc->qmcReg.zMsb << 8);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	791b      	ldrb	r3, [r3, #4]
 800ca86:	b21a      	sxth	r2, r3
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	795b      	ldrb	r3, [r3, #5]
 800ca8c:	021b      	lsls	r3, r3, #8
 800ca8e:	b21b      	sxth	r3, r3
 800ca90:	4313      	orrs	r3, r2
 800ca92:	b21a      	sxth	r2, r3
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	831a      	strh	r2, [r3, #24]
	qmc->zPosition = kalman1_filter(&hKalmanZ, qmc->zPosition);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800ca9e:	ee07 3a90 	vmov	s15, r3
 800caa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800caa6:	eeb0 0a67 	vmov.f32	s0, s15
 800caaa:	4811      	ldr	r0, [pc, #68]	; (800caf0 <UGV_getPositionAdc+0x1d8>)
 800caac:	f7ff fe99 	bl	800c7e2 <kalman1_filter>
 800cab0:	eef0 7a40 	vmov.f32	s15, s0
 800cab4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cab8:	ee17 3a90 	vmov	r3, s15
 800cabc:	b21a      	sxth	r2, r3
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	831a      	strh	r2, [r3, #24]

	qmc->temperature = qmc->qmcReg.tempLsb | (qmc->qmcReg.tempMsb << 8);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	79db      	ldrb	r3, [r3, #7]
 800cac6:	b21a      	sxth	r2, r3
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	7a1b      	ldrb	r3, [r3, #8]
 800cacc:	021b      	lsls	r3, r3, #8
 800cace:	b21b      	sxth	r3, r3
 800cad0:	4313      	orrs	r3, r2
 800cad2:	b21a      	sxth	r2, r3
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	835a      	strh	r2, [r3, #26]

	return HAL_OK;
 800cad8:	2300      	movs	r3, #0
}
 800cada:	4618      	mov	r0, r3
 800cadc:	3718      	adds	r7, #24
 800cade:	46bd      	mov	sp, r7
 800cae0:	bd80      	pop	{r7, pc}
 800cae2:	bf00      	nop
 800cae4:	200050c4 	.word	0x200050c4
 800cae8:	200050cc 	.word	0x200050cc
 800caec:	200050e8 	.word	0x200050e8
 800caf0:	20005104 	.word	0x20005104
 800caf4:	00000000 	.word	0x00000000

0800caf8 <UGV_getAzimuth>:
 * typically measured clockwise from true north.
 * @param[in] qmc global variable
 * @return azimuth angle
 */
float UGV_getAzimuth(Qmc * qmc)
{
 800caf8:	b5b0      	push	{r4, r5, r7, lr}
 800cafa:	b084      	sub	sp, #16
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
	UGV_getPositionAdc(qmc);
 800cb00:	6878      	ldr	r0, [r7, #4]
 800cb02:	f7ff ff09 	bl	800c918 <UGV_getPositionAdc>

	float azimuth = atan2(qmc->xPosition, qmc->yPosition) * 180.0f / PI;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	f7f3 fd21 	bl	8000554 <__aeabi_i2d>
 800cb12:	4604      	mov	r4, r0
 800cb14:	460d      	mov	r5, r1
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	f7f3 fd19 	bl	8000554 <__aeabi_i2d>
 800cb22:	4602      	mov	r2, r0
 800cb24:	460b      	mov	r3, r1
 800cb26:	ec43 2b11 	vmov	d1, r2, r3
 800cb2a:	ec45 4b10 	vmov	d0, r4, r5
 800cb2e:	f001 fe9a 	bl	800e866 <atan2>
 800cb32:	ec51 0b10 	vmov	r0, r1, d0
 800cb36:	f04f 0200 	mov.w	r2, #0
 800cb3a:	4b21      	ldr	r3, [pc, #132]	; (800cbc0 <UGV_getAzimuth+0xc8>)
 800cb3c:	f7f3 fd74 	bl	8000628 <__aeabi_dmul>
 800cb40:	4602      	mov	r2, r0
 800cb42:	460b      	mov	r3, r1
 800cb44:	4610      	mov	r0, r2
 800cb46:	4619      	mov	r1, r3
 800cb48:	a31b      	add	r3, pc, #108	; (adr r3, 800cbb8 <UGV_getAzimuth+0xc0>)
 800cb4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb4e:	f7f3 fe95 	bl	800087c <__aeabi_ddiv>
 800cb52:	4602      	mov	r2, r0
 800cb54:	460b      	mov	r3, r1
 800cb56:	4610      	mov	r0, r2
 800cb58:	4619      	mov	r1, r3
 800cb5a:	f7f4 f835 	bl	8000bc8 <__aeabi_d2f>
 800cb5e:	4603      	mov	r3, r0
 800cb60:	60fb      	str	r3, [r7, #12]
	azimuth -= magneticDeclinationDegrees;
 800cb62:	4b18      	ldr	r3, [pc, #96]	; (800cbc4 <UGV_getAzimuth+0xcc>)
 800cb64:	edd3 7a00 	vldr	s15, [r3]
 800cb68:	ed97 7a03 	vldr	s14, [r7, #12]
 800cb6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cb70:	edc7 7a03 	vstr	s15, [r7, #12]

	azimuth = (azimuth < 0) ? (azimuth + 360) : azimuth;
 800cb74:	edd7 7a03 	vldr	s15, [r7, #12]
 800cb78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cb7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb80:	d506      	bpl.n	800cb90 <UGV_getAzimuth+0x98>
 800cb82:	edd7 7a03 	vldr	s15, [r7, #12]
 800cb86:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800cbc8 <UGV_getAzimuth+0xd0>
 800cb8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cb8e:	e001      	b.n	800cb94 <UGV_getAzimuth+0x9c>
 800cb90:	edd7 7a03 	vldr	s15, [r7, #12]
 800cb94:	edc7 7a03 	vstr	s15, [r7, #12]

	azimuth = 360 - azimuth;
 800cb98:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800cbc8 <UGV_getAzimuth+0xd0>
 800cb9c:	edd7 7a03 	vldr	s15, [r7, #12]
 800cba0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cba4:	edc7 7a03 	vstr	s15, [r7, #12]

	return azimuth;
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	ee07 3a90 	vmov	s15, r3
}
 800cbae:	eeb0 0a67 	vmov.f32	s0, s15
 800cbb2:	3710      	adds	r7, #16
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bdb0      	pop	{r4, r5, r7, pc}
 800cbb8:	54442d18 	.word	0x54442d18
 800cbbc:	400921fb 	.word	0x400921fb
 800cbc0:	40668000 	.word	0x40668000
 800cbc4:	200050c8 	.word	0x200050c8
 800cbc8:	43b40000 	.word	0x43b40000

0800cbcc <UGV_rcReceiverInit>:
/**
 * @brief initialize timer2 as as input capture mode, and enable interrupts
 * @return none
 */
void UGV_rcReceiverInit()
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	af00      	add	r7, sp, #0
	  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800cbd0:	2100      	movs	r1, #0
 800cbd2:	4810      	ldr	r0, [pc, #64]	; (800cc14 <UGV_rcReceiverInit+0x48>)
 800cbd4:	f7f8 fe6c 	bl	80058b0 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 800cbd8:	2104      	movs	r1, #4
 800cbda:	480e      	ldr	r0, [pc, #56]	; (800cc14 <UGV_rcReceiverInit+0x48>)
 800cbdc:	f7f8 fe68 	bl	80058b0 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 800cbe0:	2108      	movs	r1, #8
 800cbe2:	480c      	ldr	r0, [pc, #48]	; (800cc14 <UGV_rcReceiverInit+0x48>)
 800cbe4:	f7f8 fe64 	bl	80058b0 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4);
 800cbe8:	210c      	movs	r1, #12
 800cbea:	480a      	ldr	r0, [pc, #40]	; (800cc14 <UGV_rcReceiverInit+0x48>)
 800cbec:	f7f8 fe60 	bl	80058b0 <HAL_TIM_IC_Start_IT>

	  rcChannel_s.channel1 = CHANNEL_MIDDLE;
 800cbf0:	4b09      	ldr	r3, [pc, #36]	; (800cc18 <UGV_rcReceiverInit+0x4c>)
 800cbf2:	f240 52f5 	movw	r2, #1525	; 0x5f5
 800cbf6:	801a      	strh	r2, [r3, #0]
	  rcChannel_s.channel2 = CHANNEL_MIDDLE;
 800cbf8:	4b07      	ldr	r3, [pc, #28]	; (800cc18 <UGV_rcReceiverInit+0x4c>)
 800cbfa:	f240 52f5 	movw	r2, #1525	; 0x5f5
 800cbfe:	805a      	strh	r2, [r3, #2]
	  rcChannel_s.channel3 = CHANNEL_MIDDLE;
 800cc00:	4b05      	ldr	r3, [pc, #20]	; (800cc18 <UGV_rcReceiverInit+0x4c>)
 800cc02:	f240 52f5 	movw	r2, #1525	; 0x5f5
 800cc06:	809a      	strh	r2, [r3, #4]
	  rcChannel_s.channel4 = CHANNEL_MIDDLE;
 800cc08:	4b03      	ldr	r3, [pc, #12]	; (800cc18 <UGV_rcReceiverInit+0x4c>)
 800cc0a:	f240 52f5 	movw	r2, #1525	; 0x5f5
 800cc0e:	80da      	strh	r2, [r3, #6]
}
 800cc10:	bf00      	nop
 800cc12:	bd80      	pop	{r7, pc}
 800cc14:	20000354 	.word	0x20000354
 800cc18:	20005154 	.word	0x20005154

0800cc1c <HAL_TIM_IC_CaptureCallback>:
 * @brief timer rising and falling edge interrupt callback function
 * @param[in] timer base address
 * @return none
 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b082      	sub	sp, #8
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc2c:	d121      	bne.n	800cc72 <HAL_TIM_IC_CaptureCallback+0x56>
	{
		rcActive = 1;
 800cc2e:	4b13      	ldr	r3, [pc, #76]	; (800cc7c <HAL_TIM_IC_CaptureCallback+0x60>)
 800cc30:	2201      	movs	r2, #1
 800cc32:	701a      	strb	r2, [r3, #0]

		//!< channel1 calculation
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	7f1b      	ldrb	r3, [r3, #28]
 800cc38:	2b01      	cmp	r3, #1
 800cc3a:	d103      	bne.n	800cc44 <HAL_TIM_IC_CaptureCallback+0x28>
		{
			UGV_rcDutyCalculate(HAL_TIM_ACTIVE_CHANNEL_1);
 800cc3c:	2001      	movs	r0, #1
 800cc3e:	f000 f81f 	bl	800cc80 <UGV_rcDutyCalculate>
		else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
		{
			UGV_rcDutyCalculate(HAL_TIM_ACTIVE_CHANNEL_4);
		}
	}
}
 800cc42:	e016      	b.n	800cc72 <HAL_TIM_IC_CaptureCallback+0x56>
		else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	7f1b      	ldrb	r3, [r3, #28]
 800cc48:	2b02      	cmp	r3, #2
 800cc4a:	d103      	bne.n	800cc54 <HAL_TIM_IC_CaptureCallback+0x38>
			UGV_rcDutyCalculate(HAL_TIM_ACTIVE_CHANNEL_2);
 800cc4c:	2002      	movs	r0, #2
 800cc4e:	f000 f817 	bl	800cc80 <UGV_rcDutyCalculate>
}
 800cc52:	e00e      	b.n	800cc72 <HAL_TIM_IC_CaptureCallback+0x56>
		else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	7f1b      	ldrb	r3, [r3, #28]
 800cc58:	2b04      	cmp	r3, #4
 800cc5a:	d103      	bne.n	800cc64 <HAL_TIM_IC_CaptureCallback+0x48>
			UGV_rcDutyCalculate(HAL_TIM_ACTIVE_CHANNEL_3);
 800cc5c:	2004      	movs	r0, #4
 800cc5e:	f000 f80f 	bl	800cc80 <UGV_rcDutyCalculate>
}
 800cc62:	e006      	b.n	800cc72 <HAL_TIM_IC_CaptureCallback+0x56>
		else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	7f1b      	ldrb	r3, [r3, #28]
 800cc68:	2b08      	cmp	r3, #8
 800cc6a:	d102      	bne.n	800cc72 <HAL_TIM_IC_CaptureCallback+0x56>
			UGV_rcDutyCalculate(HAL_TIM_ACTIVE_CHANNEL_4);
 800cc6c:	2008      	movs	r0, #8
 800cc6e:	f000 f807 	bl	800cc80 <UGV_rcDutyCalculate>
}
 800cc72:	bf00      	nop
 800cc74:	3708      	adds	r7, #8
 800cc76:	46bd      	mov	sp, r7
 800cc78:	bd80      	pop	{r7, pc}
 800cc7a:	bf00      	nop
 800cc7c:	2000515c 	.word	0x2000515c

0800cc80 <UGV_rcDutyCalculate>:
 *
 * @param[in] active channel number
 * @return none
 */
static void UGV_rcDutyCalculate(HAL_TIM_ActiveChannel HAL_TIM_ACTIVE_CHANNEL)
{
 800cc80:	b590      	push	{r4, r7, lr}
 800cc82:	b085      	sub	sp, #20
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	4603      	mov	r3, r0
 800cc88:	71fb      	strb	r3, [r7, #7]
	uint16_t *channelPtr = &rcChannel_s.channel1;
 800cc8a:	4b3e      	ldr	r3, [pc, #248]	; (800cd84 <UGV_rcDutyCalculate+0x104>)
 800cc8c:	60fb      	str	r3, [r7, #12]

	uint8_t index = (HAL_TIM_ACTIVE_CHANNEL == HAL_TIM_ACTIVE_CHANNEL_1) ? 0 :
 800cc8e:	79fb      	ldrb	r3, [r7, #7]
 800cc90:	2b01      	cmp	r3, #1
 800cc92:	d010      	beq.n	800ccb6 <UGV_rcDutyCalculate+0x36>
 800cc94:	79fb      	ldrb	r3, [r7, #7]
 800cc96:	2b02      	cmp	r3, #2
 800cc98:	d00b      	beq.n	800ccb2 <UGV_rcDutyCalculate+0x32>
 800cc9a:	79fb      	ldrb	r3, [r7, #7]
 800cc9c:	2b04      	cmp	r3, #4
 800cc9e:	d006      	beq.n	800ccae <UGV_rcDutyCalculate+0x2e>
 800cca0:	79fb      	ldrb	r3, [r7, #7]
 800cca2:	2b08      	cmp	r3, #8
 800cca4:	d101      	bne.n	800ccaa <UGV_rcDutyCalculate+0x2a>
 800cca6:	2303      	movs	r3, #3
 800cca8:	e006      	b.n	800ccb8 <UGV_rcDutyCalculate+0x38>
 800ccaa:	2364      	movs	r3, #100	; 0x64
 800ccac:	e004      	b.n	800ccb8 <UGV_rcDutyCalculate+0x38>
 800ccae:	2302      	movs	r3, #2
 800ccb0:	e002      	b.n	800ccb8 <UGV_rcDutyCalculate+0x38>
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	e000      	b.n	800ccb8 <UGV_rcDutyCalculate+0x38>
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	72fb      	strb	r3, [r7, #11]
			        (HAL_TIM_ACTIVE_CHANNEL == HAL_TIM_ACTIVE_CHANNEL_2) ? 1 :
			        (HAL_TIM_ACTIVE_CHANNEL == HAL_TIM_ACTIVE_CHANNEL_3) ? 2 :
			        (HAL_TIM_ACTIVE_CHANNEL == HAL_TIM_ACTIVE_CHANNEL_4) ? 3 : 100;

	if(tim2FirstCap[index] == 0)
 800ccba:	7afb      	ldrb	r3, [r7, #11]
 800ccbc:	4a32      	ldr	r2, [pc, #200]	; (800cd88 <UGV_rcDutyCalculate+0x108>)
 800ccbe:	5cd3      	ldrb	r3, [r2, r3]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d10f      	bne.n	800cce4 <UGV_rcDutyCalculate+0x64>
	{
		//!< channel values -> 0-4-8-12 that is four time index
		tim2IcVal1[index] = HAL_TIM_ReadCapturedValue(&htim2, index * 4);
 800ccc4:	7afb      	ldrb	r3, [r7, #11]
 800ccc6:	009b      	lsls	r3, r3, #2
 800ccc8:	7afc      	ldrb	r4, [r7, #11]
 800ccca:	4619      	mov	r1, r3
 800cccc:	482f      	ldr	r0, [pc, #188]	; (800cd8c <UGV_rcDutyCalculate+0x10c>)
 800ccce:	f7f9 f965 	bl	8005f9c <HAL_TIM_ReadCapturedValue>
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	4a2e      	ldr	r2, [pc, #184]	; (800cd90 <UGV_rcDutyCalculate+0x110>)
 800ccd6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		tim2FirstCap[index] = 1;
 800ccda:	7afb      	ldrb	r3, [r7, #11]
 800ccdc:	4a2a      	ldr	r2, [pc, #168]	; (800cd88 <UGV_rcDutyCalculate+0x108>)
 800ccde:	2101      	movs	r1, #1
 800cce0:	54d1      	strb	r1, [r2, r3]


		channelPtr[index] = tim2Difference[index] * mFactor;
		tim2FirstCap[index] = 0;
	}
}
 800cce2:	e04b      	b.n	800cd7c <UGV_rcDutyCalculate+0xfc>
		tim2IcVal2[index] = HAL_TIM_ReadCapturedValue(&htim2, index * 4);
 800cce4:	7afb      	ldrb	r3, [r7, #11]
 800cce6:	009b      	lsls	r3, r3, #2
 800cce8:	7afc      	ldrb	r4, [r7, #11]
 800ccea:	4619      	mov	r1, r3
 800ccec:	4827      	ldr	r0, [pc, #156]	; (800cd8c <UGV_rcDutyCalculate+0x10c>)
 800ccee:	f7f9 f955 	bl	8005f9c <HAL_TIM_ReadCapturedValue>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	4a27      	ldr	r2, [pc, #156]	; (800cd94 <UGV_rcDutyCalculate+0x114>)
 800ccf6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		if(tim2IcVal2[index] > tim2IcVal1[index])
 800ccfa:	7afb      	ldrb	r3, [r7, #11]
 800ccfc:	4a25      	ldr	r2, [pc, #148]	; (800cd94 <UGV_rcDutyCalculate+0x114>)
 800ccfe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cd02:	7afb      	ldrb	r3, [r7, #11]
 800cd04:	4922      	ldr	r1, [pc, #136]	; (800cd90 <UGV_rcDutyCalculate+0x110>)
 800cd06:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cd0a:	429a      	cmp	r2, r3
 800cd0c:	d90d      	bls.n	800cd2a <UGV_rcDutyCalculate+0xaa>
			tim2Difference[index] = tim2IcVal2[index] - tim2IcVal1[index];
 800cd0e:	7afb      	ldrb	r3, [r7, #11]
 800cd10:	4a20      	ldr	r2, [pc, #128]	; (800cd94 <UGV_rcDutyCalculate+0x114>)
 800cd12:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800cd16:	7afb      	ldrb	r3, [r7, #11]
 800cd18:	4a1d      	ldr	r2, [pc, #116]	; (800cd90 <UGV_rcDutyCalculate+0x110>)
 800cd1a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cd1e:	7afb      	ldrb	r3, [r7, #11]
 800cd20:	1a8a      	subs	r2, r1, r2
 800cd22:	491d      	ldr	r1, [pc, #116]	; (800cd98 <UGV_rcDutyCalculate+0x118>)
 800cd24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800cd28:	e00d      	b.n	800cd46 <UGV_rcDutyCalculate+0xc6>
			tim2Difference[index] = (0xFFFFFFFF - tim2IcVal1[index]) + tim2IcVal2[index];
 800cd2a:	7afb      	ldrb	r3, [r7, #11]
 800cd2c:	4a19      	ldr	r2, [pc, #100]	; (800cd94 <UGV_rcDutyCalculate+0x114>)
 800cd2e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cd32:	7afb      	ldrb	r3, [r7, #11]
 800cd34:	4916      	ldr	r1, [pc, #88]	; (800cd90 <UGV_rcDutyCalculate+0x110>)
 800cd36:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cd3a:	1ad2      	subs	r2, r2, r3
 800cd3c:	7afb      	ldrb	r3, [r7, #11]
 800cd3e:	3a01      	subs	r2, #1
 800cd40:	4915      	ldr	r1, [pc, #84]	; (800cd98 <UGV_rcDutyCalculate+0x118>)
 800cd42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		channelPtr[index] = tim2Difference[index] * mFactor;
 800cd46:	7afb      	ldrb	r3, [r7, #11]
 800cd48:	4a13      	ldr	r2, [pc, #76]	; (800cd98 <UGV_rcDutyCalculate+0x118>)
 800cd4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd4e:	ee07 3a90 	vmov	s15, r3
 800cd52:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cd56:	4b11      	ldr	r3, [pc, #68]	; (800cd9c <UGV_rcDutyCalculate+0x11c>)
 800cd58:	edd3 7a00 	vldr	s15, [r3]
 800cd5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd60:	7afb      	ldrb	r3, [r7, #11]
 800cd62:	005b      	lsls	r3, r3, #1
 800cd64:	68fa      	ldr	r2, [r7, #12]
 800cd66:	4413      	add	r3, r2
 800cd68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd6c:	ee17 2a90 	vmov	r2, s15
 800cd70:	b292      	uxth	r2, r2
 800cd72:	801a      	strh	r2, [r3, #0]
		tim2FirstCap[index] = 0;
 800cd74:	7afb      	ldrb	r3, [r7, #11]
 800cd76:	4a04      	ldr	r2, [pc, #16]	; (800cd88 <UGV_rcDutyCalculate+0x108>)
 800cd78:	2100      	movs	r1, #0
 800cd7a:	54d1      	strb	r1, [r2, r3]
}
 800cd7c:	bf00      	nop
 800cd7e:	3714      	adds	r7, #20
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd90      	pop	{r4, r7, pc}
 800cd84:	20005154 	.word	0x20005154
 800cd88:	20005120 	.word	0x20005120
 800cd8c:	20000354 	.word	0x20000354
 800cd90:	20005124 	.word	0x20005124
 800cd94:	20005134 	.word	0x20005134
 800cd98:	20005144 	.word	0x20005144
 800cd9c:	200000d8 	.word	0x200000d8

0800cda0 <RCFilter_Init>:
#include "rcFilter.h"

void RCFilter_Init(RCFilter *filt, float cutoffFreqHz, float sampleTimeS) {
 800cda0:	b480      	push	{r7}
 800cda2:	b087      	sub	sp, #28
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	60f8      	str	r0, [r7, #12]
 800cda8:	ed87 0a02 	vstr	s0, [r7, #8]
 800cdac:	edc7 0a01 	vstr	s1, [r7, #4]

	/* Compute equivalent 'RC' constant from cut-off frequency */
	float RC = 1.0f / (6.28318530718f * cutoffFreqHz);
 800cdb0:	edd7 7a02 	vldr	s15, [r7, #8]
 800cdb4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800ce18 <RCFilter_Init+0x78>
 800cdb8:	ee27 7a87 	vmul.f32	s14, s15, s14
 800cdbc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cdc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cdc4:	edc7 7a05 	vstr	s15, [r7, #20]

	/* Pre-compute filter coefficients for first-order low-pass filter */
	filt->coeff[0] = sampleTimeS / (sampleTimeS + RC);
 800cdc8:	ed97 7a01 	vldr	s14, [r7, #4]
 800cdcc:	edd7 7a05 	vldr	s15, [r7, #20]
 800cdd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cdd4:	edd7 6a01 	vldr	s13, [r7, #4]
 800cdd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	edc3 7a00 	vstr	s15, [r3]
	filt->coeff[1] = RC / (sampleTimeS + RC);
 800cde2:	ed97 7a01 	vldr	s14, [r7, #4]
 800cde6:	edd7 7a05 	vldr	s15, [r7, #20]
 800cdea:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cdee:	edd7 6a05 	vldr	s13, [r7, #20]
 800cdf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	edc3 7a01 	vstr	s15, [r3, #4]

	/* Clear output buffer */
	filt->out[0] = 0.0f;
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	f04f 0200 	mov.w	r2, #0
 800ce02:	609a      	str	r2, [r3, #8]
	filt->out[1] = 0.0f;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	f04f 0200 	mov.w	r2, #0
 800ce0a:	60da      	str	r2, [r3, #12]
}
 800ce0c:	bf00      	nop
 800ce0e:	371c      	adds	r7, #28
 800ce10:	46bd      	mov	sp, r7
 800ce12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce16:	4770      	bx	lr
 800ce18:	40c90fdb 	.word	0x40c90fdb

0800ce1c <RCFilter_Update>:

float RCFilter_Update(RCFilter *filt, float inp) {
 800ce1c:	b480      	push	{r7}
 800ce1e:	b083      	sub	sp, #12
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
 800ce24:	ed87 0a00 	vstr	s0, [r7]

	/* Shift output samples */
	filt->out[1] = filt->out[0];
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	689a      	ldr	r2, [r3, #8]
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	60da      	str	r2, [r3, #12]

	/* Compute new output sample */
	filt->out[0] = filt->coeff[0] * inp + filt->coeff[1] * filt->out[1];
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	ed93 7a00 	vldr	s14, [r3]
 800ce36:	edd7 7a00 	vldr	s15, [r7]
 800ce3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	edd3 6a01 	vldr	s13, [r3, #4]
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	edd3 7a03 	vldr	s15, [r3, #12]
 800ce4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ce4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	edc3 7a02 	vstr	s15, [r3, #8]

	/* Return filtered sample */
	return (filt->out[0]);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	689b      	ldr	r3, [r3, #8]
 800ce5c:	ee07 3a90 	vmov	s15, r3
}
 800ce60:	eeb0 0a67 	vmov.f32	s0, s15
 800ce64:	370c      	adds	r7, #12
 800ce66:	46bd      	mov	sp, r7
 800ce68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6c:	4770      	bx	lr

0800ce6e <SX1278_SPIRead>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 800ce6e:	b580      	push	{r7, lr}
 800ce70:	b084      	sub	sp, #16
 800ce72:	af00      	add	r7, sp, #0
 800ce74:	6078      	str	r0, [r7, #4]
 800ce76:	460b      	mov	r3, r1
 800ce78:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	78fa      	ldrb	r2, [r7, #3]
 800ce80:	4611      	mov	r1, r2
 800ce82:	4618      	mov	r0, r3
 800ce84:	f000 fbdd 	bl	800d642 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	f000 fbf8 	bl	800d682 <SX1278_hw_SPIReadByte>
 800ce92:	4603      	mov	r3, r0
 800ce94:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	2101      	movs	r1, #1
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f000 fb95 	bl	800d5cc <SX1278_hw_SetNSS>
	return tmp;
 800cea2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cea4:	4618      	mov	r0, r3
 800cea6:	3710      	adds	r7, #16
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bd80      	pop	{r7, pc}

0800ceac <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b082      	sub	sp, #8
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
 800ceb4:	460b      	mov	r3, r1
 800ceb6:	70fb      	strb	r3, [r7, #3]
 800ceb8:	4613      	mov	r3, r2
 800ceba:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	2100      	movs	r1, #0
 800cec2:	4618      	mov	r0, r3
 800cec4:	f000 fb82 	bl	800d5cc <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681a      	ldr	r2, [r3, #0]
 800cecc:	78fb      	ldrb	r3, [r7, #3]
 800cece:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ced2:	b2db      	uxtb	r3, r3
 800ced4:	4619      	mov	r1, r3
 800ced6:	4610      	mov	r0, r2
 800ced8:	f000 fbb3 	bl	800d642 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	78ba      	ldrb	r2, [r7, #2]
 800cee2:	4611      	mov	r1, r2
 800cee4:	4618      	mov	r0, r3
 800cee6:	f000 fbac 	bl	800d642 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	2101      	movs	r1, #1
 800cef0:	4618      	mov	r0, r3
 800cef2:	f000 fb6b 	bl	800d5cc <SX1278_hw_SetNSS>
}
 800cef6:	bf00      	nop
 800cef8:	3708      	adds	r7, #8
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}

0800cefe <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length) {
 800cefe:	b590      	push	{r4, r7, lr}
 800cf00:	b087      	sub	sp, #28
 800cf02:	af00      	add	r7, sp, #0
 800cf04:	60f8      	str	r0, [r7, #12]
 800cf06:	607a      	str	r2, [r7, #4]
 800cf08:	461a      	mov	r2, r3
 800cf0a:	460b      	mov	r3, r1
 800cf0c:	72fb      	strb	r3, [r7, #11]
 800cf0e:	4613      	mov	r3, r2
 800cf10:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 800cf12:	7abb      	ldrb	r3, [r7, #10]
 800cf14:	2b01      	cmp	r3, #1
 800cf16:	d927      	bls.n	800cf68 <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	2100      	movs	r1, #0
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f000 fb54 	bl	800d5cc <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	7afa      	ldrb	r2, [r7, #11]
 800cf2a:	4611      	mov	r1, r2
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	f000 fb88 	bl	800d642 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800cf32:	2300      	movs	r3, #0
 800cf34:	75fb      	strb	r3, [r7, #23]
 800cf36:	e00c      	b.n	800cf52 <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	6819      	ldr	r1, [r3, #0]
 800cf3c:	7dfb      	ldrb	r3, [r7, #23]
 800cf3e:	687a      	ldr	r2, [r7, #4]
 800cf40:	18d4      	adds	r4, r2, r3
 800cf42:	4608      	mov	r0, r1
 800cf44:	f000 fb9d 	bl	800d682 <SX1278_hw_SPIReadByte>
 800cf48:	4603      	mov	r3, r0
 800cf4a:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 800cf4c:	7dfb      	ldrb	r3, [r7, #23]
 800cf4e:	3301      	adds	r3, #1
 800cf50:	75fb      	strb	r3, [r7, #23]
 800cf52:	7dfa      	ldrb	r2, [r7, #23]
 800cf54:	7abb      	ldrb	r3, [r7, #10]
 800cf56:	429a      	cmp	r2, r3
 800cf58:	d3ee      	bcc.n	800cf38 <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	2101      	movs	r1, #1
 800cf60:	4618      	mov	r0, r3
 800cf62:	f000 fb33 	bl	800d5cc <SX1278_hw_SetNSS>
 800cf66:	e000      	b.n	800cf6a <SX1278_SPIBurstRead+0x6c>
		return;
 800cf68:	bf00      	nop
	}
}
 800cf6a:	371c      	adds	r7, #28
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	bd90      	pop	{r4, r7, pc}

0800cf70 <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b086      	sub	sp, #24
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	60f8      	str	r0, [r7, #12]
 800cf78:	607a      	str	r2, [r7, #4]
 800cf7a:	461a      	mov	r2, r3
 800cf7c:	460b      	mov	r3, r1
 800cf7e:	72fb      	strb	r3, [r7, #11]
 800cf80:	4613      	mov	r3, r2
 800cf82:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 800cf84:	7abb      	ldrb	r3, [r7, #10]
 800cf86:	2b01      	cmp	r3, #1
 800cf88:	d929      	bls.n	800cfde <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	2100      	movs	r1, #0
 800cf90:	4618      	mov	r0, r3
 800cf92:	f000 fb1b 	bl	800d5cc <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	681a      	ldr	r2, [r3, #0]
 800cf9a:	7afb      	ldrb	r3, [r7, #11]
 800cf9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cfa0:	b2db      	uxtb	r3, r3
 800cfa2:	4619      	mov	r1, r3
 800cfa4:	4610      	mov	r0, r2
 800cfa6:	f000 fb4c 	bl	800d642 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800cfaa:	2300      	movs	r3, #0
 800cfac:	75fb      	strb	r3, [r7, #23]
 800cfae:	e00b      	b.n	800cfc8 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	6818      	ldr	r0, [r3, #0]
 800cfb4:	7dfb      	ldrb	r3, [r7, #23]
 800cfb6:	687a      	ldr	r2, [r7, #4]
 800cfb8:	4413      	add	r3, r2
 800cfba:	781b      	ldrb	r3, [r3, #0]
 800cfbc:	4619      	mov	r1, r3
 800cfbe:	f000 fb40 	bl	800d642 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800cfc2:	7dfb      	ldrb	r3, [r7, #23]
 800cfc4:	3301      	adds	r3, #1
 800cfc6:	75fb      	strb	r3, [r7, #23]
 800cfc8:	7dfa      	ldrb	r2, [r7, #23]
 800cfca:	7abb      	ldrb	r3, [r7, #10]
 800cfcc:	429a      	cmp	r2, r3
 800cfce:	d3ef      	bcc.n	800cfb0 <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	2101      	movs	r1, #1
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	f000 faf8 	bl	800d5cc <SX1278_hw_SetNSS>
 800cfdc:	e000      	b.n	800cfe0 <SX1278_SPIBurstWrite+0x70>
		return;
 800cfde:	bf00      	nop
	}
}
 800cfe0:	3718      	adds	r7, #24
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}
	...

0800cfe8 <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b086      	sub	sp, #24
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 800cff0:	6878      	ldr	r0, [r7, #4]
 800cff2:	f000 f90d 	bl	800d210 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 800cff6:	200f      	movs	r0, #15
 800cff8:	f000 fb69 	bl	800d6ce <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 800cffc:	6878      	ldr	r0, [r7, #4]
 800cffe:	f000 f917 	bl	800d230 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d008:	f04f 0000 	mov.w	r0, #0
 800d00c:	f04f 0100 	mov.w	r1, #0
 800d010:	04d9      	lsls	r1, r3, #19
 800d012:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 800d016:	04d0      	lsls	r0, r2, #19
 800d018:	4a6f      	ldr	r2, [pc, #444]	; (800d1d8 <SX1278_config+0x1f0>)
 800d01a:	f04f 0300 	mov.w	r3, #0
 800d01e:	f7f3 fe23 	bl	8000c68 <__aeabi_uldivmod>
 800d022:	4602      	mov	r2, r0
 800d024:	460b      	mov	r3, r1
 800d026:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 800d02a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d02e:	f04f 0200 	mov.w	r2, #0
 800d032:	f04f 0300 	mov.w	r3, #0
 800d036:	0c02      	lsrs	r2, r0, #16
 800d038:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800d03c:	0c0b      	lsrs	r3, r1, #16
 800d03e:	b2d3      	uxtb	r3, r2
 800d040:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 800d042:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d046:	f04f 0200 	mov.w	r2, #0
 800d04a:	f04f 0300 	mov.w	r3, #0
 800d04e:	0a02      	lsrs	r2, r0, #8
 800d050:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800d054:	0a0b      	lsrs	r3, r1, #8
 800d056:	b2d3      	uxtb	r3, r2
 800d058:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 800d05a:	7c3b      	ldrb	r3, [r7, #16]
 800d05c:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 800d05e:	f107 020c 	add.w	r2, r7, #12
 800d062:	2303      	movs	r3, #3
 800d064:	2106      	movs	r1, #6
 800d066:	6878      	ldr	r0, [r7, #4]
 800d068:	f7ff ff82 	bl	800cf70 <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 800d06c:	2234      	movs	r2, #52	; 0x34
 800d06e:	2139      	movs	r1, #57	; 0x39
 800d070:	6878      	ldr	r0, [r7, #4]
 800d072:	f7ff ff1b 	bl	800ceac <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	7c1b      	ldrb	r3, [r3, #16]
 800d07a:	461a      	mov	r2, r3
 800d07c:	4b57      	ldr	r3, [pc, #348]	; (800d1dc <SX1278_config+0x1f4>)
 800d07e:	5c9b      	ldrb	r3, [r3, r2]
 800d080:	461a      	mov	r2, r3
 800d082:	2109      	movs	r1, #9
 800d084:	6878      	ldr	r0, [r7, #4]
 800d086:	f7ff ff11 	bl	800ceac <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 800d08a:	220b      	movs	r2, #11
 800d08c:	210b      	movs	r1, #11
 800d08e:	6878      	ldr	r0, [r7, #4]
 800d090:	f7ff ff0c 	bl	800ceac <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 800d094:	2223      	movs	r2, #35	; 0x23
 800d096:	210c      	movs	r1, #12
 800d098:	6878      	ldr	r0, [r7, #4]
 800d09a:	f7ff ff07 	bl	800ceac <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	7c5b      	ldrb	r3, [r3, #17]
 800d0a2:	461a      	mov	r2, r3
 800d0a4:	4b4e      	ldr	r3, [pc, #312]	; (800d1e0 <SX1278_config+0x1f8>)
 800d0a6:	5c9b      	ldrb	r3, [r3, r2]
 800d0a8:	2b06      	cmp	r3, #6
 800d0aa:	d147      	bne.n	800d13c <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	7c9b      	ldrb	r3, [r3, #18]
 800d0b0:	461a      	mov	r2, r3
 800d0b2:	4b4c      	ldr	r3, [pc, #304]	; (800d1e4 <SX1278_config+0x1fc>)
 800d0b4:	5c9b      	ldrb	r3, [r3, r2]
 800d0b6:	011b      	lsls	r3, r3, #4
 800d0b8:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	7cdb      	ldrb	r3, [r3, #19]
 800d0be:	4619      	mov	r1, r3
 800d0c0:	4b49      	ldr	r3, [pc, #292]	; (800d1e8 <SX1278_config+0x200>)
 800d0c2:	5c5b      	ldrb	r3, [r3, r1]
 800d0c4:	005b      	lsls	r3, r3, #1
 800d0c6:	b2db      	uxtb	r3, r3
 800d0c8:	4413      	add	r3, r2
 800d0ca:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800d0cc:	3301      	adds	r3, #1
 800d0ce:	b2db      	uxtb	r3, r3
 800d0d0:	461a      	mov	r2, r3
 800d0d2:	211d      	movs	r1, #29
 800d0d4:	6878      	ldr	r0, [r7, #4]
 800d0d6:	f7ff fee9 	bl	800ceac <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	7c5b      	ldrb	r3, [r3, #17]
 800d0de:	461a      	mov	r2, r3
 800d0e0:	4b3f      	ldr	r3, [pc, #252]	; (800d1e0 <SX1278_config+0x1f8>)
 800d0e2:	5c9b      	ldrb	r3, [r3, r2]
 800d0e4:	011b      	lsls	r3, r3, #4
 800d0e6:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	7d1b      	ldrb	r3, [r3, #20]
 800d0ec:	4619      	mov	r1, r3
 800d0ee:	4b3f      	ldr	r3, [pc, #252]	; (800d1ec <SX1278_config+0x204>)
 800d0f0:	5c5b      	ldrb	r3, [r3, r1]
 800d0f2:	009b      	lsls	r3, r3, #2
 800d0f4:	b2db      	uxtb	r3, r3
 800d0f6:	4413      	add	r3, r2
 800d0f8:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800d0fa:	3303      	adds	r3, #3
 800d0fc:	b2db      	uxtb	r3, r3
 800d0fe:	461a      	mov	r2, r3
 800d100:	211e      	movs	r1, #30
 800d102:	6878      	ldr	r0, [r7, #4]
 800d104:	f7ff fed2 	bl	800ceac <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 800d108:	2131      	movs	r1, #49	; 0x31
 800d10a:	6878      	ldr	r0, [r7, #4]
 800d10c:	f7ff feaf 	bl	800ce6e <SX1278_SPIRead>
 800d110:	4603      	mov	r3, r0
 800d112:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 800d114:	7bfb      	ldrb	r3, [r7, #15]
 800d116:	f023 0307 	bic.w	r3, r3, #7
 800d11a:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 800d11c:	7bfb      	ldrb	r3, [r7, #15]
 800d11e:	f043 0305 	orr.w	r3, r3, #5
 800d122:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 800d124:	7bfb      	ldrb	r3, [r7, #15]
 800d126:	461a      	mov	r2, r3
 800d128:	2131      	movs	r1, #49	; 0x31
 800d12a:	6878      	ldr	r0, [r7, #4]
 800d12c:	f7ff febe 	bl	800ceac <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 800d130:	220c      	movs	r2, #12
 800d132:	2137      	movs	r1, #55	; 0x37
 800d134:	6878      	ldr	r0, [r7, #4]
 800d136:	f7ff feb9 	bl	800ceac <SX1278_SPIWrite>
 800d13a:	e029      	b.n	800d190 <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	7c9b      	ldrb	r3, [r3, #18]
 800d140:	461a      	mov	r2, r3
 800d142:	4b28      	ldr	r3, [pc, #160]	; (800d1e4 <SX1278_config+0x1fc>)
 800d144:	5c9b      	ldrb	r3, [r3, r2]
 800d146:	011b      	lsls	r3, r3, #4
 800d148:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	7cdb      	ldrb	r3, [r3, #19]
 800d14e:	4619      	mov	r1, r3
 800d150:	4b25      	ldr	r3, [pc, #148]	; (800d1e8 <SX1278_config+0x200>)
 800d152:	5c5b      	ldrb	r3, [r3, r1]
 800d154:	005b      	lsls	r3, r3, #1
 800d156:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800d158:	4413      	add	r3, r2
 800d15a:	b2db      	uxtb	r3, r3
 800d15c:	461a      	mov	r2, r3
 800d15e:	211d      	movs	r1, #29
 800d160:	6878      	ldr	r0, [r7, #4]
 800d162:	f7ff fea3 	bl	800ceac <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	7c5b      	ldrb	r3, [r3, #17]
 800d16a:	461a      	mov	r2, r3
 800d16c:	4b1c      	ldr	r3, [pc, #112]	; (800d1e0 <SX1278_config+0x1f8>)
 800d16e:	5c9b      	ldrb	r3, [r3, r2]
 800d170:	011b      	lsls	r3, r3, #4
 800d172:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	7d1b      	ldrb	r3, [r3, #20]
 800d178:	4619      	mov	r1, r3
 800d17a:	4b1c      	ldr	r3, [pc, #112]	; (800d1ec <SX1278_config+0x204>)
 800d17c:	5c5b      	ldrb	r3, [r3, r1]
 800d17e:	009b      	lsls	r3, r3, #2
 800d180:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800d182:	4413      	add	r3, r2
 800d184:	b2db      	uxtb	r3, r3
 800d186:	461a      	mov	r2, r3
 800d188:	211e      	movs	r1, #30
 800d18a:	6878      	ldr	r0, [r7, #4]
 800d18c:	f7ff fe8e 	bl	800ceac <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 800d190:	2204      	movs	r2, #4
 800d192:	2126      	movs	r1, #38	; 0x26
 800d194:	6878      	ldr	r0, [r7, #4]
 800d196:	f7ff fe89 	bl	800ceac <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 800d19a:	2208      	movs	r2, #8
 800d19c:	211f      	movs	r1, #31
 800d19e:	6878      	ldr	r0, [r7, #4]
 800d1a0:	f7ff fe84 	bl	800ceac <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	2120      	movs	r1, #32
 800d1a8:	6878      	ldr	r0, [r7, #4]
 800d1aa:	f7ff fe7f 	bl	800ceac <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 800d1ae:	2208      	movs	r2, #8
 800d1b0:	2121      	movs	r1, #33	; 0x21
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	f7ff fe7a 	bl	800ceac <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 800d1b8:	2201      	movs	r2, #1
 800d1ba:	2141      	movs	r1, #65	; 0x41
 800d1bc:	6878      	ldr	r0, [r7, #4]
 800d1be:	f7ff fe75 	bl	800ceac <SX1278_SPIWrite>
	module->readBytes = 0;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	SX1278_standby(module); //Entry standby mode
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	f000 f810 	bl	800d1f0 <SX1278_standby>
}
 800d1d0:	bf00      	nop
 800d1d2:	3718      	adds	r7, #24
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	bd80      	pop	{r7, pc}
 800d1d8:	01e84800 	.word	0x01e84800
 800d1dc:	0800fc90 	.word	0x0800fc90
 800d1e0:	0800fc94 	.word	0x0800fc94
 800d1e4:	0800fc9c 	.word	0x0800fc9c
 800d1e8:	0800fca8 	.word	0x0800fca8
 800d1ec:	0800fcac 	.word	0x0800fcac

0800d1f0 <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b082      	sub	sp, #8
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 800d1f8:	2209      	movs	r2, #9
 800d1fa:	2101      	movs	r1, #1
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	f7ff fe55 	bl	800ceac <SX1278_SPIWrite>
	module->status = STANDBY;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	2201      	movs	r2, #1
 800d206:	759a      	strb	r2, [r3, #22]
}
 800d208:	bf00      	nop
 800d20a:	3708      	adds	r7, #8
 800d20c:	46bd      	mov	sp, r7
 800d20e:	bd80      	pop	{r7, pc}

0800d210 <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 800d210:	b580      	push	{r7, lr}
 800d212:	b082      	sub	sp, #8
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 800d218:	2208      	movs	r2, #8
 800d21a:	2101      	movs	r1, #1
 800d21c:	6878      	ldr	r0, [r7, #4]
 800d21e:	f7ff fe45 	bl	800ceac <SX1278_SPIWrite>
	module->status = SLEEP;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	2200      	movs	r2, #0
 800d226:	759a      	strb	r2, [r3, #22]
}
 800d228:	bf00      	nop
 800d22a:	3708      	adds	r7, #8
 800d22c:	46bd      	mov	sp, r7
 800d22e:	bd80      	pop	{r7, pc}

0800d230 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 800d230:	b580      	push	{r7, lr}
 800d232:	b082      	sub	sp, #8
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 800d238:	2288      	movs	r2, #136	; 0x88
 800d23a:	2101      	movs	r1, #1
 800d23c:	6878      	ldr	r0, [r7, #4]
 800d23e:	f7ff fe35 	bl	800ceac <SX1278_SPIWrite>
}
 800d242:	bf00      	nop
 800d244:	3708      	adds	r7, #8
 800d246:	46bd      	mov	sp, r7
 800d248:	bd80      	pop	{r7, pc}

0800d24a <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 800d24a:	b580      	push	{r7, lr}
 800d24c:	b082      	sub	sp, #8
 800d24e:	af00      	add	r7, sp, #0
 800d250:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 800d252:	22ff      	movs	r2, #255	; 0xff
 800d254:	2112      	movs	r1, #18
 800d256:	6878      	ldr	r0, [r7, #4]
 800d258:	f7ff fe28 	bl	800ceac <SX1278_SPIWrite>
}
 800d25c:	bf00      	nop
 800d25e:	3708      	adds	r7, #8
 800d260:	46bd      	mov	sp, r7
 800d262:	bd80      	pop	{r7, pc}

0800d264 <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 800d264:	b580      	push	{r7, lr}
 800d266:	b086      	sub	sp, #24
 800d268:	af00      	add	r7, sp, #0
 800d26a:	60f8      	str	r0, [r7, #12]
 800d26c:	460b      	mov	r3, r1
 800d26e:	607a      	str	r2, [r7, #4]
 800d270:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	7afa      	ldrb	r2, [r7, #11]
 800d276:	755a      	strb	r2, [r3, #21]

	SX1278_config(module);		//Setting base parameter
 800d278:	68f8      	ldr	r0, [r7, #12]
 800d27a:	f7ff feb5 	bl	800cfe8 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 800d27e:	2284      	movs	r2, #132	; 0x84
 800d280:	214d      	movs	r1, #77	; 0x4d
 800d282:	68f8      	ldr	r0, [r7, #12]
 800d284:	f7ff fe12 	bl	800ceac <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 800d288:	22ff      	movs	r2, #255	; 0xff
 800d28a:	2124      	movs	r1, #36	; 0x24
 800d28c:	68f8      	ldr	r0, [r7, #12]
 800d28e:	f7ff fe0d 	bl	800ceac <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 800d292:	2201      	movs	r2, #1
 800d294:	2140      	movs	r1, #64	; 0x40
 800d296:	68f8      	ldr	r0, [r7, #12]
 800d298:	f7ff fe08 	bl	800ceac <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 800d29c:	223f      	movs	r2, #63	; 0x3f
 800d29e:	2111      	movs	r1, #17
 800d2a0:	68f8      	ldr	r0, [r7, #12]
 800d2a2:	f7ff fe03 	bl	800ceac <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 800d2a6:	68f8      	ldr	r0, [r7, #12]
 800d2a8:	f7ff ffcf 	bl	800d24a <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 800d2ac:	7afb      	ldrb	r3, [r7, #11]
 800d2ae:	461a      	mov	r2, r3
 800d2b0:	2122      	movs	r1, #34	; 0x22
 800d2b2:	68f8      	ldr	r0, [r7, #12]
 800d2b4:	f7ff fdfa 	bl	800ceac <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 800d2b8:	210f      	movs	r1, #15
 800d2ba:	68f8      	ldr	r0, [r7, #12]
 800d2bc:	f7ff fdd7 	bl	800ce6e <SX1278_SPIRead>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 800d2c4:	7dfb      	ldrb	r3, [r7, #23]
 800d2c6:	461a      	mov	r2, r3
 800d2c8:	210d      	movs	r1, #13
 800d2ca:	68f8      	ldr	r0, [r7, #12]
 800d2cc:	f7ff fdee 	bl	800ceac <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 800d2d0:	228d      	movs	r2, #141	; 0x8d
 800d2d2:	2101      	movs	r1, #1
 800d2d4:	68f8      	ldr	r0, [r7, #12]
 800d2d6:	f7ff fde9 	bl	800ceac <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	2200      	movs	r2, #0
 800d2de:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 800d2e2:	2118      	movs	r1, #24
 800d2e4:	68f8      	ldr	r0, [r7, #12]
 800d2e6:	f7ff fdc2 	bl	800ce6e <SX1278_SPIRead>
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	f003 0304 	and.w	r3, r3, #4
 800d2f0:	2b04      	cmp	r3, #4
 800d2f2:	d104      	bne.n	800d2fe <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	2203      	movs	r2, #3
 800d2f8:	759a      	strb	r2, [r3, #22]
			return 1;
 800d2fa:	2301      	movs	r3, #1
 800d2fc:	e013      	b.n	800d326 <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	3b01      	subs	r3, #1
 800d302:	607b      	str	r3, [r7, #4]
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d109      	bne.n	800d31e <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	4618      	mov	r0, r3
 800d310:	f000 f973 	bl	800d5fa <SX1278_hw_Reset>
			SX1278_config(module);
 800d314:	68f8      	ldr	r0, [r7, #12]
 800d316:	f7ff fe67 	bl	800cfe8 <SX1278_config>
			return 0;
 800d31a:	2300      	movs	r3, #0
 800d31c:	e003      	b.n	800d326 <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 800d31e:	2001      	movs	r0, #1
 800d320:	f000 f9d5 	bl	800d6ce <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 800d324:	e7dd      	b.n	800d2e2 <SX1278_LoRaEntryRx+0x7e>
	}
}
 800d326:	4618      	mov	r0, r3
 800d328:	3718      	adds	r7, #24
 800d32a:	46bd      	mov	sp, r7
 800d32c:	bd80      	pop	{r7, pc}

0800d32e <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t *module) {
 800d32e:	b580      	push	{r7, lr}
 800d330:	b084      	sub	sp, #16
 800d332:	af00      	add	r7, sp, #0
 800d334:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	4618      	mov	r0, r3
 800d33c:	f000 f9d2 	bl	800d6e4 <SX1278_hw_GetDIO0>
 800d340:	4603      	mov	r3, r0
 800d342:	2b00      	cmp	r3, #0
 800d344:	d030      	beq.n	800d3a8 <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	3317      	adds	r3, #23
 800d34a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d34e:	2100      	movs	r1, #0
 800d350:	4618      	mov	r0, r3
 800d352:	f000 fd9d 	bl	800de90 <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 800d356:	2110      	movs	r1, #16
 800d358:	6878      	ldr	r0, [r7, #4]
 800d35a:	f7ff fd88 	bl	800ce6e <SX1278_SPIRead>
 800d35e:	4603      	mov	r3, r0
 800d360:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 800d362:	7bbb      	ldrb	r3, [r7, #14]
 800d364:	461a      	mov	r2, r3
 800d366:	210d      	movs	r1, #13
 800d368:	6878      	ldr	r0, [r7, #4]
 800d36a:	f7ff fd9f 	bl	800ceac <SX1278_SPIWrite>

		if (module->LoRa_SF == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	7c5b      	ldrb	r3, [r3, #17]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d103      	bne.n	800d37e <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	7d5b      	ldrb	r3, [r3, #21]
 800d37a:	73fb      	strb	r3, [r7, #15]
 800d37c:	e005      	b.n	800d38a <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 800d37e:	2113      	movs	r1, #19
 800d380:	6878      	ldr	r0, [r7, #4]
 800d382:	f7ff fd74 	bl	800ce6e <SX1278_SPIRead>
 800d386:	4603      	mov	r3, r0
 800d388:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	f103 0217 	add.w	r2, r3, #23
 800d390:	7bfb      	ldrb	r3, [r7, #15]
 800d392:	2100      	movs	r1, #0
 800d394:	6878      	ldr	r0, [r7, #4]
 800d396:	f7ff fdb2 	bl	800cefe <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	7bfa      	ldrb	r2, [r7, #15]
 800d39e:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
		SX1278_clearLoRaIrq(module);
 800d3a2:	6878      	ldr	r0, [r7, #4]
 800d3a4:	f7ff ff51 	bl	800d24a <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
}
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	3710      	adds	r7, #16
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	bd80      	pop	{r7, pc}

0800d3b6 <SX1278_LoRaEntryTx>:

int SX1278_LoRaEntryTx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 800d3b6:	b580      	push	{r7, lr}
 800d3b8:	b086      	sub	sp, #24
 800d3ba:	af00      	add	r7, sp, #0
 800d3bc:	60f8      	str	r0, [r7, #12]
 800d3be:	460b      	mov	r3, r1
 800d3c0:	607a      	str	r2, [r7, #4]
 800d3c2:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	7afa      	ldrb	r2, [r7, #11]
 800d3c8:	755a      	strb	r2, [r3, #21]

	SX1278_config(module); //setting base parameter
 800d3ca:	68f8      	ldr	r0, [r7, #12]
 800d3cc:	f7ff fe0c 	bl	800cfe8 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 800d3d0:	2287      	movs	r2, #135	; 0x87
 800d3d2:	214d      	movs	r1, #77	; 0x4d
 800d3d4:	68f8      	ldr	r0, [r7, #12]
 800d3d6:	f7ff fd69 	bl	800ceac <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 800d3da:	2200      	movs	r2, #0
 800d3dc:	2124      	movs	r1, #36	; 0x24
 800d3de:	68f8      	ldr	r0, [r7, #12]
 800d3e0:	f7ff fd64 	bl	800ceac <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 800d3e4:	2241      	movs	r2, #65	; 0x41
 800d3e6:	2140      	movs	r1, #64	; 0x40
 800d3e8:	68f8      	ldr	r0, [r7, #12]
 800d3ea:	f7ff fd5f 	bl	800ceac <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 800d3ee:	68f8      	ldr	r0, [r7, #12]
 800d3f0:	f7ff ff2b 	bl	800d24a <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 800d3f4:	22f7      	movs	r2, #247	; 0xf7
 800d3f6:	2111      	movs	r1, #17
 800d3f8:	68f8      	ldr	r0, [r7, #12]
 800d3fa:	f7ff fd57 	bl	800ceac <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 800d3fe:	7afb      	ldrb	r3, [r7, #11]
 800d400:	461a      	mov	r2, r3
 800d402:	2122      	movs	r1, #34	; 0x22
 800d404:	68f8      	ldr	r0, [r7, #12]
 800d406:	f7ff fd51 	bl	800ceac <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 800d40a:	210e      	movs	r1, #14
 800d40c:	68f8      	ldr	r0, [r7, #12]
 800d40e:	f7ff fd2e 	bl	800ce6e <SX1278_SPIRead>
 800d412:	4603      	mov	r3, r0
 800d414:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 800d416:	7dfb      	ldrb	r3, [r7, #23]
 800d418:	461a      	mov	r2, r3
 800d41a:	210d      	movs	r1, #13
 800d41c:	68f8      	ldr	r0, [r7, #12]
 800d41e:	f7ff fd45 	bl	800ceac <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 800d422:	2122      	movs	r1, #34	; 0x22
 800d424:	68f8      	ldr	r0, [r7, #12]
 800d426:	f7ff fd22 	bl	800ce6e <SX1278_SPIRead>
 800d42a:	4603      	mov	r3, r0
 800d42c:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 800d42e:	7dba      	ldrb	r2, [r7, #22]
 800d430:	7afb      	ldrb	r3, [r7, #11]
 800d432:	429a      	cmp	r2, r3
 800d434:	d104      	bne.n	800d440 <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	2202      	movs	r2, #2
 800d43a:	759a      	strb	r2, [r3, #22]
			return 1;
 800d43c:	2301      	movs	r3, #1
 800d43e:	e00e      	b.n	800d45e <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	3b01      	subs	r3, #1
 800d444:	607b      	str	r3, [r7, #4]
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d1ea      	bne.n	800d422 <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	4618      	mov	r0, r3
 800d452:	f000 f8d2 	bl	800d5fa <SX1278_hw_Reset>
			SX1278_config(module);
 800d456:	68f8      	ldr	r0, [r7, #12]
 800d458:	f7ff fdc6 	bl	800cfe8 <SX1278_config>
			return 0;
 800d45c:	2300      	movs	r3, #0
		}
	}
}
 800d45e:	4618      	mov	r0, r3
 800d460:	3718      	adds	r7, #24
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}

0800d466 <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t *module, uint8_t *txBuffer, uint8_t length,
		uint32_t timeout) {
 800d466:	b580      	push	{r7, lr}
 800d468:	b084      	sub	sp, #16
 800d46a:	af00      	add	r7, sp, #0
 800d46c:	60f8      	str	r0, [r7, #12]
 800d46e:	60b9      	str	r1, [r7, #8]
 800d470:	603b      	str	r3, [r7, #0]
 800d472:	4613      	mov	r3, r2
 800d474:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 800d476:	79fb      	ldrb	r3, [r7, #7]
 800d478:	68ba      	ldr	r2, [r7, #8]
 800d47a:	2100      	movs	r1, #0
 800d47c:	68f8      	ldr	r0, [r7, #12]
 800d47e:	f7ff fd77 	bl	800cf70 <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 800d482:	228b      	movs	r2, #139	; 0x8b
 800d484:	2101      	movs	r1, #1
 800d486:	68f8      	ldr	r0, [r7, #12]
 800d488:	f7ff fd10 	bl	800ceac <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	4618      	mov	r0, r3
 800d492:	f000 f927 	bl	800d6e4 <SX1278_hw_GetDIO0>
 800d496:	4603      	mov	r3, r0
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d00b      	beq.n	800d4b4 <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 800d49c:	2112      	movs	r1, #18
 800d49e:	68f8      	ldr	r0, [r7, #12]
 800d4a0:	f7ff fce5 	bl	800ce6e <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 800d4a4:	68f8      	ldr	r0, [r7, #12]
 800d4a6:	f7ff fed0 	bl	800d24a <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 800d4aa:	68f8      	ldr	r0, [r7, #12]
 800d4ac:	f7ff fea0 	bl	800d1f0 <SX1278_standby>
			return 1;
 800d4b0:	2301      	movs	r3, #1
 800d4b2:	e013      	b.n	800d4dc <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	3b01      	subs	r3, #1
 800d4b8:	603b      	str	r3, [r7, #0]
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d109      	bne.n	800d4d4 <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	f000 f898 	bl	800d5fa <SX1278_hw_Reset>
			SX1278_config(module);
 800d4ca:	68f8      	ldr	r0, [r7, #12]
 800d4cc:	f7ff fd8c 	bl	800cfe8 <SX1278_config>
			return 0;
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	e003      	b.n	800d4dc <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 800d4d4:	2001      	movs	r0, #1
 800d4d6:	f000 f8fa 	bl	800d6ce <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 800d4da:	e7d7      	b.n	800d48c <SX1278_LoRaTxPacket+0x26>
	}
}
 800d4dc:	4618      	mov	r0, r3
 800d4de:	3710      	adds	r7, #16
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}

0800d4e4 <SX1278_init>:

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b084      	sub	sp, #16
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	60f8      	str	r0, [r7, #12]
 800d4ec:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	f000 f854 	bl	800d5a2 <SX1278_hw_init>
	module->frequency = frequency;
 800d4fa:	68f9      	ldr	r1, [r7, #12]
 800d4fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d500:	e9c1 2302 	strd	r2, r3, [r1, #8]
	module->power = power;
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	7e3a      	ldrb	r2, [r7, #24]
 800d508:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = LoRa_SF;
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	7f3a      	ldrb	r2, [r7, #28]
 800d50e:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	f897 2020 	ldrb.w	r2, [r7, #32]
 800d516:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800d51e:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d526:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800d52e:	755a      	strb	r2, [r3, #21]
	SX1278_config(module);
 800d530:	68f8      	ldr	r0, [r7, #12]
 800d532:	f7ff fd59 	bl	800cfe8 <SX1278_config>
}
 800d536:	bf00      	nop
 800d538:	3710      	adds	r7, #16
 800d53a:	46bd      	mov	sp, r7
 800d53c:	bd80      	pop	{r7, pc}

0800d53e <SX1278_available>:

int SX1278_receive(SX1278_t *module, uint8_t length, uint32_t timeout) {
	return SX1278_LoRaEntryRx(module, length, timeout);
}

uint8_t SX1278_available(SX1278_t *module) {
 800d53e:	b580      	push	{r7, lr}
 800d540:	b082      	sub	sp, #8
 800d542:	af00      	add	r7, sp, #0
 800d544:	6078      	str	r0, [r7, #4]
	return SX1278_LoRaRxPacket(module);
 800d546:	6878      	ldr	r0, [r7, #4]
 800d548:	f7ff fef1 	bl	800d32e <SX1278_LoRaRxPacket>
 800d54c:	4603      	mov	r3, r0
}
 800d54e:	4618      	mov	r0, r3
 800d550:	3708      	adds	r7, #8
 800d552:	46bd      	mov	sp, r7
 800d554:	bd80      	pop	{r7, pc}

0800d556 <SX1278_read>:

uint8_t SX1278_read(SX1278_t *module, uint8_t *rxBuf, uint8_t length) {
 800d556:	b580      	push	{r7, lr}
 800d558:	b084      	sub	sp, #16
 800d55a:	af00      	add	r7, sp, #0
 800d55c:	60f8      	str	r0, [r7, #12]
 800d55e:	60b9      	str	r1, [r7, #8]
 800d560:	4613      	mov	r3, r2
 800d562:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 800d56a:	79fa      	ldrb	r2, [r7, #7]
 800d56c:	429a      	cmp	r2, r3
 800d56e:	d003      	beq.n	800d578 <SX1278_read+0x22>
		length = module->readBytes;
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 800d576:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	3317      	adds	r3, #23
 800d57c:	79fa      	ldrb	r2, [r7, #7]
 800d57e:	4619      	mov	r1, r3
 800d580:	68b8      	ldr	r0, [r7, #8]
 800d582:	f000 fd21 	bl	800dfc8 <memcpy>
	rxBuf[length] = '\0';
 800d586:	79fb      	ldrb	r3, [r7, #7]
 800d588:	68ba      	ldr	r2, [r7, #8]
 800d58a:	4413      	add	r3, r2
 800d58c:	2200      	movs	r2, #0
 800d58e:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	2200      	movs	r2, #0
 800d594:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	return length;
 800d598:	79fb      	ldrb	r3, [r7, #7]
}
 800d59a:	4618      	mov	r0, r3
 800d59c:	3710      	adds	r7, #16
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	bd80      	pop	{r7, pc}

0800d5a2 <SX1278_hw_init>:
#include <string.h>

#include "gpio.h"
#include "spi.h"

__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 800d5a2:	b580      	push	{r7, lr}
 800d5a4:	b082      	sub	sp, #8
 800d5a6:	af00      	add	r7, sp, #0
 800d5a8:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 800d5aa:	2101      	movs	r1, #1
 800d5ac:	6878      	ldr	r0, [r7, #4]
 800d5ae:	f000 f80d 	bl	800d5cc <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	6858      	ldr	r0, [r3, #4]
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	b29b      	uxth	r3, r3
 800d5bc:	2201      	movs	r2, #1
 800d5be:	4619      	mov	r1, r3
 800d5c0:	f7f5 fa9e 	bl	8002b00 <HAL_GPIO_WritePin>
}
 800d5c4:	bf00      	nop
 800d5c6:	3708      	adds	r7, #8
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bd80      	pop	{r7, pc}

0800d5cc <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b082      	sub	sp, #8
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
 800d5d4:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	6958      	ldr	r0, [r3, #20]
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	691b      	ldr	r3, [r3, #16]
 800d5de:	b299      	uxth	r1, r3
 800d5e0:	683b      	ldr	r3, [r7, #0]
 800d5e2:	2b01      	cmp	r3, #1
 800d5e4:	bf0c      	ite	eq
 800d5e6:	2301      	moveq	r3, #1
 800d5e8:	2300      	movne	r3, #0
 800d5ea:	b2db      	uxtb	r3, r3
 800d5ec:	461a      	mov	r2, r3
 800d5ee:	f7f5 fa87 	bl	8002b00 <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 800d5f2:	bf00      	nop
 800d5f4:	3708      	adds	r7, #8
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	bd80      	pop	{r7, pc}

0800d5fa <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 800d5fa:	b580      	push	{r7, lr}
 800d5fc:	b082      	sub	sp, #8
 800d5fe:	af00      	add	r7, sp, #0
 800d600:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 800d602:	2101      	movs	r1, #1
 800d604:	6878      	ldr	r0, [r7, #4]
 800d606:	f7ff ffe1 	bl	800d5cc <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	6858      	ldr	r0, [r3, #4]
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	b29b      	uxth	r3, r3
 800d614:	2200      	movs	r2, #0
 800d616:	4619      	mov	r1, r3
 800d618:	f7f5 fa72 	bl	8002b00 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 800d61c:	2001      	movs	r0, #1
 800d61e:	f000 f856 	bl	800d6ce <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	6858      	ldr	r0, [r3, #4]
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	b29b      	uxth	r3, r3
 800d62c:	2201      	movs	r2, #1
 800d62e:	4619      	mov	r1, r3
 800d630:	f7f5 fa66 	bl	8002b00 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 800d634:	2064      	movs	r0, #100	; 0x64
 800d636:	f000 f84a 	bl	800d6ce <SX1278_hw_DelayMs>
}
 800d63a:	bf00      	nop
 800d63c:	3708      	adds	r7, #8
 800d63e:	46bd      	mov	sp, r7
 800d640:	bd80      	pop	{r7, pc}

0800d642 <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 800d642:	b580      	push	{r7, lr}
 800d644:	b082      	sub	sp, #8
 800d646:	af00      	add	r7, sp, #0
 800d648:	6078      	str	r0, [r7, #4]
 800d64a:	460b      	mov	r3, r1
 800d64c:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 800d64e:	2100      	movs	r1, #0
 800d650:	6878      	ldr	r0, [r7, #4]
 800d652:	f7ff ffbb 	bl	800d5cc <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	6998      	ldr	r0, [r3, #24]
 800d65a:	1cf9      	adds	r1, r7, #3
 800d65c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d660:	2201      	movs	r2, #1
 800d662:	f7f7 fb16 	bl	8004c92 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 800d666:	bf00      	nop
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	699b      	ldr	r3, [r3, #24]
 800d66c:	4618      	mov	r0, r3
 800d66e:	f7f7 fe03 	bl	8005278 <HAL_SPI_GetState>
 800d672:	4603      	mov	r3, r0
 800d674:	2b01      	cmp	r3, #1
 800d676:	d1f7      	bne.n	800d668 <SX1278_hw_SPICommand+0x26>
		;
}
 800d678:	bf00      	nop
 800d67a:	bf00      	nop
 800d67c:	3708      	adds	r7, #8
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}

0800d682 <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 800d682:	b580      	push	{r7, lr}
 800d684:	b086      	sub	sp, #24
 800d686:	af02      	add	r7, sp, #8
 800d688:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 800d68a:	2300      	movs	r3, #0
 800d68c:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 800d68e:	2300      	movs	r3, #0
 800d690:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 800d692:	2100      	movs	r1, #0
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	f7ff ff99 	bl	800d5cc <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	6998      	ldr	r0, [r3, #24]
 800d69e:	f107 020e 	add.w	r2, r7, #14
 800d6a2:	f107 010f 	add.w	r1, r7, #15
 800d6a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d6aa:	9300      	str	r3, [sp, #0]
 800d6ac:	2301      	movs	r3, #1
 800d6ae:	f7f7 fc33 	bl	8004f18 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 800d6b2:	bf00      	nop
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	699b      	ldr	r3, [r3, #24]
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	f7f7 fddd 	bl	8005278 <HAL_SPI_GetState>
 800d6be:	4603      	mov	r3, r0
 800d6c0:	2b01      	cmp	r3, #1
 800d6c2:	d1f7      	bne.n	800d6b4 <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 800d6c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	3710      	adds	r7, #16
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bd80      	pop	{r7, pc}

0800d6ce <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 800d6ce:	b580      	push	{r7, lr}
 800d6d0:	b082      	sub	sp, #8
 800d6d2:	af00      	add	r7, sp, #0
 800d6d4:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 800d6d6:	6878      	ldr	r0, [r7, #4]
 800d6d8:	f7f4 fece 	bl	8002478 <HAL_Delay>
}
 800d6dc:	bf00      	nop
 800d6de:	3708      	adds	r7, #8
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	bd80      	pop	{r7, pc}

0800d6e4 <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b082      	sub	sp, #8
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	68da      	ldr	r2, [r3, #12]
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	689b      	ldr	r3, [r3, #8]
 800d6f4:	b29b      	uxth	r3, r3
 800d6f6:	4619      	mov	r1, r3
 800d6f8:	4610      	mov	r0, r2
 800d6fa:	f7f5 f9e9 	bl	8002ad0 <HAL_GPIO_ReadPin>
 800d6fe:	4603      	mov	r3, r0
 800d700:	2b01      	cmp	r3, #1
 800d702:	bf0c      	ite	eq
 800d704:	2301      	moveq	r3, #1
 800d706:	2300      	movne	r3, #0
 800d708:	b2db      	uxtb	r3, r3
}
 800d70a:	4618      	mov	r0, r3
 800d70c:	3708      	adds	r7, #8
 800d70e:	46bd      	mov	sp, r7
 800d710:	bd80      	pop	{r7, pc}
	...

0800d714 <UGV_cameraServoInit>:

static TIM_HandleTypeDef * hServoTim;
static uint32_t servoChannel;

void UGV_cameraServoInit(TIM_HandleTypeDef * htim, uint32_t channel)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b084      	sub	sp, #16
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
 800d71c:	6039      	str	r1, [r7, #0]
	hServoTim = htim;
 800d71e:	4a0e      	ldr	r2, [pc, #56]	; (800d758 <UGV_cameraServoInit+0x44>)
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	6013      	str	r3, [r2, #0]
	servoChannel = channel;
 800d724:	4a0d      	ldr	r2, [pc, #52]	; (800d75c <UGV_cameraServoInit+0x48>)
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	6013      	str	r3, [r2, #0]
	uint8_t channelOffset = (servoChannel / 4);
 800d72a:	4b0c      	ldr	r3, [pc, #48]	; (800d75c <UGV_cameraServoInit+0x48>)
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	089b      	lsrs	r3, r3, #2
 800d730:	73fb      	strb	r3, [r7, #15]

	HAL_TIM_PWM_Start(htim, channel);
 800d732:	6839      	ldr	r1, [r7, #0]
 800d734:	6878      	ldr	r0, [r7, #4]
 800d736:	f7f7 ffa3 	bl	8005680 <HAL_TIM_PWM_Start>
	*((uint32_t*)((&hServoTim->Instance->CCR1) + channelOffset)) = CAMERA_RESET_CCR1_VAL;
 800d73a:	4b07      	ldr	r3, [pc, #28]	; (800d758 <UGV_cameraServoInit+0x44>)
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d744:	7bfb      	ldrb	r3, [r7, #15]
 800d746:	009b      	lsls	r3, r3, #2
 800d748:	4413      	add	r3, r2
 800d74a:	223c      	movs	r2, #60	; 0x3c
 800d74c:	601a      	str	r2, [r3, #0]

}
 800d74e:	bf00      	nop
 800d750:	3710      	adds	r7, #16
 800d752:	46bd      	mov	sp, r7
 800d754:	bd80      	pop	{r7, pc}
 800d756:	bf00      	nop
 800d758:	20005160 	.word	0x20005160
 800d75c:	20005164 	.word	0x20005164

0800d760 <init_PEC15_Table>:

uint16_t pec15Table[256];


void init_PEC15_Table()
{
 800d760:	b480      	push	{r7}
 800d762:	b083      	sub	sp, #12
 800d764:	af00      	add	r7, sp, #0
    uint16_t remainder;
    uint16_t i;
    uint16_t bit;
    for (i = 0; i < 256; i++)
 800d766:	2300      	movs	r3, #0
 800d768:	80bb      	strh	r3, [r7, #4]
 800d76a:	e025      	b.n	800d7b8 <init_PEC15_Table+0x58>
    {
        remainder = i << 7;
 800d76c:	88bb      	ldrh	r3, [r7, #4]
 800d76e:	01db      	lsls	r3, r3, #7
 800d770:	80fb      	strh	r3, [r7, #6]
        for (bit = 8; bit > 0; --bit)
 800d772:	2308      	movs	r3, #8
 800d774:	807b      	strh	r3, [r7, #2]
 800d776:	e014      	b.n	800d7a2 <init_PEC15_Table+0x42>
        {
            if (remainder & 0x4000)
 800d778:	88fb      	ldrh	r3, [r7, #6]
 800d77a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d009      	beq.n	800d796 <init_PEC15_Table+0x36>
            {
                remainder = ((remainder << 1));
 800d782:	88fb      	ldrh	r3, [r7, #6]
 800d784:	005b      	lsls	r3, r3, #1
 800d786:	80fb      	strh	r3, [r7, #6]
                remainder = (remainder ^ CRC15_POLY);
 800d788:	88fb      	ldrh	r3, [r7, #6]
 800d78a:	f483 438b 	eor.w	r3, r3, #17792	; 0x4580
 800d78e:	f083 0319 	eor.w	r3, r3, #25
 800d792:	80fb      	strh	r3, [r7, #6]
 800d794:	e002      	b.n	800d79c <init_PEC15_Table+0x3c>
            }
            else
            {
                remainder = ((remainder << 1));
 800d796:	88fb      	ldrh	r3, [r7, #6]
 800d798:	005b      	lsls	r3, r3, #1
 800d79a:	80fb      	strh	r3, [r7, #6]
        for (bit = 8; bit > 0; --bit)
 800d79c:	887b      	ldrh	r3, [r7, #2]
 800d79e:	3b01      	subs	r3, #1
 800d7a0:	807b      	strh	r3, [r7, #2]
 800d7a2:	887b      	ldrh	r3, [r7, #2]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d1e7      	bne.n	800d778 <init_PEC15_Table+0x18>
            }
        }
        pec15Table[i] = remainder & 0xFFFF;
 800d7a8:	88bb      	ldrh	r3, [r7, #4]
 800d7aa:	4908      	ldr	r1, [pc, #32]	; (800d7cc <init_PEC15_Table+0x6c>)
 800d7ac:	88fa      	ldrh	r2, [r7, #6]
 800d7ae:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (i = 0; i < 256; i++)
 800d7b2:	88bb      	ldrh	r3, [r7, #4]
 800d7b4:	3301      	adds	r3, #1
 800d7b6:	80bb      	strh	r3, [r7, #4]
 800d7b8:	88bb      	ldrh	r3, [r7, #4]
 800d7ba:	2bff      	cmp	r3, #255	; 0xff
 800d7bc:	d9d6      	bls.n	800d76c <init_PEC15_Table+0xc>
    }
}
 800d7be:	bf00      	nop
 800d7c0:	bf00      	nop
 800d7c2:	370c      	adds	r7, #12
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ca:	4770      	bx	lr
 800d7cc:	20005168 	.word	0x20005168

0800d7d0 <AE_pec15>:

uint16_t AE_pec15(uint8_t* data, uint16_t len)
{
 800d7d0:	b480      	push	{r7}
 800d7d2:	b087      	sub	sp, #28
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
 800d7d8:	460b      	mov	r3, r1
 800d7da:	807b      	strh	r3, [r7, #2]
    uint16_t remainder, address;
    remainder = 16;//PEC seed
 800d7dc:	2310      	movs	r3, #16
 800d7de:	82fb      	strh	r3, [r7, #22]
    int i;
    for (i= 0; i < len; i++)
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	613b      	str	r3, [r7, #16]
 800d7e4:	e019      	b.n	800d81a <AE_pec15+0x4a>
         * @brief history of data[i*2 + 1]
         * @NOTE TMS570Ls spi working with 16bit variables so we need to
         * @Note cast to uint8_t so we take the 2 offset but
         * @Note TMS570 use big endien memory layout so we have to add +1
         */
        address = ((remainder >> 7) ^ data[i]) & 0xff;//calculate PEC table address remainder = (remainder << 8 ) ^ pec15Table[address];
 800d7e6:	8afb      	ldrh	r3, [r7, #22]
 800d7e8:	09db      	lsrs	r3, r3, #7
 800d7ea:	b29a      	uxth	r2, r3
 800d7ec:	693b      	ldr	r3, [r7, #16]
 800d7ee:	6879      	ldr	r1, [r7, #4]
 800d7f0:	440b      	add	r3, r1
 800d7f2:	781b      	ldrb	r3, [r3, #0]
 800d7f4:	b29b      	uxth	r3, r3
 800d7f6:	4053      	eors	r3, r2
 800d7f8:	b29b      	uxth	r3, r3
 800d7fa:	b2db      	uxtb	r3, r3
 800d7fc:	81fb      	strh	r3, [r7, #14]
        remainder = (remainder << 8) ^ pec15Table[address];
 800d7fe:	8afb      	ldrh	r3, [r7, #22]
 800d800:	021b      	lsls	r3, r3, #8
 800d802:	b21a      	sxth	r2, r3
 800d804:	89fb      	ldrh	r3, [r7, #14]
 800d806:	490b      	ldr	r1, [pc, #44]	; (800d834 <AE_pec15+0x64>)
 800d808:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800d80c:	b21b      	sxth	r3, r3
 800d80e:	4053      	eors	r3, r2
 800d810:	b21b      	sxth	r3, r3
 800d812:	82fb      	strh	r3, [r7, #22]
    for (i= 0; i < len; i++)
 800d814:	693b      	ldr	r3, [r7, #16]
 800d816:	3301      	adds	r3, #1
 800d818:	613b      	str	r3, [r7, #16]
 800d81a:	887b      	ldrh	r3, [r7, #2]
 800d81c:	693a      	ldr	r2, [r7, #16]
 800d81e:	429a      	cmp	r2, r3
 800d820:	dbe1      	blt.n	800d7e6 <AE_pec15+0x16>
    }
    return (remainder * 2);//The CRC15 has a 0 in the LSB so the final value must be multiplied by 2
 800d822:	8afb      	ldrh	r3, [r7, #22]
 800d824:	005b      	lsls	r3, r3, #1
 800d826:	b29b      	uxth	r3, r3
}
 800d828:	4618      	mov	r0, r3
 800d82a:	371c      	adds	r7, #28
 800d82c:	46bd      	mov	sp, r7
 800d82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d832:	4770      	bx	lr
 800d834:	20005168 	.word	0x20005168

0800d838 <UGV_ledControl>:

#include "ledControl.h"
#include "main.h"

LED_STATE UGV_ledControl(RcChannel * rcChannel)
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b084      	sub	sp, #16
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
	LED_STATE ledState = LEDS_OFF;
 800d840:	2300      	movs	r3, #0
 800d842:	73fb      	strb	r3, [r7, #15]

	if(rcChannel->channel4 < ( LID_LED_MIDDLE - LID_LED_ERROR))
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	88db      	ldrh	r3, [r3, #6]
 800d848:	f240 52c2 	movw	r2, #1474	; 0x5c2
 800d84c:	4293      	cmp	r3, r2
 800d84e:	d80e      	bhi.n	800d86e <UGV_ledControl+0x36>
	{
		HAL_GPIO_WritePin(LID_LED_GPIO_Port, LID_LED_Pin, 0);
 800d850:	2200      	movs	r2, #0
 800d852:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d856:	481a      	ldr	r0, [pc, #104]	; (800d8c0 <UGV_ledControl+0x88>)
 800d858:	f7f5 f952 	bl	8002b00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 800d85c:	2200      	movs	r2, #0
 800d85e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d862:	4817      	ldr	r0, [pc, #92]	; (800d8c0 <UGV_ledControl+0x88>)
 800d864:	f7f5 f94c 	bl	8002b00 <HAL_GPIO_WritePin>
		ledState = LEDS_OFF;
 800d868:	2300      	movs	r3, #0
 800d86a:	73fb      	strb	r3, [r7, #15]
 800d86c:	e022      	b.n	800d8b4 <UGV_ledControl+0x7c>
	}
	else if (rcChannel->channel4 < ( LID_LED_MIDDLE + LID_LED_ERROR))
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	88db      	ldrh	r3, [r3, #6]
 800d872:	f240 6226 	movw	r2, #1574	; 0x626
 800d876:	4293      	cmp	r3, r2
 800d878:	d80e      	bhi.n	800d898 <UGV_ledControl+0x60>
	{
		HAL_GPIO_WritePin(LID_LED_GPIO_Port, LID_LED_Pin, 0);
 800d87a:	2200      	movs	r2, #0
 800d87c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d880:	480f      	ldr	r0, [pc, #60]	; (800d8c0 <UGV_ledControl+0x88>)
 800d882:	f7f5 f93d 	bl	8002b00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 800d886:	2201      	movs	r2, #1
 800d888:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d88c:	480c      	ldr	r0, [pc, #48]	; (800d8c0 <UGV_ledControl+0x88>)
 800d88e:	f7f5 f937 	bl	8002b00 <HAL_GPIO_WritePin>
		ledState = FRONT_LED_ON;
 800d892:	2301      	movs	r3, #1
 800d894:	73fb      	strb	r3, [r7, #15]
 800d896:	e00d      	b.n	800d8b4 <UGV_ledControl+0x7c>
	}
	else
	{
		HAL_GPIO_WritePin(LID_LED_GPIO_Port, LID_LED_Pin, 1);
 800d898:	2201      	movs	r2, #1
 800d89a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d89e:	4808      	ldr	r0, [pc, #32]	; (800d8c0 <UGV_ledControl+0x88>)
 800d8a0:	f7f5 f92e 	bl	8002b00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 800d8a4:	2201      	movs	r2, #1
 800d8a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d8aa:	4805      	ldr	r0, [pc, #20]	; (800d8c0 <UGV_ledControl+0x88>)
 800d8ac:	f7f5 f928 	bl	8002b00 <HAL_GPIO_WritePin>
		ledState = ALL_LED_ON;
 800d8b0:	2302      	movs	r3, #2
 800d8b2:	73fb      	strb	r3, [r7, #15]
	}

	return ledState;
 800d8b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	3710      	adds	r7, #16
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	bd80      	pop	{r7, pc}
 800d8be:	bf00      	nop
 800d8c0:	40020000 	.word	0x40020000

0800d8c4 <ugvMain>:
static void qmcInit(I2C_HandleTypeDef *hi2c);
static void sx1278Init(SX1278_hw_t * sx1278Hw, SX1278_t * sx1278);

//<<<<<<<<<<<<<<<<<<-FUNCTIONS->>>>>>>>>>>>>>>>>>>>>>>
void ugvMain(void)
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b086      	sub	sp, #24
 800d8c8:	af02      	add	r7, sp, #8
	BaseType_t taskStatus = pdFAIL;
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	60fb      	str	r3, [r7, #12]

	ugvSystemInit();			//!< initialize the peripherals and queue
 800d8ce:	f000 f861 	bl	800d994 <ugvSystemInit>

	/*task for the motor drive*/
	taskStatus = xTaskCreate(taskSensor, "TaskMotDrive",
 800d8d2:	4b28      	ldr	r3, [pc, #160]	; (800d974 <ugvMain+0xb0>)
 800d8d4:	9301      	str	r3, [sp, #4]
 800d8d6:	2332      	movs	r3, #50	; 0x32
 800d8d8:	9300      	str	r3, [sp, #0]
 800d8da:	2300      	movs	r3, #0
 800d8dc:	2280      	movs	r2, #128	; 0x80
 800d8de:	4926      	ldr	r1, [pc, #152]	; (800d978 <ugvMain+0xb4>)
 800d8e0:	4826      	ldr	r0, [pc, #152]	; (800d97c <ugvMain+0xb8>)
 800d8e2:	f7fa fe3a 	bl	800855a <xTaskCreate>
 800d8e6:	60f8      	str	r0, [r7, #12]
							 configMINIMAL_STACK_SIZE, NULL,
							 TASK_SENSOR_PRIORITY, &hTaskSensor_s);
	configASSERT(taskStatus);
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d10a      	bne.n	800d904 <ugvMain+0x40>
	__asm volatile
 800d8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8f2:	f383 8811 	msr	BASEPRI, r3
 800d8f6:	f3bf 8f6f 	isb	sy
 800d8fa:	f3bf 8f4f 	dsb	sy
 800d8fe:	60bb      	str	r3, [r7, #8]
}
 800d900:	bf00      	nop
 800d902:	e7fe      	b.n	800d902 <ugvMain+0x3e>

	taskStatus = xTaskCreate(taskMotorDrive, "TaskMotDrive",
 800d904:	4b1e      	ldr	r3, [pc, #120]	; (800d980 <ugvMain+0xbc>)
 800d906:	9301      	str	r3, [sp, #4]
 800d908:	2328      	movs	r3, #40	; 0x28
 800d90a:	9300      	str	r3, [sp, #0]
 800d90c:	2300      	movs	r3, #0
 800d90e:	2280      	movs	r2, #128	; 0x80
 800d910:	4919      	ldr	r1, [pc, #100]	; (800d978 <ugvMain+0xb4>)
 800d912:	481c      	ldr	r0, [pc, #112]	; (800d984 <ugvMain+0xc0>)
 800d914:	f7fa fe21 	bl	800855a <xTaskCreate>
 800d918:	60f8      	str	r0, [r7, #12]
							 configMINIMAL_STACK_SIZE, NULL,
							 TASK_MOT_DRIVE_PRIORITY, &hTaskMotDrive_s);
	configASSERT(taskStatus);
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d10a      	bne.n	800d936 <ugvMain+0x72>
	__asm volatile
 800d920:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d924:	f383 8811 	msr	BASEPRI, r3
 800d928:	f3bf 8f6f 	isb	sy
 800d92c:	f3bf 8f4f 	dsb	sy
 800d930:	607b      	str	r3, [r7, #4]
}
 800d932:	bf00      	nop
 800d934:	e7fe      	b.n	800d934 <ugvMain+0x70>

	/*task for the lora communication*/
	taskStatus = xTaskCreate(taskLoraCom, "TaskLoraCom",
 800d936:	4b14      	ldr	r3, [pc, #80]	; (800d988 <ugvMain+0xc4>)
 800d938:	9301      	str	r3, [sp, #4]
 800d93a:	231c      	movs	r3, #28
 800d93c:	9300      	str	r3, [sp, #0]
 800d93e:	2300      	movs	r3, #0
 800d940:	2280      	movs	r2, #128	; 0x80
 800d942:	4912      	ldr	r1, [pc, #72]	; (800d98c <ugvMain+0xc8>)
 800d944:	4812      	ldr	r0, [pc, #72]	; (800d990 <ugvMain+0xcc>)
 800d946:	f7fa fe08 	bl	800855a <xTaskCreate>
 800d94a:	60f8      	str	r0, [r7, #12]
							 configMINIMAL_STACK_SIZE, NULL,
							 TASK_LORA_COM_PRIORITY, &hTaskLoraCom_s);
	configASSERT(taskStatus);
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d10a      	bne.n	800d968 <ugvMain+0xa4>
	__asm volatile
 800d952:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d956:	f383 8811 	msr	BASEPRI, r3
 800d95a:	f3bf 8f6f 	isb	sy
 800d95e:	f3bf 8f4f 	dsb	sy
 800d962:	603b      	str	r3, [r7, #0]
}
 800d964:	bf00      	nop
 800d966:	e7fe      	b.n	800d966 <ugvMain+0xa2>

	vTaskStartScheduler();
 800d968:	f7fa ffd0 	bl	800890c <vTaskStartScheduler>
}
 800d96c:	bf00      	nop
 800d96e:	3710      	adds	r7, #16
 800d970:	46bd      	mov	sp, r7
 800d972:	bd80      	pop	{r7, pc}
 800d974:	20005564 	.word	0x20005564
 800d978:	0800fc5c 	.word	0x0800fc5c
 800d97c:	0800dc2d 	.word	0x0800dc2d
 800d980:	2000555c 	.word	0x2000555c
 800d984:	0800dbad 	.word	0x0800dbad
 800d988:	200053b0 	.word	0x200053b0
 800d98c:	0800fc6c 	.word	0x0800fc6c
 800d990:	0800da51 	.word	0x0800da51

0800d994 <ugvSystemInit>:
/**
 * @brief initialize the peripherals
 * @return none
 */
void ugvSystemInit()
{
 800d994:	b580      	push	{r7, lr}
 800d996:	af00      	add	r7, sp, #0
	  /* USER CODE BEGIN 2 */
	HAL_IWDG_Init(&hiwdg);
 800d998:	4811      	ldr	r0, [pc, #68]	; (800d9e0 <ugvSystemInit+0x4c>)
 800d99a:	f7f6 fa35 	bl	8003e08 <HAL_IWDG_Init>
	UGV_cameraServoInit(&htim12, TIM_CHANNEL_1);	//!< camera servo timer init
 800d99e:	2100      	movs	r1, #0
 800d9a0:	4810      	ldr	r0, [pc, #64]	; (800d9e4 <ugvSystemInit+0x50>)
 800d9a2:	f7ff feb7 	bl	800d714 <UGV_cameraServoInit>
	UGV_rcReceiverInit();							//!< enable rc receiver timer interrupt
 800d9a6:	f7ff f911 	bl	800cbcc <UGV_rcReceiverInit>
	UGV_motorInit();								//!< enable motor driver PWM timers
 800d9aa:	f7fd fe97 	bl	800b6dc <UGV_motorInit>
//	qmcInit(&hi2c1);								//!< enable i2c to read magnetometer
	init_PEC15_Table();
 800d9ae:	f7ff fed7 	bl	800d760 <init_PEC15_Table>
	sx1278Init(&SX1278_hw, &SX1278);
 800d9b2:	490d      	ldr	r1, [pc, #52]	; (800d9e8 <ugvSystemInit+0x54>)
 800d9b4:	480d      	ldr	r0, [pc, #52]	; (800d9ec <ugvSystemInit+0x58>)
 800d9b6:	f000 f821 	bl	800d9fc <sx1278Init>
	databaseQueueInit(10, sizeof(LoraTransmit));	//!< sensor database queue
 800d9ba:	2134      	movs	r1, #52	; 0x34
 800d9bc:	200a      	movs	r0, #10
 800d9be:	f7fc fc65 	bl	800a28c <databaseQueueInit>
	GPS_Init(&huart3, &gps);
 800d9c2:	490b      	ldr	r1, [pc, #44]	; (800d9f0 <ugvSystemInit+0x5c>)
 800d9c4:	480b      	ldr	r0, [pc, #44]	; (800d9f4 <ugvSystemInit+0x60>)
 800d9c6:	f7fc fc79 	bl	800a2bc <GPS_Init>
	while (MPU6050_Init(&hi2c3) == 1);
 800d9ca:	bf00      	nop
 800d9cc:	480a      	ldr	r0, [pc, #40]	; (800d9f8 <ugvSystemInit+0x64>)
 800d9ce:	f7fe fb2f 	bl	800c030 <MPU6050_Init>
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	2b01      	cmp	r3, #1
 800d9d6:	d0f9      	beq.n	800d9cc <ugvSystemInit+0x38>
}
 800d9d8:	bf00      	nop
 800d9da:	bf00      	nop
 800d9dc:	bd80      	pop	{r7, pc}
 800d9de:	bf00      	nop
 800d9e0:	20000204 	.word	0x20000204
 800d9e4:	20000474 	.word	0x20000474
 800d9e8:	200053d0 	.word	0x200053d0
 800d9ec:	200053b4 	.word	0x200053b4
 800d9f0:	20005388 	.word	0x20005388
 800d9f4:	20000504 	.word	0x20000504
 800d9f8:	200001b0 	.word	0x200001b0

0800d9fc <sx1278Init>:
 * @param[in] lora pin setting
 * @param[in] lora global structure
 * @return none
 */
static void sx1278Init(SX1278_hw_t * sx1278Hw, SX1278_t * sx1278)
{
 800d9fc:	b480      	push	{r7}
 800d9fe:	b083      	sub	sp, #12
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
 800da04:	6039      	str	r1, [r7, #0]
	sx1278Hw->dio0.port = DIO0_GPIO_Port;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	4a0e      	ldr	r2, [pc, #56]	; (800da44 <sx1278Init+0x48>)
 800da0a:	60da      	str	r2, [r3, #12]
	sx1278Hw->dio0.pin = DIO0_Pin;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	2202      	movs	r2, #2
 800da10:	609a      	str	r2, [r3, #8]
	sx1278Hw->nss.port = NSS_GPIO_Port;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	4a0b      	ldr	r2, [pc, #44]	; (800da44 <sx1278Init+0x48>)
 800da16:	615a      	str	r2, [r3, #20]
	sx1278Hw->nss.pin = NSS_Pin;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	2201      	movs	r2, #1
 800da1c:	611a      	str	r2, [r3, #16]
	sx1278Hw->reset.port = NULL;
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	2200      	movs	r2, #0
 800da22:	605a      	str	r2, [r3, #4]
	sx1278Hw->reset.pin = 0;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2200      	movs	r2, #0
 800da28:	601a      	str	r2, [r3, #0]
	sx1278Hw->spi = &hspi2;
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	4a06      	ldr	r2, [pc, #24]	; (800da48 <sx1278Init+0x4c>)
 800da2e:	619a      	str	r2, [r3, #24]

	sx1278->hw = sx1278Hw;
 800da30:	683b      	ldr	r3, [r7, #0]
 800da32:	687a      	ldr	r2, [r7, #4]
 800da34:	601a      	str	r2, [r3, #0]
}
 800da36:	bf00      	nop
 800da38:	370c      	adds	r7, #12
 800da3a:	46bd      	mov	sp, r7
 800da3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da40:	4770      	bx	lr
 800da42:	bf00      	nop
 800da44:	40020800 	.word	0x40020800
 800da48:	20000268 	.word	0x20000268
 800da4c:	00000000 	.word	0x00000000

0800da50 <taskLoraCom>:
static int ret;
static int retTx;
static uint8_t txRxMutex = TX_STATUS;

void taskLoraCom(void *arg)
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b08a      	sub	sp, #40	; 0x28
 800da54:	af06      	add	r7, sp, #24
 800da56:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime = 0;
 800da58:	2300      	movs	r3, #0
 800da5a:	60bb      	str	r3, [r7, #8]
	const TickType_t xFrequency = 25;
 800da5c:	2319      	movs	r3, #25
 800da5e:	60fb      	str	r3, [r7, #12]
	xLastWakeTime = xTaskGetTickCount();
 800da60:	f7fb f870 	bl	8008b44 <xTaskGetTickCount>
 800da64:	4603      	mov	r3, r0
 800da66:	60bb      	str	r3, [r7, #8]

	//initialize lora module
	SX1278_init(&SX1278, 434000000, SX1278_POWER_17DBM, SX1278_LORA_SF_7,
 800da68:	2334      	movs	r3, #52	; 0x34
 800da6a:	9305      	str	r3, [sp, #20]
 800da6c:	2300      	movs	r3, #0
 800da6e:	9304      	str	r3, [sp, #16]
 800da70:	2300      	movs	r3, #0
 800da72:	9303      	str	r3, [sp, #12]
 800da74:	2307      	movs	r3, #7
 800da76:	9302      	str	r3, [sp, #8]
 800da78:	2301      	movs	r3, #1
 800da7a:	9301      	str	r3, [sp, #4]
 800da7c:	2301      	movs	r3, #1
 800da7e:	9300      	str	r3, [sp, #0]
 800da80:	a326      	add	r3, pc, #152	; (adr r3, 800db1c <taskLoraCom+0xcc>)
 800da82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da86:	481e      	ldr	r0, [pc, #120]	; (800db00 <taskLoraCom+0xb0>)
 800da88:	f7ff fd2c 	bl	800d4e4 <SX1278_init>
				SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, sizeof(loraTx));

	ret = SX1278_LoRaEntryTx(&SX1278, sizeof(loraTx), TX_TIMEOUT);
 800da8c:	2205      	movs	r2, #5
 800da8e:	2134      	movs	r1, #52	; 0x34
 800da90:	481b      	ldr	r0, [pc, #108]	; (800db00 <taskLoraCom+0xb0>)
 800da92:	f7ff fc90 	bl	800d3b6 <SX1278_LoRaEntryTx>
 800da96:	4603      	mov	r3, r0
 800da98:	4a1a      	ldr	r2, [pc, #104]	; (800db04 <taskLoraCom+0xb4>)
 800da9a:	6013      	str	r3, [r2, #0]

	for(;;)
	{
		xQueueReceive(sensorDataQueue, &loraTx, 2);
 800da9c:	4b1a      	ldr	r3, [pc, #104]	; (800db08 <taskLoraCom+0xb8>)
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	2202      	movs	r2, #2
 800daa2:	491a      	ldr	r1, [pc, #104]	; (800db0c <taskLoraCom+0xbc>)
 800daa4:	4618      	mov	r0, r3
 800daa6:	f7fa faad 	bl	8008004 <xQueueReceive>

		//!< Transmit
		txRxMutex = TX_STATUS;
 800daaa:	4b19      	ldr	r3, [pc, #100]	; (800db10 <taskLoraCom+0xc0>)
 800daac:	2200      	movs	r2, #0
 800daae:	701a      	strb	r2, [r3, #0]
		ret = SX1278_LoRaEntryTx(&SX1278, sizeof(loraTx), TX_TIMEOUT);
 800dab0:	2205      	movs	r2, #5
 800dab2:	2134      	movs	r1, #52	; 0x34
 800dab4:	4812      	ldr	r0, [pc, #72]	; (800db00 <taskLoraCom+0xb0>)
 800dab6:	f7ff fc7e 	bl	800d3b6 <SX1278_LoRaEntryTx>
 800daba:	4603      	mov	r3, r0
 800dabc:	4a11      	ldr	r2, [pc, #68]	; (800db04 <taskLoraCom+0xb4>)
 800dabe:	6013      	str	r3, [r2, #0]
		retTx = SX1278_LoRaTxPacket(&SX1278, (uint8_t*)&loraTx,
 800dac0:	2305      	movs	r3, #5
 800dac2:	2234      	movs	r2, #52	; 0x34
 800dac4:	4911      	ldr	r1, [pc, #68]	; (800db0c <taskLoraCom+0xbc>)
 800dac6:	480e      	ldr	r0, [pc, #56]	; (800db00 <taskLoraCom+0xb0>)
 800dac8:	f7ff fccd 	bl	800d466 <SX1278_LoRaTxPacket>
 800dacc:	4603      	mov	r3, r0
 800dace:	4a11      	ldr	r2, [pc, #68]	; (800db14 <taskLoraCom+0xc4>)
 800dad0:	6013      	str	r3, [r2, #0]
				sizeof(loraTx), TX_TIMEOUT);

		//!< Receive
		txRxMutex = RX_STATUS;
 800dad2:	4b0f      	ldr	r3, [pc, #60]	; (800db10 <taskLoraCom+0xc0>)
 800dad4:	2201      	movs	r2, #1
 800dad6:	701a      	strb	r2, [r3, #0]
		ret = SX1278_LoRaEntryRx(&SX1278, sizeof(loraRx), TX_TIMEOUT);
 800dad8:	2205      	movs	r2, #5
 800dada:	2134      	movs	r1, #52	; 0x34
 800dadc:	4808      	ldr	r0, [pc, #32]	; (800db00 <taskLoraCom+0xb0>)
 800dade:	f7ff fbc1 	bl	800d264 <SX1278_LoRaEntryRx>
 800dae2:	4603      	mov	r3, r0
 800dae4:	4a07      	ldr	r2, [pc, #28]	; (800db04 <taskLoraCom+0xb4>)
 800dae6:	6013      	str	r3, [r2, #0]

		HAL_IWDG_Refresh(&hiwdg);
 800dae8:	480b      	ldr	r0, [pc, #44]	; (800db18 <taskLoraCom+0xc8>)
 800daea:	f7f6 f9cf 	bl	8003e8c <HAL_IWDG_Refresh>

		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 800daee:	f107 0308 	add.w	r3, r7, #8
 800daf2:	68f9      	ldr	r1, [r7, #12]
 800daf4:	4618      	mov	r0, r3
 800daf6:	f7fa fe8b 	bl	8008810 <vTaskDelayUntil>
		xQueueReceive(sensorDataQueue, &loraTx, 2);
 800dafa:	e7cf      	b.n	800da9c <taskLoraCom+0x4c>
 800dafc:	f3af 8000 	nop.w
 800db00:	200053d0 	.word	0x200053d0
 800db04:	20005550 	.word	0x20005550
 800db08:	20004f34 	.word	0x20004f34
 800db0c:	200054e8 	.word	0x200054e8
 800db10:	20005558 	.word	0x20005558
 800db14:	20005554 	.word	0x20005554
 800db18:	20000204 	.word	0x20000204
 800db1c:	19de5080 	.word	0x19de5080
 800db20:	00000000 	.word	0x00000000

0800db24 <dioIrqCallback>:
/**
 * @brief callback function for the DIO0 pin
 * @return none
 */
void dioIrqCallback()
{
 800db24:	b580      	push	{r7, lr}
 800db26:	af00      	add	r7, sp, #0
	if(txRxMutex == TX_STATUS)
 800db28:	4b0f      	ldr	r3, [pc, #60]	; (800db68 <dioIrqCallback+0x44>)
 800db2a:	781b      	ldrb	r3, [r3, #0]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d109      	bne.n	800db44 <dioIrqCallback+0x20>
	{
		retTx = SX1278_LoRaTxPacket(&SX1278, (uint8_t*)&loraTx,
 800db30:	2305      	movs	r3, #5
 800db32:	2234      	movs	r2, #52	; 0x34
 800db34:	490d      	ldr	r1, [pc, #52]	; (800db6c <dioIrqCallback+0x48>)
 800db36:	480e      	ldr	r0, [pc, #56]	; (800db70 <dioIrqCallback+0x4c>)
 800db38:	f7ff fc95 	bl	800d466 <SX1278_LoRaTxPacket>
 800db3c:	4603      	mov	r3, r0
 800db3e:	4a0d      	ldr	r2, [pc, #52]	; (800db74 <dioIrqCallback+0x50>)
 800db40:	6013      	str	r3, [r2, #0]
	else
	{
		ret = SX1278_available(&SX1278);
		SX1278_read(&SX1278, (uint8_t*)&loraRx, ret);
	}
}
 800db42:	e00e      	b.n	800db62 <dioIrqCallback+0x3e>
		ret = SX1278_available(&SX1278);
 800db44:	480a      	ldr	r0, [pc, #40]	; (800db70 <dioIrqCallback+0x4c>)
 800db46:	f7ff fcfa 	bl	800d53e <SX1278_available>
 800db4a:	4603      	mov	r3, r0
 800db4c:	461a      	mov	r2, r3
 800db4e:	4b0a      	ldr	r3, [pc, #40]	; (800db78 <dioIrqCallback+0x54>)
 800db50:	601a      	str	r2, [r3, #0]
		SX1278_read(&SX1278, (uint8_t*)&loraRx, ret);
 800db52:	4b09      	ldr	r3, [pc, #36]	; (800db78 <dioIrqCallback+0x54>)
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	b2db      	uxtb	r3, r3
 800db58:	461a      	mov	r2, r3
 800db5a:	4908      	ldr	r1, [pc, #32]	; (800db7c <dioIrqCallback+0x58>)
 800db5c:	4804      	ldr	r0, [pc, #16]	; (800db70 <dioIrqCallback+0x4c>)
 800db5e:	f7ff fcfa 	bl	800d556 <SX1278_read>
}
 800db62:	bf00      	nop
 800db64:	bd80      	pop	{r7, pc}
 800db66:	bf00      	nop
 800db68:	20005558 	.word	0x20005558
 800db6c:	200054e8 	.word	0x200054e8
 800db70:	200053d0 	.word	0x200053d0
 800db74:	20005554 	.word	0x20005554
 800db78:	20005550 	.word	0x20005550
 800db7c:	2000551c 	.word	0x2000551c

0800db80 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800db80:	b480      	push	{r7}
 800db82:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800db84:	f3bf 8f4f 	dsb	sy
}
 800db88:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800db8a:	4b06      	ldr	r3, [pc, #24]	; (800dba4 <__NVIC_SystemReset+0x24>)
 800db8c:	68db      	ldr	r3, [r3, #12]
 800db8e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800db92:	4904      	ldr	r1, [pc, #16]	; (800dba4 <__NVIC_SystemReset+0x24>)
 800db94:	4b04      	ldr	r3, [pc, #16]	; (800dba8 <__NVIC_SystemReset+0x28>)
 800db96:	4313      	orrs	r3, r2
 800db98:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800db9a:	f3bf 8f4f 	dsb	sy
}
 800db9e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800dba0:	bf00      	nop
 800dba2:	e7fd      	b.n	800dba0 <__NVIC_SystemReset+0x20>
 800dba4:	e000ed00 	.word	0xe000ed00
 800dba8:	05fa0004 	.word	0x05fa0004

0800dbac <taskMotorDrive>:

TaskHandle_t hTaskMotDrive_s;
extern LoraTransmit loraTx;

void taskMotorDrive(void *arg)
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b086      	sub	sp, #24
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime = 0;
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	60fb      	str	r3, [r7, #12]
	const TickType_t xFrequency = 20;
 800dbb8:	2314      	movs	r3, #20
 800dbba:	617b      	str	r3, [r7, #20]
	xLastWakeTime = xTaskGetTickCount();
 800dbbc:	f7fa ffc2 	bl	8008b44 <xTaskGetTickCount>
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	60fb      	str	r3, [r7, #12]
	float azimuthAngle = 0.0f;
 800dbc4:	f04f 0300 	mov.w	r3, #0
 800dbc8:	613b      	str	r3, [r7, #16]

	for(;;)
	{
		  if((rcChannel_s.channel1>=(CHANNEL_DOWN-CHANNEL_ERROR)) && (rcChannel_s.channel1<=(CHANNEL_UP + CHANNEL_ERROR)))
 800dbca:	4b0c      	ldr	r3, [pc, #48]	; (800dbfc <taskMotorDrive+0x50>)
 800dbcc:	881b      	ldrh	r3, [r3, #0]
 800dbce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dbd2:	d911      	bls.n	800dbf8 <taskMotorDrive+0x4c>
 800dbd4:	4b09      	ldr	r3, [pc, #36]	; (800dbfc <taskMotorDrive+0x50>)
 800dbd6:	881b      	ldrh	r3, [r3, #0]
 800dbd8:	f240 72e9 	movw	r2, #2025	; 0x7e9
 800dbdc:	4293      	cmp	r3, r2
 800dbde:	d80b      	bhi.n	800dbf8 <taskMotorDrive+0x4c>
		  {
			  UGV_motorDrive(&rcChannel_s, azimuthAngle);
 800dbe0:	ed97 0a04 	vldr	s0, [r7, #16]
 800dbe4:	4805      	ldr	r0, [pc, #20]	; (800dbfc <taskMotorDrive+0x50>)
 800dbe6:	f7fd fdd1 	bl	800b78c <UGV_motorDrive>
		  else
		  {
			  NVIC_SystemReset();
		  }

		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 800dbea:	f107 030c 	add.w	r3, r7, #12
 800dbee:	6979      	ldr	r1, [r7, #20]
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	f7fa fe0d 	bl	8008810 <vTaskDelayUntil>
		  if((rcChannel_s.channel1>=(CHANNEL_DOWN-CHANNEL_ERROR)) && (rcChannel_s.channel1<=(CHANNEL_UP + CHANNEL_ERROR)))
 800dbf6:	e7e8      	b.n	800dbca <taskMotorDrive+0x1e>
			  NVIC_SystemReset();
 800dbf8:	f7ff ffc2 	bl	800db80 <__NVIC_SystemReset>
 800dbfc:	20005154 	.word	0x20005154

0800dc00 <__NVIC_SystemReset>:
{
 800dc00:	b480      	push	{r7}
 800dc02:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800dc04:	f3bf 8f4f 	dsb	sy
}
 800dc08:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800dc0a:	4b06      	ldr	r3, [pc, #24]	; (800dc24 <__NVIC_SystemReset+0x24>)
 800dc0c:	68db      	ldr	r3, [r3, #12]
 800dc0e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800dc12:	4904      	ldr	r1, [pc, #16]	; (800dc24 <__NVIC_SystemReset+0x24>)
 800dc14:	4b04      	ldr	r3, [pc, #16]	; (800dc28 <__NVIC_SystemReset+0x28>)
 800dc16:	4313      	orrs	r3, r2
 800dc18:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800dc1a:	f3bf 8f4f 	dsb	sy
}
 800dc1e:	bf00      	nop
    __NOP();
 800dc20:	bf00      	nop
 800dc22:	e7fd      	b.n	800dc20 <__NVIC_SystemReset+0x20>
 800dc24:	e000ed00 	.word	0xe000ed00
 800dc28:	05fa0004 	.word	0x05fa0004

0800dc2c <taskSensor>:
uint16_t azim;
MPU6050_t MPU6050;

//<<<<<<<<<<<<<<-FUNCTION PROTOTYPES->>>>>>>>>>>>>>
void taskSensor(void *arg)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b086      	sub	sp, #24
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime = 0;
 800dc34:	2300      	movs	r3, #0
 800dc36:	60fb      	str	r3, [r7, #12]
	const TickType_t xFrequency = 10;
 800dc38:	230a      	movs	r3, #10
 800dc3a:	617b      	str	r3, [r7, #20]
	xLastWakeTime = xTaskGetTickCount();
 800dc3c:	f7fa ff82 	bl	8008b44 <xTaskGetTickCount>
 800dc40:	4603      	mov	r3, r0
 800dc42:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
		//!< get azimuth from the qmc5883
		loraTx.azimuth = qmcProc();
 800dc44:	f000 f8b8 	bl	800ddb8 <qmcProc>
 800dc48:	4603      	mov	r3, r0
 800dc4a:	461a      	mov	r2, r3
 800dc4c:	4b52      	ldr	r3, [pc, #328]	; (800dd98 <taskSensor+0x16c>)
 800dc4e:	801a      	strh	r2, [r3, #0]
		loraTx.ledState = ledProc();
 800dc50:	f000 f8ce 	bl	800ddf0 <ledProc>
 800dc54:	4603      	mov	r3, r0
 800dc56:	461a      	mov	r2, r3
 800dc58:	4b4f      	ldr	r3, [pc, #316]	; (800dd98 <taskSensor+0x16c>)
 800dc5a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

		//!< get the gyro inf
		MPU6050_Read_All(&hi2c3, &MPU6050);
 800dc5e:	494f      	ldr	r1, [pc, #316]	; (800dd9c <taskSensor+0x170>)
 800dc60:	484f      	ldr	r0, [pc, #316]	; (800dda0 <taskSensor+0x174>)
 800dc62:	f7fe fa3d 	bl	800c0e0 <MPU6050_Read_All>
		loraTx.Ax = MPU6050.Ax;
 800dc66:	4b4d      	ldr	r3, [pc, #308]	; (800dd9c <taskSensor+0x170>)
 800dc68:	689b      	ldr	r3, [r3, #8]
 800dc6a:	4a4b      	ldr	r2, [pc, #300]	; (800dd98 <taskSensor+0x16c>)
 800dc6c:	6153      	str	r3, [r2, #20]
		loraTx.Ay = MPU6050.Ay;
 800dc6e:	4b4b      	ldr	r3, [pc, #300]	; (800dd9c <taskSensor+0x170>)
 800dc70:	68db      	ldr	r3, [r3, #12]
 800dc72:	4a49      	ldr	r2, [pc, #292]	; (800dd98 <taskSensor+0x16c>)
 800dc74:	6193      	str	r3, [r2, #24]
		loraTx.Temperature = MPU6050.Temperature;
 800dc76:	4b49      	ldr	r3, [pc, #292]	; (800dd9c <taskSensor+0x170>)
 800dc78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc7a:	4a47      	ldr	r2, [pc, #284]	; (800dd98 <taskSensor+0x16c>)
 800dc7c:	61d3      	str	r3, [r2, #28]
		loraTx.KalmanAngleX = MPU6050.KalmanAngleX;
 800dc7e:	4b47      	ldr	r3, [pc, #284]	; (800dd9c <taskSensor+0x170>)
 800dc80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc82:	4a45      	ldr	r2, [pc, #276]	; (800dd98 <taskSensor+0x16c>)
 800dc84:	6213      	str	r3, [r2, #32]
		loraTx.KalmanAngleY = MPU6050.KalmanAngleY;
 800dc86:	4b45      	ldr	r3, [pc, #276]	; (800dd9c <taskSensor+0x170>)
 800dc88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc8a:	4a43      	ldr	r2, [pc, #268]	; (800dd98 <taskSensor+0x16c>)
 800dc8c:	6253      	str	r3, [r2, #36]	; 0x24

		//!< control the gps ready?
		if(gps.gpsState == POSITION_FIXED && gps.day != 0 && ((HAL_GetTick() - gpsIrqTime) < 500))
 800dc8e:	4b45      	ldr	r3, [pc, #276]	; (800dda4 <taskSensor+0x178>)
 800dc90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dc94:	2b02      	cmp	r3, #2
 800dc96:	d153      	bne.n	800dd40 <taskSensor+0x114>
 800dc98:	4b42      	ldr	r3, [pc, #264]	; (800dda4 <taskSensor+0x178>)
 800dc9a:	7d5b      	ldrb	r3, [r3, #21]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d04f      	beq.n	800dd40 <taskSensor+0x114>
 800dca0:	f7f4 fbde 	bl	8002460 <HAL_GetTick>
 800dca4:	4602      	mov	r2, r0
 800dca6:	4b40      	ldr	r3, [pc, #256]	; (800dda8 <taskSensor+0x17c>)
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	1ad3      	subs	r3, r2, r3
 800dcac:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800dcb0:	d246      	bcs.n	800dd40 <taskSensor+0x114>
		{
			loraTx.gpsState = POSITION_FIXED;
 800dcb2:	4b39      	ldr	r3, [pc, #228]	; (800dd98 <taskSensor+0x16c>)
 800dcb4:	2202      	movs	r2, #2
 800dcb6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
			loraTx.latitudeDegree = gps.latitudeDegree;
 800dcba:	4b3a      	ldr	r3, [pc, #232]	; (800dda4 <taskSensor+0x178>)
 800dcbc:	78da      	ldrb	r2, [r3, #3]
 800dcbe:	4b36      	ldr	r3, [pc, #216]	; (800dd98 <taskSensor+0x16c>)
 800dcc0:	709a      	strb	r2, [r3, #2]
			loraTx.latitudeMinute = gps.latitudeMinute;
 800dcc2:	4b38      	ldr	r3, [pc, #224]	; (800dda4 <taskSensor+0x178>)
 800dcc4:	791a      	ldrb	r2, [r3, #4]
 800dcc6:	4b34      	ldr	r3, [pc, #208]	; (800dd98 <taskSensor+0x16c>)
 800dcc8:	70da      	strb	r2, [r3, #3]
			loraTx.latitudeSecond = gps.latitudeSecond;
 800dcca:	4b36      	ldr	r3, [pc, #216]	; (800dda4 <taskSensor+0x178>)
 800dccc:	689b      	ldr	r3, [r3, #8]
 800dcce:	4a32      	ldr	r2, [pc, #200]	; (800dd98 <taskSensor+0x16c>)
 800dcd0:	6053      	str	r3, [r2, #4]

			loraTx.longitudeDegree = gps.longitudeDegree;
 800dcd2:	4b34      	ldr	r3, [pc, #208]	; (800dda4 <taskSensor+0x178>)
 800dcd4:	7b5a      	ldrb	r2, [r3, #13]
 800dcd6:	4b30      	ldr	r3, [pc, #192]	; (800dd98 <taskSensor+0x16c>)
 800dcd8:	721a      	strb	r2, [r3, #8]
			loraTx.longitudeMinute = gps.longitudeMinute;
 800dcda:	4b32      	ldr	r3, [pc, #200]	; (800dda4 <taskSensor+0x178>)
 800dcdc:	7b9a      	ldrb	r2, [r3, #14]
 800dcde:	4b2e      	ldr	r3, [pc, #184]	; (800dd98 <taskSensor+0x16c>)
 800dce0:	725a      	strb	r2, [r3, #9]
			loraTx.longitudeSecond = gps.longitudeSecond;
 800dce2:	4b30      	ldr	r3, [pc, #192]	; (800dda4 <taskSensor+0x178>)
 800dce4:	691b      	ldr	r3, [r3, #16]
 800dce6:	4a2c      	ldr	r2, [pc, #176]	; (800dd98 <taskSensor+0x16c>)
 800dce8:	60d3      	str	r3, [r2, #12]

			loraTx.numberOfSatellite = gps.numberOfSatellite;
 800dcea:	4b2e      	ldr	r3, [pc, #184]	; (800dda4 <taskSensor+0x178>)
 800dcec:	7e9a      	ldrb	r2, [r3, #26]
 800dcee:	4b2a      	ldr	r3, [pc, #168]	; (800dd98 <taskSensor+0x16c>)
 800dcf0:	729a      	strb	r2, [r3, #10]
			loraTx.second = gps.second;
 800dcf2:	4b2c      	ldr	r3, [pc, #176]	; (800dda4 <taskSensor+0x178>)
 800dcf4:	789a      	ldrb	r2, [r3, #2]
 800dcf6:	4b28      	ldr	r3, [pc, #160]	; (800dd98 <taskSensor+0x16c>)
 800dcf8:	72da      	strb	r2, [r3, #11]
			loraTx.minute = gps.minute;
 800dcfa:	4b2a      	ldr	r3, [pc, #168]	; (800dda4 <taskSensor+0x178>)
 800dcfc:	785a      	ldrb	r2, [r3, #1]
 800dcfe:	4b26      	ldr	r3, [pc, #152]	; (800dd98 <taskSensor+0x16c>)
 800dd00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			loraTx.hour = gps.hour;
 800dd04:	4b27      	ldr	r3, [pc, #156]	; (800dda4 <taskSensor+0x178>)
 800dd06:	781a      	ldrb	r2, [r3, #0]
 800dd08:	4b23      	ldr	r3, [pc, #140]	; (800dd98 <taskSensor+0x16c>)
 800dd0a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			loraTx.day = gps.day;
 800dd0e:	4b25      	ldr	r3, [pc, #148]	; (800dda4 <taskSensor+0x178>)
 800dd10:	7d5a      	ldrb	r2, [r3, #21]
 800dd12:	4b21      	ldr	r3, [pc, #132]	; (800dd98 <taskSensor+0x16c>)
 800dd14:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			loraTx.month = gps.month;
 800dd18:	4b22      	ldr	r3, [pc, #136]	; (800dda4 <taskSensor+0x178>)
 800dd1a:	7d9a      	ldrb	r2, [r3, #22]
 800dd1c:	4b1e      	ldr	r3, [pc, #120]	; (800dd98 <taskSensor+0x16c>)
 800dd1e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			loraTx.locationLat = gps.locationLat;
 800dd22:	4b20      	ldr	r3, [pc, #128]	; (800dda4 <taskSensor+0x178>)
 800dd24:	7b1a      	ldrb	r2, [r3, #12]
 800dd26:	4b1c      	ldr	r3, [pc, #112]	; (800dd98 <taskSensor+0x16c>)
 800dd28:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			loraTx.locationLong = gps.locationLong;
 800dd2c:	4b1d      	ldr	r3, [pc, #116]	; (800dda4 <taskSensor+0x178>)
 800dd2e:	7d1a      	ldrb	r2, [r3, #20]
 800dd30:	4b19      	ldr	r3, [pc, #100]	; (800dd98 <taskSensor+0x16c>)
 800dd32:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

			loraTx.speed = gps.speed;
 800dd36:	4b1b      	ldr	r3, [pc, #108]	; (800dda4 <taskSensor+0x178>)
 800dd38:	6a1b      	ldr	r3, [r3, #32]
 800dd3a:	4a17      	ldr	r2, [pc, #92]	; (800dd98 <taskSensor+0x16c>)
 800dd3c:	6113      	str	r3, [r2, #16]
 800dd3e:	e003      	b.n	800dd48 <taskSensor+0x11c>
		}
		else
		{
			loraTx.gpsState = NO_CONNECTION;
 800dd40:	4b15      	ldr	r3, [pc, #84]	; (800dd98 <taskSensor+0x16c>)
 800dd42:	2200      	movs	r2, #0
 800dd44:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		}

		gpsPreviousHead = ringBuff.head;
 800dd48:	4b18      	ldr	r3, [pc, #96]	; (800ddac <taskSensor+0x180>)
 800dd4a:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 800dd4e:	b2db      	uxtb	r3, r3
 800dd50:	461a      	mov	r2, r3
 800dd52:	4b17      	ldr	r3, [pc, #92]	; (800ddb0 <taskSensor+0x184>)
 800dd54:	601a      	str	r2, [r3, #0]

		uint16_t crc = crcProc(&loraTx, sizeof(loraTx) - 2);
 800dd56:	2132      	movs	r1, #50	; 0x32
 800dd58:	480f      	ldr	r0, [pc, #60]	; (800dd98 <taskSensor+0x16c>)
 800dd5a:	f000 f869 	bl	800de30 <crcProc>
 800dd5e:	4603      	mov	r3, r0
 800dd60:	827b      	strh	r3, [r7, #18]
		loraTx.crcLsb = (crc >> 0) & 0xFF;
 800dd62:	8a7b      	ldrh	r3, [r7, #18]
 800dd64:	b2da      	uxtb	r2, r3
 800dd66:	4b0c      	ldr	r3, [pc, #48]	; (800dd98 <taskSensor+0x16c>)
 800dd68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		loraTx.crcMsb = (crc >> 8) & 0xFF;
 800dd6c:	8a7b      	ldrh	r3, [r7, #18]
 800dd6e:	0a1b      	lsrs	r3, r3, #8
 800dd70:	b29b      	uxth	r3, r3
 800dd72:	b2da      	uxtb	r2, r3
 800dd74:	4b08      	ldr	r3, [pc, #32]	; (800dd98 <taskSensor+0x16c>)
 800dd76:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

		xQueueGenericSend(sensorDataQueue, &loraTx, 5, queueSEND_TO_FRONT);
 800dd7a:	4b0e      	ldr	r3, [pc, #56]	; (800ddb4 <taskSensor+0x188>)
 800dd7c:	6818      	ldr	r0, [r3, #0]
 800dd7e:	2301      	movs	r3, #1
 800dd80:	2205      	movs	r2, #5
 800dd82:	4905      	ldr	r1, [pc, #20]	; (800dd98 <taskSensor+0x16c>)
 800dd84:	f7f9 ffa4 	bl	8007cd0 <xQueueGenericSend>

		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 800dd88:	f107 030c 	add.w	r3, r7, #12
 800dd8c:	6979      	ldr	r1, [r7, #20]
 800dd8e:	4618      	mov	r0, r3
 800dd90:	f7fa fd3e 	bl	8008810 <vTaskDelayUntil>
	{
 800dd94:	e756      	b.n	800dc44 <taskSensor+0x18>
 800dd96:	bf00      	nop
 800dd98:	20004f38 	.word	0x20004f38
 800dd9c:	20005568 	.word	0x20005568
 800dda0:	200001b0 	.word	0x200001b0
 800dda4:	20005388 	.word	0x20005388
 800dda8:	20005074 	.word	0x20005074
 800ddac:	20004f70 	.word	0x20004f70
 800ddb0:	20005560 	.word	0x20005560
 800ddb4:	20004f34 	.word	0x20004f34

0800ddb8 <qmcProc>:
/**
 * @brief take the azimuth angle
 * @return azimuthn angle
 */
static uint16_t qmcProc()
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b082      	sub	sp, #8
 800ddbc:	af00      	add	r7, sp, #0
	uint16_t azimuthAngle = 0;
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	80fb      	strh	r3, [r7, #6]
	if(UGV_isDataReady(&hqmc))
 800ddc2:	480a      	ldr	r0, [pc, #40]	; (800ddec <qmcProc+0x34>)
 800ddc4:	f7fe fd8a 	bl	800c8dc <UGV_isDataReady>
 800ddc8:	4603      	mov	r3, r0
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d009      	beq.n	800dde2 <qmcProc+0x2a>
	{
		azimuthAngle = (uint16_t)UGV_getAzimuth(&hqmc);
 800ddce:	4807      	ldr	r0, [pc, #28]	; (800ddec <qmcProc+0x34>)
 800ddd0:	f7fe fe92 	bl	800caf8 <UGV_getAzimuth>
 800ddd4:	eef0 7a40 	vmov.f32	s15, s0
 800ddd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dddc:	ee17 3a90 	vmov	r3, s15
 800dde0:	80fb      	strh	r3, [r7, #6]
	}

	return azimuthAngle;
 800dde2:	88fb      	ldrh	r3, [r7, #6]
}
 800dde4:	4618      	mov	r0, r3
 800dde6:	3708      	adds	r7, #8
 800dde8:	46bd      	mov	sp, r7
 800ddea:	bd80      	pop	{r7, pc}
 800ddec:	20005368 	.word	0x20005368

0800ddf0 <ledProc>:
/**
 * @brief set or reset the led status according the rf transmitter signal
 * @return led status
 */
static LED_STATE ledProc()
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b082      	sub	sp, #8
 800ddf4:	af00      	add	r7, sp, #0
	LED_STATE ledState = LEDS_OFF;
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	71fb      	strb	r3, [r7, #7]

	//!< set the leds
	if((rcChannel_s.channel3>=(CHANNEL_DOWN-CHANNEL_ERROR)) && (rcChannel_s.channel1<=(CHANNEL_UP + CHANNEL_ERROR)))
 800ddfa:	4b0c      	ldr	r3, [pc, #48]	; (800de2c <ledProc+0x3c>)
 800ddfc:	889b      	ldrh	r3, [r3, #4]
 800ddfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800de02:	d90b      	bls.n	800de1c <ledProc+0x2c>
 800de04:	4b09      	ldr	r3, [pc, #36]	; (800de2c <ledProc+0x3c>)
 800de06:	881b      	ldrh	r3, [r3, #0]
 800de08:	f240 72e9 	movw	r2, #2025	; 0x7e9
 800de0c:	4293      	cmp	r3, r2
 800de0e:	d805      	bhi.n	800de1c <ledProc+0x2c>
	{
		ledState = UGV_ledControl(&rcChannel_s);
 800de10:	4806      	ldr	r0, [pc, #24]	; (800de2c <ledProc+0x3c>)
 800de12:	f7ff fd11 	bl	800d838 <UGV_ledControl>
 800de16:	4603      	mov	r3, r0
 800de18:	71fb      	strb	r3, [r7, #7]
 800de1a:	e001      	b.n	800de20 <ledProc+0x30>
	}
	else
	{
		NVIC_SystemReset();
 800de1c:	f7ff fef0 	bl	800dc00 <__NVIC_SystemReset>
	}

	return ledState;
 800de20:	79fb      	ldrb	r3, [r7, #7]
}
 800de22:	4618      	mov	r0, r3
 800de24:	3708      	adds	r7, #8
 800de26:	46bd      	mov	sp, r7
 800de28:	bd80      	pop	{r7, pc}
 800de2a:	bf00      	nop
 800de2c:	20005154 	.word	0x20005154

0800de30 <crcProc>:
/**
 * @brief calculate the crc of the message up to len index
 * @return 16 bit crc value
 */
static uint16_t crcProc(void * ptr, uint16_t len)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b082      	sub	sp, #8
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
 800de38:	460b      	mov	r3, r1
 800de3a:	807b      	strh	r3, [r7, #2]
	return AE_pec15((uint8_t*)ptr, len);
 800de3c:	887b      	ldrh	r3, [r7, #2]
 800de3e:	4619      	mov	r1, r3
 800de40:	6878      	ldr	r0, [r7, #4]
 800de42:	f7ff fcc5 	bl	800d7d0 <AE_pec15>
 800de46:	4603      	mov	r3, r0
}
 800de48:	4618      	mov	r0, r3
 800de4a:	3708      	adds	r7, #8
 800de4c:	46bd      	mov	sp, r7
 800de4e:	bd80      	pop	{r7, pc}

0800de50 <siprintf>:
 800de50:	b40e      	push	{r1, r2, r3}
 800de52:	b500      	push	{lr}
 800de54:	b09c      	sub	sp, #112	; 0x70
 800de56:	ab1d      	add	r3, sp, #116	; 0x74
 800de58:	9002      	str	r0, [sp, #8]
 800de5a:	9006      	str	r0, [sp, #24]
 800de5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800de60:	4809      	ldr	r0, [pc, #36]	; (800de88 <siprintf+0x38>)
 800de62:	9107      	str	r1, [sp, #28]
 800de64:	9104      	str	r1, [sp, #16]
 800de66:	4909      	ldr	r1, [pc, #36]	; (800de8c <siprintf+0x3c>)
 800de68:	f853 2b04 	ldr.w	r2, [r3], #4
 800de6c:	9105      	str	r1, [sp, #20]
 800de6e:	6800      	ldr	r0, [r0, #0]
 800de70:	9301      	str	r3, [sp, #4]
 800de72:	a902      	add	r1, sp, #8
 800de74:	f000 fa08 	bl	800e288 <_svfiprintf_r>
 800de78:	9b02      	ldr	r3, [sp, #8]
 800de7a:	2200      	movs	r2, #0
 800de7c:	701a      	strb	r2, [r3, #0]
 800de7e:	b01c      	add	sp, #112	; 0x70
 800de80:	f85d eb04 	ldr.w	lr, [sp], #4
 800de84:	b003      	add	sp, #12
 800de86:	4770      	bx	lr
 800de88:	20000128 	.word	0x20000128
 800de8c:	ffff0208 	.word	0xffff0208

0800de90 <memset>:
 800de90:	4402      	add	r2, r0
 800de92:	4603      	mov	r3, r0
 800de94:	4293      	cmp	r3, r2
 800de96:	d100      	bne.n	800de9a <memset+0xa>
 800de98:	4770      	bx	lr
 800de9a:	f803 1b01 	strb.w	r1, [r3], #1
 800de9e:	e7f9      	b.n	800de94 <memset+0x4>

0800dea0 <strncmp>:
 800dea0:	b510      	push	{r4, lr}
 800dea2:	b16a      	cbz	r2, 800dec0 <strncmp+0x20>
 800dea4:	3901      	subs	r1, #1
 800dea6:	1884      	adds	r4, r0, r2
 800dea8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800deac:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800deb0:	429a      	cmp	r2, r3
 800deb2:	d103      	bne.n	800debc <strncmp+0x1c>
 800deb4:	42a0      	cmp	r0, r4
 800deb6:	d001      	beq.n	800debc <strncmp+0x1c>
 800deb8:	2a00      	cmp	r2, #0
 800deba:	d1f5      	bne.n	800dea8 <strncmp+0x8>
 800debc:	1ad0      	subs	r0, r2, r3
 800debe:	bd10      	pop	{r4, pc}
 800dec0:	4610      	mov	r0, r2
 800dec2:	e7fc      	b.n	800debe <strncmp+0x1e>

0800dec4 <_reclaim_reent>:
 800dec4:	4b29      	ldr	r3, [pc, #164]	; (800df6c <_reclaim_reent+0xa8>)
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	4283      	cmp	r3, r0
 800deca:	b570      	push	{r4, r5, r6, lr}
 800decc:	4604      	mov	r4, r0
 800dece:	d04b      	beq.n	800df68 <_reclaim_reent+0xa4>
 800ded0:	69c3      	ldr	r3, [r0, #28]
 800ded2:	b143      	cbz	r3, 800dee6 <_reclaim_reent+0x22>
 800ded4:	68db      	ldr	r3, [r3, #12]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d144      	bne.n	800df64 <_reclaim_reent+0xa0>
 800deda:	69e3      	ldr	r3, [r4, #28]
 800dedc:	6819      	ldr	r1, [r3, #0]
 800dede:	b111      	cbz	r1, 800dee6 <_reclaim_reent+0x22>
 800dee0:	4620      	mov	r0, r4
 800dee2:	f000 f87f 	bl	800dfe4 <_free_r>
 800dee6:	6961      	ldr	r1, [r4, #20]
 800dee8:	b111      	cbz	r1, 800def0 <_reclaim_reent+0x2c>
 800deea:	4620      	mov	r0, r4
 800deec:	f000 f87a 	bl	800dfe4 <_free_r>
 800def0:	69e1      	ldr	r1, [r4, #28]
 800def2:	b111      	cbz	r1, 800defa <_reclaim_reent+0x36>
 800def4:	4620      	mov	r0, r4
 800def6:	f000 f875 	bl	800dfe4 <_free_r>
 800defa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800defc:	b111      	cbz	r1, 800df04 <_reclaim_reent+0x40>
 800defe:	4620      	mov	r0, r4
 800df00:	f000 f870 	bl	800dfe4 <_free_r>
 800df04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800df06:	b111      	cbz	r1, 800df0e <_reclaim_reent+0x4a>
 800df08:	4620      	mov	r0, r4
 800df0a:	f000 f86b 	bl	800dfe4 <_free_r>
 800df0e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800df10:	b111      	cbz	r1, 800df18 <_reclaim_reent+0x54>
 800df12:	4620      	mov	r0, r4
 800df14:	f000 f866 	bl	800dfe4 <_free_r>
 800df18:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800df1a:	b111      	cbz	r1, 800df22 <_reclaim_reent+0x5e>
 800df1c:	4620      	mov	r0, r4
 800df1e:	f000 f861 	bl	800dfe4 <_free_r>
 800df22:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800df24:	b111      	cbz	r1, 800df2c <_reclaim_reent+0x68>
 800df26:	4620      	mov	r0, r4
 800df28:	f000 f85c 	bl	800dfe4 <_free_r>
 800df2c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800df2e:	b111      	cbz	r1, 800df36 <_reclaim_reent+0x72>
 800df30:	4620      	mov	r0, r4
 800df32:	f000 f857 	bl	800dfe4 <_free_r>
 800df36:	6a23      	ldr	r3, [r4, #32]
 800df38:	b1b3      	cbz	r3, 800df68 <_reclaim_reent+0xa4>
 800df3a:	4620      	mov	r0, r4
 800df3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800df40:	4718      	bx	r3
 800df42:	5949      	ldr	r1, [r1, r5]
 800df44:	b941      	cbnz	r1, 800df58 <_reclaim_reent+0x94>
 800df46:	3504      	adds	r5, #4
 800df48:	69e3      	ldr	r3, [r4, #28]
 800df4a:	2d80      	cmp	r5, #128	; 0x80
 800df4c:	68d9      	ldr	r1, [r3, #12]
 800df4e:	d1f8      	bne.n	800df42 <_reclaim_reent+0x7e>
 800df50:	4620      	mov	r0, r4
 800df52:	f000 f847 	bl	800dfe4 <_free_r>
 800df56:	e7c0      	b.n	800deda <_reclaim_reent+0x16>
 800df58:	680e      	ldr	r6, [r1, #0]
 800df5a:	4620      	mov	r0, r4
 800df5c:	f000 f842 	bl	800dfe4 <_free_r>
 800df60:	4631      	mov	r1, r6
 800df62:	e7ef      	b.n	800df44 <_reclaim_reent+0x80>
 800df64:	2500      	movs	r5, #0
 800df66:	e7ef      	b.n	800df48 <_reclaim_reent+0x84>
 800df68:	bd70      	pop	{r4, r5, r6, pc}
 800df6a:	bf00      	nop
 800df6c:	20000128 	.word	0x20000128

0800df70 <__errno>:
 800df70:	4b01      	ldr	r3, [pc, #4]	; (800df78 <__errno+0x8>)
 800df72:	6818      	ldr	r0, [r3, #0]
 800df74:	4770      	bx	lr
 800df76:	bf00      	nop
 800df78:	20000128 	.word	0x20000128

0800df7c <__libc_init_array>:
 800df7c:	b570      	push	{r4, r5, r6, lr}
 800df7e:	4d0d      	ldr	r5, [pc, #52]	; (800dfb4 <__libc_init_array+0x38>)
 800df80:	4c0d      	ldr	r4, [pc, #52]	; (800dfb8 <__libc_init_array+0x3c>)
 800df82:	1b64      	subs	r4, r4, r5
 800df84:	10a4      	asrs	r4, r4, #2
 800df86:	2600      	movs	r6, #0
 800df88:	42a6      	cmp	r6, r4
 800df8a:	d109      	bne.n	800dfa0 <__libc_init_array+0x24>
 800df8c:	4d0b      	ldr	r5, [pc, #44]	; (800dfbc <__libc_init_array+0x40>)
 800df8e:	4c0c      	ldr	r4, [pc, #48]	; (800dfc0 <__libc_init_array+0x44>)
 800df90:	f001 fe3c 	bl	800fc0c <_init>
 800df94:	1b64      	subs	r4, r4, r5
 800df96:	10a4      	asrs	r4, r4, #2
 800df98:	2600      	movs	r6, #0
 800df9a:	42a6      	cmp	r6, r4
 800df9c:	d105      	bne.n	800dfaa <__libc_init_array+0x2e>
 800df9e:	bd70      	pop	{r4, r5, r6, pc}
 800dfa0:	f855 3b04 	ldr.w	r3, [r5], #4
 800dfa4:	4798      	blx	r3
 800dfa6:	3601      	adds	r6, #1
 800dfa8:	e7ee      	b.n	800df88 <__libc_init_array+0xc>
 800dfaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800dfae:	4798      	blx	r3
 800dfb0:	3601      	adds	r6, #1
 800dfb2:	e7f2      	b.n	800df9a <__libc_init_array+0x1e>
 800dfb4:	0800fd90 	.word	0x0800fd90
 800dfb8:	0800fd90 	.word	0x0800fd90
 800dfbc:	0800fd90 	.word	0x0800fd90
 800dfc0:	0800fd94 	.word	0x0800fd94

0800dfc4 <__retarget_lock_acquire_recursive>:
 800dfc4:	4770      	bx	lr

0800dfc6 <__retarget_lock_release_recursive>:
 800dfc6:	4770      	bx	lr

0800dfc8 <memcpy>:
 800dfc8:	440a      	add	r2, r1
 800dfca:	4291      	cmp	r1, r2
 800dfcc:	f100 33ff 	add.w	r3, r0, #4294967295
 800dfd0:	d100      	bne.n	800dfd4 <memcpy+0xc>
 800dfd2:	4770      	bx	lr
 800dfd4:	b510      	push	{r4, lr}
 800dfd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dfda:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dfde:	4291      	cmp	r1, r2
 800dfe0:	d1f9      	bne.n	800dfd6 <memcpy+0xe>
 800dfe2:	bd10      	pop	{r4, pc}

0800dfe4 <_free_r>:
 800dfe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dfe6:	2900      	cmp	r1, #0
 800dfe8:	d044      	beq.n	800e074 <_free_r+0x90>
 800dfea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dfee:	9001      	str	r0, [sp, #4]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	f1a1 0404 	sub.w	r4, r1, #4
 800dff6:	bfb8      	it	lt
 800dff8:	18e4      	addlt	r4, r4, r3
 800dffa:	f000 f8df 	bl	800e1bc <__malloc_lock>
 800dffe:	4a1e      	ldr	r2, [pc, #120]	; (800e078 <_free_r+0x94>)
 800e000:	9801      	ldr	r0, [sp, #4]
 800e002:	6813      	ldr	r3, [r2, #0]
 800e004:	b933      	cbnz	r3, 800e014 <_free_r+0x30>
 800e006:	6063      	str	r3, [r4, #4]
 800e008:	6014      	str	r4, [r2, #0]
 800e00a:	b003      	add	sp, #12
 800e00c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e010:	f000 b8da 	b.w	800e1c8 <__malloc_unlock>
 800e014:	42a3      	cmp	r3, r4
 800e016:	d908      	bls.n	800e02a <_free_r+0x46>
 800e018:	6825      	ldr	r5, [r4, #0]
 800e01a:	1961      	adds	r1, r4, r5
 800e01c:	428b      	cmp	r3, r1
 800e01e:	bf01      	itttt	eq
 800e020:	6819      	ldreq	r1, [r3, #0]
 800e022:	685b      	ldreq	r3, [r3, #4]
 800e024:	1949      	addeq	r1, r1, r5
 800e026:	6021      	streq	r1, [r4, #0]
 800e028:	e7ed      	b.n	800e006 <_free_r+0x22>
 800e02a:	461a      	mov	r2, r3
 800e02c:	685b      	ldr	r3, [r3, #4]
 800e02e:	b10b      	cbz	r3, 800e034 <_free_r+0x50>
 800e030:	42a3      	cmp	r3, r4
 800e032:	d9fa      	bls.n	800e02a <_free_r+0x46>
 800e034:	6811      	ldr	r1, [r2, #0]
 800e036:	1855      	adds	r5, r2, r1
 800e038:	42a5      	cmp	r5, r4
 800e03a:	d10b      	bne.n	800e054 <_free_r+0x70>
 800e03c:	6824      	ldr	r4, [r4, #0]
 800e03e:	4421      	add	r1, r4
 800e040:	1854      	adds	r4, r2, r1
 800e042:	42a3      	cmp	r3, r4
 800e044:	6011      	str	r1, [r2, #0]
 800e046:	d1e0      	bne.n	800e00a <_free_r+0x26>
 800e048:	681c      	ldr	r4, [r3, #0]
 800e04a:	685b      	ldr	r3, [r3, #4]
 800e04c:	6053      	str	r3, [r2, #4]
 800e04e:	440c      	add	r4, r1
 800e050:	6014      	str	r4, [r2, #0]
 800e052:	e7da      	b.n	800e00a <_free_r+0x26>
 800e054:	d902      	bls.n	800e05c <_free_r+0x78>
 800e056:	230c      	movs	r3, #12
 800e058:	6003      	str	r3, [r0, #0]
 800e05a:	e7d6      	b.n	800e00a <_free_r+0x26>
 800e05c:	6825      	ldr	r5, [r4, #0]
 800e05e:	1961      	adds	r1, r4, r5
 800e060:	428b      	cmp	r3, r1
 800e062:	bf04      	itt	eq
 800e064:	6819      	ldreq	r1, [r3, #0]
 800e066:	685b      	ldreq	r3, [r3, #4]
 800e068:	6063      	str	r3, [r4, #4]
 800e06a:	bf04      	itt	eq
 800e06c:	1949      	addeq	r1, r1, r5
 800e06e:	6021      	streq	r1, [r4, #0]
 800e070:	6054      	str	r4, [r2, #4]
 800e072:	e7ca      	b.n	800e00a <_free_r+0x26>
 800e074:	b003      	add	sp, #12
 800e076:	bd30      	pop	{r4, r5, pc}
 800e078:	200056dc 	.word	0x200056dc

0800e07c <sbrk_aligned>:
 800e07c:	b570      	push	{r4, r5, r6, lr}
 800e07e:	4e0e      	ldr	r6, [pc, #56]	; (800e0b8 <sbrk_aligned+0x3c>)
 800e080:	460c      	mov	r4, r1
 800e082:	6831      	ldr	r1, [r6, #0]
 800e084:	4605      	mov	r5, r0
 800e086:	b911      	cbnz	r1, 800e08e <sbrk_aligned+0x12>
 800e088:	f000 fba6 	bl	800e7d8 <_sbrk_r>
 800e08c:	6030      	str	r0, [r6, #0]
 800e08e:	4621      	mov	r1, r4
 800e090:	4628      	mov	r0, r5
 800e092:	f000 fba1 	bl	800e7d8 <_sbrk_r>
 800e096:	1c43      	adds	r3, r0, #1
 800e098:	d00a      	beq.n	800e0b0 <sbrk_aligned+0x34>
 800e09a:	1cc4      	adds	r4, r0, #3
 800e09c:	f024 0403 	bic.w	r4, r4, #3
 800e0a0:	42a0      	cmp	r0, r4
 800e0a2:	d007      	beq.n	800e0b4 <sbrk_aligned+0x38>
 800e0a4:	1a21      	subs	r1, r4, r0
 800e0a6:	4628      	mov	r0, r5
 800e0a8:	f000 fb96 	bl	800e7d8 <_sbrk_r>
 800e0ac:	3001      	adds	r0, #1
 800e0ae:	d101      	bne.n	800e0b4 <sbrk_aligned+0x38>
 800e0b0:	f04f 34ff 	mov.w	r4, #4294967295
 800e0b4:	4620      	mov	r0, r4
 800e0b6:	bd70      	pop	{r4, r5, r6, pc}
 800e0b8:	200056e0 	.word	0x200056e0

0800e0bc <_malloc_r>:
 800e0bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0c0:	1ccd      	adds	r5, r1, #3
 800e0c2:	f025 0503 	bic.w	r5, r5, #3
 800e0c6:	3508      	adds	r5, #8
 800e0c8:	2d0c      	cmp	r5, #12
 800e0ca:	bf38      	it	cc
 800e0cc:	250c      	movcc	r5, #12
 800e0ce:	2d00      	cmp	r5, #0
 800e0d0:	4607      	mov	r7, r0
 800e0d2:	db01      	blt.n	800e0d8 <_malloc_r+0x1c>
 800e0d4:	42a9      	cmp	r1, r5
 800e0d6:	d905      	bls.n	800e0e4 <_malloc_r+0x28>
 800e0d8:	230c      	movs	r3, #12
 800e0da:	603b      	str	r3, [r7, #0]
 800e0dc:	2600      	movs	r6, #0
 800e0de:	4630      	mov	r0, r6
 800e0e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e0e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e1b8 <_malloc_r+0xfc>
 800e0e8:	f000 f868 	bl	800e1bc <__malloc_lock>
 800e0ec:	f8d8 3000 	ldr.w	r3, [r8]
 800e0f0:	461c      	mov	r4, r3
 800e0f2:	bb5c      	cbnz	r4, 800e14c <_malloc_r+0x90>
 800e0f4:	4629      	mov	r1, r5
 800e0f6:	4638      	mov	r0, r7
 800e0f8:	f7ff ffc0 	bl	800e07c <sbrk_aligned>
 800e0fc:	1c43      	adds	r3, r0, #1
 800e0fe:	4604      	mov	r4, r0
 800e100:	d155      	bne.n	800e1ae <_malloc_r+0xf2>
 800e102:	f8d8 4000 	ldr.w	r4, [r8]
 800e106:	4626      	mov	r6, r4
 800e108:	2e00      	cmp	r6, #0
 800e10a:	d145      	bne.n	800e198 <_malloc_r+0xdc>
 800e10c:	2c00      	cmp	r4, #0
 800e10e:	d048      	beq.n	800e1a2 <_malloc_r+0xe6>
 800e110:	6823      	ldr	r3, [r4, #0]
 800e112:	4631      	mov	r1, r6
 800e114:	4638      	mov	r0, r7
 800e116:	eb04 0903 	add.w	r9, r4, r3
 800e11a:	f000 fb5d 	bl	800e7d8 <_sbrk_r>
 800e11e:	4581      	cmp	r9, r0
 800e120:	d13f      	bne.n	800e1a2 <_malloc_r+0xe6>
 800e122:	6821      	ldr	r1, [r4, #0]
 800e124:	1a6d      	subs	r5, r5, r1
 800e126:	4629      	mov	r1, r5
 800e128:	4638      	mov	r0, r7
 800e12a:	f7ff ffa7 	bl	800e07c <sbrk_aligned>
 800e12e:	3001      	adds	r0, #1
 800e130:	d037      	beq.n	800e1a2 <_malloc_r+0xe6>
 800e132:	6823      	ldr	r3, [r4, #0]
 800e134:	442b      	add	r3, r5
 800e136:	6023      	str	r3, [r4, #0]
 800e138:	f8d8 3000 	ldr.w	r3, [r8]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d038      	beq.n	800e1b2 <_malloc_r+0xf6>
 800e140:	685a      	ldr	r2, [r3, #4]
 800e142:	42a2      	cmp	r2, r4
 800e144:	d12b      	bne.n	800e19e <_malloc_r+0xe2>
 800e146:	2200      	movs	r2, #0
 800e148:	605a      	str	r2, [r3, #4]
 800e14a:	e00f      	b.n	800e16c <_malloc_r+0xb0>
 800e14c:	6822      	ldr	r2, [r4, #0]
 800e14e:	1b52      	subs	r2, r2, r5
 800e150:	d41f      	bmi.n	800e192 <_malloc_r+0xd6>
 800e152:	2a0b      	cmp	r2, #11
 800e154:	d917      	bls.n	800e186 <_malloc_r+0xca>
 800e156:	1961      	adds	r1, r4, r5
 800e158:	42a3      	cmp	r3, r4
 800e15a:	6025      	str	r5, [r4, #0]
 800e15c:	bf18      	it	ne
 800e15e:	6059      	strne	r1, [r3, #4]
 800e160:	6863      	ldr	r3, [r4, #4]
 800e162:	bf08      	it	eq
 800e164:	f8c8 1000 	streq.w	r1, [r8]
 800e168:	5162      	str	r2, [r4, r5]
 800e16a:	604b      	str	r3, [r1, #4]
 800e16c:	4638      	mov	r0, r7
 800e16e:	f104 060b 	add.w	r6, r4, #11
 800e172:	f000 f829 	bl	800e1c8 <__malloc_unlock>
 800e176:	f026 0607 	bic.w	r6, r6, #7
 800e17a:	1d23      	adds	r3, r4, #4
 800e17c:	1af2      	subs	r2, r6, r3
 800e17e:	d0ae      	beq.n	800e0de <_malloc_r+0x22>
 800e180:	1b9b      	subs	r3, r3, r6
 800e182:	50a3      	str	r3, [r4, r2]
 800e184:	e7ab      	b.n	800e0de <_malloc_r+0x22>
 800e186:	42a3      	cmp	r3, r4
 800e188:	6862      	ldr	r2, [r4, #4]
 800e18a:	d1dd      	bne.n	800e148 <_malloc_r+0x8c>
 800e18c:	f8c8 2000 	str.w	r2, [r8]
 800e190:	e7ec      	b.n	800e16c <_malloc_r+0xb0>
 800e192:	4623      	mov	r3, r4
 800e194:	6864      	ldr	r4, [r4, #4]
 800e196:	e7ac      	b.n	800e0f2 <_malloc_r+0x36>
 800e198:	4634      	mov	r4, r6
 800e19a:	6876      	ldr	r6, [r6, #4]
 800e19c:	e7b4      	b.n	800e108 <_malloc_r+0x4c>
 800e19e:	4613      	mov	r3, r2
 800e1a0:	e7cc      	b.n	800e13c <_malloc_r+0x80>
 800e1a2:	230c      	movs	r3, #12
 800e1a4:	603b      	str	r3, [r7, #0]
 800e1a6:	4638      	mov	r0, r7
 800e1a8:	f000 f80e 	bl	800e1c8 <__malloc_unlock>
 800e1ac:	e797      	b.n	800e0de <_malloc_r+0x22>
 800e1ae:	6025      	str	r5, [r4, #0]
 800e1b0:	e7dc      	b.n	800e16c <_malloc_r+0xb0>
 800e1b2:	605b      	str	r3, [r3, #4]
 800e1b4:	deff      	udf	#255	; 0xff
 800e1b6:	bf00      	nop
 800e1b8:	200056dc 	.word	0x200056dc

0800e1bc <__malloc_lock>:
 800e1bc:	4801      	ldr	r0, [pc, #4]	; (800e1c4 <__malloc_lock+0x8>)
 800e1be:	f7ff bf01 	b.w	800dfc4 <__retarget_lock_acquire_recursive>
 800e1c2:	bf00      	nop
 800e1c4:	200056d8 	.word	0x200056d8

0800e1c8 <__malloc_unlock>:
 800e1c8:	4801      	ldr	r0, [pc, #4]	; (800e1d0 <__malloc_unlock+0x8>)
 800e1ca:	f7ff befc 	b.w	800dfc6 <__retarget_lock_release_recursive>
 800e1ce:	bf00      	nop
 800e1d0:	200056d8 	.word	0x200056d8

0800e1d4 <__ssputs_r>:
 800e1d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1d8:	688e      	ldr	r6, [r1, #8]
 800e1da:	461f      	mov	r7, r3
 800e1dc:	42be      	cmp	r6, r7
 800e1de:	680b      	ldr	r3, [r1, #0]
 800e1e0:	4682      	mov	sl, r0
 800e1e2:	460c      	mov	r4, r1
 800e1e4:	4690      	mov	r8, r2
 800e1e6:	d82c      	bhi.n	800e242 <__ssputs_r+0x6e>
 800e1e8:	898a      	ldrh	r2, [r1, #12]
 800e1ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e1ee:	d026      	beq.n	800e23e <__ssputs_r+0x6a>
 800e1f0:	6965      	ldr	r5, [r4, #20]
 800e1f2:	6909      	ldr	r1, [r1, #16]
 800e1f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e1f8:	eba3 0901 	sub.w	r9, r3, r1
 800e1fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e200:	1c7b      	adds	r3, r7, #1
 800e202:	444b      	add	r3, r9
 800e204:	106d      	asrs	r5, r5, #1
 800e206:	429d      	cmp	r5, r3
 800e208:	bf38      	it	cc
 800e20a:	461d      	movcc	r5, r3
 800e20c:	0553      	lsls	r3, r2, #21
 800e20e:	d527      	bpl.n	800e260 <__ssputs_r+0x8c>
 800e210:	4629      	mov	r1, r5
 800e212:	f7ff ff53 	bl	800e0bc <_malloc_r>
 800e216:	4606      	mov	r6, r0
 800e218:	b360      	cbz	r0, 800e274 <__ssputs_r+0xa0>
 800e21a:	6921      	ldr	r1, [r4, #16]
 800e21c:	464a      	mov	r2, r9
 800e21e:	f7ff fed3 	bl	800dfc8 <memcpy>
 800e222:	89a3      	ldrh	r3, [r4, #12]
 800e224:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e22c:	81a3      	strh	r3, [r4, #12]
 800e22e:	6126      	str	r6, [r4, #16]
 800e230:	6165      	str	r5, [r4, #20]
 800e232:	444e      	add	r6, r9
 800e234:	eba5 0509 	sub.w	r5, r5, r9
 800e238:	6026      	str	r6, [r4, #0]
 800e23a:	60a5      	str	r5, [r4, #8]
 800e23c:	463e      	mov	r6, r7
 800e23e:	42be      	cmp	r6, r7
 800e240:	d900      	bls.n	800e244 <__ssputs_r+0x70>
 800e242:	463e      	mov	r6, r7
 800e244:	6820      	ldr	r0, [r4, #0]
 800e246:	4632      	mov	r2, r6
 800e248:	4641      	mov	r1, r8
 800e24a:	f000 faab 	bl	800e7a4 <memmove>
 800e24e:	68a3      	ldr	r3, [r4, #8]
 800e250:	1b9b      	subs	r3, r3, r6
 800e252:	60a3      	str	r3, [r4, #8]
 800e254:	6823      	ldr	r3, [r4, #0]
 800e256:	4433      	add	r3, r6
 800e258:	6023      	str	r3, [r4, #0]
 800e25a:	2000      	movs	r0, #0
 800e25c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e260:	462a      	mov	r2, r5
 800e262:	f000 fac9 	bl	800e7f8 <_realloc_r>
 800e266:	4606      	mov	r6, r0
 800e268:	2800      	cmp	r0, #0
 800e26a:	d1e0      	bne.n	800e22e <__ssputs_r+0x5a>
 800e26c:	6921      	ldr	r1, [r4, #16]
 800e26e:	4650      	mov	r0, sl
 800e270:	f7ff feb8 	bl	800dfe4 <_free_r>
 800e274:	230c      	movs	r3, #12
 800e276:	f8ca 3000 	str.w	r3, [sl]
 800e27a:	89a3      	ldrh	r3, [r4, #12]
 800e27c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e280:	81a3      	strh	r3, [r4, #12]
 800e282:	f04f 30ff 	mov.w	r0, #4294967295
 800e286:	e7e9      	b.n	800e25c <__ssputs_r+0x88>

0800e288 <_svfiprintf_r>:
 800e288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e28c:	4698      	mov	r8, r3
 800e28e:	898b      	ldrh	r3, [r1, #12]
 800e290:	061b      	lsls	r3, r3, #24
 800e292:	b09d      	sub	sp, #116	; 0x74
 800e294:	4607      	mov	r7, r0
 800e296:	460d      	mov	r5, r1
 800e298:	4614      	mov	r4, r2
 800e29a:	d50e      	bpl.n	800e2ba <_svfiprintf_r+0x32>
 800e29c:	690b      	ldr	r3, [r1, #16]
 800e29e:	b963      	cbnz	r3, 800e2ba <_svfiprintf_r+0x32>
 800e2a0:	2140      	movs	r1, #64	; 0x40
 800e2a2:	f7ff ff0b 	bl	800e0bc <_malloc_r>
 800e2a6:	6028      	str	r0, [r5, #0]
 800e2a8:	6128      	str	r0, [r5, #16]
 800e2aa:	b920      	cbnz	r0, 800e2b6 <_svfiprintf_r+0x2e>
 800e2ac:	230c      	movs	r3, #12
 800e2ae:	603b      	str	r3, [r7, #0]
 800e2b0:	f04f 30ff 	mov.w	r0, #4294967295
 800e2b4:	e0d0      	b.n	800e458 <_svfiprintf_r+0x1d0>
 800e2b6:	2340      	movs	r3, #64	; 0x40
 800e2b8:	616b      	str	r3, [r5, #20]
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	9309      	str	r3, [sp, #36]	; 0x24
 800e2be:	2320      	movs	r3, #32
 800e2c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e2c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800e2c8:	2330      	movs	r3, #48	; 0x30
 800e2ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e470 <_svfiprintf_r+0x1e8>
 800e2ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e2d2:	f04f 0901 	mov.w	r9, #1
 800e2d6:	4623      	mov	r3, r4
 800e2d8:	469a      	mov	sl, r3
 800e2da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e2de:	b10a      	cbz	r2, 800e2e4 <_svfiprintf_r+0x5c>
 800e2e0:	2a25      	cmp	r2, #37	; 0x25
 800e2e2:	d1f9      	bne.n	800e2d8 <_svfiprintf_r+0x50>
 800e2e4:	ebba 0b04 	subs.w	fp, sl, r4
 800e2e8:	d00b      	beq.n	800e302 <_svfiprintf_r+0x7a>
 800e2ea:	465b      	mov	r3, fp
 800e2ec:	4622      	mov	r2, r4
 800e2ee:	4629      	mov	r1, r5
 800e2f0:	4638      	mov	r0, r7
 800e2f2:	f7ff ff6f 	bl	800e1d4 <__ssputs_r>
 800e2f6:	3001      	adds	r0, #1
 800e2f8:	f000 80a9 	beq.w	800e44e <_svfiprintf_r+0x1c6>
 800e2fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e2fe:	445a      	add	r2, fp
 800e300:	9209      	str	r2, [sp, #36]	; 0x24
 800e302:	f89a 3000 	ldrb.w	r3, [sl]
 800e306:	2b00      	cmp	r3, #0
 800e308:	f000 80a1 	beq.w	800e44e <_svfiprintf_r+0x1c6>
 800e30c:	2300      	movs	r3, #0
 800e30e:	f04f 32ff 	mov.w	r2, #4294967295
 800e312:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e316:	f10a 0a01 	add.w	sl, sl, #1
 800e31a:	9304      	str	r3, [sp, #16]
 800e31c:	9307      	str	r3, [sp, #28]
 800e31e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e322:	931a      	str	r3, [sp, #104]	; 0x68
 800e324:	4654      	mov	r4, sl
 800e326:	2205      	movs	r2, #5
 800e328:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e32c:	4850      	ldr	r0, [pc, #320]	; (800e470 <_svfiprintf_r+0x1e8>)
 800e32e:	f7f1 ff6f 	bl	8000210 <memchr>
 800e332:	9a04      	ldr	r2, [sp, #16]
 800e334:	b9d8      	cbnz	r0, 800e36e <_svfiprintf_r+0xe6>
 800e336:	06d0      	lsls	r0, r2, #27
 800e338:	bf44      	itt	mi
 800e33a:	2320      	movmi	r3, #32
 800e33c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e340:	0711      	lsls	r1, r2, #28
 800e342:	bf44      	itt	mi
 800e344:	232b      	movmi	r3, #43	; 0x2b
 800e346:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e34a:	f89a 3000 	ldrb.w	r3, [sl]
 800e34e:	2b2a      	cmp	r3, #42	; 0x2a
 800e350:	d015      	beq.n	800e37e <_svfiprintf_r+0xf6>
 800e352:	9a07      	ldr	r2, [sp, #28]
 800e354:	4654      	mov	r4, sl
 800e356:	2000      	movs	r0, #0
 800e358:	f04f 0c0a 	mov.w	ip, #10
 800e35c:	4621      	mov	r1, r4
 800e35e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e362:	3b30      	subs	r3, #48	; 0x30
 800e364:	2b09      	cmp	r3, #9
 800e366:	d94d      	bls.n	800e404 <_svfiprintf_r+0x17c>
 800e368:	b1b0      	cbz	r0, 800e398 <_svfiprintf_r+0x110>
 800e36a:	9207      	str	r2, [sp, #28]
 800e36c:	e014      	b.n	800e398 <_svfiprintf_r+0x110>
 800e36e:	eba0 0308 	sub.w	r3, r0, r8
 800e372:	fa09 f303 	lsl.w	r3, r9, r3
 800e376:	4313      	orrs	r3, r2
 800e378:	9304      	str	r3, [sp, #16]
 800e37a:	46a2      	mov	sl, r4
 800e37c:	e7d2      	b.n	800e324 <_svfiprintf_r+0x9c>
 800e37e:	9b03      	ldr	r3, [sp, #12]
 800e380:	1d19      	adds	r1, r3, #4
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	9103      	str	r1, [sp, #12]
 800e386:	2b00      	cmp	r3, #0
 800e388:	bfbb      	ittet	lt
 800e38a:	425b      	neglt	r3, r3
 800e38c:	f042 0202 	orrlt.w	r2, r2, #2
 800e390:	9307      	strge	r3, [sp, #28]
 800e392:	9307      	strlt	r3, [sp, #28]
 800e394:	bfb8      	it	lt
 800e396:	9204      	strlt	r2, [sp, #16]
 800e398:	7823      	ldrb	r3, [r4, #0]
 800e39a:	2b2e      	cmp	r3, #46	; 0x2e
 800e39c:	d10c      	bne.n	800e3b8 <_svfiprintf_r+0x130>
 800e39e:	7863      	ldrb	r3, [r4, #1]
 800e3a0:	2b2a      	cmp	r3, #42	; 0x2a
 800e3a2:	d134      	bne.n	800e40e <_svfiprintf_r+0x186>
 800e3a4:	9b03      	ldr	r3, [sp, #12]
 800e3a6:	1d1a      	adds	r2, r3, #4
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	9203      	str	r2, [sp, #12]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	bfb8      	it	lt
 800e3b0:	f04f 33ff 	movlt.w	r3, #4294967295
 800e3b4:	3402      	adds	r4, #2
 800e3b6:	9305      	str	r3, [sp, #20]
 800e3b8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800e480 <_svfiprintf_r+0x1f8>
 800e3bc:	7821      	ldrb	r1, [r4, #0]
 800e3be:	2203      	movs	r2, #3
 800e3c0:	4650      	mov	r0, sl
 800e3c2:	f7f1 ff25 	bl	8000210 <memchr>
 800e3c6:	b138      	cbz	r0, 800e3d8 <_svfiprintf_r+0x150>
 800e3c8:	9b04      	ldr	r3, [sp, #16]
 800e3ca:	eba0 000a 	sub.w	r0, r0, sl
 800e3ce:	2240      	movs	r2, #64	; 0x40
 800e3d0:	4082      	lsls	r2, r0
 800e3d2:	4313      	orrs	r3, r2
 800e3d4:	3401      	adds	r4, #1
 800e3d6:	9304      	str	r3, [sp, #16]
 800e3d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3dc:	4825      	ldr	r0, [pc, #148]	; (800e474 <_svfiprintf_r+0x1ec>)
 800e3de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e3e2:	2206      	movs	r2, #6
 800e3e4:	f7f1 ff14 	bl	8000210 <memchr>
 800e3e8:	2800      	cmp	r0, #0
 800e3ea:	d038      	beq.n	800e45e <_svfiprintf_r+0x1d6>
 800e3ec:	4b22      	ldr	r3, [pc, #136]	; (800e478 <_svfiprintf_r+0x1f0>)
 800e3ee:	bb1b      	cbnz	r3, 800e438 <_svfiprintf_r+0x1b0>
 800e3f0:	9b03      	ldr	r3, [sp, #12]
 800e3f2:	3307      	adds	r3, #7
 800e3f4:	f023 0307 	bic.w	r3, r3, #7
 800e3f8:	3308      	adds	r3, #8
 800e3fa:	9303      	str	r3, [sp, #12]
 800e3fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3fe:	4433      	add	r3, r6
 800e400:	9309      	str	r3, [sp, #36]	; 0x24
 800e402:	e768      	b.n	800e2d6 <_svfiprintf_r+0x4e>
 800e404:	fb0c 3202 	mla	r2, ip, r2, r3
 800e408:	460c      	mov	r4, r1
 800e40a:	2001      	movs	r0, #1
 800e40c:	e7a6      	b.n	800e35c <_svfiprintf_r+0xd4>
 800e40e:	2300      	movs	r3, #0
 800e410:	3401      	adds	r4, #1
 800e412:	9305      	str	r3, [sp, #20]
 800e414:	4619      	mov	r1, r3
 800e416:	f04f 0c0a 	mov.w	ip, #10
 800e41a:	4620      	mov	r0, r4
 800e41c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e420:	3a30      	subs	r2, #48	; 0x30
 800e422:	2a09      	cmp	r2, #9
 800e424:	d903      	bls.n	800e42e <_svfiprintf_r+0x1a6>
 800e426:	2b00      	cmp	r3, #0
 800e428:	d0c6      	beq.n	800e3b8 <_svfiprintf_r+0x130>
 800e42a:	9105      	str	r1, [sp, #20]
 800e42c:	e7c4      	b.n	800e3b8 <_svfiprintf_r+0x130>
 800e42e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e432:	4604      	mov	r4, r0
 800e434:	2301      	movs	r3, #1
 800e436:	e7f0      	b.n	800e41a <_svfiprintf_r+0x192>
 800e438:	ab03      	add	r3, sp, #12
 800e43a:	9300      	str	r3, [sp, #0]
 800e43c:	462a      	mov	r2, r5
 800e43e:	4b0f      	ldr	r3, [pc, #60]	; (800e47c <_svfiprintf_r+0x1f4>)
 800e440:	a904      	add	r1, sp, #16
 800e442:	4638      	mov	r0, r7
 800e444:	f3af 8000 	nop.w
 800e448:	1c42      	adds	r2, r0, #1
 800e44a:	4606      	mov	r6, r0
 800e44c:	d1d6      	bne.n	800e3fc <_svfiprintf_r+0x174>
 800e44e:	89ab      	ldrh	r3, [r5, #12]
 800e450:	065b      	lsls	r3, r3, #25
 800e452:	f53f af2d 	bmi.w	800e2b0 <_svfiprintf_r+0x28>
 800e456:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e458:	b01d      	add	sp, #116	; 0x74
 800e45a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e45e:	ab03      	add	r3, sp, #12
 800e460:	9300      	str	r3, [sp, #0]
 800e462:	462a      	mov	r2, r5
 800e464:	4b05      	ldr	r3, [pc, #20]	; (800e47c <_svfiprintf_r+0x1f4>)
 800e466:	a904      	add	r1, sp, #16
 800e468:	4638      	mov	r0, r7
 800e46a:	f000 f879 	bl	800e560 <_printf_i>
 800e46e:	e7eb      	b.n	800e448 <_svfiprintf_r+0x1c0>
 800e470:	0800fcae 	.word	0x0800fcae
 800e474:	0800fcb8 	.word	0x0800fcb8
 800e478:	00000000 	.word	0x00000000
 800e47c:	0800e1d5 	.word	0x0800e1d5
 800e480:	0800fcb4 	.word	0x0800fcb4

0800e484 <_printf_common>:
 800e484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e488:	4616      	mov	r6, r2
 800e48a:	4699      	mov	r9, r3
 800e48c:	688a      	ldr	r2, [r1, #8]
 800e48e:	690b      	ldr	r3, [r1, #16]
 800e490:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e494:	4293      	cmp	r3, r2
 800e496:	bfb8      	it	lt
 800e498:	4613      	movlt	r3, r2
 800e49a:	6033      	str	r3, [r6, #0]
 800e49c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e4a0:	4607      	mov	r7, r0
 800e4a2:	460c      	mov	r4, r1
 800e4a4:	b10a      	cbz	r2, 800e4aa <_printf_common+0x26>
 800e4a6:	3301      	adds	r3, #1
 800e4a8:	6033      	str	r3, [r6, #0]
 800e4aa:	6823      	ldr	r3, [r4, #0]
 800e4ac:	0699      	lsls	r1, r3, #26
 800e4ae:	bf42      	ittt	mi
 800e4b0:	6833      	ldrmi	r3, [r6, #0]
 800e4b2:	3302      	addmi	r3, #2
 800e4b4:	6033      	strmi	r3, [r6, #0]
 800e4b6:	6825      	ldr	r5, [r4, #0]
 800e4b8:	f015 0506 	ands.w	r5, r5, #6
 800e4bc:	d106      	bne.n	800e4cc <_printf_common+0x48>
 800e4be:	f104 0a19 	add.w	sl, r4, #25
 800e4c2:	68e3      	ldr	r3, [r4, #12]
 800e4c4:	6832      	ldr	r2, [r6, #0]
 800e4c6:	1a9b      	subs	r3, r3, r2
 800e4c8:	42ab      	cmp	r3, r5
 800e4ca:	dc26      	bgt.n	800e51a <_printf_common+0x96>
 800e4cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e4d0:	1e13      	subs	r3, r2, #0
 800e4d2:	6822      	ldr	r2, [r4, #0]
 800e4d4:	bf18      	it	ne
 800e4d6:	2301      	movne	r3, #1
 800e4d8:	0692      	lsls	r2, r2, #26
 800e4da:	d42b      	bmi.n	800e534 <_printf_common+0xb0>
 800e4dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e4e0:	4649      	mov	r1, r9
 800e4e2:	4638      	mov	r0, r7
 800e4e4:	47c0      	blx	r8
 800e4e6:	3001      	adds	r0, #1
 800e4e8:	d01e      	beq.n	800e528 <_printf_common+0xa4>
 800e4ea:	6823      	ldr	r3, [r4, #0]
 800e4ec:	6922      	ldr	r2, [r4, #16]
 800e4ee:	f003 0306 	and.w	r3, r3, #6
 800e4f2:	2b04      	cmp	r3, #4
 800e4f4:	bf02      	ittt	eq
 800e4f6:	68e5      	ldreq	r5, [r4, #12]
 800e4f8:	6833      	ldreq	r3, [r6, #0]
 800e4fa:	1aed      	subeq	r5, r5, r3
 800e4fc:	68a3      	ldr	r3, [r4, #8]
 800e4fe:	bf0c      	ite	eq
 800e500:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e504:	2500      	movne	r5, #0
 800e506:	4293      	cmp	r3, r2
 800e508:	bfc4      	itt	gt
 800e50a:	1a9b      	subgt	r3, r3, r2
 800e50c:	18ed      	addgt	r5, r5, r3
 800e50e:	2600      	movs	r6, #0
 800e510:	341a      	adds	r4, #26
 800e512:	42b5      	cmp	r5, r6
 800e514:	d11a      	bne.n	800e54c <_printf_common+0xc8>
 800e516:	2000      	movs	r0, #0
 800e518:	e008      	b.n	800e52c <_printf_common+0xa8>
 800e51a:	2301      	movs	r3, #1
 800e51c:	4652      	mov	r2, sl
 800e51e:	4649      	mov	r1, r9
 800e520:	4638      	mov	r0, r7
 800e522:	47c0      	blx	r8
 800e524:	3001      	adds	r0, #1
 800e526:	d103      	bne.n	800e530 <_printf_common+0xac>
 800e528:	f04f 30ff 	mov.w	r0, #4294967295
 800e52c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e530:	3501      	adds	r5, #1
 800e532:	e7c6      	b.n	800e4c2 <_printf_common+0x3e>
 800e534:	18e1      	adds	r1, r4, r3
 800e536:	1c5a      	adds	r2, r3, #1
 800e538:	2030      	movs	r0, #48	; 0x30
 800e53a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e53e:	4422      	add	r2, r4
 800e540:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e544:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e548:	3302      	adds	r3, #2
 800e54a:	e7c7      	b.n	800e4dc <_printf_common+0x58>
 800e54c:	2301      	movs	r3, #1
 800e54e:	4622      	mov	r2, r4
 800e550:	4649      	mov	r1, r9
 800e552:	4638      	mov	r0, r7
 800e554:	47c0      	blx	r8
 800e556:	3001      	adds	r0, #1
 800e558:	d0e6      	beq.n	800e528 <_printf_common+0xa4>
 800e55a:	3601      	adds	r6, #1
 800e55c:	e7d9      	b.n	800e512 <_printf_common+0x8e>
	...

0800e560 <_printf_i>:
 800e560:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e564:	7e0f      	ldrb	r7, [r1, #24]
 800e566:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e568:	2f78      	cmp	r7, #120	; 0x78
 800e56a:	4691      	mov	r9, r2
 800e56c:	4680      	mov	r8, r0
 800e56e:	460c      	mov	r4, r1
 800e570:	469a      	mov	sl, r3
 800e572:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e576:	d807      	bhi.n	800e588 <_printf_i+0x28>
 800e578:	2f62      	cmp	r7, #98	; 0x62
 800e57a:	d80a      	bhi.n	800e592 <_printf_i+0x32>
 800e57c:	2f00      	cmp	r7, #0
 800e57e:	f000 80d4 	beq.w	800e72a <_printf_i+0x1ca>
 800e582:	2f58      	cmp	r7, #88	; 0x58
 800e584:	f000 80c0 	beq.w	800e708 <_printf_i+0x1a8>
 800e588:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e58c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e590:	e03a      	b.n	800e608 <_printf_i+0xa8>
 800e592:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e596:	2b15      	cmp	r3, #21
 800e598:	d8f6      	bhi.n	800e588 <_printf_i+0x28>
 800e59a:	a101      	add	r1, pc, #4	; (adr r1, 800e5a0 <_printf_i+0x40>)
 800e59c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e5a0:	0800e5f9 	.word	0x0800e5f9
 800e5a4:	0800e60d 	.word	0x0800e60d
 800e5a8:	0800e589 	.word	0x0800e589
 800e5ac:	0800e589 	.word	0x0800e589
 800e5b0:	0800e589 	.word	0x0800e589
 800e5b4:	0800e589 	.word	0x0800e589
 800e5b8:	0800e60d 	.word	0x0800e60d
 800e5bc:	0800e589 	.word	0x0800e589
 800e5c0:	0800e589 	.word	0x0800e589
 800e5c4:	0800e589 	.word	0x0800e589
 800e5c8:	0800e589 	.word	0x0800e589
 800e5cc:	0800e711 	.word	0x0800e711
 800e5d0:	0800e639 	.word	0x0800e639
 800e5d4:	0800e6cb 	.word	0x0800e6cb
 800e5d8:	0800e589 	.word	0x0800e589
 800e5dc:	0800e589 	.word	0x0800e589
 800e5e0:	0800e733 	.word	0x0800e733
 800e5e4:	0800e589 	.word	0x0800e589
 800e5e8:	0800e639 	.word	0x0800e639
 800e5ec:	0800e589 	.word	0x0800e589
 800e5f0:	0800e589 	.word	0x0800e589
 800e5f4:	0800e6d3 	.word	0x0800e6d3
 800e5f8:	682b      	ldr	r3, [r5, #0]
 800e5fa:	1d1a      	adds	r2, r3, #4
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	602a      	str	r2, [r5, #0]
 800e600:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e604:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e608:	2301      	movs	r3, #1
 800e60a:	e09f      	b.n	800e74c <_printf_i+0x1ec>
 800e60c:	6820      	ldr	r0, [r4, #0]
 800e60e:	682b      	ldr	r3, [r5, #0]
 800e610:	0607      	lsls	r7, r0, #24
 800e612:	f103 0104 	add.w	r1, r3, #4
 800e616:	6029      	str	r1, [r5, #0]
 800e618:	d501      	bpl.n	800e61e <_printf_i+0xbe>
 800e61a:	681e      	ldr	r6, [r3, #0]
 800e61c:	e003      	b.n	800e626 <_printf_i+0xc6>
 800e61e:	0646      	lsls	r6, r0, #25
 800e620:	d5fb      	bpl.n	800e61a <_printf_i+0xba>
 800e622:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e626:	2e00      	cmp	r6, #0
 800e628:	da03      	bge.n	800e632 <_printf_i+0xd2>
 800e62a:	232d      	movs	r3, #45	; 0x2d
 800e62c:	4276      	negs	r6, r6
 800e62e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e632:	485a      	ldr	r0, [pc, #360]	; (800e79c <_printf_i+0x23c>)
 800e634:	230a      	movs	r3, #10
 800e636:	e012      	b.n	800e65e <_printf_i+0xfe>
 800e638:	682b      	ldr	r3, [r5, #0]
 800e63a:	6820      	ldr	r0, [r4, #0]
 800e63c:	1d19      	adds	r1, r3, #4
 800e63e:	6029      	str	r1, [r5, #0]
 800e640:	0605      	lsls	r5, r0, #24
 800e642:	d501      	bpl.n	800e648 <_printf_i+0xe8>
 800e644:	681e      	ldr	r6, [r3, #0]
 800e646:	e002      	b.n	800e64e <_printf_i+0xee>
 800e648:	0641      	lsls	r1, r0, #25
 800e64a:	d5fb      	bpl.n	800e644 <_printf_i+0xe4>
 800e64c:	881e      	ldrh	r6, [r3, #0]
 800e64e:	4853      	ldr	r0, [pc, #332]	; (800e79c <_printf_i+0x23c>)
 800e650:	2f6f      	cmp	r7, #111	; 0x6f
 800e652:	bf0c      	ite	eq
 800e654:	2308      	moveq	r3, #8
 800e656:	230a      	movne	r3, #10
 800e658:	2100      	movs	r1, #0
 800e65a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e65e:	6865      	ldr	r5, [r4, #4]
 800e660:	60a5      	str	r5, [r4, #8]
 800e662:	2d00      	cmp	r5, #0
 800e664:	bfa2      	ittt	ge
 800e666:	6821      	ldrge	r1, [r4, #0]
 800e668:	f021 0104 	bicge.w	r1, r1, #4
 800e66c:	6021      	strge	r1, [r4, #0]
 800e66e:	b90e      	cbnz	r6, 800e674 <_printf_i+0x114>
 800e670:	2d00      	cmp	r5, #0
 800e672:	d04b      	beq.n	800e70c <_printf_i+0x1ac>
 800e674:	4615      	mov	r5, r2
 800e676:	fbb6 f1f3 	udiv	r1, r6, r3
 800e67a:	fb03 6711 	mls	r7, r3, r1, r6
 800e67e:	5dc7      	ldrb	r7, [r0, r7]
 800e680:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e684:	4637      	mov	r7, r6
 800e686:	42bb      	cmp	r3, r7
 800e688:	460e      	mov	r6, r1
 800e68a:	d9f4      	bls.n	800e676 <_printf_i+0x116>
 800e68c:	2b08      	cmp	r3, #8
 800e68e:	d10b      	bne.n	800e6a8 <_printf_i+0x148>
 800e690:	6823      	ldr	r3, [r4, #0]
 800e692:	07de      	lsls	r6, r3, #31
 800e694:	d508      	bpl.n	800e6a8 <_printf_i+0x148>
 800e696:	6923      	ldr	r3, [r4, #16]
 800e698:	6861      	ldr	r1, [r4, #4]
 800e69a:	4299      	cmp	r1, r3
 800e69c:	bfde      	ittt	le
 800e69e:	2330      	movle	r3, #48	; 0x30
 800e6a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e6a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e6a8:	1b52      	subs	r2, r2, r5
 800e6aa:	6122      	str	r2, [r4, #16]
 800e6ac:	f8cd a000 	str.w	sl, [sp]
 800e6b0:	464b      	mov	r3, r9
 800e6b2:	aa03      	add	r2, sp, #12
 800e6b4:	4621      	mov	r1, r4
 800e6b6:	4640      	mov	r0, r8
 800e6b8:	f7ff fee4 	bl	800e484 <_printf_common>
 800e6bc:	3001      	adds	r0, #1
 800e6be:	d14a      	bne.n	800e756 <_printf_i+0x1f6>
 800e6c0:	f04f 30ff 	mov.w	r0, #4294967295
 800e6c4:	b004      	add	sp, #16
 800e6c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6ca:	6823      	ldr	r3, [r4, #0]
 800e6cc:	f043 0320 	orr.w	r3, r3, #32
 800e6d0:	6023      	str	r3, [r4, #0]
 800e6d2:	4833      	ldr	r0, [pc, #204]	; (800e7a0 <_printf_i+0x240>)
 800e6d4:	2778      	movs	r7, #120	; 0x78
 800e6d6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e6da:	6823      	ldr	r3, [r4, #0]
 800e6dc:	6829      	ldr	r1, [r5, #0]
 800e6de:	061f      	lsls	r7, r3, #24
 800e6e0:	f851 6b04 	ldr.w	r6, [r1], #4
 800e6e4:	d402      	bmi.n	800e6ec <_printf_i+0x18c>
 800e6e6:	065f      	lsls	r7, r3, #25
 800e6e8:	bf48      	it	mi
 800e6ea:	b2b6      	uxthmi	r6, r6
 800e6ec:	07df      	lsls	r7, r3, #31
 800e6ee:	bf48      	it	mi
 800e6f0:	f043 0320 	orrmi.w	r3, r3, #32
 800e6f4:	6029      	str	r1, [r5, #0]
 800e6f6:	bf48      	it	mi
 800e6f8:	6023      	strmi	r3, [r4, #0]
 800e6fa:	b91e      	cbnz	r6, 800e704 <_printf_i+0x1a4>
 800e6fc:	6823      	ldr	r3, [r4, #0]
 800e6fe:	f023 0320 	bic.w	r3, r3, #32
 800e702:	6023      	str	r3, [r4, #0]
 800e704:	2310      	movs	r3, #16
 800e706:	e7a7      	b.n	800e658 <_printf_i+0xf8>
 800e708:	4824      	ldr	r0, [pc, #144]	; (800e79c <_printf_i+0x23c>)
 800e70a:	e7e4      	b.n	800e6d6 <_printf_i+0x176>
 800e70c:	4615      	mov	r5, r2
 800e70e:	e7bd      	b.n	800e68c <_printf_i+0x12c>
 800e710:	682b      	ldr	r3, [r5, #0]
 800e712:	6826      	ldr	r6, [r4, #0]
 800e714:	6961      	ldr	r1, [r4, #20]
 800e716:	1d18      	adds	r0, r3, #4
 800e718:	6028      	str	r0, [r5, #0]
 800e71a:	0635      	lsls	r5, r6, #24
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	d501      	bpl.n	800e724 <_printf_i+0x1c4>
 800e720:	6019      	str	r1, [r3, #0]
 800e722:	e002      	b.n	800e72a <_printf_i+0x1ca>
 800e724:	0670      	lsls	r0, r6, #25
 800e726:	d5fb      	bpl.n	800e720 <_printf_i+0x1c0>
 800e728:	8019      	strh	r1, [r3, #0]
 800e72a:	2300      	movs	r3, #0
 800e72c:	6123      	str	r3, [r4, #16]
 800e72e:	4615      	mov	r5, r2
 800e730:	e7bc      	b.n	800e6ac <_printf_i+0x14c>
 800e732:	682b      	ldr	r3, [r5, #0]
 800e734:	1d1a      	adds	r2, r3, #4
 800e736:	602a      	str	r2, [r5, #0]
 800e738:	681d      	ldr	r5, [r3, #0]
 800e73a:	6862      	ldr	r2, [r4, #4]
 800e73c:	2100      	movs	r1, #0
 800e73e:	4628      	mov	r0, r5
 800e740:	f7f1 fd66 	bl	8000210 <memchr>
 800e744:	b108      	cbz	r0, 800e74a <_printf_i+0x1ea>
 800e746:	1b40      	subs	r0, r0, r5
 800e748:	6060      	str	r0, [r4, #4]
 800e74a:	6863      	ldr	r3, [r4, #4]
 800e74c:	6123      	str	r3, [r4, #16]
 800e74e:	2300      	movs	r3, #0
 800e750:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e754:	e7aa      	b.n	800e6ac <_printf_i+0x14c>
 800e756:	6923      	ldr	r3, [r4, #16]
 800e758:	462a      	mov	r2, r5
 800e75a:	4649      	mov	r1, r9
 800e75c:	4640      	mov	r0, r8
 800e75e:	47d0      	blx	sl
 800e760:	3001      	adds	r0, #1
 800e762:	d0ad      	beq.n	800e6c0 <_printf_i+0x160>
 800e764:	6823      	ldr	r3, [r4, #0]
 800e766:	079b      	lsls	r3, r3, #30
 800e768:	d413      	bmi.n	800e792 <_printf_i+0x232>
 800e76a:	68e0      	ldr	r0, [r4, #12]
 800e76c:	9b03      	ldr	r3, [sp, #12]
 800e76e:	4298      	cmp	r0, r3
 800e770:	bfb8      	it	lt
 800e772:	4618      	movlt	r0, r3
 800e774:	e7a6      	b.n	800e6c4 <_printf_i+0x164>
 800e776:	2301      	movs	r3, #1
 800e778:	4632      	mov	r2, r6
 800e77a:	4649      	mov	r1, r9
 800e77c:	4640      	mov	r0, r8
 800e77e:	47d0      	blx	sl
 800e780:	3001      	adds	r0, #1
 800e782:	d09d      	beq.n	800e6c0 <_printf_i+0x160>
 800e784:	3501      	adds	r5, #1
 800e786:	68e3      	ldr	r3, [r4, #12]
 800e788:	9903      	ldr	r1, [sp, #12]
 800e78a:	1a5b      	subs	r3, r3, r1
 800e78c:	42ab      	cmp	r3, r5
 800e78e:	dcf2      	bgt.n	800e776 <_printf_i+0x216>
 800e790:	e7eb      	b.n	800e76a <_printf_i+0x20a>
 800e792:	2500      	movs	r5, #0
 800e794:	f104 0619 	add.w	r6, r4, #25
 800e798:	e7f5      	b.n	800e786 <_printf_i+0x226>
 800e79a:	bf00      	nop
 800e79c:	0800fcbf 	.word	0x0800fcbf
 800e7a0:	0800fcd0 	.word	0x0800fcd0

0800e7a4 <memmove>:
 800e7a4:	4288      	cmp	r0, r1
 800e7a6:	b510      	push	{r4, lr}
 800e7a8:	eb01 0402 	add.w	r4, r1, r2
 800e7ac:	d902      	bls.n	800e7b4 <memmove+0x10>
 800e7ae:	4284      	cmp	r4, r0
 800e7b0:	4623      	mov	r3, r4
 800e7b2:	d807      	bhi.n	800e7c4 <memmove+0x20>
 800e7b4:	1e43      	subs	r3, r0, #1
 800e7b6:	42a1      	cmp	r1, r4
 800e7b8:	d008      	beq.n	800e7cc <memmove+0x28>
 800e7ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e7be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e7c2:	e7f8      	b.n	800e7b6 <memmove+0x12>
 800e7c4:	4402      	add	r2, r0
 800e7c6:	4601      	mov	r1, r0
 800e7c8:	428a      	cmp	r2, r1
 800e7ca:	d100      	bne.n	800e7ce <memmove+0x2a>
 800e7cc:	bd10      	pop	{r4, pc}
 800e7ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e7d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e7d6:	e7f7      	b.n	800e7c8 <memmove+0x24>

0800e7d8 <_sbrk_r>:
 800e7d8:	b538      	push	{r3, r4, r5, lr}
 800e7da:	4d06      	ldr	r5, [pc, #24]	; (800e7f4 <_sbrk_r+0x1c>)
 800e7dc:	2300      	movs	r3, #0
 800e7de:	4604      	mov	r4, r0
 800e7e0:	4608      	mov	r0, r1
 800e7e2:	602b      	str	r3, [r5, #0]
 800e7e4:	f7f3 f824 	bl	8001830 <_sbrk>
 800e7e8:	1c43      	adds	r3, r0, #1
 800e7ea:	d102      	bne.n	800e7f2 <_sbrk_r+0x1a>
 800e7ec:	682b      	ldr	r3, [r5, #0]
 800e7ee:	b103      	cbz	r3, 800e7f2 <_sbrk_r+0x1a>
 800e7f0:	6023      	str	r3, [r4, #0]
 800e7f2:	bd38      	pop	{r3, r4, r5, pc}
 800e7f4:	200056d4 	.word	0x200056d4

0800e7f8 <_realloc_r>:
 800e7f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7fc:	4680      	mov	r8, r0
 800e7fe:	4614      	mov	r4, r2
 800e800:	460e      	mov	r6, r1
 800e802:	b921      	cbnz	r1, 800e80e <_realloc_r+0x16>
 800e804:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e808:	4611      	mov	r1, r2
 800e80a:	f7ff bc57 	b.w	800e0bc <_malloc_r>
 800e80e:	b92a      	cbnz	r2, 800e81c <_realloc_r+0x24>
 800e810:	f7ff fbe8 	bl	800dfe4 <_free_r>
 800e814:	4625      	mov	r5, r4
 800e816:	4628      	mov	r0, r5
 800e818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e81c:	f000 f81b 	bl	800e856 <_malloc_usable_size_r>
 800e820:	4284      	cmp	r4, r0
 800e822:	4607      	mov	r7, r0
 800e824:	d802      	bhi.n	800e82c <_realloc_r+0x34>
 800e826:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e82a:	d812      	bhi.n	800e852 <_realloc_r+0x5a>
 800e82c:	4621      	mov	r1, r4
 800e82e:	4640      	mov	r0, r8
 800e830:	f7ff fc44 	bl	800e0bc <_malloc_r>
 800e834:	4605      	mov	r5, r0
 800e836:	2800      	cmp	r0, #0
 800e838:	d0ed      	beq.n	800e816 <_realloc_r+0x1e>
 800e83a:	42bc      	cmp	r4, r7
 800e83c:	4622      	mov	r2, r4
 800e83e:	4631      	mov	r1, r6
 800e840:	bf28      	it	cs
 800e842:	463a      	movcs	r2, r7
 800e844:	f7ff fbc0 	bl	800dfc8 <memcpy>
 800e848:	4631      	mov	r1, r6
 800e84a:	4640      	mov	r0, r8
 800e84c:	f7ff fbca 	bl	800dfe4 <_free_r>
 800e850:	e7e1      	b.n	800e816 <_realloc_r+0x1e>
 800e852:	4635      	mov	r5, r6
 800e854:	e7df      	b.n	800e816 <_realloc_r+0x1e>

0800e856 <_malloc_usable_size_r>:
 800e856:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e85a:	1f18      	subs	r0, r3, #4
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	bfbc      	itt	lt
 800e860:	580b      	ldrlt	r3, [r1, r0]
 800e862:	18c0      	addlt	r0, r0, r3
 800e864:	4770      	bx	lr

0800e866 <atan2>:
 800e866:	f000 bb2f 	b.w	800eec8 <__ieee754_atan2>
	...

0800e86c <pow>:
 800e86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e86e:	ed2d 8b02 	vpush	{d8}
 800e872:	eeb0 8a40 	vmov.f32	s16, s0
 800e876:	eef0 8a60 	vmov.f32	s17, s1
 800e87a:	ec55 4b11 	vmov	r4, r5, d1
 800e87e:	f000 fbeb 	bl	800f058 <__ieee754_pow>
 800e882:	4622      	mov	r2, r4
 800e884:	462b      	mov	r3, r5
 800e886:	4620      	mov	r0, r4
 800e888:	4629      	mov	r1, r5
 800e88a:	ec57 6b10 	vmov	r6, r7, d0
 800e88e:	f7f2 f965 	bl	8000b5c <__aeabi_dcmpun>
 800e892:	2800      	cmp	r0, #0
 800e894:	d13b      	bne.n	800e90e <pow+0xa2>
 800e896:	ec51 0b18 	vmov	r0, r1, d8
 800e89a:	2200      	movs	r2, #0
 800e89c:	2300      	movs	r3, #0
 800e89e:	f7f2 f92b 	bl	8000af8 <__aeabi_dcmpeq>
 800e8a2:	b1b8      	cbz	r0, 800e8d4 <pow+0x68>
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	4620      	mov	r0, r4
 800e8aa:	4629      	mov	r1, r5
 800e8ac:	f7f2 f924 	bl	8000af8 <__aeabi_dcmpeq>
 800e8b0:	2800      	cmp	r0, #0
 800e8b2:	d146      	bne.n	800e942 <pow+0xd6>
 800e8b4:	ec45 4b10 	vmov	d0, r4, r5
 800e8b8:	f000 fa1f 	bl	800ecfa <finite>
 800e8bc:	b338      	cbz	r0, 800e90e <pow+0xa2>
 800e8be:	2200      	movs	r2, #0
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	4620      	mov	r0, r4
 800e8c4:	4629      	mov	r1, r5
 800e8c6:	f7f2 f921 	bl	8000b0c <__aeabi_dcmplt>
 800e8ca:	b300      	cbz	r0, 800e90e <pow+0xa2>
 800e8cc:	f7ff fb50 	bl	800df70 <__errno>
 800e8d0:	2322      	movs	r3, #34	; 0x22
 800e8d2:	e01b      	b.n	800e90c <pow+0xa0>
 800e8d4:	ec47 6b10 	vmov	d0, r6, r7
 800e8d8:	f000 fa0f 	bl	800ecfa <finite>
 800e8dc:	b9e0      	cbnz	r0, 800e918 <pow+0xac>
 800e8de:	eeb0 0a48 	vmov.f32	s0, s16
 800e8e2:	eef0 0a68 	vmov.f32	s1, s17
 800e8e6:	f000 fa08 	bl	800ecfa <finite>
 800e8ea:	b1a8      	cbz	r0, 800e918 <pow+0xac>
 800e8ec:	ec45 4b10 	vmov	d0, r4, r5
 800e8f0:	f000 fa03 	bl	800ecfa <finite>
 800e8f4:	b180      	cbz	r0, 800e918 <pow+0xac>
 800e8f6:	4632      	mov	r2, r6
 800e8f8:	463b      	mov	r3, r7
 800e8fa:	4630      	mov	r0, r6
 800e8fc:	4639      	mov	r1, r7
 800e8fe:	f7f2 f92d 	bl	8000b5c <__aeabi_dcmpun>
 800e902:	2800      	cmp	r0, #0
 800e904:	d0e2      	beq.n	800e8cc <pow+0x60>
 800e906:	f7ff fb33 	bl	800df70 <__errno>
 800e90a:	2321      	movs	r3, #33	; 0x21
 800e90c:	6003      	str	r3, [r0, #0]
 800e90e:	ecbd 8b02 	vpop	{d8}
 800e912:	ec47 6b10 	vmov	d0, r6, r7
 800e916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e918:	2200      	movs	r2, #0
 800e91a:	2300      	movs	r3, #0
 800e91c:	4630      	mov	r0, r6
 800e91e:	4639      	mov	r1, r7
 800e920:	f7f2 f8ea 	bl	8000af8 <__aeabi_dcmpeq>
 800e924:	2800      	cmp	r0, #0
 800e926:	d0f2      	beq.n	800e90e <pow+0xa2>
 800e928:	eeb0 0a48 	vmov.f32	s0, s16
 800e92c:	eef0 0a68 	vmov.f32	s1, s17
 800e930:	f000 f9e3 	bl	800ecfa <finite>
 800e934:	2800      	cmp	r0, #0
 800e936:	d0ea      	beq.n	800e90e <pow+0xa2>
 800e938:	ec45 4b10 	vmov	d0, r4, r5
 800e93c:	f000 f9dd 	bl	800ecfa <finite>
 800e940:	e7c3      	b.n	800e8ca <pow+0x5e>
 800e942:	4f01      	ldr	r7, [pc, #4]	; (800e948 <pow+0xdc>)
 800e944:	2600      	movs	r6, #0
 800e946:	e7e2      	b.n	800e90e <pow+0xa2>
 800e948:	3ff00000 	.word	0x3ff00000

0800e94c <sqrt>:
 800e94c:	b538      	push	{r3, r4, r5, lr}
 800e94e:	ed2d 8b02 	vpush	{d8}
 800e952:	ec55 4b10 	vmov	r4, r5, d0
 800e956:	f000 f9db 	bl	800ed10 <__ieee754_sqrt>
 800e95a:	4622      	mov	r2, r4
 800e95c:	462b      	mov	r3, r5
 800e95e:	4620      	mov	r0, r4
 800e960:	4629      	mov	r1, r5
 800e962:	eeb0 8a40 	vmov.f32	s16, s0
 800e966:	eef0 8a60 	vmov.f32	s17, s1
 800e96a:	f7f2 f8f7 	bl	8000b5c <__aeabi_dcmpun>
 800e96e:	b990      	cbnz	r0, 800e996 <sqrt+0x4a>
 800e970:	2200      	movs	r2, #0
 800e972:	2300      	movs	r3, #0
 800e974:	4620      	mov	r0, r4
 800e976:	4629      	mov	r1, r5
 800e978:	f7f2 f8c8 	bl	8000b0c <__aeabi_dcmplt>
 800e97c:	b158      	cbz	r0, 800e996 <sqrt+0x4a>
 800e97e:	f7ff faf7 	bl	800df70 <__errno>
 800e982:	2321      	movs	r3, #33	; 0x21
 800e984:	6003      	str	r3, [r0, #0]
 800e986:	2200      	movs	r2, #0
 800e988:	2300      	movs	r3, #0
 800e98a:	4610      	mov	r0, r2
 800e98c:	4619      	mov	r1, r3
 800e98e:	f7f1 ff75 	bl	800087c <__aeabi_ddiv>
 800e992:	ec41 0b18 	vmov	d8, r0, r1
 800e996:	eeb0 0a48 	vmov.f32	s0, s16
 800e99a:	eef0 0a68 	vmov.f32	s1, s17
 800e99e:	ecbd 8b02 	vpop	{d8}
 800e9a2:	bd38      	pop	{r3, r4, r5, pc}
 800e9a4:	0000      	movs	r0, r0
	...

0800e9a8 <atan>:
 800e9a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9ac:	ec55 4b10 	vmov	r4, r5, d0
 800e9b0:	4bc3      	ldr	r3, [pc, #780]	; (800ecc0 <atan+0x318>)
 800e9b2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e9b6:	429e      	cmp	r6, r3
 800e9b8:	46ab      	mov	fp, r5
 800e9ba:	dd18      	ble.n	800e9ee <atan+0x46>
 800e9bc:	4bc1      	ldr	r3, [pc, #772]	; (800ecc4 <atan+0x31c>)
 800e9be:	429e      	cmp	r6, r3
 800e9c0:	dc01      	bgt.n	800e9c6 <atan+0x1e>
 800e9c2:	d109      	bne.n	800e9d8 <atan+0x30>
 800e9c4:	b144      	cbz	r4, 800e9d8 <atan+0x30>
 800e9c6:	4622      	mov	r2, r4
 800e9c8:	462b      	mov	r3, r5
 800e9ca:	4620      	mov	r0, r4
 800e9cc:	4629      	mov	r1, r5
 800e9ce:	f7f1 fc75 	bl	80002bc <__adddf3>
 800e9d2:	4604      	mov	r4, r0
 800e9d4:	460d      	mov	r5, r1
 800e9d6:	e006      	b.n	800e9e6 <atan+0x3e>
 800e9d8:	f1bb 0f00 	cmp.w	fp, #0
 800e9dc:	f300 8131 	bgt.w	800ec42 <atan+0x29a>
 800e9e0:	a59b      	add	r5, pc, #620	; (adr r5, 800ec50 <atan+0x2a8>)
 800e9e2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e9e6:	ec45 4b10 	vmov	d0, r4, r5
 800e9ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9ee:	4bb6      	ldr	r3, [pc, #728]	; (800ecc8 <atan+0x320>)
 800e9f0:	429e      	cmp	r6, r3
 800e9f2:	dc14      	bgt.n	800ea1e <atan+0x76>
 800e9f4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800e9f8:	429e      	cmp	r6, r3
 800e9fa:	dc0d      	bgt.n	800ea18 <atan+0x70>
 800e9fc:	a396      	add	r3, pc, #600	; (adr r3, 800ec58 <atan+0x2b0>)
 800e9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea02:	ee10 0a10 	vmov	r0, s0
 800ea06:	4629      	mov	r1, r5
 800ea08:	f7f1 fc58 	bl	80002bc <__adddf3>
 800ea0c:	4baf      	ldr	r3, [pc, #700]	; (800eccc <atan+0x324>)
 800ea0e:	2200      	movs	r2, #0
 800ea10:	f7f2 f89a 	bl	8000b48 <__aeabi_dcmpgt>
 800ea14:	2800      	cmp	r0, #0
 800ea16:	d1e6      	bne.n	800e9e6 <atan+0x3e>
 800ea18:	f04f 3aff 	mov.w	sl, #4294967295
 800ea1c:	e02b      	b.n	800ea76 <atan+0xce>
 800ea1e:	f000 f963 	bl	800ece8 <fabs>
 800ea22:	4bab      	ldr	r3, [pc, #684]	; (800ecd0 <atan+0x328>)
 800ea24:	429e      	cmp	r6, r3
 800ea26:	ec55 4b10 	vmov	r4, r5, d0
 800ea2a:	f300 80bf 	bgt.w	800ebac <atan+0x204>
 800ea2e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800ea32:	429e      	cmp	r6, r3
 800ea34:	f300 80a0 	bgt.w	800eb78 <atan+0x1d0>
 800ea38:	ee10 2a10 	vmov	r2, s0
 800ea3c:	ee10 0a10 	vmov	r0, s0
 800ea40:	462b      	mov	r3, r5
 800ea42:	4629      	mov	r1, r5
 800ea44:	f7f1 fc3a 	bl	80002bc <__adddf3>
 800ea48:	4ba0      	ldr	r3, [pc, #640]	; (800eccc <atan+0x324>)
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	f7f1 fc34 	bl	80002b8 <__aeabi_dsub>
 800ea50:	2200      	movs	r2, #0
 800ea52:	4606      	mov	r6, r0
 800ea54:	460f      	mov	r7, r1
 800ea56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ea5a:	4620      	mov	r0, r4
 800ea5c:	4629      	mov	r1, r5
 800ea5e:	f7f1 fc2d 	bl	80002bc <__adddf3>
 800ea62:	4602      	mov	r2, r0
 800ea64:	460b      	mov	r3, r1
 800ea66:	4630      	mov	r0, r6
 800ea68:	4639      	mov	r1, r7
 800ea6a:	f7f1 ff07 	bl	800087c <__aeabi_ddiv>
 800ea6e:	f04f 0a00 	mov.w	sl, #0
 800ea72:	4604      	mov	r4, r0
 800ea74:	460d      	mov	r5, r1
 800ea76:	4622      	mov	r2, r4
 800ea78:	462b      	mov	r3, r5
 800ea7a:	4620      	mov	r0, r4
 800ea7c:	4629      	mov	r1, r5
 800ea7e:	f7f1 fdd3 	bl	8000628 <__aeabi_dmul>
 800ea82:	4602      	mov	r2, r0
 800ea84:	460b      	mov	r3, r1
 800ea86:	4680      	mov	r8, r0
 800ea88:	4689      	mov	r9, r1
 800ea8a:	f7f1 fdcd 	bl	8000628 <__aeabi_dmul>
 800ea8e:	a374      	add	r3, pc, #464	; (adr r3, 800ec60 <atan+0x2b8>)
 800ea90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea94:	4606      	mov	r6, r0
 800ea96:	460f      	mov	r7, r1
 800ea98:	f7f1 fdc6 	bl	8000628 <__aeabi_dmul>
 800ea9c:	a372      	add	r3, pc, #456	; (adr r3, 800ec68 <atan+0x2c0>)
 800ea9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaa2:	f7f1 fc0b 	bl	80002bc <__adddf3>
 800eaa6:	4632      	mov	r2, r6
 800eaa8:	463b      	mov	r3, r7
 800eaaa:	f7f1 fdbd 	bl	8000628 <__aeabi_dmul>
 800eaae:	a370      	add	r3, pc, #448	; (adr r3, 800ec70 <atan+0x2c8>)
 800eab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eab4:	f7f1 fc02 	bl	80002bc <__adddf3>
 800eab8:	4632      	mov	r2, r6
 800eaba:	463b      	mov	r3, r7
 800eabc:	f7f1 fdb4 	bl	8000628 <__aeabi_dmul>
 800eac0:	a36d      	add	r3, pc, #436	; (adr r3, 800ec78 <atan+0x2d0>)
 800eac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eac6:	f7f1 fbf9 	bl	80002bc <__adddf3>
 800eaca:	4632      	mov	r2, r6
 800eacc:	463b      	mov	r3, r7
 800eace:	f7f1 fdab 	bl	8000628 <__aeabi_dmul>
 800ead2:	a36b      	add	r3, pc, #428	; (adr r3, 800ec80 <atan+0x2d8>)
 800ead4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ead8:	f7f1 fbf0 	bl	80002bc <__adddf3>
 800eadc:	4632      	mov	r2, r6
 800eade:	463b      	mov	r3, r7
 800eae0:	f7f1 fda2 	bl	8000628 <__aeabi_dmul>
 800eae4:	a368      	add	r3, pc, #416	; (adr r3, 800ec88 <atan+0x2e0>)
 800eae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaea:	f7f1 fbe7 	bl	80002bc <__adddf3>
 800eaee:	4642      	mov	r2, r8
 800eaf0:	464b      	mov	r3, r9
 800eaf2:	f7f1 fd99 	bl	8000628 <__aeabi_dmul>
 800eaf6:	a366      	add	r3, pc, #408	; (adr r3, 800ec90 <atan+0x2e8>)
 800eaf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eafc:	4680      	mov	r8, r0
 800eafe:	4689      	mov	r9, r1
 800eb00:	4630      	mov	r0, r6
 800eb02:	4639      	mov	r1, r7
 800eb04:	f7f1 fd90 	bl	8000628 <__aeabi_dmul>
 800eb08:	a363      	add	r3, pc, #396	; (adr r3, 800ec98 <atan+0x2f0>)
 800eb0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb0e:	f7f1 fbd3 	bl	80002b8 <__aeabi_dsub>
 800eb12:	4632      	mov	r2, r6
 800eb14:	463b      	mov	r3, r7
 800eb16:	f7f1 fd87 	bl	8000628 <__aeabi_dmul>
 800eb1a:	a361      	add	r3, pc, #388	; (adr r3, 800eca0 <atan+0x2f8>)
 800eb1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb20:	f7f1 fbca 	bl	80002b8 <__aeabi_dsub>
 800eb24:	4632      	mov	r2, r6
 800eb26:	463b      	mov	r3, r7
 800eb28:	f7f1 fd7e 	bl	8000628 <__aeabi_dmul>
 800eb2c:	a35e      	add	r3, pc, #376	; (adr r3, 800eca8 <atan+0x300>)
 800eb2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb32:	f7f1 fbc1 	bl	80002b8 <__aeabi_dsub>
 800eb36:	4632      	mov	r2, r6
 800eb38:	463b      	mov	r3, r7
 800eb3a:	f7f1 fd75 	bl	8000628 <__aeabi_dmul>
 800eb3e:	a35c      	add	r3, pc, #368	; (adr r3, 800ecb0 <atan+0x308>)
 800eb40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb44:	f7f1 fbb8 	bl	80002b8 <__aeabi_dsub>
 800eb48:	4632      	mov	r2, r6
 800eb4a:	463b      	mov	r3, r7
 800eb4c:	f7f1 fd6c 	bl	8000628 <__aeabi_dmul>
 800eb50:	4602      	mov	r2, r0
 800eb52:	460b      	mov	r3, r1
 800eb54:	4640      	mov	r0, r8
 800eb56:	4649      	mov	r1, r9
 800eb58:	f7f1 fbb0 	bl	80002bc <__adddf3>
 800eb5c:	4622      	mov	r2, r4
 800eb5e:	462b      	mov	r3, r5
 800eb60:	f7f1 fd62 	bl	8000628 <__aeabi_dmul>
 800eb64:	f1ba 3fff 	cmp.w	sl, #4294967295
 800eb68:	4602      	mov	r2, r0
 800eb6a:	460b      	mov	r3, r1
 800eb6c:	d14b      	bne.n	800ec06 <atan+0x25e>
 800eb6e:	4620      	mov	r0, r4
 800eb70:	4629      	mov	r1, r5
 800eb72:	f7f1 fba1 	bl	80002b8 <__aeabi_dsub>
 800eb76:	e72c      	b.n	800e9d2 <atan+0x2a>
 800eb78:	ee10 0a10 	vmov	r0, s0
 800eb7c:	4b53      	ldr	r3, [pc, #332]	; (800eccc <atan+0x324>)
 800eb7e:	2200      	movs	r2, #0
 800eb80:	4629      	mov	r1, r5
 800eb82:	f7f1 fb99 	bl	80002b8 <__aeabi_dsub>
 800eb86:	4b51      	ldr	r3, [pc, #324]	; (800eccc <atan+0x324>)
 800eb88:	4606      	mov	r6, r0
 800eb8a:	460f      	mov	r7, r1
 800eb8c:	2200      	movs	r2, #0
 800eb8e:	4620      	mov	r0, r4
 800eb90:	4629      	mov	r1, r5
 800eb92:	f7f1 fb93 	bl	80002bc <__adddf3>
 800eb96:	4602      	mov	r2, r0
 800eb98:	460b      	mov	r3, r1
 800eb9a:	4630      	mov	r0, r6
 800eb9c:	4639      	mov	r1, r7
 800eb9e:	f7f1 fe6d 	bl	800087c <__aeabi_ddiv>
 800eba2:	f04f 0a01 	mov.w	sl, #1
 800eba6:	4604      	mov	r4, r0
 800eba8:	460d      	mov	r5, r1
 800ebaa:	e764      	b.n	800ea76 <atan+0xce>
 800ebac:	4b49      	ldr	r3, [pc, #292]	; (800ecd4 <atan+0x32c>)
 800ebae:	429e      	cmp	r6, r3
 800ebb0:	da1d      	bge.n	800ebee <atan+0x246>
 800ebb2:	ee10 0a10 	vmov	r0, s0
 800ebb6:	4b48      	ldr	r3, [pc, #288]	; (800ecd8 <atan+0x330>)
 800ebb8:	2200      	movs	r2, #0
 800ebba:	4629      	mov	r1, r5
 800ebbc:	f7f1 fb7c 	bl	80002b8 <__aeabi_dsub>
 800ebc0:	4b45      	ldr	r3, [pc, #276]	; (800ecd8 <atan+0x330>)
 800ebc2:	4606      	mov	r6, r0
 800ebc4:	460f      	mov	r7, r1
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	4620      	mov	r0, r4
 800ebca:	4629      	mov	r1, r5
 800ebcc:	f7f1 fd2c 	bl	8000628 <__aeabi_dmul>
 800ebd0:	4b3e      	ldr	r3, [pc, #248]	; (800eccc <atan+0x324>)
 800ebd2:	2200      	movs	r2, #0
 800ebd4:	f7f1 fb72 	bl	80002bc <__adddf3>
 800ebd8:	4602      	mov	r2, r0
 800ebda:	460b      	mov	r3, r1
 800ebdc:	4630      	mov	r0, r6
 800ebde:	4639      	mov	r1, r7
 800ebe0:	f7f1 fe4c 	bl	800087c <__aeabi_ddiv>
 800ebe4:	f04f 0a02 	mov.w	sl, #2
 800ebe8:	4604      	mov	r4, r0
 800ebea:	460d      	mov	r5, r1
 800ebec:	e743      	b.n	800ea76 <atan+0xce>
 800ebee:	462b      	mov	r3, r5
 800ebf0:	ee10 2a10 	vmov	r2, s0
 800ebf4:	4939      	ldr	r1, [pc, #228]	; (800ecdc <atan+0x334>)
 800ebf6:	2000      	movs	r0, #0
 800ebf8:	f7f1 fe40 	bl	800087c <__aeabi_ddiv>
 800ebfc:	f04f 0a03 	mov.w	sl, #3
 800ec00:	4604      	mov	r4, r0
 800ec02:	460d      	mov	r5, r1
 800ec04:	e737      	b.n	800ea76 <atan+0xce>
 800ec06:	4b36      	ldr	r3, [pc, #216]	; (800ece0 <atan+0x338>)
 800ec08:	4e36      	ldr	r6, [pc, #216]	; (800ece4 <atan+0x33c>)
 800ec0a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ec0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec12:	f7f1 fb51 	bl	80002b8 <__aeabi_dsub>
 800ec16:	4622      	mov	r2, r4
 800ec18:	462b      	mov	r3, r5
 800ec1a:	f7f1 fb4d 	bl	80002b8 <__aeabi_dsub>
 800ec1e:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800ec22:	4602      	mov	r2, r0
 800ec24:	460b      	mov	r3, r1
 800ec26:	e9d6 0100 	ldrd	r0, r1, [r6]
 800ec2a:	f7f1 fb45 	bl	80002b8 <__aeabi_dsub>
 800ec2e:	f1bb 0f00 	cmp.w	fp, #0
 800ec32:	4604      	mov	r4, r0
 800ec34:	460d      	mov	r5, r1
 800ec36:	f6bf aed6 	bge.w	800e9e6 <atan+0x3e>
 800ec3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ec3e:	461d      	mov	r5, r3
 800ec40:	e6d1      	b.n	800e9e6 <atan+0x3e>
 800ec42:	a51d      	add	r5, pc, #116	; (adr r5, 800ecb8 <atan+0x310>)
 800ec44:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ec48:	e6cd      	b.n	800e9e6 <atan+0x3e>
 800ec4a:	bf00      	nop
 800ec4c:	f3af 8000 	nop.w
 800ec50:	54442d18 	.word	0x54442d18
 800ec54:	bff921fb 	.word	0xbff921fb
 800ec58:	8800759c 	.word	0x8800759c
 800ec5c:	7e37e43c 	.word	0x7e37e43c
 800ec60:	e322da11 	.word	0xe322da11
 800ec64:	3f90ad3a 	.word	0x3f90ad3a
 800ec68:	24760deb 	.word	0x24760deb
 800ec6c:	3fa97b4b 	.word	0x3fa97b4b
 800ec70:	a0d03d51 	.word	0xa0d03d51
 800ec74:	3fb10d66 	.word	0x3fb10d66
 800ec78:	c54c206e 	.word	0xc54c206e
 800ec7c:	3fb745cd 	.word	0x3fb745cd
 800ec80:	920083ff 	.word	0x920083ff
 800ec84:	3fc24924 	.word	0x3fc24924
 800ec88:	5555550d 	.word	0x5555550d
 800ec8c:	3fd55555 	.word	0x3fd55555
 800ec90:	2c6a6c2f 	.word	0x2c6a6c2f
 800ec94:	bfa2b444 	.word	0xbfa2b444
 800ec98:	52defd9a 	.word	0x52defd9a
 800ec9c:	3fadde2d 	.word	0x3fadde2d
 800eca0:	af749a6d 	.word	0xaf749a6d
 800eca4:	3fb3b0f2 	.word	0x3fb3b0f2
 800eca8:	fe231671 	.word	0xfe231671
 800ecac:	3fbc71c6 	.word	0x3fbc71c6
 800ecb0:	9998ebc4 	.word	0x9998ebc4
 800ecb4:	3fc99999 	.word	0x3fc99999
 800ecb8:	54442d18 	.word	0x54442d18
 800ecbc:	3ff921fb 	.word	0x3ff921fb
 800ecc0:	440fffff 	.word	0x440fffff
 800ecc4:	7ff00000 	.word	0x7ff00000
 800ecc8:	3fdbffff 	.word	0x3fdbffff
 800eccc:	3ff00000 	.word	0x3ff00000
 800ecd0:	3ff2ffff 	.word	0x3ff2ffff
 800ecd4:	40038000 	.word	0x40038000
 800ecd8:	3ff80000 	.word	0x3ff80000
 800ecdc:	bff00000 	.word	0xbff00000
 800ece0:	0800fd08 	.word	0x0800fd08
 800ece4:	0800fce8 	.word	0x0800fce8

0800ece8 <fabs>:
 800ece8:	ec51 0b10 	vmov	r0, r1, d0
 800ecec:	ee10 2a10 	vmov	r2, s0
 800ecf0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ecf4:	ec43 2b10 	vmov	d0, r2, r3
 800ecf8:	4770      	bx	lr

0800ecfa <finite>:
 800ecfa:	b082      	sub	sp, #8
 800ecfc:	ed8d 0b00 	vstr	d0, [sp]
 800ed00:	9801      	ldr	r0, [sp, #4]
 800ed02:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ed06:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ed0a:	0fc0      	lsrs	r0, r0, #31
 800ed0c:	b002      	add	sp, #8
 800ed0e:	4770      	bx	lr

0800ed10 <__ieee754_sqrt>:
 800ed10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed14:	ec55 4b10 	vmov	r4, r5, d0
 800ed18:	4e67      	ldr	r6, [pc, #412]	; (800eeb8 <__ieee754_sqrt+0x1a8>)
 800ed1a:	43ae      	bics	r6, r5
 800ed1c:	ee10 0a10 	vmov	r0, s0
 800ed20:	ee10 2a10 	vmov	r2, s0
 800ed24:	4629      	mov	r1, r5
 800ed26:	462b      	mov	r3, r5
 800ed28:	d10d      	bne.n	800ed46 <__ieee754_sqrt+0x36>
 800ed2a:	f7f1 fc7d 	bl	8000628 <__aeabi_dmul>
 800ed2e:	4602      	mov	r2, r0
 800ed30:	460b      	mov	r3, r1
 800ed32:	4620      	mov	r0, r4
 800ed34:	4629      	mov	r1, r5
 800ed36:	f7f1 fac1 	bl	80002bc <__adddf3>
 800ed3a:	4604      	mov	r4, r0
 800ed3c:	460d      	mov	r5, r1
 800ed3e:	ec45 4b10 	vmov	d0, r4, r5
 800ed42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed46:	2d00      	cmp	r5, #0
 800ed48:	dc0b      	bgt.n	800ed62 <__ieee754_sqrt+0x52>
 800ed4a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ed4e:	4326      	orrs	r6, r4
 800ed50:	d0f5      	beq.n	800ed3e <__ieee754_sqrt+0x2e>
 800ed52:	b135      	cbz	r5, 800ed62 <__ieee754_sqrt+0x52>
 800ed54:	f7f1 fab0 	bl	80002b8 <__aeabi_dsub>
 800ed58:	4602      	mov	r2, r0
 800ed5a:	460b      	mov	r3, r1
 800ed5c:	f7f1 fd8e 	bl	800087c <__aeabi_ddiv>
 800ed60:	e7eb      	b.n	800ed3a <__ieee754_sqrt+0x2a>
 800ed62:	1509      	asrs	r1, r1, #20
 800ed64:	f000 808d 	beq.w	800ee82 <__ieee754_sqrt+0x172>
 800ed68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ed6c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800ed70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ed74:	07c9      	lsls	r1, r1, #31
 800ed76:	bf5c      	itt	pl
 800ed78:	005b      	lslpl	r3, r3, #1
 800ed7a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800ed7e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ed82:	bf58      	it	pl
 800ed84:	0052      	lslpl	r2, r2, #1
 800ed86:	2500      	movs	r5, #0
 800ed88:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ed8c:	1076      	asrs	r6, r6, #1
 800ed8e:	0052      	lsls	r2, r2, #1
 800ed90:	f04f 0e16 	mov.w	lr, #22
 800ed94:	46ac      	mov	ip, r5
 800ed96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ed9a:	eb0c 0001 	add.w	r0, ip, r1
 800ed9e:	4298      	cmp	r0, r3
 800eda0:	bfde      	ittt	le
 800eda2:	1a1b      	suble	r3, r3, r0
 800eda4:	eb00 0c01 	addle.w	ip, r0, r1
 800eda8:	186d      	addle	r5, r5, r1
 800edaa:	005b      	lsls	r3, r3, #1
 800edac:	f1be 0e01 	subs.w	lr, lr, #1
 800edb0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800edb4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800edb8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800edbc:	d1ed      	bne.n	800ed9a <__ieee754_sqrt+0x8a>
 800edbe:	4674      	mov	r4, lr
 800edc0:	2720      	movs	r7, #32
 800edc2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800edc6:	4563      	cmp	r3, ip
 800edc8:	eb01 000e 	add.w	r0, r1, lr
 800edcc:	dc02      	bgt.n	800edd4 <__ieee754_sqrt+0xc4>
 800edce:	d113      	bne.n	800edf8 <__ieee754_sqrt+0xe8>
 800edd0:	4290      	cmp	r0, r2
 800edd2:	d811      	bhi.n	800edf8 <__ieee754_sqrt+0xe8>
 800edd4:	2800      	cmp	r0, #0
 800edd6:	eb00 0e01 	add.w	lr, r0, r1
 800edda:	da57      	bge.n	800ee8c <__ieee754_sqrt+0x17c>
 800eddc:	f1be 0f00 	cmp.w	lr, #0
 800ede0:	db54      	blt.n	800ee8c <__ieee754_sqrt+0x17c>
 800ede2:	f10c 0801 	add.w	r8, ip, #1
 800ede6:	eba3 030c 	sub.w	r3, r3, ip
 800edea:	4290      	cmp	r0, r2
 800edec:	bf88      	it	hi
 800edee:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800edf2:	1a12      	subs	r2, r2, r0
 800edf4:	440c      	add	r4, r1
 800edf6:	46c4      	mov	ip, r8
 800edf8:	005b      	lsls	r3, r3, #1
 800edfa:	3f01      	subs	r7, #1
 800edfc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ee00:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ee04:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800ee08:	d1dd      	bne.n	800edc6 <__ieee754_sqrt+0xb6>
 800ee0a:	4313      	orrs	r3, r2
 800ee0c:	d01b      	beq.n	800ee46 <__ieee754_sqrt+0x136>
 800ee0e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800eebc <__ieee754_sqrt+0x1ac>
 800ee12:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800eec0 <__ieee754_sqrt+0x1b0>
 800ee16:	e9da 0100 	ldrd	r0, r1, [sl]
 800ee1a:	e9db 2300 	ldrd	r2, r3, [fp]
 800ee1e:	f7f1 fa4b 	bl	80002b8 <__aeabi_dsub>
 800ee22:	e9da 8900 	ldrd	r8, r9, [sl]
 800ee26:	4602      	mov	r2, r0
 800ee28:	460b      	mov	r3, r1
 800ee2a:	4640      	mov	r0, r8
 800ee2c:	4649      	mov	r1, r9
 800ee2e:	f7f1 fe77 	bl	8000b20 <__aeabi_dcmple>
 800ee32:	b140      	cbz	r0, 800ee46 <__ieee754_sqrt+0x136>
 800ee34:	f1b4 3fff 	cmp.w	r4, #4294967295
 800ee38:	e9da 0100 	ldrd	r0, r1, [sl]
 800ee3c:	e9db 2300 	ldrd	r2, r3, [fp]
 800ee40:	d126      	bne.n	800ee90 <__ieee754_sqrt+0x180>
 800ee42:	3501      	adds	r5, #1
 800ee44:	463c      	mov	r4, r7
 800ee46:	106a      	asrs	r2, r5, #1
 800ee48:	0863      	lsrs	r3, r4, #1
 800ee4a:	07e9      	lsls	r1, r5, #31
 800ee4c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800ee50:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800ee54:	bf48      	it	mi
 800ee56:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800ee5a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800ee5e:	461c      	mov	r4, r3
 800ee60:	e76d      	b.n	800ed3e <__ieee754_sqrt+0x2e>
 800ee62:	0ad3      	lsrs	r3, r2, #11
 800ee64:	3815      	subs	r0, #21
 800ee66:	0552      	lsls	r2, r2, #21
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d0fa      	beq.n	800ee62 <__ieee754_sqrt+0x152>
 800ee6c:	02dc      	lsls	r4, r3, #11
 800ee6e:	d50a      	bpl.n	800ee86 <__ieee754_sqrt+0x176>
 800ee70:	f1c1 0420 	rsb	r4, r1, #32
 800ee74:	fa22 f404 	lsr.w	r4, r2, r4
 800ee78:	1e4d      	subs	r5, r1, #1
 800ee7a:	408a      	lsls	r2, r1
 800ee7c:	4323      	orrs	r3, r4
 800ee7e:	1b41      	subs	r1, r0, r5
 800ee80:	e772      	b.n	800ed68 <__ieee754_sqrt+0x58>
 800ee82:	4608      	mov	r0, r1
 800ee84:	e7f0      	b.n	800ee68 <__ieee754_sqrt+0x158>
 800ee86:	005b      	lsls	r3, r3, #1
 800ee88:	3101      	adds	r1, #1
 800ee8a:	e7ef      	b.n	800ee6c <__ieee754_sqrt+0x15c>
 800ee8c:	46e0      	mov	r8, ip
 800ee8e:	e7aa      	b.n	800ede6 <__ieee754_sqrt+0xd6>
 800ee90:	f7f1 fa14 	bl	80002bc <__adddf3>
 800ee94:	e9da 8900 	ldrd	r8, r9, [sl]
 800ee98:	4602      	mov	r2, r0
 800ee9a:	460b      	mov	r3, r1
 800ee9c:	4640      	mov	r0, r8
 800ee9e:	4649      	mov	r1, r9
 800eea0:	f7f1 fe34 	bl	8000b0c <__aeabi_dcmplt>
 800eea4:	b120      	cbz	r0, 800eeb0 <__ieee754_sqrt+0x1a0>
 800eea6:	1ca0      	adds	r0, r4, #2
 800eea8:	bf08      	it	eq
 800eeaa:	3501      	addeq	r5, #1
 800eeac:	3402      	adds	r4, #2
 800eeae:	e7ca      	b.n	800ee46 <__ieee754_sqrt+0x136>
 800eeb0:	3401      	adds	r4, #1
 800eeb2:	f024 0401 	bic.w	r4, r4, #1
 800eeb6:	e7c6      	b.n	800ee46 <__ieee754_sqrt+0x136>
 800eeb8:	7ff00000 	.word	0x7ff00000
 800eebc:	20000130 	.word	0x20000130
 800eec0:	20000138 	.word	0x20000138
 800eec4:	00000000 	.word	0x00000000

0800eec8 <__ieee754_atan2>:
 800eec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eecc:	ec57 6b11 	vmov	r6, r7, d1
 800eed0:	4273      	negs	r3, r6
 800eed2:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800f050 <__ieee754_atan2+0x188>
 800eed6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800eeda:	4333      	orrs	r3, r6
 800eedc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800eee0:	4543      	cmp	r3, r8
 800eee2:	ec51 0b10 	vmov	r0, r1, d0
 800eee6:	ee11 5a10 	vmov	r5, s2
 800eeea:	d80a      	bhi.n	800ef02 <__ieee754_atan2+0x3a>
 800eeec:	4244      	negs	r4, r0
 800eeee:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800eef2:	4304      	orrs	r4, r0
 800eef4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800eef8:	4544      	cmp	r4, r8
 800eefa:	ee10 9a10 	vmov	r9, s0
 800eefe:	468e      	mov	lr, r1
 800ef00:	d907      	bls.n	800ef12 <__ieee754_atan2+0x4a>
 800ef02:	4632      	mov	r2, r6
 800ef04:	463b      	mov	r3, r7
 800ef06:	f7f1 f9d9 	bl	80002bc <__adddf3>
 800ef0a:	ec41 0b10 	vmov	d0, r0, r1
 800ef0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef12:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800ef16:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ef1a:	4334      	orrs	r4, r6
 800ef1c:	d103      	bne.n	800ef26 <__ieee754_atan2+0x5e>
 800ef1e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef22:	f7ff bd41 	b.w	800e9a8 <atan>
 800ef26:	17bc      	asrs	r4, r7, #30
 800ef28:	f004 0402 	and.w	r4, r4, #2
 800ef2c:	ea53 0909 	orrs.w	r9, r3, r9
 800ef30:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800ef34:	d107      	bne.n	800ef46 <__ieee754_atan2+0x7e>
 800ef36:	2c02      	cmp	r4, #2
 800ef38:	d05f      	beq.n	800effa <__ieee754_atan2+0x132>
 800ef3a:	2c03      	cmp	r4, #3
 800ef3c:	d1e5      	bne.n	800ef0a <__ieee754_atan2+0x42>
 800ef3e:	a140      	add	r1, pc, #256	; (adr r1, 800f040 <__ieee754_atan2+0x178>)
 800ef40:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef44:	e7e1      	b.n	800ef0a <__ieee754_atan2+0x42>
 800ef46:	4315      	orrs	r5, r2
 800ef48:	d106      	bne.n	800ef58 <__ieee754_atan2+0x90>
 800ef4a:	f1be 0f00 	cmp.w	lr, #0
 800ef4e:	da5f      	bge.n	800f010 <__ieee754_atan2+0x148>
 800ef50:	a13d      	add	r1, pc, #244	; (adr r1, 800f048 <__ieee754_atan2+0x180>)
 800ef52:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef56:	e7d8      	b.n	800ef0a <__ieee754_atan2+0x42>
 800ef58:	4542      	cmp	r2, r8
 800ef5a:	d10f      	bne.n	800ef7c <__ieee754_atan2+0xb4>
 800ef5c:	4293      	cmp	r3, r2
 800ef5e:	f104 34ff 	add.w	r4, r4, #4294967295
 800ef62:	d107      	bne.n	800ef74 <__ieee754_atan2+0xac>
 800ef64:	2c02      	cmp	r4, #2
 800ef66:	d84c      	bhi.n	800f002 <__ieee754_atan2+0x13a>
 800ef68:	4b33      	ldr	r3, [pc, #204]	; (800f038 <__ieee754_atan2+0x170>)
 800ef6a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ef6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ef72:	e7ca      	b.n	800ef0a <__ieee754_atan2+0x42>
 800ef74:	2c02      	cmp	r4, #2
 800ef76:	d848      	bhi.n	800f00a <__ieee754_atan2+0x142>
 800ef78:	4b30      	ldr	r3, [pc, #192]	; (800f03c <__ieee754_atan2+0x174>)
 800ef7a:	e7f6      	b.n	800ef6a <__ieee754_atan2+0xa2>
 800ef7c:	4543      	cmp	r3, r8
 800ef7e:	d0e4      	beq.n	800ef4a <__ieee754_atan2+0x82>
 800ef80:	1a9b      	subs	r3, r3, r2
 800ef82:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800ef86:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ef8a:	da1e      	bge.n	800efca <__ieee754_atan2+0x102>
 800ef8c:	2f00      	cmp	r7, #0
 800ef8e:	da01      	bge.n	800ef94 <__ieee754_atan2+0xcc>
 800ef90:	323c      	adds	r2, #60	; 0x3c
 800ef92:	db1e      	blt.n	800efd2 <__ieee754_atan2+0x10a>
 800ef94:	4632      	mov	r2, r6
 800ef96:	463b      	mov	r3, r7
 800ef98:	f7f1 fc70 	bl	800087c <__aeabi_ddiv>
 800ef9c:	ec41 0b10 	vmov	d0, r0, r1
 800efa0:	f7ff fea2 	bl	800ece8 <fabs>
 800efa4:	f7ff fd00 	bl	800e9a8 <atan>
 800efa8:	ec51 0b10 	vmov	r0, r1, d0
 800efac:	2c01      	cmp	r4, #1
 800efae:	d013      	beq.n	800efd8 <__ieee754_atan2+0x110>
 800efb0:	2c02      	cmp	r4, #2
 800efb2:	d015      	beq.n	800efe0 <__ieee754_atan2+0x118>
 800efb4:	2c00      	cmp	r4, #0
 800efb6:	d0a8      	beq.n	800ef0a <__ieee754_atan2+0x42>
 800efb8:	a317      	add	r3, pc, #92	; (adr r3, 800f018 <__ieee754_atan2+0x150>)
 800efba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efbe:	f7f1 f97b 	bl	80002b8 <__aeabi_dsub>
 800efc2:	a317      	add	r3, pc, #92	; (adr r3, 800f020 <__ieee754_atan2+0x158>)
 800efc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efc8:	e014      	b.n	800eff4 <__ieee754_atan2+0x12c>
 800efca:	a117      	add	r1, pc, #92	; (adr r1, 800f028 <__ieee754_atan2+0x160>)
 800efcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800efd0:	e7ec      	b.n	800efac <__ieee754_atan2+0xe4>
 800efd2:	2000      	movs	r0, #0
 800efd4:	2100      	movs	r1, #0
 800efd6:	e7e9      	b.n	800efac <__ieee754_atan2+0xe4>
 800efd8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800efdc:	4619      	mov	r1, r3
 800efde:	e794      	b.n	800ef0a <__ieee754_atan2+0x42>
 800efe0:	a30d      	add	r3, pc, #52	; (adr r3, 800f018 <__ieee754_atan2+0x150>)
 800efe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efe6:	f7f1 f967 	bl	80002b8 <__aeabi_dsub>
 800efea:	4602      	mov	r2, r0
 800efec:	460b      	mov	r3, r1
 800efee:	a10c      	add	r1, pc, #48	; (adr r1, 800f020 <__ieee754_atan2+0x158>)
 800eff0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eff4:	f7f1 f960 	bl	80002b8 <__aeabi_dsub>
 800eff8:	e787      	b.n	800ef0a <__ieee754_atan2+0x42>
 800effa:	a109      	add	r1, pc, #36	; (adr r1, 800f020 <__ieee754_atan2+0x158>)
 800effc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f000:	e783      	b.n	800ef0a <__ieee754_atan2+0x42>
 800f002:	a10b      	add	r1, pc, #44	; (adr r1, 800f030 <__ieee754_atan2+0x168>)
 800f004:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f008:	e77f      	b.n	800ef0a <__ieee754_atan2+0x42>
 800f00a:	2000      	movs	r0, #0
 800f00c:	2100      	movs	r1, #0
 800f00e:	e77c      	b.n	800ef0a <__ieee754_atan2+0x42>
 800f010:	a105      	add	r1, pc, #20	; (adr r1, 800f028 <__ieee754_atan2+0x160>)
 800f012:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f016:	e778      	b.n	800ef0a <__ieee754_atan2+0x42>
 800f018:	33145c07 	.word	0x33145c07
 800f01c:	3ca1a626 	.word	0x3ca1a626
 800f020:	54442d18 	.word	0x54442d18
 800f024:	400921fb 	.word	0x400921fb
 800f028:	54442d18 	.word	0x54442d18
 800f02c:	3ff921fb 	.word	0x3ff921fb
 800f030:	54442d18 	.word	0x54442d18
 800f034:	3fe921fb 	.word	0x3fe921fb
 800f038:	0800fd28 	.word	0x0800fd28
 800f03c:	0800fd40 	.word	0x0800fd40
 800f040:	54442d18 	.word	0x54442d18
 800f044:	c00921fb 	.word	0xc00921fb
 800f048:	54442d18 	.word	0x54442d18
 800f04c:	bff921fb 	.word	0xbff921fb
 800f050:	7ff00000 	.word	0x7ff00000
 800f054:	00000000 	.word	0x00000000

0800f058 <__ieee754_pow>:
 800f058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f05c:	ed2d 8b06 	vpush	{d8-d10}
 800f060:	b089      	sub	sp, #36	; 0x24
 800f062:	ed8d 1b00 	vstr	d1, [sp]
 800f066:	e9dd 2900 	ldrd	r2, r9, [sp]
 800f06a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800f06e:	ea58 0102 	orrs.w	r1, r8, r2
 800f072:	ec57 6b10 	vmov	r6, r7, d0
 800f076:	d115      	bne.n	800f0a4 <__ieee754_pow+0x4c>
 800f078:	19b3      	adds	r3, r6, r6
 800f07a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800f07e:	4152      	adcs	r2, r2
 800f080:	4299      	cmp	r1, r3
 800f082:	4b89      	ldr	r3, [pc, #548]	; (800f2a8 <__ieee754_pow+0x250>)
 800f084:	4193      	sbcs	r3, r2
 800f086:	f080 84d1 	bcs.w	800fa2c <__ieee754_pow+0x9d4>
 800f08a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f08e:	4630      	mov	r0, r6
 800f090:	4639      	mov	r1, r7
 800f092:	f7f1 f913 	bl	80002bc <__adddf3>
 800f096:	ec41 0b10 	vmov	d0, r0, r1
 800f09a:	b009      	add	sp, #36	; 0x24
 800f09c:	ecbd 8b06 	vpop	{d8-d10}
 800f0a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0a4:	4b81      	ldr	r3, [pc, #516]	; (800f2ac <__ieee754_pow+0x254>)
 800f0a6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800f0aa:	429c      	cmp	r4, r3
 800f0ac:	ee10 aa10 	vmov	sl, s0
 800f0b0:	463d      	mov	r5, r7
 800f0b2:	dc06      	bgt.n	800f0c2 <__ieee754_pow+0x6a>
 800f0b4:	d101      	bne.n	800f0ba <__ieee754_pow+0x62>
 800f0b6:	2e00      	cmp	r6, #0
 800f0b8:	d1e7      	bne.n	800f08a <__ieee754_pow+0x32>
 800f0ba:	4598      	cmp	r8, r3
 800f0bc:	dc01      	bgt.n	800f0c2 <__ieee754_pow+0x6a>
 800f0be:	d10f      	bne.n	800f0e0 <__ieee754_pow+0x88>
 800f0c0:	b172      	cbz	r2, 800f0e0 <__ieee754_pow+0x88>
 800f0c2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800f0c6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800f0ca:	ea55 050a 	orrs.w	r5, r5, sl
 800f0ce:	d1dc      	bne.n	800f08a <__ieee754_pow+0x32>
 800f0d0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f0d4:	18db      	adds	r3, r3, r3
 800f0d6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800f0da:	4152      	adcs	r2, r2
 800f0dc:	429d      	cmp	r5, r3
 800f0de:	e7d0      	b.n	800f082 <__ieee754_pow+0x2a>
 800f0e0:	2d00      	cmp	r5, #0
 800f0e2:	da3b      	bge.n	800f15c <__ieee754_pow+0x104>
 800f0e4:	4b72      	ldr	r3, [pc, #456]	; (800f2b0 <__ieee754_pow+0x258>)
 800f0e6:	4598      	cmp	r8, r3
 800f0e8:	dc51      	bgt.n	800f18e <__ieee754_pow+0x136>
 800f0ea:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800f0ee:	4598      	cmp	r8, r3
 800f0f0:	f340 84ab 	ble.w	800fa4a <__ieee754_pow+0x9f2>
 800f0f4:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f0f8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f0fc:	2b14      	cmp	r3, #20
 800f0fe:	dd0f      	ble.n	800f120 <__ieee754_pow+0xc8>
 800f100:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800f104:	fa22 f103 	lsr.w	r1, r2, r3
 800f108:	fa01 f303 	lsl.w	r3, r1, r3
 800f10c:	4293      	cmp	r3, r2
 800f10e:	f040 849c 	bne.w	800fa4a <__ieee754_pow+0x9f2>
 800f112:	f001 0101 	and.w	r1, r1, #1
 800f116:	f1c1 0302 	rsb	r3, r1, #2
 800f11a:	9304      	str	r3, [sp, #16]
 800f11c:	b182      	cbz	r2, 800f140 <__ieee754_pow+0xe8>
 800f11e:	e05f      	b.n	800f1e0 <__ieee754_pow+0x188>
 800f120:	2a00      	cmp	r2, #0
 800f122:	d15b      	bne.n	800f1dc <__ieee754_pow+0x184>
 800f124:	f1c3 0314 	rsb	r3, r3, #20
 800f128:	fa48 f103 	asr.w	r1, r8, r3
 800f12c:	fa01 f303 	lsl.w	r3, r1, r3
 800f130:	4543      	cmp	r3, r8
 800f132:	f040 8487 	bne.w	800fa44 <__ieee754_pow+0x9ec>
 800f136:	f001 0101 	and.w	r1, r1, #1
 800f13a:	f1c1 0302 	rsb	r3, r1, #2
 800f13e:	9304      	str	r3, [sp, #16]
 800f140:	4b5c      	ldr	r3, [pc, #368]	; (800f2b4 <__ieee754_pow+0x25c>)
 800f142:	4598      	cmp	r8, r3
 800f144:	d132      	bne.n	800f1ac <__ieee754_pow+0x154>
 800f146:	f1b9 0f00 	cmp.w	r9, #0
 800f14a:	f280 8477 	bge.w	800fa3c <__ieee754_pow+0x9e4>
 800f14e:	4959      	ldr	r1, [pc, #356]	; (800f2b4 <__ieee754_pow+0x25c>)
 800f150:	4632      	mov	r2, r6
 800f152:	463b      	mov	r3, r7
 800f154:	2000      	movs	r0, #0
 800f156:	f7f1 fb91 	bl	800087c <__aeabi_ddiv>
 800f15a:	e79c      	b.n	800f096 <__ieee754_pow+0x3e>
 800f15c:	2300      	movs	r3, #0
 800f15e:	9304      	str	r3, [sp, #16]
 800f160:	2a00      	cmp	r2, #0
 800f162:	d13d      	bne.n	800f1e0 <__ieee754_pow+0x188>
 800f164:	4b51      	ldr	r3, [pc, #324]	; (800f2ac <__ieee754_pow+0x254>)
 800f166:	4598      	cmp	r8, r3
 800f168:	d1ea      	bne.n	800f140 <__ieee754_pow+0xe8>
 800f16a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800f16e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800f172:	ea53 030a 	orrs.w	r3, r3, sl
 800f176:	f000 8459 	beq.w	800fa2c <__ieee754_pow+0x9d4>
 800f17a:	4b4f      	ldr	r3, [pc, #316]	; (800f2b8 <__ieee754_pow+0x260>)
 800f17c:	429c      	cmp	r4, r3
 800f17e:	dd08      	ble.n	800f192 <__ieee754_pow+0x13a>
 800f180:	f1b9 0f00 	cmp.w	r9, #0
 800f184:	f2c0 8456 	blt.w	800fa34 <__ieee754_pow+0x9dc>
 800f188:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f18c:	e783      	b.n	800f096 <__ieee754_pow+0x3e>
 800f18e:	2302      	movs	r3, #2
 800f190:	e7e5      	b.n	800f15e <__ieee754_pow+0x106>
 800f192:	f1b9 0f00 	cmp.w	r9, #0
 800f196:	f04f 0000 	mov.w	r0, #0
 800f19a:	f04f 0100 	mov.w	r1, #0
 800f19e:	f6bf af7a 	bge.w	800f096 <__ieee754_pow+0x3e>
 800f1a2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800f1a6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f1aa:	e774      	b.n	800f096 <__ieee754_pow+0x3e>
 800f1ac:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800f1b0:	d106      	bne.n	800f1c0 <__ieee754_pow+0x168>
 800f1b2:	4632      	mov	r2, r6
 800f1b4:	463b      	mov	r3, r7
 800f1b6:	4630      	mov	r0, r6
 800f1b8:	4639      	mov	r1, r7
 800f1ba:	f7f1 fa35 	bl	8000628 <__aeabi_dmul>
 800f1be:	e76a      	b.n	800f096 <__ieee754_pow+0x3e>
 800f1c0:	4b3e      	ldr	r3, [pc, #248]	; (800f2bc <__ieee754_pow+0x264>)
 800f1c2:	4599      	cmp	r9, r3
 800f1c4:	d10c      	bne.n	800f1e0 <__ieee754_pow+0x188>
 800f1c6:	2d00      	cmp	r5, #0
 800f1c8:	db0a      	blt.n	800f1e0 <__ieee754_pow+0x188>
 800f1ca:	ec47 6b10 	vmov	d0, r6, r7
 800f1ce:	b009      	add	sp, #36	; 0x24
 800f1d0:	ecbd 8b06 	vpop	{d8-d10}
 800f1d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1d8:	f7ff bd9a 	b.w	800ed10 <__ieee754_sqrt>
 800f1dc:	2300      	movs	r3, #0
 800f1de:	9304      	str	r3, [sp, #16]
 800f1e0:	ec47 6b10 	vmov	d0, r6, r7
 800f1e4:	f7ff fd80 	bl	800ece8 <fabs>
 800f1e8:	ec51 0b10 	vmov	r0, r1, d0
 800f1ec:	f1ba 0f00 	cmp.w	sl, #0
 800f1f0:	d129      	bne.n	800f246 <__ieee754_pow+0x1ee>
 800f1f2:	b124      	cbz	r4, 800f1fe <__ieee754_pow+0x1a6>
 800f1f4:	4b2f      	ldr	r3, [pc, #188]	; (800f2b4 <__ieee754_pow+0x25c>)
 800f1f6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800f1fa:	429a      	cmp	r2, r3
 800f1fc:	d123      	bne.n	800f246 <__ieee754_pow+0x1ee>
 800f1fe:	f1b9 0f00 	cmp.w	r9, #0
 800f202:	da05      	bge.n	800f210 <__ieee754_pow+0x1b8>
 800f204:	4602      	mov	r2, r0
 800f206:	460b      	mov	r3, r1
 800f208:	2000      	movs	r0, #0
 800f20a:	492a      	ldr	r1, [pc, #168]	; (800f2b4 <__ieee754_pow+0x25c>)
 800f20c:	f7f1 fb36 	bl	800087c <__aeabi_ddiv>
 800f210:	2d00      	cmp	r5, #0
 800f212:	f6bf af40 	bge.w	800f096 <__ieee754_pow+0x3e>
 800f216:	9b04      	ldr	r3, [sp, #16]
 800f218:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800f21c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800f220:	431c      	orrs	r4, r3
 800f222:	d108      	bne.n	800f236 <__ieee754_pow+0x1de>
 800f224:	4602      	mov	r2, r0
 800f226:	460b      	mov	r3, r1
 800f228:	4610      	mov	r0, r2
 800f22a:	4619      	mov	r1, r3
 800f22c:	f7f1 f844 	bl	80002b8 <__aeabi_dsub>
 800f230:	4602      	mov	r2, r0
 800f232:	460b      	mov	r3, r1
 800f234:	e78f      	b.n	800f156 <__ieee754_pow+0xfe>
 800f236:	9b04      	ldr	r3, [sp, #16]
 800f238:	2b01      	cmp	r3, #1
 800f23a:	f47f af2c 	bne.w	800f096 <__ieee754_pow+0x3e>
 800f23e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f242:	4619      	mov	r1, r3
 800f244:	e727      	b.n	800f096 <__ieee754_pow+0x3e>
 800f246:	0feb      	lsrs	r3, r5, #31
 800f248:	3b01      	subs	r3, #1
 800f24a:	9306      	str	r3, [sp, #24]
 800f24c:	9a06      	ldr	r2, [sp, #24]
 800f24e:	9b04      	ldr	r3, [sp, #16]
 800f250:	4313      	orrs	r3, r2
 800f252:	d102      	bne.n	800f25a <__ieee754_pow+0x202>
 800f254:	4632      	mov	r2, r6
 800f256:	463b      	mov	r3, r7
 800f258:	e7e6      	b.n	800f228 <__ieee754_pow+0x1d0>
 800f25a:	4b19      	ldr	r3, [pc, #100]	; (800f2c0 <__ieee754_pow+0x268>)
 800f25c:	4598      	cmp	r8, r3
 800f25e:	f340 80fb 	ble.w	800f458 <__ieee754_pow+0x400>
 800f262:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800f266:	4598      	cmp	r8, r3
 800f268:	4b13      	ldr	r3, [pc, #76]	; (800f2b8 <__ieee754_pow+0x260>)
 800f26a:	dd0c      	ble.n	800f286 <__ieee754_pow+0x22e>
 800f26c:	429c      	cmp	r4, r3
 800f26e:	dc0f      	bgt.n	800f290 <__ieee754_pow+0x238>
 800f270:	f1b9 0f00 	cmp.w	r9, #0
 800f274:	da0f      	bge.n	800f296 <__ieee754_pow+0x23e>
 800f276:	2000      	movs	r0, #0
 800f278:	b009      	add	sp, #36	; 0x24
 800f27a:	ecbd 8b06 	vpop	{d8-d10}
 800f27e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f282:	f000 bcba 	b.w	800fbfa <__math_oflow>
 800f286:	429c      	cmp	r4, r3
 800f288:	dbf2      	blt.n	800f270 <__ieee754_pow+0x218>
 800f28a:	4b0a      	ldr	r3, [pc, #40]	; (800f2b4 <__ieee754_pow+0x25c>)
 800f28c:	429c      	cmp	r4, r3
 800f28e:	dd19      	ble.n	800f2c4 <__ieee754_pow+0x26c>
 800f290:	f1b9 0f00 	cmp.w	r9, #0
 800f294:	dcef      	bgt.n	800f276 <__ieee754_pow+0x21e>
 800f296:	2000      	movs	r0, #0
 800f298:	b009      	add	sp, #36	; 0x24
 800f29a:	ecbd 8b06 	vpop	{d8-d10}
 800f29e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2a2:	f000 bca1 	b.w	800fbe8 <__math_uflow>
 800f2a6:	bf00      	nop
 800f2a8:	fff00000 	.word	0xfff00000
 800f2ac:	7ff00000 	.word	0x7ff00000
 800f2b0:	433fffff 	.word	0x433fffff
 800f2b4:	3ff00000 	.word	0x3ff00000
 800f2b8:	3fefffff 	.word	0x3fefffff
 800f2bc:	3fe00000 	.word	0x3fe00000
 800f2c0:	41e00000 	.word	0x41e00000
 800f2c4:	4b60      	ldr	r3, [pc, #384]	; (800f448 <__ieee754_pow+0x3f0>)
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	f7f0 fff6 	bl	80002b8 <__aeabi_dsub>
 800f2cc:	a354      	add	r3, pc, #336	; (adr r3, 800f420 <__ieee754_pow+0x3c8>)
 800f2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2d2:	4604      	mov	r4, r0
 800f2d4:	460d      	mov	r5, r1
 800f2d6:	f7f1 f9a7 	bl	8000628 <__aeabi_dmul>
 800f2da:	a353      	add	r3, pc, #332	; (adr r3, 800f428 <__ieee754_pow+0x3d0>)
 800f2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2e0:	4606      	mov	r6, r0
 800f2e2:	460f      	mov	r7, r1
 800f2e4:	4620      	mov	r0, r4
 800f2e6:	4629      	mov	r1, r5
 800f2e8:	f7f1 f99e 	bl	8000628 <__aeabi_dmul>
 800f2ec:	4b57      	ldr	r3, [pc, #348]	; (800f44c <__ieee754_pow+0x3f4>)
 800f2ee:	4682      	mov	sl, r0
 800f2f0:	468b      	mov	fp, r1
 800f2f2:	2200      	movs	r2, #0
 800f2f4:	4620      	mov	r0, r4
 800f2f6:	4629      	mov	r1, r5
 800f2f8:	f7f1 f996 	bl	8000628 <__aeabi_dmul>
 800f2fc:	4602      	mov	r2, r0
 800f2fe:	460b      	mov	r3, r1
 800f300:	a14b      	add	r1, pc, #300	; (adr r1, 800f430 <__ieee754_pow+0x3d8>)
 800f302:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f306:	f7f0 ffd7 	bl	80002b8 <__aeabi_dsub>
 800f30a:	4622      	mov	r2, r4
 800f30c:	462b      	mov	r3, r5
 800f30e:	f7f1 f98b 	bl	8000628 <__aeabi_dmul>
 800f312:	4602      	mov	r2, r0
 800f314:	460b      	mov	r3, r1
 800f316:	2000      	movs	r0, #0
 800f318:	494d      	ldr	r1, [pc, #308]	; (800f450 <__ieee754_pow+0x3f8>)
 800f31a:	f7f0 ffcd 	bl	80002b8 <__aeabi_dsub>
 800f31e:	4622      	mov	r2, r4
 800f320:	4680      	mov	r8, r0
 800f322:	4689      	mov	r9, r1
 800f324:	462b      	mov	r3, r5
 800f326:	4620      	mov	r0, r4
 800f328:	4629      	mov	r1, r5
 800f32a:	f7f1 f97d 	bl	8000628 <__aeabi_dmul>
 800f32e:	4602      	mov	r2, r0
 800f330:	460b      	mov	r3, r1
 800f332:	4640      	mov	r0, r8
 800f334:	4649      	mov	r1, r9
 800f336:	f7f1 f977 	bl	8000628 <__aeabi_dmul>
 800f33a:	a33f      	add	r3, pc, #252	; (adr r3, 800f438 <__ieee754_pow+0x3e0>)
 800f33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f340:	f7f1 f972 	bl	8000628 <__aeabi_dmul>
 800f344:	4602      	mov	r2, r0
 800f346:	460b      	mov	r3, r1
 800f348:	4650      	mov	r0, sl
 800f34a:	4659      	mov	r1, fp
 800f34c:	f7f0 ffb4 	bl	80002b8 <__aeabi_dsub>
 800f350:	4602      	mov	r2, r0
 800f352:	460b      	mov	r3, r1
 800f354:	4680      	mov	r8, r0
 800f356:	4689      	mov	r9, r1
 800f358:	4630      	mov	r0, r6
 800f35a:	4639      	mov	r1, r7
 800f35c:	f7f0 ffae 	bl	80002bc <__adddf3>
 800f360:	2000      	movs	r0, #0
 800f362:	4632      	mov	r2, r6
 800f364:	463b      	mov	r3, r7
 800f366:	4604      	mov	r4, r0
 800f368:	460d      	mov	r5, r1
 800f36a:	f7f0 ffa5 	bl	80002b8 <__aeabi_dsub>
 800f36e:	4602      	mov	r2, r0
 800f370:	460b      	mov	r3, r1
 800f372:	4640      	mov	r0, r8
 800f374:	4649      	mov	r1, r9
 800f376:	f7f0 ff9f 	bl	80002b8 <__aeabi_dsub>
 800f37a:	9b04      	ldr	r3, [sp, #16]
 800f37c:	9a06      	ldr	r2, [sp, #24]
 800f37e:	3b01      	subs	r3, #1
 800f380:	4313      	orrs	r3, r2
 800f382:	4682      	mov	sl, r0
 800f384:	468b      	mov	fp, r1
 800f386:	f040 81e7 	bne.w	800f758 <__ieee754_pow+0x700>
 800f38a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800f440 <__ieee754_pow+0x3e8>
 800f38e:	eeb0 8a47 	vmov.f32	s16, s14
 800f392:	eef0 8a67 	vmov.f32	s17, s15
 800f396:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f39a:	2600      	movs	r6, #0
 800f39c:	4632      	mov	r2, r6
 800f39e:	463b      	mov	r3, r7
 800f3a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f3a4:	f7f0 ff88 	bl	80002b8 <__aeabi_dsub>
 800f3a8:	4622      	mov	r2, r4
 800f3aa:	462b      	mov	r3, r5
 800f3ac:	f7f1 f93c 	bl	8000628 <__aeabi_dmul>
 800f3b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f3b4:	4680      	mov	r8, r0
 800f3b6:	4689      	mov	r9, r1
 800f3b8:	4650      	mov	r0, sl
 800f3ba:	4659      	mov	r1, fp
 800f3bc:	f7f1 f934 	bl	8000628 <__aeabi_dmul>
 800f3c0:	4602      	mov	r2, r0
 800f3c2:	460b      	mov	r3, r1
 800f3c4:	4640      	mov	r0, r8
 800f3c6:	4649      	mov	r1, r9
 800f3c8:	f7f0 ff78 	bl	80002bc <__adddf3>
 800f3cc:	4632      	mov	r2, r6
 800f3ce:	463b      	mov	r3, r7
 800f3d0:	4680      	mov	r8, r0
 800f3d2:	4689      	mov	r9, r1
 800f3d4:	4620      	mov	r0, r4
 800f3d6:	4629      	mov	r1, r5
 800f3d8:	f7f1 f926 	bl	8000628 <__aeabi_dmul>
 800f3dc:	460b      	mov	r3, r1
 800f3de:	4604      	mov	r4, r0
 800f3e0:	460d      	mov	r5, r1
 800f3e2:	4602      	mov	r2, r0
 800f3e4:	4649      	mov	r1, r9
 800f3e6:	4640      	mov	r0, r8
 800f3e8:	f7f0 ff68 	bl	80002bc <__adddf3>
 800f3ec:	4b19      	ldr	r3, [pc, #100]	; (800f454 <__ieee754_pow+0x3fc>)
 800f3ee:	4299      	cmp	r1, r3
 800f3f0:	ec45 4b19 	vmov	d9, r4, r5
 800f3f4:	4606      	mov	r6, r0
 800f3f6:	460f      	mov	r7, r1
 800f3f8:	468b      	mov	fp, r1
 800f3fa:	f340 82f0 	ble.w	800f9de <__ieee754_pow+0x986>
 800f3fe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800f402:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800f406:	4303      	orrs	r3, r0
 800f408:	f000 81e4 	beq.w	800f7d4 <__ieee754_pow+0x77c>
 800f40c:	ec51 0b18 	vmov	r0, r1, d8
 800f410:	2200      	movs	r2, #0
 800f412:	2300      	movs	r3, #0
 800f414:	f7f1 fb7a 	bl	8000b0c <__aeabi_dcmplt>
 800f418:	3800      	subs	r0, #0
 800f41a:	bf18      	it	ne
 800f41c:	2001      	movne	r0, #1
 800f41e:	e72b      	b.n	800f278 <__ieee754_pow+0x220>
 800f420:	60000000 	.word	0x60000000
 800f424:	3ff71547 	.word	0x3ff71547
 800f428:	f85ddf44 	.word	0xf85ddf44
 800f42c:	3e54ae0b 	.word	0x3e54ae0b
 800f430:	55555555 	.word	0x55555555
 800f434:	3fd55555 	.word	0x3fd55555
 800f438:	652b82fe 	.word	0x652b82fe
 800f43c:	3ff71547 	.word	0x3ff71547
 800f440:	00000000 	.word	0x00000000
 800f444:	bff00000 	.word	0xbff00000
 800f448:	3ff00000 	.word	0x3ff00000
 800f44c:	3fd00000 	.word	0x3fd00000
 800f450:	3fe00000 	.word	0x3fe00000
 800f454:	408fffff 	.word	0x408fffff
 800f458:	4bd5      	ldr	r3, [pc, #852]	; (800f7b0 <__ieee754_pow+0x758>)
 800f45a:	402b      	ands	r3, r5
 800f45c:	2200      	movs	r2, #0
 800f45e:	b92b      	cbnz	r3, 800f46c <__ieee754_pow+0x414>
 800f460:	4bd4      	ldr	r3, [pc, #848]	; (800f7b4 <__ieee754_pow+0x75c>)
 800f462:	f7f1 f8e1 	bl	8000628 <__aeabi_dmul>
 800f466:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800f46a:	460c      	mov	r4, r1
 800f46c:	1523      	asrs	r3, r4, #20
 800f46e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f472:	4413      	add	r3, r2
 800f474:	9305      	str	r3, [sp, #20]
 800f476:	4bd0      	ldr	r3, [pc, #832]	; (800f7b8 <__ieee754_pow+0x760>)
 800f478:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800f47c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800f480:	429c      	cmp	r4, r3
 800f482:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800f486:	dd08      	ble.n	800f49a <__ieee754_pow+0x442>
 800f488:	4bcc      	ldr	r3, [pc, #816]	; (800f7bc <__ieee754_pow+0x764>)
 800f48a:	429c      	cmp	r4, r3
 800f48c:	f340 8162 	ble.w	800f754 <__ieee754_pow+0x6fc>
 800f490:	9b05      	ldr	r3, [sp, #20]
 800f492:	3301      	adds	r3, #1
 800f494:	9305      	str	r3, [sp, #20]
 800f496:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800f49a:	2400      	movs	r4, #0
 800f49c:	00e3      	lsls	r3, r4, #3
 800f49e:	9307      	str	r3, [sp, #28]
 800f4a0:	4bc7      	ldr	r3, [pc, #796]	; (800f7c0 <__ieee754_pow+0x768>)
 800f4a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f4a6:	ed93 7b00 	vldr	d7, [r3]
 800f4aa:	4629      	mov	r1, r5
 800f4ac:	ec53 2b17 	vmov	r2, r3, d7
 800f4b0:	eeb0 9a47 	vmov.f32	s18, s14
 800f4b4:	eef0 9a67 	vmov.f32	s19, s15
 800f4b8:	4682      	mov	sl, r0
 800f4ba:	f7f0 fefd 	bl	80002b8 <__aeabi_dsub>
 800f4be:	4652      	mov	r2, sl
 800f4c0:	4606      	mov	r6, r0
 800f4c2:	460f      	mov	r7, r1
 800f4c4:	462b      	mov	r3, r5
 800f4c6:	ec51 0b19 	vmov	r0, r1, d9
 800f4ca:	f7f0 fef7 	bl	80002bc <__adddf3>
 800f4ce:	4602      	mov	r2, r0
 800f4d0:	460b      	mov	r3, r1
 800f4d2:	2000      	movs	r0, #0
 800f4d4:	49bb      	ldr	r1, [pc, #748]	; (800f7c4 <__ieee754_pow+0x76c>)
 800f4d6:	f7f1 f9d1 	bl	800087c <__aeabi_ddiv>
 800f4da:	ec41 0b1a 	vmov	d10, r0, r1
 800f4de:	4602      	mov	r2, r0
 800f4e0:	460b      	mov	r3, r1
 800f4e2:	4630      	mov	r0, r6
 800f4e4:	4639      	mov	r1, r7
 800f4e6:	f7f1 f89f 	bl	8000628 <__aeabi_dmul>
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f4f0:	9302      	str	r3, [sp, #8]
 800f4f2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f4f6:	46ab      	mov	fp, r5
 800f4f8:	106d      	asrs	r5, r5, #1
 800f4fa:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800f4fe:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800f502:	ec41 0b18 	vmov	d8, r0, r1
 800f506:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800f50a:	2200      	movs	r2, #0
 800f50c:	4640      	mov	r0, r8
 800f50e:	4649      	mov	r1, r9
 800f510:	4614      	mov	r4, r2
 800f512:	461d      	mov	r5, r3
 800f514:	f7f1 f888 	bl	8000628 <__aeabi_dmul>
 800f518:	4602      	mov	r2, r0
 800f51a:	460b      	mov	r3, r1
 800f51c:	4630      	mov	r0, r6
 800f51e:	4639      	mov	r1, r7
 800f520:	f7f0 feca 	bl	80002b8 <__aeabi_dsub>
 800f524:	ec53 2b19 	vmov	r2, r3, d9
 800f528:	4606      	mov	r6, r0
 800f52a:	460f      	mov	r7, r1
 800f52c:	4620      	mov	r0, r4
 800f52e:	4629      	mov	r1, r5
 800f530:	f7f0 fec2 	bl	80002b8 <__aeabi_dsub>
 800f534:	4602      	mov	r2, r0
 800f536:	460b      	mov	r3, r1
 800f538:	4650      	mov	r0, sl
 800f53a:	4659      	mov	r1, fp
 800f53c:	f7f0 febc 	bl	80002b8 <__aeabi_dsub>
 800f540:	4642      	mov	r2, r8
 800f542:	464b      	mov	r3, r9
 800f544:	f7f1 f870 	bl	8000628 <__aeabi_dmul>
 800f548:	4602      	mov	r2, r0
 800f54a:	460b      	mov	r3, r1
 800f54c:	4630      	mov	r0, r6
 800f54e:	4639      	mov	r1, r7
 800f550:	f7f0 feb2 	bl	80002b8 <__aeabi_dsub>
 800f554:	ec53 2b1a 	vmov	r2, r3, d10
 800f558:	f7f1 f866 	bl	8000628 <__aeabi_dmul>
 800f55c:	ec53 2b18 	vmov	r2, r3, d8
 800f560:	ec41 0b19 	vmov	d9, r0, r1
 800f564:	ec51 0b18 	vmov	r0, r1, d8
 800f568:	f7f1 f85e 	bl	8000628 <__aeabi_dmul>
 800f56c:	a37c      	add	r3, pc, #496	; (adr r3, 800f760 <__ieee754_pow+0x708>)
 800f56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f572:	4604      	mov	r4, r0
 800f574:	460d      	mov	r5, r1
 800f576:	f7f1 f857 	bl	8000628 <__aeabi_dmul>
 800f57a:	a37b      	add	r3, pc, #492	; (adr r3, 800f768 <__ieee754_pow+0x710>)
 800f57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f580:	f7f0 fe9c 	bl	80002bc <__adddf3>
 800f584:	4622      	mov	r2, r4
 800f586:	462b      	mov	r3, r5
 800f588:	f7f1 f84e 	bl	8000628 <__aeabi_dmul>
 800f58c:	a378      	add	r3, pc, #480	; (adr r3, 800f770 <__ieee754_pow+0x718>)
 800f58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f592:	f7f0 fe93 	bl	80002bc <__adddf3>
 800f596:	4622      	mov	r2, r4
 800f598:	462b      	mov	r3, r5
 800f59a:	f7f1 f845 	bl	8000628 <__aeabi_dmul>
 800f59e:	a376      	add	r3, pc, #472	; (adr r3, 800f778 <__ieee754_pow+0x720>)
 800f5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5a4:	f7f0 fe8a 	bl	80002bc <__adddf3>
 800f5a8:	4622      	mov	r2, r4
 800f5aa:	462b      	mov	r3, r5
 800f5ac:	f7f1 f83c 	bl	8000628 <__aeabi_dmul>
 800f5b0:	a373      	add	r3, pc, #460	; (adr r3, 800f780 <__ieee754_pow+0x728>)
 800f5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5b6:	f7f0 fe81 	bl	80002bc <__adddf3>
 800f5ba:	4622      	mov	r2, r4
 800f5bc:	462b      	mov	r3, r5
 800f5be:	f7f1 f833 	bl	8000628 <__aeabi_dmul>
 800f5c2:	a371      	add	r3, pc, #452	; (adr r3, 800f788 <__ieee754_pow+0x730>)
 800f5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5c8:	f7f0 fe78 	bl	80002bc <__adddf3>
 800f5cc:	4622      	mov	r2, r4
 800f5ce:	4606      	mov	r6, r0
 800f5d0:	460f      	mov	r7, r1
 800f5d2:	462b      	mov	r3, r5
 800f5d4:	4620      	mov	r0, r4
 800f5d6:	4629      	mov	r1, r5
 800f5d8:	f7f1 f826 	bl	8000628 <__aeabi_dmul>
 800f5dc:	4602      	mov	r2, r0
 800f5de:	460b      	mov	r3, r1
 800f5e0:	4630      	mov	r0, r6
 800f5e2:	4639      	mov	r1, r7
 800f5e4:	f7f1 f820 	bl	8000628 <__aeabi_dmul>
 800f5e8:	4642      	mov	r2, r8
 800f5ea:	4604      	mov	r4, r0
 800f5ec:	460d      	mov	r5, r1
 800f5ee:	464b      	mov	r3, r9
 800f5f0:	ec51 0b18 	vmov	r0, r1, d8
 800f5f4:	f7f0 fe62 	bl	80002bc <__adddf3>
 800f5f8:	ec53 2b19 	vmov	r2, r3, d9
 800f5fc:	f7f1 f814 	bl	8000628 <__aeabi_dmul>
 800f600:	4622      	mov	r2, r4
 800f602:	462b      	mov	r3, r5
 800f604:	f7f0 fe5a 	bl	80002bc <__adddf3>
 800f608:	4642      	mov	r2, r8
 800f60a:	4682      	mov	sl, r0
 800f60c:	468b      	mov	fp, r1
 800f60e:	464b      	mov	r3, r9
 800f610:	4640      	mov	r0, r8
 800f612:	4649      	mov	r1, r9
 800f614:	f7f1 f808 	bl	8000628 <__aeabi_dmul>
 800f618:	4b6b      	ldr	r3, [pc, #428]	; (800f7c8 <__ieee754_pow+0x770>)
 800f61a:	2200      	movs	r2, #0
 800f61c:	4606      	mov	r6, r0
 800f61e:	460f      	mov	r7, r1
 800f620:	f7f0 fe4c 	bl	80002bc <__adddf3>
 800f624:	4652      	mov	r2, sl
 800f626:	465b      	mov	r3, fp
 800f628:	f7f0 fe48 	bl	80002bc <__adddf3>
 800f62c:	2000      	movs	r0, #0
 800f62e:	4604      	mov	r4, r0
 800f630:	460d      	mov	r5, r1
 800f632:	4602      	mov	r2, r0
 800f634:	460b      	mov	r3, r1
 800f636:	4640      	mov	r0, r8
 800f638:	4649      	mov	r1, r9
 800f63a:	f7f0 fff5 	bl	8000628 <__aeabi_dmul>
 800f63e:	4b62      	ldr	r3, [pc, #392]	; (800f7c8 <__ieee754_pow+0x770>)
 800f640:	4680      	mov	r8, r0
 800f642:	4689      	mov	r9, r1
 800f644:	2200      	movs	r2, #0
 800f646:	4620      	mov	r0, r4
 800f648:	4629      	mov	r1, r5
 800f64a:	f7f0 fe35 	bl	80002b8 <__aeabi_dsub>
 800f64e:	4632      	mov	r2, r6
 800f650:	463b      	mov	r3, r7
 800f652:	f7f0 fe31 	bl	80002b8 <__aeabi_dsub>
 800f656:	4602      	mov	r2, r0
 800f658:	460b      	mov	r3, r1
 800f65a:	4650      	mov	r0, sl
 800f65c:	4659      	mov	r1, fp
 800f65e:	f7f0 fe2b 	bl	80002b8 <__aeabi_dsub>
 800f662:	ec53 2b18 	vmov	r2, r3, d8
 800f666:	f7f0 ffdf 	bl	8000628 <__aeabi_dmul>
 800f66a:	4622      	mov	r2, r4
 800f66c:	4606      	mov	r6, r0
 800f66e:	460f      	mov	r7, r1
 800f670:	462b      	mov	r3, r5
 800f672:	ec51 0b19 	vmov	r0, r1, d9
 800f676:	f7f0 ffd7 	bl	8000628 <__aeabi_dmul>
 800f67a:	4602      	mov	r2, r0
 800f67c:	460b      	mov	r3, r1
 800f67e:	4630      	mov	r0, r6
 800f680:	4639      	mov	r1, r7
 800f682:	f7f0 fe1b 	bl	80002bc <__adddf3>
 800f686:	4606      	mov	r6, r0
 800f688:	460f      	mov	r7, r1
 800f68a:	4602      	mov	r2, r0
 800f68c:	460b      	mov	r3, r1
 800f68e:	4640      	mov	r0, r8
 800f690:	4649      	mov	r1, r9
 800f692:	f7f0 fe13 	bl	80002bc <__adddf3>
 800f696:	a33e      	add	r3, pc, #248	; (adr r3, 800f790 <__ieee754_pow+0x738>)
 800f698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f69c:	2000      	movs	r0, #0
 800f69e:	4604      	mov	r4, r0
 800f6a0:	460d      	mov	r5, r1
 800f6a2:	f7f0 ffc1 	bl	8000628 <__aeabi_dmul>
 800f6a6:	4642      	mov	r2, r8
 800f6a8:	ec41 0b18 	vmov	d8, r0, r1
 800f6ac:	464b      	mov	r3, r9
 800f6ae:	4620      	mov	r0, r4
 800f6b0:	4629      	mov	r1, r5
 800f6b2:	f7f0 fe01 	bl	80002b8 <__aeabi_dsub>
 800f6b6:	4602      	mov	r2, r0
 800f6b8:	460b      	mov	r3, r1
 800f6ba:	4630      	mov	r0, r6
 800f6bc:	4639      	mov	r1, r7
 800f6be:	f7f0 fdfb 	bl	80002b8 <__aeabi_dsub>
 800f6c2:	a335      	add	r3, pc, #212	; (adr r3, 800f798 <__ieee754_pow+0x740>)
 800f6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6c8:	f7f0 ffae 	bl	8000628 <__aeabi_dmul>
 800f6cc:	a334      	add	r3, pc, #208	; (adr r3, 800f7a0 <__ieee754_pow+0x748>)
 800f6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6d2:	4606      	mov	r6, r0
 800f6d4:	460f      	mov	r7, r1
 800f6d6:	4620      	mov	r0, r4
 800f6d8:	4629      	mov	r1, r5
 800f6da:	f7f0 ffa5 	bl	8000628 <__aeabi_dmul>
 800f6de:	4602      	mov	r2, r0
 800f6e0:	460b      	mov	r3, r1
 800f6e2:	4630      	mov	r0, r6
 800f6e4:	4639      	mov	r1, r7
 800f6e6:	f7f0 fde9 	bl	80002bc <__adddf3>
 800f6ea:	9a07      	ldr	r2, [sp, #28]
 800f6ec:	4b37      	ldr	r3, [pc, #220]	; (800f7cc <__ieee754_pow+0x774>)
 800f6ee:	4413      	add	r3, r2
 800f6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6f4:	f7f0 fde2 	bl	80002bc <__adddf3>
 800f6f8:	4682      	mov	sl, r0
 800f6fa:	9805      	ldr	r0, [sp, #20]
 800f6fc:	468b      	mov	fp, r1
 800f6fe:	f7f0 ff29 	bl	8000554 <__aeabi_i2d>
 800f702:	9a07      	ldr	r2, [sp, #28]
 800f704:	4b32      	ldr	r3, [pc, #200]	; (800f7d0 <__ieee754_pow+0x778>)
 800f706:	4413      	add	r3, r2
 800f708:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f70c:	4606      	mov	r6, r0
 800f70e:	460f      	mov	r7, r1
 800f710:	4652      	mov	r2, sl
 800f712:	465b      	mov	r3, fp
 800f714:	ec51 0b18 	vmov	r0, r1, d8
 800f718:	f7f0 fdd0 	bl	80002bc <__adddf3>
 800f71c:	4642      	mov	r2, r8
 800f71e:	464b      	mov	r3, r9
 800f720:	f7f0 fdcc 	bl	80002bc <__adddf3>
 800f724:	4632      	mov	r2, r6
 800f726:	463b      	mov	r3, r7
 800f728:	f7f0 fdc8 	bl	80002bc <__adddf3>
 800f72c:	2000      	movs	r0, #0
 800f72e:	4632      	mov	r2, r6
 800f730:	463b      	mov	r3, r7
 800f732:	4604      	mov	r4, r0
 800f734:	460d      	mov	r5, r1
 800f736:	f7f0 fdbf 	bl	80002b8 <__aeabi_dsub>
 800f73a:	4642      	mov	r2, r8
 800f73c:	464b      	mov	r3, r9
 800f73e:	f7f0 fdbb 	bl	80002b8 <__aeabi_dsub>
 800f742:	ec53 2b18 	vmov	r2, r3, d8
 800f746:	f7f0 fdb7 	bl	80002b8 <__aeabi_dsub>
 800f74a:	4602      	mov	r2, r0
 800f74c:	460b      	mov	r3, r1
 800f74e:	4650      	mov	r0, sl
 800f750:	4659      	mov	r1, fp
 800f752:	e610      	b.n	800f376 <__ieee754_pow+0x31e>
 800f754:	2401      	movs	r4, #1
 800f756:	e6a1      	b.n	800f49c <__ieee754_pow+0x444>
 800f758:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800f7a8 <__ieee754_pow+0x750>
 800f75c:	e617      	b.n	800f38e <__ieee754_pow+0x336>
 800f75e:	bf00      	nop
 800f760:	4a454eef 	.word	0x4a454eef
 800f764:	3fca7e28 	.word	0x3fca7e28
 800f768:	93c9db65 	.word	0x93c9db65
 800f76c:	3fcd864a 	.word	0x3fcd864a
 800f770:	a91d4101 	.word	0xa91d4101
 800f774:	3fd17460 	.word	0x3fd17460
 800f778:	518f264d 	.word	0x518f264d
 800f77c:	3fd55555 	.word	0x3fd55555
 800f780:	db6fabff 	.word	0xdb6fabff
 800f784:	3fdb6db6 	.word	0x3fdb6db6
 800f788:	33333303 	.word	0x33333303
 800f78c:	3fe33333 	.word	0x3fe33333
 800f790:	e0000000 	.word	0xe0000000
 800f794:	3feec709 	.word	0x3feec709
 800f798:	dc3a03fd 	.word	0xdc3a03fd
 800f79c:	3feec709 	.word	0x3feec709
 800f7a0:	145b01f5 	.word	0x145b01f5
 800f7a4:	be3e2fe0 	.word	0xbe3e2fe0
 800f7a8:	00000000 	.word	0x00000000
 800f7ac:	3ff00000 	.word	0x3ff00000
 800f7b0:	7ff00000 	.word	0x7ff00000
 800f7b4:	43400000 	.word	0x43400000
 800f7b8:	0003988e 	.word	0x0003988e
 800f7bc:	000bb679 	.word	0x000bb679
 800f7c0:	0800fd58 	.word	0x0800fd58
 800f7c4:	3ff00000 	.word	0x3ff00000
 800f7c8:	40080000 	.word	0x40080000
 800f7cc:	0800fd78 	.word	0x0800fd78
 800f7d0:	0800fd68 	.word	0x0800fd68
 800f7d4:	a3b3      	add	r3, pc, #716	; (adr r3, 800faa4 <__ieee754_pow+0xa4c>)
 800f7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7da:	4640      	mov	r0, r8
 800f7dc:	4649      	mov	r1, r9
 800f7de:	f7f0 fd6d 	bl	80002bc <__adddf3>
 800f7e2:	4622      	mov	r2, r4
 800f7e4:	ec41 0b1a 	vmov	d10, r0, r1
 800f7e8:	462b      	mov	r3, r5
 800f7ea:	4630      	mov	r0, r6
 800f7ec:	4639      	mov	r1, r7
 800f7ee:	f7f0 fd63 	bl	80002b8 <__aeabi_dsub>
 800f7f2:	4602      	mov	r2, r0
 800f7f4:	460b      	mov	r3, r1
 800f7f6:	ec51 0b1a 	vmov	r0, r1, d10
 800f7fa:	f7f1 f9a5 	bl	8000b48 <__aeabi_dcmpgt>
 800f7fe:	2800      	cmp	r0, #0
 800f800:	f47f ae04 	bne.w	800f40c <__ieee754_pow+0x3b4>
 800f804:	4aa2      	ldr	r2, [pc, #648]	; (800fa90 <__ieee754_pow+0xa38>)
 800f806:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f80a:	4293      	cmp	r3, r2
 800f80c:	f340 8107 	ble.w	800fa1e <__ieee754_pow+0x9c6>
 800f810:	151b      	asrs	r3, r3, #20
 800f812:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800f816:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800f81a:	fa4a fa03 	asr.w	sl, sl, r3
 800f81e:	44da      	add	sl, fp
 800f820:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800f824:	489b      	ldr	r0, [pc, #620]	; (800fa94 <__ieee754_pow+0xa3c>)
 800f826:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800f82a:	4108      	asrs	r0, r1
 800f82c:	ea00 030a 	and.w	r3, r0, sl
 800f830:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800f834:	f1c1 0114 	rsb	r1, r1, #20
 800f838:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800f83c:	fa4a fa01 	asr.w	sl, sl, r1
 800f840:	f1bb 0f00 	cmp.w	fp, #0
 800f844:	f04f 0200 	mov.w	r2, #0
 800f848:	4620      	mov	r0, r4
 800f84a:	4629      	mov	r1, r5
 800f84c:	bfb8      	it	lt
 800f84e:	f1ca 0a00 	rsblt	sl, sl, #0
 800f852:	f7f0 fd31 	bl	80002b8 <__aeabi_dsub>
 800f856:	ec41 0b19 	vmov	d9, r0, r1
 800f85a:	4642      	mov	r2, r8
 800f85c:	464b      	mov	r3, r9
 800f85e:	ec51 0b19 	vmov	r0, r1, d9
 800f862:	f7f0 fd2b 	bl	80002bc <__adddf3>
 800f866:	a37a      	add	r3, pc, #488	; (adr r3, 800fa50 <__ieee754_pow+0x9f8>)
 800f868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f86c:	2000      	movs	r0, #0
 800f86e:	4604      	mov	r4, r0
 800f870:	460d      	mov	r5, r1
 800f872:	f7f0 fed9 	bl	8000628 <__aeabi_dmul>
 800f876:	ec53 2b19 	vmov	r2, r3, d9
 800f87a:	4606      	mov	r6, r0
 800f87c:	460f      	mov	r7, r1
 800f87e:	4620      	mov	r0, r4
 800f880:	4629      	mov	r1, r5
 800f882:	f7f0 fd19 	bl	80002b8 <__aeabi_dsub>
 800f886:	4602      	mov	r2, r0
 800f888:	460b      	mov	r3, r1
 800f88a:	4640      	mov	r0, r8
 800f88c:	4649      	mov	r1, r9
 800f88e:	f7f0 fd13 	bl	80002b8 <__aeabi_dsub>
 800f892:	a371      	add	r3, pc, #452	; (adr r3, 800fa58 <__ieee754_pow+0xa00>)
 800f894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f898:	f7f0 fec6 	bl	8000628 <__aeabi_dmul>
 800f89c:	a370      	add	r3, pc, #448	; (adr r3, 800fa60 <__ieee754_pow+0xa08>)
 800f89e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8a2:	4680      	mov	r8, r0
 800f8a4:	4689      	mov	r9, r1
 800f8a6:	4620      	mov	r0, r4
 800f8a8:	4629      	mov	r1, r5
 800f8aa:	f7f0 febd 	bl	8000628 <__aeabi_dmul>
 800f8ae:	4602      	mov	r2, r0
 800f8b0:	460b      	mov	r3, r1
 800f8b2:	4640      	mov	r0, r8
 800f8b4:	4649      	mov	r1, r9
 800f8b6:	f7f0 fd01 	bl	80002bc <__adddf3>
 800f8ba:	4604      	mov	r4, r0
 800f8bc:	460d      	mov	r5, r1
 800f8be:	4602      	mov	r2, r0
 800f8c0:	460b      	mov	r3, r1
 800f8c2:	4630      	mov	r0, r6
 800f8c4:	4639      	mov	r1, r7
 800f8c6:	f7f0 fcf9 	bl	80002bc <__adddf3>
 800f8ca:	4632      	mov	r2, r6
 800f8cc:	463b      	mov	r3, r7
 800f8ce:	4680      	mov	r8, r0
 800f8d0:	4689      	mov	r9, r1
 800f8d2:	f7f0 fcf1 	bl	80002b8 <__aeabi_dsub>
 800f8d6:	4602      	mov	r2, r0
 800f8d8:	460b      	mov	r3, r1
 800f8da:	4620      	mov	r0, r4
 800f8dc:	4629      	mov	r1, r5
 800f8de:	f7f0 fceb 	bl	80002b8 <__aeabi_dsub>
 800f8e2:	4642      	mov	r2, r8
 800f8e4:	4606      	mov	r6, r0
 800f8e6:	460f      	mov	r7, r1
 800f8e8:	464b      	mov	r3, r9
 800f8ea:	4640      	mov	r0, r8
 800f8ec:	4649      	mov	r1, r9
 800f8ee:	f7f0 fe9b 	bl	8000628 <__aeabi_dmul>
 800f8f2:	a35d      	add	r3, pc, #372	; (adr r3, 800fa68 <__ieee754_pow+0xa10>)
 800f8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8f8:	4604      	mov	r4, r0
 800f8fa:	460d      	mov	r5, r1
 800f8fc:	f7f0 fe94 	bl	8000628 <__aeabi_dmul>
 800f900:	a35b      	add	r3, pc, #364	; (adr r3, 800fa70 <__ieee754_pow+0xa18>)
 800f902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f906:	f7f0 fcd7 	bl	80002b8 <__aeabi_dsub>
 800f90a:	4622      	mov	r2, r4
 800f90c:	462b      	mov	r3, r5
 800f90e:	f7f0 fe8b 	bl	8000628 <__aeabi_dmul>
 800f912:	a359      	add	r3, pc, #356	; (adr r3, 800fa78 <__ieee754_pow+0xa20>)
 800f914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f918:	f7f0 fcd0 	bl	80002bc <__adddf3>
 800f91c:	4622      	mov	r2, r4
 800f91e:	462b      	mov	r3, r5
 800f920:	f7f0 fe82 	bl	8000628 <__aeabi_dmul>
 800f924:	a356      	add	r3, pc, #344	; (adr r3, 800fa80 <__ieee754_pow+0xa28>)
 800f926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f92a:	f7f0 fcc5 	bl	80002b8 <__aeabi_dsub>
 800f92e:	4622      	mov	r2, r4
 800f930:	462b      	mov	r3, r5
 800f932:	f7f0 fe79 	bl	8000628 <__aeabi_dmul>
 800f936:	a354      	add	r3, pc, #336	; (adr r3, 800fa88 <__ieee754_pow+0xa30>)
 800f938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f93c:	f7f0 fcbe 	bl	80002bc <__adddf3>
 800f940:	4622      	mov	r2, r4
 800f942:	462b      	mov	r3, r5
 800f944:	f7f0 fe70 	bl	8000628 <__aeabi_dmul>
 800f948:	4602      	mov	r2, r0
 800f94a:	460b      	mov	r3, r1
 800f94c:	4640      	mov	r0, r8
 800f94e:	4649      	mov	r1, r9
 800f950:	f7f0 fcb2 	bl	80002b8 <__aeabi_dsub>
 800f954:	4604      	mov	r4, r0
 800f956:	460d      	mov	r5, r1
 800f958:	4602      	mov	r2, r0
 800f95a:	460b      	mov	r3, r1
 800f95c:	4640      	mov	r0, r8
 800f95e:	4649      	mov	r1, r9
 800f960:	f7f0 fe62 	bl	8000628 <__aeabi_dmul>
 800f964:	2200      	movs	r2, #0
 800f966:	ec41 0b19 	vmov	d9, r0, r1
 800f96a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f96e:	4620      	mov	r0, r4
 800f970:	4629      	mov	r1, r5
 800f972:	f7f0 fca1 	bl	80002b8 <__aeabi_dsub>
 800f976:	4602      	mov	r2, r0
 800f978:	460b      	mov	r3, r1
 800f97a:	ec51 0b19 	vmov	r0, r1, d9
 800f97e:	f7f0 ff7d 	bl	800087c <__aeabi_ddiv>
 800f982:	4632      	mov	r2, r6
 800f984:	4604      	mov	r4, r0
 800f986:	460d      	mov	r5, r1
 800f988:	463b      	mov	r3, r7
 800f98a:	4640      	mov	r0, r8
 800f98c:	4649      	mov	r1, r9
 800f98e:	f7f0 fe4b 	bl	8000628 <__aeabi_dmul>
 800f992:	4632      	mov	r2, r6
 800f994:	463b      	mov	r3, r7
 800f996:	f7f0 fc91 	bl	80002bc <__adddf3>
 800f99a:	4602      	mov	r2, r0
 800f99c:	460b      	mov	r3, r1
 800f99e:	4620      	mov	r0, r4
 800f9a0:	4629      	mov	r1, r5
 800f9a2:	f7f0 fc89 	bl	80002b8 <__aeabi_dsub>
 800f9a6:	4642      	mov	r2, r8
 800f9a8:	464b      	mov	r3, r9
 800f9aa:	f7f0 fc85 	bl	80002b8 <__aeabi_dsub>
 800f9ae:	460b      	mov	r3, r1
 800f9b0:	4602      	mov	r2, r0
 800f9b2:	4939      	ldr	r1, [pc, #228]	; (800fa98 <__ieee754_pow+0xa40>)
 800f9b4:	2000      	movs	r0, #0
 800f9b6:	f7f0 fc7f 	bl	80002b8 <__aeabi_dsub>
 800f9ba:	ec41 0b10 	vmov	d0, r0, r1
 800f9be:	ee10 3a90 	vmov	r3, s1
 800f9c2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800f9c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f9ca:	da2b      	bge.n	800fa24 <__ieee754_pow+0x9cc>
 800f9cc:	4650      	mov	r0, sl
 800f9ce:	f000 f86f 	bl	800fab0 <scalbn>
 800f9d2:	ec51 0b10 	vmov	r0, r1, d0
 800f9d6:	ec53 2b18 	vmov	r2, r3, d8
 800f9da:	f7ff bbee 	b.w	800f1ba <__ieee754_pow+0x162>
 800f9de:	4b2f      	ldr	r3, [pc, #188]	; (800fa9c <__ieee754_pow+0xa44>)
 800f9e0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800f9e4:	429e      	cmp	r6, r3
 800f9e6:	f77f af0d 	ble.w	800f804 <__ieee754_pow+0x7ac>
 800f9ea:	4b2d      	ldr	r3, [pc, #180]	; (800faa0 <__ieee754_pow+0xa48>)
 800f9ec:	440b      	add	r3, r1
 800f9ee:	4303      	orrs	r3, r0
 800f9f0:	d009      	beq.n	800fa06 <__ieee754_pow+0x9ae>
 800f9f2:	ec51 0b18 	vmov	r0, r1, d8
 800f9f6:	2200      	movs	r2, #0
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	f7f1 f887 	bl	8000b0c <__aeabi_dcmplt>
 800f9fe:	3800      	subs	r0, #0
 800fa00:	bf18      	it	ne
 800fa02:	2001      	movne	r0, #1
 800fa04:	e448      	b.n	800f298 <__ieee754_pow+0x240>
 800fa06:	4622      	mov	r2, r4
 800fa08:	462b      	mov	r3, r5
 800fa0a:	f7f0 fc55 	bl	80002b8 <__aeabi_dsub>
 800fa0e:	4642      	mov	r2, r8
 800fa10:	464b      	mov	r3, r9
 800fa12:	f7f1 f88f 	bl	8000b34 <__aeabi_dcmpge>
 800fa16:	2800      	cmp	r0, #0
 800fa18:	f43f aef4 	beq.w	800f804 <__ieee754_pow+0x7ac>
 800fa1c:	e7e9      	b.n	800f9f2 <__ieee754_pow+0x99a>
 800fa1e:	f04f 0a00 	mov.w	sl, #0
 800fa22:	e71a      	b.n	800f85a <__ieee754_pow+0x802>
 800fa24:	ec51 0b10 	vmov	r0, r1, d0
 800fa28:	4619      	mov	r1, r3
 800fa2a:	e7d4      	b.n	800f9d6 <__ieee754_pow+0x97e>
 800fa2c:	491a      	ldr	r1, [pc, #104]	; (800fa98 <__ieee754_pow+0xa40>)
 800fa2e:	2000      	movs	r0, #0
 800fa30:	f7ff bb31 	b.w	800f096 <__ieee754_pow+0x3e>
 800fa34:	2000      	movs	r0, #0
 800fa36:	2100      	movs	r1, #0
 800fa38:	f7ff bb2d 	b.w	800f096 <__ieee754_pow+0x3e>
 800fa3c:	4630      	mov	r0, r6
 800fa3e:	4639      	mov	r1, r7
 800fa40:	f7ff bb29 	b.w	800f096 <__ieee754_pow+0x3e>
 800fa44:	9204      	str	r2, [sp, #16]
 800fa46:	f7ff bb7b 	b.w	800f140 <__ieee754_pow+0xe8>
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	f7ff bb65 	b.w	800f11a <__ieee754_pow+0xc2>
 800fa50:	00000000 	.word	0x00000000
 800fa54:	3fe62e43 	.word	0x3fe62e43
 800fa58:	fefa39ef 	.word	0xfefa39ef
 800fa5c:	3fe62e42 	.word	0x3fe62e42
 800fa60:	0ca86c39 	.word	0x0ca86c39
 800fa64:	be205c61 	.word	0xbe205c61
 800fa68:	72bea4d0 	.word	0x72bea4d0
 800fa6c:	3e663769 	.word	0x3e663769
 800fa70:	c5d26bf1 	.word	0xc5d26bf1
 800fa74:	3ebbbd41 	.word	0x3ebbbd41
 800fa78:	af25de2c 	.word	0xaf25de2c
 800fa7c:	3f11566a 	.word	0x3f11566a
 800fa80:	16bebd93 	.word	0x16bebd93
 800fa84:	3f66c16c 	.word	0x3f66c16c
 800fa88:	5555553e 	.word	0x5555553e
 800fa8c:	3fc55555 	.word	0x3fc55555
 800fa90:	3fe00000 	.word	0x3fe00000
 800fa94:	fff00000 	.word	0xfff00000
 800fa98:	3ff00000 	.word	0x3ff00000
 800fa9c:	4090cbff 	.word	0x4090cbff
 800faa0:	3f6f3400 	.word	0x3f6f3400
 800faa4:	652b82fe 	.word	0x652b82fe
 800faa8:	3c971547 	.word	0x3c971547
 800faac:	00000000 	.word	0x00000000

0800fab0 <scalbn>:
 800fab0:	b570      	push	{r4, r5, r6, lr}
 800fab2:	ec55 4b10 	vmov	r4, r5, d0
 800fab6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800faba:	4606      	mov	r6, r0
 800fabc:	462b      	mov	r3, r5
 800fabe:	b999      	cbnz	r1, 800fae8 <scalbn+0x38>
 800fac0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800fac4:	4323      	orrs	r3, r4
 800fac6:	d03f      	beq.n	800fb48 <scalbn+0x98>
 800fac8:	4b35      	ldr	r3, [pc, #212]	; (800fba0 <scalbn+0xf0>)
 800faca:	4629      	mov	r1, r5
 800facc:	ee10 0a10 	vmov	r0, s0
 800fad0:	2200      	movs	r2, #0
 800fad2:	f7f0 fda9 	bl	8000628 <__aeabi_dmul>
 800fad6:	4b33      	ldr	r3, [pc, #204]	; (800fba4 <scalbn+0xf4>)
 800fad8:	429e      	cmp	r6, r3
 800fada:	4604      	mov	r4, r0
 800fadc:	460d      	mov	r5, r1
 800fade:	da10      	bge.n	800fb02 <scalbn+0x52>
 800fae0:	a327      	add	r3, pc, #156	; (adr r3, 800fb80 <scalbn+0xd0>)
 800fae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fae6:	e01f      	b.n	800fb28 <scalbn+0x78>
 800fae8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800faec:	4291      	cmp	r1, r2
 800faee:	d10c      	bne.n	800fb0a <scalbn+0x5a>
 800faf0:	ee10 2a10 	vmov	r2, s0
 800faf4:	4620      	mov	r0, r4
 800faf6:	4629      	mov	r1, r5
 800faf8:	f7f0 fbe0 	bl	80002bc <__adddf3>
 800fafc:	4604      	mov	r4, r0
 800fafe:	460d      	mov	r5, r1
 800fb00:	e022      	b.n	800fb48 <scalbn+0x98>
 800fb02:	460b      	mov	r3, r1
 800fb04:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800fb08:	3936      	subs	r1, #54	; 0x36
 800fb0a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800fb0e:	4296      	cmp	r6, r2
 800fb10:	dd0d      	ble.n	800fb2e <scalbn+0x7e>
 800fb12:	2d00      	cmp	r5, #0
 800fb14:	a11c      	add	r1, pc, #112	; (adr r1, 800fb88 <scalbn+0xd8>)
 800fb16:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb1a:	da02      	bge.n	800fb22 <scalbn+0x72>
 800fb1c:	a11c      	add	r1, pc, #112	; (adr r1, 800fb90 <scalbn+0xe0>)
 800fb1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb22:	a319      	add	r3, pc, #100	; (adr r3, 800fb88 <scalbn+0xd8>)
 800fb24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb28:	f7f0 fd7e 	bl	8000628 <__aeabi_dmul>
 800fb2c:	e7e6      	b.n	800fafc <scalbn+0x4c>
 800fb2e:	1872      	adds	r2, r6, r1
 800fb30:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800fb34:	428a      	cmp	r2, r1
 800fb36:	dcec      	bgt.n	800fb12 <scalbn+0x62>
 800fb38:	2a00      	cmp	r2, #0
 800fb3a:	dd08      	ble.n	800fb4e <scalbn+0x9e>
 800fb3c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fb40:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fb44:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800fb48:	ec45 4b10 	vmov	d0, r4, r5
 800fb4c:	bd70      	pop	{r4, r5, r6, pc}
 800fb4e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800fb52:	da08      	bge.n	800fb66 <scalbn+0xb6>
 800fb54:	2d00      	cmp	r5, #0
 800fb56:	a10a      	add	r1, pc, #40	; (adr r1, 800fb80 <scalbn+0xd0>)
 800fb58:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb5c:	dac0      	bge.n	800fae0 <scalbn+0x30>
 800fb5e:	a10e      	add	r1, pc, #56	; (adr r1, 800fb98 <scalbn+0xe8>)
 800fb60:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb64:	e7bc      	b.n	800fae0 <scalbn+0x30>
 800fb66:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fb6a:	3236      	adds	r2, #54	; 0x36
 800fb6c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fb70:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800fb74:	4620      	mov	r0, r4
 800fb76:	4b0c      	ldr	r3, [pc, #48]	; (800fba8 <scalbn+0xf8>)
 800fb78:	2200      	movs	r2, #0
 800fb7a:	e7d5      	b.n	800fb28 <scalbn+0x78>
 800fb7c:	f3af 8000 	nop.w
 800fb80:	c2f8f359 	.word	0xc2f8f359
 800fb84:	01a56e1f 	.word	0x01a56e1f
 800fb88:	8800759c 	.word	0x8800759c
 800fb8c:	7e37e43c 	.word	0x7e37e43c
 800fb90:	8800759c 	.word	0x8800759c
 800fb94:	fe37e43c 	.word	0xfe37e43c
 800fb98:	c2f8f359 	.word	0xc2f8f359
 800fb9c:	81a56e1f 	.word	0x81a56e1f
 800fba0:	43500000 	.word	0x43500000
 800fba4:	ffff3cb0 	.word	0xffff3cb0
 800fba8:	3c900000 	.word	0x3c900000

0800fbac <with_errno>:
 800fbac:	b570      	push	{r4, r5, r6, lr}
 800fbae:	4604      	mov	r4, r0
 800fbb0:	460d      	mov	r5, r1
 800fbb2:	4616      	mov	r6, r2
 800fbb4:	f7fe f9dc 	bl	800df70 <__errno>
 800fbb8:	4629      	mov	r1, r5
 800fbba:	6006      	str	r6, [r0, #0]
 800fbbc:	4620      	mov	r0, r4
 800fbbe:	bd70      	pop	{r4, r5, r6, pc}

0800fbc0 <xflow>:
 800fbc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fbc2:	4614      	mov	r4, r2
 800fbc4:	461d      	mov	r5, r3
 800fbc6:	b108      	cbz	r0, 800fbcc <xflow+0xc>
 800fbc8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800fbcc:	e9cd 2300 	strd	r2, r3, [sp]
 800fbd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fbd4:	4620      	mov	r0, r4
 800fbd6:	4629      	mov	r1, r5
 800fbd8:	f7f0 fd26 	bl	8000628 <__aeabi_dmul>
 800fbdc:	2222      	movs	r2, #34	; 0x22
 800fbde:	b003      	add	sp, #12
 800fbe0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fbe4:	f7ff bfe2 	b.w	800fbac <with_errno>

0800fbe8 <__math_uflow>:
 800fbe8:	b508      	push	{r3, lr}
 800fbea:	2200      	movs	r2, #0
 800fbec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800fbf0:	f7ff ffe6 	bl	800fbc0 <xflow>
 800fbf4:	ec41 0b10 	vmov	d0, r0, r1
 800fbf8:	bd08      	pop	{r3, pc}

0800fbfa <__math_oflow>:
 800fbfa:	b508      	push	{r3, lr}
 800fbfc:	2200      	movs	r2, #0
 800fbfe:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800fc02:	f7ff ffdd 	bl	800fbc0 <xflow>
 800fc06:	ec41 0b10 	vmov	d0, r0, r1
 800fc0a:	bd08      	pop	{r3, pc}

0800fc0c <_init>:
 800fc0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc0e:	bf00      	nop
 800fc10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc12:	bc08      	pop	{r3}
 800fc14:	469e      	mov	lr, r3
 800fc16:	4770      	bx	lr

0800fc18 <_fini>:
 800fc18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc1a:	bf00      	nop
 800fc1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc1e:	bc08      	pop	{r3}
 800fc20:	469e      	mov	lr, r3
 800fc22:	4770      	bx	lr
