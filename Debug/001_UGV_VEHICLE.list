
001_UGV_VEHICLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f180  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  0800f350  0800f350  0001f350  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f4b0  0800f4b0  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f4b0  0800f4b0  0001f4b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f4b8  0800f4b8  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f4b8  0800f4b8  0001f4b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f4bc  0800f4bc  0001f4bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  0800f4c0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005480  200000b0  0800f570  000200b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20005530  0800f570  00025530  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000275bb  00000000  00000000  00020123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000064bc  00000000  00000000  000476de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001eb0  00000000  00000000  0004dba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000179a  00000000  00000000  0004fa50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000835a  00000000  00000000  000511ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002c750  00000000  00000000  00059544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2dd3  00000000  00000000  00085c94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000086dc  00000000  00000000  00168a68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00171144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b0 	.word	0x200000b0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f338 	.word	0x0800f338

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b4 	.word	0x200000b4
 800020c:	0800f338 	.word	0x0800f338

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2uiz>:
 8000b88:	004a      	lsls	r2, r1, #1
 8000b8a:	d211      	bcs.n	8000bb0 <__aeabi_d2uiz+0x28>
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d211      	bcs.n	8000bb6 <__aeabi_d2uiz+0x2e>
 8000b92:	d50d      	bpl.n	8000bb0 <__aeabi_d2uiz+0x28>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d40e      	bmi.n	8000bbc <__aeabi_d2uiz+0x34>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_d2uiz+0x3a>
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0000 	mov.w	r0, #0
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b970 	b.w	8000f60 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9e08      	ldr	r6, [sp, #32]
 8000c9e:	460d      	mov	r5, r1
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	460f      	mov	r7, r1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d14a      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4694      	mov	ip, r2
 8000cac:	d965      	bls.n	8000d7a <__udivmoddi4+0xe2>
 8000cae:	fab2 f382 	clz	r3, r2
 8000cb2:	b143      	cbz	r3, 8000cc6 <__udivmoddi4+0x2e>
 8000cb4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cb8:	f1c3 0220 	rsb	r2, r3, #32
 8000cbc:	409f      	lsls	r7, r3
 8000cbe:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc2:	4317      	orrs	r7, r2
 8000cc4:	409c      	lsls	r4, r3
 8000cc6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cca:	fa1f f58c 	uxth.w	r5, ip
 8000cce:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cd2:	0c22      	lsrs	r2, r4, #16
 8000cd4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cd8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cdc:	fb01 f005 	mul.w	r0, r1, r5
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	d90a      	bls.n	8000cfa <__udivmoddi4+0x62>
 8000ce4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ce8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cec:	f080 811c 	bcs.w	8000f28 <__udivmoddi4+0x290>
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	f240 8119 	bls.w	8000f28 <__udivmoddi4+0x290>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	4462      	add	r2, ip
 8000cfa:	1a12      	subs	r2, r2, r0
 8000cfc:	b2a4      	uxth	r4, r4
 8000cfe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d06:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0a:	fb00 f505 	mul.w	r5, r0, r5
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	d90a      	bls.n	8000d28 <__udivmoddi4+0x90>
 8000d12:	eb1c 0404 	adds.w	r4, ip, r4
 8000d16:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1a:	f080 8107 	bcs.w	8000f2c <__udivmoddi4+0x294>
 8000d1e:	42a5      	cmp	r5, r4
 8000d20:	f240 8104 	bls.w	8000f2c <__udivmoddi4+0x294>
 8000d24:	4464      	add	r4, ip
 8000d26:	3802      	subs	r0, #2
 8000d28:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d2c:	1b64      	subs	r4, r4, r5
 8000d2e:	2100      	movs	r1, #0
 8000d30:	b11e      	cbz	r6, 8000d3a <__udivmoddi4+0xa2>
 8000d32:	40dc      	lsrs	r4, r3
 8000d34:	2300      	movs	r3, #0
 8000d36:	e9c6 4300 	strd	r4, r3, [r6]
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0xbc>
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	f000 80ed 	beq.w	8000f22 <__udivmoddi4+0x28a>
 8000d48:	2100      	movs	r1, #0
 8000d4a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d54:	fab3 f183 	clz	r1, r3
 8000d58:	2900      	cmp	r1, #0
 8000d5a:	d149      	bne.n	8000df0 <__udivmoddi4+0x158>
 8000d5c:	42ab      	cmp	r3, r5
 8000d5e:	d302      	bcc.n	8000d66 <__udivmoddi4+0xce>
 8000d60:	4282      	cmp	r2, r0
 8000d62:	f200 80f8 	bhi.w	8000f56 <__udivmoddi4+0x2be>
 8000d66:	1a84      	subs	r4, r0, r2
 8000d68:	eb65 0203 	sbc.w	r2, r5, r3
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	4617      	mov	r7, r2
 8000d70:	2e00      	cmp	r6, #0
 8000d72:	d0e2      	beq.n	8000d3a <__udivmoddi4+0xa2>
 8000d74:	e9c6 4700 	strd	r4, r7, [r6]
 8000d78:	e7df      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d7a:	b902      	cbnz	r2, 8000d7e <__udivmoddi4+0xe6>
 8000d7c:	deff      	udf	#255	; 0xff
 8000d7e:	fab2 f382 	clz	r3, r2
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f040 8090 	bne.w	8000ea8 <__udivmoddi4+0x210>
 8000d88:	1a8a      	subs	r2, r1, r2
 8000d8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d8e:	fa1f fe8c 	uxth.w	lr, ip
 8000d92:	2101      	movs	r1, #1
 8000d94:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d98:	fb07 2015 	mls	r0, r7, r5, r2
 8000d9c:	0c22      	lsrs	r2, r4, #16
 8000d9e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000da2:	fb0e f005 	mul.w	r0, lr, r5
 8000da6:	4290      	cmp	r0, r2
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x124>
 8000daa:	eb1c 0202 	adds.w	r2, ip, r2
 8000dae:	f105 38ff 	add.w	r8, r5, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x122>
 8000db4:	4290      	cmp	r0, r2
 8000db6:	f200 80cb 	bhi.w	8000f50 <__udivmoddi4+0x2b8>
 8000dba:	4645      	mov	r5, r8
 8000dbc:	1a12      	subs	r2, r2, r0
 8000dbe:	b2a4      	uxth	r4, r4
 8000dc0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dc4:	fb07 2210 	mls	r2, r7, r0, r2
 8000dc8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dcc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd0:	45a6      	cmp	lr, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x14e>
 8000dd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ddc:	d202      	bcs.n	8000de4 <__udivmoddi4+0x14c>
 8000dde:	45a6      	cmp	lr, r4
 8000de0:	f200 80bb 	bhi.w	8000f5a <__udivmoddi4+0x2c2>
 8000de4:	4610      	mov	r0, r2
 8000de6:	eba4 040e 	sub.w	r4, r4, lr
 8000dea:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dee:	e79f      	b.n	8000d30 <__udivmoddi4+0x98>
 8000df0:	f1c1 0720 	rsb	r7, r1, #32
 8000df4:	408b      	lsls	r3, r1
 8000df6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dfa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dfe:	fa05 f401 	lsl.w	r4, r5, r1
 8000e02:	fa20 f307 	lsr.w	r3, r0, r7
 8000e06:	40fd      	lsrs	r5, r7
 8000e08:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e0c:	4323      	orrs	r3, r4
 8000e0e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e12:	fa1f fe8c 	uxth.w	lr, ip
 8000e16:	fb09 5518 	mls	r5, r9, r8, r5
 8000e1a:	0c1c      	lsrs	r4, r3, #16
 8000e1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e20:	fb08 f50e 	mul.w	r5, r8, lr
 8000e24:	42a5      	cmp	r5, r4
 8000e26:	fa02 f201 	lsl.w	r2, r2, r1
 8000e2a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e2e:	d90b      	bls.n	8000e48 <__udivmoddi4+0x1b0>
 8000e30:	eb1c 0404 	adds.w	r4, ip, r4
 8000e34:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e38:	f080 8088 	bcs.w	8000f4c <__udivmoddi4+0x2b4>
 8000e3c:	42a5      	cmp	r5, r4
 8000e3e:	f240 8085 	bls.w	8000f4c <__udivmoddi4+0x2b4>
 8000e42:	f1a8 0802 	sub.w	r8, r8, #2
 8000e46:	4464      	add	r4, ip
 8000e48:	1b64      	subs	r4, r4, r5
 8000e4a:	b29d      	uxth	r5, r3
 8000e4c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e50:	fb09 4413 	mls	r4, r9, r3, r4
 8000e54:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e58:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x1da>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e68:	d26c      	bcs.n	8000f44 <__udivmoddi4+0x2ac>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	d96a      	bls.n	8000f44 <__udivmoddi4+0x2ac>
 8000e6e:	3b02      	subs	r3, #2
 8000e70:	4464      	add	r4, ip
 8000e72:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e76:	fba3 9502 	umull	r9, r5, r3, r2
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	42ac      	cmp	r4, r5
 8000e80:	46c8      	mov	r8, r9
 8000e82:	46ae      	mov	lr, r5
 8000e84:	d356      	bcc.n	8000f34 <__udivmoddi4+0x29c>
 8000e86:	d053      	beq.n	8000f30 <__udivmoddi4+0x298>
 8000e88:	b156      	cbz	r6, 8000ea0 <__udivmoddi4+0x208>
 8000e8a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e8e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e92:	fa04 f707 	lsl.w	r7, r4, r7
 8000e96:	40ca      	lsrs	r2, r1
 8000e98:	40cc      	lsrs	r4, r1
 8000e9a:	4317      	orrs	r7, r2
 8000e9c:	e9c6 7400 	strd	r7, r4, [r6]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea8:	f1c3 0120 	rsb	r1, r3, #32
 8000eac:	fa02 fc03 	lsl.w	ip, r2, r3
 8000eb0:	fa20 f201 	lsr.w	r2, r0, r1
 8000eb4:	fa25 f101 	lsr.w	r1, r5, r1
 8000eb8:	409d      	lsls	r5, r3
 8000eba:	432a      	orrs	r2, r5
 8000ebc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec0:	fa1f fe8c 	uxth.w	lr, ip
 8000ec4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ec8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ed2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ed6:	428d      	cmp	r5, r1
 8000ed8:	fa04 f403 	lsl.w	r4, r4, r3
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x258>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ee6:	d22f      	bcs.n	8000f48 <__udivmoddi4+0x2b0>
 8000ee8:	428d      	cmp	r5, r1
 8000eea:	d92d      	bls.n	8000f48 <__udivmoddi4+0x2b0>
 8000eec:	3802      	subs	r0, #2
 8000eee:	4461      	add	r1, ip
 8000ef0:	1b49      	subs	r1, r1, r5
 8000ef2:	b292      	uxth	r2, r2
 8000ef4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ef8:	fb07 1115 	mls	r1, r7, r5, r1
 8000efc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f00:	fb05 f10e 	mul.w	r1, r5, lr
 8000f04:	4291      	cmp	r1, r2
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x282>
 8000f08:	eb1c 0202 	adds.w	r2, ip, r2
 8000f0c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f10:	d216      	bcs.n	8000f40 <__udivmoddi4+0x2a8>
 8000f12:	4291      	cmp	r1, r2
 8000f14:	d914      	bls.n	8000f40 <__udivmoddi4+0x2a8>
 8000f16:	3d02      	subs	r5, #2
 8000f18:	4462      	add	r2, ip
 8000f1a:	1a52      	subs	r2, r2, r1
 8000f1c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f20:	e738      	b.n	8000d94 <__udivmoddi4+0xfc>
 8000f22:	4631      	mov	r1, r6
 8000f24:	4630      	mov	r0, r6
 8000f26:	e708      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000f28:	4639      	mov	r1, r7
 8000f2a:	e6e6      	b.n	8000cfa <__udivmoddi4+0x62>
 8000f2c:	4610      	mov	r0, r2
 8000f2e:	e6fb      	b.n	8000d28 <__udivmoddi4+0x90>
 8000f30:	4548      	cmp	r0, r9
 8000f32:	d2a9      	bcs.n	8000e88 <__udivmoddi4+0x1f0>
 8000f34:	ebb9 0802 	subs.w	r8, r9, r2
 8000f38:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	e7a3      	b.n	8000e88 <__udivmoddi4+0x1f0>
 8000f40:	4645      	mov	r5, r8
 8000f42:	e7ea      	b.n	8000f1a <__udivmoddi4+0x282>
 8000f44:	462b      	mov	r3, r5
 8000f46:	e794      	b.n	8000e72 <__udivmoddi4+0x1da>
 8000f48:	4640      	mov	r0, r8
 8000f4a:	e7d1      	b.n	8000ef0 <__udivmoddi4+0x258>
 8000f4c:	46d0      	mov	r8, sl
 8000f4e:	e77b      	b.n	8000e48 <__udivmoddi4+0x1b0>
 8000f50:	3d02      	subs	r5, #2
 8000f52:	4462      	add	r2, ip
 8000f54:	e732      	b.n	8000dbc <__udivmoddi4+0x124>
 8000f56:	4608      	mov	r0, r1
 8000f58:	e70a      	b.n	8000d70 <__udivmoddi4+0xd8>
 8000f5a:	4464      	add	r4, ip
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	e742      	b.n	8000de6 <__udivmoddi4+0x14e>

08000f60 <__aeabi_idiv0>:
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08a      	sub	sp, #40	; 0x28
 8000f68:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]
 8000f76:	60da      	str	r2, [r3, #12]
 8000f78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	613b      	str	r3, [r7, #16]
 8000f7e:	4b46      	ldr	r3, [pc, #280]	; (8001098 <MX_GPIO_Init+0x134>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a45      	ldr	r2, [pc, #276]	; (8001098 <MX_GPIO_Init+0x134>)
 8000f84:	f043 0304 	orr.w	r3, r3, #4
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b43      	ldr	r3, [pc, #268]	; (8001098 <MX_GPIO_Init+0x134>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0304 	and.w	r3, r3, #4
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	4b3f      	ldr	r3, [pc, #252]	; (8001098 <MX_GPIO_Init+0x134>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a3e      	ldr	r2, [pc, #248]	; (8001098 <MX_GPIO_Init+0x134>)
 8000fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b3c      	ldr	r3, [pc, #240]	; (8001098 <MX_GPIO_Init+0x134>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	4b38      	ldr	r3, [pc, #224]	; (8001098 <MX_GPIO_Init+0x134>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a37      	ldr	r2, [pc, #220]	; (8001098 <MX_GPIO_Init+0x134>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b35      	ldr	r3, [pc, #212]	; (8001098 <MX_GPIO_Init+0x134>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	607b      	str	r3, [r7, #4]
 8000fd2:	4b31      	ldr	r3, [pc, #196]	; (8001098 <MX_GPIO_Init+0x134>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a30      	ldr	r2, [pc, #192]	; (8001098 <MX_GPIO_Init+0x134>)
 8000fd8:	f043 0302 	orr.w	r3, r3, #2
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b2e      	ldr	r3, [pc, #184]	; (8001098 <MX_GPIO_Init+0x134>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8000fea:	2201      	movs	r2, #1
 8000fec:	2101      	movs	r1, #1
 8000fee:	482b      	ldr	r0, [pc, #172]	; (800109c <MX_GPIO_Init+0x138>)
 8000ff0:	f001 fc20 	bl	8002834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUZZER_Pin|COMPASS_VCC_Pin, GPIO_PIN_RESET);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f241 0110 	movw	r1, #4112	; 0x1010
 8000ffa:	4828      	ldr	r0, [pc, #160]	; (800109c <MX_GPIO_Init+0x138>)
 8000ffc:	f001 fc1a 	bl	8002834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|LID_LED_Pin, GPIO_PIN_RESET);
 8001000:	2200      	movs	r2, #0
 8001002:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8001006:	4826      	ldr	r0, [pc, #152]	; (80010a0 <MX_GPIO_Init+0x13c>)
 8001008:	f001 fc14 	bl	8002834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800100c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001010:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001012:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001016:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	4619      	mov	r1, r3
 8001022:	481e      	ldr	r0, [pc, #120]	; (800109c <MX_GPIO_Init+0x138>)
 8001024:	f001 fa5a 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NSS_Pin|BUZZER_Pin|COMPASS_VCC_Pin;
 8001028:	f241 0311 	movw	r3, #4113	; 0x1011
 800102c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102e:	2301      	movs	r3, #1
 8001030:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	2300      	movs	r3, #0
 8001038:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800103a:	f107 0314 	add.w	r3, r7, #20
 800103e:	4619      	mov	r1, r3
 8001040:	4816      	ldr	r0, [pc, #88]	; (800109c <MX_GPIO_Init+0x138>)
 8001042:	f001 fa4b 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8001046:	2302      	movs	r3, #2
 8001048:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800104a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800104e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	4619      	mov	r1, r3
 800105a:	4810      	ldr	r0, [pc, #64]	; (800109c <MX_GPIO_Init+0x138>)
 800105c:	f001 fa3e 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_Pin|LID_LED_Pin;
 8001060:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001064:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001066:	2301      	movs	r3, #1
 8001068:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106e:	2300      	movs	r3, #0
 8001070:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001072:	f107 0314 	add.w	r3, r7, #20
 8001076:	4619      	mov	r1, r3
 8001078:	4809      	ldr	r0, [pc, #36]	; (80010a0 <MX_GPIO_Init+0x13c>)
 800107a:	f001 fa2f 	bl	80024dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	2105      	movs	r1, #5
 8001082:	2007      	movs	r0, #7
 8001084:	f001 f96e 	bl	8002364 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001088:	2007      	movs	r0, #7
 800108a:	f001 f987 	bl	800239c <HAL_NVIC_EnableIRQ>

}
 800108e:	bf00      	nop
 8001090:	3728      	adds	r7, #40	; 0x28
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40023800 	.word	0x40023800
 800109c:	40020800 	.word	0x40020800
 80010a0:	40020000 	.word	0x40020000

080010a4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == DIO0_Pin)
 80010ae:	88fb      	ldrh	r3, [r7, #6]
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d101      	bne.n	80010b8 <HAL_GPIO_EXTI_Callback+0x14>
	{
		dioIrqCallback();
 80010b4:	f00c f938 	bl	800d328 <dioIrqCallback>
	}
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010c4:	4b12      	ldr	r3, [pc, #72]	; (8001110 <MX_I2C1_Init+0x50>)
 80010c6:	4a13      	ldr	r2, [pc, #76]	; (8001114 <MX_I2C1_Init+0x54>)
 80010c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010ca:	4b11      	ldr	r3, [pc, #68]	; (8001110 <MX_I2C1_Init+0x50>)
 80010cc:	4a12      	ldr	r2, [pc, #72]	; (8001118 <MX_I2C1_Init+0x58>)
 80010ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010d0:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <MX_I2C1_Init+0x50>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010d6:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <MX_I2C1_Init+0x50>)
 80010d8:	2200      	movs	r2, #0
 80010da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010dc:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <MX_I2C1_Init+0x50>)
 80010de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010e4:	4b0a      	ldr	r3, [pc, #40]	; (8001110 <MX_I2C1_Init+0x50>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010ea:	4b09      	ldr	r3, [pc, #36]	; (8001110 <MX_I2C1_Init+0x50>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010f0:	4b07      	ldr	r3, [pc, #28]	; (8001110 <MX_I2C1_Init+0x50>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <MX_I2C1_Init+0x50>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010fc:	4804      	ldr	r0, [pc, #16]	; (8001110 <MX_I2C1_Init+0x50>)
 80010fe:	f001 fbcb 	bl	8002898 <HAL_I2C_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001108:	f000 f8f6 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}
 8001110:	200000cc 	.word	0x200000cc
 8001114:	40005400 	.word	0x40005400
 8001118:	000186a0 	.word	0x000186a0

0800111c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	; 0x28
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a19      	ldr	r2, [pc, #100]	; (80011a0 <HAL_I2C_MspInit+0x84>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d12c      	bne.n	8001198 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <HAL_I2C_MspInit+0x88>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a17      	ldr	r2, [pc, #92]	; (80011a4 <HAL_I2C_MspInit+0x88>)
 8001148:	f043 0302 	orr.w	r3, r3, #2
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <HAL_I2C_MspInit+0x88>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800115a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800115e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001160:	2312      	movs	r3, #18
 8001162:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001168:	2303      	movs	r3, #3
 800116a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800116c:	2304      	movs	r3, #4
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	4619      	mov	r1, r3
 8001176:	480c      	ldr	r0, [pc, #48]	; (80011a8 <HAL_I2C_MspInit+0x8c>)
 8001178:	f001 f9b0 	bl	80024dc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800117c:	2300      	movs	r3, #0
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <HAL_I2C_MspInit+0x88>)
 8001182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001184:	4a07      	ldr	r2, [pc, #28]	; (80011a4 <HAL_I2C_MspInit+0x88>)
 8001186:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800118a:	6413      	str	r3, [r2, #64]	; 0x40
 800118c:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <HAL_I2C_MspInit+0x88>)
 800118e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001190:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001198:	bf00      	nop
 800119a:	3728      	adds	r7, #40	; 0x28
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40005400 	.word	0x40005400
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40020400 	.word	0x40020400

080011ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011b0:	f000 ffba 	bl	8002128 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011b4:	f000 f81c 	bl	80011f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011b8:	f7ff fed4 	bl	8000f64 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011bc:	f000 fe9e 	bl	8001efc <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80011c0:	f000 fb64 	bl	800188c <MX_TIM2_Init>
  MX_SPI1_Init();
 80011c4:	f000 f89e 	bl	8001304 <MX_SPI1_Init>
  MX_TIM12_Init();
 80011c8:	f000 fca8 	bl	8001b1c <MX_TIM12_Init>
  MX_I2C1_Init();
 80011cc:	f7ff ff78 	bl	80010c0 <MX_I2C1_Init>
  MX_TIM1_Init();
 80011d0:	f000 face 	bl	8001770 <MX_TIM1_Init>
  MX_TIM3_Init();
 80011d4:	f000 fbce 	bl	8001974 <MX_TIM3_Init>
  MX_TIM4_Init();
 80011d8:	f000 fc48 	bl	8001a6c <MX_TIM4_Init>
  MX_SPI2_Init();
 80011dc:	f000 f8c8 	bl	8001370 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 80011e0:	f000 feb6 	bl	8001f50 <MX_USART3_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  ugvMain();
 80011e4:	f00b ff48 	bl	800d078 <ugvMain>
	  break;
 80011e8:	bf00      	nop
 80011ea:	2300      	movs	r3, #0

  }
  /* USER CODE END 3 */
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b094      	sub	sp, #80	; 0x50
 80011f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011f6:	f107 031c 	add.w	r3, r7, #28
 80011fa:	2234      	movs	r2, #52	; 0x34
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f00c fa06 	bl	800d610 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001204:	f107 0308 	add.w	r3, r7, #8
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001214:	2300      	movs	r3, #0
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	4b2c      	ldr	r3, [pc, #176]	; (80012cc <SystemClock_Config+0xdc>)
 800121a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121c:	4a2b      	ldr	r2, [pc, #172]	; (80012cc <SystemClock_Config+0xdc>)
 800121e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001222:	6413      	str	r3, [r2, #64]	; 0x40
 8001224:	4b29      	ldr	r3, [pc, #164]	; (80012cc <SystemClock_Config+0xdc>)
 8001226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122c:	607b      	str	r3, [r7, #4]
 800122e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001230:	2300      	movs	r3, #0
 8001232:	603b      	str	r3, [r7, #0]
 8001234:	4b26      	ldr	r3, [pc, #152]	; (80012d0 <SystemClock_Config+0xe0>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a25      	ldr	r2, [pc, #148]	; (80012d0 <SystemClock_Config+0xe0>)
 800123a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800123e:	6013      	str	r3, [r2, #0]
 8001240:	4b23      	ldr	r3, [pc, #140]	; (80012d0 <SystemClock_Config+0xe0>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001248:	603b      	str	r3, [r7, #0]
 800124a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800124c:	2302      	movs	r3, #2
 800124e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001250:	2301      	movs	r3, #1
 8001252:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001254:	2310      	movs	r3, #16
 8001256:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001258:	2302      	movs	r3, #2
 800125a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800125c:	2300      	movs	r3, #0
 800125e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001260:	2308      	movs	r3, #8
 8001262:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001264:	23b4      	movs	r3, #180	; 0xb4
 8001266:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001268:	2302      	movs	r3, #2
 800126a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800126c:	2302      	movs	r3, #2
 800126e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001270:	2302      	movs	r3, #2
 8001272:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001274:	f107 031c 	add.w	r3, r7, #28
 8001278:	4618      	mov	r0, r3
 800127a:	f003 f839 	bl	80042f0 <HAL_RCC_OscConfig>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001284:	f000 f838 	bl	80012f8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001288:	f002 fc66 	bl	8003b58 <HAL_PWREx_EnableOverDrive>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001292:	f000 f831 	bl	80012f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001296:	230f      	movs	r3, #15
 8001298:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800129a:	2302      	movs	r3, #2
 800129c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012a2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ac:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012ae:	f107 0308 	add.w	r3, r7, #8
 80012b2:	2105      	movs	r1, #5
 80012b4:	4618      	mov	r0, r3
 80012b6:	f002 fc9f 	bl	8003bf8 <HAL_RCC_ClockConfig>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80012c0:	f000 f81a 	bl	80012f8 <Error_Handler>
  }
}
 80012c4:	bf00      	nop
 80012c6:	3750      	adds	r7, #80	; 0x50
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40007000 	.word	0x40007000

080012d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a04      	ldr	r2, [pc, #16]	; (80012f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d101      	bne.n	80012ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012e6:	f000 ff41 	bl	800216c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40001000 	.word	0x40001000

080012f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012fc:	b672      	cpsid	i
}
 80012fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001300:	e7fe      	b.n	8001300 <Error_Handler+0x8>
	...

08001304 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001308:	4b17      	ldr	r3, [pc, #92]	; (8001368 <MX_SPI1_Init+0x64>)
 800130a:	4a18      	ldr	r2, [pc, #96]	; (800136c <MX_SPI1_Init+0x68>)
 800130c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800130e:	4b16      	ldr	r3, [pc, #88]	; (8001368 <MX_SPI1_Init+0x64>)
 8001310:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001314:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001316:	4b14      	ldr	r3, [pc, #80]	; (8001368 <MX_SPI1_Init+0x64>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800131c:	4b12      	ldr	r3, [pc, #72]	; (8001368 <MX_SPI1_Init+0x64>)
 800131e:	2200      	movs	r2, #0
 8001320:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001322:	4b11      	ldr	r3, [pc, #68]	; (8001368 <MX_SPI1_Init+0x64>)
 8001324:	2200      	movs	r2, #0
 8001326:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001328:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <MX_SPI1_Init+0x64>)
 800132a:	2200      	movs	r2, #0
 800132c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800132e:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <MX_SPI1_Init+0x64>)
 8001330:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001334:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001336:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <MX_SPI1_Init+0x64>)
 8001338:	2218      	movs	r2, #24
 800133a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800133c:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <MX_SPI1_Init+0x64>)
 800133e:	2200      	movs	r2, #0
 8001340:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001342:	4b09      	ldr	r3, [pc, #36]	; (8001368 <MX_SPI1_Init+0x64>)
 8001344:	2200      	movs	r2, #0
 8001346:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001348:	4b07      	ldr	r3, [pc, #28]	; (8001368 <MX_SPI1_Init+0x64>)
 800134a:	2200      	movs	r2, #0
 800134c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <MX_SPI1_Init+0x64>)
 8001350:	220a      	movs	r2, #10
 8001352:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001354:	4804      	ldr	r0, [pc, #16]	; (8001368 <MX_SPI1_Init+0x64>)
 8001356:	f003 fa69 	bl	800482c <HAL_SPI_Init>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001360:	f7ff ffca 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001364:	bf00      	nop
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20000120 	.word	0x20000120
 800136c:	40013000 	.word	0x40013000

08001370 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001374:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <MX_SPI2_Init+0x64>)
 8001376:	4a18      	ldr	r2, [pc, #96]	; (80013d8 <MX_SPI2_Init+0x68>)
 8001378:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800137a:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <MX_SPI2_Init+0x64>)
 800137c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001380:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001382:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <MX_SPI2_Init+0x64>)
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001388:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <MX_SPI2_Init+0x64>)
 800138a:	2200      	movs	r2, #0
 800138c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800138e:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <MX_SPI2_Init+0x64>)
 8001390:	2200      	movs	r2, #0
 8001392:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001394:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <MX_SPI2_Init+0x64>)
 8001396:	2200      	movs	r2, #0
 8001398:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800139a:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <MX_SPI2_Init+0x64>)
 800139c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013a0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80013a2:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <MX_SPI2_Init+0x64>)
 80013a4:	2218      	movs	r2, #24
 80013a6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013a8:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <MX_SPI2_Init+0x64>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80013ae:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <MX_SPI2_Init+0x64>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013b4:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <MX_SPI2_Init+0x64>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80013ba:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <MX_SPI2_Init+0x64>)
 80013bc:	220a      	movs	r2, #10
 80013be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80013c0:	4804      	ldr	r0, [pc, #16]	; (80013d4 <MX_SPI2_Init+0x64>)
 80013c2:	f003 fa33 	bl	800482c <HAL_SPI_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80013cc:	f7ff ff94 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20000178 	.word	0x20000178
 80013d8:	40003800 	.word	0x40003800

080013dc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08c      	sub	sp, #48	; 0x30
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	f107 031c 	add.w	r3, r7, #28
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a41      	ldr	r2, [pc, #260]	; (8001500 <HAL_SPI_MspInit+0x124>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d12c      	bne.n	8001458 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	61bb      	str	r3, [r7, #24]
 8001402:	4b40      	ldr	r3, [pc, #256]	; (8001504 <HAL_SPI_MspInit+0x128>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001406:	4a3f      	ldr	r2, [pc, #252]	; (8001504 <HAL_SPI_MspInit+0x128>)
 8001408:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800140c:	6453      	str	r3, [r2, #68]	; 0x44
 800140e:	4b3d      	ldr	r3, [pc, #244]	; (8001504 <HAL_SPI_MspInit+0x128>)
 8001410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001412:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001416:	61bb      	str	r3, [r7, #24]
 8001418:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]
 800141e:	4b39      	ldr	r3, [pc, #228]	; (8001504 <HAL_SPI_MspInit+0x128>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a38      	ldr	r2, [pc, #224]	; (8001504 <HAL_SPI_MspInit+0x128>)
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b36      	ldr	r3, [pc, #216]	; (8001504 <HAL_SPI_MspInit+0x128>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	617b      	str	r3, [r7, #20]
 8001434:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001436:	23e0      	movs	r3, #224	; 0xe0
 8001438:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143a:	2302      	movs	r3, #2
 800143c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001442:	2303      	movs	r3, #3
 8001444:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001446:	2305      	movs	r3, #5
 8001448:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144a:	f107 031c 	add.w	r3, r7, #28
 800144e:	4619      	mov	r1, r3
 8001450:	482d      	ldr	r0, [pc, #180]	; (8001508 <HAL_SPI_MspInit+0x12c>)
 8001452:	f001 f843 	bl	80024dc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001456:	e04f      	b.n	80014f8 <HAL_SPI_MspInit+0x11c>
  else if(spiHandle->Instance==SPI2)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a2b      	ldr	r2, [pc, #172]	; (800150c <HAL_SPI_MspInit+0x130>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d14a      	bne.n	80014f8 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	4b27      	ldr	r3, [pc, #156]	; (8001504 <HAL_SPI_MspInit+0x128>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	4a26      	ldr	r2, [pc, #152]	; (8001504 <HAL_SPI_MspInit+0x128>)
 800146c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001470:	6413      	str	r3, [r2, #64]	; 0x40
 8001472:	4b24      	ldr	r3, [pc, #144]	; (8001504 <HAL_SPI_MspInit+0x128>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800147a:	613b      	str	r3, [r7, #16]
 800147c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	4b20      	ldr	r3, [pc, #128]	; (8001504 <HAL_SPI_MspInit+0x128>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a1f      	ldr	r2, [pc, #124]	; (8001504 <HAL_SPI_MspInit+0x128>)
 8001488:	f043 0304 	orr.w	r3, r3, #4
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b1d      	ldr	r3, [pc, #116]	; (8001504 <HAL_SPI_MspInit+0x128>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0304 	and.w	r3, r3, #4
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	4b19      	ldr	r3, [pc, #100]	; (8001504 <HAL_SPI_MspInit+0x128>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a18      	ldr	r2, [pc, #96]	; (8001504 <HAL_SPI_MspInit+0x128>)
 80014a4:	f043 0302 	orr.w	r3, r3, #2
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b16      	ldr	r3, [pc, #88]	; (8001504 <HAL_SPI_MspInit+0x128>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014b6:	230c      	movs	r3, #12
 80014b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ba:	2302      	movs	r3, #2
 80014bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c2:	2303      	movs	r3, #3
 80014c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014c6:	2305      	movs	r3, #5
 80014c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ca:	f107 031c 	add.w	r3, r7, #28
 80014ce:	4619      	mov	r1, r3
 80014d0:	480f      	ldr	r0, [pc, #60]	; (8001510 <HAL_SPI_MspInit+0x134>)
 80014d2:	f001 f803 	bl	80024dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80014d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014dc:	2302      	movs	r3, #2
 80014de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e4:	2303      	movs	r3, #3
 80014e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014e8:	2305      	movs	r3, #5
 80014ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ec:	f107 031c 	add.w	r3, r7, #28
 80014f0:	4619      	mov	r1, r3
 80014f2:	4808      	ldr	r0, [pc, #32]	; (8001514 <HAL_SPI_MspInit+0x138>)
 80014f4:	f000 fff2 	bl	80024dc <HAL_GPIO_Init>
}
 80014f8:	bf00      	nop
 80014fa:	3730      	adds	r7, #48	; 0x30
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40013000 	.word	0x40013000
 8001504:	40023800 	.word	0x40023800
 8001508:	40020000 	.word	0x40020000
 800150c:	40003800 	.word	0x40003800
 8001510:	40020800 	.word	0x40020800
 8001514:	40020400 	.word	0x40020400

08001518 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	607b      	str	r3, [r7, #4]
 8001522:	4b12      	ldr	r3, [pc, #72]	; (800156c <HAL_MspInit+0x54>)
 8001524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001526:	4a11      	ldr	r2, [pc, #68]	; (800156c <HAL_MspInit+0x54>)
 8001528:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800152c:	6453      	str	r3, [r2, #68]	; 0x44
 800152e:	4b0f      	ldr	r3, [pc, #60]	; (800156c <HAL_MspInit+0x54>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001532:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	603b      	str	r3, [r7, #0]
 800153e:	4b0b      	ldr	r3, [pc, #44]	; (800156c <HAL_MspInit+0x54>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	4a0a      	ldr	r2, [pc, #40]	; (800156c <HAL_MspInit+0x54>)
 8001544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001548:	6413      	str	r3, [r2, #64]	; 0x40
 800154a:	4b08      	ldr	r3, [pc, #32]	; (800156c <HAL_MspInit+0x54>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001552:	603b      	str	r3, [r7, #0]
 8001554:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001556:	2200      	movs	r2, #0
 8001558:	210f      	movs	r1, #15
 800155a:	f06f 0001 	mvn.w	r0, #1
 800155e:	f000 ff01 	bl	8002364 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40023800 	.word	0x40023800

08001570 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08e      	sub	sp, #56	; 0x38
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001578:	2300      	movs	r3, #0
 800157a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800157c:	2300      	movs	r3, #0
 800157e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001580:	2300      	movs	r3, #0
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	4b33      	ldr	r3, [pc, #204]	; (8001654 <HAL_InitTick+0xe4>)
 8001586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001588:	4a32      	ldr	r2, [pc, #200]	; (8001654 <HAL_InitTick+0xe4>)
 800158a:	f043 0310 	orr.w	r3, r3, #16
 800158e:	6413      	str	r3, [r2, #64]	; 0x40
 8001590:	4b30      	ldr	r3, [pc, #192]	; (8001654 <HAL_InitTick+0xe4>)
 8001592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001594:	f003 0310 	and.w	r3, r3, #16
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800159c:	f107 0210 	add.w	r2, r7, #16
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	4611      	mov	r1, r2
 80015a6:	4618      	mov	r0, r3
 80015a8:	f002 fc40 	bl	8003e2c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80015ac:	6a3b      	ldr	r3, [r7, #32]
 80015ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80015b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d103      	bne.n	80015be <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015b6:	f002 fc11 	bl	8003ddc <HAL_RCC_GetPCLK1Freq>
 80015ba:	6378      	str	r0, [r7, #52]	; 0x34
 80015bc:	e004      	b.n	80015c8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80015be:	f002 fc0d 	bl	8003ddc <HAL_RCC_GetPCLK1Freq>
 80015c2:	4603      	mov	r3, r0
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015ca:	4a23      	ldr	r2, [pc, #140]	; (8001658 <HAL_InitTick+0xe8>)
 80015cc:	fba2 2303 	umull	r2, r3, r2, r3
 80015d0:	0c9b      	lsrs	r3, r3, #18
 80015d2:	3b01      	subs	r3, #1
 80015d4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80015d6:	4b21      	ldr	r3, [pc, #132]	; (800165c <HAL_InitTick+0xec>)
 80015d8:	4a21      	ldr	r2, [pc, #132]	; (8001660 <HAL_InitTick+0xf0>)
 80015da:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80015dc:	4b1f      	ldr	r3, [pc, #124]	; (800165c <HAL_InitTick+0xec>)
 80015de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015e2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80015e4:	4a1d      	ldr	r2, [pc, #116]	; (800165c <HAL_InitTick+0xec>)
 80015e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80015ea:	4b1c      	ldr	r3, [pc, #112]	; (800165c <HAL_InitTick+0xec>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f0:	4b1a      	ldr	r3, [pc, #104]	; (800165c <HAL_InitTick+0xec>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f6:	4b19      	ldr	r3, [pc, #100]	; (800165c <HAL_InitTick+0xec>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80015fc:	4817      	ldr	r0, [pc, #92]	; (800165c <HAL_InitTick+0xec>)
 80015fe:	f003 fd7b 	bl	80050f8 <HAL_TIM_Base_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001608:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800160c:	2b00      	cmp	r3, #0
 800160e:	d11b      	bne.n	8001648 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001610:	4812      	ldr	r0, [pc, #72]	; (800165c <HAL_InitTick+0xec>)
 8001612:	f003 fdcb 	bl	80051ac <HAL_TIM_Base_Start_IT>
 8001616:	4603      	mov	r3, r0
 8001618:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800161c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001620:	2b00      	cmp	r3, #0
 8001622:	d111      	bne.n	8001648 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001624:	2036      	movs	r0, #54	; 0x36
 8001626:	f000 feb9 	bl	800239c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b0f      	cmp	r3, #15
 800162e:	d808      	bhi.n	8001642 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001630:	2200      	movs	r2, #0
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	2036      	movs	r0, #54	; 0x36
 8001636:	f000 fe95 	bl	8002364 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800163a:	4a0a      	ldr	r2, [pc, #40]	; (8001664 <HAL_InitTick+0xf4>)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6013      	str	r3, [r2, #0]
 8001640:	e002      	b.n	8001648 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001648:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800164c:	4618      	mov	r0, r3
 800164e:	3738      	adds	r7, #56	; 0x38
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40023800 	.word	0x40023800
 8001658:	431bde83 	.word	0x431bde83
 800165c:	200001d0 	.word	0x200001d0
 8001660:	40001000 	.word	0x40001000
 8001664:	20000004 	.word	0x20000004

08001668 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800166c:	e7fe      	b.n	800166c <NMI_Handler+0x4>

0800166e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001672:	e7fe      	b.n	8001672 <HardFault_Handler+0x4>

08001674 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001678:	e7fe      	b.n	8001678 <MemManage_Handler+0x4>

0800167a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800167e:	e7fe      	b.n	800167e <BusFault_Handler+0x4>

08001680 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001684:	e7fe      	b.n	8001684 <UsageFault_Handler+0x4>

08001686 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8001698:	2002      	movs	r0, #2
 800169a:	f001 f8e5 	bl	8002868 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
	...

080016a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016a8:	4802      	ldr	r0, [pc, #8]	; (80016b4 <TIM2_IRQHandler+0x10>)
 80016aa:	f004 f87f 	bl	80057ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000264 	.word	0x20000264

080016b8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80016bc:	4802      	ldr	r0, [pc, #8]	; (80016c8 <USART3_IRQHandler+0x10>)
 80016be:	f005 f829 	bl	8006714 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200003cc 	.word	0x200003cc

080016cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016d0:	4802      	ldr	r0, [pc, #8]	; (80016dc <TIM6_DAC_IRQHandler+0x10>)
 80016d2:	f004 f86b 	bl	80057ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	200001d0 	.word	0x200001d0

080016e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016e8:	4a14      	ldr	r2, [pc, #80]	; (800173c <_sbrk+0x5c>)
 80016ea:	4b15      	ldr	r3, [pc, #84]	; (8001740 <_sbrk+0x60>)
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016f4:	4b13      	ldr	r3, [pc, #76]	; (8001744 <_sbrk+0x64>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d102      	bne.n	8001702 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016fc:	4b11      	ldr	r3, [pc, #68]	; (8001744 <_sbrk+0x64>)
 80016fe:	4a12      	ldr	r2, [pc, #72]	; (8001748 <_sbrk+0x68>)
 8001700:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001702:	4b10      	ldr	r3, [pc, #64]	; (8001744 <_sbrk+0x64>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4413      	add	r3, r2
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	429a      	cmp	r2, r3
 800170e:	d207      	bcs.n	8001720 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001710:	f00b ffee 	bl	800d6f0 <__errno>
 8001714:	4603      	mov	r3, r0
 8001716:	220c      	movs	r2, #12
 8001718:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800171a:	f04f 33ff 	mov.w	r3, #4294967295
 800171e:	e009      	b.n	8001734 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001720:	4b08      	ldr	r3, [pc, #32]	; (8001744 <_sbrk+0x64>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001726:	4b07      	ldr	r3, [pc, #28]	; (8001744 <_sbrk+0x64>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4413      	add	r3, r2
 800172e:	4a05      	ldr	r2, [pc, #20]	; (8001744 <_sbrk+0x64>)
 8001730:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001732:	68fb      	ldr	r3, [r7, #12]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3718      	adds	r7, #24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20020000 	.word	0x20020000
 8001740:	00000400 	.word	0x00000400
 8001744:	20000218 	.word	0x20000218
 8001748:	20005530 	.word	0x20005530

0800174c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001750:	4b06      	ldr	r3, [pc, #24]	; (800176c <SystemInit+0x20>)
 8001752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001756:	4a05      	ldr	r2, [pc, #20]	; (800176c <SystemInit+0x20>)
 8001758:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800175c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b092      	sub	sp, #72	; 0x48
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001776:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001780:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	611a      	str	r2, [r3, #16]
 8001790:	615a      	str	r2, [r3, #20]
 8001792:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001794:	1d3b      	adds	r3, r7, #4
 8001796:	2220      	movs	r2, #32
 8001798:	2100      	movs	r1, #0
 800179a:	4618      	mov	r0, r3
 800179c:	f00b ff38 	bl	800d610 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017a0:	4b38      	ldr	r3, [pc, #224]	; (8001884 <MX_TIM1_Init+0x114>)
 80017a2:	4a39      	ldr	r2, [pc, #228]	; (8001888 <MX_TIM1_Init+0x118>)
 80017a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180 - 1;
 80017a6:	4b37      	ldr	r3, [pc, #220]	; (8001884 <MX_TIM1_Init+0x114>)
 80017a8:	22b3      	movs	r2, #179	; 0xb3
 80017aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ac:	4b35      	ldr	r3, [pc, #212]	; (8001884 <MX_TIM1_Init+0x114>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 80017b2:	4b34      	ldr	r3, [pc, #208]	; (8001884 <MX_TIM1_Init+0x114>)
 80017b4:	2264      	movs	r2, #100	; 0x64
 80017b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b8:	4b32      	ldr	r3, [pc, #200]	; (8001884 <MX_TIM1_Init+0x114>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017be:	4b31      	ldr	r3, [pc, #196]	; (8001884 <MX_TIM1_Init+0x114>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c4:	4b2f      	ldr	r3, [pc, #188]	; (8001884 <MX_TIM1_Init+0x114>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017ca:	482e      	ldr	r0, [pc, #184]	; (8001884 <MX_TIM1_Init+0x114>)
 80017cc:	f003 fd5e 	bl	800528c <HAL_TIM_PWM_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80017d6:	f7ff fd8f 	bl	80012f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017da:	2300      	movs	r3, #0
 80017dc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017de:	2300      	movs	r3, #0
 80017e0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017e6:	4619      	mov	r1, r3
 80017e8:	4826      	ldr	r0, [pc, #152]	; (8001884 <MX_TIM1_Init+0x114>)
 80017ea:	f004 fe3b 	bl	8006464 <HAL_TIMEx_MasterConfigSynchronization>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80017f4:	f7ff fd80 	bl	80012f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017f8:	2360      	movs	r3, #96	; 0x60
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80017fc:	2300      	movs	r3, #0
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001800:	2300      	movs	r3, #0
 8001802:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001804:	2300      	movs	r3, #0
 8001806:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001808:	2300      	movs	r3, #0
 800180a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800180c:	2300      	movs	r3, #0
 800180e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001810:	2300      	movs	r3, #0
 8001812:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001814:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001818:	2200      	movs	r2, #0
 800181a:	4619      	mov	r1, r3
 800181c:	4819      	ldr	r0, [pc, #100]	; (8001884 <MX_TIM1_Init+0x114>)
 800181e:	f004 f951 	bl	8005ac4 <HAL_TIM_PWM_ConfigChannel>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8001828:	f7ff fd66 	bl	80012f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800182c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001830:	2204      	movs	r2, #4
 8001832:	4619      	mov	r1, r3
 8001834:	4813      	ldr	r0, [pc, #76]	; (8001884 <MX_TIM1_Init+0x114>)
 8001836:	f004 f945 	bl	8005ac4 <HAL_TIM_PWM_ConfigChannel>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8001840:	f7ff fd5a 	bl	80012f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001844:	2300      	movs	r3, #0
 8001846:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001848:	2300      	movs	r3, #0
 800184a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800184c:	2300      	movs	r3, #0
 800184e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001850:	2300      	movs	r3, #0
 8001852:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001858:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800185c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800185e:	2300      	movs	r3, #0
 8001860:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001862:	1d3b      	adds	r3, r7, #4
 8001864:	4619      	mov	r1, r3
 8001866:	4807      	ldr	r0, [pc, #28]	; (8001884 <MX_TIM1_Init+0x114>)
 8001868:	f004 fe78 	bl	800655c <HAL_TIMEx_ConfigBreakDeadTime>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8001872:	f7ff fd41 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001876:	4803      	ldr	r0, [pc, #12]	; (8001884 <MX_TIM1_Init+0x114>)
 8001878:	f000 fa8e 	bl	8001d98 <HAL_TIM_MspPostInit>

}
 800187c:	bf00      	nop
 800187e:	3748      	adds	r7, #72	; 0x48
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	2000021c 	.word	0x2000021c
 8001888:	40010000 	.word	0x40010000

0800188c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001892:	f107 0310 	add.w	r3, r7, #16
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800189c:	463b      	mov	r3, r7
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]
 80018a4:	609a      	str	r2, [r3, #8]
 80018a6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018a8:	4b31      	ldr	r3, [pc, #196]	; (8001970 <MX_TIM2_Init+0xe4>)
 80018aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90 - 1;
 80018b0:	4b2f      	ldr	r3, [pc, #188]	; (8001970 <MX_TIM2_Init+0xe4>)
 80018b2:	2259      	movs	r2, #89	; 0x59
 80018b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018b6:	4b2e      	ldr	r3, [pc, #184]	; (8001970 <MX_TIM2_Init+0xe4>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80018bc:	4b2c      	ldr	r3, [pc, #176]	; (8001970 <MX_TIM2_Init+0xe4>)
 80018be:	f04f 32ff 	mov.w	r2, #4294967295
 80018c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018c4:	4b2a      	ldr	r3, [pc, #168]	; (8001970 <MX_TIM2_Init+0xe4>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ca:	4b29      	ldr	r3, [pc, #164]	; (8001970 <MX_TIM2_Init+0xe4>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80018d0:	4827      	ldr	r0, [pc, #156]	; (8001970 <MX_TIM2_Init+0xe4>)
 80018d2:	f003 fdf3 	bl	80054bc <HAL_TIM_IC_Init>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80018dc:	f7ff fd0c 	bl	80012f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018e0:	2300      	movs	r3, #0
 80018e2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018e8:	f107 0310 	add.w	r3, r7, #16
 80018ec:	4619      	mov	r1, r3
 80018ee:	4820      	ldr	r0, [pc, #128]	; (8001970 <MX_TIM2_Init+0xe4>)
 80018f0:	f004 fdb8 	bl	8006464 <HAL_TIMEx_MasterConfigSynchronization>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80018fa:	f7ff fcfd 	bl	80012f8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80018fe:	230a      	movs	r3, #10
 8001900:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001902:	2301      	movs	r3, #1
 8001904:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001906:	2300      	movs	r3, #0
 8001908:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800190a:	2300      	movs	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800190e:	463b      	mov	r3, r7
 8001910:	2200      	movs	r2, #0
 8001912:	4619      	mov	r1, r3
 8001914:	4816      	ldr	r0, [pc, #88]	; (8001970 <MX_TIM2_Init+0xe4>)
 8001916:	f004 f839 	bl	800598c <HAL_TIM_IC_ConfigChannel>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001920:	f7ff fcea 	bl	80012f8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001924:	463b      	mov	r3, r7
 8001926:	2204      	movs	r2, #4
 8001928:	4619      	mov	r1, r3
 800192a:	4811      	ldr	r0, [pc, #68]	; (8001970 <MX_TIM2_Init+0xe4>)
 800192c:	f004 f82e 	bl	800598c <HAL_TIM_IC_ConfigChannel>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8001936:	f7ff fcdf 	bl	80012f8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800193a:	463b      	mov	r3, r7
 800193c:	2208      	movs	r2, #8
 800193e:	4619      	mov	r1, r3
 8001940:	480b      	ldr	r0, [pc, #44]	; (8001970 <MX_TIM2_Init+0xe4>)
 8001942:	f004 f823 	bl	800598c <HAL_TIM_IC_ConfigChannel>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_TIM2_Init+0xc4>
  {
    Error_Handler();
 800194c:	f7ff fcd4 	bl	80012f8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001950:	463b      	mov	r3, r7
 8001952:	220c      	movs	r2, #12
 8001954:	4619      	mov	r1, r3
 8001956:	4806      	ldr	r0, [pc, #24]	; (8001970 <MX_TIM2_Init+0xe4>)
 8001958:	f004 f818 	bl	800598c <HAL_TIM_IC_ConfigChannel>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001962:	f7ff fcc9 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001966:	bf00      	nop
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20000264 	.word	0x20000264

08001974 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08e      	sub	sp, #56	; 0x38
 8001978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800197a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001984:	f107 0314 	add.w	r3, r7, #20
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]
 8001992:	611a      	str	r2, [r3, #16]
 8001994:	615a      	str	r2, [r3, #20]
 8001996:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001998:	1d3b      	adds	r3, r7, #4
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	605a      	str	r2, [r3, #4]
 80019a0:	609a      	str	r2, [r3, #8]
 80019a2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019a4:	4b2f      	ldr	r3, [pc, #188]	; (8001a64 <MX_TIM3_Init+0xf0>)
 80019a6:	4a30      	ldr	r2, [pc, #192]	; (8001a68 <MX_TIM3_Init+0xf4>)
 80019a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 180 - 1;
 80019aa:	4b2e      	ldr	r3, [pc, #184]	; (8001a64 <MX_TIM3_Init+0xf0>)
 80019ac:	22b3      	movs	r2, #179	; 0xb3
 80019ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b0:	4b2c      	ldr	r3, [pc, #176]	; (8001a64 <MX_TIM3_Init+0xf0>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80019b6:	4b2b      	ldr	r3, [pc, #172]	; (8001a64 <MX_TIM3_Init+0xf0>)
 80019b8:	2264      	movs	r2, #100	; 0x64
 80019ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019bc:	4b29      	ldr	r3, [pc, #164]	; (8001a64 <MX_TIM3_Init+0xf0>)
 80019be:	2200      	movs	r2, #0
 80019c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c2:	4b28      	ldr	r3, [pc, #160]	; (8001a64 <MX_TIM3_Init+0xf0>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80019c8:	4826      	ldr	r0, [pc, #152]	; (8001a64 <MX_TIM3_Init+0xf0>)
 80019ca:	f003 fc5f 	bl	800528c <HAL_TIM_PWM_Init>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80019d4:	f7ff fc90 	bl	80012f8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80019d8:	4822      	ldr	r0, [pc, #136]	; (8001a64 <MX_TIM3_Init+0xf0>)
 80019da:	f003 fd6f 	bl	80054bc <HAL_TIM_IC_Init>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80019e4:	f7ff fc88 	bl	80012f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019e8:	2300      	movs	r3, #0
 80019ea:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ec:	2300      	movs	r3, #0
 80019ee:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019f4:	4619      	mov	r1, r3
 80019f6:	481b      	ldr	r0, [pc, #108]	; (8001a64 <MX_TIM3_Init+0xf0>)
 80019f8:	f004 fd34 	bl	8006464 <HAL_TIMEx_MasterConfigSynchronization>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001a02:	f7ff fc79 	bl	80012f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a06:	2360      	movs	r3, #96	; 0x60
 8001a08:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 0;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a12:	2300      	movs	r3, #0
 8001a14:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a16:	f107 0314 	add.w	r3, r7, #20
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4811      	ldr	r0, [pc, #68]	; (8001a64 <MX_TIM3_Init+0xf0>)
 8001a20:	f004 f850 	bl	8005ac4 <HAL_TIM_PWM_ConfigChannel>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8001a2a:	f7ff fc65 	bl	80012f8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001a32:	2301      	movs	r3, #1
 8001a34:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001a3e:	1d3b      	adds	r3, r7, #4
 8001a40:	2204      	movs	r2, #4
 8001a42:	4619      	mov	r1, r3
 8001a44:	4807      	ldr	r0, [pc, #28]	; (8001a64 <MX_TIM3_Init+0xf0>)
 8001a46:	f003 ffa1 	bl	800598c <HAL_TIM_IC_ConfigChannel>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8001a50:	f7ff fc52 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a54:	4803      	ldr	r0, [pc, #12]	; (8001a64 <MX_TIM3_Init+0xf0>)
 8001a56:	f000 f99f 	bl	8001d98 <HAL_TIM_MspPostInit>

}
 8001a5a:	bf00      	nop
 8001a5c:	3738      	adds	r7, #56	; 0x38
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	200002ac 	.word	0x200002ac
 8001a68:	40000400 	.word	0x40000400

08001a6c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08a      	sub	sp, #40	; 0x28
 8001a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a72:	f107 0320 	add.w	r3, r7, #32
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a7c:	1d3b      	adds	r3, r7, #4
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	605a      	str	r2, [r3, #4]
 8001a84:	609a      	str	r2, [r3, #8]
 8001a86:	60da      	str	r2, [r3, #12]
 8001a88:	611a      	str	r2, [r3, #16]
 8001a8a:	615a      	str	r2, [r3, #20]
 8001a8c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a8e:	4b21      	ldr	r3, [pc, #132]	; (8001b14 <MX_TIM4_Init+0xa8>)
 8001a90:	4a21      	ldr	r2, [pc, #132]	; (8001b18 <MX_TIM4_Init+0xac>)
 8001a92:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 180 - 1;
 8001a94:	4b1f      	ldr	r3, [pc, #124]	; (8001b14 <MX_TIM4_Init+0xa8>)
 8001a96:	22b3      	movs	r2, #179	; 0xb3
 8001a98:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a9a:	4b1e      	ldr	r3, [pc, #120]	; (8001b14 <MX_TIM4_Init+0xa8>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8001aa0:	4b1c      	ldr	r3, [pc, #112]	; (8001b14 <MX_TIM4_Init+0xa8>)
 8001aa2:	2264      	movs	r2, #100	; 0x64
 8001aa4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa6:	4b1b      	ldr	r3, [pc, #108]	; (8001b14 <MX_TIM4_Init+0xa8>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aac:	4b19      	ldr	r3, [pc, #100]	; (8001b14 <MX_TIM4_Init+0xa8>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001ab2:	4818      	ldr	r0, [pc, #96]	; (8001b14 <MX_TIM4_Init+0xa8>)
 8001ab4:	f003 fbea 	bl	800528c <HAL_TIM_PWM_Init>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8001abe:	f7ff fc1b 	bl	80012f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001aca:	f107 0320 	add.w	r3, r7, #32
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4810      	ldr	r0, [pc, #64]	; (8001b14 <MX_TIM4_Init+0xa8>)
 8001ad2:	f004 fcc7 	bl	8006464 <HAL_TIMEx_MasterConfigSynchronization>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8001adc:	f7ff fc0c 	bl	80012f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ae0:	2360      	movs	r3, #96	; 0x60
 8001ae2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001af0:	1d3b      	adds	r3, r7, #4
 8001af2:	2200      	movs	r2, #0
 8001af4:	4619      	mov	r1, r3
 8001af6:	4807      	ldr	r0, [pc, #28]	; (8001b14 <MX_TIM4_Init+0xa8>)
 8001af8:	f003 ffe4 	bl	8005ac4 <HAL_TIM_PWM_ConfigChannel>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001b02:	f7ff fbf9 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001b06:	4803      	ldr	r0, [pc, #12]	; (8001b14 <MX_TIM4_Init+0xa8>)
 8001b08:	f000 f946 	bl	8001d98 <HAL_TIM_MspPostInit>

}
 8001b0c:	bf00      	nop
 8001b0e:	3728      	adds	r7, #40	; 0x28
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	200002f4 	.word	0x200002f4
 8001b18:	40000800 	.word	0x40000800

08001b1c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b088      	sub	sp, #32
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b22:	1d3b      	adds	r3, r7, #4
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	605a      	str	r2, [r3, #4]
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	60da      	str	r2, [r3, #12]
 8001b2e:	611a      	str	r2, [r3, #16]
 8001b30:	615a      	str	r2, [r3, #20]
 8001b32:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001b34:	4b1a      	ldr	r3, [pc, #104]	; (8001ba0 <MX_TIM12_Init+0x84>)
 8001b36:	4a1b      	ldr	r2, [pc, #108]	; (8001ba4 <MX_TIM12_Init+0x88>)
 8001b38:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 1800-1;
 8001b3a:	4b19      	ldr	r3, [pc, #100]	; (8001ba0 <MX_TIM12_Init+0x84>)
 8001b3c:	f240 7207 	movw	r2, #1799	; 0x707
 8001b40:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b42:	4b17      	ldr	r3, [pc, #92]	; (8001ba0 <MX_TIM12_Init+0x84>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000-1;
 8001b48:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <MX_TIM12_Init+0x84>)
 8001b4a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b4e:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b50:	4b13      	ldr	r3, [pc, #76]	; (8001ba0 <MX_TIM12_Init+0x84>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b56:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <MX_TIM12_Init+0x84>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001b5c:	4810      	ldr	r0, [pc, #64]	; (8001ba0 <MX_TIM12_Init+0x84>)
 8001b5e:	f003 fb95 	bl	800528c <HAL_TIM_PWM_Init>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_TIM12_Init+0x50>
  {
    Error_Handler();
 8001b68:	f7ff fbc6 	bl	80012f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b6c:	2360      	movs	r3, #96	; 0x60
 8001b6e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b74:	2300      	movs	r3, #0
 8001b76:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b7c:	1d3b      	adds	r3, r7, #4
 8001b7e:	2200      	movs	r2, #0
 8001b80:	4619      	mov	r1, r3
 8001b82:	4807      	ldr	r0, [pc, #28]	; (8001ba0 <MX_TIM12_Init+0x84>)
 8001b84:	f003 ff9e 	bl	8005ac4 <HAL_TIM_PWM_ConfigChannel>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_TIM12_Init+0x76>
  {
    Error_Handler();
 8001b8e:	f7ff fbb3 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001b92:	4803      	ldr	r0, [pc, #12]	; (8001ba0 <MX_TIM12_Init+0x84>)
 8001b94:	f000 f900 	bl	8001d98 <HAL_TIM_MspPostInit>

}
 8001b98:	bf00      	nop
 8001b9a:	3720      	adds	r7, #32
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	2000033c 	.word	0x2000033c
 8001ba4:	40001800 	.word	0x40001800

08001ba8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08c      	sub	sp, #48	; 0x30
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb0:	f107 031c 	add.w	r3, r7, #28
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	60da      	str	r2, [r3, #12]
 8001bbe:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM1)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a37      	ldr	r2, [pc, #220]	; (8001ca4 <HAL_TIM_PWM_MspInit+0xfc>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d10e      	bne.n	8001be8 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61bb      	str	r3, [r7, #24]
 8001bce:	4b36      	ldr	r3, [pc, #216]	; (8001ca8 <HAL_TIM_PWM_MspInit+0x100>)
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd2:	4a35      	ldr	r2, [pc, #212]	; (8001ca8 <HAL_TIM_PWM_MspInit+0x100>)
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bda:	4b33      	ldr	r3, [pc, #204]	; (8001ca8 <HAL_TIM_PWM_MspInit+0x100>)
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	61bb      	str	r3, [r7, #24]
 8001be4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8001be6:	e058      	b.n	8001c9a <HAL_TIM_PWM_MspInit+0xf2>
  else if(tim_pwmHandle->Instance==TIM3)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a2f      	ldr	r2, [pc, #188]	; (8001cac <HAL_TIM_PWM_MspInit+0x104>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d12c      	bne.n	8001c4c <HAL_TIM_PWM_MspInit+0xa4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	617b      	str	r3, [r7, #20]
 8001bf6:	4b2c      	ldr	r3, [pc, #176]	; (8001ca8 <HAL_TIM_PWM_MspInit+0x100>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	4a2b      	ldr	r2, [pc, #172]	; (8001ca8 <HAL_TIM_PWM_MspInit+0x100>)
 8001bfc:	f043 0302 	orr.w	r3, r3, #2
 8001c00:	6413      	str	r3, [r2, #64]	; 0x40
 8001c02:	4b29      	ldr	r3, [pc, #164]	; (8001ca8 <HAL_TIM_PWM_MspInit+0x100>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	617b      	str	r3, [r7, #20]
 8001c0c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	613b      	str	r3, [r7, #16]
 8001c12:	4b25      	ldr	r3, [pc, #148]	; (8001ca8 <HAL_TIM_PWM_MspInit+0x100>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	4a24      	ldr	r2, [pc, #144]	; (8001ca8 <HAL_TIM_PWM_MspInit+0x100>)
 8001c18:	f043 0302 	orr.w	r3, r3, #2
 8001c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1e:	4b22      	ldr	r3, [pc, #136]	; (8001ca8 <HAL_TIM_PWM_MspInit+0x100>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	613b      	str	r3, [r7, #16]
 8001c28:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c2a:	2320      	movs	r3, #32
 8001c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c36:	2300      	movs	r3, #0
 8001c38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c3e:	f107 031c 	add.w	r3, r7, #28
 8001c42:	4619      	mov	r1, r3
 8001c44:	481a      	ldr	r0, [pc, #104]	; (8001cb0 <HAL_TIM_PWM_MspInit+0x108>)
 8001c46:	f000 fc49 	bl	80024dc <HAL_GPIO_Init>
}
 8001c4a:	e026      	b.n	8001c9a <HAL_TIM_PWM_MspInit+0xf2>
  else if(tim_pwmHandle->Instance==TIM4)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a18      	ldr	r2, [pc, #96]	; (8001cb4 <HAL_TIM_PWM_MspInit+0x10c>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d10e      	bne.n	8001c74 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	4b13      	ldr	r3, [pc, #76]	; (8001ca8 <HAL_TIM_PWM_MspInit+0x100>)
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	4a12      	ldr	r2, [pc, #72]	; (8001ca8 <HAL_TIM_PWM_MspInit+0x100>)
 8001c60:	f043 0304 	orr.w	r3, r3, #4
 8001c64:	6413      	str	r3, [r2, #64]	; 0x40
 8001c66:	4b10      	ldr	r3, [pc, #64]	; (8001ca8 <HAL_TIM_PWM_MspInit+0x100>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	f003 0304 	and.w	r3, r3, #4
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]
}
 8001c72:	e012      	b.n	8001c9a <HAL_TIM_PWM_MspInit+0xf2>
  else if(tim_pwmHandle->Instance==TIM12)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a0f      	ldr	r2, [pc, #60]	; (8001cb8 <HAL_TIM_PWM_MspInit+0x110>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d10d      	bne.n	8001c9a <HAL_TIM_PWM_MspInit+0xf2>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60bb      	str	r3, [r7, #8]
 8001c82:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <HAL_TIM_PWM_MspInit+0x100>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	4a08      	ldr	r2, [pc, #32]	; (8001ca8 <HAL_TIM_PWM_MspInit+0x100>)
 8001c88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8e:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <HAL_TIM_PWM_MspInit+0x100>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c96:	60bb      	str	r3, [r7, #8]
 8001c98:	68bb      	ldr	r3, [r7, #8]
}
 8001c9a:	bf00      	nop
 8001c9c:	3730      	adds	r7, #48	; 0x30
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40010000 	.word	0x40010000
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	40000400 	.word	0x40000400
 8001cb0:	40020400 	.word	0x40020400
 8001cb4:	40000800 	.word	0x40000800
 8001cb8:	40001800 	.word	0x40001800

08001cbc <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08a      	sub	sp, #40	; 0x28
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc4:	f107 0314 	add.w	r3, r7, #20
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cdc:	d152      	bne.n	8001d84 <HAL_TIM_IC_MspInit+0xc8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	613b      	str	r3, [r7, #16]
 8001ce2:	4b2a      	ldr	r3, [pc, #168]	; (8001d8c <HAL_TIM_IC_MspInit+0xd0>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	4a29      	ldr	r2, [pc, #164]	; (8001d8c <HAL_TIM_IC_MspInit+0xd0>)
 8001ce8:	f043 0301 	orr.w	r3, r3, #1
 8001cec:	6413      	str	r3, [r2, #64]	; 0x40
 8001cee:	4b27      	ldr	r3, [pc, #156]	; (8001d8c <HAL_TIM_IC_MspInit+0xd0>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	613b      	str	r3, [r7, #16]
 8001cf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	4b23      	ldr	r3, [pc, #140]	; (8001d8c <HAL_TIM_IC_MspInit+0xd0>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	4a22      	ldr	r2, [pc, #136]	; (8001d8c <HAL_TIM_IC_MspInit+0xd0>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0a:	4b20      	ldr	r3, [pc, #128]	; (8001d8c <HAL_TIM_IC_MspInit+0xd0>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	4b1c      	ldr	r3, [pc, #112]	; (8001d8c <HAL_TIM_IC_MspInit+0xd0>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	4a1b      	ldr	r2, [pc, #108]	; (8001d8c <HAL_TIM_IC_MspInit+0xd0>)
 8001d20:	f043 0302 	orr.w	r3, r3, #2
 8001d24:	6313      	str	r3, [r2, #48]	; 0x30
 8001d26:	4b19      	ldr	r3, [pc, #100]	; (8001d8c <HAL_TIM_IC_MspInit+0xd0>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	60bb      	str	r3, [r7, #8]
 8001d30:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB2     ------> TIM2_CH4
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d32:	2303      	movs	r3, #3
 8001d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d36:	2302      	movs	r3, #2
 8001d38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d42:	2301      	movs	r3, #1
 8001d44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d46:	f107 0314 	add.w	r3, r7, #20
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4810      	ldr	r0, [pc, #64]	; (8001d90 <HAL_TIM_IC_MspInit+0xd4>)
 8001d4e:	f000 fbc5 	bl	80024dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 8001d52:	f240 4304 	movw	r3, #1028	; 0x404
 8001d56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d60:	2300      	movs	r3, #0
 8001d62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d64:	2301      	movs	r3, #1
 8001d66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d68:	f107 0314 	add.w	r3, r7, #20
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4809      	ldr	r0, [pc, #36]	; (8001d94 <HAL_TIM_IC_MspInit+0xd8>)
 8001d70:	f000 fbb4 	bl	80024dc <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001d74:	2200      	movs	r2, #0
 8001d76:	2105      	movs	r1, #5
 8001d78:	201c      	movs	r0, #28
 8001d7a:	f000 faf3 	bl	8002364 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d7e:	201c      	movs	r0, #28
 8001d80:	f000 fb0c 	bl	800239c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001d84:	bf00      	nop
 8001d86:	3728      	adds	r7, #40	; 0x28
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	40020000 	.word	0x40020000
 8001d94:	40020400 	.word	0x40020400

08001d98 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b08c      	sub	sp, #48	; 0x30
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da0:	f107 031c 	add.w	r3, r7, #28
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a49      	ldr	r2, [pc, #292]	; (8001edc <HAL_TIM_MspPostInit+0x144>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d11f      	bne.n	8001dfa <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61bb      	str	r3, [r7, #24]
 8001dbe:	4b48      	ldr	r3, [pc, #288]	; (8001ee0 <HAL_TIM_MspPostInit+0x148>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	4a47      	ldr	r2, [pc, #284]	; (8001ee0 <HAL_TIM_MspPostInit+0x148>)
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dca:	4b45      	ldr	r3, [pc, #276]	; (8001ee0 <HAL_TIM_MspPostInit+0x148>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	61bb      	str	r3, [r7, #24]
 8001dd4:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001dd6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de0:	2300      	movs	r3, #0
 8001de2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de4:	2300      	movs	r3, #0
 8001de6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001de8:	2301      	movs	r3, #1
 8001dea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dec:	f107 031c 	add.w	r3, r7, #28
 8001df0:	4619      	mov	r1, r3
 8001df2:	483c      	ldr	r0, [pc, #240]	; (8001ee4 <HAL_TIM_MspPostInit+0x14c>)
 8001df4:	f000 fb72 	bl	80024dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001df8:	e06b      	b.n	8001ed2 <HAL_TIM_MspPostInit+0x13a>
  else if(timHandle->Instance==TIM3)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a3a      	ldr	r2, [pc, #232]	; (8001ee8 <HAL_TIM_MspPostInit+0x150>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d11e      	bne.n	8001e42 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]
 8001e08:	4b35      	ldr	r3, [pc, #212]	; (8001ee0 <HAL_TIM_MspPostInit+0x148>)
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0c:	4a34      	ldr	r2, [pc, #208]	; (8001ee0 <HAL_TIM_MspPostInit+0x148>)
 8001e0e:	f043 0304 	orr.w	r3, r3, #4
 8001e12:	6313      	str	r3, [r2, #48]	; 0x30
 8001e14:	4b32      	ldr	r3, [pc, #200]	; (8001ee0 <HAL_TIM_MspPostInit+0x148>)
 8001e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e18:	f003 0304 	and.w	r3, r3, #4
 8001e1c:	617b      	str	r3, [r7, #20]
 8001e1e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e20:	2340      	movs	r3, #64	; 0x40
 8001e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e24:	2302      	movs	r3, #2
 8001e26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e30:	2302      	movs	r3, #2
 8001e32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e34:	f107 031c 	add.w	r3, r7, #28
 8001e38:	4619      	mov	r1, r3
 8001e3a:	482c      	ldr	r0, [pc, #176]	; (8001eec <HAL_TIM_MspPostInit+0x154>)
 8001e3c:	f000 fb4e 	bl	80024dc <HAL_GPIO_Init>
}
 8001e40:	e047      	b.n	8001ed2 <HAL_TIM_MspPostInit+0x13a>
  else if(timHandle->Instance==TIM4)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a2a      	ldr	r2, [pc, #168]	; (8001ef0 <HAL_TIM_MspPostInit+0x158>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d11e      	bne.n	8001e8a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	613b      	str	r3, [r7, #16]
 8001e50:	4b23      	ldr	r3, [pc, #140]	; (8001ee0 <HAL_TIM_MspPostInit+0x148>)
 8001e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e54:	4a22      	ldr	r2, [pc, #136]	; (8001ee0 <HAL_TIM_MspPostInit+0x148>)
 8001e56:	f043 0302 	orr.w	r3, r3, #2
 8001e5a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5c:	4b20      	ldr	r3, [pc, #128]	; (8001ee0 <HAL_TIM_MspPostInit+0x148>)
 8001e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	613b      	str	r3, [r7, #16]
 8001e66:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e68:	2340      	movs	r3, #64	; 0x40
 8001e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e70:	2300      	movs	r3, #0
 8001e72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e74:	2300      	movs	r3, #0
 8001e76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e7c:	f107 031c 	add.w	r3, r7, #28
 8001e80:	4619      	mov	r1, r3
 8001e82:	481c      	ldr	r0, [pc, #112]	; (8001ef4 <HAL_TIM_MspPostInit+0x15c>)
 8001e84:	f000 fb2a 	bl	80024dc <HAL_GPIO_Init>
}
 8001e88:	e023      	b.n	8001ed2 <HAL_TIM_MspPostInit+0x13a>
  else if(timHandle->Instance==TIM12)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a1a      	ldr	r2, [pc, #104]	; (8001ef8 <HAL_TIM_MspPostInit+0x160>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d11e      	bne.n	8001ed2 <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e94:	2300      	movs	r3, #0
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <HAL_TIM_MspPostInit+0x148>)
 8001e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9c:	4a10      	ldr	r2, [pc, #64]	; (8001ee0 <HAL_TIM_MspPostInit+0x148>)
 8001e9e:	f043 0302 	orr.w	r3, r3, #2
 8001ea2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea4:	4b0e      	ldr	r3, [pc, #56]	; (8001ee0 <HAL_TIM_MspPostInit+0x148>)
 8001ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	60fb      	str	r3, [r7, #12]
 8001eae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001eb0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001eb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001ec2:	2309      	movs	r3, #9
 8001ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec6:	f107 031c 	add.w	r3, r7, #28
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4809      	ldr	r0, [pc, #36]	; (8001ef4 <HAL_TIM_MspPostInit+0x15c>)
 8001ece:	f000 fb05 	bl	80024dc <HAL_GPIO_Init>
}
 8001ed2:	bf00      	nop
 8001ed4:	3730      	adds	r7, #48	; 0x30
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40010000 	.word	0x40010000
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	40020000 	.word	0x40020000
 8001ee8:	40000400 	.word	0x40000400
 8001eec:	40020800 	.word	0x40020800
 8001ef0:	40000800 	.word	0x40000800
 8001ef4:	40020400 	.word	0x40020400
 8001ef8:	40001800 	.word	0x40001800

08001efc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f00:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <MX_USART2_UART_Init+0x4c>)
 8001f02:	4a12      	ldr	r2, [pc, #72]	; (8001f4c <MX_USART2_UART_Init+0x50>)
 8001f04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f06:	4b10      	ldr	r3, [pc, #64]	; (8001f48 <MX_USART2_UART_Init+0x4c>)
 8001f08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f0e:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <MX_USART2_UART_Init+0x4c>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f14:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <MX_USART2_UART_Init+0x4c>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f1a:	4b0b      	ldr	r3, [pc, #44]	; (8001f48 <MX_USART2_UART_Init+0x4c>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f20:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <MX_USART2_UART_Init+0x4c>)
 8001f22:	220c      	movs	r2, #12
 8001f24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f26:	4b08      	ldr	r3, [pc, #32]	; (8001f48 <MX_USART2_UART_Init+0x4c>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f2c:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <MX_USART2_UART_Init+0x4c>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f32:	4805      	ldr	r0, [pc, #20]	; (8001f48 <MX_USART2_UART_Init+0x4c>)
 8001f34:	f004 fb78 	bl	8006628 <HAL_UART_Init>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f3e:	f7ff f9db 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20000384 	.word	0x20000384
 8001f4c:	40004400 	.word	0x40004400

08001f50 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f54:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <MX_USART3_UART_Init+0x4c>)
 8001f56:	4a12      	ldr	r2, [pc, #72]	; (8001fa0 <MX_USART3_UART_Init+0x50>)
 8001f58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001f5a:	4b10      	ldr	r3, [pc, #64]	; (8001f9c <MX_USART3_UART_Init+0x4c>)
 8001f5c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f62:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <MX_USART3_UART_Init+0x4c>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f68:	4b0c      	ldr	r3, [pc, #48]	; (8001f9c <MX_USART3_UART_Init+0x4c>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f6e:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <MX_USART3_UART_Init+0x4c>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f74:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <MX_USART3_UART_Init+0x4c>)
 8001f76:	220c      	movs	r2, #12
 8001f78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f7a:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <MX_USART3_UART_Init+0x4c>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f80:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <MX_USART3_UART_Init+0x4c>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f86:	4805      	ldr	r0, [pc, #20]	; (8001f9c <MX_USART3_UART_Init+0x4c>)
 8001f88:	f004 fb4e 	bl	8006628 <HAL_UART_Init>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001f92:	f7ff f9b1 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	200003cc 	.word	0x200003cc
 8001fa0:	40004800 	.word	0x40004800

08001fa4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08c      	sub	sp, #48	; 0x30
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fac:	f107 031c 	add.w	r3, r7, #28
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	60da      	str	r2, [r3, #12]
 8001fba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a36      	ldr	r2, [pc, #216]	; (800209c <HAL_UART_MspInit+0xf8>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d12c      	bne.n	8002020 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61bb      	str	r3, [r7, #24]
 8001fca:	4b35      	ldr	r3, [pc, #212]	; (80020a0 <HAL_UART_MspInit+0xfc>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	4a34      	ldr	r2, [pc, #208]	; (80020a0 <HAL_UART_MspInit+0xfc>)
 8001fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fd6:	4b32      	ldr	r3, [pc, #200]	; (80020a0 <HAL_UART_MspInit+0xfc>)
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fde:	61bb      	str	r3, [r7, #24]
 8001fe0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	617b      	str	r3, [r7, #20]
 8001fe6:	4b2e      	ldr	r3, [pc, #184]	; (80020a0 <HAL_UART_MspInit+0xfc>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	4a2d      	ldr	r2, [pc, #180]	; (80020a0 <HAL_UART_MspInit+0xfc>)
 8001fec:	f043 0301 	orr.w	r3, r3, #1
 8001ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff2:	4b2b      	ldr	r3, [pc, #172]	; (80020a0 <HAL_UART_MspInit+0xfc>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	617b      	str	r3, [r7, #20]
 8001ffc:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ffe:	230c      	movs	r3, #12
 8002000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002002:	2302      	movs	r3, #2
 8002004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800200a:	2303      	movs	r3, #3
 800200c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800200e:	2307      	movs	r3, #7
 8002010:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002012:	f107 031c 	add.w	r3, r7, #28
 8002016:	4619      	mov	r1, r3
 8002018:	4822      	ldr	r0, [pc, #136]	; (80020a4 <HAL_UART_MspInit+0x100>)
 800201a:	f000 fa5f 	bl	80024dc <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800201e:	e039      	b.n	8002094 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART3)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a20      	ldr	r2, [pc, #128]	; (80020a8 <HAL_UART_MspInit+0x104>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d134      	bne.n	8002094 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	613b      	str	r3, [r7, #16]
 800202e:	4b1c      	ldr	r3, [pc, #112]	; (80020a0 <HAL_UART_MspInit+0xfc>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	4a1b      	ldr	r2, [pc, #108]	; (80020a0 <HAL_UART_MspInit+0xfc>)
 8002034:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002038:	6413      	str	r3, [r2, #64]	; 0x40
 800203a:	4b19      	ldr	r3, [pc, #100]	; (80020a0 <HAL_UART_MspInit+0xfc>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002042:	613b      	str	r3, [r7, #16]
 8002044:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	4b15      	ldr	r3, [pc, #84]	; (80020a0 <HAL_UART_MspInit+0xfc>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	4a14      	ldr	r2, [pc, #80]	; (80020a0 <HAL_UART_MspInit+0xfc>)
 8002050:	f043 0304 	orr.w	r3, r3, #4
 8002054:	6313      	str	r3, [r2, #48]	; 0x30
 8002056:	4b12      	ldr	r3, [pc, #72]	; (80020a0 <HAL_UART_MspInit+0xfc>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	f003 0304 	and.w	r3, r3, #4
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002062:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002068:	2302      	movs	r3, #2
 800206a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	2300      	movs	r3, #0
 800206e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002070:	2303      	movs	r3, #3
 8002072:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002074:	2307      	movs	r3, #7
 8002076:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002078:	f107 031c 	add.w	r3, r7, #28
 800207c:	4619      	mov	r1, r3
 800207e:	480b      	ldr	r0, [pc, #44]	; (80020ac <HAL_UART_MspInit+0x108>)
 8002080:	f000 fa2c 	bl	80024dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002084:	2200      	movs	r2, #0
 8002086:	2105      	movs	r1, #5
 8002088:	2027      	movs	r0, #39	; 0x27
 800208a:	f000 f96b 	bl	8002364 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800208e:	2027      	movs	r0, #39	; 0x27
 8002090:	f000 f984 	bl	800239c <HAL_NVIC_EnableIRQ>
}
 8002094:	bf00      	nop
 8002096:	3730      	adds	r7, #48	; 0x30
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40004400 	.word	0x40004400
 80020a0:	40023800 	.word	0x40023800
 80020a4:	40020000 	.word	0x40020000
 80020a8:	40004800 	.word	0x40004800
 80020ac:	40020800 	.word	0x40020800

080020b0 <HAL_UART_RxCpltCallback>:
}

/* USER CODE BEGIN 1 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a04      	ldr	r2, [pc, #16]	; (80020d0 <HAL_UART_RxCpltCallback+0x20>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d101      	bne.n	80020c6 <HAL_UART_RxCpltCallback+0x16>
	{
		GPS_Callback();
 80020c2:	f007 ff6f 	bl	8009fa4 <GPS_Callback>
	}
}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40004800 	.word	0x40004800

080020d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80020d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800210c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80020d8:	f7ff fb38 	bl	800174c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020dc:	480c      	ldr	r0, [pc, #48]	; (8002110 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020de:	490d      	ldr	r1, [pc, #52]	; (8002114 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020e0:	4a0d      	ldr	r2, [pc, #52]	; (8002118 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020e4:	e002      	b.n	80020ec <LoopCopyDataInit>

080020e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ea:	3304      	adds	r3, #4

080020ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020f0:	d3f9      	bcc.n	80020e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020f2:	4a0a      	ldr	r2, [pc, #40]	; (800211c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020f4:	4c0a      	ldr	r4, [pc, #40]	; (8002120 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020f8:	e001      	b.n	80020fe <LoopFillZerobss>

080020fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020fc:	3204      	adds	r2, #4

080020fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002100:	d3fb      	bcc.n	80020fa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002102:	f00b fafb 	bl	800d6fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002106:	f7ff f851 	bl	80011ac <main>
  bx  lr    
 800210a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800210c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002110:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002114:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8002118:	0800f4c0 	.word	0x0800f4c0
  ldr r2, =_sbss
 800211c:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8002120:	20005530 	.word	0x20005530

08002124 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002124:	e7fe      	b.n	8002124 <ADC_IRQHandler>
	...

08002128 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800212c:	4b0e      	ldr	r3, [pc, #56]	; (8002168 <HAL_Init+0x40>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a0d      	ldr	r2, [pc, #52]	; (8002168 <HAL_Init+0x40>)
 8002132:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002136:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002138:	4b0b      	ldr	r3, [pc, #44]	; (8002168 <HAL_Init+0x40>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a0a      	ldr	r2, [pc, #40]	; (8002168 <HAL_Init+0x40>)
 800213e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002142:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002144:	4b08      	ldr	r3, [pc, #32]	; (8002168 <HAL_Init+0x40>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a07      	ldr	r2, [pc, #28]	; (8002168 <HAL_Init+0x40>)
 800214a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800214e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002150:	2003      	movs	r0, #3
 8002152:	f000 f8fc 	bl	800234e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002156:	200f      	movs	r0, #15
 8002158:	f7ff fa0a 	bl	8001570 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800215c:	f7ff f9dc 	bl	8001518 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40023c00 	.word	0x40023c00

0800216c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002170:	4b06      	ldr	r3, [pc, #24]	; (800218c <HAL_IncTick+0x20>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	461a      	mov	r2, r3
 8002176:	4b06      	ldr	r3, [pc, #24]	; (8002190 <HAL_IncTick+0x24>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4413      	add	r3, r2
 800217c:	4a04      	ldr	r2, [pc, #16]	; (8002190 <HAL_IncTick+0x24>)
 800217e:	6013      	str	r3, [r2, #0]
}
 8002180:	bf00      	nop
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	20000008 	.word	0x20000008
 8002190:	20000414 	.word	0x20000414

08002194 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  return uwTick;
 8002198:	4b03      	ldr	r3, [pc, #12]	; (80021a8 <HAL_GetTick+0x14>)
 800219a:	681b      	ldr	r3, [r3, #0]
}
 800219c:	4618      	mov	r0, r3
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	20000414 	.word	0x20000414

080021ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021b4:	f7ff ffee 	bl	8002194 <HAL_GetTick>
 80021b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021c4:	d005      	beq.n	80021d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021c6:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <HAL_Delay+0x44>)
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	461a      	mov	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	4413      	add	r3, r2
 80021d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021d2:	bf00      	nop
 80021d4:	f7ff ffde 	bl	8002194 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d8f7      	bhi.n	80021d4 <HAL_Delay+0x28>
  {
  }
}
 80021e4:	bf00      	nop
 80021e6:	bf00      	nop
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000008 	.word	0x20000008

080021f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002204:	4b0c      	ldr	r3, [pc, #48]	; (8002238 <__NVIC_SetPriorityGrouping+0x44>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002210:	4013      	ands	r3, r2
 8002212:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800221c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002224:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002226:	4a04      	ldr	r2, [pc, #16]	; (8002238 <__NVIC_SetPriorityGrouping+0x44>)
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	60d3      	str	r3, [r2, #12]
}
 800222c:	bf00      	nop
 800222e:	3714      	adds	r7, #20
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	e000ed00 	.word	0xe000ed00

0800223c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002240:	4b04      	ldr	r3, [pc, #16]	; (8002254 <__NVIC_GetPriorityGrouping+0x18>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	0a1b      	lsrs	r3, r3, #8
 8002246:	f003 0307 	and.w	r3, r3, #7
}
 800224a:	4618      	mov	r0, r3
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	e000ed00 	.word	0xe000ed00

08002258 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002266:	2b00      	cmp	r3, #0
 8002268:	db0b      	blt.n	8002282 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800226a:	79fb      	ldrb	r3, [r7, #7]
 800226c:	f003 021f 	and.w	r2, r3, #31
 8002270:	4907      	ldr	r1, [pc, #28]	; (8002290 <__NVIC_EnableIRQ+0x38>)
 8002272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002276:	095b      	lsrs	r3, r3, #5
 8002278:	2001      	movs	r0, #1
 800227a:	fa00 f202 	lsl.w	r2, r0, r2
 800227e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	e000e100 	.word	0xe000e100

08002294 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	6039      	str	r1, [r7, #0]
 800229e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	db0a      	blt.n	80022be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	b2da      	uxtb	r2, r3
 80022ac:	490c      	ldr	r1, [pc, #48]	; (80022e0 <__NVIC_SetPriority+0x4c>)
 80022ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b2:	0112      	lsls	r2, r2, #4
 80022b4:	b2d2      	uxtb	r2, r2
 80022b6:	440b      	add	r3, r1
 80022b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022bc:	e00a      	b.n	80022d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	4908      	ldr	r1, [pc, #32]	; (80022e4 <__NVIC_SetPriority+0x50>)
 80022c4:	79fb      	ldrb	r3, [r7, #7]
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	3b04      	subs	r3, #4
 80022cc:	0112      	lsls	r2, r2, #4
 80022ce:	b2d2      	uxtb	r2, r2
 80022d0:	440b      	add	r3, r1
 80022d2:	761a      	strb	r2, [r3, #24]
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr
 80022e0:	e000e100 	.word	0xe000e100
 80022e4:	e000ed00 	.word	0xe000ed00

080022e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b089      	sub	sp, #36	; 0x24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	f1c3 0307 	rsb	r3, r3, #7
 8002302:	2b04      	cmp	r3, #4
 8002304:	bf28      	it	cs
 8002306:	2304      	movcs	r3, #4
 8002308:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	3304      	adds	r3, #4
 800230e:	2b06      	cmp	r3, #6
 8002310:	d902      	bls.n	8002318 <NVIC_EncodePriority+0x30>
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	3b03      	subs	r3, #3
 8002316:	e000      	b.n	800231a <NVIC_EncodePriority+0x32>
 8002318:	2300      	movs	r3, #0
 800231a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800231c:	f04f 32ff 	mov.w	r2, #4294967295
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	43da      	mvns	r2, r3
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	401a      	ands	r2, r3
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002330:	f04f 31ff 	mov.w	r1, #4294967295
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	fa01 f303 	lsl.w	r3, r1, r3
 800233a:	43d9      	mvns	r1, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002340:	4313      	orrs	r3, r2
         );
}
 8002342:	4618      	mov	r0, r3
 8002344:	3724      	adds	r7, #36	; 0x24
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b082      	sub	sp, #8
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7ff ff4c 	bl	80021f4 <__NVIC_SetPriorityGrouping>
}
 800235c:	bf00      	nop
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	4603      	mov	r3, r0
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
 8002370:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002372:	2300      	movs	r3, #0
 8002374:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002376:	f7ff ff61 	bl	800223c <__NVIC_GetPriorityGrouping>
 800237a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	68b9      	ldr	r1, [r7, #8]
 8002380:	6978      	ldr	r0, [r7, #20]
 8002382:	f7ff ffb1 	bl	80022e8 <NVIC_EncodePriority>
 8002386:	4602      	mov	r2, r0
 8002388:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800238c:	4611      	mov	r1, r2
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff ff80 	bl	8002294 <__NVIC_SetPriority>
}
 8002394:	bf00      	nop
 8002396:	3718      	adds	r7, #24
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff ff54 	bl	8002258 <__NVIC_EnableIRQ>
}
 80023b0:	bf00      	nop
 80023b2:	3708      	adds	r7, #8
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80023c6:	f7ff fee5 	bl	8002194 <HAL_GetTick>
 80023ca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d008      	beq.n	80023ea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2280      	movs	r2, #128	; 0x80
 80023dc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e052      	b.n	8002490 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 0216 	bic.w	r2, r2, #22
 80023f8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	695a      	ldr	r2, [r3, #20]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002408:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	2b00      	cmp	r3, #0
 8002410:	d103      	bne.n	800241a <HAL_DMA_Abort+0x62>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002416:	2b00      	cmp	r3, #0
 8002418:	d007      	beq.n	800242a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 0208 	bic.w	r2, r2, #8
 8002428:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 0201 	bic.w	r2, r2, #1
 8002438:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800243a:	e013      	b.n	8002464 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800243c:	f7ff feaa 	bl	8002194 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b05      	cmp	r3, #5
 8002448:	d90c      	bls.n	8002464 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2220      	movs	r2, #32
 800244e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2203      	movs	r2, #3
 8002454:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e015      	b.n	8002490 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1e4      	bne.n	800243c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002476:	223f      	movs	r2, #63	; 0x3f
 8002478:	409a      	lsls	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3710      	adds	r7, #16
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d004      	beq.n	80024b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2280      	movs	r2, #128	; 0x80
 80024b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e00c      	b.n	80024d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2205      	movs	r2, #5
 80024ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f022 0201 	bic.w	r2, r2, #1
 80024cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024dc:	b480      	push	{r7}
 80024de:	b089      	sub	sp, #36	; 0x24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024e6:	2300      	movs	r3, #0
 80024e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024ee:	2300      	movs	r3, #0
 80024f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024f2:	2300      	movs	r3, #0
 80024f4:	61fb      	str	r3, [r7, #28]
 80024f6:	e165      	b.n	80027c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024f8:	2201      	movs	r2, #1
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	4013      	ands	r3, r2
 800250a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	429a      	cmp	r2, r3
 8002512:	f040 8154 	bne.w	80027be <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	2b01      	cmp	r3, #1
 8002520:	d005      	beq.n	800252e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800252a:	2b02      	cmp	r3, #2
 800252c:	d130      	bne.n	8002590 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	2203      	movs	r2, #3
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	43db      	mvns	r3, r3
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	4013      	ands	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	68da      	ldr	r2, [r3, #12]
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4313      	orrs	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002564:	2201      	movs	r2, #1
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	43db      	mvns	r3, r3
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4013      	ands	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	091b      	lsrs	r3, r3, #4
 800257a:	f003 0201 	and.w	r2, r3, #1
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4313      	orrs	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f003 0303 	and.w	r3, r3, #3
 8002598:	2b03      	cmp	r3, #3
 800259a:	d017      	beq.n	80025cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	2203      	movs	r2, #3
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4013      	ands	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f003 0303 	and.w	r3, r3, #3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d123      	bne.n	8002620 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	08da      	lsrs	r2, r3, #3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3208      	adds	r2, #8
 80025e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	220f      	movs	r2, #15
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4013      	ands	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	691a      	ldr	r2, [r3, #16]
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4313      	orrs	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	08da      	lsrs	r2, r3, #3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	3208      	adds	r2, #8
 800261a:	69b9      	ldr	r1, [r7, #24]
 800261c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	2203      	movs	r2, #3
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	43db      	mvns	r3, r3
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	4013      	ands	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f003 0203 	and.w	r2, r3, #3
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4313      	orrs	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 80ae 	beq.w	80027be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	4b5d      	ldr	r3, [pc, #372]	; (80027dc <HAL_GPIO_Init+0x300>)
 8002668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266a:	4a5c      	ldr	r2, [pc, #368]	; (80027dc <HAL_GPIO_Init+0x300>)
 800266c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002670:	6453      	str	r3, [r2, #68]	; 0x44
 8002672:	4b5a      	ldr	r3, [pc, #360]	; (80027dc <HAL_GPIO_Init+0x300>)
 8002674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800267e:	4a58      	ldr	r2, [pc, #352]	; (80027e0 <HAL_GPIO_Init+0x304>)
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	089b      	lsrs	r3, r3, #2
 8002684:	3302      	adds	r3, #2
 8002686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800268a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	220f      	movs	r2, #15
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	43db      	mvns	r3, r3
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	4013      	ands	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a4f      	ldr	r2, [pc, #316]	; (80027e4 <HAL_GPIO_Init+0x308>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d025      	beq.n	80026f6 <HAL_GPIO_Init+0x21a>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a4e      	ldr	r2, [pc, #312]	; (80027e8 <HAL_GPIO_Init+0x30c>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d01f      	beq.n	80026f2 <HAL_GPIO_Init+0x216>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a4d      	ldr	r2, [pc, #308]	; (80027ec <HAL_GPIO_Init+0x310>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d019      	beq.n	80026ee <HAL_GPIO_Init+0x212>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a4c      	ldr	r2, [pc, #304]	; (80027f0 <HAL_GPIO_Init+0x314>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d013      	beq.n	80026ea <HAL_GPIO_Init+0x20e>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a4b      	ldr	r2, [pc, #300]	; (80027f4 <HAL_GPIO_Init+0x318>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d00d      	beq.n	80026e6 <HAL_GPIO_Init+0x20a>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a4a      	ldr	r2, [pc, #296]	; (80027f8 <HAL_GPIO_Init+0x31c>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d007      	beq.n	80026e2 <HAL_GPIO_Init+0x206>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a49      	ldr	r2, [pc, #292]	; (80027fc <HAL_GPIO_Init+0x320>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d101      	bne.n	80026de <HAL_GPIO_Init+0x202>
 80026da:	2306      	movs	r3, #6
 80026dc:	e00c      	b.n	80026f8 <HAL_GPIO_Init+0x21c>
 80026de:	2307      	movs	r3, #7
 80026e0:	e00a      	b.n	80026f8 <HAL_GPIO_Init+0x21c>
 80026e2:	2305      	movs	r3, #5
 80026e4:	e008      	b.n	80026f8 <HAL_GPIO_Init+0x21c>
 80026e6:	2304      	movs	r3, #4
 80026e8:	e006      	b.n	80026f8 <HAL_GPIO_Init+0x21c>
 80026ea:	2303      	movs	r3, #3
 80026ec:	e004      	b.n	80026f8 <HAL_GPIO_Init+0x21c>
 80026ee:	2302      	movs	r3, #2
 80026f0:	e002      	b.n	80026f8 <HAL_GPIO_Init+0x21c>
 80026f2:	2301      	movs	r3, #1
 80026f4:	e000      	b.n	80026f8 <HAL_GPIO_Init+0x21c>
 80026f6:	2300      	movs	r3, #0
 80026f8:	69fa      	ldr	r2, [r7, #28]
 80026fa:	f002 0203 	and.w	r2, r2, #3
 80026fe:	0092      	lsls	r2, r2, #2
 8002700:	4093      	lsls	r3, r2
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	4313      	orrs	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002708:	4935      	ldr	r1, [pc, #212]	; (80027e0 <HAL_GPIO_Init+0x304>)
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	089b      	lsrs	r3, r3, #2
 800270e:	3302      	adds	r3, #2
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002716:	4b3a      	ldr	r3, [pc, #232]	; (8002800 <HAL_GPIO_Init+0x324>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	43db      	mvns	r3, r3
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	4013      	ands	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d003      	beq.n	800273a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	4313      	orrs	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800273a:	4a31      	ldr	r2, [pc, #196]	; (8002800 <HAL_GPIO_Init+0x324>)
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002740:	4b2f      	ldr	r3, [pc, #188]	; (8002800 <HAL_GPIO_Init+0x324>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	43db      	mvns	r3, r3
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	4013      	ands	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d003      	beq.n	8002764 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	4313      	orrs	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002764:	4a26      	ldr	r2, [pc, #152]	; (8002800 <HAL_GPIO_Init+0x324>)
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800276a:	4b25      	ldr	r3, [pc, #148]	; (8002800 <HAL_GPIO_Init+0x324>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	43db      	mvns	r3, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4013      	ands	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	4313      	orrs	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800278e:	4a1c      	ldr	r2, [pc, #112]	; (8002800 <HAL_GPIO_Init+0x324>)
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002794:	4b1a      	ldr	r3, [pc, #104]	; (8002800 <HAL_GPIO_Init+0x324>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	43db      	mvns	r3, r3
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4013      	ands	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d003      	beq.n	80027b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027b8:	4a11      	ldr	r2, [pc, #68]	; (8002800 <HAL_GPIO_Init+0x324>)
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	3301      	adds	r3, #1
 80027c2:	61fb      	str	r3, [r7, #28]
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	2b0f      	cmp	r3, #15
 80027c8:	f67f ae96 	bls.w	80024f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027cc:	bf00      	nop
 80027ce:	bf00      	nop
 80027d0:	3724      	adds	r7, #36	; 0x24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	40023800 	.word	0x40023800
 80027e0:	40013800 	.word	0x40013800
 80027e4:	40020000 	.word	0x40020000
 80027e8:	40020400 	.word	0x40020400
 80027ec:	40020800 	.word	0x40020800
 80027f0:	40020c00 	.word	0x40020c00
 80027f4:	40021000 	.word	0x40021000
 80027f8:	40021400 	.word	0x40021400
 80027fc:	40021800 	.word	0x40021800
 8002800:	40013c00 	.word	0x40013c00

08002804 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	460b      	mov	r3, r1
 800280e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	691a      	ldr	r2, [r3, #16]
 8002814:	887b      	ldrh	r3, [r7, #2]
 8002816:	4013      	ands	r3, r2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d002      	beq.n	8002822 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800281c:	2301      	movs	r3, #1
 800281e:	73fb      	strb	r3, [r7, #15]
 8002820:	e001      	b.n	8002826 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002822:	2300      	movs	r3, #0
 8002824:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002826:	7bfb      	ldrb	r3, [r7, #15]
}
 8002828:	4618      	mov	r0, r3
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	460b      	mov	r3, r1
 800283e:	807b      	strh	r3, [r7, #2]
 8002840:	4613      	mov	r3, r2
 8002842:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002844:	787b      	ldrb	r3, [r7, #1]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800284a:	887a      	ldrh	r2, [r7, #2]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002850:	e003      	b.n	800285a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002852:	887b      	ldrh	r3, [r7, #2]
 8002854:	041a      	lsls	r2, r3, #16
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	619a      	str	r2, [r3, #24]
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
	...

08002868 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	4603      	mov	r3, r0
 8002870:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002872:	4b08      	ldr	r3, [pc, #32]	; (8002894 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002874:	695a      	ldr	r2, [r3, #20]
 8002876:	88fb      	ldrh	r3, [r7, #6]
 8002878:	4013      	ands	r3, r2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d006      	beq.n	800288c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800287e:	4a05      	ldr	r2, [pc, #20]	; (8002894 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002880:	88fb      	ldrh	r3, [r7, #6]
 8002882:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002884:	88fb      	ldrh	r3, [r7, #6]
 8002886:	4618      	mov	r0, r3
 8002888:	f7fe fc0c 	bl	80010a4 <HAL_GPIO_EXTI_Callback>
  }
}
 800288c:	bf00      	nop
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	40013c00 	.word	0x40013c00

08002898 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e12b      	b.n	8002b02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d106      	bne.n	80028c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7fe fc2c 	bl	800111c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2224      	movs	r2, #36	; 0x24
 80028c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 0201 	bic.w	r2, r2, #1
 80028da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028fc:	f001 fa6e 	bl	8003ddc <HAL_RCC_GetPCLK1Freq>
 8002900:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	4a81      	ldr	r2, [pc, #516]	; (8002b0c <HAL_I2C_Init+0x274>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d807      	bhi.n	800291c <HAL_I2C_Init+0x84>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	4a80      	ldr	r2, [pc, #512]	; (8002b10 <HAL_I2C_Init+0x278>)
 8002910:	4293      	cmp	r3, r2
 8002912:	bf94      	ite	ls
 8002914:	2301      	movls	r3, #1
 8002916:	2300      	movhi	r3, #0
 8002918:	b2db      	uxtb	r3, r3
 800291a:	e006      	b.n	800292a <HAL_I2C_Init+0x92>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4a7d      	ldr	r2, [pc, #500]	; (8002b14 <HAL_I2C_Init+0x27c>)
 8002920:	4293      	cmp	r3, r2
 8002922:	bf94      	ite	ls
 8002924:	2301      	movls	r3, #1
 8002926:	2300      	movhi	r3, #0
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e0e7      	b.n	8002b02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	4a78      	ldr	r2, [pc, #480]	; (8002b18 <HAL_I2C_Init+0x280>)
 8002936:	fba2 2303 	umull	r2, r3, r2, r3
 800293a:	0c9b      	lsrs	r3, r3, #18
 800293c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68ba      	ldr	r2, [r7, #8]
 800294e:	430a      	orrs	r2, r1
 8002950:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	4a6a      	ldr	r2, [pc, #424]	; (8002b0c <HAL_I2C_Init+0x274>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d802      	bhi.n	800296c <HAL_I2C_Init+0xd4>
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	3301      	adds	r3, #1
 800296a:	e009      	b.n	8002980 <HAL_I2C_Init+0xe8>
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002972:	fb02 f303 	mul.w	r3, r2, r3
 8002976:	4a69      	ldr	r2, [pc, #420]	; (8002b1c <HAL_I2C_Init+0x284>)
 8002978:	fba2 2303 	umull	r2, r3, r2, r3
 800297c:	099b      	lsrs	r3, r3, #6
 800297e:	3301      	adds	r3, #1
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	6812      	ldr	r2, [r2, #0]
 8002984:	430b      	orrs	r3, r1
 8002986:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002992:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	495c      	ldr	r1, [pc, #368]	; (8002b0c <HAL_I2C_Init+0x274>)
 800299c:	428b      	cmp	r3, r1
 800299e:	d819      	bhi.n	80029d4 <HAL_I2C_Init+0x13c>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	1e59      	subs	r1, r3, #1
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80029ae:	1c59      	adds	r1, r3, #1
 80029b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80029b4:	400b      	ands	r3, r1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00a      	beq.n	80029d0 <HAL_I2C_Init+0x138>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	1e59      	subs	r1, r3, #1
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80029c8:	3301      	adds	r3, #1
 80029ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ce:	e051      	b.n	8002a74 <HAL_I2C_Init+0x1dc>
 80029d0:	2304      	movs	r3, #4
 80029d2:	e04f      	b.n	8002a74 <HAL_I2C_Init+0x1dc>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d111      	bne.n	8002a00 <HAL_I2C_Init+0x168>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	1e58      	subs	r0, r3, #1
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6859      	ldr	r1, [r3, #4]
 80029e4:	460b      	mov	r3, r1
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	440b      	add	r3, r1
 80029ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80029ee:	3301      	adds	r3, #1
 80029f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	bf0c      	ite	eq
 80029f8:	2301      	moveq	r3, #1
 80029fa:	2300      	movne	r3, #0
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	e012      	b.n	8002a26 <HAL_I2C_Init+0x18e>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	1e58      	subs	r0, r3, #1
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6859      	ldr	r1, [r3, #4]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	0099      	lsls	r1, r3, #2
 8002a10:	440b      	add	r3, r1
 8002a12:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a16:	3301      	adds	r3, #1
 8002a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	bf0c      	ite	eq
 8002a20:	2301      	moveq	r3, #1
 8002a22:	2300      	movne	r3, #0
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <HAL_I2C_Init+0x196>
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e022      	b.n	8002a74 <HAL_I2C_Init+0x1dc>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10e      	bne.n	8002a54 <HAL_I2C_Init+0x1bc>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	1e58      	subs	r0, r3, #1
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6859      	ldr	r1, [r3, #4]
 8002a3e:	460b      	mov	r3, r1
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	440b      	add	r3, r1
 8002a44:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a48:	3301      	adds	r3, #1
 8002a4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a52:	e00f      	b.n	8002a74 <HAL_I2C_Init+0x1dc>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	1e58      	subs	r0, r3, #1
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6859      	ldr	r1, [r3, #4]
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	440b      	add	r3, r1
 8002a62:	0099      	lsls	r1, r3, #2
 8002a64:	440b      	add	r3, r1
 8002a66:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a74:	6879      	ldr	r1, [r7, #4]
 8002a76:	6809      	ldr	r1, [r1, #0]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	69da      	ldr	r2, [r3, #28]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	430a      	orrs	r2, r1
 8002a96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002aa2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	6911      	ldr	r1, [r2, #16]
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	68d2      	ldr	r2, [r2, #12]
 8002aae:	4311      	orrs	r1, r2
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	6812      	ldr	r2, [r2, #0]
 8002ab4:	430b      	orrs	r3, r1
 8002ab6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	695a      	ldr	r2, [r3, #20]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	431a      	orrs	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f042 0201 	orr.w	r2, r2, #1
 8002ae2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2220      	movs	r2, #32
 8002aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	000186a0 	.word	0x000186a0
 8002b10:	001e847f 	.word	0x001e847f
 8002b14:	003d08ff 	.word	0x003d08ff
 8002b18:	431bde83 	.word	0x431bde83
 8002b1c:	10624dd3 	.word	0x10624dd3

08002b20 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b088      	sub	sp, #32
 8002b24:	af02      	add	r7, sp, #8
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	4608      	mov	r0, r1
 8002b2a:	4611      	mov	r1, r2
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	4603      	mov	r3, r0
 8002b30:	817b      	strh	r3, [r7, #10]
 8002b32:	460b      	mov	r3, r1
 8002b34:	813b      	strh	r3, [r7, #8]
 8002b36:	4613      	mov	r3, r2
 8002b38:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b3a:	f7ff fb2b 	bl	8002194 <HAL_GetTick>
 8002b3e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b20      	cmp	r3, #32
 8002b4a:	f040 80d9 	bne.w	8002d00 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	9300      	str	r3, [sp, #0]
 8002b52:	2319      	movs	r3, #25
 8002b54:	2201      	movs	r2, #1
 8002b56:	496d      	ldr	r1, [pc, #436]	; (8002d0c <HAL_I2C_Mem_Write+0x1ec>)
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	f000 fdc7 	bl	80036ec <I2C_WaitOnFlagUntilTimeout>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002b64:	2302      	movs	r3, #2
 8002b66:	e0cc      	b.n	8002d02 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d101      	bne.n	8002b76 <HAL_I2C_Mem_Write+0x56>
 8002b72:	2302      	movs	r3, #2
 8002b74:	e0c5      	b.n	8002d02 <HAL_I2C_Mem_Write+0x1e2>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d007      	beq.n	8002b9c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f042 0201 	orr.w	r2, r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002baa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2221      	movs	r2, #33	; 0x21
 8002bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2240      	movs	r2, #64	; 0x40
 8002bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6a3a      	ldr	r2, [r7, #32]
 8002bc6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002bcc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	4a4d      	ldr	r2, [pc, #308]	; (8002d10 <HAL_I2C_Mem_Write+0x1f0>)
 8002bdc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002bde:	88f8      	ldrh	r0, [r7, #6]
 8002be0:	893a      	ldrh	r2, [r7, #8]
 8002be2:	8979      	ldrh	r1, [r7, #10]
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	9301      	str	r3, [sp, #4]
 8002be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bea:	9300      	str	r3, [sp, #0]
 8002bec:	4603      	mov	r3, r0
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f000 fbfe 	bl	80033f0 <I2C_RequestMemoryWrite>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d052      	beq.n	8002ca0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e081      	b.n	8002d02 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f000 fe8c 	bl	8003920 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00d      	beq.n	8002c2a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	2b04      	cmp	r3, #4
 8002c14:	d107      	bne.n	8002c26 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e06b      	b.n	8002d02 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2e:	781a      	ldrb	r2, [r3, #0]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3a:	1c5a      	adds	r2, r3, #1
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c44:	3b01      	subs	r3, #1
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	3b01      	subs	r3, #1
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	f003 0304 	and.w	r3, r3, #4
 8002c64:	2b04      	cmp	r3, #4
 8002c66:	d11b      	bne.n	8002ca0 <HAL_I2C_Mem_Write+0x180>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d017      	beq.n	8002ca0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c74:	781a      	ldrb	r2, [r3, #0]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	1c5a      	adds	r2, r3, #1
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1aa      	bne.n	8002bfe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f000 fe7f 	bl	80039b0 <I2C_WaitOnBTFFlagUntilTimeout>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00d      	beq.n	8002cd4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbc:	2b04      	cmp	r3, #4
 8002cbe:	d107      	bne.n	8002cd0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e016      	b.n	8002d02 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ce2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	e000      	b.n	8002d02 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002d00:	2302      	movs	r3, #2
  }
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3718      	adds	r7, #24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	00100002 	.word	0x00100002
 8002d10:	ffff0000 	.word	0xffff0000

08002d14 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b08c      	sub	sp, #48	; 0x30
 8002d18:	af02      	add	r7, sp, #8
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	4608      	mov	r0, r1
 8002d1e:	4611      	mov	r1, r2
 8002d20:	461a      	mov	r2, r3
 8002d22:	4603      	mov	r3, r0
 8002d24:	817b      	strh	r3, [r7, #10]
 8002d26:	460b      	mov	r3, r1
 8002d28:	813b      	strh	r3, [r7, #8]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d2e:	f7ff fa31 	bl	8002194 <HAL_GetTick>
 8002d32:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2b20      	cmp	r3, #32
 8002d3e:	f040 8214 	bne.w	800316a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	2319      	movs	r3, #25
 8002d48:	2201      	movs	r2, #1
 8002d4a:	497b      	ldr	r1, [pc, #492]	; (8002f38 <HAL_I2C_Mem_Read+0x224>)
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f000 fccd 	bl	80036ec <I2C_WaitOnFlagUntilTimeout>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002d58:	2302      	movs	r3, #2
 8002d5a:	e207      	b.n	800316c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d101      	bne.n	8002d6a <HAL_I2C_Mem_Read+0x56>
 8002d66:	2302      	movs	r3, #2
 8002d68:	e200      	b.n	800316c <HAL_I2C_Mem_Read+0x458>
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d007      	beq.n	8002d90 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f042 0201 	orr.w	r2, r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d9e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2222      	movs	r2, #34	; 0x22
 8002da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2240      	movs	r2, #64	; 0x40
 8002dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002dc0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	4a5b      	ldr	r2, [pc, #364]	; (8002f3c <HAL_I2C_Mem_Read+0x228>)
 8002dd0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002dd2:	88f8      	ldrh	r0, [r7, #6]
 8002dd4:	893a      	ldrh	r2, [r7, #8]
 8002dd6:	8979      	ldrh	r1, [r7, #10]
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dda:	9301      	str	r3, [sp, #4]
 8002ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dde:	9300      	str	r3, [sp, #0]
 8002de0:	4603      	mov	r3, r0
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f000 fb9a 	bl	800351c <I2C_RequestMemoryRead>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e1bc      	b.n	800316c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d113      	bne.n	8002e22 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	623b      	str	r3, [r7, #32]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	695b      	ldr	r3, [r3, #20]
 8002e04:	623b      	str	r3, [r7, #32]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	623b      	str	r3, [r7, #32]
 8002e0e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	e190      	b.n	8003144 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d11b      	bne.n	8002e62 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	61fb      	str	r3, [r7, #28]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	61fb      	str	r3, [r7, #28]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	61fb      	str	r3, [r7, #28]
 8002e4e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	e170      	b.n	8003144 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d11b      	bne.n	8002ea2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e78:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61bb      	str	r3, [r7, #24]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	61bb      	str	r3, [r7, #24]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	61bb      	str	r3, [r7, #24]
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	e150      	b.n	8003144 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	617b      	str	r3, [r7, #20]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	617b      	str	r3, [r7, #20]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	617b      	str	r3, [r7, #20]
 8002eb6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002eb8:	e144      	b.n	8003144 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ebe:	2b03      	cmp	r3, #3
 8002ec0:	f200 80f1 	bhi.w	80030a6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d123      	bne.n	8002f14 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ece:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f000 fdb5 	bl	8003a40 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e145      	b.n	800316c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	691a      	ldr	r2, [r3, #16]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eea:	b2d2      	uxtb	r2, r2
 8002eec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef2:	1c5a      	adds	r2, r3, #1
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002efc:	3b01      	subs	r3, #1
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f12:	e117      	b.n	8003144 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d14e      	bne.n	8002fba <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1e:	9300      	str	r3, [sp, #0]
 8002f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f22:	2200      	movs	r2, #0
 8002f24:	4906      	ldr	r1, [pc, #24]	; (8002f40 <HAL_I2C_Mem_Read+0x22c>)
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f000 fbe0 	bl	80036ec <I2C_WaitOnFlagUntilTimeout>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d008      	beq.n	8002f44 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e11a      	b.n	800316c <HAL_I2C_Mem_Read+0x458>
 8002f36:	bf00      	nop
 8002f38:	00100002 	.word	0x00100002
 8002f3c:	ffff0000 	.word	0xffff0000
 8002f40:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	691a      	ldr	r2, [r3, #16]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5e:	b2d2      	uxtb	r2, r2
 8002f60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f66:	1c5a      	adds	r2, r3, #1
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f70:	3b01      	subs	r3, #1
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	691a      	ldr	r2, [r3, #16]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f90:	b2d2      	uxtb	r2, r2
 8002f92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f98:	1c5a      	adds	r2, r3, #1
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fb8:	e0c4      	b.n	8003144 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbc:	9300      	str	r3, [sp, #0]
 8002fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	496c      	ldr	r1, [pc, #432]	; (8003174 <HAL_I2C_Mem_Read+0x460>)
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f000 fb91 	bl	80036ec <I2C_WaitOnFlagUntilTimeout>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e0cb      	b.n	800316c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fe2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	691a      	ldr	r2, [r3, #16]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff6:	1c5a      	adds	r2, r3, #1
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003000:	3b01      	subs	r3, #1
 8003002:	b29a      	uxth	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800300c:	b29b      	uxth	r3, r3
 800300e:	3b01      	subs	r3, #1
 8003010:	b29a      	uxth	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003018:	9300      	str	r3, [sp, #0]
 800301a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800301c:	2200      	movs	r2, #0
 800301e:	4955      	ldr	r1, [pc, #340]	; (8003174 <HAL_I2C_Mem_Read+0x460>)
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f000 fb63 	bl	80036ec <I2C_WaitOnFlagUntilTimeout>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e09d      	b.n	800316c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800303e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	691a      	ldr	r2, [r3, #16]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003052:	1c5a      	adds	r2, r3, #1
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800305c:	3b01      	subs	r3, #1
 800305e:	b29a      	uxth	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003068:	b29b      	uxth	r3, r3
 800306a:	3b01      	subs	r3, #1
 800306c:	b29a      	uxth	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	691a      	ldr	r2, [r3, #16]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307c:	b2d2      	uxtb	r2, r2
 800307e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003084:	1c5a      	adds	r2, r3, #1
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800308e:	3b01      	subs	r3, #1
 8003090:	b29a      	uxth	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800309a:	b29b      	uxth	r3, r3
 800309c:	3b01      	subs	r3, #1
 800309e:	b29a      	uxth	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030a4:	e04e      	b.n	8003144 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f000 fcc8 	bl	8003a40 <I2C_WaitOnRXNEFlagUntilTimeout>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e058      	b.n	800316c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	691a      	ldr	r2, [r3, #16]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c4:	b2d2      	uxtb	r2, r2
 80030c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030cc:	1c5a      	adds	r2, r3, #1
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d6:	3b01      	subs	r3, #1
 80030d8:	b29a      	uxth	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	3b01      	subs	r3, #1
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	f003 0304 	and.w	r3, r3, #4
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	d124      	bne.n	8003144 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030fe:	2b03      	cmp	r3, #3
 8003100:	d107      	bne.n	8003112 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003110:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	691a      	ldr	r2, [r3, #16]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311c:	b2d2      	uxtb	r2, r2
 800311e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003124:	1c5a      	adds	r2, r3, #1
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800312e:	3b01      	subs	r3, #1
 8003130:	b29a      	uxth	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800313a:	b29b      	uxth	r3, r3
 800313c:	3b01      	subs	r3, #1
 800313e:	b29a      	uxth	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003148:	2b00      	cmp	r3, #0
 800314a:	f47f aeb6 	bne.w	8002eba <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2220      	movs	r2, #32
 8003152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003166:	2300      	movs	r3, #0
 8003168:	e000      	b.n	800316c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800316a:	2302      	movs	r3, #2
  }
}
 800316c:	4618      	mov	r0, r3
 800316e:	3728      	adds	r7, #40	; 0x28
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	00010004 	.word	0x00010004

08003178 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b08a      	sub	sp, #40	; 0x28
 800317c:	af02      	add	r7, sp, #8
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	607a      	str	r2, [r7, #4]
 8003182:	603b      	str	r3, [r7, #0]
 8003184:	460b      	mov	r3, r1
 8003186:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003188:	f7ff f804 	bl	8002194 <HAL_GetTick>
 800318c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800318e:	2300      	movs	r3, #0
 8003190:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b20      	cmp	r3, #32
 800319c:	f040 8111 	bne.w	80033c2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	2319      	movs	r3, #25
 80031a6:	2201      	movs	r2, #1
 80031a8:	4988      	ldr	r1, [pc, #544]	; (80033cc <HAL_I2C_IsDeviceReady+0x254>)
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f000 fa9e 	bl	80036ec <I2C_WaitOnFlagUntilTimeout>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80031b6:	2302      	movs	r3, #2
 80031b8:	e104      	b.n	80033c4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d101      	bne.n	80031c8 <HAL_I2C_IsDeviceReady+0x50>
 80031c4:	2302      	movs	r3, #2
 80031c6:	e0fd      	b.n	80033c4 <HAL_I2C_IsDeviceReady+0x24c>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d007      	beq.n	80031ee <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f042 0201 	orr.w	r2, r2, #1
 80031ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2224      	movs	r2, #36	; 0x24
 8003202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	4a70      	ldr	r2, [pc, #448]	; (80033d0 <HAL_I2C_IsDeviceReady+0x258>)
 8003210:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003220:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	2200      	movs	r2, #0
 800322a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f000 fa5c 	bl	80036ec <I2C_WaitOnFlagUntilTimeout>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00d      	beq.n	8003256 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003244:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003248:	d103      	bne.n	8003252 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003250:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e0b6      	b.n	80033c4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003256:	897b      	ldrh	r3, [r7, #10]
 8003258:	b2db      	uxtb	r3, r3
 800325a:	461a      	mov	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003264:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003266:	f7fe ff95 	bl	8002194 <HAL_GetTick>
 800326a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b02      	cmp	r3, #2
 8003278:	bf0c      	ite	eq
 800327a:	2301      	moveq	r3, #1
 800327c:	2300      	movne	r3, #0
 800327e:	b2db      	uxtb	r3, r3
 8003280:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	695b      	ldr	r3, [r3, #20]
 8003288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800328c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003290:	bf0c      	ite	eq
 8003292:	2301      	moveq	r3, #1
 8003294:	2300      	movne	r3, #0
 8003296:	b2db      	uxtb	r3, r3
 8003298:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800329a:	e025      	b.n	80032e8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800329c:	f7fe ff7a 	bl	8002194 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	683a      	ldr	r2, [r7, #0]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d302      	bcc.n	80032b2 <HAL_I2C_IsDeviceReady+0x13a>
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d103      	bne.n	80032ba <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	22a0      	movs	r2, #160	; 0xa0
 80032b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	bf0c      	ite	eq
 80032c8:	2301      	moveq	r3, #1
 80032ca:	2300      	movne	r3, #0
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032de:	bf0c      	ite	eq
 80032e0:	2301      	moveq	r3, #1
 80032e2:	2300      	movne	r3, #0
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	2ba0      	cmp	r3, #160	; 0xa0
 80032f2:	d005      	beq.n	8003300 <HAL_I2C_IsDeviceReady+0x188>
 80032f4:	7dfb      	ldrb	r3, [r7, #23]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d102      	bne.n	8003300 <HAL_I2C_IsDeviceReady+0x188>
 80032fa:	7dbb      	ldrb	r3, [r7, #22]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0cd      	beq.n	800329c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2220      	movs	r2, #32
 8003304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b02      	cmp	r3, #2
 8003314:	d129      	bne.n	800336a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003324:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003326:	2300      	movs	r3, #0
 8003328:	613b      	str	r3, [r7, #16]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	695b      	ldr	r3, [r3, #20]
 8003330:	613b      	str	r3, [r7, #16]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	613b      	str	r3, [r7, #16]
 800333a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	2319      	movs	r3, #25
 8003342:	2201      	movs	r2, #1
 8003344:	4921      	ldr	r1, [pc, #132]	; (80033cc <HAL_I2C_IsDeviceReady+0x254>)
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f000 f9d0 	bl	80036ec <I2C_WaitOnFlagUntilTimeout>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e036      	b.n	80033c4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2220      	movs	r2, #32
 800335a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003366:	2300      	movs	r3, #0
 8003368:	e02c      	b.n	80033c4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003378:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003382:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	2319      	movs	r3, #25
 800338a:	2201      	movs	r2, #1
 800338c:	490f      	ldr	r1, [pc, #60]	; (80033cc <HAL_I2C_IsDeviceReady+0x254>)
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f000 f9ac 	bl	80036ec <I2C_WaitOnFlagUntilTimeout>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e012      	b.n	80033c4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	3301      	adds	r3, #1
 80033a2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	f4ff af32 	bcc.w	8003212 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2220      	movs	r2, #32
 80033b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e000      	b.n	80033c4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80033c2:	2302      	movs	r3, #2
  }
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3720      	adds	r7, #32
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	00100002 	.word	0x00100002
 80033d0:	ffff0000 	.word	0xffff0000

080033d4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e2:	b2db      	uxtb	r3, r3
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b088      	sub	sp, #32
 80033f4:	af02      	add	r7, sp, #8
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	4608      	mov	r0, r1
 80033fa:	4611      	mov	r1, r2
 80033fc:	461a      	mov	r2, r3
 80033fe:	4603      	mov	r3, r0
 8003400:	817b      	strh	r3, [r7, #10]
 8003402:	460b      	mov	r3, r1
 8003404:	813b      	strh	r3, [r7, #8]
 8003406:	4613      	mov	r3, r2
 8003408:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003418:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341c:	9300      	str	r3, [sp, #0]
 800341e:	6a3b      	ldr	r3, [r7, #32]
 8003420:	2200      	movs	r2, #0
 8003422:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	f000 f960 	bl	80036ec <I2C_WaitOnFlagUntilTimeout>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00d      	beq.n	800344e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003440:	d103      	bne.n	800344a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003448:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e05f      	b.n	800350e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800344e:	897b      	ldrh	r3, [r7, #10]
 8003450:	b2db      	uxtb	r3, r3
 8003452:	461a      	mov	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800345c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	6a3a      	ldr	r2, [r7, #32]
 8003462:	492d      	ldr	r1, [pc, #180]	; (8003518 <I2C_RequestMemoryWrite+0x128>)
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f000 f9bb 	bl	80037e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d001      	beq.n	8003474 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e04c      	b.n	800350e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003474:	2300      	movs	r3, #0
 8003476:	617b      	str	r3, [r7, #20]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	617b      	str	r3, [r7, #20]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	617b      	str	r3, [r7, #20]
 8003488:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800348a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800348c:	6a39      	ldr	r1, [r7, #32]
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	f000 fa46 	bl	8003920 <I2C_WaitOnTXEFlagUntilTimeout>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00d      	beq.n	80034b6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	2b04      	cmp	r3, #4
 80034a0:	d107      	bne.n	80034b2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e02b      	b.n	800350e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034b6:	88fb      	ldrh	r3, [r7, #6]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d105      	bne.n	80034c8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034bc:	893b      	ldrh	r3, [r7, #8]
 80034be:	b2da      	uxtb	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	611a      	str	r2, [r3, #16]
 80034c6:	e021      	b.n	800350c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80034c8:	893b      	ldrh	r3, [r7, #8]
 80034ca:	0a1b      	lsrs	r3, r3, #8
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	b2da      	uxtb	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034d8:	6a39      	ldr	r1, [r7, #32]
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f000 fa20 	bl	8003920 <I2C_WaitOnTXEFlagUntilTimeout>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00d      	beq.n	8003502 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	2b04      	cmp	r3, #4
 80034ec:	d107      	bne.n	80034fe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e005      	b.n	800350e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003502:	893b      	ldrh	r3, [r7, #8]
 8003504:	b2da      	uxtb	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3718      	adds	r7, #24
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	00010002 	.word	0x00010002

0800351c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b088      	sub	sp, #32
 8003520:	af02      	add	r7, sp, #8
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	4608      	mov	r0, r1
 8003526:	4611      	mov	r1, r2
 8003528:	461a      	mov	r2, r3
 800352a:	4603      	mov	r3, r0
 800352c:	817b      	strh	r3, [r7, #10]
 800352e:	460b      	mov	r3, r1
 8003530:	813b      	strh	r3, [r7, #8]
 8003532:	4613      	mov	r3, r2
 8003534:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003544:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003554:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003558:	9300      	str	r3, [sp, #0]
 800355a:	6a3b      	ldr	r3, [r7, #32]
 800355c:	2200      	movs	r2, #0
 800355e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f000 f8c2 	bl	80036ec <I2C_WaitOnFlagUntilTimeout>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00d      	beq.n	800358a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003578:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800357c:	d103      	bne.n	8003586 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003584:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e0aa      	b.n	80036e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800358a:	897b      	ldrh	r3, [r7, #10]
 800358c:	b2db      	uxtb	r3, r3
 800358e:	461a      	mov	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003598:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800359a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359c:	6a3a      	ldr	r2, [r7, #32]
 800359e:	4952      	ldr	r1, [pc, #328]	; (80036e8 <I2C_RequestMemoryRead+0x1cc>)
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f000 f91d 	bl	80037e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e097      	b.n	80036e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035b0:	2300      	movs	r3, #0
 80035b2:	617b      	str	r3, [r7, #20]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	617b      	str	r3, [r7, #20]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	617b      	str	r3, [r7, #20]
 80035c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c8:	6a39      	ldr	r1, [r7, #32]
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f000 f9a8 	bl	8003920 <I2C_WaitOnTXEFlagUntilTimeout>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00d      	beq.n	80035f2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	2b04      	cmp	r3, #4
 80035dc:	d107      	bne.n	80035ee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e076      	b.n	80036e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035f2:	88fb      	ldrh	r3, [r7, #6]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d105      	bne.n	8003604 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035f8:	893b      	ldrh	r3, [r7, #8]
 80035fa:	b2da      	uxtb	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	611a      	str	r2, [r3, #16]
 8003602:	e021      	b.n	8003648 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003604:	893b      	ldrh	r3, [r7, #8]
 8003606:	0a1b      	lsrs	r3, r3, #8
 8003608:	b29b      	uxth	r3, r3
 800360a:	b2da      	uxtb	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003614:	6a39      	ldr	r1, [r7, #32]
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f000 f982 	bl	8003920 <I2C_WaitOnTXEFlagUntilTimeout>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00d      	beq.n	800363e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	2b04      	cmp	r3, #4
 8003628:	d107      	bne.n	800363a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003638:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e050      	b.n	80036e0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800363e:	893b      	ldrh	r3, [r7, #8]
 8003640:	b2da      	uxtb	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800364a:	6a39      	ldr	r1, [r7, #32]
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	f000 f967 	bl	8003920 <I2C_WaitOnTXEFlagUntilTimeout>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00d      	beq.n	8003674 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365c:	2b04      	cmp	r3, #4
 800365e:	d107      	bne.n	8003670 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800366e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e035      	b.n	80036e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003682:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003686:	9300      	str	r3, [sp, #0]
 8003688:	6a3b      	ldr	r3, [r7, #32]
 800368a:	2200      	movs	r2, #0
 800368c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f000 f82b 	bl	80036ec <I2C_WaitOnFlagUntilTimeout>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00d      	beq.n	80036b8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036aa:	d103      	bne.n	80036b4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e013      	b.n	80036e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80036b8:	897b      	ldrh	r3, [r7, #10]
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	f043 0301 	orr.w	r3, r3, #1
 80036c0:	b2da      	uxtb	r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ca:	6a3a      	ldr	r2, [r7, #32]
 80036cc:	4906      	ldr	r1, [pc, #24]	; (80036e8 <I2C_RequestMemoryRead+0x1cc>)
 80036ce:	68f8      	ldr	r0, [r7, #12]
 80036d0:	f000 f886 	bl	80037e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e000      	b.n	80036e0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3718      	adds	r7, #24
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	00010002 	.word	0x00010002

080036ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	603b      	str	r3, [r7, #0]
 80036f8:	4613      	mov	r3, r2
 80036fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036fc:	e048      	b.n	8003790 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003704:	d044      	beq.n	8003790 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003706:	f7fe fd45 	bl	8002194 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	429a      	cmp	r2, r3
 8003714:	d302      	bcc.n	800371c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d139      	bne.n	8003790 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	0c1b      	lsrs	r3, r3, #16
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b01      	cmp	r3, #1
 8003724:	d10d      	bne.n	8003742 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	43da      	mvns	r2, r3
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	4013      	ands	r3, r2
 8003732:	b29b      	uxth	r3, r3
 8003734:	2b00      	cmp	r3, #0
 8003736:	bf0c      	ite	eq
 8003738:	2301      	moveq	r3, #1
 800373a:	2300      	movne	r3, #0
 800373c:	b2db      	uxtb	r3, r3
 800373e:	461a      	mov	r2, r3
 8003740:	e00c      	b.n	800375c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	43da      	mvns	r2, r3
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	4013      	ands	r3, r2
 800374e:	b29b      	uxth	r3, r3
 8003750:	2b00      	cmp	r3, #0
 8003752:	bf0c      	ite	eq
 8003754:	2301      	moveq	r3, #1
 8003756:	2300      	movne	r3, #0
 8003758:	b2db      	uxtb	r3, r3
 800375a:	461a      	mov	r2, r3
 800375c:	79fb      	ldrb	r3, [r7, #7]
 800375e:	429a      	cmp	r2, r3
 8003760:	d116      	bne.n	8003790 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2220      	movs	r2, #32
 800376c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377c:	f043 0220 	orr.w	r2, r3, #32
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e023      	b.n	80037d8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	0c1b      	lsrs	r3, r3, #16
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b01      	cmp	r3, #1
 8003798:	d10d      	bne.n	80037b6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	43da      	mvns	r2, r3
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	4013      	ands	r3, r2
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	bf0c      	ite	eq
 80037ac:	2301      	moveq	r3, #1
 80037ae:	2300      	movne	r3, #0
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	461a      	mov	r2, r3
 80037b4:	e00c      	b.n	80037d0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	43da      	mvns	r2, r3
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	4013      	ands	r3, r2
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	bf0c      	ite	eq
 80037c8:	2301      	moveq	r3, #1
 80037ca:	2300      	movne	r3, #0
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	461a      	mov	r2, r3
 80037d0:	79fb      	ldrb	r3, [r7, #7]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d093      	beq.n	80036fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
 80037ec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037ee:	e071      	b.n	80038d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037fe:	d123      	bne.n	8003848 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800380e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003818:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2220      	movs	r2, #32
 8003824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003834:	f043 0204 	orr.w	r2, r3, #4
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e067      	b.n	8003918 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800384e:	d041      	beq.n	80038d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003850:	f7fe fca0 	bl	8002194 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	429a      	cmp	r2, r3
 800385e:	d302      	bcc.n	8003866 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d136      	bne.n	80038d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	0c1b      	lsrs	r3, r3, #16
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b01      	cmp	r3, #1
 800386e:	d10c      	bne.n	800388a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	43da      	mvns	r2, r3
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	4013      	ands	r3, r2
 800387c:	b29b      	uxth	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	bf14      	ite	ne
 8003882:	2301      	movne	r3, #1
 8003884:	2300      	moveq	r3, #0
 8003886:	b2db      	uxtb	r3, r3
 8003888:	e00b      	b.n	80038a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	43da      	mvns	r2, r3
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	4013      	ands	r3, r2
 8003896:	b29b      	uxth	r3, r3
 8003898:	2b00      	cmp	r3, #0
 800389a:	bf14      	ite	ne
 800389c:	2301      	movne	r3, #1
 800389e:	2300      	moveq	r3, #0
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d016      	beq.n	80038d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2220      	movs	r2, #32
 80038b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c0:	f043 0220 	orr.w	r2, r3, #32
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e021      	b.n	8003918 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	0c1b      	lsrs	r3, r3, #16
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d10c      	bne.n	80038f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	695b      	ldr	r3, [r3, #20]
 80038e4:	43da      	mvns	r2, r3
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	4013      	ands	r3, r2
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	bf14      	ite	ne
 80038f0:	2301      	movne	r3, #1
 80038f2:	2300      	moveq	r3, #0
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	e00b      	b.n	8003910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	43da      	mvns	r2, r3
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	4013      	ands	r3, r2
 8003904:	b29b      	uxth	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	bf14      	ite	ne
 800390a:	2301      	movne	r3, #1
 800390c:	2300      	moveq	r3, #0
 800390e:	b2db      	uxtb	r3, r3
 8003910:	2b00      	cmp	r3, #0
 8003912:	f47f af6d 	bne.w	80037f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003916:	2300      	movs	r3, #0
}
 8003918:	4618      	mov	r0, r3
 800391a:	3710      	adds	r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800392c:	e034      	b.n	8003998 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f000 f8e3 	bl	8003afa <I2C_IsAcknowledgeFailed>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e034      	b.n	80039a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003944:	d028      	beq.n	8003998 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003946:	f7fe fc25 	bl	8002194 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	68ba      	ldr	r2, [r7, #8]
 8003952:	429a      	cmp	r2, r3
 8003954:	d302      	bcc.n	800395c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d11d      	bne.n	8003998 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003966:	2b80      	cmp	r3, #128	; 0x80
 8003968:	d016      	beq.n	8003998 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2220      	movs	r2, #32
 8003974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003984:	f043 0220 	orr.w	r2, r3, #32
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e007      	b.n	80039a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a2:	2b80      	cmp	r3, #128	; 0x80
 80039a4:	d1c3      	bne.n	800392e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039bc:	e034      	b.n	8003a28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f000 f89b 	bl	8003afa <I2C_IsAcknowledgeFailed>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e034      	b.n	8003a38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d4:	d028      	beq.n	8003a28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039d6:	f7fe fbdd 	bl	8002194 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	68ba      	ldr	r2, [r7, #8]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d302      	bcc.n	80039ec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d11d      	bne.n	8003a28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	f003 0304 	and.w	r3, r3, #4
 80039f6:	2b04      	cmp	r3, #4
 80039f8:	d016      	beq.n	8003a28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2220      	movs	r2, #32
 8003a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a14:	f043 0220 	orr.w	r2, r3, #32
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e007      	b.n	8003a38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	f003 0304 	and.w	r3, r3, #4
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	d1c3      	bne.n	80039be <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a4c:	e049      	b.n	8003ae2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	695b      	ldr	r3, [r3, #20]
 8003a54:	f003 0310 	and.w	r3, r3, #16
 8003a58:	2b10      	cmp	r3, #16
 8003a5a:	d119      	bne.n	8003a90 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f06f 0210 	mvn.w	r2, #16
 8003a64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2220      	movs	r2, #32
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e030      	b.n	8003af2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a90:	f7fe fb80 	bl	8002194 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	68ba      	ldr	r2, [r7, #8]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d302      	bcc.n	8003aa6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d11d      	bne.n	8003ae2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab0:	2b40      	cmp	r3, #64	; 0x40
 8003ab2:	d016      	beq.n	8003ae2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2220      	movs	r2, #32
 8003abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ace:	f043 0220 	orr.w	r2, r3, #32
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e007      	b.n	8003af2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aec:	2b40      	cmp	r3, #64	; 0x40
 8003aee:	d1ae      	bne.n	8003a4e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b083      	sub	sp, #12
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b10:	d11b      	bne.n	8003b4a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b1a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2220      	movs	r2, #32
 8003b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	f043 0204 	orr.w	r2, r3, #4
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e000      	b.n	8003b4c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003b62:	2300      	movs	r3, #0
 8003b64:	603b      	str	r3, [r7, #0]
 8003b66:	4b20      	ldr	r3, [pc, #128]	; (8003be8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6a:	4a1f      	ldr	r2, [pc, #124]	; (8003be8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b70:	6413      	str	r3, [r2, #64]	; 0x40
 8003b72:	4b1d      	ldr	r3, [pc, #116]	; (8003be8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b7a:	603b      	str	r3, [r7, #0]
 8003b7c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003b7e:	4b1b      	ldr	r3, [pc, #108]	; (8003bec <HAL_PWREx_EnableOverDrive+0x94>)
 8003b80:	2201      	movs	r2, #1
 8003b82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b84:	f7fe fb06 	bl	8002194 <HAL_GetTick>
 8003b88:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b8a:	e009      	b.n	8003ba0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b8c:	f7fe fb02 	bl	8002194 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b9a:	d901      	bls.n	8003ba0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e01f      	b.n	8003be0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ba0:	4b13      	ldr	r3, [pc, #76]	; (8003bf0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bac:	d1ee      	bne.n	8003b8c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003bae:	4b11      	ldr	r3, [pc, #68]	; (8003bf4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bb4:	f7fe faee 	bl	8002194 <HAL_GetTick>
 8003bb8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003bba:	e009      	b.n	8003bd0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003bbc:	f7fe faea 	bl	8002194 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bca:	d901      	bls.n	8003bd0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e007      	b.n	8003be0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003bd0:	4b07      	ldr	r3, [pc, #28]	; (8003bf0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bdc:	d1ee      	bne.n	8003bbc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3708      	adds	r7, #8
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	40023800 	.word	0x40023800
 8003bec:	420e0040 	.word	0x420e0040
 8003bf0:	40007000 	.word	0x40007000
 8003bf4:	420e0044 	.word	0x420e0044

08003bf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d101      	bne.n	8003c0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e0cc      	b.n	8003da6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c0c:	4b68      	ldr	r3, [pc, #416]	; (8003db0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 030f 	and.w	r3, r3, #15
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d90c      	bls.n	8003c34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c1a:	4b65      	ldr	r3, [pc, #404]	; (8003db0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c1c:	683a      	ldr	r2, [r7, #0]
 8003c1e:	b2d2      	uxtb	r2, r2
 8003c20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c22:	4b63      	ldr	r3, [pc, #396]	; (8003db0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 030f 	and.w	r3, r3, #15
 8003c2a:	683a      	ldr	r2, [r7, #0]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d001      	beq.n	8003c34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e0b8      	b.n	8003da6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d020      	beq.n	8003c82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0304 	and.w	r3, r3, #4
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d005      	beq.n	8003c58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c4c:	4b59      	ldr	r3, [pc, #356]	; (8003db4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	4a58      	ldr	r2, [pc, #352]	; (8003db4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0308 	and.w	r3, r3, #8
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d005      	beq.n	8003c70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c64:	4b53      	ldr	r3, [pc, #332]	; (8003db4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	4a52      	ldr	r2, [pc, #328]	; (8003db4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c70:	4b50      	ldr	r3, [pc, #320]	; (8003db4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	494d      	ldr	r1, [pc, #308]	; (8003db4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d044      	beq.n	8003d18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d107      	bne.n	8003ca6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c96:	4b47      	ldr	r3, [pc, #284]	; (8003db4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d119      	bne.n	8003cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e07f      	b.n	8003da6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d003      	beq.n	8003cb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cb2:	2b03      	cmp	r3, #3
 8003cb4:	d107      	bne.n	8003cc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cb6:	4b3f      	ldr	r3, [pc, #252]	; (8003db4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d109      	bne.n	8003cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e06f      	b.n	8003da6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cc6:	4b3b      	ldr	r3, [pc, #236]	; (8003db4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e067      	b.n	8003da6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cd6:	4b37      	ldr	r3, [pc, #220]	; (8003db4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f023 0203 	bic.w	r2, r3, #3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	4934      	ldr	r1, [pc, #208]	; (8003db4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ce8:	f7fe fa54 	bl	8002194 <HAL_GetTick>
 8003cec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cee:	e00a      	b.n	8003d06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cf0:	f7fe fa50 	bl	8002194 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e04f      	b.n	8003da6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d06:	4b2b      	ldr	r3, [pc, #172]	; (8003db4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f003 020c 	and.w	r2, r3, #12
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d1eb      	bne.n	8003cf0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d18:	4b25      	ldr	r3, [pc, #148]	; (8003db0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 030f 	and.w	r3, r3, #15
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d20c      	bcs.n	8003d40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d26:	4b22      	ldr	r3, [pc, #136]	; (8003db0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d28:	683a      	ldr	r2, [r7, #0]
 8003d2a:	b2d2      	uxtb	r2, r2
 8003d2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d2e:	4b20      	ldr	r3, [pc, #128]	; (8003db0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 030f 	and.w	r3, r3, #15
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d001      	beq.n	8003d40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e032      	b.n	8003da6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0304 	and.w	r3, r3, #4
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d008      	beq.n	8003d5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d4c:	4b19      	ldr	r3, [pc, #100]	; (8003db4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	4916      	ldr	r1, [pc, #88]	; (8003db4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0308 	and.w	r3, r3, #8
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d009      	beq.n	8003d7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d6a:	4b12      	ldr	r3, [pc, #72]	; (8003db4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	490e      	ldr	r1, [pc, #56]	; (8003db4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d7e:	f000 f887 	bl	8003e90 <HAL_RCC_GetSysClockFreq>
 8003d82:	4602      	mov	r2, r0
 8003d84:	4b0b      	ldr	r3, [pc, #44]	; (8003db4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	091b      	lsrs	r3, r3, #4
 8003d8a:	f003 030f 	and.w	r3, r3, #15
 8003d8e:	490a      	ldr	r1, [pc, #40]	; (8003db8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d90:	5ccb      	ldrb	r3, [r1, r3]
 8003d92:	fa22 f303 	lsr.w	r3, r2, r3
 8003d96:	4a09      	ldr	r2, [pc, #36]	; (8003dbc <HAL_RCC_ClockConfig+0x1c4>)
 8003d98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d9a:	4b09      	ldr	r3, [pc, #36]	; (8003dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7fd fbe6 	bl	8001570 <HAL_InitTick>

  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	40023c00 	.word	0x40023c00
 8003db4:	40023800 	.word	0x40023800
 8003db8:	0800f3a0 	.word	0x0800f3a0
 8003dbc:	20000000 	.word	0x20000000
 8003dc0:	20000004 	.word	0x20000004

08003dc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dc8:	4b03      	ldr	r3, [pc, #12]	; (8003dd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dca:	681b      	ldr	r3, [r3, #0]
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	20000000 	.word	0x20000000

08003ddc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003de0:	f7ff fff0 	bl	8003dc4 <HAL_RCC_GetHCLKFreq>
 8003de4:	4602      	mov	r2, r0
 8003de6:	4b05      	ldr	r3, [pc, #20]	; (8003dfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	0a9b      	lsrs	r3, r3, #10
 8003dec:	f003 0307 	and.w	r3, r3, #7
 8003df0:	4903      	ldr	r1, [pc, #12]	; (8003e00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003df2:	5ccb      	ldrb	r3, [r1, r3]
 8003df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	40023800 	.word	0x40023800
 8003e00:	0800f3b0 	.word	0x0800f3b0

08003e04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e08:	f7ff ffdc 	bl	8003dc4 <HAL_RCC_GetHCLKFreq>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	4b05      	ldr	r3, [pc, #20]	; (8003e24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	0b5b      	lsrs	r3, r3, #13
 8003e14:	f003 0307 	and.w	r3, r3, #7
 8003e18:	4903      	ldr	r1, [pc, #12]	; (8003e28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e1a:	5ccb      	ldrb	r3, [r1, r3]
 8003e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	40023800 	.word	0x40023800
 8003e28:	0800f3b0 	.word	0x0800f3b0

08003e2c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	220f      	movs	r2, #15
 8003e3a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e3c:	4b12      	ldr	r3, [pc, #72]	; (8003e88 <HAL_RCC_GetClockConfig+0x5c>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f003 0203 	and.w	r2, r3, #3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003e48:	4b0f      	ldr	r3, [pc, #60]	; (8003e88 <HAL_RCC_GetClockConfig+0x5c>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003e54:	4b0c      	ldr	r3, [pc, #48]	; (8003e88 <HAL_RCC_GetClockConfig+0x5c>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003e60:	4b09      	ldr	r3, [pc, #36]	; (8003e88 <HAL_RCC_GetClockConfig+0x5c>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	08db      	lsrs	r3, r3, #3
 8003e66:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003e6e:	4b07      	ldr	r3, [pc, #28]	; (8003e8c <HAL_RCC_GetClockConfig+0x60>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 020f 	and.w	r2, r3, #15
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	601a      	str	r2, [r3, #0]
}
 8003e7a:	bf00      	nop
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	40023800 	.word	0x40023800
 8003e8c:	40023c00 	.word	0x40023c00

08003e90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e94:	b0ae      	sub	sp, #184	; 0xb8
 8003e96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003eb6:	4bcb      	ldr	r3, [pc, #812]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f003 030c 	and.w	r3, r3, #12
 8003ebe:	2b0c      	cmp	r3, #12
 8003ec0:	f200 8206 	bhi.w	80042d0 <HAL_RCC_GetSysClockFreq+0x440>
 8003ec4:	a201      	add	r2, pc, #4	; (adr r2, 8003ecc <HAL_RCC_GetSysClockFreq+0x3c>)
 8003ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eca:	bf00      	nop
 8003ecc:	08003f01 	.word	0x08003f01
 8003ed0:	080042d1 	.word	0x080042d1
 8003ed4:	080042d1 	.word	0x080042d1
 8003ed8:	080042d1 	.word	0x080042d1
 8003edc:	08003f09 	.word	0x08003f09
 8003ee0:	080042d1 	.word	0x080042d1
 8003ee4:	080042d1 	.word	0x080042d1
 8003ee8:	080042d1 	.word	0x080042d1
 8003eec:	08003f11 	.word	0x08003f11
 8003ef0:	080042d1 	.word	0x080042d1
 8003ef4:	080042d1 	.word	0x080042d1
 8003ef8:	080042d1 	.word	0x080042d1
 8003efc:	08004101 	.word	0x08004101
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f00:	4bb9      	ldr	r3, [pc, #740]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003f02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003f06:	e1e7      	b.n	80042d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f08:	4bb8      	ldr	r3, [pc, #736]	; (80041ec <HAL_RCC_GetSysClockFreq+0x35c>)
 8003f0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003f0e:	e1e3      	b.n	80042d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f10:	4bb4      	ldr	r3, [pc, #720]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f1c:	4bb1      	ldr	r3, [pc, #708]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d071      	beq.n	800400c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f28:	4bae      	ldr	r3, [pc, #696]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	099b      	lsrs	r3, r3, #6
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003f34:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003f38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f40:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003f44:	2300      	movs	r3, #0
 8003f46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003f4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003f4e:	4622      	mov	r2, r4
 8003f50:	462b      	mov	r3, r5
 8003f52:	f04f 0000 	mov.w	r0, #0
 8003f56:	f04f 0100 	mov.w	r1, #0
 8003f5a:	0159      	lsls	r1, r3, #5
 8003f5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f60:	0150      	lsls	r0, r2, #5
 8003f62:	4602      	mov	r2, r0
 8003f64:	460b      	mov	r3, r1
 8003f66:	4621      	mov	r1, r4
 8003f68:	1a51      	subs	r1, r2, r1
 8003f6a:	6439      	str	r1, [r7, #64]	; 0x40
 8003f6c:	4629      	mov	r1, r5
 8003f6e:	eb63 0301 	sbc.w	r3, r3, r1
 8003f72:	647b      	str	r3, [r7, #68]	; 0x44
 8003f74:	f04f 0200 	mov.w	r2, #0
 8003f78:	f04f 0300 	mov.w	r3, #0
 8003f7c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003f80:	4649      	mov	r1, r9
 8003f82:	018b      	lsls	r3, r1, #6
 8003f84:	4641      	mov	r1, r8
 8003f86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f8a:	4641      	mov	r1, r8
 8003f8c:	018a      	lsls	r2, r1, #6
 8003f8e:	4641      	mov	r1, r8
 8003f90:	1a51      	subs	r1, r2, r1
 8003f92:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f94:	4649      	mov	r1, r9
 8003f96:	eb63 0301 	sbc.w	r3, r3, r1
 8003f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f9c:	f04f 0200 	mov.w	r2, #0
 8003fa0:	f04f 0300 	mov.w	r3, #0
 8003fa4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003fa8:	4649      	mov	r1, r9
 8003faa:	00cb      	lsls	r3, r1, #3
 8003fac:	4641      	mov	r1, r8
 8003fae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fb2:	4641      	mov	r1, r8
 8003fb4:	00ca      	lsls	r2, r1, #3
 8003fb6:	4610      	mov	r0, r2
 8003fb8:	4619      	mov	r1, r3
 8003fba:	4603      	mov	r3, r0
 8003fbc:	4622      	mov	r2, r4
 8003fbe:	189b      	adds	r3, r3, r2
 8003fc0:	633b      	str	r3, [r7, #48]	; 0x30
 8003fc2:	462b      	mov	r3, r5
 8003fc4:	460a      	mov	r2, r1
 8003fc6:	eb42 0303 	adc.w	r3, r2, r3
 8003fca:	637b      	str	r3, [r7, #52]	; 0x34
 8003fcc:	f04f 0200 	mov.w	r2, #0
 8003fd0:	f04f 0300 	mov.w	r3, #0
 8003fd4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003fd8:	4629      	mov	r1, r5
 8003fda:	024b      	lsls	r3, r1, #9
 8003fdc:	4621      	mov	r1, r4
 8003fde:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003fe2:	4621      	mov	r1, r4
 8003fe4:	024a      	lsls	r2, r1, #9
 8003fe6:	4610      	mov	r0, r2
 8003fe8:	4619      	mov	r1, r3
 8003fea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003ff4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003ff8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003ffc:	f7fc fe34 	bl	8000c68 <__aeabi_uldivmod>
 8004000:	4602      	mov	r2, r0
 8004002:	460b      	mov	r3, r1
 8004004:	4613      	mov	r3, r2
 8004006:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800400a:	e067      	b.n	80040dc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800400c:	4b75      	ldr	r3, [pc, #468]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	099b      	lsrs	r3, r3, #6
 8004012:	2200      	movs	r2, #0
 8004014:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004018:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800401c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004024:	67bb      	str	r3, [r7, #120]	; 0x78
 8004026:	2300      	movs	r3, #0
 8004028:	67fb      	str	r3, [r7, #124]	; 0x7c
 800402a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800402e:	4622      	mov	r2, r4
 8004030:	462b      	mov	r3, r5
 8004032:	f04f 0000 	mov.w	r0, #0
 8004036:	f04f 0100 	mov.w	r1, #0
 800403a:	0159      	lsls	r1, r3, #5
 800403c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004040:	0150      	lsls	r0, r2, #5
 8004042:	4602      	mov	r2, r0
 8004044:	460b      	mov	r3, r1
 8004046:	4621      	mov	r1, r4
 8004048:	1a51      	subs	r1, r2, r1
 800404a:	62b9      	str	r1, [r7, #40]	; 0x28
 800404c:	4629      	mov	r1, r5
 800404e:	eb63 0301 	sbc.w	r3, r3, r1
 8004052:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004054:	f04f 0200 	mov.w	r2, #0
 8004058:	f04f 0300 	mov.w	r3, #0
 800405c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004060:	4649      	mov	r1, r9
 8004062:	018b      	lsls	r3, r1, #6
 8004064:	4641      	mov	r1, r8
 8004066:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800406a:	4641      	mov	r1, r8
 800406c:	018a      	lsls	r2, r1, #6
 800406e:	4641      	mov	r1, r8
 8004070:	ebb2 0a01 	subs.w	sl, r2, r1
 8004074:	4649      	mov	r1, r9
 8004076:	eb63 0b01 	sbc.w	fp, r3, r1
 800407a:	f04f 0200 	mov.w	r2, #0
 800407e:	f04f 0300 	mov.w	r3, #0
 8004082:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004086:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800408a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800408e:	4692      	mov	sl, r2
 8004090:	469b      	mov	fp, r3
 8004092:	4623      	mov	r3, r4
 8004094:	eb1a 0303 	adds.w	r3, sl, r3
 8004098:	623b      	str	r3, [r7, #32]
 800409a:	462b      	mov	r3, r5
 800409c:	eb4b 0303 	adc.w	r3, fp, r3
 80040a0:	627b      	str	r3, [r7, #36]	; 0x24
 80040a2:	f04f 0200 	mov.w	r2, #0
 80040a6:	f04f 0300 	mov.w	r3, #0
 80040aa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80040ae:	4629      	mov	r1, r5
 80040b0:	028b      	lsls	r3, r1, #10
 80040b2:	4621      	mov	r1, r4
 80040b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040b8:	4621      	mov	r1, r4
 80040ba:	028a      	lsls	r2, r1, #10
 80040bc:	4610      	mov	r0, r2
 80040be:	4619      	mov	r1, r3
 80040c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80040c4:	2200      	movs	r2, #0
 80040c6:	673b      	str	r3, [r7, #112]	; 0x70
 80040c8:	677a      	str	r2, [r7, #116]	; 0x74
 80040ca:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80040ce:	f7fc fdcb 	bl	8000c68 <__aeabi_uldivmod>
 80040d2:	4602      	mov	r2, r0
 80040d4:	460b      	mov	r3, r1
 80040d6:	4613      	mov	r3, r2
 80040d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040dc:	4b41      	ldr	r3, [pc, #260]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x354>)
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	0c1b      	lsrs	r3, r3, #16
 80040e2:	f003 0303 	and.w	r3, r3, #3
 80040e6:	3301      	adds	r3, #1
 80040e8:	005b      	lsls	r3, r3, #1
 80040ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80040ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80040f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80040f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80040fe:	e0eb      	b.n	80042d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004100:	4b38      	ldr	r3, [pc, #224]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004108:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800410c:	4b35      	ldr	r3, [pc, #212]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d06b      	beq.n	80041f0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004118:	4b32      	ldr	r3, [pc, #200]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	099b      	lsrs	r3, r3, #6
 800411e:	2200      	movs	r2, #0
 8004120:	66bb      	str	r3, [r7, #104]	; 0x68
 8004122:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004124:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800412a:	663b      	str	r3, [r7, #96]	; 0x60
 800412c:	2300      	movs	r3, #0
 800412e:	667b      	str	r3, [r7, #100]	; 0x64
 8004130:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004134:	4622      	mov	r2, r4
 8004136:	462b      	mov	r3, r5
 8004138:	f04f 0000 	mov.w	r0, #0
 800413c:	f04f 0100 	mov.w	r1, #0
 8004140:	0159      	lsls	r1, r3, #5
 8004142:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004146:	0150      	lsls	r0, r2, #5
 8004148:	4602      	mov	r2, r0
 800414a:	460b      	mov	r3, r1
 800414c:	4621      	mov	r1, r4
 800414e:	1a51      	subs	r1, r2, r1
 8004150:	61b9      	str	r1, [r7, #24]
 8004152:	4629      	mov	r1, r5
 8004154:	eb63 0301 	sbc.w	r3, r3, r1
 8004158:	61fb      	str	r3, [r7, #28]
 800415a:	f04f 0200 	mov.w	r2, #0
 800415e:	f04f 0300 	mov.w	r3, #0
 8004162:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004166:	4659      	mov	r1, fp
 8004168:	018b      	lsls	r3, r1, #6
 800416a:	4651      	mov	r1, sl
 800416c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004170:	4651      	mov	r1, sl
 8004172:	018a      	lsls	r2, r1, #6
 8004174:	4651      	mov	r1, sl
 8004176:	ebb2 0801 	subs.w	r8, r2, r1
 800417a:	4659      	mov	r1, fp
 800417c:	eb63 0901 	sbc.w	r9, r3, r1
 8004180:	f04f 0200 	mov.w	r2, #0
 8004184:	f04f 0300 	mov.w	r3, #0
 8004188:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800418c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004190:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004194:	4690      	mov	r8, r2
 8004196:	4699      	mov	r9, r3
 8004198:	4623      	mov	r3, r4
 800419a:	eb18 0303 	adds.w	r3, r8, r3
 800419e:	613b      	str	r3, [r7, #16]
 80041a0:	462b      	mov	r3, r5
 80041a2:	eb49 0303 	adc.w	r3, r9, r3
 80041a6:	617b      	str	r3, [r7, #20]
 80041a8:	f04f 0200 	mov.w	r2, #0
 80041ac:	f04f 0300 	mov.w	r3, #0
 80041b0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80041b4:	4629      	mov	r1, r5
 80041b6:	024b      	lsls	r3, r1, #9
 80041b8:	4621      	mov	r1, r4
 80041ba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80041be:	4621      	mov	r1, r4
 80041c0:	024a      	lsls	r2, r1, #9
 80041c2:	4610      	mov	r0, r2
 80041c4:	4619      	mov	r1, r3
 80041c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80041ca:	2200      	movs	r2, #0
 80041cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80041ce:	65fa      	str	r2, [r7, #92]	; 0x5c
 80041d0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80041d4:	f7fc fd48 	bl	8000c68 <__aeabi_uldivmod>
 80041d8:	4602      	mov	r2, r0
 80041da:	460b      	mov	r3, r1
 80041dc:	4613      	mov	r3, r2
 80041de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041e2:	e065      	b.n	80042b0 <HAL_RCC_GetSysClockFreq+0x420>
 80041e4:	40023800 	.word	0x40023800
 80041e8:	00f42400 	.word	0x00f42400
 80041ec:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041f0:	4b3d      	ldr	r3, [pc, #244]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x458>)
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	099b      	lsrs	r3, r3, #6
 80041f6:	2200      	movs	r2, #0
 80041f8:	4618      	mov	r0, r3
 80041fa:	4611      	mov	r1, r2
 80041fc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004200:	653b      	str	r3, [r7, #80]	; 0x50
 8004202:	2300      	movs	r3, #0
 8004204:	657b      	str	r3, [r7, #84]	; 0x54
 8004206:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800420a:	4642      	mov	r2, r8
 800420c:	464b      	mov	r3, r9
 800420e:	f04f 0000 	mov.w	r0, #0
 8004212:	f04f 0100 	mov.w	r1, #0
 8004216:	0159      	lsls	r1, r3, #5
 8004218:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800421c:	0150      	lsls	r0, r2, #5
 800421e:	4602      	mov	r2, r0
 8004220:	460b      	mov	r3, r1
 8004222:	4641      	mov	r1, r8
 8004224:	1a51      	subs	r1, r2, r1
 8004226:	60b9      	str	r1, [r7, #8]
 8004228:	4649      	mov	r1, r9
 800422a:	eb63 0301 	sbc.w	r3, r3, r1
 800422e:	60fb      	str	r3, [r7, #12]
 8004230:	f04f 0200 	mov.w	r2, #0
 8004234:	f04f 0300 	mov.w	r3, #0
 8004238:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800423c:	4659      	mov	r1, fp
 800423e:	018b      	lsls	r3, r1, #6
 8004240:	4651      	mov	r1, sl
 8004242:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004246:	4651      	mov	r1, sl
 8004248:	018a      	lsls	r2, r1, #6
 800424a:	4651      	mov	r1, sl
 800424c:	1a54      	subs	r4, r2, r1
 800424e:	4659      	mov	r1, fp
 8004250:	eb63 0501 	sbc.w	r5, r3, r1
 8004254:	f04f 0200 	mov.w	r2, #0
 8004258:	f04f 0300 	mov.w	r3, #0
 800425c:	00eb      	lsls	r3, r5, #3
 800425e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004262:	00e2      	lsls	r2, r4, #3
 8004264:	4614      	mov	r4, r2
 8004266:	461d      	mov	r5, r3
 8004268:	4643      	mov	r3, r8
 800426a:	18e3      	adds	r3, r4, r3
 800426c:	603b      	str	r3, [r7, #0]
 800426e:	464b      	mov	r3, r9
 8004270:	eb45 0303 	adc.w	r3, r5, r3
 8004274:	607b      	str	r3, [r7, #4]
 8004276:	f04f 0200 	mov.w	r2, #0
 800427a:	f04f 0300 	mov.w	r3, #0
 800427e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004282:	4629      	mov	r1, r5
 8004284:	028b      	lsls	r3, r1, #10
 8004286:	4621      	mov	r1, r4
 8004288:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800428c:	4621      	mov	r1, r4
 800428e:	028a      	lsls	r2, r1, #10
 8004290:	4610      	mov	r0, r2
 8004292:	4619      	mov	r1, r3
 8004294:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004298:	2200      	movs	r2, #0
 800429a:	64bb      	str	r3, [r7, #72]	; 0x48
 800429c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800429e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80042a2:	f7fc fce1 	bl	8000c68 <__aeabi_uldivmod>
 80042a6:	4602      	mov	r2, r0
 80042a8:	460b      	mov	r3, r1
 80042aa:	4613      	mov	r3, r2
 80042ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80042b0:	4b0d      	ldr	r3, [pc, #52]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x458>)
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	0f1b      	lsrs	r3, r3, #28
 80042b6:	f003 0307 	and.w	r3, r3, #7
 80042ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80042be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80042c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80042c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80042ce:	e003      	b.n	80042d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042d0:	4b06      	ldr	r3, [pc, #24]	; (80042ec <HAL_RCC_GetSysClockFreq+0x45c>)
 80042d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80042d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	37b8      	adds	r7, #184	; 0xb8
 80042e0:	46bd      	mov	sp, r7
 80042e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042e6:	bf00      	nop
 80042e8:	40023800 	.word	0x40023800
 80042ec:	00f42400 	.word	0x00f42400

080042f0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e28d      	b.n	800481e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	2b00      	cmp	r3, #0
 800430c:	f000 8083 	beq.w	8004416 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004310:	4b94      	ldr	r3, [pc, #592]	; (8004564 <HAL_RCC_OscConfig+0x274>)
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f003 030c 	and.w	r3, r3, #12
 8004318:	2b04      	cmp	r3, #4
 800431a:	d019      	beq.n	8004350 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800431c:	4b91      	ldr	r3, [pc, #580]	; (8004564 <HAL_RCC_OscConfig+0x274>)
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004324:	2b08      	cmp	r3, #8
 8004326:	d106      	bne.n	8004336 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004328:	4b8e      	ldr	r3, [pc, #568]	; (8004564 <HAL_RCC_OscConfig+0x274>)
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004330:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004334:	d00c      	beq.n	8004350 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004336:	4b8b      	ldr	r3, [pc, #556]	; (8004564 <HAL_RCC_OscConfig+0x274>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800433e:	2b0c      	cmp	r3, #12
 8004340:	d112      	bne.n	8004368 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004342:	4b88      	ldr	r3, [pc, #544]	; (8004564 <HAL_RCC_OscConfig+0x274>)
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800434a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800434e:	d10b      	bne.n	8004368 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004350:	4b84      	ldr	r3, [pc, #528]	; (8004564 <HAL_RCC_OscConfig+0x274>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d05b      	beq.n	8004414 <HAL_RCC_OscConfig+0x124>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d157      	bne.n	8004414 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e25a      	b.n	800481e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004370:	d106      	bne.n	8004380 <HAL_RCC_OscConfig+0x90>
 8004372:	4b7c      	ldr	r3, [pc, #496]	; (8004564 <HAL_RCC_OscConfig+0x274>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a7b      	ldr	r2, [pc, #492]	; (8004564 <HAL_RCC_OscConfig+0x274>)
 8004378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800437c:	6013      	str	r3, [r2, #0]
 800437e:	e01d      	b.n	80043bc <HAL_RCC_OscConfig+0xcc>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004388:	d10c      	bne.n	80043a4 <HAL_RCC_OscConfig+0xb4>
 800438a:	4b76      	ldr	r3, [pc, #472]	; (8004564 <HAL_RCC_OscConfig+0x274>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a75      	ldr	r2, [pc, #468]	; (8004564 <HAL_RCC_OscConfig+0x274>)
 8004390:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004394:	6013      	str	r3, [r2, #0]
 8004396:	4b73      	ldr	r3, [pc, #460]	; (8004564 <HAL_RCC_OscConfig+0x274>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a72      	ldr	r2, [pc, #456]	; (8004564 <HAL_RCC_OscConfig+0x274>)
 800439c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043a0:	6013      	str	r3, [r2, #0]
 80043a2:	e00b      	b.n	80043bc <HAL_RCC_OscConfig+0xcc>
 80043a4:	4b6f      	ldr	r3, [pc, #444]	; (8004564 <HAL_RCC_OscConfig+0x274>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a6e      	ldr	r2, [pc, #440]	; (8004564 <HAL_RCC_OscConfig+0x274>)
 80043aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ae:	6013      	str	r3, [r2, #0]
 80043b0:	4b6c      	ldr	r3, [pc, #432]	; (8004564 <HAL_RCC_OscConfig+0x274>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a6b      	ldr	r2, [pc, #428]	; (8004564 <HAL_RCC_OscConfig+0x274>)
 80043b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d013      	beq.n	80043ec <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c4:	f7fd fee6 	bl	8002194 <HAL_GetTick>
 80043c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ca:	e008      	b.n	80043de <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043cc:	f7fd fee2 	bl	8002194 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b64      	cmp	r3, #100	; 0x64
 80043d8:	d901      	bls.n	80043de <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e21f      	b.n	800481e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043de:	4b61      	ldr	r3, [pc, #388]	; (8004564 <HAL_RCC_OscConfig+0x274>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d0f0      	beq.n	80043cc <HAL_RCC_OscConfig+0xdc>
 80043ea:	e014      	b.n	8004416 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ec:	f7fd fed2 	bl	8002194 <HAL_GetTick>
 80043f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043f2:	e008      	b.n	8004406 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043f4:	f7fd fece 	bl	8002194 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b64      	cmp	r3, #100	; 0x64
 8004400:	d901      	bls.n	8004406 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e20b      	b.n	800481e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004406:	4b57      	ldr	r3, [pc, #348]	; (8004564 <HAL_RCC_OscConfig+0x274>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1f0      	bne.n	80043f4 <HAL_RCC_OscConfig+0x104>
 8004412:	e000      	b.n	8004416 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004414:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d06f      	beq.n	8004502 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004422:	4b50      	ldr	r3, [pc, #320]	; (8004564 <HAL_RCC_OscConfig+0x274>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f003 030c 	and.w	r3, r3, #12
 800442a:	2b00      	cmp	r3, #0
 800442c:	d017      	beq.n	800445e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800442e:	4b4d      	ldr	r3, [pc, #308]	; (8004564 <HAL_RCC_OscConfig+0x274>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004436:	2b08      	cmp	r3, #8
 8004438:	d105      	bne.n	8004446 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800443a:	4b4a      	ldr	r3, [pc, #296]	; (8004564 <HAL_RCC_OscConfig+0x274>)
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00b      	beq.n	800445e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004446:	4b47      	ldr	r3, [pc, #284]	; (8004564 <HAL_RCC_OscConfig+0x274>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800444e:	2b0c      	cmp	r3, #12
 8004450:	d11c      	bne.n	800448c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004452:	4b44      	ldr	r3, [pc, #272]	; (8004564 <HAL_RCC_OscConfig+0x274>)
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d116      	bne.n	800448c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800445e:	4b41      	ldr	r3, [pc, #260]	; (8004564 <HAL_RCC_OscConfig+0x274>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d005      	beq.n	8004476 <HAL_RCC_OscConfig+0x186>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	2b01      	cmp	r3, #1
 8004470:	d001      	beq.n	8004476 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e1d3      	b.n	800481e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004476:	4b3b      	ldr	r3, [pc, #236]	; (8004564 <HAL_RCC_OscConfig+0x274>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	00db      	lsls	r3, r3, #3
 8004484:	4937      	ldr	r1, [pc, #220]	; (8004564 <HAL_RCC_OscConfig+0x274>)
 8004486:	4313      	orrs	r3, r2
 8004488:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800448a:	e03a      	b.n	8004502 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d020      	beq.n	80044d6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004494:	4b34      	ldr	r3, [pc, #208]	; (8004568 <HAL_RCC_OscConfig+0x278>)
 8004496:	2201      	movs	r2, #1
 8004498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800449a:	f7fd fe7b 	bl	8002194 <HAL_GetTick>
 800449e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044a0:	e008      	b.n	80044b4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044a2:	f7fd fe77 	bl	8002194 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d901      	bls.n	80044b4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e1b4      	b.n	800481e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044b4:	4b2b      	ldr	r3, [pc, #172]	; (8004564 <HAL_RCC_OscConfig+0x274>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d0f0      	beq.n	80044a2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044c0:	4b28      	ldr	r3, [pc, #160]	; (8004564 <HAL_RCC_OscConfig+0x274>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	00db      	lsls	r3, r3, #3
 80044ce:	4925      	ldr	r1, [pc, #148]	; (8004564 <HAL_RCC_OscConfig+0x274>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	600b      	str	r3, [r1, #0]
 80044d4:	e015      	b.n	8004502 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044d6:	4b24      	ldr	r3, [pc, #144]	; (8004568 <HAL_RCC_OscConfig+0x278>)
 80044d8:	2200      	movs	r2, #0
 80044da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044dc:	f7fd fe5a 	bl	8002194 <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044e2:	e008      	b.n	80044f6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044e4:	f7fd fe56 	bl	8002194 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e193      	b.n	800481e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044f6:	4b1b      	ldr	r3, [pc, #108]	; (8004564 <HAL_RCC_OscConfig+0x274>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1f0      	bne.n	80044e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0308 	and.w	r3, r3, #8
 800450a:	2b00      	cmp	r3, #0
 800450c:	d036      	beq.n	800457c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d016      	beq.n	8004544 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004516:	4b15      	ldr	r3, [pc, #84]	; (800456c <HAL_RCC_OscConfig+0x27c>)
 8004518:	2201      	movs	r2, #1
 800451a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800451c:	f7fd fe3a 	bl	8002194 <HAL_GetTick>
 8004520:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004522:	e008      	b.n	8004536 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004524:	f7fd fe36 	bl	8002194 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b02      	cmp	r3, #2
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e173      	b.n	800481e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004536:	4b0b      	ldr	r3, [pc, #44]	; (8004564 <HAL_RCC_OscConfig+0x274>)
 8004538:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d0f0      	beq.n	8004524 <HAL_RCC_OscConfig+0x234>
 8004542:	e01b      	b.n	800457c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004544:	4b09      	ldr	r3, [pc, #36]	; (800456c <HAL_RCC_OscConfig+0x27c>)
 8004546:	2200      	movs	r2, #0
 8004548:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800454a:	f7fd fe23 	bl	8002194 <HAL_GetTick>
 800454e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004550:	e00e      	b.n	8004570 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004552:	f7fd fe1f 	bl	8002194 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	2b02      	cmp	r3, #2
 800455e:	d907      	bls.n	8004570 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e15c      	b.n	800481e <HAL_RCC_OscConfig+0x52e>
 8004564:	40023800 	.word	0x40023800
 8004568:	42470000 	.word	0x42470000
 800456c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004570:	4b8a      	ldr	r3, [pc, #552]	; (800479c <HAL_RCC_OscConfig+0x4ac>)
 8004572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1ea      	bne.n	8004552 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0304 	and.w	r3, r3, #4
 8004584:	2b00      	cmp	r3, #0
 8004586:	f000 8097 	beq.w	80046b8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800458a:	2300      	movs	r3, #0
 800458c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800458e:	4b83      	ldr	r3, [pc, #524]	; (800479c <HAL_RCC_OscConfig+0x4ac>)
 8004590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10f      	bne.n	80045ba <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800459a:	2300      	movs	r3, #0
 800459c:	60bb      	str	r3, [r7, #8]
 800459e:	4b7f      	ldr	r3, [pc, #508]	; (800479c <HAL_RCC_OscConfig+0x4ac>)
 80045a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a2:	4a7e      	ldr	r2, [pc, #504]	; (800479c <HAL_RCC_OscConfig+0x4ac>)
 80045a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045a8:	6413      	str	r3, [r2, #64]	; 0x40
 80045aa:	4b7c      	ldr	r3, [pc, #496]	; (800479c <HAL_RCC_OscConfig+0x4ac>)
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045b2:	60bb      	str	r3, [r7, #8]
 80045b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045b6:	2301      	movs	r3, #1
 80045b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ba:	4b79      	ldr	r3, [pc, #484]	; (80047a0 <HAL_RCC_OscConfig+0x4b0>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d118      	bne.n	80045f8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045c6:	4b76      	ldr	r3, [pc, #472]	; (80047a0 <HAL_RCC_OscConfig+0x4b0>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a75      	ldr	r2, [pc, #468]	; (80047a0 <HAL_RCC_OscConfig+0x4b0>)
 80045cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045d2:	f7fd fddf 	bl	8002194 <HAL_GetTick>
 80045d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045d8:	e008      	b.n	80045ec <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045da:	f7fd fddb 	bl	8002194 <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d901      	bls.n	80045ec <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e118      	b.n	800481e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ec:	4b6c      	ldr	r3, [pc, #432]	; (80047a0 <HAL_RCC_OscConfig+0x4b0>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d0f0      	beq.n	80045da <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d106      	bne.n	800460e <HAL_RCC_OscConfig+0x31e>
 8004600:	4b66      	ldr	r3, [pc, #408]	; (800479c <HAL_RCC_OscConfig+0x4ac>)
 8004602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004604:	4a65      	ldr	r2, [pc, #404]	; (800479c <HAL_RCC_OscConfig+0x4ac>)
 8004606:	f043 0301 	orr.w	r3, r3, #1
 800460a:	6713      	str	r3, [r2, #112]	; 0x70
 800460c:	e01c      	b.n	8004648 <HAL_RCC_OscConfig+0x358>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	2b05      	cmp	r3, #5
 8004614:	d10c      	bne.n	8004630 <HAL_RCC_OscConfig+0x340>
 8004616:	4b61      	ldr	r3, [pc, #388]	; (800479c <HAL_RCC_OscConfig+0x4ac>)
 8004618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800461a:	4a60      	ldr	r2, [pc, #384]	; (800479c <HAL_RCC_OscConfig+0x4ac>)
 800461c:	f043 0304 	orr.w	r3, r3, #4
 8004620:	6713      	str	r3, [r2, #112]	; 0x70
 8004622:	4b5e      	ldr	r3, [pc, #376]	; (800479c <HAL_RCC_OscConfig+0x4ac>)
 8004624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004626:	4a5d      	ldr	r2, [pc, #372]	; (800479c <HAL_RCC_OscConfig+0x4ac>)
 8004628:	f043 0301 	orr.w	r3, r3, #1
 800462c:	6713      	str	r3, [r2, #112]	; 0x70
 800462e:	e00b      	b.n	8004648 <HAL_RCC_OscConfig+0x358>
 8004630:	4b5a      	ldr	r3, [pc, #360]	; (800479c <HAL_RCC_OscConfig+0x4ac>)
 8004632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004634:	4a59      	ldr	r2, [pc, #356]	; (800479c <HAL_RCC_OscConfig+0x4ac>)
 8004636:	f023 0301 	bic.w	r3, r3, #1
 800463a:	6713      	str	r3, [r2, #112]	; 0x70
 800463c:	4b57      	ldr	r3, [pc, #348]	; (800479c <HAL_RCC_OscConfig+0x4ac>)
 800463e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004640:	4a56      	ldr	r2, [pc, #344]	; (800479c <HAL_RCC_OscConfig+0x4ac>)
 8004642:	f023 0304 	bic.w	r3, r3, #4
 8004646:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d015      	beq.n	800467c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004650:	f7fd fda0 	bl	8002194 <HAL_GetTick>
 8004654:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004656:	e00a      	b.n	800466e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004658:	f7fd fd9c 	bl	8002194 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	f241 3288 	movw	r2, #5000	; 0x1388
 8004666:	4293      	cmp	r3, r2
 8004668:	d901      	bls.n	800466e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e0d7      	b.n	800481e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800466e:	4b4b      	ldr	r3, [pc, #300]	; (800479c <HAL_RCC_OscConfig+0x4ac>)
 8004670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d0ee      	beq.n	8004658 <HAL_RCC_OscConfig+0x368>
 800467a:	e014      	b.n	80046a6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800467c:	f7fd fd8a 	bl	8002194 <HAL_GetTick>
 8004680:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004682:	e00a      	b.n	800469a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004684:	f7fd fd86 	bl	8002194 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004692:	4293      	cmp	r3, r2
 8004694:	d901      	bls.n	800469a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e0c1      	b.n	800481e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800469a:	4b40      	ldr	r3, [pc, #256]	; (800479c <HAL_RCC_OscConfig+0x4ac>)
 800469c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1ee      	bne.n	8004684 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046a6:	7dfb      	ldrb	r3, [r7, #23]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d105      	bne.n	80046b8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046ac:	4b3b      	ldr	r3, [pc, #236]	; (800479c <HAL_RCC_OscConfig+0x4ac>)
 80046ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b0:	4a3a      	ldr	r2, [pc, #232]	; (800479c <HAL_RCC_OscConfig+0x4ac>)
 80046b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f000 80ad 	beq.w	800481c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046c2:	4b36      	ldr	r3, [pc, #216]	; (800479c <HAL_RCC_OscConfig+0x4ac>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f003 030c 	and.w	r3, r3, #12
 80046ca:	2b08      	cmp	r3, #8
 80046cc:	d060      	beq.n	8004790 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d145      	bne.n	8004762 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046d6:	4b33      	ldr	r3, [pc, #204]	; (80047a4 <HAL_RCC_OscConfig+0x4b4>)
 80046d8:	2200      	movs	r2, #0
 80046da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046dc:	f7fd fd5a 	bl	8002194 <HAL_GetTick>
 80046e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046e2:	e008      	b.n	80046f6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046e4:	f7fd fd56 	bl	8002194 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e093      	b.n	800481e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046f6:	4b29      	ldr	r3, [pc, #164]	; (800479c <HAL_RCC_OscConfig+0x4ac>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1f0      	bne.n	80046e4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	69da      	ldr	r2, [r3, #28]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	431a      	orrs	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004710:	019b      	lsls	r3, r3, #6
 8004712:	431a      	orrs	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004718:	085b      	lsrs	r3, r3, #1
 800471a:	3b01      	subs	r3, #1
 800471c:	041b      	lsls	r3, r3, #16
 800471e:	431a      	orrs	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004724:	061b      	lsls	r3, r3, #24
 8004726:	431a      	orrs	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472c:	071b      	lsls	r3, r3, #28
 800472e:	491b      	ldr	r1, [pc, #108]	; (800479c <HAL_RCC_OscConfig+0x4ac>)
 8004730:	4313      	orrs	r3, r2
 8004732:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004734:	4b1b      	ldr	r3, [pc, #108]	; (80047a4 <HAL_RCC_OscConfig+0x4b4>)
 8004736:	2201      	movs	r2, #1
 8004738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800473a:	f7fd fd2b 	bl	8002194 <HAL_GetTick>
 800473e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004740:	e008      	b.n	8004754 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004742:	f7fd fd27 	bl	8002194 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b02      	cmp	r3, #2
 800474e:	d901      	bls.n	8004754 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e064      	b.n	800481e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004754:	4b11      	ldr	r3, [pc, #68]	; (800479c <HAL_RCC_OscConfig+0x4ac>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d0f0      	beq.n	8004742 <HAL_RCC_OscConfig+0x452>
 8004760:	e05c      	b.n	800481c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004762:	4b10      	ldr	r3, [pc, #64]	; (80047a4 <HAL_RCC_OscConfig+0x4b4>)
 8004764:	2200      	movs	r2, #0
 8004766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004768:	f7fd fd14 	bl	8002194 <HAL_GetTick>
 800476c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800476e:	e008      	b.n	8004782 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004770:	f7fd fd10 	bl	8002194 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	2b02      	cmp	r3, #2
 800477c:	d901      	bls.n	8004782 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e04d      	b.n	800481e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004782:	4b06      	ldr	r3, [pc, #24]	; (800479c <HAL_RCC_OscConfig+0x4ac>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1f0      	bne.n	8004770 <HAL_RCC_OscConfig+0x480>
 800478e:	e045      	b.n	800481c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d107      	bne.n	80047a8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e040      	b.n	800481e <HAL_RCC_OscConfig+0x52e>
 800479c:	40023800 	.word	0x40023800
 80047a0:	40007000 	.word	0x40007000
 80047a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047a8:	4b1f      	ldr	r3, [pc, #124]	; (8004828 <HAL_RCC_OscConfig+0x538>)
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d030      	beq.n	8004818 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d129      	bne.n	8004818 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d122      	bne.n	8004818 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047d8:	4013      	ands	r3, r2
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d119      	bne.n	8004818 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ee:	085b      	lsrs	r3, r3, #1
 80047f0:	3b01      	subs	r3, #1
 80047f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d10f      	bne.n	8004818 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004802:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004804:	429a      	cmp	r2, r3
 8004806:	d107      	bne.n	8004818 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004812:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004814:	429a      	cmp	r2, r3
 8004816:	d001      	beq.n	800481c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e000      	b.n	800481e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3718      	adds	r7, #24
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	40023800 	.word	0x40023800

0800482c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d101      	bne.n	800483e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e07b      	b.n	8004936 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004842:	2b00      	cmp	r3, #0
 8004844:	d108      	bne.n	8004858 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800484e:	d009      	beq.n	8004864 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	61da      	str	r2, [r3, #28]
 8004856:	e005      	b.n	8004864 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d106      	bne.n	8004884 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f7fc fdac 	bl	80013dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2202      	movs	r2, #2
 8004888:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800489a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80048ac:	431a      	orrs	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048b6:	431a      	orrs	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	f003 0302 	and.w	r3, r3, #2
 80048c0:	431a      	orrs	r2, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	431a      	orrs	r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048d4:	431a      	orrs	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	69db      	ldr	r3, [r3, #28]
 80048da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048de:	431a      	orrs	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a1b      	ldr	r3, [r3, #32]
 80048e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048e8:	ea42 0103 	orr.w	r1, r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	430a      	orrs	r2, r1
 80048fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	0c1b      	lsrs	r3, r3, #16
 8004902:	f003 0104 	and.w	r1, r3, #4
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490a:	f003 0210 	and.w	r2, r3, #16
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	430a      	orrs	r2, r1
 8004914:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	69da      	ldr	r2, [r3, #28]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004924:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3708      	adds	r7, #8
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800493e:	b580      	push	{r7, lr}
 8004940:	b088      	sub	sp, #32
 8004942:	af00      	add	r7, sp, #0
 8004944:	60f8      	str	r0, [r7, #12]
 8004946:	60b9      	str	r1, [r7, #8]
 8004948:	603b      	str	r3, [r7, #0]
 800494a:	4613      	mov	r3, r2
 800494c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800494e:	2300      	movs	r3, #0
 8004950:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004958:	2b01      	cmp	r3, #1
 800495a:	d101      	bne.n	8004960 <HAL_SPI_Transmit+0x22>
 800495c:	2302      	movs	r3, #2
 800495e:	e12d      	b.n	8004bbc <HAL_SPI_Transmit+0x27e>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004968:	f7fd fc14 	bl	8002194 <HAL_GetTick>
 800496c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800496e:	88fb      	ldrh	r3, [r7, #6]
 8004970:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b01      	cmp	r3, #1
 800497c:	d002      	beq.n	8004984 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800497e:	2302      	movs	r3, #2
 8004980:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004982:	e116      	b.n	8004bb2 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d002      	beq.n	8004990 <HAL_SPI_Transmit+0x52>
 800498a:	88fb      	ldrh	r3, [r7, #6]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d102      	bne.n	8004996 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004994:	e10d      	b.n	8004bb2 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2203      	movs	r2, #3
 800499a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	68ba      	ldr	r2, [r7, #8]
 80049a8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	88fa      	ldrh	r2, [r7, #6]
 80049ae:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	88fa      	ldrh	r2, [r7, #6]
 80049b4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2200      	movs	r2, #0
 80049ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049dc:	d10f      	bne.n	80049fe <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a08:	2b40      	cmp	r3, #64	; 0x40
 8004a0a:	d007      	beq.n	8004a1c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a24:	d14f      	bne.n	8004ac6 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d002      	beq.n	8004a34 <HAL_SPI_Transmit+0xf6>
 8004a2e:	8afb      	ldrh	r3, [r7, #22]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d142      	bne.n	8004aba <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a38:	881a      	ldrh	r2, [r3, #0]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a44:	1c9a      	adds	r2, r3, #2
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	3b01      	subs	r3, #1
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a58:	e02f      	b.n	8004aba <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	f003 0302 	and.w	r3, r3, #2
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d112      	bne.n	8004a8e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6c:	881a      	ldrh	r2, [r3, #0]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a78:	1c9a      	adds	r2, r3, #2
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	3b01      	subs	r3, #1
 8004a86:	b29a      	uxth	r2, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a8c:	e015      	b.n	8004aba <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a8e:	f7fd fb81 	bl	8002194 <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	683a      	ldr	r2, [r7, #0]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d803      	bhi.n	8004aa6 <HAL_SPI_Transmit+0x168>
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa4:	d102      	bne.n	8004aac <HAL_SPI_Transmit+0x16e>
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d106      	bne.n	8004aba <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004ab8:	e07b      	b.n	8004bb2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1ca      	bne.n	8004a5a <HAL_SPI_Transmit+0x11c>
 8004ac4:	e050      	b.n	8004b68 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d002      	beq.n	8004ad4 <HAL_SPI_Transmit+0x196>
 8004ace:	8afb      	ldrh	r3, [r7, #22]
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d144      	bne.n	8004b5e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	330c      	adds	r3, #12
 8004ade:	7812      	ldrb	r2, [r2, #0]
 8004ae0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae6:	1c5a      	adds	r2, r3, #1
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	3b01      	subs	r3, #1
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004afa:	e030      	b.n	8004b5e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d113      	bne.n	8004b32 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	330c      	adds	r3, #12
 8004b14:	7812      	ldrb	r2, [r2, #0]
 8004b16:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1c:	1c5a      	adds	r2, r3, #1
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	b29a      	uxth	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b30:	e015      	b.n	8004b5e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b32:	f7fd fb2f 	bl	8002194 <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	683a      	ldr	r2, [r7, #0]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d803      	bhi.n	8004b4a <HAL_SPI_Transmit+0x20c>
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b48:	d102      	bne.n	8004b50 <HAL_SPI_Transmit+0x212>
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d106      	bne.n	8004b5e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004b5c:	e029      	b.n	8004bb2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d1c9      	bne.n	8004afc <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b68:	69ba      	ldr	r2, [r7, #24]
 8004b6a:	6839      	ldr	r1, [r7, #0]
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f000 fa6f 	bl	8005050 <SPI_EndRxTxTransaction>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d002      	beq.n	8004b7e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2220      	movs	r2, #32
 8004b7c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10a      	bne.n	8004b9c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b86:	2300      	movs	r3, #0
 8004b88:	613b      	str	r3, [r7, #16]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	613b      	str	r3, [r7, #16]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	613b      	str	r3, [r7, #16]
 8004b9a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d002      	beq.n	8004baa <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	77fb      	strb	r3, [r7, #31]
 8004ba8:	e003      	b.n	8004bb2 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2201      	movs	r2, #1
 8004bae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004bba:	7ffb      	ldrb	r3, [r7, #31]
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3720      	adds	r7, #32
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b08c      	sub	sp, #48	; 0x30
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
 8004bd0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d101      	bne.n	8004bea <HAL_SPI_TransmitReceive+0x26>
 8004be6:	2302      	movs	r3, #2
 8004be8:	e198      	b.n	8004f1c <HAL_SPI_TransmitReceive+0x358>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004bf2:	f7fd facf 	bl	8002194 <HAL_GetTick>
 8004bf6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004c08:	887b      	ldrh	r3, [r7, #2]
 8004c0a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d00f      	beq.n	8004c34 <HAL_SPI_TransmitReceive+0x70>
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c1a:	d107      	bne.n	8004c2c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d103      	bne.n	8004c2c <HAL_SPI_TransmitReceive+0x68>
 8004c24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c28:	2b04      	cmp	r3, #4
 8004c2a:	d003      	beq.n	8004c34 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004c32:	e16d      	b.n	8004f10 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d005      	beq.n	8004c46 <HAL_SPI_TransmitReceive+0x82>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d002      	beq.n	8004c46 <HAL_SPI_TransmitReceive+0x82>
 8004c40:	887b      	ldrh	r3, [r7, #2]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d103      	bne.n	8004c4e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004c4c:	e160      	b.n	8004f10 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b04      	cmp	r3, #4
 8004c58:	d003      	beq.n	8004c62 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2205      	movs	r2, #5
 8004c5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2200      	movs	r2, #0
 8004c66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	887a      	ldrh	r2, [r7, #2]
 8004c72:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	887a      	ldrh	r2, [r7, #2]
 8004c78:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	68ba      	ldr	r2, [r7, #8]
 8004c7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	887a      	ldrh	r2, [r7, #2]
 8004c84:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	887a      	ldrh	r2, [r7, #2]
 8004c8a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca2:	2b40      	cmp	r3, #64	; 0x40
 8004ca4:	d007      	beq.n	8004cb6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cb4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cbe:	d17c      	bne.n	8004dba <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d002      	beq.n	8004cce <HAL_SPI_TransmitReceive+0x10a>
 8004cc8:	8b7b      	ldrh	r3, [r7, #26]
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d16a      	bne.n	8004da4 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd2:	881a      	ldrh	r2, [r3, #0]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cde:	1c9a      	adds	r2, r3, #2
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	3b01      	subs	r3, #1
 8004cec:	b29a      	uxth	r2, r3
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cf2:	e057      	b.n	8004da4 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d11b      	bne.n	8004d3a <HAL_SPI_TransmitReceive+0x176>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d016      	beq.n	8004d3a <HAL_SPI_TransmitReceive+0x176>
 8004d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d113      	bne.n	8004d3a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d16:	881a      	ldrh	r2, [r3, #0]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d22:	1c9a      	adds	r2, r3, #2
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	b29a      	uxth	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d36:	2300      	movs	r3, #0
 8004d38:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	f003 0301 	and.w	r3, r3, #1
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d119      	bne.n	8004d7c <HAL_SPI_TransmitReceive+0x1b8>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d014      	beq.n	8004d7c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68da      	ldr	r2, [r3, #12]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5c:	b292      	uxth	r2, r2
 8004d5e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d64:	1c9a      	adds	r2, r3, #2
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	3b01      	subs	r3, #1
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004d7c:	f7fd fa0a 	bl	8002194 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d80b      	bhi.n	8004da4 <HAL_SPI_TransmitReceive+0x1e0>
 8004d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d92:	d007      	beq.n	8004da4 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004da2:	e0b5      	b.n	8004f10 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1a2      	bne.n	8004cf4 <HAL_SPI_TransmitReceive+0x130>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d19d      	bne.n	8004cf4 <HAL_SPI_TransmitReceive+0x130>
 8004db8:	e080      	b.n	8004ebc <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d002      	beq.n	8004dc8 <HAL_SPI_TransmitReceive+0x204>
 8004dc2:	8b7b      	ldrh	r3, [r7, #26]
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d16f      	bne.n	8004ea8 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	330c      	adds	r3, #12
 8004dd2:	7812      	ldrb	r2, [r2, #0]
 8004dd4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dda:	1c5a      	adds	r2, r3, #1
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	3b01      	subs	r3, #1
 8004de8:	b29a      	uxth	r2, r3
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dee:	e05b      	b.n	8004ea8 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f003 0302 	and.w	r3, r3, #2
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d11c      	bne.n	8004e38 <HAL_SPI_TransmitReceive+0x274>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d017      	beq.n	8004e38 <HAL_SPI_TransmitReceive+0x274>
 8004e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d114      	bne.n	8004e38 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	330c      	adds	r3, #12
 8004e18:	7812      	ldrb	r2, [r2, #0]
 8004e1a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e20:	1c5a      	adds	r2, r3, #1
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e34:	2300      	movs	r3, #0
 8004e36:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f003 0301 	and.w	r3, r3, #1
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d119      	bne.n	8004e7a <HAL_SPI_TransmitReceive+0x2b6>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d014      	beq.n	8004e7a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68da      	ldr	r2, [r3, #12]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5a:	b2d2      	uxtb	r2, r2
 8004e5c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e62:	1c5a      	adds	r2, r3, #1
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e76:	2301      	movs	r3, #1
 8004e78:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004e7a:	f7fd f98b 	bl	8002194 <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d803      	bhi.n	8004e92 <HAL_SPI_TransmitReceive+0x2ce>
 8004e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e90:	d102      	bne.n	8004e98 <HAL_SPI_TransmitReceive+0x2d4>
 8004e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d107      	bne.n	8004ea8 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004ea6:	e033      	b.n	8004f10 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d19e      	bne.n	8004df0 <HAL_SPI_TransmitReceive+0x22c>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d199      	bne.n	8004df0 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ebe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ec0:	68f8      	ldr	r0, [r7, #12]
 8004ec2:	f000 f8c5 	bl	8005050 <SPI_EndRxTxTransaction>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d006      	beq.n	8004eda <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2220      	movs	r2, #32
 8004ed6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004ed8:	e01a      	b.n	8004f10 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10a      	bne.n	8004ef8 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	617b      	str	r3, [r7, #20]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	617b      	str	r3, [r7, #20]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	617b      	str	r3, [r7, #20]
 8004ef6:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d003      	beq.n	8004f08 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f06:	e003      	b.n	8004f10 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2200      	movs	r2, #0
 8004f14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f18:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3730      	adds	r7, #48	; 0x30
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f32:	b2db      	uxtb	r3, r3
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b088      	sub	sp, #32
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	603b      	str	r3, [r7, #0]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f50:	f7fd f920 	bl	8002194 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f58:	1a9b      	subs	r3, r3, r2
 8004f5a:	683a      	ldr	r2, [r7, #0]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f60:	f7fd f918 	bl	8002194 <HAL_GetTick>
 8004f64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f66:	4b39      	ldr	r3, [pc, #228]	; (800504c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	015b      	lsls	r3, r3, #5
 8004f6c:	0d1b      	lsrs	r3, r3, #20
 8004f6e:	69fa      	ldr	r2, [r7, #28]
 8004f70:	fb02 f303 	mul.w	r3, r2, r3
 8004f74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f76:	e054      	b.n	8005022 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f7e:	d050      	beq.n	8005022 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f80:	f7fd f908 	bl	8002194 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	69fa      	ldr	r2, [r7, #28]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d902      	bls.n	8004f96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d13d      	bne.n	8005012 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	685a      	ldr	r2, [r3, #4]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004fa4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fae:	d111      	bne.n	8004fd4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fb8:	d004      	beq.n	8004fc4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fc2:	d107      	bne.n	8004fd4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fd2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fdc:	d10f      	bne.n	8004ffe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ffc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e017      	b.n	8005042 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d101      	bne.n	800501c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005018:	2300      	movs	r3, #0
 800501a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	3b01      	subs	r3, #1
 8005020:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	689a      	ldr	r2, [r3, #8]
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	4013      	ands	r3, r2
 800502c:	68ba      	ldr	r2, [r7, #8]
 800502e:	429a      	cmp	r2, r3
 8005030:	bf0c      	ite	eq
 8005032:	2301      	moveq	r3, #1
 8005034:	2300      	movne	r3, #0
 8005036:	b2db      	uxtb	r3, r3
 8005038:	461a      	mov	r2, r3
 800503a:	79fb      	ldrb	r3, [r7, #7]
 800503c:	429a      	cmp	r2, r3
 800503e:	d19b      	bne.n	8004f78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3720      	adds	r7, #32
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	20000000 	.word	0x20000000

08005050 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b088      	sub	sp, #32
 8005054:	af02      	add	r7, sp, #8
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	9300      	str	r3, [sp, #0]
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	2201      	movs	r2, #1
 8005064:	2102      	movs	r1, #2
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f7ff ff6a 	bl	8004f40 <SPI_WaitFlagStateUntilTimeout>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d007      	beq.n	8005082 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005076:	f043 0220 	orr.w	r2, r3, #32
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e032      	b.n	80050e8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005082:	4b1b      	ldr	r3, [pc, #108]	; (80050f0 <SPI_EndRxTxTransaction+0xa0>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a1b      	ldr	r2, [pc, #108]	; (80050f4 <SPI_EndRxTxTransaction+0xa4>)
 8005088:	fba2 2303 	umull	r2, r3, r2, r3
 800508c:	0d5b      	lsrs	r3, r3, #21
 800508e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005092:	fb02 f303 	mul.w	r3, r2, r3
 8005096:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050a0:	d112      	bne.n	80050c8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	9300      	str	r3, [sp, #0]
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	2200      	movs	r2, #0
 80050aa:	2180      	movs	r1, #128	; 0x80
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f7ff ff47 	bl	8004f40 <SPI_WaitFlagStateUntilTimeout>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d016      	beq.n	80050e6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050bc:	f043 0220 	orr.w	r2, r3, #32
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e00f      	b.n	80050e8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00a      	beq.n	80050e4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	3b01      	subs	r3, #1
 80050d2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050de:	2b80      	cmp	r3, #128	; 0x80
 80050e0:	d0f2      	beq.n	80050c8 <SPI_EndRxTxTransaction+0x78>
 80050e2:	e000      	b.n	80050e6 <SPI_EndRxTxTransaction+0x96>
        break;
 80050e4:	bf00      	nop
  }

  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3718      	adds	r7, #24
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	20000000 	.word	0x20000000
 80050f4:	165e9f81 	.word	0x165e9f81

080050f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d101      	bne.n	800510a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e041      	b.n	800518e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d106      	bne.n	8005124 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f839 	bl	8005196 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2202      	movs	r2, #2
 8005128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	3304      	adds	r3, #4
 8005134:	4619      	mov	r1, r3
 8005136:	4610      	mov	r0, r2
 8005138:	f000 fde8 	bl	8005d0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	3708      	adds	r7, #8
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005196:	b480      	push	{r7}
 8005198:	b083      	sub	sp, #12
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800519e:	bf00      	nop
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
	...

080051ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d001      	beq.n	80051c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e04e      	b.n	8005262 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2202      	movs	r2, #2
 80051c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68da      	ldr	r2, [r3, #12]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f042 0201 	orr.w	r2, r2, #1
 80051da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a23      	ldr	r2, [pc, #140]	; (8005270 <HAL_TIM_Base_Start_IT+0xc4>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d022      	beq.n	800522c <HAL_TIM_Base_Start_IT+0x80>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ee:	d01d      	beq.n	800522c <HAL_TIM_Base_Start_IT+0x80>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a1f      	ldr	r2, [pc, #124]	; (8005274 <HAL_TIM_Base_Start_IT+0xc8>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d018      	beq.n	800522c <HAL_TIM_Base_Start_IT+0x80>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a1e      	ldr	r2, [pc, #120]	; (8005278 <HAL_TIM_Base_Start_IT+0xcc>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d013      	beq.n	800522c <HAL_TIM_Base_Start_IT+0x80>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a1c      	ldr	r2, [pc, #112]	; (800527c <HAL_TIM_Base_Start_IT+0xd0>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d00e      	beq.n	800522c <HAL_TIM_Base_Start_IT+0x80>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a1b      	ldr	r2, [pc, #108]	; (8005280 <HAL_TIM_Base_Start_IT+0xd4>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d009      	beq.n	800522c <HAL_TIM_Base_Start_IT+0x80>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a19      	ldr	r2, [pc, #100]	; (8005284 <HAL_TIM_Base_Start_IT+0xd8>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d004      	beq.n	800522c <HAL_TIM_Base_Start_IT+0x80>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a18      	ldr	r2, [pc, #96]	; (8005288 <HAL_TIM_Base_Start_IT+0xdc>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d111      	bne.n	8005250 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f003 0307 	and.w	r3, r3, #7
 8005236:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2b06      	cmp	r3, #6
 800523c:	d010      	beq.n	8005260 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f042 0201 	orr.w	r2, r2, #1
 800524c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800524e:	e007      	b.n	8005260 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f042 0201 	orr.w	r2, r2, #1
 800525e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3714      	adds	r7, #20
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	40010000 	.word	0x40010000
 8005274:	40000400 	.word	0x40000400
 8005278:	40000800 	.word	0x40000800
 800527c:	40000c00 	.word	0x40000c00
 8005280:	40010400 	.word	0x40010400
 8005284:	40014000 	.word	0x40014000
 8005288:	40001800 	.word	0x40001800

0800528c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d101      	bne.n	800529e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e041      	b.n	8005322 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d106      	bne.n	80052b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f7fc fc78 	bl	8001ba8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2202      	movs	r2, #2
 80052bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	3304      	adds	r3, #4
 80052c8:	4619      	mov	r1, r3
 80052ca:	4610      	mov	r0, r2
 80052cc:	f000 fd1e 	bl	8005d0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3708      	adds	r7, #8
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
	...

0800532c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d109      	bne.n	8005350 <HAL_TIM_PWM_Start+0x24>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005342:	b2db      	uxtb	r3, r3
 8005344:	2b01      	cmp	r3, #1
 8005346:	bf14      	ite	ne
 8005348:	2301      	movne	r3, #1
 800534a:	2300      	moveq	r3, #0
 800534c:	b2db      	uxtb	r3, r3
 800534e:	e022      	b.n	8005396 <HAL_TIM_PWM_Start+0x6a>
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	2b04      	cmp	r3, #4
 8005354:	d109      	bne.n	800536a <HAL_TIM_PWM_Start+0x3e>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b01      	cmp	r3, #1
 8005360:	bf14      	ite	ne
 8005362:	2301      	movne	r3, #1
 8005364:	2300      	moveq	r3, #0
 8005366:	b2db      	uxtb	r3, r3
 8005368:	e015      	b.n	8005396 <HAL_TIM_PWM_Start+0x6a>
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	2b08      	cmp	r3, #8
 800536e:	d109      	bne.n	8005384 <HAL_TIM_PWM_Start+0x58>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005376:	b2db      	uxtb	r3, r3
 8005378:	2b01      	cmp	r3, #1
 800537a:	bf14      	ite	ne
 800537c:	2301      	movne	r3, #1
 800537e:	2300      	moveq	r3, #0
 8005380:	b2db      	uxtb	r3, r3
 8005382:	e008      	b.n	8005396 <HAL_TIM_PWM_Start+0x6a>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800538a:	b2db      	uxtb	r3, r3
 800538c:	2b01      	cmp	r3, #1
 800538e:	bf14      	ite	ne
 8005390:	2301      	movne	r3, #1
 8005392:	2300      	moveq	r3, #0
 8005394:	b2db      	uxtb	r3, r3
 8005396:	2b00      	cmp	r3, #0
 8005398:	d001      	beq.n	800539e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e07c      	b.n	8005498 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d104      	bne.n	80053ae <HAL_TIM_PWM_Start+0x82>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2202      	movs	r2, #2
 80053a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053ac:	e013      	b.n	80053d6 <HAL_TIM_PWM_Start+0xaa>
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	2b04      	cmp	r3, #4
 80053b2:	d104      	bne.n	80053be <HAL_TIM_PWM_Start+0x92>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2202      	movs	r2, #2
 80053b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053bc:	e00b      	b.n	80053d6 <HAL_TIM_PWM_Start+0xaa>
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	2b08      	cmp	r3, #8
 80053c2:	d104      	bne.n	80053ce <HAL_TIM_PWM_Start+0xa2>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2202      	movs	r2, #2
 80053c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053cc:	e003      	b.n	80053d6 <HAL_TIM_PWM_Start+0xaa>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2202      	movs	r2, #2
 80053d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2201      	movs	r2, #1
 80053dc:	6839      	ldr	r1, [r7, #0]
 80053de:	4618      	mov	r0, r3
 80053e0:	f001 f81a 	bl	8006418 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a2d      	ldr	r2, [pc, #180]	; (80054a0 <HAL_TIM_PWM_Start+0x174>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d004      	beq.n	80053f8 <HAL_TIM_PWM_Start+0xcc>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a2c      	ldr	r2, [pc, #176]	; (80054a4 <HAL_TIM_PWM_Start+0x178>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d101      	bne.n	80053fc <HAL_TIM_PWM_Start+0xd0>
 80053f8:	2301      	movs	r3, #1
 80053fa:	e000      	b.n	80053fe <HAL_TIM_PWM_Start+0xd2>
 80053fc:	2300      	movs	r3, #0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d007      	beq.n	8005412 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005410:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a22      	ldr	r2, [pc, #136]	; (80054a0 <HAL_TIM_PWM_Start+0x174>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d022      	beq.n	8005462 <HAL_TIM_PWM_Start+0x136>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005424:	d01d      	beq.n	8005462 <HAL_TIM_PWM_Start+0x136>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a1f      	ldr	r2, [pc, #124]	; (80054a8 <HAL_TIM_PWM_Start+0x17c>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d018      	beq.n	8005462 <HAL_TIM_PWM_Start+0x136>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a1d      	ldr	r2, [pc, #116]	; (80054ac <HAL_TIM_PWM_Start+0x180>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d013      	beq.n	8005462 <HAL_TIM_PWM_Start+0x136>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a1c      	ldr	r2, [pc, #112]	; (80054b0 <HAL_TIM_PWM_Start+0x184>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d00e      	beq.n	8005462 <HAL_TIM_PWM_Start+0x136>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a16      	ldr	r2, [pc, #88]	; (80054a4 <HAL_TIM_PWM_Start+0x178>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d009      	beq.n	8005462 <HAL_TIM_PWM_Start+0x136>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a18      	ldr	r2, [pc, #96]	; (80054b4 <HAL_TIM_PWM_Start+0x188>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d004      	beq.n	8005462 <HAL_TIM_PWM_Start+0x136>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a16      	ldr	r2, [pc, #88]	; (80054b8 <HAL_TIM_PWM_Start+0x18c>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d111      	bne.n	8005486 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	f003 0307 	and.w	r3, r3, #7
 800546c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2b06      	cmp	r3, #6
 8005472:	d010      	beq.n	8005496 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f042 0201 	orr.w	r2, r2, #1
 8005482:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005484:	e007      	b.n	8005496 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f042 0201 	orr.w	r2, r2, #1
 8005494:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	40010000 	.word	0x40010000
 80054a4:	40010400 	.word	0x40010400
 80054a8:	40000400 	.word	0x40000400
 80054ac:	40000800 	.word	0x40000800
 80054b0:	40000c00 	.word	0x40000c00
 80054b4:	40014000 	.word	0x40014000
 80054b8:	40001800 	.word	0x40001800

080054bc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d101      	bne.n	80054ce <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e041      	b.n	8005552 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d106      	bne.n	80054e8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f7fc fbea 	bl	8001cbc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2202      	movs	r2, #2
 80054ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	3304      	adds	r3, #4
 80054f8:	4619      	mov	r1, r3
 80054fa:	4610      	mov	r0, r2
 80054fc:	f000 fc06 	bl	8005d0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3708      	adds	r7, #8
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
	...

0800555c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005566:	2300      	movs	r3, #0
 8005568:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d104      	bne.n	800557a <HAL_TIM_IC_Start_IT+0x1e>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005576:	b2db      	uxtb	r3, r3
 8005578:	e013      	b.n	80055a2 <HAL_TIM_IC_Start_IT+0x46>
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	2b04      	cmp	r3, #4
 800557e:	d104      	bne.n	800558a <HAL_TIM_IC_Start_IT+0x2e>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005586:	b2db      	uxtb	r3, r3
 8005588:	e00b      	b.n	80055a2 <HAL_TIM_IC_Start_IT+0x46>
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	2b08      	cmp	r3, #8
 800558e:	d104      	bne.n	800559a <HAL_TIM_IC_Start_IT+0x3e>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005596:	b2db      	uxtb	r3, r3
 8005598:	e003      	b.n	80055a2 <HAL_TIM_IC_Start_IT+0x46>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d104      	bne.n	80055b4 <HAL_TIM_IC_Start_IT+0x58>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	e013      	b.n	80055dc <HAL_TIM_IC_Start_IT+0x80>
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	2b04      	cmp	r3, #4
 80055b8:	d104      	bne.n	80055c4 <HAL_TIM_IC_Start_IT+0x68>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	e00b      	b.n	80055dc <HAL_TIM_IC_Start_IT+0x80>
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	2b08      	cmp	r3, #8
 80055c8:	d104      	bne.n	80055d4 <HAL_TIM_IC_Start_IT+0x78>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	e003      	b.n	80055dc <HAL_TIM_IC_Start_IT+0x80>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80055de:	7bbb      	ldrb	r3, [r7, #14]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d102      	bne.n	80055ea <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80055e4:	7b7b      	ldrb	r3, [r7, #13]
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d001      	beq.n	80055ee <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e0cc      	b.n	8005788 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d104      	bne.n	80055fe <HAL_TIM_IC_Start_IT+0xa2>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2202      	movs	r2, #2
 80055f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055fc:	e013      	b.n	8005626 <HAL_TIM_IC_Start_IT+0xca>
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	2b04      	cmp	r3, #4
 8005602:	d104      	bne.n	800560e <HAL_TIM_IC_Start_IT+0xb2>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2202      	movs	r2, #2
 8005608:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800560c:	e00b      	b.n	8005626 <HAL_TIM_IC_Start_IT+0xca>
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	2b08      	cmp	r3, #8
 8005612:	d104      	bne.n	800561e <HAL_TIM_IC_Start_IT+0xc2>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2202      	movs	r2, #2
 8005618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800561c:	e003      	b.n	8005626 <HAL_TIM_IC_Start_IT+0xca>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2202      	movs	r2, #2
 8005622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d104      	bne.n	8005636 <HAL_TIM_IC_Start_IT+0xda>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2202      	movs	r2, #2
 8005630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005634:	e013      	b.n	800565e <HAL_TIM_IC_Start_IT+0x102>
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	2b04      	cmp	r3, #4
 800563a:	d104      	bne.n	8005646 <HAL_TIM_IC_Start_IT+0xea>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2202      	movs	r2, #2
 8005640:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005644:	e00b      	b.n	800565e <HAL_TIM_IC_Start_IT+0x102>
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	2b08      	cmp	r3, #8
 800564a:	d104      	bne.n	8005656 <HAL_TIM_IC_Start_IT+0xfa>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2202      	movs	r2, #2
 8005650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005654:	e003      	b.n	800565e <HAL_TIM_IC_Start_IT+0x102>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2202      	movs	r2, #2
 800565a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	2b0c      	cmp	r3, #12
 8005662:	d841      	bhi.n	80056e8 <HAL_TIM_IC_Start_IT+0x18c>
 8005664:	a201      	add	r2, pc, #4	; (adr r2, 800566c <HAL_TIM_IC_Start_IT+0x110>)
 8005666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800566a:	bf00      	nop
 800566c:	080056a1 	.word	0x080056a1
 8005670:	080056e9 	.word	0x080056e9
 8005674:	080056e9 	.word	0x080056e9
 8005678:	080056e9 	.word	0x080056e9
 800567c:	080056b3 	.word	0x080056b3
 8005680:	080056e9 	.word	0x080056e9
 8005684:	080056e9 	.word	0x080056e9
 8005688:	080056e9 	.word	0x080056e9
 800568c:	080056c5 	.word	0x080056c5
 8005690:	080056e9 	.word	0x080056e9
 8005694:	080056e9 	.word	0x080056e9
 8005698:	080056e9 	.word	0x080056e9
 800569c:	080056d7 	.word	0x080056d7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68da      	ldr	r2, [r3, #12]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f042 0202 	orr.w	r2, r2, #2
 80056ae:	60da      	str	r2, [r3, #12]
      break;
 80056b0:	e01d      	b.n	80056ee <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68da      	ldr	r2, [r3, #12]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f042 0204 	orr.w	r2, r2, #4
 80056c0:	60da      	str	r2, [r3, #12]
      break;
 80056c2:	e014      	b.n	80056ee <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68da      	ldr	r2, [r3, #12]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f042 0208 	orr.w	r2, r2, #8
 80056d2:	60da      	str	r2, [r3, #12]
      break;
 80056d4:	e00b      	b.n	80056ee <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68da      	ldr	r2, [r3, #12]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f042 0210 	orr.w	r2, r2, #16
 80056e4:	60da      	str	r2, [r3, #12]
      break;
 80056e6:	e002      	b.n	80056ee <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	73fb      	strb	r3, [r7, #15]
      break;
 80056ec:	bf00      	nop
  }

  if (status == HAL_OK)
 80056ee:	7bfb      	ldrb	r3, [r7, #15]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d148      	bne.n	8005786 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2201      	movs	r2, #1
 80056fa:	6839      	ldr	r1, [r7, #0]
 80056fc:	4618      	mov	r0, r3
 80056fe:	f000 fe8b 	bl	8006418 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a22      	ldr	r2, [pc, #136]	; (8005790 <HAL_TIM_IC_Start_IT+0x234>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d022      	beq.n	8005752 <HAL_TIM_IC_Start_IT+0x1f6>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005714:	d01d      	beq.n	8005752 <HAL_TIM_IC_Start_IT+0x1f6>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a1e      	ldr	r2, [pc, #120]	; (8005794 <HAL_TIM_IC_Start_IT+0x238>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d018      	beq.n	8005752 <HAL_TIM_IC_Start_IT+0x1f6>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a1c      	ldr	r2, [pc, #112]	; (8005798 <HAL_TIM_IC_Start_IT+0x23c>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d013      	beq.n	8005752 <HAL_TIM_IC_Start_IT+0x1f6>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a1b      	ldr	r2, [pc, #108]	; (800579c <HAL_TIM_IC_Start_IT+0x240>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d00e      	beq.n	8005752 <HAL_TIM_IC_Start_IT+0x1f6>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a19      	ldr	r2, [pc, #100]	; (80057a0 <HAL_TIM_IC_Start_IT+0x244>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d009      	beq.n	8005752 <HAL_TIM_IC_Start_IT+0x1f6>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a18      	ldr	r2, [pc, #96]	; (80057a4 <HAL_TIM_IC_Start_IT+0x248>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d004      	beq.n	8005752 <HAL_TIM_IC_Start_IT+0x1f6>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a16      	ldr	r2, [pc, #88]	; (80057a8 <HAL_TIM_IC_Start_IT+0x24c>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d111      	bne.n	8005776 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	f003 0307 	and.w	r3, r3, #7
 800575c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	2b06      	cmp	r3, #6
 8005762:	d010      	beq.n	8005786 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f042 0201 	orr.w	r2, r2, #1
 8005772:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005774:	e007      	b.n	8005786 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f042 0201 	orr.w	r2, r2, #1
 8005784:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005786:	7bfb      	ldrb	r3, [r7, #15]
}
 8005788:	4618      	mov	r0, r3
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	40010000 	.word	0x40010000
 8005794:	40000400 	.word	0x40000400
 8005798:	40000800 	.word	0x40000800
 800579c:	40000c00 	.word	0x40000c00
 80057a0:	40010400 	.word	0x40010400
 80057a4:	40014000 	.word	0x40014000
 80057a8:	40001800 	.word	0x40001800

080057ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	f003 0302 	and.w	r3, r3, #2
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d020      	beq.n	8005810 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f003 0302 	and.w	r3, r3, #2
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d01b      	beq.n	8005810 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f06f 0202 	mvn.w	r2, #2
 80057e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2201      	movs	r2, #1
 80057e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	f003 0303 	and.w	r3, r3, #3
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d003      	beq.n	80057fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f006 fdea 	bl	800c3d0 <HAL_TIM_IC_CaptureCallback>
 80057fc:	e005      	b.n	800580a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 fa66 	bl	8005cd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 fa6d 	bl	8005ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	f003 0304 	and.w	r3, r3, #4
 8005816:	2b00      	cmp	r3, #0
 8005818:	d020      	beq.n	800585c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f003 0304 	and.w	r3, r3, #4
 8005820:	2b00      	cmp	r3, #0
 8005822:	d01b      	beq.n	800585c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f06f 0204 	mvn.w	r2, #4
 800582c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2202      	movs	r2, #2
 8005832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	699b      	ldr	r3, [r3, #24]
 800583a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800583e:	2b00      	cmp	r3, #0
 8005840:	d003      	beq.n	800584a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f006 fdc4 	bl	800c3d0 <HAL_TIM_IC_CaptureCallback>
 8005848:	e005      	b.n	8005856 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 fa40 	bl	8005cd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 fa47 	bl	8005ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	f003 0308 	and.w	r3, r3, #8
 8005862:	2b00      	cmp	r3, #0
 8005864:	d020      	beq.n	80058a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f003 0308 	and.w	r3, r3, #8
 800586c:	2b00      	cmp	r3, #0
 800586e:	d01b      	beq.n	80058a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f06f 0208 	mvn.w	r2, #8
 8005878:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2204      	movs	r2, #4
 800587e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	69db      	ldr	r3, [r3, #28]
 8005886:	f003 0303 	and.w	r3, r3, #3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d003      	beq.n	8005896 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f006 fd9e 	bl	800c3d0 <HAL_TIM_IC_CaptureCallback>
 8005894:	e005      	b.n	80058a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 fa1a 	bl	8005cd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 fa21 	bl	8005ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	f003 0310 	and.w	r3, r3, #16
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d020      	beq.n	80058f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f003 0310 	and.w	r3, r3, #16
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d01b      	beq.n	80058f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f06f 0210 	mvn.w	r2, #16
 80058c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2208      	movs	r2, #8
 80058ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	69db      	ldr	r3, [r3, #28]
 80058d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d003      	beq.n	80058e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f006 fd78 	bl	800c3d0 <HAL_TIM_IC_CaptureCallback>
 80058e0:	e005      	b.n	80058ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 f9f4 	bl	8005cd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 f9fb 	bl	8005ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	f003 0301 	and.w	r3, r3, #1
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00c      	beq.n	8005918 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f003 0301 	and.w	r3, r3, #1
 8005904:	2b00      	cmp	r3, #0
 8005906:	d007      	beq.n	8005918 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f06f 0201 	mvn.w	r2, #1
 8005910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f7fb fcde 	bl	80012d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00c      	beq.n	800593c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005928:	2b00      	cmp	r3, #0
 800592a:	d007      	beq.n	800593c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 fe6c 	bl	8006614 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00c      	beq.n	8005960 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800594c:	2b00      	cmp	r3, #0
 800594e:	d007      	beq.n	8005960 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 f9cc 	bl	8005cf8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	f003 0320 	and.w	r3, r3, #32
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00c      	beq.n	8005984 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f003 0320 	and.w	r3, r3, #32
 8005970:	2b00      	cmp	r3, #0
 8005972:	d007      	beq.n	8005984 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f06f 0220 	mvn.w	r2, #32
 800597c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 fe3e 	bl	8006600 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005984:	bf00      	nop
 8005986:	3710      	adds	r7, #16
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b086      	sub	sp, #24
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005998:	2300      	movs	r3, #0
 800599a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d101      	bne.n	80059aa <HAL_TIM_IC_ConfigChannel+0x1e>
 80059a6:	2302      	movs	r3, #2
 80059a8:	e088      	b.n	8005abc <HAL_TIM_IC_ConfigChannel+0x130>
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d11b      	bne.n	80059f0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80059c8:	f000 fbfc 	bl	80061c4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	699a      	ldr	r2, [r3, #24]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f022 020c 	bic.w	r2, r2, #12
 80059da:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6999      	ldr	r1, [r3, #24]
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	689a      	ldr	r2, [r3, #8]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	430a      	orrs	r2, r1
 80059ec:	619a      	str	r2, [r3, #24]
 80059ee:	e060      	b.n	8005ab2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2b04      	cmp	r3, #4
 80059f4:	d11c      	bne.n	8005a30 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005a06:	f000 fc51 	bl	80062ac <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	699a      	ldr	r2, [r3, #24]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005a18:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	6999      	ldr	r1, [r3, #24]
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	021a      	lsls	r2, r3, #8
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	430a      	orrs	r2, r1
 8005a2c:	619a      	str	r2, [r3, #24]
 8005a2e:	e040      	b.n	8005ab2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2b08      	cmp	r3, #8
 8005a34:	d11b      	bne.n	8005a6e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005a46:	f000 fc6e 	bl	8006326 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	69da      	ldr	r2, [r3, #28]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f022 020c 	bic.w	r2, r2, #12
 8005a58:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	69d9      	ldr	r1, [r3, #28]
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	689a      	ldr	r2, [r3, #8]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	61da      	str	r2, [r3, #28]
 8005a6c:	e021      	b.n	8005ab2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2b0c      	cmp	r3, #12
 8005a72:	d11c      	bne.n	8005aae <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005a84:	f000 fc8b 	bl	800639e <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	69da      	ldr	r2, [r3, #28]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005a96:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	69d9      	ldr	r1, [r3, #28]
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	021a      	lsls	r2, r3, #8
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	61da      	str	r2, [r3, #28]
 8005aac:	e001      	b.n	8005ab2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005aba:	7dfb      	ldrb	r3, [r7, #23]
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3718      	adds	r7, #24
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b086      	sub	sp, #24
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d101      	bne.n	8005ae2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005ade:	2302      	movs	r3, #2
 8005ae0:	e0ae      	b.n	8005c40 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2b0c      	cmp	r3, #12
 8005aee:	f200 809f 	bhi.w	8005c30 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005af2:	a201      	add	r2, pc, #4	; (adr r2, 8005af8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af8:	08005b2d 	.word	0x08005b2d
 8005afc:	08005c31 	.word	0x08005c31
 8005b00:	08005c31 	.word	0x08005c31
 8005b04:	08005c31 	.word	0x08005c31
 8005b08:	08005b6d 	.word	0x08005b6d
 8005b0c:	08005c31 	.word	0x08005c31
 8005b10:	08005c31 	.word	0x08005c31
 8005b14:	08005c31 	.word	0x08005c31
 8005b18:	08005baf 	.word	0x08005baf
 8005b1c:	08005c31 	.word	0x08005c31
 8005b20:	08005c31 	.word	0x08005c31
 8005b24:	08005c31 	.word	0x08005c31
 8005b28:	08005bef 	.word	0x08005bef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68b9      	ldr	r1, [r7, #8]
 8005b32:	4618      	mov	r0, r3
 8005b34:	f000 f996 	bl	8005e64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	699a      	ldr	r2, [r3, #24]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f042 0208 	orr.w	r2, r2, #8
 8005b46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	699a      	ldr	r2, [r3, #24]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f022 0204 	bic.w	r2, r2, #4
 8005b56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	6999      	ldr	r1, [r3, #24]
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	691a      	ldr	r2, [r3, #16]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	430a      	orrs	r2, r1
 8005b68:	619a      	str	r2, [r3, #24]
      break;
 8005b6a:	e064      	b.n	8005c36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68b9      	ldr	r1, [r7, #8]
 8005b72:	4618      	mov	r0, r3
 8005b74:	f000 f9e6 	bl	8005f44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	699a      	ldr	r2, [r3, #24]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	699a      	ldr	r2, [r3, #24]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	6999      	ldr	r1, [r3, #24]
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	021a      	lsls	r2, r3, #8
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	430a      	orrs	r2, r1
 8005baa:	619a      	str	r2, [r3, #24]
      break;
 8005bac:	e043      	b.n	8005c36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68b9      	ldr	r1, [r7, #8]
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f000 fa3b 	bl	8006030 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	69da      	ldr	r2, [r3, #28]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f042 0208 	orr.w	r2, r2, #8
 8005bc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	69da      	ldr	r2, [r3, #28]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f022 0204 	bic.w	r2, r2, #4
 8005bd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	69d9      	ldr	r1, [r3, #28]
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	691a      	ldr	r2, [r3, #16]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	430a      	orrs	r2, r1
 8005bea:	61da      	str	r2, [r3, #28]
      break;
 8005bec:	e023      	b.n	8005c36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68b9      	ldr	r1, [r7, #8]
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f000 fa8f 	bl	8006118 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	69da      	ldr	r2, [r3, #28]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	69da      	ldr	r2, [r3, #28]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	69d9      	ldr	r1, [r3, #28]
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	021a      	lsls	r2, r3, #8
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	430a      	orrs	r2, r1
 8005c2c:	61da      	str	r2, [r3, #28]
      break;
 8005c2e:	e002      	b.n	8005c36 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	75fb      	strb	r3, [r7, #23]
      break;
 8005c34:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3718      	adds	r7, #24
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005c52:	2300      	movs	r3, #0
 8005c54:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	2b0c      	cmp	r3, #12
 8005c5a:	d831      	bhi.n	8005cc0 <HAL_TIM_ReadCapturedValue+0x78>
 8005c5c:	a201      	add	r2, pc, #4	; (adr r2, 8005c64 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c62:	bf00      	nop
 8005c64:	08005c99 	.word	0x08005c99
 8005c68:	08005cc1 	.word	0x08005cc1
 8005c6c:	08005cc1 	.word	0x08005cc1
 8005c70:	08005cc1 	.word	0x08005cc1
 8005c74:	08005ca3 	.word	0x08005ca3
 8005c78:	08005cc1 	.word	0x08005cc1
 8005c7c:	08005cc1 	.word	0x08005cc1
 8005c80:	08005cc1 	.word	0x08005cc1
 8005c84:	08005cad 	.word	0x08005cad
 8005c88:	08005cc1 	.word	0x08005cc1
 8005c8c:	08005cc1 	.word	0x08005cc1
 8005c90:	08005cc1 	.word	0x08005cc1
 8005c94:	08005cb7 	.word	0x08005cb7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c9e:	60fb      	str	r3, [r7, #12]

      break;
 8005ca0:	e00f      	b.n	8005cc2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca8:	60fb      	str	r3, [r7, #12]

      break;
 8005caa:	e00a      	b.n	8005cc2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cb2:	60fb      	str	r3, [r7, #12]

      break;
 8005cb4:	e005      	b.n	8005cc2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cbc:	60fb      	str	r3, [r7, #12]

      break;
 8005cbe:	e000      	b.n	8005cc2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005cc0:	bf00      	nop
  }

  return tmpreg;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3714      	adds	r7, #20
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005cd8:	bf00      	nop
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005cec:	bf00      	nop
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d00:	bf00      	nop
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b085      	sub	sp, #20
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a46      	ldr	r2, [pc, #280]	; (8005e38 <TIM_Base_SetConfig+0x12c>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d013      	beq.n	8005d4c <TIM_Base_SetConfig+0x40>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d2a:	d00f      	beq.n	8005d4c <TIM_Base_SetConfig+0x40>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4a43      	ldr	r2, [pc, #268]	; (8005e3c <TIM_Base_SetConfig+0x130>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d00b      	beq.n	8005d4c <TIM_Base_SetConfig+0x40>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a42      	ldr	r2, [pc, #264]	; (8005e40 <TIM_Base_SetConfig+0x134>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d007      	beq.n	8005d4c <TIM_Base_SetConfig+0x40>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a41      	ldr	r2, [pc, #260]	; (8005e44 <TIM_Base_SetConfig+0x138>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d003      	beq.n	8005d4c <TIM_Base_SetConfig+0x40>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a40      	ldr	r2, [pc, #256]	; (8005e48 <TIM_Base_SetConfig+0x13c>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d108      	bne.n	8005d5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a35      	ldr	r2, [pc, #212]	; (8005e38 <TIM_Base_SetConfig+0x12c>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d02b      	beq.n	8005dbe <TIM_Base_SetConfig+0xb2>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d6c:	d027      	beq.n	8005dbe <TIM_Base_SetConfig+0xb2>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a32      	ldr	r2, [pc, #200]	; (8005e3c <TIM_Base_SetConfig+0x130>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d023      	beq.n	8005dbe <TIM_Base_SetConfig+0xb2>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a31      	ldr	r2, [pc, #196]	; (8005e40 <TIM_Base_SetConfig+0x134>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d01f      	beq.n	8005dbe <TIM_Base_SetConfig+0xb2>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a30      	ldr	r2, [pc, #192]	; (8005e44 <TIM_Base_SetConfig+0x138>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d01b      	beq.n	8005dbe <TIM_Base_SetConfig+0xb2>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a2f      	ldr	r2, [pc, #188]	; (8005e48 <TIM_Base_SetConfig+0x13c>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d017      	beq.n	8005dbe <TIM_Base_SetConfig+0xb2>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a2e      	ldr	r2, [pc, #184]	; (8005e4c <TIM_Base_SetConfig+0x140>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d013      	beq.n	8005dbe <TIM_Base_SetConfig+0xb2>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a2d      	ldr	r2, [pc, #180]	; (8005e50 <TIM_Base_SetConfig+0x144>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d00f      	beq.n	8005dbe <TIM_Base_SetConfig+0xb2>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a2c      	ldr	r2, [pc, #176]	; (8005e54 <TIM_Base_SetConfig+0x148>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d00b      	beq.n	8005dbe <TIM_Base_SetConfig+0xb2>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a2b      	ldr	r2, [pc, #172]	; (8005e58 <TIM_Base_SetConfig+0x14c>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d007      	beq.n	8005dbe <TIM_Base_SetConfig+0xb2>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a2a      	ldr	r2, [pc, #168]	; (8005e5c <TIM_Base_SetConfig+0x150>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d003      	beq.n	8005dbe <TIM_Base_SetConfig+0xb2>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a29      	ldr	r2, [pc, #164]	; (8005e60 <TIM_Base_SetConfig+0x154>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d108      	bne.n	8005dd0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	695b      	ldr	r3, [r3, #20]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	689a      	ldr	r2, [r3, #8]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a10      	ldr	r2, [pc, #64]	; (8005e38 <TIM_Base_SetConfig+0x12c>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d003      	beq.n	8005e04 <TIM_Base_SetConfig+0xf8>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a12      	ldr	r2, [pc, #72]	; (8005e48 <TIM_Base_SetConfig+0x13c>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d103      	bne.n	8005e0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	691a      	ldr	r2, [r3, #16]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	f003 0301 	and.w	r3, r3, #1
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d105      	bne.n	8005e2a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	f023 0201 	bic.w	r2, r3, #1
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	611a      	str	r2, [r3, #16]
  }
}
 8005e2a:	bf00      	nop
 8005e2c:	3714      	adds	r7, #20
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	40010000 	.word	0x40010000
 8005e3c:	40000400 	.word	0x40000400
 8005e40:	40000800 	.word	0x40000800
 8005e44:	40000c00 	.word	0x40000c00
 8005e48:	40010400 	.word	0x40010400
 8005e4c:	40014000 	.word	0x40014000
 8005e50:	40014400 	.word	0x40014400
 8005e54:	40014800 	.word	0x40014800
 8005e58:	40001800 	.word	0x40001800
 8005e5c:	40001c00 	.word	0x40001c00
 8005e60:	40002000 	.word	0x40002000

08005e64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b087      	sub	sp, #28
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a1b      	ldr	r3, [r3, #32]
 8005e72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6a1b      	ldr	r3, [r3, #32]
 8005e78:	f023 0201 	bic.w	r2, r3, #1
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	699b      	ldr	r3, [r3, #24]
 8005e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f023 0303 	bic.w	r3, r3, #3
 8005e9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	f023 0302 	bic.w	r3, r3, #2
 8005eac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a20      	ldr	r2, [pc, #128]	; (8005f3c <TIM_OC1_SetConfig+0xd8>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d003      	beq.n	8005ec8 <TIM_OC1_SetConfig+0x64>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a1f      	ldr	r2, [pc, #124]	; (8005f40 <TIM_OC1_SetConfig+0xdc>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d10c      	bne.n	8005ee2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	f023 0308 	bic.w	r3, r3, #8
 8005ece:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	697a      	ldr	r2, [r7, #20]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	f023 0304 	bic.w	r3, r3, #4
 8005ee0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a15      	ldr	r2, [pc, #84]	; (8005f3c <TIM_OC1_SetConfig+0xd8>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d003      	beq.n	8005ef2 <TIM_OC1_SetConfig+0x8e>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a14      	ldr	r2, [pc, #80]	; (8005f40 <TIM_OC1_SetConfig+0xdc>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d111      	bne.n	8005f16 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ef8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	695b      	ldr	r3, [r3, #20]
 8005f06:	693a      	ldr	r2, [r7, #16]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	699b      	ldr	r3, [r3, #24]
 8005f10:	693a      	ldr	r2, [r7, #16]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	693a      	ldr	r2, [r7, #16]
 8005f1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	685a      	ldr	r2, [r3, #4]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	697a      	ldr	r2, [r7, #20]
 8005f2e:	621a      	str	r2, [r3, #32]
}
 8005f30:	bf00      	nop
 8005f32:	371c      	adds	r7, #28
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr
 8005f3c:	40010000 	.word	0x40010000
 8005f40:	40010400 	.word	0x40010400

08005f44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b087      	sub	sp, #28
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a1b      	ldr	r3, [r3, #32]
 8005f52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a1b      	ldr	r3, [r3, #32]
 8005f58:	f023 0210 	bic.w	r2, r3, #16
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	699b      	ldr	r3, [r3, #24]
 8005f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	021b      	lsls	r3, r3, #8
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	f023 0320 	bic.w	r3, r3, #32
 8005f8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	011b      	lsls	r3, r3, #4
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4a22      	ldr	r2, [pc, #136]	; (8006028 <TIM_OC2_SetConfig+0xe4>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d003      	beq.n	8005fac <TIM_OC2_SetConfig+0x68>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4a21      	ldr	r2, [pc, #132]	; (800602c <TIM_OC2_SetConfig+0xe8>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d10d      	bne.n	8005fc8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	011b      	lsls	r3, r3, #4
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fc6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a17      	ldr	r2, [pc, #92]	; (8006028 <TIM_OC2_SetConfig+0xe4>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d003      	beq.n	8005fd8 <TIM_OC2_SetConfig+0x94>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a16      	ldr	r2, [pc, #88]	; (800602c <TIM_OC2_SetConfig+0xe8>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d113      	bne.n	8006000 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fe6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	695b      	ldr	r3, [r3, #20]
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	693a      	ldr	r2, [r7, #16]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	699b      	ldr	r3, [r3, #24]
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	693a      	ldr	r2, [r7, #16]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	685a      	ldr	r2, [r3, #4]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	697a      	ldr	r2, [r7, #20]
 8006018:	621a      	str	r2, [r3, #32]
}
 800601a:	bf00      	nop
 800601c:	371c      	adds	r7, #28
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	40010000 	.word	0x40010000
 800602c:	40010400 	.word	0x40010400

08006030 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006030:	b480      	push	{r7}
 8006032:	b087      	sub	sp, #28
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a1b      	ldr	r3, [r3, #32]
 800603e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6a1b      	ldr	r3, [r3, #32]
 8006044:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	69db      	ldr	r3, [r3, #28]
 8006056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800605e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f023 0303 	bic.w	r3, r3, #3
 8006066:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	4313      	orrs	r3, r2
 8006070:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006078:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	021b      	lsls	r3, r3, #8
 8006080:	697a      	ldr	r2, [r7, #20]
 8006082:	4313      	orrs	r3, r2
 8006084:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a21      	ldr	r2, [pc, #132]	; (8006110 <TIM_OC3_SetConfig+0xe0>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d003      	beq.n	8006096 <TIM_OC3_SetConfig+0x66>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a20      	ldr	r2, [pc, #128]	; (8006114 <TIM_OC3_SetConfig+0xe4>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d10d      	bne.n	80060b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800609c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	021b      	lsls	r3, r3, #8
 80060a4:	697a      	ldr	r2, [r7, #20]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a16      	ldr	r2, [pc, #88]	; (8006110 <TIM_OC3_SetConfig+0xe0>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d003      	beq.n	80060c2 <TIM_OC3_SetConfig+0x92>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4a15      	ldr	r2, [pc, #84]	; (8006114 <TIM_OC3_SetConfig+0xe4>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d113      	bne.n	80060ea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	011b      	lsls	r3, r3, #4
 80060d8:	693a      	ldr	r2, [r7, #16]
 80060da:	4313      	orrs	r3, r2
 80060dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	011b      	lsls	r3, r3, #4
 80060e4:	693a      	ldr	r2, [r7, #16]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	685a      	ldr	r2, [r3, #4]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	697a      	ldr	r2, [r7, #20]
 8006102:	621a      	str	r2, [r3, #32]
}
 8006104:	bf00      	nop
 8006106:	371c      	adds	r7, #28
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr
 8006110:	40010000 	.word	0x40010000
 8006114:	40010400 	.word	0x40010400

08006118 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006118:	b480      	push	{r7}
 800611a:	b087      	sub	sp, #28
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a1b      	ldr	r3, [r3, #32]
 8006126:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6a1b      	ldr	r3, [r3, #32]
 800612c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	69db      	ldr	r3, [r3, #28]
 800613e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800614e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	021b      	lsls	r3, r3, #8
 8006156:	68fa      	ldr	r2, [r7, #12]
 8006158:	4313      	orrs	r3, r2
 800615a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006162:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	031b      	lsls	r3, r3, #12
 800616a:	693a      	ldr	r2, [r7, #16]
 800616c:	4313      	orrs	r3, r2
 800616e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a12      	ldr	r2, [pc, #72]	; (80061bc <TIM_OC4_SetConfig+0xa4>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d003      	beq.n	8006180 <TIM_OC4_SetConfig+0x68>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a11      	ldr	r2, [pc, #68]	; (80061c0 <TIM_OC4_SetConfig+0xa8>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d109      	bne.n	8006194 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006186:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	695b      	ldr	r3, [r3, #20]
 800618c:	019b      	lsls	r3, r3, #6
 800618e:	697a      	ldr	r2, [r7, #20]
 8006190:	4313      	orrs	r3, r2
 8006192:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	697a      	ldr	r2, [r7, #20]
 8006198:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	685a      	ldr	r2, [r3, #4]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	693a      	ldr	r2, [r7, #16]
 80061ac:	621a      	str	r2, [r3, #32]
}
 80061ae:	bf00      	nop
 80061b0:	371c      	adds	r7, #28
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr
 80061ba:	bf00      	nop
 80061bc:	40010000 	.word	0x40010000
 80061c0:	40010400 	.word	0x40010400

080061c4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b087      	sub	sp, #28
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	607a      	str	r2, [r7, #4]
 80061d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6a1b      	ldr	r3, [r3, #32]
 80061d6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6a1b      	ldr	r3, [r3, #32]
 80061dc:	f023 0201 	bic.w	r2, r3, #1
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	699b      	ldr	r3, [r3, #24]
 80061e8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	4a28      	ldr	r2, [pc, #160]	; (8006290 <TIM_TI1_SetConfig+0xcc>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d01b      	beq.n	800622a <TIM_TI1_SetConfig+0x66>
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061f8:	d017      	beq.n	800622a <TIM_TI1_SetConfig+0x66>
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	4a25      	ldr	r2, [pc, #148]	; (8006294 <TIM_TI1_SetConfig+0xd0>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d013      	beq.n	800622a <TIM_TI1_SetConfig+0x66>
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	4a24      	ldr	r2, [pc, #144]	; (8006298 <TIM_TI1_SetConfig+0xd4>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d00f      	beq.n	800622a <TIM_TI1_SetConfig+0x66>
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	4a23      	ldr	r2, [pc, #140]	; (800629c <TIM_TI1_SetConfig+0xd8>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d00b      	beq.n	800622a <TIM_TI1_SetConfig+0x66>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	4a22      	ldr	r2, [pc, #136]	; (80062a0 <TIM_TI1_SetConfig+0xdc>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d007      	beq.n	800622a <TIM_TI1_SetConfig+0x66>
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	4a21      	ldr	r2, [pc, #132]	; (80062a4 <TIM_TI1_SetConfig+0xe0>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d003      	beq.n	800622a <TIM_TI1_SetConfig+0x66>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	4a20      	ldr	r2, [pc, #128]	; (80062a8 <TIM_TI1_SetConfig+0xe4>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d101      	bne.n	800622e <TIM_TI1_SetConfig+0x6a>
 800622a:	2301      	movs	r3, #1
 800622c:	e000      	b.n	8006230 <TIM_TI1_SetConfig+0x6c>
 800622e:	2300      	movs	r3, #0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d008      	beq.n	8006246 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	f023 0303 	bic.w	r3, r3, #3
 800623a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4313      	orrs	r3, r2
 8006242:	617b      	str	r3, [r7, #20]
 8006244:	e003      	b.n	800624e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	f043 0301 	orr.w	r3, r3, #1
 800624c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006254:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	011b      	lsls	r3, r3, #4
 800625a:	b2db      	uxtb	r3, r3
 800625c:	697a      	ldr	r2, [r7, #20]
 800625e:	4313      	orrs	r3, r2
 8006260:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	f023 030a 	bic.w	r3, r3, #10
 8006268:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	f003 030a 	and.w	r3, r3, #10
 8006270:	693a      	ldr	r2, [r7, #16]
 8006272:	4313      	orrs	r3, r2
 8006274:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	697a      	ldr	r2, [r7, #20]
 800627a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	621a      	str	r2, [r3, #32]
}
 8006282:	bf00      	nop
 8006284:	371c      	adds	r7, #28
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop
 8006290:	40010000 	.word	0x40010000
 8006294:	40000400 	.word	0x40000400
 8006298:	40000800 	.word	0x40000800
 800629c:	40000c00 	.word	0x40000c00
 80062a0:	40010400 	.word	0x40010400
 80062a4:	40014000 	.word	0x40014000
 80062a8:	40001800 	.word	0x40001800

080062ac <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b087      	sub	sp, #28
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	607a      	str	r2, [r7, #4]
 80062b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6a1b      	ldr	r3, [r3, #32]
 80062be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6a1b      	ldr	r3, [r3, #32]
 80062c4:	f023 0210 	bic.w	r2, r3, #16
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	699b      	ldr	r3, [r3, #24]
 80062d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	021b      	lsls	r3, r3, #8
 80062de:	693a      	ldr	r2, [r7, #16]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	031b      	lsls	r3, r3, #12
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	693a      	ldr	r2, [r7, #16]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80062fe:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	011b      	lsls	r3, r3, #4
 8006304:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006308:	697a      	ldr	r2, [r7, #20]
 800630a:	4313      	orrs	r3, r2
 800630c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	693a      	ldr	r2, [r7, #16]
 8006312:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	697a      	ldr	r2, [r7, #20]
 8006318:	621a      	str	r2, [r3, #32]
}
 800631a:	bf00      	nop
 800631c:	371c      	adds	r7, #28
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr

08006326 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006326:	b480      	push	{r7}
 8006328:	b087      	sub	sp, #28
 800632a:	af00      	add	r7, sp, #0
 800632c:	60f8      	str	r0, [r7, #12]
 800632e:	60b9      	str	r1, [r7, #8]
 8006330:	607a      	str	r2, [r7, #4]
 8006332:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6a1b      	ldr	r3, [r3, #32]
 8006338:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6a1b      	ldr	r3, [r3, #32]
 800633e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	69db      	ldr	r3, [r3, #28]
 800634a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	f023 0303 	bic.w	r3, r3, #3
 8006352:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006354:	693a      	ldr	r2, [r7, #16]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4313      	orrs	r3, r2
 800635a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006362:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	011b      	lsls	r3, r3, #4
 8006368:	b2db      	uxtb	r3, r3
 800636a:	693a      	ldr	r2, [r7, #16]
 800636c:	4313      	orrs	r3, r2
 800636e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006376:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	021b      	lsls	r3, r3, #8
 800637c:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006380:	697a      	ldr	r2, [r7, #20]
 8006382:	4313      	orrs	r3, r2
 8006384:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	621a      	str	r2, [r3, #32]
}
 8006392:	bf00      	nop
 8006394:	371c      	adds	r7, #28
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr

0800639e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800639e:	b480      	push	{r7}
 80063a0:	b087      	sub	sp, #28
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	60f8      	str	r0, [r7, #12]
 80063a6:	60b9      	str	r1, [r7, #8]
 80063a8:	607a      	str	r2, [r7, #4]
 80063aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6a1b      	ldr	r3, [r3, #32]
 80063b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	69db      	ldr	r3, [r3, #28]
 80063c2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063ca:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	021b      	lsls	r3, r3, #8
 80063d0:	693a      	ldr	r2, [r7, #16]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063dc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	031b      	lsls	r3, r3, #12
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	693a      	ldr	r2, [r7, #16]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80063f0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	031b      	lsls	r3, r3, #12
 80063f6:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	693a      	ldr	r2, [r7, #16]
 8006404:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	697a      	ldr	r2, [r7, #20]
 800640a:	621a      	str	r2, [r3, #32]
}
 800640c:	bf00      	nop
 800640e:	371c      	adds	r7, #28
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006418:	b480      	push	{r7}
 800641a:	b087      	sub	sp, #28
 800641c:	af00      	add	r7, sp, #0
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	60b9      	str	r1, [r7, #8]
 8006422:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	f003 031f 	and.w	r3, r3, #31
 800642a:	2201      	movs	r2, #1
 800642c:	fa02 f303 	lsl.w	r3, r2, r3
 8006430:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6a1a      	ldr	r2, [r3, #32]
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	43db      	mvns	r3, r3
 800643a:	401a      	ands	r2, r3
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6a1a      	ldr	r2, [r3, #32]
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	f003 031f 	and.w	r3, r3, #31
 800644a:	6879      	ldr	r1, [r7, #4]
 800644c:	fa01 f303 	lsl.w	r3, r1, r3
 8006450:	431a      	orrs	r2, r3
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	621a      	str	r2, [r3, #32]
}
 8006456:	bf00      	nop
 8006458:	371c      	adds	r7, #28
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
	...

08006464 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006464:	b480      	push	{r7}
 8006466:	b085      	sub	sp, #20
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006474:	2b01      	cmp	r3, #1
 8006476:	d101      	bne.n	800647c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006478:	2302      	movs	r3, #2
 800647a:	e05a      	b.n	8006532 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2202      	movs	r2, #2
 8006488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	68fa      	ldr	r2, [r7, #12]
 80064b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a21      	ldr	r2, [pc, #132]	; (8006540 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d022      	beq.n	8006506 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064c8:	d01d      	beq.n	8006506 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a1d      	ldr	r2, [pc, #116]	; (8006544 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d018      	beq.n	8006506 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a1b      	ldr	r2, [pc, #108]	; (8006548 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d013      	beq.n	8006506 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a1a      	ldr	r2, [pc, #104]	; (800654c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d00e      	beq.n	8006506 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a18      	ldr	r2, [pc, #96]	; (8006550 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d009      	beq.n	8006506 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a17      	ldr	r2, [pc, #92]	; (8006554 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d004      	beq.n	8006506 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a15      	ldr	r2, [pc, #84]	; (8006558 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d10c      	bne.n	8006520 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800650c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	68ba      	ldr	r2, [r7, #8]
 8006514:	4313      	orrs	r3, r2
 8006516:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68ba      	ldr	r2, [r7, #8]
 800651e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3714      	adds	r7, #20
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	40010000 	.word	0x40010000
 8006544:	40000400 	.word	0x40000400
 8006548:	40000800 	.word	0x40000800
 800654c:	40000c00 	.word	0x40000c00
 8006550:	40010400 	.word	0x40010400
 8006554:	40014000 	.word	0x40014000
 8006558:	40001800 	.word	0x40001800

0800655c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800655c:	b480      	push	{r7}
 800655e:	b085      	sub	sp, #20
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006566:	2300      	movs	r3, #0
 8006568:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006570:	2b01      	cmp	r3, #1
 8006572:	d101      	bne.n	8006578 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006574:	2302      	movs	r3, #2
 8006576:	e03d      	b.n	80065f4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	4313      	orrs	r3, r2
 800658c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	4313      	orrs	r3, r2
 800659a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	695b      	ldr	r3, [r3, #20]
 80065d0:	4313      	orrs	r3, r2
 80065d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	69db      	ldr	r3, [r3, #28]
 80065de:	4313      	orrs	r3, r2
 80065e0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065f2:	2300      	movs	r3, #0
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3714      	adds	r7, #20
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006608:	bf00      	nop
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800661c:	bf00      	nop
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d101      	bne.n	800663a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e042      	b.n	80066c0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006640:	b2db      	uxtb	r3, r3
 8006642:	2b00      	cmp	r3, #0
 8006644:	d106      	bne.n	8006654 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f7fb fca8 	bl	8001fa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2224      	movs	r2, #36	; 0x24
 8006658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	68da      	ldr	r2, [r3, #12]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800666a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 fcdb 	bl	8007028 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	691a      	ldr	r2, [r3, #16]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006680:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	695a      	ldr	r2, [r3, #20]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006690:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68da      	ldr	r2, [r3, #12]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2220      	movs	r2, #32
 80066ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2220      	movs	r2, #32
 80066b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3708      	adds	r7, #8
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	4613      	mov	r3, r2
 80066d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	2b20      	cmp	r3, #32
 80066e0:	d112      	bne.n	8006708 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d002      	beq.n	80066ee <HAL_UART_Receive_IT+0x26>
 80066e8:	88fb      	ldrh	r3, [r7, #6]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d101      	bne.n	80066f2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e00b      	b.n	800670a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2200      	movs	r2, #0
 80066f6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80066f8:	88fb      	ldrh	r3, [r7, #6]
 80066fa:	461a      	mov	r2, r3
 80066fc:	68b9      	ldr	r1, [r7, #8]
 80066fe:	68f8      	ldr	r0, [r7, #12]
 8006700:	f000 faba 	bl	8006c78 <UART_Start_Receive_IT>
 8006704:	4603      	mov	r3, r0
 8006706:	e000      	b.n	800670a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006708:	2302      	movs	r3, #2
  }
}
 800670a:	4618      	mov	r0, r3
 800670c:	3710      	adds	r7, #16
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
	...

08006714 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b0ba      	sub	sp, #232	; 0xe8
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	695b      	ldr	r3, [r3, #20]
 8006736:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800673a:	2300      	movs	r3, #0
 800673c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006740:	2300      	movs	r3, #0
 8006742:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800674a:	f003 030f 	and.w	r3, r3, #15
 800674e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006752:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006756:	2b00      	cmp	r3, #0
 8006758:	d10f      	bne.n	800677a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800675a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800675e:	f003 0320 	and.w	r3, r3, #32
 8006762:	2b00      	cmp	r3, #0
 8006764:	d009      	beq.n	800677a <HAL_UART_IRQHandler+0x66>
 8006766:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800676a:	f003 0320 	and.w	r3, r3, #32
 800676e:	2b00      	cmp	r3, #0
 8006770:	d003      	beq.n	800677a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 fb99 	bl	8006eaa <UART_Receive_IT>
      return;
 8006778:	e25b      	b.n	8006c32 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800677a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800677e:	2b00      	cmp	r3, #0
 8006780:	f000 80de 	beq.w	8006940 <HAL_UART_IRQHandler+0x22c>
 8006784:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006788:	f003 0301 	and.w	r3, r3, #1
 800678c:	2b00      	cmp	r3, #0
 800678e:	d106      	bne.n	800679e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006794:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006798:	2b00      	cmp	r3, #0
 800679a:	f000 80d1 	beq.w	8006940 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800679e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067a2:	f003 0301 	and.w	r3, r3, #1
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d00b      	beq.n	80067c2 <HAL_UART_IRQHandler+0xae>
 80067aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d005      	beq.n	80067c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ba:	f043 0201 	orr.w	r2, r3, #1
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067c6:	f003 0304 	and.w	r3, r3, #4
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00b      	beq.n	80067e6 <HAL_UART_IRQHandler+0xd2>
 80067ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067d2:	f003 0301 	and.w	r3, r3, #1
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d005      	beq.n	80067e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067de:	f043 0202 	orr.w	r2, r3, #2
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067ea:	f003 0302 	and.w	r3, r3, #2
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00b      	beq.n	800680a <HAL_UART_IRQHandler+0xf6>
 80067f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067f6:	f003 0301 	and.w	r3, r3, #1
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d005      	beq.n	800680a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006802:	f043 0204 	orr.w	r2, r3, #4
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800680a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800680e:	f003 0308 	and.w	r3, r3, #8
 8006812:	2b00      	cmp	r3, #0
 8006814:	d011      	beq.n	800683a <HAL_UART_IRQHandler+0x126>
 8006816:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800681a:	f003 0320 	and.w	r3, r3, #32
 800681e:	2b00      	cmp	r3, #0
 8006820:	d105      	bne.n	800682e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006822:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006826:	f003 0301 	and.w	r3, r3, #1
 800682a:	2b00      	cmp	r3, #0
 800682c:	d005      	beq.n	800683a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006832:	f043 0208 	orr.w	r2, r3, #8
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800683e:	2b00      	cmp	r3, #0
 8006840:	f000 81f2 	beq.w	8006c28 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006848:	f003 0320 	and.w	r3, r3, #32
 800684c:	2b00      	cmp	r3, #0
 800684e:	d008      	beq.n	8006862 <HAL_UART_IRQHandler+0x14e>
 8006850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006854:	f003 0320 	and.w	r3, r3, #32
 8006858:	2b00      	cmp	r3, #0
 800685a:	d002      	beq.n	8006862 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 fb24 	bl	8006eaa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	695b      	ldr	r3, [r3, #20]
 8006868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800686c:	2b40      	cmp	r3, #64	; 0x40
 800686e:	bf0c      	ite	eq
 8006870:	2301      	moveq	r3, #1
 8006872:	2300      	movne	r3, #0
 8006874:	b2db      	uxtb	r3, r3
 8006876:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800687e:	f003 0308 	and.w	r3, r3, #8
 8006882:	2b00      	cmp	r3, #0
 8006884:	d103      	bne.n	800688e <HAL_UART_IRQHandler+0x17a>
 8006886:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800688a:	2b00      	cmp	r3, #0
 800688c:	d04f      	beq.n	800692e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 fa2c 	bl	8006cec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	695b      	ldr	r3, [r3, #20]
 800689a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800689e:	2b40      	cmp	r3, #64	; 0x40
 80068a0:	d141      	bne.n	8006926 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	3314      	adds	r3, #20
 80068a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80068b0:	e853 3f00 	ldrex	r3, [r3]
 80068b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80068b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80068bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	3314      	adds	r3, #20
 80068ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80068ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80068d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80068da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80068de:	e841 2300 	strex	r3, r2, [r1]
 80068e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80068e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1d9      	bne.n	80068a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d013      	beq.n	800691e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068fa:	4a7e      	ldr	r2, [pc, #504]	; (8006af4 <HAL_UART_IRQHandler+0x3e0>)
 80068fc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006902:	4618      	mov	r0, r3
 8006904:	f7fb fdc8 	bl	8002498 <HAL_DMA_Abort_IT>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d016      	beq.n	800693c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006918:	4610      	mov	r0, r2
 800691a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800691c:	e00e      	b.n	800693c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 f994 	bl	8006c4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006924:	e00a      	b.n	800693c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 f990 	bl	8006c4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800692c:	e006      	b.n	800693c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 f98c 	bl	8006c4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800693a:	e175      	b.n	8006c28 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800693c:	bf00      	nop
    return;
 800693e:	e173      	b.n	8006c28 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006944:	2b01      	cmp	r3, #1
 8006946:	f040 814f 	bne.w	8006be8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800694a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800694e:	f003 0310 	and.w	r3, r3, #16
 8006952:	2b00      	cmp	r3, #0
 8006954:	f000 8148 	beq.w	8006be8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800695c:	f003 0310 	and.w	r3, r3, #16
 8006960:	2b00      	cmp	r3, #0
 8006962:	f000 8141 	beq.w	8006be8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006966:	2300      	movs	r3, #0
 8006968:	60bb      	str	r3, [r7, #8]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	60bb      	str	r3, [r7, #8]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	60bb      	str	r3, [r7, #8]
 800697a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	695b      	ldr	r3, [r3, #20]
 8006982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006986:	2b40      	cmp	r3, #64	; 0x40
 8006988:	f040 80b6 	bne.w	8006af8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006998:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800699c:	2b00      	cmp	r3, #0
 800699e:	f000 8145 	beq.w	8006c2c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80069a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80069aa:	429a      	cmp	r2, r3
 80069ac:	f080 813e 	bcs.w	8006c2c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80069b6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069bc:	69db      	ldr	r3, [r3, #28]
 80069be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069c2:	f000 8088 	beq.w	8006ad6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	330c      	adds	r3, #12
 80069cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80069d4:	e853 3f00 	ldrex	r3, [r3]
 80069d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80069dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80069e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	330c      	adds	r3, #12
 80069ee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80069f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80069f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80069fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006a02:	e841 2300 	strex	r3, r2, [r1]
 8006a06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006a0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1d9      	bne.n	80069c6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	3314      	adds	r3, #20
 8006a18:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a1c:	e853 3f00 	ldrex	r3, [r3]
 8006a20:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006a22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a24:	f023 0301 	bic.w	r3, r3, #1
 8006a28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	3314      	adds	r3, #20
 8006a32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006a36:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006a3a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a3c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006a3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006a42:	e841 2300 	strex	r3, r2, [r1]
 8006a46:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006a48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d1e1      	bne.n	8006a12 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	3314      	adds	r3, #20
 8006a54:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a58:	e853 3f00 	ldrex	r3, [r3]
 8006a5c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006a5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	3314      	adds	r3, #20
 8006a6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006a72:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006a74:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a76:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006a78:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006a7a:	e841 2300 	strex	r3, r2, [r1]
 8006a7e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006a80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d1e3      	bne.n	8006a4e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2220      	movs	r2, #32
 8006a8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	330c      	adds	r3, #12
 8006a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a9e:	e853 3f00 	ldrex	r3, [r3]
 8006aa2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006aa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006aa6:	f023 0310 	bic.w	r3, r3, #16
 8006aaa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	330c      	adds	r3, #12
 8006ab4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006ab8:	65ba      	str	r2, [r7, #88]	; 0x58
 8006aba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006abc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006abe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ac0:	e841 2300 	strex	r3, r2, [r1]
 8006ac4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006ac6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d1e3      	bne.n	8006a94 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f7fb fc71 	bl	80023b8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2202      	movs	r2, #2
 8006ada:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	1ad3      	subs	r3, r2, r3
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	4619      	mov	r1, r3
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 f8b7 	bl	8006c60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006af2:	e09b      	b.n	8006c2c <HAL_UART_IRQHandler+0x518>
 8006af4:	08006db3 	.word	0x08006db3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	1ad3      	subs	r3, r2, r3
 8006b04:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	f000 808e 	beq.w	8006c30 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006b14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	f000 8089 	beq.w	8006c30 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	330c      	adds	r3, #12
 8006b24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b28:	e853 3f00 	ldrex	r3, [r3]
 8006b2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	330c      	adds	r3, #12
 8006b3e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006b42:	647a      	str	r2, [r7, #68]	; 0x44
 8006b44:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b4a:	e841 2300 	strex	r3, r2, [r1]
 8006b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d1e3      	bne.n	8006b1e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	3314      	adds	r3, #20
 8006b5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b60:	e853 3f00 	ldrex	r3, [r3]
 8006b64:	623b      	str	r3, [r7, #32]
   return(result);
 8006b66:	6a3b      	ldr	r3, [r7, #32]
 8006b68:	f023 0301 	bic.w	r3, r3, #1
 8006b6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	3314      	adds	r3, #20
 8006b76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006b7a:	633a      	str	r2, [r7, #48]	; 0x30
 8006b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b82:	e841 2300 	strex	r3, r2, [r1]
 8006b86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1e3      	bne.n	8006b56 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2220      	movs	r2, #32
 8006b92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	330c      	adds	r3, #12
 8006ba2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	e853 3f00 	ldrex	r3, [r3]
 8006baa:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f023 0310 	bic.w	r3, r3, #16
 8006bb2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	330c      	adds	r3, #12
 8006bbc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006bc0:	61fa      	str	r2, [r7, #28]
 8006bc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc4:	69b9      	ldr	r1, [r7, #24]
 8006bc6:	69fa      	ldr	r2, [r7, #28]
 8006bc8:	e841 2300 	strex	r3, r2, [r1]
 8006bcc:	617b      	str	r3, [r7, #20]
   return(result);
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d1e3      	bne.n	8006b9c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2202      	movs	r2, #2
 8006bd8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006bda:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006bde:	4619      	mov	r1, r3
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 f83d 	bl	8006c60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006be6:	e023      	b.n	8006c30 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006be8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d009      	beq.n	8006c08 <HAL_UART_IRQHandler+0x4f4>
 8006bf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d003      	beq.n	8006c08 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 f8ea 	bl	8006dda <UART_Transmit_IT>
    return;
 8006c06:	e014      	b.n	8006c32 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006c08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d00e      	beq.n	8006c32 <HAL_UART_IRQHandler+0x51e>
 8006c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d008      	beq.n	8006c32 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 f92a 	bl	8006e7a <UART_EndTransmit_IT>
    return;
 8006c26:	e004      	b.n	8006c32 <HAL_UART_IRQHandler+0x51e>
    return;
 8006c28:	bf00      	nop
 8006c2a:	e002      	b.n	8006c32 <HAL_UART_IRQHandler+0x51e>
      return;
 8006c2c:	bf00      	nop
 8006c2e:	e000      	b.n	8006c32 <HAL_UART_IRQHandler+0x51e>
      return;
 8006c30:	bf00      	nop
  }
}
 8006c32:	37e8      	adds	r7, #232	; 0xe8
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006c40:	bf00      	nop
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006c54:	bf00      	nop
 8006c56:	370c      	adds	r7, #12
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	460b      	mov	r3, r1
 8006c6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c6c:	bf00      	nop
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b085      	sub	sp, #20
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	60b9      	str	r1, [r7, #8]
 8006c82:	4613      	mov	r3, r2
 8006c84:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	68ba      	ldr	r2, [r7, #8]
 8006c8a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	88fa      	ldrh	r2, [r7, #6]
 8006c90:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	88fa      	ldrh	r2, [r7, #6]
 8006c96:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2222      	movs	r2, #34	; 0x22
 8006ca2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d007      	beq.n	8006cbe <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68da      	ldr	r2, [r3, #12]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cbc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	695a      	ldr	r2, [r3, #20]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f042 0201 	orr.w	r2, r2, #1
 8006ccc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	68da      	ldr	r2, [r3, #12]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f042 0220 	orr.w	r2, r2, #32
 8006cdc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006cde:	2300      	movs	r3, #0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3714      	adds	r7, #20
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b095      	sub	sp, #84	; 0x54
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	330c      	adds	r3, #12
 8006cfa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cfe:	e853 3f00 	ldrex	r3, [r3]
 8006d02:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	330c      	adds	r3, #12
 8006d12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006d14:	643a      	str	r2, [r7, #64]	; 0x40
 8006d16:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d1c:	e841 2300 	strex	r3, r2, [r1]
 8006d20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d1e5      	bne.n	8006cf4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	3314      	adds	r3, #20
 8006d2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d30:	6a3b      	ldr	r3, [r7, #32]
 8006d32:	e853 3f00 	ldrex	r3, [r3]
 8006d36:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	f023 0301 	bic.w	r3, r3, #1
 8006d3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	3314      	adds	r3, #20
 8006d46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d48:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d50:	e841 2300 	strex	r3, r2, [r1]
 8006d54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d1e5      	bne.n	8006d28 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d119      	bne.n	8006d98 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	330c      	adds	r3, #12
 8006d6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	e853 3f00 	ldrex	r3, [r3]
 8006d72:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	f023 0310 	bic.w	r3, r3, #16
 8006d7a:	647b      	str	r3, [r7, #68]	; 0x44
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	330c      	adds	r3, #12
 8006d82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d84:	61ba      	str	r2, [r7, #24]
 8006d86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d88:	6979      	ldr	r1, [r7, #20]
 8006d8a:	69ba      	ldr	r2, [r7, #24]
 8006d8c:	e841 2300 	strex	r3, r2, [r1]
 8006d90:	613b      	str	r3, [r7, #16]
   return(result);
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d1e5      	bne.n	8006d64 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2220      	movs	r2, #32
 8006d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006da6:	bf00      	nop
 8006da8:	3754      	adds	r7, #84	; 0x54
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr

08006db2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006db2:	b580      	push	{r7, lr}
 8006db4:	b084      	sub	sp, #16
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dbe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006dcc:	68f8      	ldr	r0, [r7, #12]
 8006dce:	f7ff ff3d 	bl	8006c4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dd2:	bf00      	nop
 8006dd4:	3710      	adds	r7, #16
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}

08006dda <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006dda:	b480      	push	{r7}
 8006ddc:	b085      	sub	sp, #20
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	2b21      	cmp	r3, #33	; 0x21
 8006dec:	d13e      	bne.n	8006e6c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006df6:	d114      	bne.n	8006e22 <UART_Transmit_IT+0x48>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	691b      	ldr	r3, [r3, #16]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d110      	bne.n	8006e22 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6a1b      	ldr	r3, [r3, #32]
 8006e04:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	881b      	ldrh	r3, [r3, #0]
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e14:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a1b      	ldr	r3, [r3, #32]
 8006e1a:	1c9a      	adds	r2, r3, #2
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	621a      	str	r2, [r3, #32]
 8006e20:	e008      	b.n	8006e34 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a1b      	ldr	r3, [r3, #32]
 8006e26:	1c59      	adds	r1, r3, #1
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	6211      	str	r1, [r2, #32]
 8006e2c:	781a      	ldrb	r2, [r3, #0]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	3b01      	subs	r3, #1
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	4619      	mov	r1, r3
 8006e42:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d10f      	bne.n	8006e68 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	68da      	ldr	r2, [r3, #12]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e56:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68da      	ldr	r2, [r3, #12]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e66:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	e000      	b.n	8006e6e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006e6c:	2302      	movs	r3, #2
  }
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3714      	adds	r7, #20
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr

08006e7a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b082      	sub	sp, #8
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	68da      	ldr	r2, [r3, #12]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e90:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2220      	movs	r2, #32
 8006e96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f7ff fecc 	bl	8006c38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3708      	adds	r7, #8
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b08c      	sub	sp, #48	; 0x30
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	2b22      	cmp	r3, #34	; 0x22
 8006ebc:	f040 80ae 	bne.w	800701c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ec8:	d117      	bne.n	8006efa <UART_Receive_IT+0x50>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d113      	bne.n	8006efa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eda:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ee8:	b29a      	uxth	r2, r3
 8006eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef2:	1c9a      	adds	r2, r3, #2
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	629a      	str	r2, [r3, #40]	; 0x28
 8006ef8:	e026      	b.n	8006f48 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006efe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006f00:	2300      	movs	r3, #0
 8006f02:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f0c:	d007      	beq.n	8006f1e <UART_Receive_IT+0x74>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d10a      	bne.n	8006f2c <UART_Receive_IT+0x82>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d106      	bne.n	8006f2c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	b2da      	uxtb	r2, r3
 8006f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f28:	701a      	strb	r2, [r3, #0]
 8006f2a:	e008      	b.n	8006f3e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f38:	b2da      	uxtb	r2, r3
 8006f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f3c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f42:	1c5a      	adds	r2, r3, #1
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	4619      	mov	r1, r3
 8006f56:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d15d      	bne.n	8007018 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	68da      	ldr	r2, [r3, #12]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f022 0220 	bic.w	r2, r2, #32
 8006f6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	68da      	ldr	r2, [r3, #12]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	695a      	ldr	r2, [r3, #20]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f022 0201 	bic.w	r2, r2, #1
 8006f8a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2220      	movs	r2, #32
 8006f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d135      	bne.n	800700e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	330c      	adds	r3, #12
 8006fae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	e853 3f00 	ldrex	r3, [r3]
 8006fb6:	613b      	str	r3, [r7, #16]
   return(result);
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	f023 0310 	bic.w	r3, r3, #16
 8006fbe:	627b      	str	r3, [r7, #36]	; 0x24
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	330c      	adds	r3, #12
 8006fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fc8:	623a      	str	r2, [r7, #32]
 8006fca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fcc:	69f9      	ldr	r1, [r7, #28]
 8006fce:	6a3a      	ldr	r2, [r7, #32]
 8006fd0:	e841 2300 	strex	r3, r2, [r1]
 8006fd4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006fd6:	69bb      	ldr	r3, [r7, #24]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d1e5      	bne.n	8006fa8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f003 0310 	and.w	r3, r3, #16
 8006fe6:	2b10      	cmp	r3, #16
 8006fe8:	d10a      	bne.n	8007000 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006fea:	2300      	movs	r3, #0
 8006fec:	60fb      	str	r3, [r7, #12]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	60fb      	str	r3, [r7, #12]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	60fb      	str	r3, [r7, #12]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007004:	4619      	mov	r1, r3
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f7ff fe2a 	bl	8006c60 <HAL_UARTEx_RxEventCallback>
 800700c:	e002      	b.n	8007014 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f7fb f84e 	bl	80020b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007014:	2300      	movs	r3, #0
 8007016:	e002      	b.n	800701e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007018:	2300      	movs	r3, #0
 800701a:	e000      	b.n	800701e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800701c:	2302      	movs	r3, #2
  }
}
 800701e:	4618      	mov	r0, r3
 8007020:	3730      	adds	r7, #48	; 0x30
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
	...

08007028 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800702c:	b0c0      	sub	sp, #256	; 0x100
 800702e:	af00      	add	r7, sp, #0
 8007030:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007044:	68d9      	ldr	r1, [r3, #12]
 8007046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	ea40 0301 	orr.w	r3, r0, r1
 8007050:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007056:	689a      	ldr	r2, [r3, #8]
 8007058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	431a      	orrs	r2, r3
 8007060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007064:	695b      	ldr	r3, [r3, #20]
 8007066:	431a      	orrs	r2, r3
 8007068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800706c:	69db      	ldr	r3, [r3, #28]
 800706e:	4313      	orrs	r3, r2
 8007070:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007080:	f021 010c 	bic.w	r1, r1, #12
 8007084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800708e:	430b      	orrs	r3, r1
 8007090:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	695b      	ldr	r3, [r3, #20]
 800709a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800709e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070a2:	6999      	ldr	r1, [r3, #24]
 80070a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	ea40 0301 	orr.w	r3, r0, r1
 80070ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80070b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	4b8f      	ldr	r3, [pc, #572]	; (80072f4 <UART_SetConfig+0x2cc>)
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d005      	beq.n	80070c8 <UART_SetConfig+0xa0>
 80070bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	4b8d      	ldr	r3, [pc, #564]	; (80072f8 <UART_SetConfig+0x2d0>)
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d104      	bne.n	80070d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80070c8:	f7fc fe9c 	bl	8003e04 <HAL_RCC_GetPCLK2Freq>
 80070cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80070d0:	e003      	b.n	80070da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80070d2:	f7fc fe83 	bl	8003ddc <HAL_RCC_GetPCLK1Freq>
 80070d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070de:	69db      	ldr	r3, [r3, #28]
 80070e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070e4:	f040 810c 	bne.w	8007300 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80070e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070ec:	2200      	movs	r2, #0
 80070ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80070f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80070f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80070fa:	4622      	mov	r2, r4
 80070fc:	462b      	mov	r3, r5
 80070fe:	1891      	adds	r1, r2, r2
 8007100:	65b9      	str	r1, [r7, #88]	; 0x58
 8007102:	415b      	adcs	r3, r3
 8007104:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007106:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800710a:	4621      	mov	r1, r4
 800710c:	eb12 0801 	adds.w	r8, r2, r1
 8007110:	4629      	mov	r1, r5
 8007112:	eb43 0901 	adc.w	r9, r3, r1
 8007116:	f04f 0200 	mov.w	r2, #0
 800711a:	f04f 0300 	mov.w	r3, #0
 800711e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007122:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007126:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800712a:	4690      	mov	r8, r2
 800712c:	4699      	mov	r9, r3
 800712e:	4623      	mov	r3, r4
 8007130:	eb18 0303 	adds.w	r3, r8, r3
 8007134:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007138:	462b      	mov	r3, r5
 800713a:	eb49 0303 	adc.w	r3, r9, r3
 800713e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800714e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007152:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007156:	460b      	mov	r3, r1
 8007158:	18db      	adds	r3, r3, r3
 800715a:	653b      	str	r3, [r7, #80]	; 0x50
 800715c:	4613      	mov	r3, r2
 800715e:	eb42 0303 	adc.w	r3, r2, r3
 8007162:	657b      	str	r3, [r7, #84]	; 0x54
 8007164:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007168:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800716c:	f7f9 fd7c 	bl	8000c68 <__aeabi_uldivmod>
 8007170:	4602      	mov	r2, r0
 8007172:	460b      	mov	r3, r1
 8007174:	4b61      	ldr	r3, [pc, #388]	; (80072fc <UART_SetConfig+0x2d4>)
 8007176:	fba3 2302 	umull	r2, r3, r3, r2
 800717a:	095b      	lsrs	r3, r3, #5
 800717c:	011c      	lsls	r4, r3, #4
 800717e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007182:	2200      	movs	r2, #0
 8007184:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007188:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800718c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007190:	4642      	mov	r2, r8
 8007192:	464b      	mov	r3, r9
 8007194:	1891      	adds	r1, r2, r2
 8007196:	64b9      	str	r1, [r7, #72]	; 0x48
 8007198:	415b      	adcs	r3, r3
 800719a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800719c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80071a0:	4641      	mov	r1, r8
 80071a2:	eb12 0a01 	adds.w	sl, r2, r1
 80071a6:	4649      	mov	r1, r9
 80071a8:	eb43 0b01 	adc.w	fp, r3, r1
 80071ac:	f04f 0200 	mov.w	r2, #0
 80071b0:	f04f 0300 	mov.w	r3, #0
 80071b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80071b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80071bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80071c0:	4692      	mov	sl, r2
 80071c2:	469b      	mov	fp, r3
 80071c4:	4643      	mov	r3, r8
 80071c6:	eb1a 0303 	adds.w	r3, sl, r3
 80071ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80071ce:	464b      	mov	r3, r9
 80071d0:	eb4b 0303 	adc.w	r3, fp, r3
 80071d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80071d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80071e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80071e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80071ec:	460b      	mov	r3, r1
 80071ee:	18db      	adds	r3, r3, r3
 80071f0:	643b      	str	r3, [r7, #64]	; 0x40
 80071f2:	4613      	mov	r3, r2
 80071f4:	eb42 0303 	adc.w	r3, r2, r3
 80071f8:	647b      	str	r3, [r7, #68]	; 0x44
 80071fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80071fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007202:	f7f9 fd31 	bl	8000c68 <__aeabi_uldivmod>
 8007206:	4602      	mov	r2, r0
 8007208:	460b      	mov	r3, r1
 800720a:	4611      	mov	r1, r2
 800720c:	4b3b      	ldr	r3, [pc, #236]	; (80072fc <UART_SetConfig+0x2d4>)
 800720e:	fba3 2301 	umull	r2, r3, r3, r1
 8007212:	095b      	lsrs	r3, r3, #5
 8007214:	2264      	movs	r2, #100	; 0x64
 8007216:	fb02 f303 	mul.w	r3, r2, r3
 800721a:	1acb      	subs	r3, r1, r3
 800721c:	00db      	lsls	r3, r3, #3
 800721e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007222:	4b36      	ldr	r3, [pc, #216]	; (80072fc <UART_SetConfig+0x2d4>)
 8007224:	fba3 2302 	umull	r2, r3, r3, r2
 8007228:	095b      	lsrs	r3, r3, #5
 800722a:	005b      	lsls	r3, r3, #1
 800722c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007230:	441c      	add	r4, r3
 8007232:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007236:	2200      	movs	r2, #0
 8007238:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800723c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007240:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007244:	4642      	mov	r2, r8
 8007246:	464b      	mov	r3, r9
 8007248:	1891      	adds	r1, r2, r2
 800724a:	63b9      	str	r1, [r7, #56]	; 0x38
 800724c:	415b      	adcs	r3, r3
 800724e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007250:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007254:	4641      	mov	r1, r8
 8007256:	1851      	adds	r1, r2, r1
 8007258:	6339      	str	r1, [r7, #48]	; 0x30
 800725a:	4649      	mov	r1, r9
 800725c:	414b      	adcs	r3, r1
 800725e:	637b      	str	r3, [r7, #52]	; 0x34
 8007260:	f04f 0200 	mov.w	r2, #0
 8007264:	f04f 0300 	mov.w	r3, #0
 8007268:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800726c:	4659      	mov	r1, fp
 800726e:	00cb      	lsls	r3, r1, #3
 8007270:	4651      	mov	r1, sl
 8007272:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007276:	4651      	mov	r1, sl
 8007278:	00ca      	lsls	r2, r1, #3
 800727a:	4610      	mov	r0, r2
 800727c:	4619      	mov	r1, r3
 800727e:	4603      	mov	r3, r0
 8007280:	4642      	mov	r2, r8
 8007282:	189b      	adds	r3, r3, r2
 8007284:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007288:	464b      	mov	r3, r9
 800728a:	460a      	mov	r2, r1
 800728c:	eb42 0303 	adc.w	r3, r2, r3
 8007290:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80072a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80072a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80072a8:	460b      	mov	r3, r1
 80072aa:	18db      	adds	r3, r3, r3
 80072ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80072ae:	4613      	mov	r3, r2
 80072b0:	eb42 0303 	adc.w	r3, r2, r3
 80072b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80072ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80072be:	f7f9 fcd3 	bl	8000c68 <__aeabi_uldivmod>
 80072c2:	4602      	mov	r2, r0
 80072c4:	460b      	mov	r3, r1
 80072c6:	4b0d      	ldr	r3, [pc, #52]	; (80072fc <UART_SetConfig+0x2d4>)
 80072c8:	fba3 1302 	umull	r1, r3, r3, r2
 80072cc:	095b      	lsrs	r3, r3, #5
 80072ce:	2164      	movs	r1, #100	; 0x64
 80072d0:	fb01 f303 	mul.w	r3, r1, r3
 80072d4:	1ad3      	subs	r3, r2, r3
 80072d6:	00db      	lsls	r3, r3, #3
 80072d8:	3332      	adds	r3, #50	; 0x32
 80072da:	4a08      	ldr	r2, [pc, #32]	; (80072fc <UART_SetConfig+0x2d4>)
 80072dc:	fba2 2303 	umull	r2, r3, r2, r3
 80072e0:	095b      	lsrs	r3, r3, #5
 80072e2:	f003 0207 	and.w	r2, r3, #7
 80072e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4422      	add	r2, r4
 80072ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80072f0:	e106      	b.n	8007500 <UART_SetConfig+0x4d8>
 80072f2:	bf00      	nop
 80072f4:	40011000 	.word	0x40011000
 80072f8:	40011400 	.word	0x40011400
 80072fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007300:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007304:	2200      	movs	r2, #0
 8007306:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800730a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800730e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007312:	4642      	mov	r2, r8
 8007314:	464b      	mov	r3, r9
 8007316:	1891      	adds	r1, r2, r2
 8007318:	6239      	str	r1, [r7, #32]
 800731a:	415b      	adcs	r3, r3
 800731c:	627b      	str	r3, [r7, #36]	; 0x24
 800731e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007322:	4641      	mov	r1, r8
 8007324:	1854      	adds	r4, r2, r1
 8007326:	4649      	mov	r1, r9
 8007328:	eb43 0501 	adc.w	r5, r3, r1
 800732c:	f04f 0200 	mov.w	r2, #0
 8007330:	f04f 0300 	mov.w	r3, #0
 8007334:	00eb      	lsls	r3, r5, #3
 8007336:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800733a:	00e2      	lsls	r2, r4, #3
 800733c:	4614      	mov	r4, r2
 800733e:	461d      	mov	r5, r3
 8007340:	4643      	mov	r3, r8
 8007342:	18e3      	adds	r3, r4, r3
 8007344:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007348:	464b      	mov	r3, r9
 800734a:	eb45 0303 	adc.w	r3, r5, r3
 800734e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800735e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007362:	f04f 0200 	mov.w	r2, #0
 8007366:	f04f 0300 	mov.w	r3, #0
 800736a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800736e:	4629      	mov	r1, r5
 8007370:	008b      	lsls	r3, r1, #2
 8007372:	4621      	mov	r1, r4
 8007374:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007378:	4621      	mov	r1, r4
 800737a:	008a      	lsls	r2, r1, #2
 800737c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007380:	f7f9 fc72 	bl	8000c68 <__aeabi_uldivmod>
 8007384:	4602      	mov	r2, r0
 8007386:	460b      	mov	r3, r1
 8007388:	4b60      	ldr	r3, [pc, #384]	; (800750c <UART_SetConfig+0x4e4>)
 800738a:	fba3 2302 	umull	r2, r3, r3, r2
 800738e:	095b      	lsrs	r3, r3, #5
 8007390:	011c      	lsls	r4, r3, #4
 8007392:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007396:	2200      	movs	r2, #0
 8007398:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800739c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80073a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80073a4:	4642      	mov	r2, r8
 80073a6:	464b      	mov	r3, r9
 80073a8:	1891      	adds	r1, r2, r2
 80073aa:	61b9      	str	r1, [r7, #24]
 80073ac:	415b      	adcs	r3, r3
 80073ae:	61fb      	str	r3, [r7, #28]
 80073b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80073b4:	4641      	mov	r1, r8
 80073b6:	1851      	adds	r1, r2, r1
 80073b8:	6139      	str	r1, [r7, #16]
 80073ba:	4649      	mov	r1, r9
 80073bc:	414b      	adcs	r3, r1
 80073be:	617b      	str	r3, [r7, #20]
 80073c0:	f04f 0200 	mov.w	r2, #0
 80073c4:	f04f 0300 	mov.w	r3, #0
 80073c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80073cc:	4659      	mov	r1, fp
 80073ce:	00cb      	lsls	r3, r1, #3
 80073d0:	4651      	mov	r1, sl
 80073d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073d6:	4651      	mov	r1, sl
 80073d8:	00ca      	lsls	r2, r1, #3
 80073da:	4610      	mov	r0, r2
 80073dc:	4619      	mov	r1, r3
 80073de:	4603      	mov	r3, r0
 80073e0:	4642      	mov	r2, r8
 80073e2:	189b      	adds	r3, r3, r2
 80073e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80073e8:	464b      	mov	r3, r9
 80073ea:	460a      	mov	r2, r1
 80073ec:	eb42 0303 	adc.w	r3, r2, r3
 80073f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80073f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80073fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007400:	f04f 0200 	mov.w	r2, #0
 8007404:	f04f 0300 	mov.w	r3, #0
 8007408:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800740c:	4649      	mov	r1, r9
 800740e:	008b      	lsls	r3, r1, #2
 8007410:	4641      	mov	r1, r8
 8007412:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007416:	4641      	mov	r1, r8
 8007418:	008a      	lsls	r2, r1, #2
 800741a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800741e:	f7f9 fc23 	bl	8000c68 <__aeabi_uldivmod>
 8007422:	4602      	mov	r2, r0
 8007424:	460b      	mov	r3, r1
 8007426:	4611      	mov	r1, r2
 8007428:	4b38      	ldr	r3, [pc, #224]	; (800750c <UART_SetConfig+0x4e4>)
 800742a:	fba3 2301 	umull	r2, r3, r3, r1
 800742e:	095b      	lsrs	r3, r3, #5
 8007430:	2264      	movs	r2, #100	; 0x64
 8007432:	fb02 f303 	mul.w	r3, r2, r3
 8007436:	1acb      	subs	r3, r1, r3
 8007438:	011b      	lsls	r3, r3, #4
 800743a:	3332      	adds	r3, #50	; 0x32
 800743c:	4a33      	ldr	r2, [pc, #204]	; (800750c <UART_SetConfig+0x4e4>)
 800743e:	fba2 2303 	umull	r2, r3, r2, r3
 8007442:	095b      	lsrs	r3, r3, #5
 8007444:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007448:	441c      	add	r4, r3
 800744a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800744e:	2200      	movs	r2, #0
 8007450:	673b      	str	r3, [r7, #112]	; 0x70
 8007452:	677a      	str	r2, [r7, #116]	; 0x74
 8007454:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007458:	4642      	mov	r2, r8
 800745a:	464b      	mov	r3, r9
 800745c:	1891      	adds	r1, r2, r2
 800745e:	60b9      	str	r1, [r7, #8]
 8007460:	415b      	adcs	r3, r3
 8007462:	60fb      	str	r3, [r7, #12]
 8007464:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007468:	4641      	mov	r1, r8
 800746a:	1851      	adds	r1, r2, r1
 800746c:	6039      	str	r1, [r7, #0]
 800746e:	4649      	mov	r1, r9
 8007470:	414b      	adcs	r3, r1
 8007472:	607b      	str	r3, [r7, #4]
 8007474:	f04f 0200 	mov.w	r2, #0
 8007478:	f04f 0300 	mov.w	r3, #0
 800747c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007480:	4659      	mov	r1, fp
 8007482:	00cb      	lsls	r3, r1, #3
 8007484:	4651      	mov	r1, sl
 8007486:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800748a:	4651      	mov	r1, sl
 800748c:	00ca      	lsls	r2, r1, #3
 800748e:	4610      	mov	r0, r2
 8007490:	4619      	mov	r1, r3
 8007492:	4603      	mov	r3, r0
 8007494:	4642      	mov	r2, r8
 8007496:	189b      	adds	r3, r3, r2
 8007498:	66bb      	str	r3, [r7, #104]	; 0x68
 800749a:	464b      	mov	r3, r9
 800749c:	460a      	mov	r2, r1
 800749e:	eb42 0303 	adc.w	r3, r2, r3
 80074a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80074a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	663b      	str	r3, [r7, #96]	; 0x60
 80074ae:	667a      	str	r2, [r7, #100]	; 0x64
 80074b0:	f04f 0200 	mov.w	r2, #0
 80074b4:	f04f 0300 	mov.w	r3, #0
 80074b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80074bc:	4649      	mov	r1, r9
 80074be:	008b      	lsls	r3, r1, #2
 80074c0:	4641      	mov	r1, r8
 80074c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074c6:	4641      	mov	r1, r8
 80074c8:	008a      	lsls	r2, r1, #2
 80074ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80074ce:	f7f9 fbcb 	bl	8000c68 <__aeabi_uldivmod>
 80074d2:	4602      	mov	r2, r0
 80074d4:	460b      	mov	r3, r1
 80074d6:	4b0d      	ldr	r3, [pc, #52]	; (800750c <UART_SetConfig+0x4e4>)
 80074d8:	fba3 1302 	umull	r1, r3, r3, r2
 80074dc:	095b      	lsrs	r3, r3, #5
 80074de:	2164      	movs	r1, #100	; 0x64
 80074e0:	fb01 f303 	mul.w	r3, r1, r3
 80074e4:	1ad3      	subs	r3, r2, r3
 80074e6:	011b      	lsls	r3, r3, #4
 80074e8:	3332      	adds	r3, #50	; 0x32
 80074ea:	4a08      	ldr	r2, [pc, #32]	; (800750c <UART_SetConfig+0x4e4>)
 80074ec:	fba2 2303 	umull	r2, r3, r2, r3
 80074f0:	095b      	lsrs	r3, r3, #5
 80074f2:	f003 020f 	and.w	r2, r3, #15
 80074f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4422      	add	r2, r4
 80074fe:	609a      	str	r2, [r3, #8]
}
 8007500:	bf00      	nop
 8007502:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007506:	46bd      	mov	sp, r7
 8007508:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800750c:	51eb851f 	.word	0x51eb851f

08007510 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007510:	b580      	push	{r7, lr}
 8007512:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007514:	4b05      	ldr	r3, [pc, #20]	; (800752c <SysTick_Handler+0x1c>)
 8007516:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007518:	f001 fcaa 	bl	8008e70 <xTaskGetSchedulerState>
 800751c:	4603      	mov	r3, r0
 800751e:	2b01      	cmp	r3, #1
 8007520:	d001      	beq.n	8007526 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007522:	f002 fa91 	bl	8009a48 <xPortSysTickHandler>
  }
}
 8007526:	bf00      	nop
 8007528:	bd80      	pop	{r7, pc}
 800752a:	bf00      	nop
 800752c:	e000e010 	.word	0xe000e010

08007530 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007530:	b480      	push	{r7}
 8007532:	b085      	sub	sp, #20
 8007534:	af00      	add	r7, sp, #0
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	4a07      	ldr	r2, [pc, #28]	; (800755c <vApplicationGetIdleTaskMemory+0x2c>)
 8007540:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	4a06      	ldr	r2, [pc, #24]	; (8007560 <vApplicationGetIdleTaskMemory+0x30>)
 8007546:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2280      	movs	r2, #128	; 0x80
 800754c:	601a      	str	r2, [r3, #0]
}
 800754e:	bf00      	nop
 8007550:	3714      	adds	r7, #20
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr
 800755a:	bf00      	nop
 800755c:	20000418 	.word	0x20000418
 8007560:	200004c0 	.word	0x200004c0

08007564 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007564:	b480      	push	{r7}
 8007566:	b085      	sub	sp, #20
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	60b9      	str	r1, [r7, #8]
 800756e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	4a07      	ldr	r2, [pc, #28]	; (8007590 <vApplicationGetTimerTaskMemory+0x2c>)
 8007574:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	4a06      	ldr	r2, [pc, #24]	; (8007594 <vApplicationGetTimerTaskMemory+0x30>)
 800757a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007582:	601a      	str	r2, [r3, #0]
}
 8007584:	bf00      	nop
 8007586:	3714      	adds	r7, #20
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr
 8007590:	200006c0 	.word	0x200006c0
 8007594:	20000768 	.word	0x20000768

08007598 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f103 0208 	add.w	r2, r3, #8
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f04f 32ff 	mov.w	r2, #4294967295
 80075b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f103 0208 	add.w	r2, r3, #8
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f103 0208 	add.w	r2, r3, #8
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80075cc:	bf00      	nop
 80075ce:	370c      	adds	r7, #12
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80075e6:	bf00      	nop
 80075e8:	370c      	adds	r7, #12
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr

080075f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80075f2:	b480      	push	{r7}
 80075f4:	b085      	sub	sp, #20
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
 80075fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	68fa      	ldr	r2, [r7, #12]
 8007606:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	689a      	ldr	r2, [r3, #8]
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	683a      	ldr	r2, [r7, #0]
 8007616:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	683a      	ldr	r2, [r7, #0]
 800761c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	1c5a      	adds	r2, r3, #1
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	601a      	str	r2, [r3, #0]
}
 800762e:	bf00      	nop
 8007630:	3714      	adds	r7, #20
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr

0800763a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800763a:	b480      	push	{r7}
 800763c:	b085      	sub	sp, #20
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
 8007642:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007650:	d103      	bne.n	800765a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	691b      	ldr	r3, [r3, #16]
 8007656:	60fb      	str	r3, [r7, #12]
 8007658:	e00c      	b.n	8007674 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	3308      	adds	r3, #8
 800765e:	60fb      	str	r3, [r7, #12]
 8007660:	e002      	b.n	8007668 <vListInsert+0x2e>
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	60fb      	str	r3, [r7, #12]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	68ba      	ldr	r2, [r7, #8]
 8007670:	429a      	cmp	r2, r3
 8007672:	d2f6      	bcs.n	8007662 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	685a      	ldr	r2, [r3, #4]
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	683a      	ldr	r2, [r7, #0]
 8007682:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	683a      	ldr	r2, [r7, #0]
 800768e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	1c5a      	adds	r2, r3, #1
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	601a      	str	r2, [r3, #0]
}
 80076a0:	bf00      	nop
 80076a2:	3714      	adds	r7, #20
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80076ac:	b480      	push	{r7}
 80076ae:	b085      	sub	sp, #20
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	691b      	ldr	r3, [r3, #16]
 80076b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	6892      	ldr	r2, [r2, #8]
 80076c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	6852      	ldr	r2, [r2, #4]
 80076cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d103      	bne.n	80076e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	689a      	ldr	r2, [r3, #8]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2200      	movs	r2, #0
 80076e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	1e5a      	subs	r2, r3, #1
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3714      	adds	r7, #20
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d10a      	bne.n	800772a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007718:	f383 8811 	msr	BASEPRI, r3
 800771c:	f3bf 8f6f 	isb	sy
 8007720:	f3bf 8f4f 	dsb	sy
 8007724:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007726:	bf00      	nop
 8007728:	e7fe      	b.n	8007728 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800772a:	f002 f8fb 	bl	8009924 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007736:	68f9      	ldr	r1, [r7, #12]
 8007738:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800773a:	fb01 f303 	mul.w	r3, r1, r3
 800773e:	441a      	add	r2, r3
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2200      	movs	r2, #0
 8007748:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800775a:	3b01      	subs	r3, #1
 800775c:	68f9      	ldr	r1, [r7, #12]
 800775e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007760:	fb01 f303 	mul.w	r3, r1, r3
 8007764:	441a      	add	r2, r3
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	22ff      	movs	r2, #255	; 0xff
 800776e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	22ff      	movs	r2, #255	; 0xff
 8007776:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d114      	bne.n	80077aa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	691b      	ldr	r3, [r3, #16]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d01a      	beq.n	80077be <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	3310      	adds	r3, #16
 800778c:	4618      	mov	r0, r3
 800778e:	f001 f9ad 	bl	8008aec <xTaskRemoveFromEventList>
 8007792:	4603      	mov	r3, r0
 8007794:	2b00      	cmp	r3, #0
 8007796:	d012      	beq.n	80077be <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007798:	4b0c      	ldr	r3, [pc, #48]	; (80077cc <xQueueGenericReset+0xcc>)
 800779a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800779e:	601a      	str	r2, [r3, #0]
 80077a0:	f3bf 8f4f 	dsb	sy
 80077a4:	f3bf 8f6f 	isb	sy
 80077a8:	e009      	b.n	80077be <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	3310      	adds	r3, #16
 80077ae:	4618      	mov	r0, r3
 80077b0:	f7ff fef2 	bl	8007598 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	3324      	adds	r3, #36	; 0x24
 80077b8:	4618      	mov	r0, r3
 80077ba:	f7ff feed 	bl	8007598 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80077be:	f002 f8e1 	bl	8009984 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80077c2:	2301      	movs	r3, #1
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3710      	adds	r7, #16
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}
 80077cc:	e000ed04 	.word	0xe000ed04

080077d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b08e      	sub	sp, #56	; 0x38
 80077d4:	af02      	add	r7, sp, #8
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	607a      	str	r2, [r7, #4]
 80077dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d10a      	bne.n	80077fa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80077e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e8:	f383 8811 	msr	BASEPRI, r3
 80077ec:	f3bf 8f6f 	isb	sy
 80077f0:	f3bf 8f4f 	dsb	sy
 80077f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80077f6:	bf00      	nop
 80077f8:	e7fe      	b.n	80077f8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d10a      	bne.n	8007816 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007804:	f383 8811 	msr	BASEPRI, r3
 8007808:	f3bf 8f6f 	isb	sy
 800780c:	f3bf 8f4f 	dsb	sy
 8007810:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007812:	bf00      	nop
 8007814:	e7fe      	b.n	8007814 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d002      	beq.n	8007822 <xQueueGenericCreateStatic+0x52>
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d001      	beq.n	8007826 <xQueueGenericCreateStatic+0x56>
 8007822:	2301      	movs	r3, #1
 8007824:	e000      	b.n	8007828 <xQueueGenericCreateStatic+0x58>
 8007826:	2300      	movs	r3, #0
 8007828:	2b00      	cmp	r3, #0
 800782a:	d10a      	bne.n	8007842 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800782c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007830:	f383 8811 	msr	BASEPRI, r3
 8007834:	f3bf 8f6f 	isb	sy
 8007838:	f3bf 8f4f 	dsb	sy
 800783c:	623b      	str	r3, [r7, #32]
}
 800783e:	bf00      	nop
 8007840:	e7fe      	b.n	8007840 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d102      	bne.n	800784e <xQueueGenericCreateStatic+0x7e>
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d101      	bne.n	8007852 <xQueueGenericCreateStatic+0x82>
 800784e:	2301      	movs	r3, #1
 8007850:	e000      	b.n	8007854 <xQueueGenericCreateStatic+0x84>
 8007852:	2300      	movs	r3, #0
 8007854:	2b00      	cmp	r3, #0
 8007856:	d10a      	bne.n	800786e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800785c:	f383 8811 	msr	BASEPRI, r3
 8007860:	f3bf 8f6f 	isb	sy
 8007864:	f3bf 8f4f 	dsb	sy
 8007868:	61fb      	str	r3, [r7, #28]
}
 800786a:	bf00      	nop
 800786c:	e7fe      	b.n	800786c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800786e:	2350      	movs	r3, #80	; 0x50
 8007870:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	2b50      	cmp	r3, #80	; 0x50
 8007876:	d00a      	beq.n	800788e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800787c:	f383 8811 	msr	BASEPRI, r3
 8007880:	f3bf 8f6f 	isb	sy
 8007884:	f3bf 8f4f 	dsb	sy
 8007888:	61bb      	str	r3, [r7, #24]
}
 800788a:	bf00      	nop
 800788c:	e7fe      	b.n	800788c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800788e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007896:	2b00      	cmp	r3, #0
 8007898:	d00d      	beq.n	80078b6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800789a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800789c:	2201      	movs	r2, #1
 800789e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80078a2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80078a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a8:	9300      	str	r3, [sp, #0]
 80078aa:	4613      	mov	r3, r2
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	68b9      	ldr	r1, [r7, #8]
 80078b0:	68f8      	ldr	r0, [r7, #12]
 80078b2:	f000 f83f 	bl	8007934 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80078b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3730      	adds	r7, #48	; 0x30
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b08a      	sub	sp, #40	; 0x28
 80078c4:	af02      	add	r7, sp, #8
 80078c6:	60f8      	str	r0, [r7, #12]
 80078c8:	60b9      	str	r1, [r7, #8]
 80078ca:	4613      	mov	r3, r2
 80078cc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d10a      	bne.n	80078ea <xQueueGenericCreate+0x2a>
	__asm volatile
 80078d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d8:	f383 8811 	msr	BASEPRI, r3
 80078dc:	f3bf 8f6f 	isb	sy
 80078e0:	f3bf 8f4f 	dsb	sy
 80078e4:	613b      	str	r3, [r7, #16]
}
 80078e6:	bf00      	nop
 80078e8:	e7fe      	b.n	80078e8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	68ba      	ldr	r2, [r7, #8]
 80078ee:	fb02 f303 	mul.w	r3, r2, r3
 80078f2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	3350      	adds	r3, #80	; 0x50
 80078f8:	4618      	mov	r0, r3
 80078fa:	f002 f935 	bl	8009b68 <pvPortMalloc>
 80078fe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007900:	69bb      	ldr	r3, [r7, #24]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d011      	beq.n	800792a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007906:	69bb      	ldr	r3, [r7, #24]
 8007908:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	3350      	adds	r3, #80	; 0x50
 800790e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007910:	69bb      	ldr	r3, [r7, #24]
 8007912:	2200      	movs	r2, #0
 8007914:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007918:	79fa      	ldrb	r2, [r7, #7]
 800791a:	69bb      	ldr	r3, [r7, #24]
 800791c:	9300      	str	r3, [sp, #0]
 800791e:	4613      	mov	r3, r2
 8007920:	697a      	ldr	r2, [r7, #20]
 8007922:	68b9      	ldr	r1, [r7, #8]
 8007924:	68f8      	ldr	r0, [r7, #12]
 8007926:	f000 f805 	bl	8007934 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800792a:	69bb      	ldr	r3, [r7, #24]
	}
 800792c:	4618      	mov	r0, r3
 800792e:	3720      	adds	r7, #32
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	60b9      	str	r1, [r7, #8]
 800793e:	607a      	str	r2, [r7, #4]
 8007940:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d103      	bne.n	8007950 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007948:	69bb      	ldr	r3, [r7, #24]
 800794a:	69ba      	ldr	r2, [r7, #24]
 800794c:	601a      	str	r2, [r3, #0]
 800794e:	e002      	b.n	8007956 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007950:	69bb      	ldr	r3, [r7, #24]
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007956:	69bb      	ldr	r3, [r7, #24]
 8007958:	68fa      	ldr	r2, [r7, #12]
 800795a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800795c:	69bb      	ldr	r3, [r7, #24]
 800795e:	68ba      	ldr	r2, [r7, #8]
 8007960:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007962:	2101      	movs	r1, #1
 8007964:	69b8      	ldr	r0, [r7, #24]
 8007966:	f7ff fecb 	bl	8007700 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800796a:	69bb      	ldr	r3, [r7, #24]
 800796c:	78fa      	ldrb	r2, [r7, #3]
 800796e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007972:	bf00      	nop
 8007974:	3710      	adds	r7, #16
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
	...

0800797c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b08e      	sub	sp, #56	; 0x38
 8007980:	af00      	add	r7, sp, #0
 8007982:	60f8      	str	r0, [r7, #12]
 8007984:	60b9      	str	r1, [r7, #8]
 8007986:	607a      	str	r2, [r7, #4]
 8007988:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800798a:	2300      	movs	r3, #0
 800798c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007994:	2b00      	cmp	r3, #0
 8007996:	d10a      	bne.n	80079ae <xQueueGenericSend+0x32>
	__asm volatile
 8007998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800799c:	f383 8811 	msr	BASEPRI, r3
 80079a0:	f3bf 8f6f 	isb	sy
 80079a4:	f3bf 8f4f 	dsb	sy
 80079a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80079aa:	bf00      	nop
 80079ac:	e7fe      	b.n	80079ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d103      	bne.n	80079bc <xQueueGenericSend+0x40>
 80079b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d101      	bne.n	80079c0 <xQueueGenericSend+0x44>
 80079bc:	2301      	movs	r3, #1
 80079be:	e000      	b.n	80079c2 <xQueueGenericSend+0x46>
 80079c0:	2300      	movs	r3, #0
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d10a      	bne.n	80079dc <xQueueGenericSend+0x60>
	__asm volatile
 80079c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ca:	f383 8811 	msr	BASEPRI, r3
 80079ce:	f3bf 8f6f 	isb	sy
 80079d2:	f3bf 8f4f 	dsb	sy
 80079d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80079d8:	bf00      	nop
 80079da:	e7fe      	b.n	80079da <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	2b02      	cmp	r3, #2
 80079e0:	d103      	bne.n	80079ea <xQueueGenericSend+0x6e>
 80079e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d101      	bne.n	80079ee <xQueueGenericSend+0x72>
 80079ea:	2301      	movs	r3, #1
 80079ec:	e000      	b.n	80079f0 <xQueueGenericSend+0x74>
 80079ee:	2300      	movs	r3, #0
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d10a      	bne.n	8007a0a <xQueueGenericSend+0x8e>
	__asm volatile
 80079f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f8:	f383 8811 	msr	BASEPRI, r3
 80079fc:	f3bf 8f6f 	isb	sy
 8007a00:	f3bf 8f4f 	dsb	sy
 8007a04:	623b      	str	r3, [r7, #32]
}
 8007a06:	bf00      	nop
 8007a08:	e7fe      	b.n	8007a08 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a0a:	f001 fa31 	bl	8008e70 <xTaskGetSchedulerState>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d102      	bne.n	8007a1a <xQueueGenericSend+0x9e>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d101      	bne.n	8007a1e <xQueueGenericSend+0xa2>
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e000      	b.n	8007a20 <xQueueGenericSend+0xa4>
 8007a1e:	2300      	movs	r3, #0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d10a      	bne.n	8007a3a <xQueueGenericSend+0xbe>
	__asm volatile
 8007a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a28:	f383 8811 	msr	BASEPRI, r3
 8007a2c:	f3bf 8f6f 	isb	sy
 8007a30:	f3bf 8f4f 	dsb	sy
 8007a34:	61fb      	str	r3, [r7, #28]
}
 8007a36:	bf00      	nop
 8007a38:	e7fe      	b.n	8007a38 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007a3a:	f001 ff73 	bl	8009924 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d302      	bcc.n	8007a50 <xQueueGenericSend+0xd4>
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	2b02      	cmp	r3, #2
 8007a4e:	d129      	bne.n	8007aa4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007a50:	683a      	ldr	r2, [r7, #0]
 8007a52:	68b9      	ldr	r1, [r7, #8]
 8007a54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a56:	f000 fa0b 	bl	8007e70 <prvCopyDataToQueue>
 8007a5a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d010      	beq.n	8007a86 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a66:	3324      	adds	r3, #36	; 0x24
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f001 f83f 	bl	8008aec <xTaskRemoveFromEventList>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d013      	beq.n	8007a9c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007a74:	4b3f      	ldr	r3, [pc, #252]	; (8007b74 <xQueueGenericSend+0x1f8>)
 8007a76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a7a:	601a      	str	r2, [r3, #0]
 8007a7c:	f3bf 8f4f 	dsb	sy
 8007a80:	f3bf 8f6f 	isb	sy
 8007a84:	e00a      	b.n	8007a9c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d007      	beq.n	8007a9c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007a8c:	4b39      	ldr	r3, [pc, #228]	; (8007b74 <xQueueGenericSend+0x1f8>)
 8007a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a92:	601a      	str	r2, [r3, #0]
 8007a94:	f3bf 8f4f 	dsb	sy
 8007a98:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007a9c:	f001 ff72 	bl	8009984 <vPortExitCritical>
				return pdPASS;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	e063      	b.n	8007b6c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d103      	bne.n	8007ab2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007aaa:	f001 ff6b 	bl	8009984 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	e05c      	b.n	8007b6c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d106      	bne.n	8007ac6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ab8:	f107 0314 	add.w	r3, r7, #20
 8007abc:	4618      	mov	r0, r3
 8007abe:	f001 f879 	bl	8008bb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007ac6:	f001 ff5d 	bl	8009984 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007aca:	f000 fde5 	bl	8008698 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ace:	f001 ff29 	bl	8009924 <vPortEnterCritical>
 8007ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ad8:	b25b      	sxtb	r3, r3
 8007ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ade:	d103      	bne.n	8007ae8 <xQueueGenericSend+0x16c>
 8007ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007aee:	b25b      	sxtb	r3, r3
 8007af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007af4:	d103      	bne.n	8007afe <xQueueGenericSend+0x182>
 8007af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af8:	2200      	movs	r2, #0
 8007afa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007afe:	f001 ff41 	bl	8009984 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b02:	1d3a      	adds	r2, r7, #4
 8007b04:	f107 0314 	add.w	r3, r7, #20
 8007b08:	4611      	mov	r1, r2
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f001 f868 	bl	8008be0 <xTaskCheckForTimeOut>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d124      	bne.n	8007b60 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007b16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b18:	f000 faa2 	bl	8008060 <prvIsQueueFull>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d018      	beq.n	8007b54 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b24:	3310      	adds	r3, #16
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	4611      	mov	r1, r2
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f000 ff8e 	bl	8008a4c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007b30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b32:	f000 fa2d 	bl	8007f90 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007b36:	f000 fdbd 	bl	80086b4 <xTaskResumeAll>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	f47f af7c 	bne.w	8007a3a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007b42:	4b0c      	ldr	r3, [pc, #48]	; (8007b74 <xQueueGenericSend+0x1f8>)
 8007b44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b48:	601a      	str	r2, [r3, #0]
 8007b4a:	f3bf 8f4f 	dsb	sy
 8007b4e:	f3bf 8f6f 	isb	sy
 8007b52:	e772      	b.n	8007a3a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007b54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b56:	f000 fa1b 	bl	8007f90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b5a:	f000 fdab 	bl	80086b4 <xTaskResumeAll>
 8007b5e:	e76c      	b.n	8007a3a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007b60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b62:	f000 fa15 	bl	8007f90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b66:	f000 fda5 	bl	80086b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007b6a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3738      	adds	r7, #56	; 0x38
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}
 8007b74:	e000ed04 	.word	0xe000ed04

08007b78 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b090      	sub	sp, #64	; 0x40
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	60b9      	str	r1, [r7, #8]
 8007b82:	607a      	str	r2, [r7, #4]
 8007b84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d10a      	bne.n	8007ba6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b94:	f383 8811 	msr	BASEPRI, r3
 8007b98:	f3bf 8f6f 	isb	sy
 8007b9c:	f3bf 8f4f 	dsb	sy
 8007ba0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007ba2:	bf00      	nop
 8007ba4:	e7fe      	b.n	8007ba4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d103      	bne.n	8007bb4 <xQueueGenericSendFromISR+0x3c>
 8007bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d101      	bne.n	8007bb8 <xQueueGenericSendFromISR+0x40>
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	e000      	b.n	8007bba <xQueueGenericSendFromISR+0x42>
 8007bb8:	2300      	movs	r3, #0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d10a      	bne.n	8007bd4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc2:	f383 8811 	msr	BASEPRI, r3
 8007bc6:	f3bf 8f6f 	isb	sy
 8007bca:	f3bf 8f4f 	dsb	sy
 8007bce:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007bd0:	bf00      	nop
 8007bd2:	e7fe      	b.n	8007bd2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	2b02      	cmp	r3, #2
 8007bd8:	d103      	bne.n	8007be2 <xQueueGenericSendFromISR+0x6a>
 8007bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d101      	bne.n	8007be6 <xQueueGenericSendFromISR+0x6e>
 8007be2:	2301      	movs	r3, #1
 8007be4:	e000      	b.n	8007be8 <xQueueGenericSendFromISR+0x70>
 8007be6:	2300      	movs	r3, #0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d10a      	bne.n	8007c02 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf0:	f383 8811 	msr	BASEPRI, r3
 8007bf4:	f3bf 8f6f 	isb	sy
 8007bf8:	f3bf 8f4f 	dsb	sy
 8007bfc:	623b      	str	r3, [r7, #32]
}
 8007bfe:	bf00      	nop
 8007c00:	e7fe      	b.n	8007c00 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007c02:	f001 ff71 	bl	8009ae8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007c06:	f3ef 8211 	mrs	r2, BASEPRI
 8007c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c0e:	f383 8811 	msr	BASEPRI, r3
 8007c12:	f3bf 8f6f 	isb	sy
 8007c16:	f3bf 8f4f 	dsb	sy
 8007c1a:	61fa      	str	r2, [r7, #28]
 8007c1c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007c1e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007c20:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d302      	bcc.n	8007c34 <xQueueGenericSendFromISR+0xbc>
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	2b02      	cmp	r3, #2
 8007c32:	d12f      	bne.n	8007c94 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c42:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007c44:	683a      	ldr	r2, [r7, #0]
 8007c46:	68b9      	ldr	r1, [r7, #8]
 8007c48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007c4a:	f000 f911 	bl	8007e70 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007c4e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c56:	d112      	bne.n	8007c7e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d016      	beq.n	8007c8e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c62:	3324      	adds	r3, #36	; 0x24
 8007c64:	4618      	mov	r0, r3
 8007c66:	f000 ff41 	bl	8008aec <xTaskRemoveFromEventList>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d00e      	beq.n	8007c8e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d00b      	beq.n	8007c8e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2201      	movs	r2, #1
 8007c7a:	601a      	str	r2, [r3, #0]
 8007c7c:	e007      	b.n	8007c8e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007c7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007c82:	3301      	adds	r3, #1
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	b25a      	sxtb	r2, r3
 8007c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007c92:	e001      	b.n	8007c98 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007c94:	2300      	movs	r3, #0
 8007c96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c9a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007ca2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3740      	adds	r7, #64	; 0x40
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
	...

08007cb0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b08c      	sub	sp, #48	; 0x30
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	60f8      	str	r0, [r7, #12]
 8007cb8:	60b9      	str	r1, [r7, #8]
 8007cba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d10a      	bne.n	8007ce0 <xQueueReceive+0x30>
	__asm volatile
 8007cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cce:	f383 8811 	msr	BASEPRI, r3
 8007cd2:	f3bf 8f6f 	isb	sy
 8007cd6:	f3bf 8f4f 	dsb	sy
 8007cda:	623b      	str	r3, [r7, #32]
}
 8007cdc:	bf00      	nop
 8007cde:	e7fe      	b.n	8007cde <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d103      	bne.n	8007cee <xQueueReceive+0x3e>
 8007ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d101      	bne.n	8007cf2 <xQueueReceive+0x42>
 8007cee:	2301      	movs	r3, #1
 8007cf0:	e000      	b.n	8007cf4 <xQueueReceive+0x44>
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d10a      	bne.n	8007d0e <xQueueReceive+0x5e>
	__asm volatile
 8007cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cfc:	f383 8811 	msr	BASEPRI, r3
 8007d00:	f3bf 8f6f 	isb	sy
 8007d04:	f3bf 8f4f 	dsb	sy
 8007d08:	61fb      	str	r3, [r7, #28]
}
 8007d0a:	bf00      	nop
 8007d0c:	e7fe      	b.n	8007d0c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d0e:	f001 f8af 	bl	8008e70 <xTaskGetSchedulerState>
 8007d12:	4603      	mov	r3, r0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d102      	bne.n	8007d1e <xQueueReceive+0x6e>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d101      	bne.n	8007d22 <xQueueReceive+0x72>
 8007d1e:	2301      	movs	r3, #1
 8007d20:	e000      	b.n	8007d24 <xQueueReceive+0x74>
 8007d22:	2300      	movs	r3, #0
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d10a      	bne.n	8007d3e <xQueueReceive+0x8e>
	__asm volatile
 8007d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d2c:	f383 8811 	msr	BASEPRI, r3
 8007d30:	f3bf 8f6f 	isb	sy
 8007d34:	f3bf 8f4f 	dsb	sy
 8007d38:	61bb      	str	r3, [r7, #24]
}
 8007d3a:	bf00      	nop
 8007d3c:	e7fe      	b.n	8007d3c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d3e:	f001 fdf1 	bl	8009924 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d46:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d01f      	beq.n	8007d8e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007d4e:	68b9      	ldr	r1, [r7, #8]
 8007d50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d52:	f000 f8f7 	bl	8007f44 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d58:	1e5a      	subs	r2, r3, #1
 8007d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d5c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d60:	691b      	ldr	r3, [r3, #16]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d00f      	beq.n	8007d86 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d68:	3310      	adds	r3, #16
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f000 febe 	bl	8008aec <xTaskRemoveFromEventList>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d007      	beq.n	8007d86 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007d76:	4b3d      	ldr	r3, [pc, #244]	; (8007e6c <xQueueReceive+0x1bc>)
 8007d78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d7c:	601a      	str	r2, [r3, #0]
 8007d7e:	f3bf 8f4f 	dsb	sy
 8007d82:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007d86:	f001 fdfd 	bl	8009984 <vPortExitCritical>
				return pdPASS;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e069      	b.n	8007e62 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d103      	bne.n	8007d9c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007d94:	f001 fdf6 	bl	8009984 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	e062      	b.n	8007e62 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d106      	bne.n	8007db0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007da2:	f107 0310 	add.w	r3, r7, #16
 8007da6:	4618      	mov	r0, r3
 8007da8:	f000 ff04 	bl	8008bb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007dac:	2301      	movs	r3, #1
 8007dae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007db0:	f001 fde8 	bl	8009984 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007db4:	f000 fc70 	bl	8008698 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007db8:	f001 fdb4 	bl	8009924 <vPortEnterCritical>
 8007dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007dc2:	b25b      	sxtb	r3, r3
 8007dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dc8:	d103      	bne.n	8007dd2 <xQueueReceive+0x122>
 8007dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dcc:	2200      	movs	r2, #0
 8007dce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007dd8:	b25b      	sxtb	r3, r3
 8007dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dde:	d103      	bne.n	8007de8 <xQueueReceive+0x138>
 8007de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de2:	2200      	movs	r2, #0
 8007de4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007de8:	f001 fdcc 	bl	8009984 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007dec:	1d3a      	adds	r2, r7, #4
 8007dee:	f107 0310 	add.w	r3, r7, #16
 8007df2:	4611      	mov	r1, r2
 8007df4:	4618      	mov	r0, r3
 8007df6:	f000 fef3 	bl	8008be0 <xTaskCheckForTimeOut>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d123      	bne.n	8007e48 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e02:	f000 f917 	bl	8008034 <prvIsQueueEmpty>
 8007e06:	4603      	mov	r3, r0
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d017      	beq.n	8007e3c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e0e:	3324      	adds	r3, #36	; 0x24
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	4611      	mov	r1, r2
 8007e14:	4618      	mov	r0, r3
 8007e16:	f000 fe19 	bl	8008a4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007e1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e1c:	f000 f8b8 	bl	8007f90 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007e20:	f000 fc48 	bl	80086b4 <xTaskResumeAll>
 8007e24:	4603      	mov	r3, r0
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d189      	bne.n	8007d3e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007e2a:	4b10      	ldr	r3, [pc, #64]	; (8007e6c <xQueueReceive+0x1bc>)
 8007e2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e30:	601a      	str	r2, [r3, #0]
 8007e32:	f3bf 8f4f 	dsb	sy
 8007e36:	f3bf 8f6f 	isb	sy
 8007e3a:	e780      	b.n	8007d3e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007e3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e3e:	f000 f8a7 	bl	8007f90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e42:	f000 fc37 	bl	80086b4 <xTaskResumeAll>
 8007e46:	e77a      	b.n	8007d3e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007e48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e4a:	f000 f8a1 	bl	8007f90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e4e:	f000 fc31 	bl	80086b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e54:	f000 f8ee 	bl	8008034 <prvIsQueueEmpty>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	f43f af6f 	beq.w	8007d3e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007e60:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3730      	adds	r7, #48	; 0x30
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	bf00      	nop
 8007e6c:	e000ed04 	.word	0xe000ed04

08007e70 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b086      	sub	sp, #24
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	60b9      	str	r1, [r7, #8]
 8007e7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e84:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d10d      	bne.n	8007eaa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d14d      	bne.n	8007f32 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f001 f806 	bl	8008eac <xTaskPriorityDisinherit>
 8007ea0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	609a      	str	r2, [r3, #8]
 8007ea8:	e043      	b.n	8007f32 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d119      	bne.n	8007ee4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	6858      	ldr	r0, [r3, #4]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb8:	461a      	mov	r2, r3
 8007eba:	68b9      	ldr	r1, [r7, #8]
 8007ebc:	f005 fc44 	bl	800d748 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	685a      	ldr	r2, [r3, #4]
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec8:	441a      	add	r2, r3
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	685a      	ldr	r2, [r3, #4]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d32b      	bcc.n	8007f32 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	605a      	str	r2, [r3, #4]
 8007ee2:	e026      	b.n	8007f32 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	68d8      	ldr	r0, [r3, #12]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eec:	461a      	mov	r2, r3
 8007eee:	68b9      	ldr	r1, [r7, #8]
 8007ef0:	f005 fc2a 	bl	800d748 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	68da      	ldr	r2, [r3, #12]
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007efc:	425b      	negs	r3, r3
 8007efe:	441a      	add	r2, r3
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	68da      	ldr	r2, [r3, #12]
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d207      	bcs.n	8007f20 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	689a      	ldr	r2, [r3, #8]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f18:	425b      	negs	r3, r3
 8007f1a:	441a      	add	r2, r3
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2b02      	cmp	r3, #2
 8007f24:	d105      	bne.n	8007f32 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d002      	beq.n	8007f32 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	3b01      	subs	r3, #1
 8007f30:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	1c5a      	adds	r2, r3, #1
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007f3a:	697b      	ldr	r3, [r7, #20]
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3718      	adds	r7, #24
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b082      	sub	sp, #8
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d018      	beq.n	8007f88 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	68da      	ldr	r2, [r3, #12]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f5e:	441a      	add	r2, r3
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	68da      	ldr	r2, [r3, #12]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d303      	bcc.n	8007f78 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	68d9      	ldr	r1, [r3, #12]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f80:	461a      	mov	r2, r3
 8007f82:	6838      	ldr	r0, [r7, #0]
 8007f84:	f005 fbe0 	bl	800d748 <memcpy>
	}
}
 8007f88:	bf00      	nop
 8007f8a:	3708      	adds	r7, #8
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007f98:	f001 fcc4 	bl	8009924 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007fa2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007fa4:	e011      	b.n	8007fca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d012      	beq.n	8007fd4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	3324      	adds	r3, #36	; 0x24
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f000 fd9a 	bl	8008aec <xTaskRemoveFromEventList>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d001      	beq.n	8007fc2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007fbe:	f000 fe71 	bl	8008ca4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007fc2:	7bfb      	ldrb	r3, [r7, #15]
 8007fc4:	3b01      	subs	r3, #1
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	dce9      	bgt.n	8007fa6 <prvUnlockQueue+0x16>
 8007fd2:	e000      	b.n	8007fd6 <prvUnlockQueue+0x46>
					break;
 8007fd4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	22ff      	movs	r2, #255	; 0xff
 8007fda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007fde:	f001 fcd1 	bl	8009984 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007fe2:	f001 fc9f 	bl	8009924 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007fec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007fee:	e011      	b.n	8008014 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	691b      	ldr	r3, [r3, #16]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d012      	beq.n	800801e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	3310      	adds	r3, #16
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f000 fd75 	bl	8008aec <xTaskRemoveFromEventList>
 8008002:	4603      	mov	r3, r0
 8008004:	2b00      	cmp	r3, #0
 8008006:	d001      	beq.n	800800c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008008:	f000 fe4c 	bl	8008ca4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800800c:	7bbb      	ldrb	r3, [r7, #14]
 800800e:	3b01      	subs	r3, #1
 8008010:	b2db      	uxtb	r3, r3
 8008012:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008014:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008018:	2b00      	cmp	r3, #0
 800801a:	dce9      	bgt.n	8007ff0 <prvUnlockQueue+0x60>
 800801c:	e000      	b.n	8008020 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800801e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	22ff      	movs	r2, #255	; 0xff
 8008024:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008028:	f001 fcac 	bl	8009984 <vPortExitCritical>
}
 800802c:	bf00      	nop
 800802e:	3710      	adds	r7, #16
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800803c:	f001 fc72 	bl	8009924 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008044:	2b00      	cmp	r3, #0
 8008046:	d102      	bne.n	800804e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008048:	2301      	movs	r3, #1
 800804a:	60fb      	str	r3, [r7, #12]
 800804c:	e001      	b.n	8008052 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800804e:	2300      	movs	r3, #0
 8008050:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008052:	f001 fc97 	bl	8009984 <vPortExitCritical>

	return xReturn;
 8008056:	68fb      	ldr	r3, [r7, #12]
}
 8008058:	4618      	mov	r0, r3
 800805a:	3710      	adds	r7, #16
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008068:	f001 fc5c 	bl	8009924 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008074:	429a      	cmp	r2, r3
 8008076:	d102      	bne.n	800807e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008078:	2301      	movs	r3, #1
 800807a:	60fb      	str	r3, [r7, #12]
 800807c:	e001      	b.n	8008082 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800807e:	2300      	movs	r3, #0
 8008080:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008082:	f001 fc7f 	bl	8009984 <vPortExitCritical>

	return xReturn;
 8008086:	68fb      	ldr	r3, [r7, #12]
}
 8008088:	4618      	mov	r0, r3
 800808a:	3710      	adds	r7, #16
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008090:	b480      	push	{r7}
 8008092:	b085      	sub	sp, #20
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800809a:	2300      	movs	r3, #0
 800809c:	60fb      	str	r3, [r7, #12]
 800809e:	e014      	b.n	80080ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80080a0:	4a0f      	ldr	r2, [pc, #60]	; (80080e0 <vQueueAddToRegistry+0x50>)
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d10b      	bne.n	80080c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80080ac:	490c      	ldr	r1, [pc, #48]	; (80080e0 <vQueueAddToRegistry+0x50>)
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	683a      	ldr	r2, [r7, #0]
 80080b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80080b6:	4a0a      	ldr	r2, [pc, #40]	; (80080e0 <vQueueAddToRegistry+0x50>)
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	00db      	lsls	r3, r3, #3
 80080bc:	4413      	add	r3, r2
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80080c2:	e006      	b.n	80080d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	3301      	adds	r3, #1
 80080c8:	60fb      	str	r3, [r7, #12]
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2b07      	cmp	r3, #7
 80080ce:	d9e7      	bls.n	80080a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80080d0:	bf00      	nop
 80080d2:	bf00      	nop
 80080d4:	3714      	adds	r7, #20
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr
 80080de:	bf00      	nop
 80080e0:	20000b68 	.word	0x20000b68

080080e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b086      	sub	sp, #24
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	60f8      	str	r0, [r7, #12]
 80080ec:	60b9      	str	r1, [r7, #8]
 80080ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80080f4:	f001 fc16 	bl	8009924 <vPortEnterCritical>
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80080fe:	b25b      	sxtb	r3, r3
 8008100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008104:	d103      	bne.n	800810e <vQueueWaitForMessageRestricted+0x2a>
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	2200      	movs	r2, #0
 800810a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008114:	b25b      	sxtb	r3, r3
 8008116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800811a:	d103      	bne.n	8008124 <vQueueWaitForMessageRestricted+0x40>
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	2200      	movs	r2, #0
 8008120:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008124:	f001 fc2e 	bl	8009984 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800812c:	2b00      	cmp	r3, #0
 800812e:	d106      	bne.n	800813e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	3324      	adds	r3, #36	; 0x24
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	68b9      	ldr	r1, [r7, #8]
 8008138:	4618      	mov	r0, r3
 800813a:	f000 fcab 	bl	8008a94 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800813e:	6978      	ldr	r0, [r7, #20]
 8008140:	f7ff ff26 	bl	8007f90 <prvUnlockQueue>
	}
 8008144:	bf00      	nop
 8008146:	3718      	adds	r7, #24
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800814c:	b580      	push	{r7, lr}
 800814e:	b08e      	sub	sp, #56	; 0x38
 8008150:	af04      	add	r7, sp, #16
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	607a      	str	r2, [r7, #4]
 8008158:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800815a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800815c:	2b00      	cmp	r3, #0
 800815e:	d10a      	bne.n	8008176 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008164:	f383 8811 	msr	BASEPRI, r3
 8008168:	f3bf 8f6f 	isb	sy
 800816c:	f3bf 8f4f 	dsb	sy
 8008170:	623b      	str	r3, [r7, #32]
}
 8008172:	bf00      	nop
 8008174:	e7fe      	b.n	8008174 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008178:	2b00      	cmp	r3, #0
 800817a:	d10a      	bne.n	8008192 <xTaskCreateStatic+0x46>
	__asm volatile
 800817c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008180:	f383 8811 	msr	BASEPRI, r3
 8008184:	f3bf 8f6f 	isb	sy
 8008188:	f3bf 8f4f 	dsb	sy
 800818c:	61fb      	str	r3, [r7, #28]
}
 800818e:	bf00      	nop
 8008190:	e7fe      	b.n	8008190 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008192:	23a8      	movs	r3, #168	; 0xa8
 8008194:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	2ba8      	cmp	r3, #168	; 0xa8
 800819a:	d00a      	beq.n	80081b2 <xTaskCreateStatic+0x66>
	__asm volatile
 800819c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a0:	f383 8811 	msr	BASEPRI, r3
 80081a4:	f3bf 8f6f 	isb	sy
 80081a8:	f3bf 8f4f 	dsb	sy
 80081ac:	61bb      	str	r3, [r7, #24]
}
 80081ae:	bf00      	nop
 80081b0:	e7fe      	b.n	80081b0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80081b2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80081b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d01e      	beq.n	80081f8 <xTaskCreateStatic+0xac>
 80081ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d01b      	beq.n	80081f8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80081c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80081c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80081ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081cc:	2202      	movs	r2, #2
 80081ce:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80081d2:	2300      	movs	r3, #0
 80081d4:	9303      	str	r3, [sp, #12]
 80081d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d8:	9302      	str	r3, [sp, #8]
 80081da:	f107 0314 	add.w	r3, r7, #20
 80081de:	9301      	str	r3, [sp, #4]
 80081e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e2:	9300      	str	r3, [sp, #0]
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	68b9      	ldr	r1, [r7, #8]
 80081ea:	68f8      	ldr	r0, [r7, #12]
 80081ec:	f000 f850 	bl	8008290 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80081f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80081f2:	f000 f8f3 	bl	80083dc <prvAddNewTaskToReadyList>
 80081f6:	e001      	b.n	80081fc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80081f8:	2300      	movs	r3, #0
 80081fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80081fc:	697b      	ldr	r3, [r7, #20]
	}
 80081fe:	4618      	mov	r0, r3
 8008200:	3728      	adds	r7, #40	; 0x28
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}

08008206 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008206:	b580      	push	{r7, lr}
 8008208:	b08c      	sub	sp, #48	; 0x30
 800820a:	af04      	add	r7, sp, #16
 800820c:	60f8      	str	r0, [r7, #12]
 800820e:	60b9      	str	r1, [r7, #8]
 8008210:	603b      	str	r3, [r7, #0]
 8008212:	4613      	mov	r3, r2
 8008214:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008216:	88fb      	ldrh	r3, [r7, #6]
 8008218:	009b      	lsls	r3, r3, #2
 800821a:	4618      	mov	r0, r3
 800821c:	f001 fca4 	bl	8009b68 <pvPortMalloc>
 8008220:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d00e      	beq.n	8008246 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008228:	20a8      	movs	r0, #168	; 0xa8
 800822a:	f001 fc9d 	bl	8009b68 <pvPortMalloc>
 800822e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008230:	69fb      	ldr	r3, [r7, #28]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d003      	beq.n	800823e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008236:	69fb      	ldr	r3, [r7, #28]
 8008238:	697a      	ldr	r2, [r7, #20]
 800823a:	631a      	str	r2, [r3, #48]	; 0x30
 800823c:	e005      	b.n	800824a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800823e:	6978      	ldr	r0, [r7, #20]
 8008240:	f001 fd5e 	bl	8009d00 <vPortFree>
 8008244:	e001      	b.n	800824a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008246:	2300      	movs	r3, #0
 8008248:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800824a:	69fb      	ldr	r3, [r7, #28]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d017      	beq.n	8008280 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008250:	69fb      	ldr	r3, [r7, #28]
 8008252:	2200      	movs	r2, #0
 8008254:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008258:	88fa      	ldrh	r2, [r7, #6]
 800825a:	2300      	movs	r3, #0
 800825c:	9303      	str	r3, [sp, #12]
 800825e:	69fb      	ldr	r3, [r7, #28]
 8008260:	9302      	str	r3, [sp, #8]
 8008262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008264:	9301      	str	r3, [sp, #4]
 8008266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008268:	9300      	str	r3, [sp, #0]
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	68b9      	ldr	r1, [r7, #8]
 800826e:	68f8      	ldr	r0, [r7, #12]
 8008270:	f000 f80e 	bl	8008290 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008274:	69f8      	ldr	r0, [r7, #28]
 8008276:	f000 f8b1 	bl	80083dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800827a:	2301      	movs	r3, #1
 800827c:	61bb      	str	r3, [r7, #24]
 800827e:	e002      	b.n	8008286 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008280:	f04f 33ff 	mov.w	r3, #4294967295
 8008284:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008286:	69bb      	ldr	r3, [r7, #24]
	}
 8008288:	4618      	mov	r0, r3
 800828a:	3720      	adds	r7, #32
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b088      	sub	sp, #32
 8008294:	af00      	add	r7, sp, #0
 8008296:	60f8      	str	r0, [r7, #12]
 8008298:	60b9      	str	r1, [r7, #8]
 800829a:	607a      	str	r2, [r7, #4]
 800829c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800829e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	009b      	lsls	r3, r3, #2
 80082a6:	461a      	mov	r2, r3
 80082a8:	21a5      	movs	r1, #165	; 0xa5
 80082aa:	f005 f9b1 	bl	800d610 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80082ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80082b8:	3b01      	subs	r3, #1
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	4413      	add	r3, r2
 80082be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80082c0:	69bb      	ldr	r3, [r7, #24]
 80082c2:	f023 0307 	bic.w	r3, r3, #7
 80082c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80082c8:	69bb      	ldr	r3, [r7, #24]
 80082ca:	f003 0307 	and.w	r3, r3, #7
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d00a      	beq.n	80082e8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80082d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d6:	f383 8811 	msr	BASEPRI, r3
 80082da:	f3bf 8f6f 	isb	sy
 80082de:	f3bf 8f4f 	dsb	sy
 80082e2:	617b      	str	r3, [r7, #20]
}
 80082e4:	bf00      	nop
 80082e6:	e7fe      	b.n	80082e6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d01f      	beq.n	800832e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80082ee:	2300      	movs	r3, #0
 80082f0:	61fb      	str	r3, [r7, #28]
 80082f2:	e012      	b.n	800831a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80082f4:	68ba      	ldr	r2, [r7, #8]
 80082f6:	69fb      	ldr	r3, [r7, #28]
 80082f8:	4413      	add	r3, r2
 80082fa:	7819      	ldrb	r1, [r3, #0]
 80082fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082fe:	69fb      	ldr	r3, [r7, #28]
 8008300:	4413      	add	r3, r2
 8008302:	3334      	adds	r3, #52	; 0x34
 8008304:	460a      	mov	r2, r1
 8008306:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008308:	68ba      	ldr	r2, [r7, #8]
 800830a:	69fb      	ldr	r3, [r7, #28]
 800830c:	4413      	add	r3, r2
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d006      	beq.n	8008322 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008314:	69fb      	ldr	r3, [r7, #28]
 8008316:	3301      	adds	r3, #1
 8008318:	61fb      	str	r3, [r7, #28]
 800831a:	69fb      	ldr	r3, [r7, #28]
 800831c:	2b0f      	cmp	r3, #15
 800831e:	d9e9      	bls.n	80082f4 <prvInitialiseNewTask+0x64>
 8008320:	e000      	b.n	8008324 <prvInitialiseNewTask+0x94>
			{
				break;
 8008322:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008326:	2200      	movs	r2, #0
 8008328:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800832c:	e003      	b.n	8008336 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800832e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008330:	2200      	movs	r2, #0
 8008332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008338:	2b37      	cmp	r3, #55	; 0x37
 800833a:	d901      	bls.n	8008340 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800833c:	2337      	movs	r3, #55	; 0x37
 800833e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008342:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008344:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008348:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800834a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800834c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800834e:	2200      	movs	r2, #0
 8008350:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008354:	3304      	adds	r3, #4
 8008356:	4618      	mov	r0, r3
 8008358:	f7ff f93e 	bl	80075d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800835c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800835e:	3318      	adds	r3, #24
 8008360:	4618      	mov	r0, r3
 8008362:	f7ff f939 	bl	80075d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008368:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800836a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800836c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800836e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008374:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800837a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800837c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800837e:	2200      	movs	r2, #0
 8008380:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008386:	2200      	movs	r2, #0
 8008388:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800838c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800838e:	3354      	adds	r3, #84	; 0x54
 8008390:	224c      	movs	r2, #76	; 0x4c
 8008392:	2100      	movs	r1, #0
 8008394:	4618      	mov	r0, r3
 8008396:	f005 f93b 	bl	800d610 <memset>
 800839a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800839c:	4a0c      	ldr	r2, [pc, #48]	; (80083d0 <prvInitialiseNewTask+0x140>)
 800839e:	659a      	str	r2, [r3, #88]	; 0x58
 80083a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a2:	4a0c      	ldr	r2, [pc, #48]	; (80083d4 <prvInitialiseNewTask+0x144>)
 80083a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80083a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a8:	4a0b      	ldr	r2, [pc, #44]	; (80083d8 <prvInitialiseNewTask+0x148>)
 80083aa:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80083ac:	683a      	ldr	r2, [r7, #0]
 80083ae:	68f9      	ldr	r1, [r7, #12]
 80083b0:	69b8      	ldr	r0, [r7, #24]
 80083b2:	f001 f98b 	bl	80096cc <pxPortInitialiseStack>
 80083b6:	4602      	mov	r2, r0
 80083b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ba:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80083bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d002      	beq.n	80083c8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80083c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083c6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80083c8:	bf00      	nop
 80083ca:	3720      	adds	r7, #32
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}
 80083d0:	200053e8 	.word	0x200053e8
 80083d4:	20005450 	.word	0x20005450
 80083d8:	200054b8 	.word	0x200054b8

080083dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b082      	sub	sp, #8
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80083e4:	f001 fa9e 	bl	8009924 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80083e8:	4b2d      	ldr	r3, [pc, #180]	; (80084a0 <prvAddNewTaskToReadyList+0xc4>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	3301      	adds	r3, #1
 80083ee:	4a2c      	ldr	r2, [pc, #176]	; (80084a0 <prvAddNewTaskToReadyList+0xc4>)
 80083f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80083f2:	4b2c      	ldr	r3, [pc, #176]	; (80084a4 <prvAddNewTaskToReadyList+0xc8>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d109      	bne.n	800840e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80083fa:	4a2a      	ldr	r2, [pc, #168]	; (80084a4 <prvAddNewTaskToReadyList+0xc8>)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008400:	4b27      	ldr	r3, [pc, #156]	; (80084a0 <prvAddNewTaskToReadyList+0xc4>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2b01      	cmp	r3, #1
 8008406:	d110      	bne.n	800842a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008408:	f000 fc70 	bl	8008cec <prvInitialiseTaskLists>
 800840c:	e00d      	b.n	800842a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800840e:	4b26      	ldr	r3, [pc, #152]	; (80084a8 <prvAddNewTaskToReadyList+0xcc>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d109      	bne.n	800842a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008416:	4b23      	ldr	r3, [pc, #140]	; (80084a4 <prvAddNewTaskToReadyList+0xc8>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008420:	429a      	cmp	r2, r3
 8008422:	d802      	bhi.n	800842a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008424:	4a1f      	ldr	r2, [pc, #124]	; (80084a4 <prvAddNewTaskToReadyList+0xc8>)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800842a:	4b20      	ldr	r3, [pc, #128]	; (80084ac <prvAddNewTaskToReadyList+0xd0>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	3301      	adds	r3, #1
 8008430:	4a1e      	ldr	r2, [pc, #120]	; (80084ac <prvAddNewTaskToReadyList+0xd0>)
 8008432:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008434:	4b1d      	ldr	r3, [pc, #116]	; (80084ac <prvAddNewTaskToReadyList+0xd0>)
 8008436:	681a      	ldr	r2, [r3, #0]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008440:	4b1b      	ldr	r3, [pc, #108]	; (80084b0 <prvAddNewTaskToReadyList+0xd4>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	429a      	cmp	r2, r3
 8008446:	d903      	bls.n	8008450 <prvAddNewTaskToReadyList+0x74>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800844c:	4a18      	ldr	r2, [pc, #96]	; (80084b0 <prvAddNewTaskToReadyList+0xd4>)
 800844e:	6013      	str	r3, [r2, #0]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008454:	4613      	mov	r3, r2
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	4413      	add	r3, r2
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	4a15      	ldr	r2, [pc, #84]	; (80084b4 <prvAddNewTaskToReadyList+0xd8>)
 800845e:	441a      	add	r2, r3
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	3304      	adds	r3, #4
 8008464:	4619      	mov	r1, r3
 8008466:	4610      	mov	r0, r2
 8008468:	f7ff f8c3 	bl	80075f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800846c:	f001 fa8a 	bl	8009984 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008470:	4b0d      	ldr	r3, [pc, #52]	; (80084a8 <prvAddNewTaskToReadyList+0xcc>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d00e      	beq.n	8008496 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008478:	4b0a      	ldr	r3, [pc, #40]	; (80084a4 <prvAddNewTaskToReadyList+0xc8>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008482:	429a      	cmp	r2, r3
 8008484:	d207      	bcs.n	8008496 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008486:	4b0c      	ldr	r3, [pc, #48]	; (80084b8 <prvAddNewTaskToReadyList+0xdc>)
 8008488:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800848c:	601a      	str	r2, [r3, #0]
 800848e:	f3bf 8f4f 	dsb	sy
 8008492:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008496:	bf00      	nop
 8008498:	3708      	adds	r7, #8
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop
 80084a0:	2000107c 	.word	0x2000107c
 80084a4:	20000ba8 	.word	0x20000ba8
 80084a8:	20001088 	.word	0x20001088
 80084ac:	20001098 	.word	0x20001098
 80084b0:	20001084 	.word	0x20001084
 80084b4:	20000bac 	.word	0x20000bac
 80084b8:	e000ed04 	.word	0xe000ed04

080084bc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b08a      	sub	sp, #40	; 0x28
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80084c6:	2300      	movs	r3, #0
 80084c8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d10a      	bne.n	80084e6 <vTaskDelayUntil+0x2a>
	__asm volatile
 80084d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d4:	f383 8811 	msr	BASEPRI, r3
 80084d8:	f3bf 8f6f 	isb	sy
 80084dc:	f3bf 8f4f 	dsb	sy
 80084e0:	617b      	str	r3, [r7, #20]
}
 80084e2:	bf00      	nop
 80084e4:	e7fe      	b.n	80084e4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d10a      	bne.n	8008502 <vTaskDelayUntil+0x46>
	__asm volatile
 80084ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f0:	f383 8811 	msr	BASEPRI, r3
 80084f4:	f3bf 8f6f 	isb	sy
 80084f8:	f3bf 8f4f 	dsb	sy
 80084fc:	613b      	str	r3, [r7, #16]
}
 80084fe:	bf00      	nop
 8008500:	e7fe      	b.n	8008500 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8008502:	4b2a      	ldr	r3, [pc, #168]	; (80085ac <vTaskDelayUntil+0xf0>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d00a      	beq.n	8008520 <vTaskDelayUntil+0x64>
	__asm volatile
 800850a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800850e:	f383 8811 	msr	BASEPRI, r3
 8008512:	f3bf 8f6f 	isb	sy
 8008516:	f3bf 8f4f 	dsb	sy
 800851a:	60fb      	str	r3, [r7, #12]
}
 800851c:	bf00      	nop
 800851e:	e7fe      	b.n	800851e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8008520:	f000 f8ba 	bl	8008698 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8008524:	4b22      	ldr	r3, [pc, #136]	; (80085b0 <vTaskDelayUntil+0xf4>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	683a      	ldr	r2, [r7, #0]
 8008530:	4413      	add	r3, r2
 8008532:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	6a3a      	ldr	r2, [r7, #32]
 800853a:	429a      	cmp	r2, r3
 800853c:	d20b      	bcs.n	8008556 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	69fa      	ldr	r2, [r7, #28]
 8008544:	429a      	cmp	r2, r3
 8008546:	d211      	bcs.n	800856c <vTaskDelayUntil+0xb0>
 8008548:	69fa      	ldr	r2, [r7, #28]
 800854a:	6a3b      	ldr	r3, [r7, #32]
 800854c:	429a      	cmp	r2, r3
 800854e:	d90d      	bls.n	800856c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8008550:	2301      	movs	r3, #1
 8008552:	627b      	str	r3, [r7, #36]	; 0x24
 8008554:	e00a      	b.n	800856c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	69fa      	ldr	r2, [r7, #28]
 800855c:	429a      	cmp	r2, r3
 800855e:	d303      	bcc.n	8008568 <vTaskDelayUntil+0xac>
 8008560:	69fa      	ldr	r2, [r7, #28]
 8008562:	6a3b      	ldr	r3, [r7, #32]
 8008564:	429a      	cmp	r2, r3
 8008566:	d901      	bls.n	800856c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8008568:	2301      	movs	r3, #1
 800856a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	69fa      	ldr	r2, [r7, #28]
 8008570:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8008572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008574:	2b00      	cmp	r3, #0
 8008576:	d006      	beq.n	8008586 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8008578:	69fa      	ldr	r2, [r7, #28]
 800857a:	6a3b      	ldr	r3, [r7, #32]
 800857c:	1ad3      	subs	r3, r2, r3
 800857e:	2100      	movs	r1, #0
 8008580:	4618      	mov	r0, r3
 8008582:	f000 fd01 	bl	8008f88 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8008586:	f000 f895 	bl	80086b4 <xTaskResumeAll>
 800858a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800858c:	69bb      	ldr	r3, [r7, #24]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d107      	bne.n	80085a2 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8008592:	4b08      	ldr	r3, [pc, #32]	; (80085b4 <vTaskDelayUntil+0xf8>)
 8008594:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008598:	601a      	str	r2, [r3, #0]
 800859a:	f3bf 8f4f 	dsb	sy
 800859e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80085a2:	bf00      	nop
 80085a4:	3728      	adds	r7, #40	; 0x28
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	200010a4 	.word	0x200010a4
 80085b0:	20001080 	.word	0x20001080
 80085b4:	e000ed04 	.word	0xe000ed04

080085b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b08a      	sub	sp, #40	; 0x28
 80085bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80085be:	2300      	movs	r3, #0
 80085c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80085c2:	2300      	movs	r3, #0
 80085c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80085c6:	463a      	mov	r2, r7
 80085c8:	1d39      	adds	r1, r7, #4
 80085ca:	f107 0308 	add.w	r3, r7, #8
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7fe ffae 	bl	8007530 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80085d4:	6839      	ldr	r1, [r7, #0]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	68ba      	ldr	r2, [r7, #8]
 80085da:	9202      	str	r2, [sp, #8]
 80085dc:	9301      	str	r3, [sp, #4]
 80085de:	2300      	movs	r3, #0
 80085e0:	9300      	str	r3, [sp, #0]
 80085e2:	2300      	movs	r3, #0
 80085e4:	460a      	mov	r2, r1
 80085e6:	4924      	ldr	r1, [pc, #144]	; (8008678 <vTaskStartScheduler+0xc0>)
 80085e8:	4824      	ldr	r0, [pc, #144]	; (800867c <vTaskStartScheduler+0xc4>)
 80085ea:	f7ff fdaf 	bl	800814c <xTaskCreateStatic>
 80085ee:	4603      	mov	r3, r0
 80085f0:	4a23      	ldr	r2, [pc, #140]	; (8008680 <vTaskStartScheduler+0xc8>)
 80085f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80085f4:	4b22      	ldr	r3, [pc, #136]	; (8008680 <vTaskStartScheduler+0xc8>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d002      	beq.n	8008602 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80085fc:	2301      	movs	r3, #1
 80085fe:	617b      	str	r3, [r7, #20]
 8008600:	e001      	b.n	8008606 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008602:	2300      	movs	r3, #0
 8008604:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	2b01      	cmp	r3, #1
 800860a:	d102      	bne.n	8008612 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800860c:	f000 fd10 	bl	8009030 <xTimerCreateTimerTask>
 8008610:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	2b01      	cmp	r3, #1
 8008616:	d11b      	bne.n	8008650 <vTaskStartScheduler+0x98>
	__asm volatile
 8008618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800861c:	f383 8811 	msr	BASEPRI, r3
 8008620:	f3bf 8f6f 	isb	sy
 8008624:	f3bf 8f4f 	dsb	sy
 8008628:	613b      	str	r3, [r7, #16]
}
 800862a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800862c:	4b15      	ldr	r3, [pc, #84]	; (8008684 <vTaskStartScheduler+0xcc>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	3354      	adds	r3, #84	; 0x54
 8008632:	4a15      	ldr	r2, [pc, #84]	; (8008688 <vTaskStartScheduler+0xd0>)
 8008634:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008636:	4b15      	ldr	r3, [pc, #84]	; (800868c <vTaskStartScheduler+0xd4>)
 8008638:	f04f 32ff 	mov.w	r2, #4294967295
 800863c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800863e:	4b14      	ldr	r3, [pc, #80]	; (8008690 <vTaskStartScheduler+0xd8>)
 8008640:	2201      	movs	r2, #1
 8008642:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008644:	4b13      	ldr	r3, [pc, #76]	; (8008694 <vTaskStartScheduler+0xdc>)
 8008646:	2200      	movs	r2, #0
 8008648:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800864a:	f001 f8c9 	bl	80097e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800864e:	e00e      	b.n	800866e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008656:	d10a      	bne.n	800866e <vTaskStartScheduler+0xb6>
	__asm volatile
 8008658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800865c:	f383 8811 	msr	BASEPRI, r3
 8008660:	f3bf 8f6f 	isb	sy
 8008664:	f3bf 8f4f 	dsb	sy
 8008668:	60fb      	str	r3, [r7, #12]
}
 800866a:	bf00      	nop
 800866c:	e7fe      	b.n	800866c <vTaskStartScheduler+0xb4>
}
 800866e:	bf00      	nop
 8008670:	3718      	adds	r7, #24
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	0800f350 	.word	0x0800f350
 800867c:	08008cbd 	.word	0x08008cbd
 8008680:	200010a0 	.word	0x200010a0
 8008684:	20000ba8 	.word	0x20000ba8
 8008688:	20000098 	.word	0x20000098
 800868c:	2000109c 	.word	0x2000109c
 8008690:	20001088 	.word	0x20001088
 8008694:	20001080 	.word	0x20001080

08008698 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008698:	b480      	push	{r7}
 800869a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800869c:	4b04      	ldr	r3, [pc, #16]	; (80086b0 <vTaskSuspendAll+0x18>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	3301      	adds	r3, #1
 80086a2:	4a03      	ldr	r2, [pc, #12]	; (80086b0 <vTaskSuspendAll+0x18>)
 80086a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80086a6:	bf00      	nop
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr
 80086b0:	200010a4 	.word	0x200010a4

080086b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b084      	sub	sp, #16
 80086b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80086ba:	2300      	movs	r3, #0
 80086bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80086be:	2300      	movs	r3, #0
 80086c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80086c2:	4b42      	ldr	r3, [pc, #264]	; (80087cc <xTaskResumeAll+0x118>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d10a      	bne.n	80086e0 <xTaskResumeAll+0x2c>
	__asm volatile
 80086ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ce:	f383 8811 	msr	BASEPRI, r3
 80086d2:	f3bf 8f6f 	isb	sy
 80086d6:	f3bf 8f4f 	dsb	sy
 80086da:	603b      	str	r3, [r7, #0]
}
 80086dc:	bf00      	nop
 80086de:	e7fe      	b.n	80086de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80086e0:	f001 f920 	bl	8009924 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80086e4:	4b39      	ldr	r3, [pc, #228]	; (80087cc <xTaskResumeAll+0x118>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	3b01      	subs	r3, #1
 80086ea:	4a38      	ldr	r2, [pc, #224]	; (80087cc <xTaskResumeAll+0x118>)
 80086ec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086ee:	4b37      	ldr	r3, [pc, #220]	; (80087cc <xTaskResumeAll+0x118>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d162      	bne.n	80087bc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80086f6:	4b36      	ldr	r3, [pc, #216]	; (80087d0 <xTaskResumeAll+0x11c>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d05e      	beq.n	80087bc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80086fe:	e02f      	b.n	8008760 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008700:	4b34      	ldr	r3, [pc, #208]	; (80087d4 <xTaskResumeAll+0x120>)
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	68db      	ldr	r3, [r3, #12]
 8008706:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	3318      	adds	r3, #24
 800870c:	4618      	mov	r0, r3
 800870e:	f7fe ffcd 	bl	80076ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	3304      	adds	r3, #4
 8008716:	4618      	mov	r0, r3
 8008718:	f7fe ffc8 	bl	80076ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008720:	4b2d      	ldr	r3, [pc, #180]	; (80087d8 <xTaskResumeAll+0x124>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	429a      	cmp	r2, r3
 8008726:	d903      	bls.n	8008730 <xTaskResumeAll+0x7c>
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800872c:	4a2a      	ldr	r2, [pc, #168]	; (80087d8 <xTaskResumeAll+0x124>)
 800872e:	6013      	str	r3, [r2, #0]
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008734:	4613      	mov	r3, r2
 8008736:	009b      	lsls	r3, r3, #2
 8008738:	4413      	add	r3, r2
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	4a27      	ldr	r2, [pc, #156]	; (80087dc <xTaskResumeAll+0x128>)
 800873e:	441a      	add	r2, r3
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	3304      	adds	r3, #4
 8008744:	4619      	mov	r1, r3
 8008746:	4610      	mov	r0, r2
 8008748:	f7fe ff53 	bl	80075f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008750:	4b23      	ldr	r3, [pc, #140]	; (80087e0 <xTaskResumeAll+0x12c>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008756:	429a      	cmp	r2, r3
 8008758:	d302      	bcc.n	8008760 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800875a:	4b22      	ldr	r3, [pc, #136]	; (80087e4 <xTaskResumeAll+0x130>)
 800875c:	2201      	movs	r2, #1
 800875e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008760:	4b1c      	ldr	r3, [pc, #112]	; (80087d4 <xTaskResumeAll+0x120>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d1cb      	bne.n	8008700 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d001      	beq.n	8008772 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800876e:	f000 fb5f 	bl	8008e30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008772:	4b1d      	ldr	r3, [pc, #116]	; (80087e8 <xTaskResumeAll+0x134>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d010      	beq.n	80087a0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800877e:	f000 f847 	bl	8008810 <xTaskIncrementTick>
 8008782:	4603      	mov	r3, r0
 8008784:	2b00      	cmp	r3, #0
 8008786:	d002      	beq.n	800878e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008788:	4b16      	ldr	r3, [pc, #88]	; (80087e4 <xTaskResumeAll+0x130>)
 800878a:	2201      	movs	r2, #1
 800878c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	3b01      	subs	r3, #1
 8008792:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d1f1      	bne.n	800877e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800879a:	4b13      	ldr	r3, [pc, #76]	; (80087e8 <xTaskResumeAll+0x134>)
 800879c:	2200      	movs	r2, #0
 800879e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80087a0:	4b10      	ldr	r3, [pc, #64]	; (80087e4 <xTaskResumeAll+0x130>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d009      	beq.n	80087bc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80087a8:	2301      	movs	r3, #1
 80087aa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80087ac:	4b0f      	ldr	r3, [pc, #60]	; (80087ec <xTaskResumeAll+0x138>)
 80087ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087b2:	601a      	str	r2, [r3, #0]
 80087b4:	f3bf 8f4f 	dsb	sy
 80087b8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80087bc:	f001 f8e2 	bl	8009984 <vPortExitCritical>

	return xAlreadyYielded;
 80087c0:	68bb      	ldr	r3, [r7, #8]
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3710      	adds	r7, #16
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	200010a4 	.word	0x200010a4
 80087d0:	2000107c 	.word	0x2000107c
 80087d4:	2000103c 	.word	0x2000103c
 80087d8:	20001084 	.word	0x20001084
 80087dc:	20000bac 	.word	0x20000bac
 80087e0:	20000ba8 	.word	0x20000ba8
 80087e4:	20001090 	.word	0x20001090
 80087e8:	2000108c 	.word	0x2000108c
 80087ec:	e000ed04 	.word	0xe000ed04

080087f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80087f0:	b480      	push	{r7}
 80087f2:	b083      	sub	sp, #12
 80087f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80087f6:	4b05      	ldr	r3, [pc, #20]	; (800880c <xTaskGetTickCount+0x1c>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80087fc:	687b      	ldr	r3, [r7, #4]
}
 80087fe:	4618      	mov	r0, r3
 8008800:	370c      	adds	r7, #12
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr
 800880a:	bf00      	nop
 800880c:	20001080 	.word	0x20001080

08008810 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b086      	sub	sp, #24
 8008814:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008816:	2300      	movs	r3, #0
 8008818:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800881a:	4b4f      	ldr	r3, [pc, #316]	; (8008958 <xTaskIncrementTick+0x148>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	2b00      	cmp	r3, #0
 8008820:	f040 808f 	bne.w	8008942 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008824:	4b4d      	ldr	r3, [pc, #308]	; (800895c <xTaskIncrementTick+0x14c>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	3301      	adds	r3, #1
 800882a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800882c:	4a4b      	ldr	r2, [pc, #300]	; (800895c <xTaskIncrementTick+0x14c>)
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d120      	bne.n	800887a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008838:	4b49      	ldr	r3, [pc, #292]	; (8008960 <xTaskIncrementTick+0x150>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d00a      	beq.n	8008858 <xTaskIncrementTick+0x48>
	__asm volatile
 8008842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008846:	f383 8811 	msr	BASEPRI, r3
 800884a:	f3bf 8f6f 	isb	sy
 800884e:	f3bf 8f4f 	dsb	sy
 8008852:	603b      	str	r3, [r7, #0]
}
 8008854:	bf00      	nop
 8008856:	e7fe      	b.n	8008856 <xTaskIncrementTick+0x46>
 8008858:	4b41      	ldr	r3, [pc, #260]	; (8008960 <xTaskIncrementTick+0x150>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	60fb      	str	r3, [r7, #12]
 800885e:	4b41      	ldr	r3, [pc, #260]	; (8008964 <xTaskIncrementTick+0x154>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a3f      	ldr	r2, [pc, #252]	; (8008960 <xTaskIncrementTick+0x150>)
 8008864:	6013      	str	r3, [r2, #0]
 8008866:	4a3f      	ldr	r2, [pc, #252]	; (8008964 <xTaskIncrementTick+0x154>)
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	6013      	str	r3, [r2, #0]
 800886c:	4b3e      	ldr	r3, [pc, #248]	; (8008968 <xTaskIncrementTick+0x158>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	3301      	adds	r3, #1
 8008872:	4a3d      	ldr	r2, [pc, #244]	; (8008968 <xTaskIncrementTick+0x158>)
 8008874:	6013      	str	r3, [r2, #0]
 8008876:	f000 fadb 	bl	8008e30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800887a:	4b3c      	ldr	r3, [pc, #240]	; (800896c <xTaskIncrementTick+0x15c>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	693a      	ldr	r2, [r7, #16]
 8008880:	429a      	cmp	r2, r3
 8008882:	d349      	bcc.n	8008918 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008884:	4b36      	ldr	r3, [pc, #216]	; (8008960 <xTaskIncrementTick+0x150>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d104      	bne.n	8008898 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800888e:	4b37      	ldr	r3, [pc, #220]	; (800896c <xTaskIncrementTick+0x15c>)
 8008890:	f04f 32ff 	mov.w	r2, #4294967295
 8008894:	601a      	str	r2, [r3, #0]
					break;
 8008896:	e03f      	b.n	8008918 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008898:	4b31      	ldr	r3, [pc, #196]	; (8008960 <xTaskIncrementTick+0x150>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	68db      	ldr	r3, [r3, #12]
 800889e:	68db      	ldr	r3, [r3, #12]
 80088a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80088a8:	693a      	ldr	r2, [r7, #16]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d203      	bcs.n	80088b8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80088b0:	4a2e      	ldr	r2, [pc, #184]	; (800896c <xTaskIncrementTick+0x15c>)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80088b6:	e02f      	b.n	8008918 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	3304      	adds	r3, #4
 80088bc:	4618      	mov	r0, r3
 80088be:	f7fe fef5 	bl	80076ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d004      	beq.n	80088d4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	3318      	adds	r3, #24
 80088ce:	4618      	mov	r0, r3
 80088d0:	f7fe feec 	bl	80076ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088d8:	4b25      	ldr	r3, [pc, #148]	; (8008970 <xTaskIncrementTick+0x160>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	429a      	cmp	r2, r3
 80088de:	d903      	bls.n	80088e8 <xTaskIncrementTick+0xd8>
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e4:	4a22      	ldr	r2, [pc, #136]	; (8008970 <xTaskIncrementTick+0x160>)
 80088e6:	6013      	str	r3, [r2, #0]
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ec:	4613      	mov	r3, r2
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	4413      	add	r3, r2
 80088f2:	009b      	lsls	r3, r3, #2
 80088f4:	4a1f      	ldr	r2, [pc, #124]	; (8008974 <xTaskIncrementTick+0x164>)
 80088f6:	441a      	add	r2, r3
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	3304      	adds	r3, #4
 80088fc:	4619      	mov	r1, r3
 80088fe:	4610      	mov	r0, r2
 8008900:	f7fe fe77 	bl	80075f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008908:	4b1b      	ldr	r3, [pc, #108]	; (8008978 <xTaskIncrementTick+0x168>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800890e:	429a      	cmp	r2, r3
 8008910:	d3b8      	bcc.n	8008884 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008912:	2301      	movs	r3, #1
 8008914:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008916:	e7b5      	b.n	8008884 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008918:	4b17      	ldr	r3, [pc, #92]	; (8008978 <xTaskIncrementTick+0x168>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800891e:	4915      	ldr	r1, [pc, #84]	; (8008974 <xTaskIncrementTick+0x164>)
 8008920:	4613      	mov	r3, r2
 8008922:	009b      	lsls	r3, r3, #2
 8008924:	4413      	add	r3, r2
 8008926:	009b      	lsls	r3, r3, #2
 8008928:	440b      	add	r3, r1
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	2b01      	cmp	r3, #1
 800892e:	d901      	bls.n	8008934 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008930:	2301      	movs	r3, #1
 8008932:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008934:	4b11      	ldr	r3, [pc, #68]	; (800897c <xTaskIncrementTick+0x16c>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d007      	beq.n	800894c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800893c:	2301      	movs	r3, #1
 800893e:	617b      	str	r3, [r7, #20]
 8008940:	e004      	b.n	800894c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008942:	4b0f      	ldr	r3, [pc, #60]	; (8008980 <xTaskIncrementTick+0x170>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	3301      	adds	r3, #1
 8008948:	4a0d      	ldr	r2, [pc, #52]	; (8008980 <xTaskIncrementTick+0x170>)
 800894a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800894c:	697b      	ldr	r3, [r7, #20]
}
 800894e:	4618      	mov	r0, r3
 8008950:	3718      	adds	r7, #24
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
 8008956:	bf00      	nop
 8008958:	200010a4 	.word	0x200010a4
 800895c:	20001080 	.word	0x20001080
 8008960:	20001034 	.word	0x20001034
 8008964:	20001038 	.word	0x20001038
 8008968:	20001094 	.word	0x20001094
 800896c:	2000109c 	.word	0x2000109c
 8008970:	20001084 	.word	0x20001084
 8008974:	20000bac 	.word	0x20000bac
 8008978:	20000ba8 	.word	0x20000ba8
 800897c:	20001090 	.word	0x20001090
 8008980:	2000108c 	.word	0x2000108c

08008984 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008984:	b480      	push	{r7}
 8008986:	b085      	sub	sp, #20
 8008988:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800898a:	4b2a      	ldr	r3, [pc, #168]	; (8008a34 <vTaskSwitchContext+0xb0>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d003      	beq.n	800899a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008992:	4b29      	ldr	r3, [pc, #164]	; (8008a38 <vTaskSwitchContext+0xb4>)
 8008994:	2201      	movs	r2, #1
 8008996:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008998:	e046      	b.n	8008a28 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800899a:	4b27      	ldr	r3, [pc, #156]	; (8008a38 <vTaskSwitchContext+0xb4>)
 800899c:	2200      	movs	r2, #0
 800899e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089a0:	4b26      	ldr	r3, [pc, #152]	; (8008a3c <vTaskSwitchContext+0xb8>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	60fb      	str	r3, [r7, #12]
 80089a6:	e010      	b.n	80089ca <vTaskSwitchContext+0x46>
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d10a      	bne.n	80089c4 <vTaskSwitchContext+0x40>
	__asm volatile
 80089ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b2:	f383 8811 	msr	BASEPRI, r3
 80089b6:	f3bf 8f6f 	isb	sy
 80089ba:	f3bf 8f4f 	dsb	sy
 80089be:	607b      	str	r3, [r7, #4]
}
 80089c0:	bf00      	nop
 80089c2:	e7fe      	b.n	80089c2 <vTaskSwitchContext+0x3e>
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	3b01      	subs	r3, #1
 80089c8:	60fb      	str	r3, [r7, #12]
 80089ca:	491d      	ldr	r1, [pc, #116]	; (8008a40 <vTaskSwitchContext+0xbc>)
 80089cc:	68fa      	ldr	r2, [r7, #12]
 80089ce:	4613      	mov	r3, r2
 80089d0:	009b      	lsls	r3, r3, #2
 80089d2:	4413      	add	r3, r2
 80089d4:	009b      	lsls	r3, r3, #2
 80089d6:	440b      	add	r3, r1
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d0e4      	beq.n	80089a8 <vTaskSwitchContext+0x24>
 80089de:	68fa      	ldr	r2, [r7, #12]
 80089e0:	4613      	mov	r3, r2
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	4413      	add	r3, r2
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	4a15      	ldr	r2, [pc, #84]	; (8008a40 <vTaskSwitchContext+0xbc>)
 80089ea:	4413      	add	r3, r2
 80089ec:	60bb      	str	r3, [r7, #8]
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	685a      	ldr	r2, [r3, #4]
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	605a      	str	r2, [r3, #4]
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	685a      	ldr	r2, [r3, #4]
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	3308      	adds	r3, #8
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d104      	bne.n	8008a0e <vTaskSwitchContext+0x8a>
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	685a      	ldr	r2, [r3, #4]
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	605a      	str	r2, [r3, #4]
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	68db      	ldr	r3, [r3, #12]
 8008a14:	4a0b      	ldr	r2, [pc, #44]	; (8008a44 <vTaskSwitchContext+0xc0>)
 8008a16:	6013      	str	r3, [r2, #0]
 8008a18:	4a08      	ldr	r2, [pc, #32]	; (8008a3c <vTaskSwitchContext+0xb8>)
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008a1e:	4b09      	ldr	r3, [pc, #36]	; (8008a44 <vTaskSwitchContext+0xc0>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	3354      	adds	r3, #84	; 0x54
 8008a24:	4a08      	ldr	r2, [pc, #32]	; (8008a48 <vTaskSwitchContext+0xc4>)
 8008a26:	6013      	str	r3, [r2, #0]
}
 8008a28:	bf00      	nop
 8008a2a:	3714      	adds	r7, #20
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr
 8008a34:	200010a4 	.word	0x200010a4
 8008a38:	20001090 	.word	0x20001090
 8008a3c:	20001084 	.word	0x20001084
 8008a40:	20000bac 	.word	0x20000bac
 8008a44:	20000ba8 	.word	0x20000ba8
 8008a48:	20000098 	.word	0x20000098

08008a4c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d10a      	bne.n	8008a72 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a60:	f383 8811 	msr	BASEPRI, r3
 8008a64:	f3bf 8f6f 	isb	sy
 8008a68:	f3bf 8f4f 	dsb	sy
 8008a6c:	60fb      	str	r3, [r7, #12]
}
 8008a6e:	bf00      	nop
 8008a70:	e7fe      	b.n	8008a70 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008a72:	4b07      	ldr	r3, [pc, #28]	; (8008a90 <vTaskPlaceOnEventList+0x44>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	3318      	adds	r3, #24
 8008a78:	4619      	mov	r1, r3
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f7fe fddd 	bl	800763a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008a80:	2101      	movs	r1, #1
 8008a82:	6838      	ldr	r0, [r7, #0]
 8008a84:	f000 fa80 	bl	8008f88 <prvAddCurrentTaskToDelayedList>
}
 8008a88:	bf00      	nop
 8008a8a:	3710      	adds	r7, #16
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}
 8008a90:	20000ba8 	.word	0x20000ba8

08008a94 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b086      	sub	sp, #24
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	60f8      	str	r0, [r7, #12]
 8008a9c:	60b9      	str	r1, [r7, #8]
 8008a9e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d10a      	bne.n	8008abc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aaa:	f383 8811 	msr	BASEPRI, r3
 8008aae:	f3bf 8f6f 	isb	sy
 8008ab2:	f3bf 8f4f 	dsb	sy
 8008ab6:	617b      	str	r3, [r7, #20]
}
 8008ab8:	bf00      	nop
 8008aba:	e7fe      	b.n	8008aba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008abc:	4b0a      	ldr	r3, [pc, #40]	; (8008ae8 <vTaskPlaceOnEventListRestricted+0x54>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	3318      	adds	r3, #24
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	68f8      	ldr	r0, [r7, #12]
 8008ac6:	f7fe fd94 	bl	80075f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d002      	beq.n	8008ad6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ad4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008ad6:	6879      	ldr	r1, [r7, #4]
 8008ad8:	68b8      	ldr	r0, [r7, #8]
 8008ada:	f000 fa55 	bl	8008f88 <prvAddCurrentTaskToDelayedList>
	}
 8008ade:	bf00      	nop
 8008ae0:	3718      	adds	r7, #24
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	20000ba8 	.word	0x20000ba8

08008aec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b086      	sub	sp, #24
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	68db      	ldr	r3, [r3, #12]
 8008af8:	68db      	ldr	r3, [r3, #12]
 8008afa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d10a      	bne.n	8008b18 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b06:	f383 8811 	msr	BASEPRI, r3
 8008b0a:	f3bf 8f6f 	isb	sy
 8008b0e:	f3bf 8f4f 	dsb	sy
 8008b12:	60fb      	str	r3, [r7, #12]
}
 8008b14:	bf00      	nop
 8008b16:	e7fe      	b.n	8008b16 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	3318      	adds	r3, #24
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f7fe fdc5 	bl	80076ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b22:	4b1e      	ldr	r3, [pc, #120]	; (8008b9c <xTaskRemoveFromEventList+0xb0>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d11d      	bne.n	8008b66 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	3304      	adds	r3, #4
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f7fe fdbc 	bl	80076ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b38:	4b19      	ldr	r3, [pc, #100]	; (8008ba0 <xTaskRemoveFromEventList+0xb4>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	d903      	bls.n	8008b48 <xTaskRemoveFromEventList+0x5c>
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b44:	4a16      	ldr	r2, [pc, #88]	; (8008ba0 <xTaskRemoveFromEventList+0xb4>)
 8008b46:	6013      	str	r3, [r2, #0]
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b4c:	4613      	mov	r3, r2
 8008b4e:	009b      	lsls	r3, r3, #2
 8008b50:	4413      	add	r3, r2
 8008b52:	009b      	lsls	r3, r3, #2
 8008b54:	4a13      	ldr	r2, [pc, #76]	; (8008ba4 <xTaskRemoveFromEventList+0xb8>)
 8008b56:	441a      	add	r2, r3
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	3304      	adds	r3, #4
 8008b5c:	4619      	mov	r1, r3
 8008b5e:	4610      	mov	r0, r2
 8008b60:	f7fe fd47 	bl	80075f2 <vListInsertEnd>
 8008b64:	e005      	b.n	8008b72 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	3318      	adds	r3, #24
 8008b6a:	4619      	mov	r1, r3
 8008b6c:	480e      	ldr	r0, [pc, #56]	; (8008ba8 <xTaskRemoveFromEventList+0xbc>)
 8008b6e:	f7fe fd40 	bl	80075f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b76:	4b0d      	ldr	r3, [pc, #52]	; (8008bac <xTaskRemoveFromEventList+0xc0>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b7c:	429a      	cmp	r2, r3
 8008b7e:	d905      	bls.n	8008b8c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008b80:	2301      	movs	r3, #1
 8008b82:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008b84:	4b0a      	ldr	r3, [pc, #40]	; (8008bb0 <xTaskRemoveFromEventList+0xc4>)
 8008b86:	2201      	movs	r2, #1
 8008b88:	601a      	str	r2, [r3, #0]
 8008b8a:	e001      	b.n	8008b90 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008b90:	697b      	ldr	r3, [r7, #20]
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3718      	adds	r7, #24
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}
 8008b9a:	bf00      	nop
 8008b9c:	200010a4 	.word	0x200010a4
 8008ba0:	20001084 	.word	0x20001084
 8008ba4:	20000bac 	.word	0x20000bac
 8008ba8:	2000103c 	.word	0x2000103c
 8008bac:	20000ba8 	.word	0x20000ba8
 8008bb0:	20001090 	.word	0x20001090

08008bb4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b083      	sub	sp, #12
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008bbc:	4b06      	ldr	r3, [pc, #24]	; (8008bd8 <vTaskInternalSetTimeOutState+0x24>)
 8008bbe:	681a      	ldr	r2, [r3, #0]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008bc4:	4b05      	ldr	r3, [pc, #20]	; (8008bdc <vTaskInternalSetTimeOutState+0x28>)
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	605a      	str	r2, [r3, #4]
}
 8008bcc:	bf00      	nop
 8008bce:	370c      	adds	r7, #12
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr
 8008bd8:	20001094 	.word	0x20001094
 8008bdc:	20001080 	.word	0x20001080

08008be0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b088      	sub	sp, #32
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d10a      	bne.n	8008c06 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf4:	f383 8811 	msr	BASEPRI, r3
 8008bf8:	f3bf 8f6f 	isb	sy
 8008bfc:	f3bf 8f4f 	dsb	sy
 8008c00:	613b      	str	r3, [r7, #16]
}
 8008c02:	bf00      	nop
 8008c04:	e7fe      	b.n	8008c04 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d10a      	bne.n	8008c22 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c10:	f383 8811 	msr	BASEPRI, r3
 8008c14:	f3bf 8f6f 	isb	sy
 8008c18:	f3bf 8f4f 	dsb	sy
 8008c1c:	60fb      	str	r3, [r7, #12]
}
 8008c1e:	bf00      	nop
 8008c20:	e7fe      	b.n	8008c20 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008c22:	f000 fe7f 	bl	8009924 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008c26:	4b1d      	ldr	r3, [pc, #116]	; (8008c9c <xTaskCheckForTimeOut+0xbc>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	69ba      	ldr	r2, [r7, #24]
 8008c32:	1ad3      	subs	r3, r2, r3
 8008c34:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c3e:	d102      	bne.n	8008c46 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008c40:	2300      	movs	r3, #0
 8008c42:	61fb      	str	r3, [r7, #28]
 8008c44:	e023      	b.n	8008c8e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681a      	ldr	r2, [r3, #0]
 8008c4a:	4b15      	ldr	r3, [pc, #84]	; (8008ca0 <xTaskCheckForTimeOut+0xc0>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d007      	beq.n	8008c62 <xTaskCheckForTimeOut+0x82>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	69ba      	ldr	r2, [r7, #24]
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d302      	bcc.n	8008c62 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	61fb      	str	r3, [r7, #28]
 8008c60:	e015      	b.n	8008c8e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	697a      	ldr	r2, [r7, #20]
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d20b      	bcs.n	8008c84 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	1ad2      	subs	r2, r2, r3
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f7ff ff9b 	bl	8008bb4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	61fb      	str	r3, [r7, #28]
 8008c82:	e004      	b.n	8008c8e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	2200      	movs	r2, #0
 8008c88:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008c8e:	f000 fe79 	bl	8009984 <vPortExitCritical>

	return xReturn;
 8008c92:	69fb      	ldr	r3, [r7, #28]
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3720      	adds	r7, #32
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}
 8008c9c:	20001080 	.word	0x20001080
 8008ca0:	20001094 	.word	0x20001094

08008ca4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008ca8:	4b03      	ldr	r3, [pc, #12]	; (8008cb8 <vTaskMissedYield+0x14>)
 8008caa:	2201      	movs	r2, #1
 8008cac:	601a      	str	r2, [r3, #0]
}
 8008cae:	bf00      	nop
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr
 8008cb8:	20001090 	.word	0x20001090

08008cbc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b082      	sub	sp, #8
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008cc4:	f000 f852 	bl	8008d6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008cc8:	4b06      	ldr	r3, [pc, #24]	; (8008ce4 <prvIdleTask+0x28>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d9f9      	bls.n	8008cc4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008cd0:	4b05      	ldr	r3, [pc, #20]	; (8008ce8 <prvIdleTask+0x2c>)
 8008cd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cd6:	601a      	str	r2, [r3, #0]
 8008cd8:	f3bf 8f4f 	dsb	sy
 8008cdc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008ce0:	e7f0      	b.n	8008cc4 <prvIdleTask+0x8>
 8008ce2:	bf00      	nop
 8008ce4:	20000bac 	.word	0x20000bac
 8008ce8:	e000ed04 	.word	0xe000ed04

08008cec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b082      	sub	sp, #8
 8008cf0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	607b      	str	r3, [r7, #4]
 8008cf6:	e00c      	b.n	8008d12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008cf8:	687a      	ldr	r2, [r7, #4]
 8008cfa:	4613      	mov	r3, r2
 8008cfc:	009b      	lsls	r3, r3, #2
 8008cfe:	4413      	add	r3, r2
 8008d00:	009b      	lsls	r3, r3, #2
 8008d02:	4a12      	ldr	r2, [pc, #72]	; (8008d4c <prvInitialiseTaskLists+0x60>)
 8008d04:	4413      	add	r3, r2
 8008d06:	4618      	mov	r0, r3
 8008d08:	f7fe fc46 	bl	8007598 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	3301      	adds	r3, #1
 8008d10:	607b      	str	r3, [r7, #4]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2b37      	cmp	r3, #55	; 0x37
 8008d16:	d9ef      	bls.n	8008cf8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008d18:	480d      	ldr	r0, [pc, #52]	; (8008d50 <prvInitialiseTaskLists+0x64>)
 8008d1a:	f7fe fc3d 	bl	8007598 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008d1e:	480d      	ldr	r0, [pc, #52]	; (8008d54 <prvInitialiseTaskLists+0x68>)
 8008d20:	f7fe fc3a 	bl	8007598 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008d24:	480c      	ldr	r0, [pc, #48]	; (8008d58 <prvInitialiseTaskLists+0x6c>)
 8008d26:	f7fe fc37 	bl	8007598 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008d2a:	480c      	ldr	r0, [pc, #48]	; (8008d5c <prvInitialiseTaskLists+0x70>)
 8008d2c:	f7fe fc34 	bl	8007598 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008d30:	480b      	ldr	r0, [pc, #44]	; (8008d60 <prvInitialiseTaskLists+0x74>)
 8008d32:	f7fe fc31 	bl	8007598 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008d36:	4b0b      	ldr	r3, [pc, #44]	; (8008d64 <prvInitialiseTaskLists+0x78>)
 8008d38:	4a05      	ldr	r2, [pc, #20]	; (8008d50 <prvInitialiseTaskLists+0x64>)
 8008d3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008d3c:	4b0a      	ldr	r3, [pc, #40]	; (8008d68 <prvInitialiseTaskLists+0x7c>)
 8008d3e:	4a05      	ldr	r2, [pc, #20]	; (8008d54 <prvInitialiseTaskLists+0x68>)
 8008d40:	601a      	str	r2, [r3, #0]
}
 8008d42:	bf00      	nop
 8008d44:	3708      	adds	r7, #8
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	20000bac 	.word	0x20000bac
 8008d50:	2000100c 	.word	0x2000100c
 8008d54:	20001020 	.word	0x20001020
 8008d58:	2000103c 	.word	0x2000103c
 8008d5c:	20001050 	.word	0x20001050
 8008d60:	20001068 	.word	0x20001068
 8008d64:	20001034 	.word	0x20001034
 8008d68:	20001038 	.word	0x20001038

08008d6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b082      	sub	sp, #8
 8008d70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008d72:	e019      	b.n	8008da8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008d74:	f000 fdd6 	bl	8009924 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d78:	4b10      	ldr	r3, [pc, #64]	; (8008dbc <prvCheckTasksWaitingTermination+0x50>)
 8008d7a:	68db      	ldr	r3, [r3, #12]
 8008d7c:	68db      	ldr	r3, [r3, #12]
 8008d7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	3304      	adds	r3, #4
 8008d84:	4618      	mov	r0, r3
 8008d86:	f7fe fc91 	bl	80076ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008d8a:	4b0d      	ldr	r3, [pc, #52]	; (8008dc0 <prvCheckTasksWaitingTermination+0x54>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	3b01      	subs	r3, #1
 8008d90:	4a0b      	ldr	r2, [pc, #44]	; (8008dc0 <prvCheckTasksWaitingTermination+0x54>)
 8008d92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008d94:	4b0b      	ldr	r3, [pc, #44]	; (8008dc4 <prvCheckTasksWaitingTermination+0x58>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	3b01      	subs	r3, #1
 8008d9a:	4a0a      	ldr	r2, [pc, #40]	; (8008dc4 <prvCheckTasksWaitingTermination+0x58>)
 8008d9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008d9e:	f000 fdf1 	bl	8009984 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 f810 	bl	8008dc8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008da8:	4b06      	ldr	r3, [pc, #24]	; (8008dc4 <prvCheckTasksWaitingTermination+0x58>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d1e1      	bne.n	8008d74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008db0:	bf00      	nop
 8008db2:	bf00      	nop
 8008db4:	3708      	adds	r7, #8
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}
 8008dba:	bf00      	nop
 8008dbc:	20001050 	.word	0x20001050
 8008dc0:	2000107c 	.word	0x2000107c
 8008dc4:	20001064 	.word	0x20001064

08008dc8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b084      	sub	sp, #16
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	3354      	adds	r3, #84	; 0x54
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f004 fc35 	bl	800d644 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d108      	bne.n	8008df6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008de8:	4618      	mov	r0, r3
 8008dea:	f000 ff89 	bl	8009d00 <vPortFree>
				vPortFree( pxTCB );
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 ff86 	bl	8009d00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008df4:	e018      	b.n	8008e28 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	d103      	bne.n	8008e08 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f000 ff7d 	bl	8009d00 <vPortFree>
	}
 8008e06:	e00f      	b.n	8008e28 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008e0e:	2b02      	cmp	r3, #2
 8008e10:	d00a      	beq.n	8008e28 <prvDeleteTCB+0x60>
	__asm volatile
 8008e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e16:	f383 8811 	msr	BASEPRI, r3
 8008e1a:	f3bf 8f6f 	isb	sy
 8008e1e:	f3bf 8f4f 	dsb	sy
 8008e22:	60fb      	str	r3, [r7, #12]
}
 8008e24:	bf00      	nop
 8008e26:	e7fe      	b.n	8008e26 <prvDeleteTCB+0x5e>
	}
 8008e28:	bf00      	nop
 8008e2a:	3710      	adds	r7, #16
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}

08008e30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008e30:	b480      	push	{r7}
 8008e32:	b083      	sub	sp, #12
 8008e34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e36:	4b0c      	ldr	r3, [pc, #48]	; (8008e68 <prvResetNextTaskUnblockTime+0x38>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d104      	bne.n	8008e4a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008e40:	4b0a      	ldr	r3, [pc, #40]	; (8008e6c <prvResetNextTaskUnblockTime+0x3c>)
 8008e42:	f04f 32ff 	mov.w	r2, #4294967295
 8008e46:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008e48:	e008      	b.n	8008e5c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e4a:	4b07      	ldr	r3, [pc, #28]	; (8008e68 <prvResetNextTaskUnblockTime+0x38>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	68db      	ldr	r3, [r3, #12]
 8008e50:	68db      	ldr	r3, [r3, #12]
 8008e52:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	4a04      	ldr	r2, [pc, #16]	; (8008e6c <prvResetNextTaskUnblockTime+0x3c>)
 8008e5a:	6013      	str	r3, [r2, #0]
}
 8008e5c:	bf00      	nop
 8008e5e:	370c      	adds	r7, #12
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr
 8008e68:	20001034 	.word	0x20001034
 8008e6c:	2000109c 	.word	0x2000109c

08008e70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008e70:	b480      	push	{r7}
 8008e72:	b083      	sub	sp, #12
 8008e74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008e76:	4b0b      	ldr	r3, [pc, #44]	; (8008ea4 <xTaskGetSchedulerState+0x34>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d102      	bne.n	8008e84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	607b      	str	r3, [r7, #4]
 8008e82:	e008      	b.n	8008e96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e84:	4b08      	ldr	r3, [pc, #32]	; (8008ea8 <xTaskGetSchedulerState+0x38>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d102      	bne.n	8008e92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008e8c:	2302      	movs	r3, #2
 8008e8e:	607b      	str	r3, [r7, #4]
 8008e90:	e001      	b.n	8008e96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008e92:	2300      	movs	r3, #0
 8008e94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008e96:	687b      	ldr	r3, [r7, #4]
	}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	370c      	adds	r7, #12
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea2:	4770      	bx	lr
 8008ea4:	20001088 	.word	0x20001088
 8008ea8:	200010a4 	.word	0x200010a4

08008eac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b086      	sub	sp, #24
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d056      	beq.n	8008f70 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008ec2:	4b2e      	ldr	r3, [pc, #184]	; (8008f7c <xTaskPriorityDisinherit+0xd0>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	693a      	ldr	r2, [r7, #16]
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d00a      	beq.n	8008ee2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed0:	f383 8811 	msr	BASEPRI, r3
 8008ed4:	f3bf 8f6f 	isb	sy
 8008ed8:	f3bf 8f4f 	dsb	sy
 8008edc:	60fb      	str	r3, [r7, #12]
}
 8008ede:	bf00      	nop
 8008ee0:	e7fe      	b.n	8008ee0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d10a      	bne.n	8008f00 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eee:	f383 8811 	msr	BASEPRI, r3
 8008ef2:	f3bf 8f6f 	isb	sy
 8008ef6:	f3bf 8f4f 	dsb	sy
 8008efa:	60bb      	str	r3, [r7, #8]
}
 8008efc:	bf00      	nop
 8008efe:	e7fe      	b.n	8008efe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f04:	1e5a      	subs	r2, r3, #1
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d02c      	beq.n	8008f70 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d128      	bne.n	8008f70 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	3304      	adds	r3, #4
 8008f22:	4618      	mov	r0, r3
 8008f24:	f7fe fbc2 	bl	80076ac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f34:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f40:	4b0f      	ldr	r3, [pc, #60]	; (8008f80 <xTaskPriorityDisinherit+0xd4>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d903      	bls.n	8008f50 <xTaskPriorityDisinherit+0xa4>
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f4c:	4a0c      	ldr	r2, [pc, #48]	; (8008f80 <xTaskPriorityDisinherit+0xd4>)
 8008f4e:	6013      	str	r3, [r2, #0]
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f54:	4613      	mov	r3, r2
 8008f56:	009b      	lsls	r3, r3, #2
 8008f58:	4413      	add	r3, r2
 8008f5a:	009b      	lsls	r3, r3, #2
 8008f5c:	4a09      	ldr	r2, [pc, #36]	; (8008f84 <xTaskPriorityDisinherit+0xd8>)
 8008f5e:	441a      	add	r2, r3
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	3304      	adds	r3, #4
 8008f64:	4619      	mov	r1, r3
 8008f66:	4610      	mov	r0, r2
 8008f68:	f7fe fb43 	bl	80075f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008f70:	697b      	ldr	r3, [r7, #20]
	}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3718      	adds	r7, #24
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
 8008f7a:	bf00      	nop
 8008f7c:	20000ba8 	.word	0x20000ba8
 8008f80:	20001084 	.word	0x20001084
 8008f84:	20000bac 	.word	0x20000bac

08008f88 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b084      	sub	sp, #16
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008f92:	4b21      	ldr	r3, [pc, #132]	; (8009018 <prvAddCurrentTaskToDelayedList+0x90>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f98:	4b20      	ldr	r3, [pc, #128]	; (800901c <prvAddCurrentTaskToDelayedList+0x94>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	3304      	adds	r3, #4
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f7fe fb84 	bl	80076ac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008faa:	d10a      	bne.n	8008fc2 <prvAddCurrentTaskToDelayedList+0x3a>
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d007      	beq.n	8008fc2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008fb2:	4b1a      	ldr	r3, [pc, #104]	; (800901c <prvAddCurrentTaskToDelayedList+0x94>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	3304      	adds	r3, #4
 8008fb8:	4619      	mov	r1, r3
 8008fba:	4819      	ldr	r0, [pc, #100]	; (8009020 <prvAddCurrentTaskToDelayedList+0x98>)
 8008fbc:	f7fe fb19 	bl	80075f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008fc0:	e026      	b.n	8009010 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008fc2:	68fa      	ldr	r2, [r7, #12]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	4413      	add	r3, r2
 8008fc8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008fca:	4b14      	ldr	r3, [pc, #80]	; (800901c <prvAddCurrentTaskToDelayedList+0x94>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	68ba      	ldr	r2, [r7, #8]
 8008fd0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008fd2:	68ba      	ldr	r2, [r7, #8]
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	d209      	bcs.n	8008fee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008fda:	4b12      	ldr	r3, [pc, #72]	; (8009024 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008fdc:	681a      	ldr	r2, [r3, #0]
 8008fde:	4b0f      	ldr	r3, [pc, #60]	; (800901c <prvAddCurrentTaskToDelayedList+0x94>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	3304      	adds	r3, #4
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	4610      	mov	r0, r2
 8008fe8:	f7fe fb27 	bl	800763a <vListInsert>
}
 8008fec:	e010      	b.n	8009010 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008fee:	4b0e      	ldr	r3, [pc, #56]	; (8009028 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008ff0:	681a      	ldr	r2, [r3, #0]
 8008ff2:	4b0a      	ldr	r3, [pc, #40]	; (800901c <prvAddCurrentTaskToDelayedList+0x94>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	3304      	adds	r3, #4
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	4610      	mov	r0, r2
 8008ffc:	f7fe fb1d 	bl	800763a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009000:	4b0a      	ldr	r3, [pc, #40]	; (800902c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	68ba      	ldr	r2, [r7, #8]
 8009006:	429a      	cmp	r2, r3
 8009008:	d202      	bcs.n	8009010 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800900a:	4a08      	ldr	r2, [pc, #32]	; (800902c <prvAddCurrentTaskToDelayedList+0xa4>)
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	6013      	str	r3, [r2, #0]
}
 8009010:	bf00      	nop
 8009012:	3710      	adds	r7, #16
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}
 8009018:	20001080 	.word	0x20001080
 800901c:	20000ba8 	.word	0x20000ba8
 8009020:	20001068 	.word	0x20001068
 8009024:	20001038 	.word	0x20001038
 8009028:	20001034 	.word	0x20001034
 800902c:	2000109c 	.word	0x2000109c

08009030 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b08a      	sub	sp, #40	; 0x28
 8009034:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009036:	2300      	movs	r3, #0
 8009038:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800903a:	f000 fb07 	bl	800964c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800903e:	4b1c      	ldr	r3, [pc, #112]	; (80090b0 <xTimerCreateTimerTask+0x80>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d021      	beq.n	800908a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009046:	2300      	movs	r3, #0
 8009048:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800904a:	2300      	movs	r3, #0
 800904c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800904e:	1d3a      	adds	r2, r7, #4
 8009050:	f107 0108 	add.w	r1, r7, #8
 8009054:	f107 030c 	add.w	r3, r7, #12
 8009058:	4618      	mov	r0, r3
 800905a:	f7fe fa83 	bl	8007564 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800905e:	6879      	ldr	r1, [r7, #4]
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	68fa      	ldr	r2, [r7, #12]
 8009064:	9202      	str	r2, [sp, #8]
 8009066:	9301      	str	r3, [sp, #4]
 8009068:	2302      	movs	r3, #2
 800906a:	9300      	str	r3, [sp, #0]
 800906c:	2300      	movs	r3, #0
 800906e:	460a      	mov	r2, r1
 8009070:	4910      	ldr	r1, [pc, #64]	; (80090b4 <xTimerCreateTimerTask+0x84>)
 8009072:	4811      	ldr	r0, [pc, #68]	; (80090b8 <xTimerCreateTimerTask+0x88>)
 8009074:	f7ff f86a 	bl	800814c <xTaskCreateStatic>
 8009078:	4603      	mov	r3, r0
 800907a:	4a10      	ldr	r2, [pc, #64]	; (80090bc <xTimerCreateTimerTask+0x8c>)
 800907c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800907e:	4b0f      	ldr	r3, [pc, #60]	; (80090bc <xTimerCreateTimerTask+0x8c>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d001      	beq.n	800908a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009086:	2301      	movs	r3, #1
 8009088:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d10a      	bne.n	80090a6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009094:	f383 8811 	msr	BASEPRI, r3
 8009098:	f3bf 8f6f 	isb	sy
 800909c:	f3bf 8f4f 	dsb	sy
 80090a0:	613b      	str	r3, [r7, #16]
}
 80090a2:	bf00      	nop
 80090a4:	e7fe      	b.n	80090a4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80090a6:	697b      	ldr	r3, [r7, #20]
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3718      	adds	r7, #24
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}
 80090b0:	200010d8 	.word	0x200010d8
 80090b4:	0800f358 	.word	0x0800f358
 80090b8:	080091f5 	.word	0x080091f5
 80090bc:	200010dc 	.word	0x200010dc

080090c0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b08a      	sub	sp, #40	; 0x28
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	60f8      	str	r0, [r7, #12]
 80090c8:	60b9      	str	r1, [r7, #8]
 80090ca:	607a      	str	r2, [r7, #4]
 80090cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80090ce:	2300      	movs	r3, #0
 80090d0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d10a      	bne.n	80090ee <xTimerGenericCommand+0x2e>
	__asm volatile
 80090d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090dc:	f383 8811 	msr	BASEPRI, r3
 80090e0:	f3bf 8f6f 	isb	sy
 80090e4:	f3bf 8f4f 	dsb	sy
 80090e8:	623b      	str	r3, [r7, #32]
}
 80090ea:	bf00      	nop
 80090ec:	e7fe      	b.n	80090ec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80090ee:	4b1a      	ldr	r3, [pc, #104]	; (8009158 <xTimerGenericCommand+0x98>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d02a      	beq.n	800914c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	2b05      	cmp	r3, #5
 8009106:	dc18      	bgt.n	800913a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009108:	f7ff feb2 	bl	8008e70 <xTaskGetSchedulerState>
 800910c:	4603      	mov	r3, r0
 800910e:	2b02      	cmp	r3, #2
 8009110:	d109      	bne.n	8009126 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009112:	4b11      	ldr	r3, [pc, #68]	; (8009158 <xTimerGenericCommand+0x98>)
 8009114:	6818      	ldr	r0, [r3, #0]
 8009116:	f107 0110 	add.w	r1, r7, #16
 800911a:	2300      	movs	r3, #0
 800911c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800911e:	f7fe fc2d 	bl	800797c <xQueueGenericSend>
 8009122:	6278      	str	r0, [r7, #36]	; 0x24
 8009124:	e012      	b.n	800914c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009126:	4b0c      	ldr	r3, [pc, #48]	; (8009158 <xTimerGenericCommand+0x98>)
 8009128:	6818      	ldr	r0, [r3, #0]
 800912a:	f107 0110 	add.w	r1, r7, #16
 800912e:	2300      	movs	r3, #0
 8009130:	2200      	movs	r2, #0
 8009132:	f7fe fc23 	bl	800797c <xQueueGenericSend>
 8009136:	6278      	str	r0, [r7, #36]	; 0x24
 8009138:	e008      	b.n	800914c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800913a:	4b07      	ldr	r3, [pc, #28]	; (8009158 <xTimerGenericCommand+0x98>)
 800913c:	6818      	ldr	r0, [r3, #0]
 800913e:	f107 0110 	add.w	r1, r7, #16
 8009142:	2300      	movs	r3, #0
 8009144:	683a      	ldr	r2, [r7, #0]
 8009146:	f7fe fd17 	bl	8007b78 <xQueueGenericSendFromISR>
 800914a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800914c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800914e:	4618      	mov	r0, r3
 8009150:	3728      	adds	r7, #40	; 0x28
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}
 8009156:	bf00      	nop
 8009158:	200010d8 	.word	0x200010d8

0800915c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b088      	sub	sp, #32
 8009160:	af02      	add	r7, sp, #8
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009166:	4b22      	ldr	r3, [pc, #136]	; (80091f0 <prvProcessExpiredTimer+0x94>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	68db      	ldr	r3, [r3, #12]
 800916c:	68db      	ldr	r3, [r3, #12]
 800916e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	3304      	adds	r3, #4
 8009174:	4618      	mov	r0, r3
 8009176:	f7fe fa99 	bl	80076ac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009180:	f003 0304 	and.w	r3, r3, #4
 8009184:	2b00      	cmp	r3, #0
 8009186:	d022      	beq.n	80091ce <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	699a      	ldr	r2, [r3, #24]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	18d1      	adds	r1, r2, r3
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	683a      	ldr	r2, [r7, #0]
 8009194:	6978      	ldr	r0, [r7, #20]
 8009196:	f000 f8d1 	bl	800933c <prvInsertTimerInActiveList>
 800919a:	4603      	mov	r3, r0
 800919c:	2b00      	cmp	r3, #0
 800919e:	d01f      	beq.n	80091e0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80091a0:	2300      	movs	r3, #0
 80091a2:	9300      	str	r3, [sp, #0]
 80091a4:	2300      	movs	r3, #0
 80091a6:	687a      	ldr	r2, [r7, #4]
 80091a8:	2100      	movs	r1, #0
 80091aa:	6978      	ldr	r0, [r7, #20]
 80091ac:	f7ff ff88 	bl	80090c0 <xTimerGenericCommand>
 80091b0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d113      	bne.n	80091e0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80091b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091bc:	f383 8811 	msr	BASEPRI, r3
 80091c0:	f3bf 8f6f 	isb	sy
 80091c4:	f3bf 8f4f 	dsb	sy
 80091c8:	60fb      	str	r3, [r7, #12]
}
 80091ca:	bf00      	nop
 80091cc:	e7fe      	b.n	80091cc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80091d4:	f023 0301 	bic.w	r3, r3, #1
 80091d8:	b2da      	uxtb	r2, r3
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	6a1b      	ldr	r3, [r3, #32]
 80091e4:	6978      	ldr	r0, [r7, #20]
 80091e6:	4798      	blx	r3
}
 80091e8:	bf00      	nop
 80091ea:	3718      	adds	r7, #24
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}
 80091f0:	200010d0 	.word	0x200010d0

080091f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b084      	sub	sp, #16
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80091fc:	f107 0308 	add.w	r3, r7, #8
 8009200:	4618      	mov	r0, r3
 8009202:	f000 f857 	bl	80092b4 <prvGetNextExpireTime>
 8009206:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	4619      	mov	r1, r3
 800920c:	68f8      	ldr	r0, [r7, #12]
 800920e:	f000 f803 	bl	8009218 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009212:	f000 f8d5 	bl	80093c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009216:	e7f1      	b.n	80091fc <prvTimerTask+0x8>

08009218 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b084      	sub	sp, #16
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009222:	f7ff fa39 	bl	8008698 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009226:	f107 0308 	add.w	r3, r7, #8
 800922a:	4618      	mov	r0, r3
 800922c:	f000 f866 	bl	80092fc <prvSampleTimeNow>
 8009230:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d130      	bne.n	800929a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d10a      	bne.n	8009254 <prvProcessTimerOrBlockTask+0x3c>
 800923e:	687a      	ldr	r2, [r7, #4]
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	429a      	cmp	r2, r3
 8009244:	d806      	bhi.n	8009254 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009246:	f7ff fa35 	bl	80086b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800924a:	68f9      	ldr	r1, [r7, #12]
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f7ff ff85 	bl	800915c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009252:	e024      	b.n	800929e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d008      	beq.n	800926c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800925a:	4b13      	ldr	r3, [pc, #76]	; (80092a8 <prvProcessTimerOrBlockTask+0x90>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d101      	bne.n	8009268 <prvProcessTimerOrBlockTask+0x50>
 8009264:	2301      	movs	r3, #1
 8009266:	e000      	b.n	800926a <prvProcessTimerOrBlockTask+0x52>
 8009268:	2300      	movs	r3, #0
 800926a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800926c:	4b0f      	ldr	r3, [pc, #60]	; (80092ac <prvProcessTimerOrBlockTask+0x94>)
 800926e:	6818      	ldr	r0, [r3, #0]
 8009270:	687a      	ldr	r2, [r7, #4]
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	1ad3      	subs	r3, r2, r3
 8009276:	683a      	ldr	r2, [r7, #0]
 8009278:	4619      	mov	r1, r3
 800927a:	f7fe ff33 	bl	80080e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800927e:	f7ff fa19 	bl	80086b4 <xTaskResumeAll>
 8009282:	4603      	mov	r3, r0
 8009284:	2b00      	cmp	r3, #0
 8009286:	d10a      	bne.n	800929e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009288:	4b09      	ldr	r3, [pc, #36]	; (80092b0 <prvProcessTimerOrBlockTask+0x98>)
 800928a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800928e:	601a      	str	r2, [r3, #0]
 8009290:	f3bf 8f4f 	dsb	sy
 8009294:	f3bf 8f6f 	isb	sy
}
 8009298:	e001      	b.n	800929e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800929a:	f7ff fa0b 	bl	80086b4 <xTaskResumeAll>
}
 800929e:	bf00      	nop
 80092a0:	3710      	adds	r7, #16
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop
 80092a8:	200010d4 	.word	0x200010d4
 80092ac:	200010d8 	.word	0x200010d8
 80092b0:	e000ed04 	.word	0xe000ed04

080092b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80092b4:	b480      	push	{r7}
 80092b6:	b085      	sub	sp, #20
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80092bc:	4b0e      	ldr	r3, [pc, #56]	; (80092f8 <prvGetNextExpireTime+0x44>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d101      	bne.n	80092ca <prvGetNextExpireTime+0x16>
 80092c6:	2201      	movs	r2, #1
 80092c8:	e000      	b.n	80092cc <prvGetNextExpireTime+0x18>
 80092ca:	2200      	movs	r2, #0
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d105      	bne.n	80092e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80092d8:	4b07      	ldr	r3, [pc, #28]	; (80092f8 <prvGetNextExpireTime+0x44>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	68db      	ldr	r3, [r3, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	60fb      	str	r3, [r7, #12]
 80092e2:	e001      	b.n	80092e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80092e4:	2300      	movs	r3, #0
 80092e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80092e8:	68fb      	ldr	r3, [r7, #12]
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3714      	adds	r7, #20
 80092ee:	46bd      	mov	sp, r7
 80092f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f4:	4770      	bx	lr
 80092f6:	bf00      	nop
 80092f8:	200010d0 	.word	0x200010d0

080092fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b084      	sub	sp, #16
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009304:	f7ff fa74 	bl	80087f0 <xTaskGetTickCount>
 8009308:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800930a:	4b0b      	ldr	r3, [pc, #44]	; (8009338 <prvSampleTimeNow+0x3c>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	68fa      	ldr	r2, [r7, #12]
 8009310:	429a      	cmp	r2, r3
 8009312:	d205      	bcs.n	8009320 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009314:	f000 f936 	bl	8009584 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2201      	movs	r2, #1
 800931c:	601a      	str	r2, [r3, #0]
 800931e:	e002      	b.n	8009326 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2200      	movs	r2, #0
 8009324:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009326:	4a04      	ldr	r2, [pc, #16]	; (8009338 <prvSampleTimeNow+0x3c>)
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800932c:	68fb      	ldr	r3, [r7, #12]
}
 800932e:	4618      	mov	r0, r3
 8009330:	3710      	adds	r7, #16
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	200010e0 	.word	0x200010e0

0800933c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b086      	sub	sp, #24
 8009340:	af00      	add	r7, sp, #0
 8009342:	60f8      	str	r0, [r7, #12]
 8009344:	60b9      	str	r1, [r7, #8]
 8009346:	607a      	str	r2, [r7, #4]
 8009348:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800934a:	2300      	movs	r3, #0
 800934c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	68ba      	ldr	r2, [r7, #8]
 8009352:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	68fa      	ldr	r2, [r7, #12]
 8009358:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800935a:	68ba      	ldr	r2, [r7, #8]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	429a      	cmp	r2, r3
 8009360:	d812      	bhi.n	8009388 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009362:	687a      	ldr	r2, [r7, #4]
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	1ad2      	subs	r2, r2, r3
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	699b      	ldr	r3, [r3, #24]
 800936c:	429a      	cmp	r2, r3
 800936e:	d302      	bcc.n	8009376 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009370:	2301      	movs	r3, #1
 8009372:	617b      	str	r3, [r7, #20]
 8009374:	e01b      	b.n	80093ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009376:	4b10      	ldr	r3, [pc, #64]	; (80093b8 <prvInsertTimerInActiveList+0x7c>)
 8009378:	681a      	ldr	r2, [r3, #0]
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	3304      	adds	r3, #4
 800937e:	4619      	mov	r1, r3
 8009380:	4610      	mov	r0, r2
 8009382:	f7fe f95a 	bl	800763a <vListInsert>
 8009386:	e012      	b.n	80093ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009388:	687a      	ldr	r2, [r7, #4]
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	429a      	cmp	r2, r3
 800938e:	d206      	bcs.n	800939e <prvInsertTimerInActiveList+0x62>
 8009390:	68ba      	ldr	r2, [r7, #8]
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	429a      	cmp	r2, r3
 8009396:	d302      	bcc.n	800939e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009398:	2301      	movs	r3, #1
 800939a:	617b      	str	r3, [r7, #20]
 800939c:	e007      	b.n	80093ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800939e:	4b07      	ldr	r3, [pc, #28]	; (80093bc <prvInsertTimerInActiveList+0x80>)
 80093a0:	681a      	ldr	r2, [r3, #0]
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	3304      	adds	r3, #4
 80093a6:	4619      	mov	r1, r3
 80093a8:	4610      	mov	r0, r2
 80093aa:	f7fe f946 	bl	800763a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80093ae:	697b      	ldr	r3, [r7, #20]
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3718      	adds	r7, #24
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}
 80093b8:	200010d4 	.word	0x200010d4
 80093bc:	200010d0 	.word	0x200010d0

080093c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b08e      	sub	sp, #56	; 0x38
 80093c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80093c6:	e0ca      	b.n	800955e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	da18      	bge.n	8009400 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80093ce:	1d3b      	adds	r3, r7, #4
 80093d0:	3304      	adds	r3, #4
 80093d2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80093d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d10a      	bne.n	80093f0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80093da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093de:	f383 8811 	msr	BASEPRI, r3
 80093e2:	f3bf 8f6f 	isb	sy
 80093e6:	f3bf 8f4f 	dsb	sy
 80093ea:	61fb      	str	r3, [r7, #28]
}
 80093ec:	bf00      	nop
 80093ee:	e7fe      	b.n	80093ee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80093f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093f6:	6850      	ldr	r0, [r2, #4]
 80093f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093fa:	6892      	ldr	r2, [r2, #8]
 80093fc:	4611      	mov	r1, r2
 80093fe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2b00      	cmp	r3, #0
 8009404:	f2c0 80ab 	blt.w	800955e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800940c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800940e:	695b      	ldr	r3, [r3, #20]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d004      	beq.n	800941e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009416:	3304      	adds	r3, #4
 8009418:	4618      	mov	r0, r3
 800941a:	f7fe f947 	bl	80076ac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800941e:	463b      	mov	r3, r7
 8009420:	4618      	mov	r0, r3
 8009422:	f7ff ff6b 	bl	80092fc <prvSampleTimeNow>
 8009426:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2b09      	cmp	r3, #9
 800942c:	f200 8096 	bhi.w	800955c <prvProcessReceivedCommands+0x19c>
 8009430:	a201      	add	r2, pc, #4	; (adr r2, 8009438 <prvProcessReceivedCommands+0x78>)
 8009432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009436:	bf00      	nop
 8009438:	08009461 	.word	0x08009461
 800943c:	08009461 	.word	0x08009461
 8009440:	08009461 	.word	0x08009461
 8009444:	080094d5 	.word	0x080094d5
 8009448:	080094e9 	.word	0x080094e9
 800944c:	08009533 	.word	0x08009533
 8009450:	08009461 	.word	0x08009461
 8009454:	08009461 	.word	0x08009461
 8009458:	080094d5 	.word	0x080094d5
 800945c:	080094e9 	.word	0x080094e9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009462:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009466:	f043 0301 	orr.w	r3, r3, #1
 800946a:	b2da      	uxtb	r2, r3
 800946c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800946e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009472:	68ba      	ldr	r2, [r7, #8]
 8009474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009476:	699b      	ldr	r3, [r3, #24]
 8009478:	18d1      	adds	r1, r2, r3
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800947e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009480:	f7ff ff5c 	bl	800933c <prvInsertTimerInActiveList>
 8009484:	4603      	mov	r3, r0
 8009486:	2b00      	cmp	r3, #0
 8009488:	d069      	beq.n	800955e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800948a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800948c:	6a1b      	ldr	r3, [r3, #32]
 800948e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009490:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009494:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009498:	f003 0304 	and.w	r3, r3, #4
 800949c:	2b00      	cmp	r3, #0
 800949e:	d05e      	beq.n	800955e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80094a0:	68ba      	ldr	r2, [r7, #8]
 80094a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a4:	699b      	ldr	r3, [r3, #24]
 80094a6:	441a      	add	r2, r3
 80094a8:	2300      	movs	r3, #0
 80094aa:	9300      	str	r3, [sp, #0]
 80094ac:	2300      	movs	r3, #0
 80094ae:	2100      	movs	r1, #0
 80094b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094b2:	f7ff fe05 	bl	80090c0 <xTimerGenericCommand>
 80094b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80094b8:	6a3b      	ldr	r3, [r7, #32]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d14f      	bne.n	800955e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80094be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c2:	f383 8811 	msr	BASEPRI, r3
 80094c6:	f3bf 8f6f 	isb	sy
 80094ca:	f3bf 8f4f 	dsb	sy
 80094ce:	61bb      	str	r3, [r7, #24]
}
 80094d0:	bf00      	nop
 80094d2:	e7fe      	b.n	80094d2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80094d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094da:	f023 0301 	bic.w	r3, r3, #1
 80094de:	b2da      	uxtb	r2, r3
 80094e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80094e6:	e03a      	b.n	800955e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80094e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094ee:	f043 0301 	orr.w	r3, r3, #1
 80094f2:	b2da      	uxtb	r2, r3
 80094f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80094fa:	68ba      	ldr	r2, [r7, #8]
 80094fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094fe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009502:	699b      	ldr	r3, [r3, #24]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d10a      	bne.n	800951e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800950c:	f383 8811 	msr	BASEPRI, r3
 8009510:	f3bf 8f6f 	isb	sy
 8009514:	f3bf 8f4f 	dsb	sy
 8009518:	617b      	str	r3, [r7, #20]
}
 800951a:	bf00      	nop
 800951c:	e7fe      	b.n	800951c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800951e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009520:	699a      	ldr	r2, [r3, #24]
 8009522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009524:	18d1      	adds	r1, r2, r3
 8009526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800952a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800952c:	f7ff ff06 	bl	800933c <prvInsertTimerInActiveList>
					break;
 8009530:	e015      	b.n	800955e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009534:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009538:	f003 0302 	and.w	r3, r3, #2
 800953c:	2b00      	cmp	r3, #0
 800953e:	d103      	bne.n	8009548 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009540:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009542:	f000 fbdd 	bl	8009d00 <vPortFree>
 8009546:	e00a      	b.n	800955e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800954a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800954e:	f023 0301 	bic.w	r3, r3, #1
 8009552:	b2da      	uxtb	r2, r3
 8009554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009556:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800955a:	e000      	b.n	800955e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800955c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800955e:	4b08      	ldr	r3, [pc, #32]	; (8009580 <prvProcessReceivedCommands+0x1c0>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	1d39      	adds	r1, r7, #4
 8009564:	2200      	movs	r2, #0
 8009566:	4618      	mov	r0, r3
 8009568:	f7fe fba2 	bl	8007cb0 <xQueueReceive>
 800956c:	4603      	mov	r3, r0
 800956e:	2b00      	cmp	r3, #0
 8009570:	f47f af2a 	bne.w	80093c8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009574:	bf00      	nop
 8009576:	bf00      	nop
 8009578:	3730      	adds	r7, #48	; 0x30
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}
 800957e:	bf00      	nop
 8009580:	200010d8 	.word	0x200010d8

08009584 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b088      	sub	sp, #32
 8009588:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800958a:	e048      	b.n	800961e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800958c:	4b2d      	ldr	r3, [pc, #180]	; (8009644 <prvSwitchTimerLists+0xc0>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	68db      	ldr	r3, [r3, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009596:	4b2b      	ldr	r3, [pc, #172]	; (8009644 <prvSwitchTimerLists+0xc0>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	68db      	ldr	r3, [r3, #12]
 800959c:	68db      	ldr	r3, [r3, #12]
 800959e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	3304      	adds	r3, #4
 80095a4:	4618      	mov	r0, r3
 80095a6:	f7fe f881 	bl	80076ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	6a1b      	ldr	r3, [r3, #32]
 80095ae:	68f8      	ldr	r0, [r7, #12]
 80095b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095b8:	f003 0304 	and.w	r3, r3, #4
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d02e      	beq.n	800961e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	699b      	ldr	r3, [r3, #24]
 80095c4:	693a      	ldr	r2, [r7, #16]
 80095c6:	4413      	add	r3, r2
 80095c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80095ca:	68ba      	ldr	r2, [r7, #8]
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	429a      	cmp	r2, r3
 80095d0:	d90e      	bls.n	80095f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	68ba      	ldr	r2, [r7, #8]
 80095d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	68fa      	ldr	r2, [r7, #12]
 80095dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80095de:	4b19      	ldr	r3, [pc, #100]	; (8009644 <prvSwitchTimerLists+0xc0>)
 80095e0:	681a      	ldr	r2, [r3, #0]
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	3304      	adds	r3, #4
 80095e6:	4619      	mov	r1, r3
 80095e8:	4610      	mov	r0, r2
 80095ea:	f7fe f826 	bl	800763a <vListInsert>
 80095ee:	e016      	b.n	800961e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80095f0:	2300      	movs	r3, #0
 80095f2:	9300      	str	r3, [sp, #0]
 80095f4:	2300      	movs	r3, #0
 80095f6:	693a      	ldr	r2, [r7, #16]
 80095f8:	2100      	movs	r1, #0
 80095fa:	68f8      	ldr	r0, [r7, #12]
 80095fc:	f7ff fd60 	bl	80090c0 <xTimerGenericCommand>
 8009600:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d10a      	bne.n	800961e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800960c:	f383 8811 	msr	BASEPRI, r3
 8009610:	f3bf 8f6f 	isb	sy
 8009614:	f3bf 8f4f 	dsb	sy
 8009618:	603b      	str	r3, [r7, #0]
}
 800961a:	bf00      	nop
 800961c:	e7fe      	b.n	800961c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800961e:	4b09      	ldr	r3, [pc, #36]	; (8009644 <prvSwitchTimerLists+0xc0>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d1b1      	bne.n	800958c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009628:	4b06      	ldr	r3, [pc, #24]	; (8009644 <prvSwitchTimerLists+0xc0>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800962e:	4b06      	ldr	r3, [pc, #24]	; (8009648 <prvSwitchTimerLists+0xc4>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4a04      	ldr	r2, [pc, #16]	; (8009644 <prvSwitchTimerLists+0xc0>)
 8009634:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009636:	4a04      	ldr	r2, [pc, #16]	; (8009648 <prvSwitchTimerLists+0xc4>)
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	6013      	str	r3, [r2, #0]
}
 800963c:	bf00      	nop
 800963e:	3718      	adds	r7, #24
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}
 8009644:	200010d0 	.word	0x200010d0
 8009648:	200010d4 	.word	0x200010d4

0800964c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b082      	sub	sp, #8
 8009650:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009652:	f000 f967 	bl	8009924 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009656:	4b15      	ldr	r3, [pc, #84]	; (80096ac <prvCheckForValidListAndQueue+0x60>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d120      	bne.n	80096a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800965e:	4814      	ldr	r0, [pc, #80]	; (80096b0 <prvCheckForValidListAndQueue+0x64>)
 8009660:	f7fd ff9a 	bl	8007598 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009664:	4813      	ldr	r0, [pc, #76]	; (80096b4 <prvCheckForValidListAndQueue+0x68>)
 8009666:	f7fd ff97 	bl	8007598 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800966a:	4b13      	ldr	r3, [pc, #76]	; (80096b8 <prvCheckForValidListAndQueue+0x6c>)
 800966c:	4a10      	ldr	r2, [pc, #64]	; (80096b0 <prvCheckForValidListAndQueue+0x64>)
 800966e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009670:	4b12      	ldr	r3, [pc, #72]	; (80096bc <prvCheckForValidListAndQueue+0x70>)
 8009672:	4a10      	ldr	r2, [pc, #64]	; (80096b4 <prvCheckForValidListAndQueue+0x68>)
 8009674:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009676:	2300      	movs	r3, #0
 8009678:	9300      	str	r3, [sp, #0]
 800967a:	4b11      	ldr	r3, [pc, #68]	; (80096c0 <prvCheckForValidListAndQueue+0x74>)
 800967c:	4a11      	ldr	r2, [pc, #68]	; (80096c4 <prvCheckForValidListAndQueue+0x78>)
 800967e:	2110      	movs	r1, #16
 8009680:	200a      	movs	r0, #10
 8009682:	f7fe f8a5 	bl	80077d0 <xQueueGenericCreateStatic>
 8009686:	4603      	mov	r3, r0
 8009688:	4a08      	ldr	r2, [pc, #32]	; (80096ac <prvCheckForValidListAndQueue+0x60>)
 800968a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800968c:	4b07      	ldr	r3, [pc, #28]	; (80096ac <prvCheckForValidListAndQueue+0x60>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d005      	beq.n	80096a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009694:	4b05      	ldr	r3, [pc, #20]	; (80096ac <prvCheckForValidListAndQueue+0x60>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	490b      	ldr	r1, [pc, #44]	; (80096c8 <prvCheckForValidListAndQueue+0x7c>)
 800969a:	4618      	mov	r0, r3
 800969c:	f7fe fcf8 	bl	8008090 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80096a0:	f000 f970 	bl	8009984 <vPortExitCritical>
}
 80096a4:	bf00      	nop
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
 80096aa:	bf00      	nop
 80096ac:	200010d8 	.word	0x200010d8
 80096b0:	200010a8 	.word	0x200010a8
 80096b4:	200010bc 	.word	0x200010bc
 80096b8:	200010d0 	.word	0x200010d0
 80096bc:	200010d4 	.word	0x200010d4
 80096c0:	20001184 	.word	0x20001184
 80096c4:	200010e4 	.word	0x200010e4
 80096c8:	0800f360 	.word	0x0800f360

080096cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80096cc:	b480      	push	{r7}
 80096ce:	b085      	sub	sp, #20
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	60f8      	str	r0, [r7, #12]
 80096d4:	60b9      	str	r1, [r7, #8]
 80096d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	3b04      	subs	r3, #4
 80096dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80096e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	3b04      	subs	r3, #4
 80096ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	f023 0201 	bic.w	r2, r3, #1
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	3b04      	subs	r3, #4
 80096fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80096fc:	4a0c      	ldr	r2, [pc, #48]	; (8009730 <pxPortInitialiseStack+0x64>)
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	3b14      	subs	r3, #20
 8009706:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009708:	687a      	ldr	r2, [r7, #4]
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	3b04      	subs	r3, #4
 8009712:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	f06f 0202 	mvn.w	r2, #2
 800971a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	3b20      	subs	r3, #32
 8009720:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009722:	68fb      	ldr	r3, [r7, #12]
}
 8009724:	4618      	mov	r0, r3
 8009726:	3714      	adds	r7, #20
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr
 8009730:	08009735 	.word	0x08009735

08009734 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009734:	b480      	push	{r7}
 8009736:	b085      	sub	sp, #20
 8009738:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800973a:	2300      	movs	r3, #0
 800973c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800973e:	4b12      	ldr	r3, [pc, #72]	; (8009788 <prvTaskExitError+0x54>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009746:	d00a      	beq.n	800975e <prvTaskExitError+0x2a>
	__asm volatile
 8009748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800974c:	f383 8811 	msr	BASEPRI, r3
 8009750:	f3bf 8f6f 	isb	sy
 8009754:	f3bf 8f4f 	dsb	sy
 8009758:	60fb      	str	r3, [r7, #12]
}
 800975a:	bf00      	nop
 800975c:	e7fe      	b.n	800975c <prvTaskExitError+0x28>
	__asm volatile
 800975e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009762:	f383 8811 	msr	BASEPRI, r3
 8009766:	f3bf 8f6f 	isb	sy
 800976a:	f3bf 8f4f 	dsb	sy
 800976e:	60bb      	str	r3, [r7, #8]
}
 8009770:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009772:	bf00      	nop
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d0fc      	beq.n	8009774 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800977a:	bf00      	nop
 800977c:	bf00      	nop
 800977e:	3714      	adds	r7, #20
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr
 8009788:	2000000c 	.word	0x2000000c
 800978c:	00000000 	.word	0x00000000

08009790 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009790:	4b07      	ldr	r3, [pc, #28]	; (80097b0 <pxCurrentTCBConst2>)
 8009792:	6819      	ldr	r1, [r3, #0]
 8009794:	6808      	ldr	r0, [r1, #0]
 8009796:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800979a:	f380 8809 	msr	PSP, r0
 800979e:	f3bf 8f6f 	isb	sy
 80097a2:	f04f 0000 	mov.w	r0, #0
 80097a6:	f380 8811 	msr	BASEPRI, r0
 80097aa:	4770      	bx	lr
 80097ac:	f3af 8000 	nop.w

080097b0 <pxCurrentTCBConst2>:
 80097b0:	20000ba8 	.word	0x20000ba8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80097b4:	bf00      	nop
 80097b6:	bf00      	nop

080097b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80097b8:	4808      	ldr	r0, [pc, #32]	; (80097dc <prvPortStartFirstTask+0x24>)
 80097ba:	6800      	ldr	r0, [r0, #0]
 80097bc:	6800      	ldr	r0, [r0, #0]
 80097be:	f380 8808 	msr	MSP, r0
 80097c2:	f04f 0000 	mov.w	r0, #0
 80097c6:	f380 8814 	msr	CONTROL, r0
 80097ca:	b662      	cpsie	i
 80097cc:	b661      	cpsie	f
 80097ce:	f3bf 8f4f 	dsb	sy
 80097d2:	f3bf 8f6f 	isb	sy
 80097d6:	df00      	svc	0
 80097d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80097da:	bf00      	nop
 80097dc:	e000ed08 	.word	0xe000ed08

080097e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b086      	sub	sp, #24
 80097e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80097e6:	4b46      	ldr	r3, [pc, #280]	; (8009900 <xPortStartScheduler+0x120>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	4a46      	ldr	r2, [pc, #280]	; (8009904 <xPortStartScheduler+0x124>)
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d10a      	bne.n	8009806 <xPortStartScheduler+0x26>
	__asm volatile
 80097f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f4:	f383 8811 	msr	BASEPRI, r3
 80097f8:	f3bf 8f6f 	isb	sy
 80097fc:	f3bf 8f4f 	dsb	sy
 8009800:	613b      	str	r3, [r7, #16]
}
 8009802:	bf00      	nop
 8009804:	e7fe      	b.n	8009804 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009806:	4b3e      	ldr	r3, [pc, #248]	; (8009900 <xPortStartScheduler+0x120>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	4a3f      	ldr	r2, [pc, #252]	; (8009908 <xPortStartScheduler+0x128>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d10a      	bne.n	8009826 <xPortStartScheduler+0x46>
	__asm volatile
 8009810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009814:	f383 8811 	msr	BASEPRI, r3
 8009818:	f3bf 8f6f 	isb	sy
 800981c:	f3bf 8f4f 	dsb	sy
 8009820:	60fb      	str	r3, [r7, #12]
}
 8009822:	bf00      	nop
 8009824:	e7fe      	b.n	8009824 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009826:	4b39      	ldr	r3, [pc, #228]	; (800990c <xPortStartScheduler+0x12c>)
 8009828:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	781b      	ldrb	r3, [r3, #0]
 800982e:	b2db      	uxtb	r3, r3
 8009830:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	22ff      	movs	r2, #255	; 0xff
 8009836:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	781b      	ldrb	r3, [r3, #0]
 800983c:	b2db      	uxtb	r3, r3
 800983e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009840:	78fb      	ldrb	r3, [r7, #3]
 8009842:	b2db      	uxtb	r3, r3
 8009844:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009848:	b2da      	uxtb	r2, r3
 800984a:	4b31      	ldr	r3, [pc, #196]	; (8009910 <xPortStartScheduler+0x130>)
 800984c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800984e:	4b31      	ldr	r3, [pc, #196]	; (8009914 <xPortStartScheduler+0x134>)
 8009850:	2207      	movs	r2, #7
 8009852:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009854:	e009      	b.n	800986a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009856:	4b2f      	ldr	r3, [pc, #188]	; (8009914 <xPortStartScheduler+0x134>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	3b01      	subs	r3, #1
 800985c:	4a2d      	ldr	r2, [pc, #180]	; (8009914 <xPortStartScheduler+0x134>)
 800985e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009860:	78fb      	ldrb	r3, [r7, #3]
 8009862:	b2db      	uxtb	r3, r3
 8009864:	005b      	lsls	r3, r3, #1
 8009866:	b2db      	uxtb	r3, r3
 8009868:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800986a:	78fb      	ldrb	r3, [r7, #3]
 800986c:	b2db      	uxtb	r3, r3
 800986e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009872:	2b80      	cmp	r3, #128	; 0x80
 8009874:	d0ef      	beq.n	8009856 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009876:	4b27      	ldr	r3, [pc, #156]	; (8009914 <xPortStartScheduler+0x134>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f1c3 0307 	rsb	r3, r3, #7
 800987e:	2b04      	cmp	r3, #4
 8009880:	d00a      	beq.n	8009898 <xPortStartScheduler+0xb8>
	__asm volatile
 8009882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009886:	f383 8811 	msr	BASEPRI, r3
 800988a:	f3bf 8f6f 	isb	sy
 800988e:	f3bf 8f4f 	dsb	sy
 8009892:	60bb      	str	r3, [r7, #8]
}
 8009894:	bf00      	nop
 8009896:	e7fe      	b.n	8009896 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009898:	4b1e      	ldr	r3, [pc, #120]	; (8009914 <xPortStartScheduler+0x134>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	021b      	lsls	r3, r3, #8
 800989e:	4a1d      	ldr	r2, [pc, #116]	; (8009914 <xPortStartScheduler+0x134>)
 80098a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80098a2:	4b1c      	ldr	r3, [pc, #112]	; (8009914 <xPortStartScheduler+0x134>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80098aa:	4a1a      	ldr	r2, [pc, #104]	; (8009914 <xPortStartScheduler+0x134>)
 80098ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	b2da      	uxtb	r2, r3
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80098b6:	4b18      	ldr	r3, [pc, #96]	; (8009918 <xPortStartScheduler+0x138>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a17      	ldr	r2, [pc, #92]	; (8009918 <xPortStartScheduler+0x138>)
 80098bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80098c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80098c2:	4b15      	ldr	r3, [pc, #84]	; (8009918 <xPortStartScheduler+0x138>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4a14      	ldr	r2, [pc, #80]	; (8009918 <xPortStartScheduler+0x138>)
 80098c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80098cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80098ce:	f000 f8dd 	bl	8009a8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80098d2:	4b12      	ldr	r3, [pc, #72]	; (800991c <xPortStartScheduler+0x13c>)
 80098d4:	2200      	movs	r2, #0
 80098d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80098d8:	f000 f8fc 	bl	8009ad4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80098dc:	4b10      	ldr	r3, [pc, #64]	; (8009920 <xPortStartScheduler+0x140>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	4a0f      	ldr	r2, [pc, #60]	; (8009920 <xPortStartScheduler+0x140>)
 80098e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80098e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80098e8:	f7ff ff66 	bl	80097b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80098ec:	f7ff f84a 	bl	8008984 <vTaskSwitchContext>
	prvTaskExitError();
 80098f0:	f7ff ff20 	bl	8009734 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80098f4:	2300      	movs	r3, #0
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3718      	adds	r7, #24
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
 80098fe:	bf00      	nop
 8009900:	e000ed00 	.word	0xe000ed00
 8009904:	410fc271 	.word	0x410fc271
 8009908:	410fc270 	.word	0x410fc270
 800990c:	e000e400 	.word	0xe000e400
 8009910:	200011d4 	.word	0x200011d4
 8009914:	200011d8 	.word	0x200011d8
 8009918:	e000ed20 	.word	0xe000ed20
 800991c:	2000000c 	.word	0x2000000c
 8009920:	e000ef34 	.word	0xe000ef34

08009924 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009924:	b480      	push	{r7}
 8009926:	b083      	sub	sp, #12
 8009928:	af00      	add	r7, sp, #0
	__asm volatile
 800992a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800992e:	f383 8811 	msr	BASEPRI, r3
 8009932:	f3bf 8f6f 	isb	sy
 8009936:	f3bf 8f4f 	dsb	sy
 800993a:	607b      	str	r3, [r7, #4]
}
 800993c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800993e:	4b0f      	ldr	r3, [pc, #60]	; (800997c <vPortEnterCritical+0x58>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	3301      	adds	r3, #1
 8009944:	4a0d      	ldr	r2, [pc, #52]	; (800997c <vPortEnterCritical+0x58>)
 8009946:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009948:	4b0c      	ldr	r3, [pc, #48]	; (800997c <vPortEnterCritical+0x58>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	2b01      	cmp	r3, #1
 800994e:	d10f      	bne.n	8009970 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009950:	4b0b      	ldr	r3, [pc, #44]	; (8009980 <vPortEnterCritical+0x5c>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	b2db      	uxtb	r3, r3
 8009956:	2b00      	cmp	r3, #0
 8009958:	d00a      	beq.n	8009970 <vPortEnterCritical+0x4c>
	__asm volatile
 800995a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800995e:	f383 8811 	msr	BASEPRI, r3
 8009962:	f3bf 8f6f 	isb	sy
 8009966:	f3bf 8f4f 	dsb	sy
 800996a:	603b      	str	r3, [r7, #0]
}
 800996c:	bf00      	nop
 800996e:	e7fe      	b.n	800996e <vPortEnterCritical+0x4a>
	}
}
 8009970:	bf00      	nop
 8009972:	370c      	adds	r7, #12
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr
 800997c:	2000000c 	.word	0x2000000c
 8009980:	e000ed04 	.word	0xe000ed04

08009984 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009984:	b480      	push	{r7}
 8009986:	b083      	sub	sp, #12
 8009988:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800998a:	4b12      	ldr	r3, [pc, #72]	; (80099d4 <vPortExitCritical+0x50>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d10a      	bne.n	80099a8 <vPortExitCritical+0x24>
	__asm volatile
 8009992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009996:	f383 8811 	msr	BASEPRI, r3
 800999a:	f3bf 8f6f 	isb	sy
 800999e:	f3bf 8f4f 	dsb	sy
 80099a2:	607b      	str	r3, [r7, #4]
}
 80099a4:	bf00      	nop
 80099a6:	e7fe      	b.n	80099a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80099a8:	4b0a      	ldr	r3, [pc, #40]	; (80099d4 <vPortExitCritical+0x50>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	3b01      	subs	r3, #1
 80099ae:	4a09      	ldr	r2, [pc, #36]	; (80099d4 <vPortExitCritical+0x50>)
 80099b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80099b2:	4b08      	ldr	r3, [pc, #32]	; (80099d4 <vPortExitCritical+0x50>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d105      	bne.n	80099c6 <vPortExitCritical+0x42>
 80099ba:	2300      	movs	r3, #0
 80099bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	f383 8811 	msr	BASEPRI, r3
}
 80099c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80099c6:	bf00      	nop
 80099c8:	370c      	adds	r7, #12
 80099ca:	46bd      	mov	sp, r7
 80099cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d0:	4770      	bx	lr
 80099d2:	bf00      	nop
 80099d4:	2000000c 	.word	0x2000000c
	...

080099e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80099e0:	f3ef 8009 	mrs	r0, PSP
 80099e4:	f3bf 8f6f 	isb	sy
 80099e8:	4b15      	ldr	r3, [pc, #84]	; (8009a40 <pxCurrentTCBConst>)
 80099ea:	681a      	ldr	r2, [r3, #0]
 80099ec:	f01e 0f10 	tst.w	lr, #16
 80099f0:	bf08      	it	eq
 80099f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80099f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099fa:	6010      	str	r0, [r2, #0]
 80099fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009a00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009a04:	f380 8811 	msr	BASEPRI, r0
 8009a08:	f3bf 8f4f 	dsb	sy
 8009a0c:	f3bf 8f6f 	isb	sy
 8009a10:	f7fe ffb8 	bl	8008984 <vTaskSwitchContext>
 8009a14:	f04f 0000 	mov.w	r0, #0
 8009a18:	f380 8811 	msr	BASEPRI, r0
 8009a1c:	bc09      	pop	{r0, r3}
 8009a1e:	6819      	ldr	r1, [r3, #0]
 8009a20:	6808      	ldr	r0, [r1, #0]
 8009a22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a26:	f01e 0f10 	tst.w	lr, #16
 8009a2a:	bf08      	it	eq
 8009a2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009a30:	f380 8809 	msr	PSP, r0
 8009a34:	f3bf 8f6f 	isb	sy
 8009a38:	4770      	bx	lr
 8009a3a:	bf00      	nop
 8009a3c:	f3af 8000 	nop.w

08009a40 <pxCurrentTCBConst>:
 8009a40:	20000ba8 	.word	0x20000ba8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009a44:	bf00      	nop
 8009a46:	bf00      	nop

08009a48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b082      	sub	sp, #8
 8009a4c:	af00      	add	r7, sp, #0
	__asm volatile
 8009a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a52:	f383 8811 	msr	BASEPRI, r3
 8009a56:	f3bf 8f6f 	isb	sy
 8009a5a:	f3bf 8f4f 	dsb	sy
 8009a5e:	607b      	str	r3, [r7, #4]
}
 8009a60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009a62:	f7fe fed5 	bl	8008810 <xTaskIncrementTick>
 8009a66:	4603      	mov	r3, r0
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d003      	beq.n	8009a74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009a6c:	4b06      	ldr	r3, [pc, #24]	; (8009a88 <xPortSysTickHandler+0x40>)
 8009a6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a72:	601a      	str	r2, [r3, #0]
 8009a74:	2300      	movs	r3, #0
 8009a76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	f383 8811 	msr	BASEPRI, r3
}
 8009a7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009a80:	bf00      	nop
 8009a82:	3708      	adds	r7, #8
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}
 8009a88:	e000ed04 	.word	0xe000ed04

08009a8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009a90:	4b0b      	ldr	r3, [pc, #44]	; (8009ac0 <vPortSetupTimerInterrupt+0x34>)
 8009a92:	2200      	movs	r2, #0
 8009a94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009a96:	4b0b      	ldr	r3, [pc, #44]	; (8009ac4 <vPortSetupTimerInterrupt+0x38>)
 8009a98:	2200      	movs	r2, #0
 8009a9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009a9c:	4b0a      	ldr	r3, [pc, #40]	; (8009ac8 <vPortSetupTimerInterrupt+0x3c>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a0a      	ldr	r2, [pc, #40]	; (8009acc <vPortSetupTimerInterrupt+0x40>)
 8009aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8009aa6:	099b      	lsrs	r3, r3, #6
 8009aa8:	4a09      	ldr	r2, [pc, #36]	; (8009ad0 <vPortSetupTimerInterrupt+0x44>)
 8009aaa:	3b01      	subs	r3, #1
 8009aac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009aae:	4b04      	ldr	r3, [pc, #16]	; (8009ac0 <vPortSetupTimerInterrupt+0x34>)
 8009ab0:	2207      	movs	r2, #7
 8009ab2:	601a      	str	r2, [r3, #0]
}
 8009ab4:	bf00      	nop
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abc:	4770      	bx	lr
 8009abe:	bf00      	nop
 8009ac0:	e000e010 	.word	0xe000e010
 8009ac4:	e000e018 	.word	0xe000e018
 8009ac8:	20000000 	.word	0x20000000
 8009acc:	10624dd3 	.word	0x10624dd3
 8009ad0:	e000e014 	.word	0xe000e014

08009ad4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009ad4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009ae4 <vPortEnableVFP+0x10>
 8009ad8:	6801      	ldr	r1, [r0, #0]
 8009ada:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009ade:	6001      	str	r1, [r0, #0]
 8009ae0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009ae2:	bf00      	nop
 8009ae4:	e000ed88 	.word	0xe000ed88

08009ae8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009ae8:	b480      	push	{r7}
 8009aea:	b085      	sub	sp, #20
 8009aec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009aee:	f3ef 8305 	mrs	r3, IPSR
 8009af2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	2b0f      	cmp	r3, #15
 8009af8:	d914      	bls.n	8009b24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009afa:	4a17      	ldr	r2, [pc, #92]	; (8009b58 <vPortValidateInterruptPriority+0x70>)
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	4413      	add	r3, r2
 8009b00:	781b      	ldrb	r3, [r3, #0]
 8009b02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009b04:	4b15      	ldr	r3, [pc, #84]	; (8009b5c <vPortValidateInterruptPriority+0x74>)
 8009b06:	781b      	ldrb	r3, [r3, #0]
 8009b08:	7afa      	ldrb	r2, [r7, #11]
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	d20a      	bcs.n	8009b24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b12:	f383 8811 	msr	BASEPRI, r3
 8009b16:	f3bf 8f6f 	isb	sy
 8009b1a:	f3bf 8f4f 	dsb	sy
 8009b1e:	607b      	str	r3, [r7, #4]
}
 8009b20:	bf00      	nop
 8009b22:	e7fe      	b.n	8009b22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009b24:	4b0e      	ldr	r3, [pc, #56]	; (8009b60 <vPortValidateInterruptPriority+0x78>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009b2c:	4b0d      	ldr	r3, [pc, #52]	; (8009b64 <vPortValidateInterruptPriority+0x7c>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	429a      	cmp	r2, r3
 8009b32:	d90a      	bls.n	8009b4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b38:	f383 8811 	msr	BASEPRI, r3
 8009b3c:	f3bf 8f6f 	isb	sy
 8009b40:	f3bf 8f4f 	dsb	sy
 8009b44:	603b      	str	r3, [r7, #0]
}
 8009b46:	bf00      	nop
 8009b48:	e7fe      	b.n	8009b48 <vPortValidateInterruptPriority+0x60>
	}
 8009b4a:	bf00      	nop
 8009b4c:	3714      	adds	r7, #20
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b54:	4770      	bx	lr
 8009b56:	bf00      	nop
 8009b58:	e000e3f0 	.word	0xe000e3f0
 8009b5c:	200011d4 	.word	0x200011d4
 8009b60:	e000ed0c 	.word	0xe000ed0c
 8009b64:	200011d8 	.word	0x200011d8

08009b68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b08a      	sub	sp, #40	; 0x28
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009b70:	2300      	movs	r3, #0
 8009b72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009b74:	f7fe fd90 	bl	8008698 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009b78:	4b5b      	ldr	r3, [pc, #364]	; (8009ce8 <pvPortMalloc+0x180>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d101      	bne.n	8009b84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009b80:	f000 f920 	bl	8009dc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009b84:	4b59      	ldr	r3, [pc, #356]	; (8009cec <pvPortMalloc+0x184>)
 8009b86:	681a      	ldr	r2, [r3, #0]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	4013      	ands	r3, r2
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	f040 8093 	bne.w	8009cb8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d01d      	beq.n	8009bd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009b98:	2208      	movs	r2, #8
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	4413      	add	r3, r2
 8009b9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f003 0307 	and.w	r3, r3, #7
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d014      	beq.n	8009bd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f023 0307 	bic.w	r3, r3, #7
 8009bb0:	3308      	adds	r3, #8
 8009bb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f003 0307 	and.w	r3, r3, #7
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d00a      	beq.n	8009bd4 <pvPortMalloc+0x6c>
	__asm volatile
 8009bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc2:	f383 8811 	msr	BASEPRI, r3
 8009bc6:	f3bf 8f6f 	isb	sy
 8009bca:	f3bf 8f4f 	dsb	sy
 8009bce:	617b      	str	r3, [r7, #20]
}
 8009bd0:	bf00      	nop
 8009bd2:	e7fe      	b.n	8009bd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d06e      	beq.n	8009cb8 <pvPortMalloc+0x150>
 8009bda:	4b45      	ldr	r3, [pc, #276]	; (8009cf0 <pvPortMalloc+0x188>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	687a      	ldr	r2, [r7, #4]
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d869      	bhi.n	8009cb8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009be4:	4b43      	ldr	r3, [pc, #268]	; (8009cf4 <pvPortMalloc+0x18c>)
 8009be6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009be8:	4b42      	ldr	r3, [pc, #264]	; (8009cf4 <pvPortMalloc+0x18c>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009bee:	e004      	b.n	8009bfa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	687a      	ldr	r2, [r7, #4]
 8009c00:	429a      	cmp	r2, r3
 8009c02:	d903      	bls.n	8009c0c <pvPortMalloc+0xa4>
 8009c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d1f1      	bne.n	8009bf0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009c0c:	4b36      	ldr	r3, [pc, #216]	; (8009ce8 <pvPortMalloc+0x180>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c12:	429a      	cmp	r2, r3
 8009c14:	d050      	beq.n	8009cb8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009c16:	6a3b      	ldr	r3, [r7, #32]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	2208      	movs	r2, #8
 8009c1c:	4413      	add	r3, r2
 8009c1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c22:	681a      	ldr	r2, [r3, #0]
 8009c24:	6a3b      	ldr	r3, [r7, #32]
 8009c26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2a:	685a      	ldr	r2, [r3, #4]
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	1ad2      	subs	r2, r2, r3
 8009c30:	2308      	movs	r3, #8
 8009c32:	005b      	lsls	r3, r3, #1
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d91f      	bls.n	8009c78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	4413      	add	r3, r2
 8009c3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c40:	69bb      	ldr	r3, [r7, #24]
 8009c42:	f003 0307 	and.w	r3, r3, #7
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d00a      	beq.n	8009c60 <pvPortMalloc+0xf8>
	__asm volatile
 8009c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c4e:	f383 8811 	msr	BASEPRI, r3
 8009c52:	f3bf 8f6f 	isb	sy
 8009c56:	f3bf 8f4f 	dsb	sy
 8009c5a:	613b      	str	r3, [r7, #16]
}
 8009c5c:	bf00      	nop
 8009c5e:	e7fe      	b.n	8009c5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c62:	685a      	ldr	r2, [r3, #4]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	1ad2      	subs	r2, r2, r3
 8009c68:	69bb      	ldr	r3, [r7, #24]
 8009c6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c6e:	687a      	ldr	r2, [r7, #4]
 8009c70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009c72:	69b8      	ldr	r0, [r7, #24]
 8009c74:	f000 f908 	bl	8009e88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009c78:	4b1d      	ldr	r3, [pc, #116]	; (8009cf0 <pvPortMalloc+0x188>)
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	1ad3      	subs	r3, r2, r3
 8009c82:	4a1b      	ldr	r2, [pc, #108]	; (8009cf0 <pvPortMalloc+0x188>)
 8009c84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009c86:	4b1a      	ldr	r3, [pc, #104]	; (8009cf0 <pvPortMalloc+0x188>)
 8009c88:	681a      	ldr	r2, [r3, #0]
 8009c8a:	4b1b      	ldr	r3, [pc, #108]	; (8009cf8 <pvPortMalloc+0x190>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	429a      	cmp	r2, r3
 8009c90:	d203      	bcs.n	8009c9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009c92:	4b17      	ldr	r3, [pc, #92]	; (8009cf0 <pvPortMalloc+0x188>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	4a18      	ldr	r2, [pc, #96]	; (8009cf8 <pvPortMalloc+0x190>)
 8009c98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c9c:	685a      	ldr	r2, [r3, #4]
 8009c9e:	4b13      	ldr	r3, [pc, #76]	; (8009cec <pvPortMalloc+0x184>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	431a      	orrs	r2, r3
 8009ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009caa:	2200      	movs	r2, #0
 8009cac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009cae:	4b13      	ldr	r3, [pc, #76]	; (8009cfc <pvPortMalloc+0x194>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	3301      	adds	r3, #1
 8009cb4:	4a11      	ldr	r2, [pc, #68]	; (8009cfc <pvPortMalloc+0x194>)
 8009cb6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009cb8:	f7fe fcfc 	bl	80086b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009cbc:	69fb      	ldr	r3, [r7, #28]
 8009cbe:	f003 0307 	and.w	r3, r3, #7
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d00a      	beq.n	8009cdc <pvPortMalloc+0x174>
	__asm volatile
 8009cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cca:	f383 8811 	msr	BASEPRI, r3
 8009cce:	f3bf 8f6f 	isb	sy
 8009cd2:	f3bf 8f4f 	dsb	sy
 8009cd6:	60fb      	str	r3, [r7, #12]
}
 8009cd8:	bf00      	nop
 8009cda:	e7fe      	b.n	8009cda <pvPortMalloc+0x172>
	return pvReturn;
 8009cdc:	69fb      	ldr	r3, [r7, #28]
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3728      	adds	r7, #40	; 0x28
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	20004de4 	.word	0x20004de4
 8009cec:	20004df8 	.word	0x20004df8
 8009cf0:	20004de8 	.word	0x20004de8
 8009cf4:	20004ddc 	.word	0x20004ddc
 8009cf8:	20004dec 	.word	0x20004dec
 8009cfc:	20004df0 	.word	0x20004df0

08009d00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b086      	sub	sp, #24
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d04d      	beq.n	8009dae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009d12:	2308      	movs	r3, #8
 8009d14:	425b      	negs	r3, r3
 8009d16:	697a      	ldr	r2, [r7, #20]
 8009d18:	4413      	add	r3, r2
 8009d1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009d20:	693b      	ldr	r3, [r7, #16]
 8009d22:	685a      	ldr	r2, [r3, #4]
 8009d24:	4b24      	ldr	r3, [pc, #144]	; (8009db8 <vPortFree+0xb8>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	4013      	ands	r3, r2
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d10a      	bne.n	8009d44 <vPortFree+0x44>
	__asm volatile
 8009d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d32:	f383 8811 	msr	BASEPRI, r3
 8009d36:	f3bf 8f6f 	isb	sy
 8009d3a:	f3bf 8f4f 	dsb	sy
 8009d3e:	60fb      	str	r3, [r7, #12]
}
 8009d40:	bf00      	nop
 8009d42:	e7fe      	b.n	8009d42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d00a      	beq.n	8009d62 <vPortFree+0x62>
	__asm volatile
 8009d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d50:	f383 8811 	msr	BASEPRI, r3
 8009d54:	f3bf 8f6f 	isb	sy
 8009d58:	f3bf 8f4f 	dsb	sy
 8009d5c:	60bb      	str	r3, [r7, #8]
}
 8009d5e:	bf00      	nop
 8009d60:	e7fe      	b.n	8009d60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	685a      	ldr	r2, [r3, #4]
 8009d66:	4b14      	ldr	r3, [pc, #80]	; (8009db8 <vPortFree+0xb8>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4013      	ands	r3, r2
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d01e      	beq.n	8009dae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d11a      	bne.n	8009dae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	685a      	ldr	r2, [r3, #4]
 8009d7c:	4b0e      	ldr	r3, [pc, #56]	; (8009db8 <vPortFree+0xb8>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	43db      	mvns	r3, r3
 8009d82:	401a      	ands	r2, r3
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009d88:	f7fe fc86 	bl	8008698 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	685a      	ldr	r2, [r3, #4]
 8009d90:	4b0a      	ldr	r3, [pc, #40]	; (8009dbc <vPortFree+0xbc>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	4413      	add	r3, r2
 8009d96:	4a09      	ldr	r2, [pc, #36]	; (8009dbc <vPortFree+0xbc>)
 8009d98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009d9a:	6938      	ldr	r0, [r7, #16]
 8009d9c:	f000 f874 	bl	8009e88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009da0:	4b07      	ldr	r3, [pc, #28]	; (8009dc0 <vPortFree+0xc0>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	3301      	adds	r3, #1
 8009da6:	4a06      	ldr	r2, [pc, #24]	; (8009dc0 <vPortFree+0xc0>)
 8009da8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009daa:	f7fe fc83 	bl	80086b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009dae:	bf00      	nop
 8009db0:	3718      	adds	r7, #24
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}
 8009db6:	bf00      	nop
 8009db8:	20004df8 	.word	0x20004df8
 8009dbc:	20004de8 	.word	0x20004de8
 8009dc0:	20004df4 	.word	0x20004df4

08009dc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b085      	sub	sp, #20
 8009dc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009dca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009dce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009dd0:	4b27      	ldr	r3, [pc, #156]	; (8009e70 <prvHeapInit+0xac>)
 8009dd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	f003 0307 	and.w	r3, r3, #7
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d00c      	beq.n	8009df8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	3307      	adds	r3, #7
 8009de2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f023 0307 	bic.w	r3, r3, #7
 8009dea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009dec:	68ba      	ldr	r2, [r7, #8]
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	1ad3      	subs	r3, r2, r3
 8009df2:	4a1f      	ldr	r2, [pc, #124]	; (8009e70 <prvHeapInit+0xac>)
 8009df4:	4413      	add	r3, r2
 8009df6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009dfc:	4a1d      	ldr	r2, [pc, #116]	; (8009e74 <prvHeapInit+0xb0>)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009e02:	4b1c      	ldr	r3, [pc, #112]	; (8009e74 <prvHeapInit+0xb0>)
 8009e04:	2200      	movs	r2, #0
 8009e06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	68ba      	ldr	r2, [r7, #8]
 8009e0c:	4413      	add	r3, r2
 8009e0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009e10:	2208      	movs	r2, #8
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	1a9b      	subs	r3, r3, r2
 8009e16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f023 0307 	bic.w	r3, r3, #7
 8009e1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	4a15      	ldr	r2, [pc, #84]	; (8009e78 <prvHeapInit+0xb4>)
 8009e24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009e26:	4b14      	ldr	r3, [pc, #80]	; (8009e78 <prvHeapInit+0xb4>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009e2e:	4b12      	ldr	r3, [pc, #72]	; (8009e78 <prvHeapInit+0xb4>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	2200      	movs	r2, #0
 8009e34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	68fa      	ldr	r2, [r7, #12]
 8009e3e:	1ad2      	subs	r2, r2, r3
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009e44:	4b0c      	ldr	r3, [pc, #48]	; (8009e78 <prvHeapInit+0xb4>)
 8009e46:	681a      	ldr	r2, [r3, #0]
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	4a0a      	ldr	r2, [pc, #40]	; (8009e7c <prvHeapInit+0xb8>)
 8009e52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	685b      	ldr	r3, [r3, #4]
 8009e58:	4a09      	ldr	r2, [pc, #36]	; (8009e80 <prvHeapInit+0xbc>)
 8009e5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009e5c:	4b09      	ldr	r3, [pc, #36]	; (8009e84 <prvHeapInit+0xc0>)
 8009e5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009e62:	601a      	str	r2, [r3, #0]
}
 8009e64:	bf00      	nop
 8009e66:	3714      	adds	r7, #20
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6e:	4770      	bx	lr
 8009e70:	200011dc 	.word	0x200011dc
 8009e74:	20004ddc 	.word	0x20004ddc
 8009e78:	20004de4 	.word	0x20004de4
 8009e7c:	20004dec 	.word	0x20004dec
 8009e80:	20004de8 	.word	0x20004de8
 8009e84:	20004df8 	.word	0x20004df8

08009e88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b085      	sub	sp, #20
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009e90:	4b28      	ldr	r3, [pc, #160]	; (8009f34 <prvInsertBlockIntoFreeList+0xac>)
 8009e92:	60fb      	str	r3, [r7, #12]
 8009e94:	e002      	b.n	8009e9c <prvInsertBlockIntoFreeList+0x14>
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	60fb      	str	r3, [r7, #12]
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	687a      	ldr	r2, [r7, #4]
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	d8f7      	bhi.n	8009e96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	685b      	ldr	r3, [r3, #4]
 8009eae:	68ba      	ldr	r2, [r7, #8]
 8009eb0:	4413      	add	r3, r2
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	d108      	bne.n	8009eca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	685a      	ldr	r2, [r3, #4]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	685b      	ldr	r3, [r3, #4]
 8009ec0:	441a      	add	r2, r3
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	685b      	ldr	r3, [r3, #4]
 8009ed2:	68ba      	ldr	r2, [r7, #8]
 8009ed4:	441a      	add	r2, r3
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d118      	bne.n	8009f10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681a      	ldr	r2, [r3, #0]
 8009ee2:	4b15      	ldr	r3, [pc, #84]	; (8009f38 <prvInsertBlockIntoFreeList+0xb0>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	429a      	cmp	r2, r3
 8009ee8:	d00d      	beq.n	8009f06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	685a      	ldr	r2, [r3, #4]
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	685b      	ldr	r3, [r3, #4]
 8009ef4:	441a      	add	r2, r3
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	681a      	ldr	r2, [r3, #0]
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	601a      	str	r2, [r3, #0]
 8009f04:	e008      	b.n	8009f18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009f06:	4b0c      	ldr	r3, [pc, #48]	; (8009f38 <prvInsertBlockIntoFreeList+0xb0>)
 8009f08:	681a      	ldr	r2, [r3, #0]
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	601a      	str	r2, [r3, #0]
 8009f0e:	e003      	b.n	8009f18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681a      	ldr	r2, [r3, #0]
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009f18:	68fa      	ldr	r2, [r7, #12]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	429a      	cmp	r2, r3
 8009f1e:	d002      	beq.n	8009f26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	687a      	ldr	r2, [r7, #4]
 8009f24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f26:	bf00      	nop
 8009f28:	3714      	adds	r7, #20
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f30:	4770      	bx	lr
 8009f32:	bf00      	nop
 8009f34:	20004ddc 	.word	0x20004ddc
 8009f38:	20004de4 	.word	0x20004de4

08009f3c <databaseQueueInit>:
QueueHandle_t sensorDataQueue = NULL;
LoraTransmit loraTx;
LoraTransmit loraRx;

void databaseQueueInit(uint16_t len, uint16_t size)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b082      	sub	sp, #8
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	4603      	mov	r3, r0
 8009f44:	460a      	mov	r2, r1
 8009f46:	80fb      	strh	r3, [r7, #6]
 8009f48:	4613      	mov	r3, r2
 8009f4a:	80bb      	strh	r3, [r7, #4]
	sensorDataQueue = xQueueCreate(len, size);
 8009f4c:	88fb      	ldrh	r3, [r7, #6]
 8009f4e:	88b9      	ldrh	r1, [r7, #4]
 8009f50:	2200      	movs	r2, #0
 8009f52:	4618      	mov	r0, r3
 8009f54:	f7fd fcb4 	bl	80078c0 <xQueueGenericCreate>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	4a03      	ldr	r2, [pc, #12]	; (8009f68 <databaseQueueInit+0x2c>)
 8009f5c:	6013      	str	r3, [r2, #0]
}
 8009f5e:	bf00      	nop
 8009f60:	3708      	adds	r7, #8
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
 8009f66:	bf00      	nop
 8009f68:	20004dfc 	.word	0x20004dfc

08009f6c <GPS_Init>:
//////////////////////////////////////////////////////////////
/*
 * This function start the uart interrupt
 */
void GPS_Init(UART_HandleTypeDef *uart, GPS *gps)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b082      	sub	sp, #8
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	6039      	str	r1, [r7, #0]
	gpsUart = uart;
 8009f76:	4a08      	ldr	r2, [pc, #32]	; (8009f98 <GPS_Init+0x2c>)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6013      	str	r3, [r2, #0]
	_gps = gps;
 8009f7c:	4a07      	ldr	r2, [pc, #28]	; (8009f9c <GPS_Init+0x30>)
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(gpsUart, &rxGps , 1);
 8009f82:	4b05      	ldr	r3, [pc, #20]	; (8009f98 <GPS_Init+0x2c>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	2201      	movs	r2, #1
 8009f88:	4905      	ldr	r1, [pc, #20]	; (8009fa0 <GPS_Init+0x34>)
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f7fc fb9c 	bl	80066c8 <HAL_UART_Receive_IT>
}
 8009f90:	bf00      	nop
 8009f92:	3708      	adds	r7, #8
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}
 8009f98:	20004e1c 	.word	0x20004e1c
 8009f9c:	20004f20 	.word	0x20004f20
 8009fa0:	20004f1c 	.word	0x20004f1c

08009fa4 <GPS_Callback>:
//////////////////////////////////////////////////////////////
/*
 * When rx pin read, store the datas in ringBuff structure
 */
void GPS_Callback(void)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(gpsUart, &rxGps, 1);
 8009fa8:	4b15      	ldr	r3, [pc, #84]	; (800a000 <GPS_Callback+0x5c>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	2201      	movs	r2, #1
 8009fae:	4915      	ldr	r1, [pc, #84]	; (800a004 <GPS_Callback+0x60>)
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f7fc fb89 	bl	80066c8 <HAL_UART_Receive_IT>
	ringBuff.rxGps[HEAD_INCREASE] = rxGps;
 8009fb6:	4b14      	ldr	r3, [pc, #80]	; (800a008 <GPS_Callback+0x64>)
 8009fb8:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8009fbc:	b2db      	uxtb	r3, r3
 8009fbe:	3301      	adds	r3, #1
 8009fc0:	461a      	mov	r2, r3
 8009fc2:	4b12      	ldr	r3, [pc, #72]	; (800a00c <GPS_Callback+0x68>)
 8009fc4:	fba3 1302 	umull	r1, r3, r3, r2
 8009fc8:	091b      	lsrs	r3, r3, #4
 8009fca:	21fa      	movs	r1, #250	; 0xfa
 8009fcc:	fb01 f303 	mul.w	r3, r1, r3
 8009fd0:	1ad3      	subs	r3, r2, r3
 8009fd2:	b2da      	uxtb	r2, r3
 8009fd4:	4b0c      	ldr	r3, [pc, #48]	; (800a008 <GPS_Callback+0x64>)
 8009fd6:	4611      	mov	r1, r2
 8009fd8:	f883 10fb 	strb.w	r1, [r3, #251]	; 0xfb
 8009fdc:	4b09      	ldr	r3, [pc, #36]	; (800a004 <GPS_Callback+0x60>)
 8009fde:	7819      	ldrb	r1, [r3, #0]
 8009fe0:	4b09      	ldr	r3, [pc, #36]	; (800a008 <GPS_Callback+0x64>)
 8009fe2:	5499      	strb	r1, [r3, r2]
	if(rxGps == '\r')	GPS_Parse();
 8009fe4:	4b07      	ldr	r3, [pc, #28]	; (800a004 <GPS_Callback+0x60>)
 8009fe6:	781b      	ldrb	r3, [r3, #0]
 8009fe8:	2b0d      	cmp	r3, #13
 8009fea:	d101      	bne.n	8009ff0 <GPS_Callback+0x4c>
 8009fec:	f000 f812 	bl	800a014 <GPS_Parse>
	gpsIrqTime = HAL_GetTick();
 8009ff0:	f7f8 f8d0 	bl	8002194 <HAL_GetTick>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	4a06      	ldr	r2, [pc, #24]	; (800a010 <GPS_Callback+0x6c>)
 8009ff8:	6013      	str	r3, [r2, #0]
}
 8009ffa:	bf00      	nop
 8009ffc:	bd80      	pop	{r7, pc}
 8009ffe:	bf00      	nop
 800a000:	20004e1c 	.word	0x20004e1c
 800a004:	20004f1c 	.word	0x20004f1c
 800a008:	20004e20 	.word	0x20004e20
 800a00c:	10624dd3 	.word	0x10624dd3
 800a010:	20004f24 	.word	0x20004f24

0800a014 <GPS_Parse>:
/////////////////////////////////////////////////////////////
/*
 * This function parses parameters and store them in GPS structure
 */
GPS_State GPS_Parse()
{
 800a014:	b580      	push	{r7, lr}
 800a016:	af00      	add	r7, sp, #0
	while(TAIL_READ != '$')					//tail değerini $ olana kadar arttırır
 800a018:	e01d      	b.n	800a056 <GPS_Parse+0x42>
	{
		if(ringBuff.tail == ringBuff.head) return NO_CONNECTION;
 800a01a:	4b47      	ldr	r3, [pc, #284]	; (800a138 <GPS_Parse+0x124>)
 800a01c:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a020:	b2da      	uxtb	r2, r3
 800a022:	4b45      	ldr	r3, [pc, #276]	; (800a138 <GPS_Parse+0x124>)
 800a024:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 800a028:	b2db      	uxtb	r3, r3
 800a02a:	429a      	cmp	r2, r3
 800a02c:	d101      	bne.n	800a032 <GPS_Parse+0x1e>
 800a02e:	2300      	movs	r3, #0
 800a030:	e07f      	b.n	800a132 <GPS_Parse+0x11e>
		TAIL_INCREASE;						//tail değerini arttırır
 800a032:	4b41      	ldr	r3, [pc, #260]	; (800a138 <GPS_Parse+0x124>)
 800a034:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a038:	b2db      	uxtb	r3, r3
 800a03a:	3301      	adds	r3, #1
 800a03c:	461a      	mov	r2, r3
 800a03e:	4b3f      	ldr	r3, [pc, #252]	; (800a13c <GPS_Parse+0x128>)
 800a040:	fba3 1302 	umull	r1, r3, r3, r2
 800a044:	091b      	lsrs	r3, r3, #4
 800a046:	21fa      	movs	r1, #250	; 0xfa
 800a048:	fb01 f303 	mul.w	r3, r1, r3
 800a04c:	1ad3      	subs	r3, r2, r3
 800a04e:	b2da      	uxtb	r2, r3
 800a050:	4b39      	ldr	r3, [pc, #228]	; (800a138 <GPS_Parse+0x124>)
 800a052:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
	while(TAIL_READ != '$')					//tail değerini $ olana kadar arttırır
 800a056:	4b38      	ldr	r3, [pc, #224]	; (800a138 <GPS_Parse+0x124>)
 800a058:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a05c:	b2db      	uxtb	r3, r3
 800a05e:	4a37      	ldr	r2, [pc, #220]	; (800a13c <GPS_Parse+0x128>)
 800a060:	fba2 1203 	umull	r1, r2, r2, r3
 800a064:	0912      	lsrs	r2, r2, #4
 800a066:	21fa      	movs	r1, #250	; 0xfa
 800a068:	fb01 f202 	mul.w	r2, r1, r2
 800a06c:	1a9b      	subs	r3, r3, r2
 800a06e:	b2db      	uxtb	r3, r3
 800a070:	461a      	mov	r2, r3
 800a072:	4b31      	ldr	r3, [pc, #196]	; (800a138 <GPS_Parse+0x124>)
 800a074:	5c9b      	ldrb	r3, [r3, r2]
 800a076:	2b24      	cmp	r3, #36	; 0x24
 800a078:	d1cf      	bne.n	800a01a <GPS_Parse+0x6>
	}

	TAIL_INCREASE;							//$ ifadesinden sonraki kısma geçer
 800a07a:	4b2f      	ldr	r3, [pc, #188]	; (800a138 <GPS_Parse+0x124>)
 800a07c:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a080:	b2db      	uxtb	r3, r3
 800a082:	3301      	adds	r3, #1
 800a084:	461a      	mov	r2, r3
 800a086:	4b2d      	ldr	r3, [pc, #180]	; (800a13c <GPS_Parse+0x128>)
 800a088:	fba3 1302 	umull	r1, r3, r3, r2
 800a08c:	091b      	lsrs	r3, r3, #4
 800a08e:	21fa      	movs	r1, #250	; 0xfa
 800a090:	fb01 f303 	mul.w	r3, r1, r3
 800a094:	1ad3      	subs	r3, r2, r3
 800a096:	b2da      	uxtb	r2, r3
 800a098:	4b27      	ldr	r3, [pc, #156]	; (800a138 <GPS_Parse+0x124>)
 800a09a:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa

	if(strncmp((char*)&ringBuff.rxGps[ringBuff.tail], GPGGA_STR, 5) == 0)
 800a09e:	4b26      	ldr	r3, [pc, #152]	; (800a138 <GPS_Parse+0x124>)
 800a0a0:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a0a4:	b2db      	uxtb	r3, r3
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	4b23      	ldr	r3, [pc, #140]	; (800a138 <GPS_Parse+0x124>)
 800a0aa:	4413      	add	r3, r2
 800a0ac:	2205      	movs	r2, #5
 800a0ae:	4924      	ldr	r1, [pc, #144]	; (800a140 <GPS_Parse+0x12c>)
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f003 fab5 	bl	800d620 <strncmp>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d103      	bne.n	800a0c4 <GPS_Parse+0xb0>
	{
		return GPS_GPGGA_Parse();
 800a0bc:	f000 fd5c 	bl	800ab78 <GPS_GPGGA_Parse>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	e036      	b.n	800a132 <GPS_Parse+0x11e>
	}
	else if(strncmp((char*)&ringBuff.rxGps[ringBuff.tail], GPRMC_STR, 5) == 0)
 800a0c4:	4b1c      	ldr	r3, [pc, #112]	; (800a138 <GPS_Parse+0x124>)
 800a0c6:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a0ca:	b2db      	uxtb	r3, r3
 800a0cc:	461a      	mov	r2, r3
 800a0ce:	4b1a      	ldr	r3, [pc, #104]	; (800a138 <GPS_Parse+0x124>)
 800a0d0:	4413      	add	r3, r2
 800a0d2:	2205      	movs	r2, #5
 800a0d4:	491b      	ldr	r1, [pc, #108]	; (800a144 <GPS_Parse+0x130>)
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f003 faa2 	bl	800d620 <strncmp>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d10b      	bne.n	800a0fa <GPS_Parse+0xe6>
	{
		return (_gps->gpsState == POSITION_FIXED)? GPS_GPRMC_Parse() : NO_CONNECTION;
 800a0e2:	4b19      	ldr	r3, [pc, #100]	; (800a148 <GPS_Parse+0x134>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a0ea:	2b02      	cmp	r3, #2
 800a0ec:	d103      	bne.n	800a0f6 <GPS_Parse+0xe2>
 800a0ee:	f000 f82f 	bl	800a150 <GPS_GPRMC_Parse>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	e01d      	b.n	800a132 <GPS_Parse+0x11e>
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	e01b      	b.n	800a132 <GPS_Parse+0x11e>
	}
	else if(strncmp((char*)&ringBuff.rxGps[ringBuff.tail], GPVTG_STR, 5) == 0)
 800a0fa:	4b0f      	ldr	r3, [pc, #60]	; (800a138 <GPS_Parse+0x124>)
 800a0fc:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a100:	b2db      	uxtb	r3, r3
 800a102:	461a      	mov	r2, r3
 800a104:	4b0c      	ldr	r3, [pc, #48]	; (800a138 <GPS_Parse+0x124>)
 800a106:	4413      	add	r3, r2
 800a108:	2205      	movs	r2, #5
 800a10a:	4910      	ldr	r1, [pc, #64]	; (800a14c <GPS_Parse+0x138>)
 800a10c:	4618      	mov	r0, r3
 800a10e:	f003 fa87 	bl	800d620 <strncmp>
 800a112:	4603      	mov	r3, r0
 800a114:	2b00      	cmp	r3, #0
 800a116:	d10b      	bne.n	800a130 <GPS_Parse+0x11c>
	{
		return (_gps->gpsState == POSITION_FIXED)? GPS_GPVTG_Parse() : NO_CONNECTION;
 800a118:	4b0b      	ldr	r3, [pc, #44]	; (800a148 <GPS_Parse+0x134>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a120:	2b02      	cmp	r3, #2
 800a122:	d103      	bne.n	800a12c <GPS_Parse+0x118>
 800a124:	f000 ff28 	bl	800af78 <GPS_GPVTG_Parse>
 800a128:	4603      	mov	r3, r0
 800a12a:	e002      	b.n	800a132 <GPS_Parse+0x11e>
 800a12c:	2300      	movs	r3, #0
 800a12e:	e000      	b.n	800a132 <GPS_Parse+0x11e>
	}
	return NO_CONNECTION;
 800a130:	2300      	movs	r3, #0
}
 800a132:	4618      	mov	r0, r3
 800a134:	bd80      	pop	{r7, pc}
 800a136:	bf00      	nop
 800a138:	20004e20 	.word	0x20004e20
 800a13c:	10624dd3 	.word	0x10624dd3
 800a140:	0800f368 	.word	0x0800f368
 800a144:	0800f370 	.word	0x0800f370
 800a148:	20004f20 	.word	0x20004f20
 800a14c:	0800f378 	.word	0x0800f378

0800a150 <GPS_GPRMC_Parse>:
/*
 * GPRMC verilerini çözer ve gps değerine atar
 * -tarih, saat, enlem, boylam-
 */
GPS_State GPS_GPRMC_Parse()
{
 800a150:	b5b0      	push	{r4, r5, r7, lr}
 800a152:	af00      	add	r7, sp, #0
	if(!GPS_CheckSumControl(&ringBuff.rxGps[ringBuff.tail]))
 800a154:	4b07      	ldr	r3, [pc, #28]	; (800a174 <GPS_GPRMC_Parse+0x24>)
 800a156:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a15a:	b2db      	uxtb	r3, r3
 800a15c:	461a      	mov	r2, r3
 800a15e:	4b05      	ldr	r3, [pc, #20]	; (800a174 <GPS_GPRMC_Parse+0x24>)
 800a160:	4413      	add	r3, r2
 800a162:	4618      	mov	r0, r3
 800a164:	f001 f8d8 	bl	800b318 <GPS_CheckSumControl>
 800a168:	4603      	mov	r3, r0
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d104      	bne.n	800a178 <GPS_GPRMC_Parse+0x28>
	{
		return WRONG_DATA;
 800a16e:	2301      	movs	r3, #1
 800a170:	f000 bcfa 	b.w	800ab68 <GPS_GPRMC_Parse+0xa18>
 800a174:	20004e20 	.word	0x20004e20
	}

	if(ringBuff.rxGps[(ringBuff.tail + 16) % BUFF_SIZE] == 'A' && GPS_CheckSumControl(&ringBuff.rxGps[ringBuff.tail])) // okuma işlemi doğru
 800a178:	4bb8      	ldr	r3, [pc, #736]	; (800a45c <GPS_GPRMC_Parse+0x30c>)
 800a17a:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a17e:	b2db      	uxtb	r3, r3
 800a180:	3310      	adds	r3, #16
 800a182:	461a      	mov	r2, r3
 800a184:	4bb6      	ldr	r3, [pc, #728]	; (800a460 <GPS_GPRMC_Parse+0x310>)
 800a186:	fba3 1302 	umull	r1, r3, r3, r2
 800a18a:	091b      	lsrs	r3, r3, #4
 800a18c:	21fa      	movs	r1, #250	; 0xfa
 800a18e:	fb01 f303 	mul.w	r3, r1, r3
 800a192:	1ad3      	subs	r3, r2, r3
 800a194:	4ab1      	ldr	r2, [pc, #708]	; (800a45c <GPS_GPRMC_Parse+0x30c>)
 800a196:	5cd3      	ldrb	r3, [r2, r3]
 800a198:	2b41      	cmp	r3, #65	; 0x41
 800a19a:	f040 84e4 	bne.w	800ab66 <GPS_GPRMC_Parse+0xa16>
 800a19e:	4baf      	ldr	r3, [pc, #700]	; (800a45c <GPS_GPRMC_Parse+0x30c>)
 800a1a0:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a1a4:	b2db      	uxtb	r3, r3
 800a1a6:	461a      	mov	r2, r3
 800a1a8:	4bac      	ldr	r3, [pc, #688]	; (800a45c <GPS_GPRMC_Parse+0x30c>)
 800a1aa:	4413      	add	r3, r2
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f001 f8b3 	bl	800b318 <GPS_CheckSumControl>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	f000 84d6 	beq.w	800ab66 <GPS_GPRMC_Parse+0xa16>
	{
		TAIL_INCREASE_TO_COMMA;
 800a1ba:	4ba8      	ldr	r3, [pc, #672]	; (800a45c <GPS_GPRMC_Parse+0x30c>)
 800a1bc:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a1c0:	b2db      	uxtb	r3, r3
 800a1c2:	1c5a      	adds	r2, r3, #1
 800a1c4:	b2d1      	uxtb	r1, r2
 800a1c6:	4aa5      	ldr	r2, [pc, #660]	; (800a45c <GPS_GPRMC_Parse+0x30c>)
 800a1c8:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a1cc:	4aa4      	ldr	r2, [pc, #656]	; (800a460 <GPS_GPRMC_Parse+0x310>)
 800a1ce:	fba2 1203 	umull	r1, r2, r2, r3
 800a1d2:	0912      	lsrs	r2, r2, #4
 800a1d4:	21fa      	movs	r1, #250	; 0xfa
 800a1d6:	fb01 f202 	mul.w	r2, r1, r2
 800a1da:	1a9b      	subs	r3, r3, r2
 800a1dc:	b2db      	uxtb	r3, r3
 800a1de:	461a      	mov	r2, r3
 800a1e0:	4b9e      	ldr	r3, [pc, #632]	; (800a45c <GPS_GPRMC_Parse+0x30c>)
 800a1e2:	5c9b      	ldrb	r3, [r3, r2]
 800a1e4:	2b2c      	cmp	r3, #44	; 0x2c
 800a1e6:	d1e8      	bne.n	800a1ba <GPS_GPRMC_Parse+0x6a>
		//↑ ifadesi tail değerini attırır çünkü "GPRMC," ifadesi 6 karakterden oluşuyor
		_gps->hour = (TAIL_READ_P - ASCII_NUMBER) * 10 + (TAIL_READ_P - ASCII_NUMBER) + TURKIYE_UTC;
 800a1e8:	4b9c      	ldr	r3, [pc, #624]	; (800a45c <GPS_GPRMC_Parse+0x30c>)
 800a1ea:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a1ee:	b2db      	uxtb	r3, r3
 800a1f0:	1c5a      	adds	r2, r3, #1
 800a1f2:	b2d1      	uxtb	r1, r2
 800a1f4:	4a99      	ldr	r2, [pc, #612]	; (800a45c <GPS_GPRMC_Parse+0x30c>)
 800a1f6:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a1fa:	4a99      	ldr	r2, [pc, #612]	; (800a460 <GPS_GPRMC_Parse+0x310>)
 800a1fc:	fba2 1203 	umull	r1, r2, r2, r3
 800a200:	0912      	lsrs	r2, r2, #4
 800a202:	21fa      	movs	r1, #250	; 0xfa
 800a204:	fb01 f202 	mul.w	r2, r1, r2
 800a208:	1a9b      	subs	r3, r3, r2
 800a20a:	b2db      	uxtb	r3, r3
 800a20c:	461a      	mov	r2, r3
 800a20e:	4b93      	ldr	r3, [pc, #588]	; (800a45c <GPS_GPRMC_Parse+0x30c>)
 800a210:	5c9b      	ldrb	r3, [r3, r2]
 800a212:	461a      	mov	r2, r3
 800a214:	0092      	lsls	r2, r2, #2
 800a216:	4413      	add	r3, r2
 800a218:	005b      	lsls	r3, r3, #1
 800a21a:	b2da      	uxtb	r2, r3
 800a21c:	4b8f      	ldr	r3, [pc, #572]	; (800a45c <GPS_GPRMC_Parse+0x30c>)
 800a21e:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a222:	b2db      	uxtb	r3, r3
 800a224:	1c59      	adds	r1, r3, #1
 800a226:	b2c8      	uxtb	r0, r1
 800a228:	498c      	ldr	r1, [pc, #560]	; (800a45c <GPS_GPRMC_Parse+0x30c>)
 800a22a:	f881 00fa 	strb.w	r0, [r1, #250]	; 0xfa
 800a22e:	498c      	ldr	r1, [pc, #560]	; (800a460 <GPS_GPRMC_Parse+0x310>)
 800a230:	fba1 0103 	umull	r0, r1, r1, r3
 800a234:	0909      	lsrs	r1, r1, #4
 800a236:	20fa      	movs	r0, #250	; 0xfa
 800a238:	fb00 f101 	mul.w	r1, r0, r1
 800a23c:	1a5b      	subs	r3, r3, r1
 800a23e:	b2db      	uxtb	r3, r3
 800a240:	4619      	mov	r1, r3
 800a242:	4b86      	ldr	r3, [pc, #536]	; (800a45c <GPS_GPRMC_Parse+0x30c>)
 800a244:	5c5b      	ldrb	r3, [r3, r1]
 800a246:	4413      	add	r3, r2
 800a248:	b2da      	uxtb	r2, r3
 800a24a:	4b86      	ldr	r3, [pc, #536]	; (800a464 <GPS_GPRMC_Parse+0x314>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	3a0d      	subs	r2, #13
 800a250:	b2d2      	uxtb	r2, r2
 800a252:	701a      	strb	r2, [r3, #0]
		_gps->minute = (TAIL_READ_P - ASCII_NUMBER) * 10 + (TAIL_READ_P - ASCII_NUMBER);
 800a254:	4b81      	ldr	r3, [pc, #516]	; (800a45c <GPS_GPRMC_Parse+0x30c>)
 800a256:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a25a:	b2db      	uxtb	r3, r3
 800a25c:	1c5a      	adds	r2, r3, #1
 800a25e:	b2d1      	uxtb	r1, r2
 800a260:	4a7e      	ldr	r2, [pc, #504]	; (800a45c <GPS_GPRMC_Parse+0x30c>)
 800a262:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a266:	4a7e      	ldr	r2, [pc, #504]	; (800a460 <GPS_GPRMC_Parse+0x310>)
 800a268:	fba2 1203 	umull	r1, r2, r2, r3
 800a26c:	0912      	lsrs	r2, r2, #4
 800a26e:	21fa      	movs	r1, #250	; 0xfa
 800a270:	fb01 f202 	mul.w	r2, r1, r2
 800a274:	1a9b      	subs	r3, r3, r2
 800a276:	b2db      	uxtb	r3, r3
 800a278:	461a      	mov	r2, r3
 800a27a:	4b78      	ldr	r3, [pc, #480]	; (800a45c <GPS_GPRMC_Parse+0x30c>)
 800a27c:	5c9b      	ldrb	r3, [r3, r2]
 800a27e:	461a      	mov	r2, r3
 800a280:	0092      	lsls	r2, r2, #2
 800a282:	4413      	add	r3, r2
 800a284:	005b      	lsls	r3, r3, #1
 800a286:	b2da      	uxtb	r2, r3
 800a288:	4b74      	ldr	r3, [pc, #464]	; (800a45c <GPS_GPRMC_Parse+0x30c>)
 800a28a:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a28e:	b2db      	uxtb	r3, r3
 800a290:	1c59      	adds	r1, r3, #1
 800a292:	b2c8      	uxtb	r0, r1
 800a294:	4971      	ldr	r1, [pc, #452]	; (800a45c <GPS_GPRMC_Parse+0x30c>)
 800a296:	f881 00fa 	strb.w	r0, [r1, #250]	; 0xfa
 800a29a:	4971      	ldr	r1, [pc, #452]	; (800a460 <GPS_GPRMC_Parse+0x310>)
 800a29c:	fba1 0103 	umull	r0, r1, r1, r3
 800a2a0:	0909      	lsrs	r1, r1, #4
 800a2a2:	20fa      	movs	r0, #250	; 0xfa
 800a2a4:	fb00 f101 	mul.w	r1, r0, r1
 800a2a8:	1a5b      	subs	r3, r3, r1
 800a2aa:	b2db      	uxtb	r3, r3
 800a2ac:	4619      	mov	r1, r3
 800a2ae:	4b6b      	ldr	r3, [pc, #428]	; (800a45c <GPS_GPRMC_Parse+0x30c>)
 800a2b0:	5c5b      	ldrb	r3, [r3, r1]
 800a2b2:	4413      	add	r3, r2
 800a2b4:	b2da      	uxtb	r2, r3
 800a2b6:	4b6b      	ldr	r3, [pc, #428]	; (800a464 <GPS_GPRMC_Parse+0x314>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	3a10      	subs	r2, #16
 800a2bc:	b2d2      	uxtb	r2, r2
 800a2be:	705a      	strb	r2, [r3, #1]
		_gps->second = (TAIL_READ_P - ASCII_NUMBER) * 10 + (TAIL_READ_P - ASCII_NUMBER);
 800a2c0:	4b66      	ldr	r3, [pc, #408]	; (800a45c <GPS_GPRMC_Parse+0x30c>)
 800a2c2:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a2c6:	b2db      	uxtb	r3, r3
 800a2c8:	1c5a      	adds	r2, r3, #1
 800a2ca:	b2d1      	uxtb	r1, r2
 800a2cc:	4a63      	ldr	r2, [pc, #396]	; (800a45c <GPS_GPRMC_Parse+0x30c>)
 800a2ce:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a2d2:	4a63      	ldr	r2, [pc, #396]	; (800a460 <GPS_GPRMC_Parse+0x310>)
 800a2d4:	fba2 1203 	umull	r1, r2, r2, r3
 800a2d8:	0912      	lsrs	r2, r2, #4
 800a2da:	21fa      	movs	r1, #250	; 0xfa
 800a2dc:	fb01 f202 	mul.w	r2, r1, r2
 800a2e0:	1a9b      	subs	r3, r3, r2
 800a2e2:	b2db      	uxtb	r3, r3
 800a2e4:	461a      	mov	r2, r3
 800a2e6:	4b5d      	ldr	r3, [pc, #372]	; (800a45c <GPS_GPRMC_Parse+0x30c>)
 800a2e8:	5c9b      	ldrb	r3, [r3, r2]
 800a2ea:	461a      	mov	r2, r3
 800a2ec:	0092      	lsls	r2, r2, #2
 800a2ee:	4413      	add	r3, r2
 800a2f0:	005b      	lsls	r3, r3, #1
 800a2f2:	b2da      	uxtb	r2, r3
 800a2f4:	4b59      	ldr	r3, [pc, #356]	; (800a45c <GPS_GPRMC_Parse+0x30c>)
 800a2f6:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a2fa:	b2db      	uxtb	r3, r3
 800a2fc:	1c59      	adds	r1, r3, #1
 800a2fe:	b2c8      	uxtb	r0, r1
 800a300:	4956      	ldr	r1, [pc, #344]	; (800a45c <GPS_GPRMC_Parse+0x30c>)
 800a302:	f881 00fa 	strb.w	r0, [r1, #250]	; 0xfa
 800a306:	4956      	ldr	r1, [pc, #344]	; (800a460 <GPS_GPRMC_Parse+0x310>)
 800a308:	fba1 0103 	umull	r0, r1, r1, r3
 800a30c:	0909      	lsrs	r1, r1, #4
 800a30e:	20fa      	movs	r0, #250	; 0xfa
 800a310:	fb00 f101 	mul.w	r1, r0, r1
 800a314:	1a5b      	subs	r3, r3, r1
 800a316:	b2db      	uxtb	r3, r3
 800a318:	4619      	mov	r1, r3
 800a31a:	4b50      	ldr	r3, [pc, #320]	; (800a45c <GPS_GPRMC_Parse+0x30c>)
 800a31c:	5c5b      	ldrb	r3, [r3, r1]
 800a31e:	4413      	add	r3, r2
 800a320:	b2da      	uxtb	r2, r3
 800a322:	4b50      	ldr	r3, [pc, #320]	; (800a464 <GPS_GPRMC_Parse+0x314>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	3a10      	subs	r2, #16
 800a328:	b2d2      	uxtb	r2, r2
 800a32a:	709a      	strb	r2, [r3, #2]

		TAIL_INCREASE_TO_COMMA;
 800a32c:	4b4b      	ldr	r3, [pc, #300]	; (800a45c <GPS_GPRMC_Parse+0x30c>)
 800a32e:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a332:	b2db      	uxtb	r3, r3
 800a334:	1c5a      	adds	r2, r3, #1
 800a336:	b2d1      	uxtb	r1, r2
 800a338:	4a48      	ldr	r2, [pc, #288]	; (800a45c <GPS_GPRMC_Parse+0x30c>)
 800a33a:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a33e:	4a48      	ldr	r2, [pc, #288]	; (800a460 <GPS_GPRMC_Parse+0x310>)
 800a340:	fba2 1203 	umull	r1, r2, r2, r3
 800a344:	0912      	lsrs	r2, r2, #4
 800a346:	21fa      	movs	r1, #250	; 0xfa
 800a348:	fb01 f202 	mul.w	r2, r1, r2
 800a34c:	1a9b      	subs	r3, r3, r2
 800a34e:	b2db      	uxtb	r3, r3
 800a350:	461a      	mov	r2, r3
 800a352:	4b42      	ldr	r3, [pc, #264]	; (800a45c <GPS_GPRMC_Parse+0x30c>)
 800a354:	5c9b      	ldrb	r3, [r3, r2]
 800a356:	2b2c      	cmp	r3, #44	; 0x2c
 800a358:	d1e8      	bne.n	800a32c <GPS_GPRMC_Parse+0x1dc>
		TAIL_INCREASE_TO_COMMA;
 800a35a:	4b40      	ldr	r3, [pc, #256]	; (800a45c <GPS_GPRMC_Parse+0x30c>)
 800a35c:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a360:	b2db      	uxtb	r3, r3
 800a362:	1c5a      	adds	r2, r3, #1
 800a364:	b2d1      	uxtb	r1, r2
 800a366:	4a3d      	ldr	r2, [pc, #244]	; (800a45c <GPS_GPRMC_Parse+0x30c>)
 800a368:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a36c:	4a3c      	ldr	r2, [pc, #240]	; (800a460 <GPS_GPRMC_Parse+0x310>)
 800a36e:	fba2 1203 	umull	r1, r2, r2, r3
 800a372:	0912      	lsrs	r2, r2, #4
 800a374:	21fa      	movs	r1, #250	; 0xfa
 800a376:	fb01 f202 	mul.w	r2, r1, r2
 800a37a:	1a9b      	subs	r3, r3, r2
 800a37c:	b2db      	uxtb	r3, r3
 800a37e:	461a      	mov	r2, r3
 800a380:	4b36      	ldr	r3, [pc, #216]	; (800a45c <GPS_GPRMC_Parse+0x30c>)
 800a382:	5c9b      	ldrb	r3, [r3, r2]
 800a384:	2b2c      	cmp	r3, #44	; 0x2c
 800a386:	d1e8      	bne.n	800a35a <GPS_GPRMC_Parse+0x20a>

		//genlik değerinin alır
		_gps->latitudeDegree = (TAIL_READ_P - ASCII_NUMBER) * 10 + (TAIL_READ_P - ASCII_NUMBER);
 800a388:	4b34      	ldr	r3, [pc, #208]	; (800a45c <GPS_GPRMC_Parse+0x30c>)
 800a38a:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a38e:	b2db      	uxtb	r3, r3
 800a390:	1c5a      	adds	r2, r3, #1
 800a392:	b2d1      	uxtb	r1, r2
 800a394:	4a31      	ldr	r2, [pc, #196]	; (800a45c <GPS_GPRMC_Parse+0x30c>)
 800a396:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a39a:	4a31      	ldr	r2, [pc, #196]	; (800a460 <GPS_GPRMC_Parse+0x310>)
 800a39c:	fba2 1203 	umull	r1, r2, r2, r3
 800a3a0:	0912      	lsrs	r2, r2, #4
 800a3a2:	21fa      	movs	r1, #250	; 0xfa
 800a3a4:	fb01 f202 	mul.w	r2, r1, r2
 800a3a8:	1a9b      	subs	r3, r3, r2
 800a3aa:	b2db      	uxtb	r3, r3
 800a3ac:	461a      	mov	r2, r3
 800a3ae:	4b2b      	ldr	r3, [pc, #172]	; (800a45c <GPS_GPRMC_Parse+0x30c>)
 800a3b0:	5c9b      	ldrb	r3, [r3, r2]
 800a3b2:	461a      	mov	r2, r3
 800a3b4:	0092      	lsls	r2, r2, #2
 800a3b6:	4413      	add	r3, r2
 800a3b8:	005b      	lsls	r3, r3, #1
 800a3ba:	b2da      	uxtb	r2, r3
 800a3bc:	4b27      	ldr	r3, [pc, #156]	; (800a45c <GPS_GPRMC_Parse+0x30c>)
 800a3be:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a3c2:	b2db      	uxtb	r3, r3
 800a3c4:	1c59      	adds	r1, r3, #1
 800a3c6:	b2c8      	uxtb	r0, r1
 800a3c8:	4924      	ldr	r1, [pc, #144]	; (800a45c <GPS_GPRMC_Parse+0x30c>)
 800a3ca:	f881 00fa 	strb.w	r0, [r1, #250]	; 0xfa
 800a3ce:	4924      	ldr	r1, [pc, #144]	; (800a460 <GPS_GPRMC_Parse+0x310>)
 800a3d0:	fba1 0103 	umull	r0, r1, r1, r3
 800a3d4:	0909      	lsrs	r1, r1, #4
 800a3d6:	20fa      	movs	r0, #250	; 0xfa
 800a3d8:	fb00 f101 	mul.w	r1, r0, r1
 800a3dc:	1a5b      	subs	r3, r3, r1
 800a3de:	b2db      	uxtb	r3, r3
 800a3e0:	4619      	mov	r1, r3
 800a3e2:	4b1e      	ldr	r3, [pc, #120]	; (800a45c <GPS_GPRMC_Parse+0x30c>)
 800a3e4:	5c5b      	ldrb	r3, [r3, r1]
 800a3e6:	4413      	add	r3, r2
 800a3e8:	b2da      	uxtb	r2, r3
 800a3ea:	4b1e      	ldr	r3, [pc, #120]	; (800a464 <GPS_GPRMC_Parse+0x314>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	3a10      	subs	r2, #16
 800a3f0:	b2d2      	uxtb	r2, r2
 800a3f2:	70da      	strb	r2, [r3, #3]
		_gps->latitudeMinute = (TAIL_READ_P - ASCII_NUMBER) * 10.0 + (TAIL_READ_P - ASCII_NUMBER);
 800a3f4:	4b19      	ldr	r3, [pc, #100]	; (800a45c <GPS_GPRMC_Parse+0x30c>)
 800a3f6:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a3fa:	b2db      	uxtb	r3, r3
 800a3fc:	1c5a      	adds	r2, r3, #1
 800a3fe:	b2d1      	uxtb	r1, r2
 800a400:	4a16      	ldr	r2, [pc, #88]	; (800a45c <GPS_GPRMC_Parse+0x30c>)
 800a402:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a406:	4a16      	ldr	r2, [pc, #88]	; (800a460 <GPS_GPRMC_Parse+0x310>)
 800a408:	fba2 1203 	umull	r1, r2, r2, r3
 800a40c:	0912      	lsrs	r2, r2, #4
 800a40e:	21fa      	movs	r1, #250	; 0xfa
 800a410:	fb01 f202 	mul.w	r2, r1, r2
 800a414:	1a9b      	subs	r3, r3, r2
 800a416:	b2db      	uxtb	r3, r3
 800a418:	461a      	mov	r2, r3
 800a41a:	4b10      	ldr	r3, [pc, #64]	; (800a45c <GPS_GPRMC_Parse+0x30c>)
 800a41c:	5c9b      	ldrb	r3, [r3, r2]
 800a41e:	3b30      	subs	r3, #48	; 0x30
 800a420:	4618      	mov	r0, r3
 800a422:	f7f6 f897 	bl	8000554 <__aeabi_i2d>
 800a426:	f04f 0200 	mov.w	r2, #0
 800a42a:	4b0f      	ldr	r3, [pc, #60]	; (800a468 <GPS_GPRMC_Parse+0x318>)
 800a42c:	f7f6 f8fc 	bl	8000628 <__aeabi_dmul>
 800a430:	4602      	mov	r2, r0
 800a432:	460b      	mov	r3, r1
 800a434:	4614      	mov	r4, r2
 800a436:	461d      	mov	r5, r3
 800a438:	4b08      	ldr	r3, [pc, #32]	; (800a45c <GPS_GPRMC_Parse+0x30c>)
 800a43a:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a43e:	b2db      	uxtb	r3, r3
 800a440:	1c5a      	adds	r2, r3, #1
 800a442:	b2d1      	uxtb	r1, r2
 800a444:	4a05      	ldr	r2, [pc, #20]	; (800a45c <GPS_GPRMC_Parse+0x30c>)
 800a446:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a44a:	4a05      	ldr	r2, [pc, #20]	; (800a460 <GPS_GPRMC_Parse+0x310>)
 800a44c:	fba2 1203 	umull	r1, r2, r2, r3
 800a450:	0912      	lsrs	r2, r2, #4
 800a452:	21fa      	movs	r1, #250	; 0xfa
 800a454:	fb01 f202 	mul.w	r2, r1, r2
 800a458:	1a9b      	subs	r3, r3, r2
 800a45a:	e007      	b.n	800a46c <GPS_GPRMC_Parse+0x31c>
 800a45c:	20004e20 	.word	0x20004e20
 800a460:	10624dd3 	.word	0x10624dd3
 800a464:	20004f20 	.word	0x20004f20
 800a468:	40240000 	.word	0x40240000
 800a46c:	b2db      	uxtb	r3, r3
 800a46e:	461a      	mov	r2, r3
 800a470:	4b70      	ldr	r3, [pc, #448]	; (800a634 <GPS_GPRMC_Parse+0x4e4>)
 800a472:	5c9b      	ldrb	r3, [r3, r2]
 800a474:	3b30      	subs	r3, #48	; 0x30
 800a476:	4618      	mov	r0, r3
 800a478:	f7f6 f86c 	bl	8000554 <__aeabi_i2d>
 800a47c:	4602      	mov	r2, r0
 800a47e:	460b      	mov	r3, r1
 800a480:	4620      	mov	r0, r4
 800a482:	4629      	mov	r1, r5
 800a484:	f7f5 ff1a 	bl	80002bc <__adddf3>
 800a488:	4602      	mov	r2, r0
 800a48a:	460b      	mov	r3, r1
 800a48c:	496a      	ldr	r1, [pc, #424]	; (800a638 <GPS_GPRMC_Parse+0x4e8>)
 800a48e:	680c      	ldr	r4, [r1, #0]
 800a490:	4610      	mov	r0, r2
 800a492:	4619      	mov	r1, r3
 800a494:	f7f6 fb78 	bl	8000b88 <__aeabi_d2uiz>
 800a498:	4603      	mov	r3, r0
 800a49a:	b2db      	uxtb	r3, r3
 800a49c:	7123      	strb	r3, [r4, #4]
		TAIL_INCREASE;		// "." geçtik
 800a49e:	4b65      	ldr	r3, [pc, #404]	; (800a634 <GPS_GPRMC_Parse+0x4e4>)
 800a4a0:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a4a4:	b2db      	uxtb	r3, r3
 800a4a6:	3301      	adds	r3, #1
 800a4a8:	461a      	mov	r2, r3
 800a4aa:	4b64      	ldr	r3, [pc, #400]	; (800a63c <GPS_GPRMC_Parse+0x4ec>)
 800a4ac:	fba3 1302 	umull	r1, r3, r3, r2
 800a4b0:	091b      	lsrs	r3, r3, #4
 800a4b2:	21fa      	movs	r1, #250	; 0xfa
 800a4b4:	fb01 f303 	mul.w	r3, r1, r3
 800a4b8:	1ad3      	subs	r3, r2, r3
 800a4ba:	b2da      	uxtb	r2, r3
 800a4bc:	4b5d      	ldr	r3, [pc, #372]	; (800a634 <GPS_GPRMC_Parse+0x4e4>)
 800a4be:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
		_gps->latitudeSecond = ((TAIL_READ_P - ASCII_NUMBER) *100.0 + (TAIL_READ_P - ASCII_NUMBER)*10.0 + (TAIL_READ_P - ASCII_NUMBER)*1.0) / 1000 * 60;
 800a4c2:	4b5c      	ldr	r3, [pc, #368]	; (800a634 <GPS_GPRMC_Parse+0x4e4>)
 800a4c4:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a4c8:	b2db      	uxtb	r3, r3
 800a4ca:	1c5a      	adds	r2, r3, #1
 800a4cc:	b2d1      	uxtb	r1, r2
 800a4ce:	4a59      	ldr	r2, [pc, #356]	; (800a634 <GPS_GPRMC_Parse+0x4e4>)
 800a4d0:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a4d4:	4a59      	ldr	r2, [pc, #356]	; (800a63c <GPS_GPRMC_Parse+0x4ec>)
 800a4d6:	fba2 1203 	umull	r1, r2, r2, r3
 800a4da:	0912      	lsrs	r2, r2, #4
 800a4dc:	21fa      	movs	r1, #250	; 0xfa
 800a4de:	fb01 f202 	mul.w	r2, r1, r2
 800a4e2:	1a9b      	subs	r3, r3, r2
 800a4e4:	b2db      	uxtb	r3, r3
 800a4e6:	461a      	mov	r2, r3
 800a4e8:	4b52      	ldr	r3, [pc, #328]	; (800a634 <GPS_GPRMC_Parse+0x4e4>)
 800a4ea:	5c9b      	ldrb	r3, [r3, r2]
 800a4ec:	3b30      	subs	r3, #48	; 0x30
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f7f6 f830 	bl	8000554 <__aeabi_i2d>
 800a4f4:	f04f 0200 	mov.w	r2, #0
 800a4f8:	4b51      	ldr	r3, [pc, #324]	; (800a640 <GPS_GPRMC_Parse+0x4f0>)
 800a4fa:	f7f6 f895 	bl	8000628 <__aeabi_dmul>
 800a4fe:	4602      	mov	r2, r0
 800a500:	460b      	mov	r3, r1
 800a502:	4614      	mov	r4, r2
 800a504:	461d      	mov	r5, r3
 800a506:	4b4b      	ldr	r3, [pc, #300]	; (800a634 <GPS_GPRMC_Parse+0x4e4>)
 800a508:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a50c:	b2db      	uxtb	r3, r3
 800a50e:	1c5a      	adds	r2, r3, #1
 800a510:	b2d1      	uxtb	r1, r2
 800a512:	4a48      	ldr	r2, [pc, #288]	; (800a634 <GPS_GPRMC_Parse+0x4e4>)
 800a514:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a518:	4a48      	ldr	r2, [pc, #288]	; (800a63c <GPS_GPRMC_Parse+0x4ec>)
 800a51a:	fba2 1203 	umull	r1, r2, r2, r3
 800a51e:	0912      	lsrs	r2, r2, #4
 800a520:	21fa      	movs	r1, #250	; 0xfa
 800a522:	fb01 f202 	mul.w	r2, r1, r2
 800a526:	1a9b      	subs	r3, r3, r2
 800a528:	b2db      	uxtb	r3, r3
 800a52a:	461a      	mov	r2, r3
 800a52c:	4b41      	ldr	r3, [pc, #260]	; (800a634 <GPS_GPRMC_Parse+0x4e4>)
 800a52e:	5c9b      	ldrb	r3, [r3, r2]
 800a530:	3b30      	subs	r3, #48	; 0x30
 800a532:	4618      	mov	r0, r3
 800a534:	f7f6 f80e 	bl	8000554 <__aeabi_i2d>
 800a538:	f04f 0200 	mov.w	r2, #0
 800a53c:	4b41      	ldr	r3, [pc, #260]	; (800a644 <GPS_GPRMC_Parse+0x4f4>)
 800a53e:	f7f6 f873 	bl	8000628 <__aeabi_dmul>
 800a542:	4602      	mov	r2, r0
 800a544:	460b      	mov	r3, r1
 800a546:	4620      	mov	r0, r4
 800a548:	4629      	mov	r1, r5
 800a54a:	f7f5 feb7 	bl	80002bc <__adddf3>
 800a54e:	4602      	mov	r2, r0
 800a550:	460b      	mov	r3, r1
 800a552:	4614      	mov	r4, r2
 800a554:	461d      	mov	r5, r3
 800a556:	4b37      	ldr	r3, [pc, #220]	; (800a634 <GPS_GPRMC_Parse+0x4e4>)
 800a558:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a55c:	b2db      	uxtb	r3, r3
 800a55e:	1c5a      	adds	r2, r3, #1
 800a560:	b2d1      	uxtb	r1, r2
 800a562:	4a34      	ldr	r2, [pc, #208]	; (800a634 <GPS_GPRMC_Parse+0x4e4>)
 800a564:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a568:	4a34      	ldr	r2, [pc, #208]	; (800a63c <GPS_GPRMC_Parse+0x4ec>)
 800a56a:	fba2 1203 	umull	r1, r2, r2, r3
 800a56e:	0912      	lsrs	r2, r2, #4
 800a570:	21fa      	movs	r1, #250	; 0xfa
 800a572:	fb01 f202 	mul.w	r2, r1, r2
 800a576:	1a9b      	subs	r3, r3, r2
 800a578:	b2db      	uxtb	r3, r3
 800a57a:	461a      	mov	r2, r3
 800a57c:	4b2d      	ldr	r3, [pc, #180]	; (800a634 <GPS_GPRMC_Parse+0x4e4>)
 800a57e:	5c9b      	ldrb	r3, [r3, r2]
 800a580:	3b30      	subs	r3, #48	; 0x30
 800a582:	4618      	mov	r0, r3
 800a584:	f7f5 ffe6 	bl	8000554 <__aeabi_i2d>
 800a588:	4602      	mov	r2, r0
 800a58a:	460b      	mov	r3, r1
 800a58c:	4620      	mov	r0, r4
 800a58e:	4629      	mov	r1, r5
 800a590:	f7f5 fe94 	bl	80002bc <__adddf3>
 800a594:	4602      	mov	r2, r0
 800a596:	460b      	mov	r3, r1
 800a598:	4610      	mov	r0, r2
 800a59a:	4619      	mov	r1, r3
 800a59c:	f04f 0200 	mov.w	r2, #0
 800a5a0:	4b29      	ldr	r3, [pc, #164]	; (800a648 <GPS_GPRMC_Parse+0x4f8>)
 800a5a2:	f7f6 f96b 	bl	800087c <__aeabi_ddiv>
 800a5a6:	4602      	mov	r2, r0
 800a5a8:	460b      	mov	r3, r1
 800a5aa:	4610      	mov	r0, r2
 800a5ac:	4619      	mov	r1, r3
 800a5ae:	f04f 0200 	mov.w	r2, #0
 800a5b2:	4b26      	ldr	r3, [pc, #152]	; (800a64c <GPS_GPRMC_Parse+0x4fc>)
 800a5b4:	f7f6 f838 	bl	8000628 <__aeabi_dmul>
 800a5b8:	4602      	mov	r2, r0
 800a5ba:	460b      	mov	r3, r1
 800a5bc:	491e      	ldr	r1, [pc, #120]	; (800a638 <GPS_GPRMC_Parse+0x4e8>)
 800a5be:	680c      	ldr	r4, [r1, #0]
 800a5c0:	4610      	mov	r0, r2
 800a5c2:	4619      	mov	r1, r3
 800a5c4:	f7f6 fb00 	bl	8000bc8 <__aeabi_d2f>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	60a3      	str	r3, [r4, #8]

		TAIL_INCREASE_TO_COMMA;
 800a5cc:	4b19      	ldr	r3, [pc, #100]	; (800a634 <GPS_GPRMC_Parse+0x4e4>)
 800a5ce:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a5d2:	b2db      	uxtb	r3, r3
 800a5d4:	1c5a      	adds	r2, r3, #1
 800a5d6:	b2d1      	uxtb	r1, r2
 800a5d8:	4a16      	ldr	r2, [pc, #88]	; (800a634 <GPS_GPRMC_Parse+0x4e4>)
 800a5da:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a5de:	4a17      	ldr	r2, [pc, #92]	; (800a63c <GPS_GPRMC_Parse+0x4ec>)
 800a5e0:	fba2 1203 	umull	r1, r2, r2, r3
 800a5e4:	0912      	lsrs	r2, r2, #4
 800a5e6:	21fa      	movs	r1, #250	; 0xfa
 800a5e8:	fb01 f202 	mul.w	r2, r1, r2
 800a5ec:	1a9b      	subs	r3, r3, r2
 800a5ee:	b2db      	uxtb	r3, r3
 800a5f0:	461a      	mov	r2, r3
 800a5f2:	4b10      	ldr	r3, [pc, #64]	; (800a634 <GPS_GPRMC_Parse+0x4e4>)
 800a5f4:	5c9b      	ldrb	r3, [r3, r2]
 800a5f6:	2b2c      	cmp	r3, #44	; 0x2c
 800a5f8:	d1e8      	bne.n	800a5cc <GPS_GPRMC_Parse+0x47c>

		// Pole bilgisini alır
		if(TAIL_READ_P == 'N')	_gps->locationLat = NORTH;
 800a5fa:	4b0e      	ldr	r3, [pc, #56]	; (800a634 <GPS_GPRMC_Parse+0x4e4>)
 800a5fc:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a600:	b2db      	uxtb	r3, r3
 800a602:	1c5a      	adds	r2, r3, #1
 800a604:	b2d1      	uxtb	r1, r2
 800a606:	4a0b      	ldr	r2, [pc, #44]	; (800a634 <GPS_GPRMC_Parse+0x4e4>)
 800a608:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a60c:	4a0b      	ldr	r2, [pc, #44]	; (800a63c <GPS_GPRMC_Parse+0x4ec>)
 800a60e:	fba2 1203 	umull	r1, r2, r2, r3
 800a612:	0912      	lsrs	r2, r2, #4
 800a614:	21fa      	movs	r1, #250	; 0xfa
 800a616:	fb01 f202 	mul.w	r2, r1, r2
 800a61a:	1a9b      	subs	r3, r3, r2
 800a61c:	b2db      	uxtb	r3, r3
 800a61e:	461a      	mov	r2, r3
 800a620:	4b04      	ldr	r3, [pc, #16]	; (800a634 <GPS_GPRMC_Parse+0x4e4>)
 800a622:	5c9b      	ldrb	r3, [r3, r2]
 800a624:	2b4e      	cmp	r3, #78	; 0x4e
 800a626:	d113      	bne.n	800a650 <GPS_GPRMC_Parse+0x500>
 800a628:	4b03      	ldr	r3, [pc, #12]	; (800a638 <GPS_GPRMC_Parse+0x4e8>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	2200      	movs	r2, #0
 800a62e:	731a      	strb	r2, [r3, #12]
 800a630:	e012      	b.n	800a658 <GPS_GPRMC_Parse+0x508>
 800a632:	bf00      	nop
 800a634:	20004e20 	.word	0x20004e20
 800a638:	20004f20 	.word	0x20004f20
 800a63c:	10624dd3 	.word	0x10624dd3
 800a640:	40590000 	.word	0x40590000
 800a644:	40240000 	.word	0x40240000
 800a648:	408f4000 	.word	0x408f4000
 800a64c:	404e0000 	.word	0x404e0000
		else 					_gps->locationLat = SOUTH;
 800a650:	4bc1      	ldr	r3, [pc, #772]	; (800a958 <GPS_GPRMC_Parse+0x808>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	2201      	movs	r2, #1
 800a656:	731a      	strb	r2, [r3, #12]

		TAIL_INCREASE_TO_COMMA;		// "," geçtik
 800a658:	4bc0      	ldr	r3, [pc, #768]	; (800a95c <GPS_GPRMC_Parse+0x80c>)
 800a65a:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a65e:	b2db      	uxtb	r3, r3
 800a660:	1c5a      	adds	r2, r3, #1
 800a662:	b2d1      	uxtb	r1, r2
 800a664:	4abd      	ldr	r2, [pc, #756]	; (800a95c <GPS_GPRMC_Parse+0x80c>)
 800a666:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a66a:	4abd      	ldr	r2, [pc, #756]	; (800a960 <GPS_GPRMC_Parse+0x810>)
 800a66c:	fba2 1203 	umull	r1, r2, r2, r3
 800a670:	0912      	lsrs	r2, r2, #4
 800a672:	21fa      	movs	r1, #250	; 0xfa
 800a674:	fb01 f202 	mul.w	r2, r1, r2
 800a678:	1a9b      	subs	r3, r3, r2
 800a67a:	b2db      	uxtb	r3, r3
 800a67c:	461a      	mov	r2, r3
 800a67e:	4bb7      	ldr	r3, [pc, #732]	; (800a95c <GPS_GPRMC_Parse+0x80c>)
 800a680:	5c9b      	ldrb	r3, [r3, r2]
 800a682:	2b2c      	cmp	r3, #44	; 0x2c
 800a684:	d1e8      	bne.n	800a658 <GPS_GPRMC_Parse+0x508>

		// Boylam bilgisini alır
		_gps->longitudeDegree = (TAIL_READ_P - ASCII_NUMBER) * 100 + (TAIL_READ_P - ASCII_NUMBER) * 10 + (TAIL_READ_P - ASCII_NUMBER);
 800a686:	4bb5      	ldr	r3, [pc, #724]	; (800a95c <GPS_GPRMC_Parse+0x80c>)
 800a688:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a68c:	b2db      	uxtb	r3, r3
 800a68e:	1c5a      	adds	r2, r3, #1
 800a690:	b2d1      	uxtb	r1, r2
 800a692:	4ab2      	ldr	r2, [pc, #712]	; (800a95c <GPS_GPRMC_Parse+0x80c>)
 800a694:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a698:	4ab1      	ldr	r2, [pc, #708]	; (800a960 <GPS_GPRMC_Parse+0x810>)
 800a69a:	fba2 1203 	umull	r1, r2, r2, r3
 800a69e:	0912      	lsrs	r2, r2, #4
 800a6a0:	21fa      	movs	r1, #250	; 0xfa
 800a6a2:	fb01 f202 	mul.w	r2, r1, r2
 800a6a6:	1a9b      	subs	r3, r3, r2
 800a6a8:	b2db      	uxtb	r3, r3
 800a6aa:	461a      	mov	r2, r3
 800a6ac:	4bab      	ldr	r3, [pc, #684]	; (800a95c <GPS_GPRMC_Parse+0x80c>)
 800a6ae:	5c9b      	ldrb	r3, [r3, r2]
 800a6b0:	461a      	mov	r2, r3
 800a6b2:	0092      	lsls	r2, r2, #2
 800a6b4:	4413      	add	r3, r2
 800a6b6:	461a      	mov	r2, r3
 800a6b8:	0091      	lsls	r1, r2, #2
 800a6ba:	461a      	mov	r2, r3
 800a6bc:	460b      	mov	r3, r1
 800a6be:	4413      	add	r3, r2
 800a6c0:	009b      	lsls	r3, r3, #2
 800a6c2:	b2da      	uxtb	r2, r3
 800a6c4:	4ba5      	ldr	r3, [pc, #660]	; (800a95c <GPS_GPRMC_Parse+0x80c>)
 800a6c6:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a6ca:	b2db      	uxtb	r3, r3
 800a6cc:	1c59      	adds	r1, r3, #1
 800a6ce:	b2c8      	uxtb	r0, r1
 800a6d0:	49a2      	ldr	r1, [pc, #648]	; (800a95c <GPS_GPRMC_Parse+0x80c>)
 800a6d2:	f881 00fa 	strb.w	r0, [r1, #250]	; 0xfa
 800a6d6:	49a2      	ldr	r1, [pc, #648]	; (800a960 <GPS_GPRMC_Parse+0x810>)
 800a6d8:	fba1 0103 	umull	r0, r1, r1, r3
 800a6dc:	0909      	lsrs	r1, r1, #4
 800a6de:	20fa      	movs	r0, #250	; 0xfa
 800a6e0:	fb00 f101 	mul.w	r1, r0, r1
 800a6e4:	1a5b      	subs	r3, r3, r1
 800a6e6:	b2db      	uxtb	r3, r3
 800a6e8:	4619      	mov	r1, r3
 800a6ea:	4b9c      	ldr	r3, [pc, #624]	; (800a95c <GPS_GPRMC_Parse+0x80c>)
 800a6ec:	5c5b      	ldrb	r3, [r3, r1]
 800a6ee:	4619      	mov	r1, r3
 800a6f0:	0089      	lsls	r1, r1, #2
 800a6f2:	440b      	add	r3, r1
 800a6f4:	005b      	lsls	r3, r3, #1
 800a6f6:	b2db      	uxtb	r3, r3
 800a6f8:	4413      	add	r3, r2
 800a6fa:	b2da      	uxtb	r2, r3
 800a6fc:	4b97      	ldr	r3, [pc, #604]	; (800a95c <GPS_GPRMC_Parse+0x80c>)
 800a6fe:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a702:	b2db      	uxtb	r3, r3
 800a704:	1c59      	adds	r1, r3, #1
 800a706:	b2c8      	uxtb	r0, r1
 800a708:	4994      	ldr	r1, [pc, #592]	; (800a95c <GPS_GPRMC_Parse+0x80c>)
 800a70a:	f881 00fa 	strb.w	r0, [r1, #250]	; 0xfa
 800a70e:	4994      	ldr	r1, [pc, #592]	; (800a960 <GPS_GPRMC_Parse+0x810>)
 800a710:	fba1 0103 	umull	r0, r1, r1, r3
 800a714:	0909      	lsrs	r1, r1, #4
 800a716:	20fa      	movs	r0, #250	; 0xfa
 800a718:	fb00 f101 	mul.w	r1, r0, r1
 800a71c:	1a5b      	subs	r3, r3, r1
 800a71e:	b2db      	uxtb	r3, r3
 800a720:	4619      	mov	r1, r3
 800a722:	4b8e      	ldr	r3, [pc, #568]	; (800a95c <GPS_GPRMC_Parse+0x80c>)
 800a724:	5c5b      	ldrb	r3, [r3, r1]
 800a726:	4413      	add	r3, r2
 800a728:	b2da      	uxtb	r2, r3
 800a72a:	4b8b      	ldr	r3, [pc, #556]	; (800a958 <GPS_GPRMC_Parse+0x808>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	3230      	adds	r2, #48	; 0x30
 800a730:	b2d2      	uxtb	r2, r2
 800a732:	735a      	strb	r2, [r3, #13]
		_gps->longitudeMinute = (TAIL_READ_P - ASCII_NUMBER) * 10.0 + (TAIL_READ_P - ASCII_NUMBER);
 800a734:	4b89      	ldr	r3, [pc, #548]	; (800a95c <GPS_GPRMC_Parse+0x80c>)
 800a736:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a73a:	b2db      	uxtb	r3, r3
 800a73c:	1c5a      	adds	r2, r3, #1
 800a73e:	b2d1      	uxtb	r1, r2
 800a740:	4a86      	ldr	r2, [pc, #536]	; (800a95c <GPS_GPRMC_Parse+0x80c>)
 800a742:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a746:	4a86      	ldr	r2, [pc, #536]	; (800a960 <GPS_GPRMC_Parse+0x810>)
 800a748:	fba2 1203 	umull	r1, r2, r2, r3
 800a74c:	0912      	lsrs	r2, r2, #4
 800a74e:	21fa      	movs	r1, #250	; 0xfa
 800a750:	fb01 f202 	mul.w	r2, r1, r2
 800a754:	1a9b      	subs	r3, r3, r2
 800a756:	b2db      	uxtb	r3, r3
 800a758:	461a      	mov	r2, r3
 800a75a:	4b80      	ldr	r3, [pc, #512]	; (800a95c <GPS_GPRMC_Parse+0x80c>)
 800a75c:	5c9b      	ldrb	r3, [r3, r2]
 800a75e:	3b30      	subs	r3, #48	; 0x30
 800a760:	4618      	mov	r0, r3
 800a762:	f7f5 fef7 	bl	8000554 <__aeabi_i2d>
 800a766:	f04f 0200 	mov.w	r2, #0
 800a76a:	4b7e      	ldr	r3, [pc, #504]	; (800a964 <GPS_GPRMC_Parse+0x814>)
 800a76c:	f7f5 ff5c 	bl	8000628 <__aeabi_dmul>
 800a770:	4602      	mov	r2, r0
 800a772:	460b      	mov	r3, r1
 800a774:	4614      	mov	r4, r2
 800a776:	461d      	mov	r5, r3
 800a778:	4b78      	ldr	r3, [pc, #480]	; (800a95c <GPS_GPRMC_Parse+0x80c>)
 800a77a:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a77e:	b2db      	uxtb	r3, r3
 800a780:	1c5a      	adds	r2, r3, #1
 800a782:	b2d1      	uxtb	r1, r2
 800a784:	4a75      	ldr	r2, [pc, #468]	; (800a95c <GPS_GPRMC_Parse+0x80c>)
 800a786:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a78a:	4a75      	ldr	r2, [pc, #468]	; (800a960 <GPS_GPRMC_Parse+0x810>)
 800a78c:	fba2 1203 	umull	r1, r2, r2, r3
 800a790:	0912      	lsrs	r2, r2, #4
 800a792:	21fa      	movs	r1, #250	; 0xfa
 800a794:	fb01 f202 	mul.w	r2, r1, r2
 800a798:	1a9b      	subs	r3, r3, r2
 800a79a:	b2db      	uxtb	r3, r3
 800a79c:	461a      	mov	r2, r3
 800a79e:	4b6f      	ldr	r3, [pc, #444]	; (800a95c <GPS_GPRMC_Parse+0x80c>)
 800a7a0:	5c9b      	ldrb	r3, [r3, r2]
 800a7a2:	3b30      	subs	r3, #48	; 0x30
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f7f5 fed5 	bl	8000554 <__aeabi_i2d>
 800a7aa:	4602      	mov	r2, r0
 800a7ac:	460b      	mov	r3, r1
 800a7ae:	4620      	mov	r0, r4
 800a7b0:	4629      	mov	r1, r5
 800a7b2:	f7f5 fd83 	bl	80002bc <__adddf3>
 800a7b6:	4602      	mov	r2, r0
 800a7b8:	460b      	mov	r3, r1
 800a7ba:	4967      	ldr	r1, [pc, #412]	; (800a958 <GPS_GPRMC_Parse+0x808>)
 800a7bc:	680c      	ldr	r4, [r1, #0]
 800a7be:	4610      	mov	r0, r2
 800a7c0:	4619      	mov	r1, r3
 800a7c2:	f7f6 f9e1 	bl	8000b88 <__aeabi_d2uiz>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	b2db      	uxtb	r3, r3
 800a7ca:	73a3      	strb	r3, [r4, #14]
		TAIL_INCREASE;		// "." geçtik
 800a7cc:	4b63      	ldr	r3, [pc, #396]	; (800a95c <GPS_GPRMC_Parse+0x80c>)
 800a7ce:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a7d2:	b2db      	uxtb	r3, r3
 800a7d4:	3301      	adds	r3, #1
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	4b61      	ldr	r3, [pc, #388]	; (800a960 <GPS_GPRMC_Parse+0x810>)
 800a7da:	fba3 1302 	umull	r1, r3, r3, r2
 800a7de:	091b      	lsrs	r3, r3, #4
 800a7e0:	21fa      	movs	r1, #250	; 0xfa
 800a7e2:	fb01 f303 	mul.w	r3, r1, r3
 800a7e6:	1ad3      	subs	r3, r2, r3
 800a7e8:	b2da      	uxtb	r2, r3
 800a7ea:	4b5c      	ldr	r3, [pc, #368]	; (800a95c <GPS_GPRMC_Parse+0x80c>)
 800a7ec:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
		_gps->longitudeSecond = ((TAIL_READ_P - ASCII_NUMBER) * 100.0 + (TAIL_READ_P - ASCII_NUMBER) * 10.0 + (TAIL_READ_P - ASCII_NUMBER) * 1.0) / 1000 * 60;
 800a7f0:	4b5a      	ldr	r3, [pc, #360]	; (800a95c <GPS_GPRMC_Parse+0x80c>)
 800a7f2:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a7f6:	b2db      	uxtb	r3, r3
 800a7f8:	1c5a      	adds	r2, r3, #1
 800a7fa:	b2d1      	uxtb	r1, r2
 800a7fc:	4a57      	ldr	r2, [pc, #348]	; (800a95c <GPS_GPRMC_Parse+0x80c>)
 800a7fe:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a802:	4a57      	ldr	r2, [pc, #348]	; (800a960 <GPS_GPRMC_Parse+0x810>)
 800a804:	fba2 1203 	umull	r1, r2, r2, r3
 800a808:	0912      	lsrs	r2, r2, #4
 800a80a:	21fa      	movs	r1, #250	; 0xfa
 800a80c:	fb01 f202 	mul.w	r2, r1, r2
 800a810:	1a9b      	subs	r3, r3, r2
 800a812:	b2db      	uxtb	r3, r3
 800a814:	461a      	mov	r2, r3
 800a816:	4b51      	ldr	r3, [pc, #324]	; (800a95c <GPS_GPRMC_Parse+0x80c>)
 800a818:	5c9b      	ldrb	r3, [r3, r2]
 800a81a:	3b30      	subs	r3, #48	; 0x30
 800a81c:	4618      	mov	r0, r3
 800a81e:	f7f5 fe99 	bl	8000554 <__aeabi_i2d>
 800a822:	f04f 0200 	mov.w	r2, #0
 800a826:	4b50      	ldr	r3, [pc, #320]	; (800a968 <GPS_GPRMC_Parse+0x818>)
 800a828:	f7f5 fefe 	bl	8000628 <__aeabi_dmul>
 800a82c:	4602      	mov	r2, r0
 800a82e:	460b      	mov	r3, r1
 800a830:	4614      	mov	r4, r2
 800a832:	461d      	mov	r5, r3
 800a834:	4b49      	ldr	r3, [pc, #292]	; (800a95c <GPS_GPRMC_Parse+0x80c>)
 800a836:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a83a:	b2db      	uxtb	r3, r3
 800a83c:	1c5a      	adds	r2, r3, #1
 800a83e:	b2d1      	uxtb	r1, r2
 800a840:	4a46      	ldr	r2, [pc, #280]	; (800a95c <GPS_GPRMC_Parse+0x80c>)
 800a842:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a846:	4a46      	ldr	r2, [pc, #280]	; (800a960 <GPS_GPRMC_Parse+0x810>)
 800a848:	fba2 1203 	umull	r1, r2, r2, r3
 800a84c:	0912      	lsrs	r2, r2, #4
 800a84e:	21fa      	movs	r1, #250	; 0xfa
 800a850:	fb01 f202 	mul.w	r2, r1, r2
 800a854:	1a9b      	subs	r3, r3, r2
 800a856:	b2db      	uxtb	r3, r3
 800a858:	461a      	mov	r2, r3
 800a85a:	4b40      	ldr	r3, [pc, #256]	; (800a95c <GPS_GPRMC_Parse+0x80c>)
 800a85c:	5c9b      	ldrb	r3, [r3, r2]
 800a85e:	3b30      	subs	r3, #48	; 0x30
 800a860:	4618      	mov	r0, r3
 800a862:	f7f5 fe77 	bl	8000554 <__aeabi_i2d>
 800a866:	f04f 0200 	mov.w	r2, #0
 800a86a:	4b3e      	ldr	r3, [pc, #248]	; (800a964 <GPS_GPRMC_Parse+0x814>)
 800a86c:	f7f5 fedc 	bl	8000628 <__aeabi_dmul>
 800a870:	4602      	mov	r2, r0
 800a872:	460b      	mov	r3, r1
 800a874:	4620      	mov	r0, r4
 800a876:	4629      	mov	r1, r5
 800a878:	f7f5 fd20 	bl	80002bc <__adddf3>
 800a87c:	4602      	mov	r2, r0
 800a87e:	460b      	mov	r3, r1
 800a880:	4614      	mov	r4, r2
 800a882:	461d      	mov	r5, r3
 800a884:	4b35      	ldr	r3, [pc, #212]	; (800a95c <GPS_GPRMC_Parse+0x80c>)
 800a886:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a88a:	b2db      	uxtb	r3, r3
 800a88c:	1c5a      	adds	r2, r3, #1
 800a88e:	b2d1      	uxtb	r1, r2
 800a890:	4a32      	ldr	r2, [pc, #200]	; (800a95c <GPS_GPRMC_Parse+0x80c>)
 800a892:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a896:	4a32      	ldr	r2, [pc, #200]	; (800a960 <GPS_GPRMC_Parse+0x810>)
 800a898:	fba2 1203 	umull	r1, r2, r2, r3
 800a89c:	0912      	lsrs	r2, r2, #4
 800a89e:	21fa      	movs	r1, #250	; 0xfa
 800a8a0:	fb01 f202 	mul.w	r2, r1, r2
 800a8a4:	1a9b      	subs	r3, r3, r2
 800a8a6:	b2db      	uxtb	r3, r3
 800a8a8:	461a      	mov	r2, r3
 800a8aa:	4b2c      	ldr	r3, [pc, #176]	; (800a95c <GPS_GPRMC_Parse+0x80c>)
 800a8ac:	5c9b      	ldrb	r3, [r3, r2]
 800a8ae:	3b30      	subs	r3, #48	; 0x30
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f7f5 fe4f 	bl	8000554 <__aeabi_i2d>
 800a8b6:	4602      	mov	r2, r0
 800a8b8:	460b      	mov	r3, r1
 800a8ba:	4620      	mov	r0, r4
 800a8bc:	4629      	mov	r1, r5
 800a8be:	f7f5 fcfd 	bl	80002bc <__adddf3>
 800a8c2:	4602      	mov	r2, r0
 800a8c4:	460b      	mov	r3, r1
 800a8c6:	4610      	mov	r0, r2
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	f04f 0200 	mov.w	r2, #0
 800a8ce:	4b27      	ldr	r3, [pc, #156]	; (800a96c <GPS_GPRMC_Parse+0x81c>)
 800a8d0:	f7f5 ffd4 	bl	800087c <__aeabi_ddiv>
 800a8d4:	4602      	mov	r2, r0
 800a8d6:	460b      	mov	r3, r1
 800a8d8:	4610      	mov	r0, r2
 800a8da:	4619      	mov	r1, r3
 800a8dc:	f04f 0200 	mov.w	r2, #0
 800a8e0:	4b23      	ldr	r3, [pc, #140]	; (800a970 <GPS_GPRMC_Parse+0x820>)
 800a8e2:	f7f5 fea1 	bl	8000628 <__aeabi_dmul>
 800a8e6:	4602      	mov	r2, r0
 800a8e8:	460b      	mov	r3, r1
 800a8ea:	491b      	ldr	r1, [pc, #108]	; (800a958 <GPS_GPRMC_Parse+0x808>)
 800a8ec:	680c      	ldr	r4, [r1, #0]
 800a8ee:	4610      	mov	r0, r2
 800a8f0:	4619      	mov	r1, r3
 800a8f2:	f7f6 f969 	bl	8000bc8 <__aeabi_d2f>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	6123      	str	r3, [r4, #16]

		// yer yer bilgisi alır
		TAIL_INCREASE_TO_COMMA;
 800a8fa:	4b18      	ldr	r3, [pc, #96]	; (800a95c <GPS_GPRMC_Parse+0x80c>)
 800a8fc:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a900:	b2db      	uxtb	r3, r3
 800a902:	1c5a      	adds	r2, r3, #1
 800a904:	b2d1      	uxtb	r1, r2
 800a906:	4a15      	ldr	r2, [pc, #84]	; (800a95c <GPS_GPRMC_Parse+0x80c>)
 800a908:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a90c:	4a14      	ldr	r2, [pc, #80]	; (800a960 <GPS_GPRMC_Parse+0x810>)
 800a90e:	fba2 1203 	umull	r1, r2, r2, r3
 800a912:	0912      	lsrs	r2, r2, #4
 800a914:	21fa      	movs	r1, #250	; 0xfa
 800a916:	fb01 f202 	mul.w	r2, r1, r2
 800a91a:	1a9b      	subs	r3, r3, r2
 800a91c:	b2db      	uxtb	r3, r3
 800a91e:	461a      	mov	r2, r3
 800a920:	4b0e      	ldr	r3, [pc, #56]	; (800a95c <GPS_GPRMC_Parse+0x80c>)
 800a922:	5c9b      	ldrb	r3, [r3, r2]
 800a924:	2b2c      	cmp	r3, #44	; 0x2c
 800a926:	d1e8      	bne.n	800a8fa <GPS_GPRMC_Parse+0x7aa>
			if(TAIL_READ_P == 'E')	_gps->locationLong = EAST;
 800a928:	4b0c      	ldr	r3, [pc, #48]	; (800a95c <GPS_GPRMC_Parse+0x80c>)
 800a92a:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a92e:	b2db      	uxtb	r3, r3
 800a930:	1c5a      	adds	r2, r3, #1
 800a932:	b2d1      	uxtb	r1, r2
 800a934:	4a09      	ldr	r2, [pc, #36]	; (800a95c <GPS_GPRMC_Parse+0x80c>)
 800a936:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a93a:	4a09      	ldr	r2, [pc, #36]	; (800a960 <GPS_GPRMC_Parse+0x810>)
 800a93c:	fba2 1203 	umull	r1, r2, r2, r3
 800a940:	0912      	lsrs	r2, r2, #4
 800a942:	21fa      	movs	r1, #250	; 0xfa
 800a944:	fb01 f202 	mul.w	r2, r1, r2
 800a948:	1a9b      	subs	r3, r3, r2
 800a94a:	b2db      	uxtb	r3, r3
 800a94c:	461a      	mov	r2, r3
 800a94e:	4b03      	ldr	r3, [pc, #12]	; (800a95c <GPS_GPRMC_Parse+0x80c>)
 800a950:	5c9b      	ldrb	r3, [r3, r2]
 800a952:	2b45      	cmp	r3, #69	; 0x45
 800a954:	d113      	bne.n	800a97e <GPS_GPRMC_Parse+0x82e>
 800a956:	e00d      	b.n	800a974 <GPS_GPRMC_Parse+0x824>
 800a958:	20004f20 	.word	0x20004f20
 800a95c:	20004e20 	.word	0x20004e20
 800a960:	10624dd3 	.word	0x10624dd3
 800a964:	40240000 	.word	0x40240000
 800a968:	40590000 	.word	0x40590000
 800a96c:	408f4000 	.word	0x408f4000
 800a970:	404e0000 	.word	0x404e0000
 800a974:	4b7d      	ldr	r3, [pc, #500]	; (800ab6c <GPS_GPRMC_Parse+0xa1c>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	2202      	movs	r2, #2
 800a97a:	751a      	strb	r2, [r3, #20]
 800a97c:	e003      	b.n	800a986 <GPS_GPRMC_Parse+0x836>
			else 					_gps->locationLong = WEST;
 800a97e:	4b7b      	ldr	r3, [pc, #492]	; (800ab6c <GPS_GPRMC_Parse+0xa1c>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	2203      	movs	r2, #3
 800a984:	751a      	strb	r2, [r3, #20]

		TAIL_INCREASE_TO_COMMA;
 800a986:	4b7a      	ldr	r3, [pc, #488]	; (800ab70 <GPS_GPRMC_Parse+0xa20>)
 800a988:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a98c:	b2db      	uxtb	r3, r3
 800a98e:	1c5a      	adds	r2, r3, #1
 800a990:	b2d1      	uxtb	r1, r2
 800a992:	4a77      	ldr	r2, [pc, #476]	; (800ab70 <GPS_GPRMC_Parse+0xa20>)
 800a994:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a998:	4a76      	ldr	r2, [pc, #472]	; (800ab74 <GPS_GPRMC_Parse+0xa24>)
 800a99a:	fba2 1203 	umull	r1, r2, r2, r3
 800a99e:	0912      	lsrs	r2, r2, #4
 800a9a0:	21fa      	movs	r1, #250	; 0xfa
 800a9a2:	fb01 f202 	mul.w	r2, r1, r2
 800a9a6:	1a9b      	subs	r3, r3, r2
 800a9a8:	b2db      	uxtb	r3, r3
 800a9aa:	461a      	mov	r2, r3
 800a9ac:	4b70      	ldr	r3, [pc, #448]	; (800ab70 <GPS_GPRMC_Parse+0xa20>)
 800a9ae:	5c9b      	ldrb	r3, [r3, r2]
 800a9b0:	2b2c      	cmp	r3, #44	; 0x2c
 800a9b2:	d1e8      	bne.n	800a986 <GPS_GPRMC_Parse+0x836>
		TAIL_INCREASE_TO_COMMA;
 800a9b4:	4b6e      	ldr	r3, [pc, #440]	; (800ab70 <GPS_GPRMC_Parse+0xa20>)
 800a9b6:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a9ba:	b2db      	uxtb	r3, r3
 800a9bc:	1c5a      	adds	r2, r3, #1
 800a9be:	b2d1      	uxtb	r1, r2
 800a9c0:	4a6b      	ldr	r2, [pc, #428]	; (800ab70 <GPS_GPRMC_Parse+0xa20>)
 800a9c2:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a9c6:	4a6b      	ldr	r2, [pc, #428]	; (800ab74 <GPS_GPRMC_Parse+0xa24>)
 800a9c8:	fba2 1203 	umull	r1, r2, r2, r3
 800a9cc:	0912      	lsrs	r2, r2, #4
 800a9ce:	21fa      	movs	r1, #250	; 0xfa
 800a9d0:	fb01 f202 	mul.w	r2, r1, r2
 800a9d4:	1a9b      	subs	r3, r3, r2
 800a9d6:	b2db      	uxtb	r3, r3
 800a9d8:	461a      	mov	r2, r3
 800a9da:	4b65      	ldr	r3, [pc, #404]	; (800ab70 <GPS_GPRMC_Parse+0xa20>)
 800a9dc:	5c9b      	ldrb	r3, [r3, r2]
 800a9de:	2b2c      	cmp	r3, #44	; 0x2c
 800a9e0:	d1e8      	bne.n	800a9b4 <GPS_GPRMC_Parse+0x864>
		TAIL_INCREASE_TO_COMMA;
 800a9e2:	4b63      	ldr	r3, [pc, #396]	; (800ab70 <GPS_GPRMC_Parse+0xa20>)
 800a9e4:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a9e8:	b2db      	uxtb	r3, r3
 800a9ea:	1c5a      	adds	r2, r3, #1
 800a9ec:	b2d1      	uxtb	r1, r2
 800a9ee:	4a60      	ldr	r2, [pc, #384]	; (800ab70 <GPS_GPRMC_Parse+0xa20>)
 800a9f0:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800a9f4:	4a5f      	ldr	r2, [pc, #380]	; (800ab74 <GPS_GPRMC_Parse+0xa24>)
 800a9f6:	fba2 1203 	umull	r1, r2, r2, r3
 800a9fa:	0912      	lsrs	r2, r2, #4
 800a9fc:	21fa      	movs	r1, #250	; 0xfa
 800a9fe:	fb01 f202 	mul.w	r2, r1, r2
 800aa02:	1a9b      	subs	r3, r3, r2
 800aa04:	b2db      	uxtb	r3, r3
 800aa06:	461a      	mov	r2, r3
 800aa08:	4b59      	ldr	r3, [pc, #356]	; (800ab70 <GPS_GPRMC_Parse+0xa20>)
 800aa0a:	5c9b      	ldrb	r3, [r3, r2]
 800aa0c:	2b2c      	cmp	r3, #44	; 0x2c
 800aa0e:	d1e8      	bne.n	800a9e2 <GPS_GPRMC_Parse+0x892>

		// Tarih bilgisini alır
		_gps->day = (TAIL_READ_P - ASCII_NUMBER) * 10 + (TAIL_READ_P - ASCII_NUMBER);
 800aa10:	4b57      	ldr	r3, [pc, #348]	; (800ab70 <GPS_GPRMC_Parse+0xa20>)
 800aa12:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800aa16:	b2db      	uxtb	r3, r3
 800aa18:	1c5a      	adds	r2, r3, #1
 800aa1a:	b2d1      	uxtb	r1, r2
 800aa1c:	4a54      	ldr	r2, [pc, #336]	; (800ab70 <GPS_GPRMC_Parse+0xa20>)
 800aa1e:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800aa22:	4a54      	ldr	r2, [pc, #336]	; (800ab74 <GPS_GPRMC_Parse+0xa24>)
 800aa24:	fba2 1203 	umull	r1, r2, r2, r3
 800aa28:	0912      	lsrs	r2, r2, #4
 800aa2a:	21fa      	movs	r1, #250	; 0xfa
 800aa2c:	fb01 f202 	mul.w	r2, r1, r2
 800aa30:	1a9b      	subs	r3, r3, r2
 800aa32:	b2db      	uxtb	r3, r3
 800aa34:	461a      	mov	r2, r3
 800aa36:	4b4e      	ldr	r3, [pc, #312]	; (800ab70 <GPS_GPRMC_Parse+0xa20>)
 800aa38:	5c9b      	ldrb	r3, [r3, r2]
 800aa3a:	461a      	mov	r2, r3
 800aa3c:	0092      	lsls	r2, r2, #2
 800aa3e:	4413      	add	r3, r2
 800aa40:	005b      	lsls	r3, r3, #1
 800aa42:	b2da      	uxtb	r2, r3
 800aa44:	4b4a      	ldr	r3, [pc, #296]	; (800ab70 <GPS_GPRMC_Parse+0xa20>)
 800aa46:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800aa4a:	b2db      	uxtb	r3, r3
 800aa4c:	1c59      	adds	r1, r3, #1
 800aa4e:	b2c8      	uxtb	r0, r1
 800aa50:	4947      	ldr	r1, [pc, #284]	; (800ab70 <GPS_GPRMC_Parse+0xa20>)
 800aa52:	f881 00fa 	strb.w	r0, [r1, #250]	; 0xfa
 800aa56:	4947      	ldr	r1, [pc, #284]	; (800ab74 <GPS_GPRMC_Parse+0xa24>)
 800aa58:	fba1 0103 	umull	r0, r1, r1, r3
 800aa5c:	0909      	lsrs	r1, r1, #4
 800aa5e:	20fa      	movs	r0, #250	; 0xfa
 800aa60:	fb00 f101 	mul.w	r1, r0, r1
 800aa64:	1a5b      	subs	r3, r3, r1
 800aa66:	b2db      	uxtb	r3, r3
 800aa68:	4619      	mov	r1, r3
 800aa6a:	4b41      	ldr	r3, [pc, #260]	; (800ab70 <GPS_GPRMC_Parse+0xa20>)
 800aa6c:	5c5b      	ldrb	r3, [r3, r1]
 800aa6e:	4413      	add	r3, r2
 800aa70:	b2da      	uxtb	r2, r3
 800aa72:	4b3e      	ldr	r3, [pc, #248]	; (800ab6c <GPS_GPRMC_Parse+0xa1c>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	3a10      	subs	r2, #16
 800aa78:	b2d2      	uxtb	r2, r2
 800aa7a:	755a      	strb	r2, [r3, #21]
		_gps->month = (TAIL_READ_P - ASCII_NUMBER) * 10 + (TAIL_READ_P - ASCII_NUMBER);
 800aa7c:	4b3c      	ldr	r3, [pc, #240]	; (800ab70 <GPS_GPRMC_Parse+0xa20>)
 800aa7e:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800aa82:	b2db      	uxtb	r3, r3
 800aa84:	1c5a      	adds	r2, r3, #1
 800aa86:	b2d1      	uxtb	r1, r2
 800aa88:	4a39      	ldr	r2, [pc, #228]	; (800ab70 <GPS_GPRMC_Parse+0xa20>)
 800aa8a:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800aa8e:	4a39      	ldr	r2, [pc, #228]	; (800ab74 <GPS_GPRMC_Parse+0xa24>)
 800aa90:	fba2 1203 	umull	r1, r2, r2, r3
 800aa94:	0912      	lsrs	r2, r2, #4
 800aa96:	21fa      	movs	r1, #250	; 0xfa
 800aa98:	fb01 f202 	mul.w	r2, r1, r2
 800aa9c:	1a9b      	subs	r3, r3, r2
 800aa9e:	b2db      	uxtb	r3, r3
 800aaa0:	461a      	mov	r2, r3
 800aaa2:	4b33      	ldr	r3, [pc, #204]	; (800ab70 <GPS_GPRMC_Parse+0xa20>)
 800aaa4:	5c9b      	ldrb	r3, [r3, r2]
 800aaa6:	461a      	mov	r2, r3
 800aaa8:	0092      	lsls	r2, r2, #2
 800aaaa:	4413      	add	r3, r2
 800aaac:	005b      	lsls	r3, r3, #1
 800aaae:	b2da      	uxtb	r2, r3
 800aab0:	4b2f      	ldr	r3, [pc, #188]	; (800ab70 <GPS_GPRMC_Parse+0xa20>)
 800aab2:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800aab6:	b2db      	uxtb	r3, r3
 800aab8:	1c59      	adds	r1, r3, #1
 800aaba:	b2c8      	uxtb	r0, r1
 800aabc:	492c      	ldr	r1, [pc, #176]	; (800ab70 <GPS_GPRMC_Parse+0xa20>)
 800aabe:	f881 00fa 	strb.w	r0, [r1, #250]	; 0xfa
 800aac2:	492c      	ldr	r1, [pc, #176]	; (800ab74 <GPS_GPRMC_Parse+0xa24>)
 800aac4:	fba1 0103 	umull	r0, r1, r1, r3
 800aac8:	0909      	lsrs	r1, r1, #4
 800aaca:	20fa      	movs	r0, #250	; 0xfa
 800aacc:	fb00 f101 	mul.w	r1, r0, r1
 800aad0:	1a5b      	subs	r3, r3, r1
 800aad2:	b2db      	uxtb	r3, r3
 800aad4:	4619      	mov	r1, r3
 800aad6:	4b26      	ldr	r3, [pc, #152]	; (800ab70 <GPS_GPRMC_Parse+0xa20>)
 800aad8:	5c5b      	ldrb	r3, [r3, r1]
 800aada:	4413      	add	r3, r2
 800aadc:	b2da      	uxtb	r2, r3
 800aade:	4b23      	ldr	r3, [pc, #140]	; (800ab6c <GPS_GPRMC_Parse+0xa1c>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	3a10      	subs	r2, #16
 800aae4:	b2d2      	uxtb	r2, r2
 800aae6:	759a      	strb	r2, [r3, #22]
		_gps->year = 2000 + (TAIL_READ_P - ASCII_NUMBER) * 10 + (TAIL_READ_P - ASCII_NUMBER);
 800aae8:	4b21      	ldr	r3, [pc, #132]	; (800ab70 <GPS_GPRMC_Parse+0xa20>)
 800aaea:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800aaee:	b2db      	uxtb	r3, r3
 800aaf0:	1c5a      	adds	r2, r3, #1
 800aaf2:	b2d1      	uxtb	r1, r2
 800aaf4:	4a1e      	ldr	r2, [pc, #120]	; (800ab70 <GPS_GPRMC_Parse+0xa20>)
 800aaf6:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800aafa:	4a1e      	ldr	r2, [pc, #120]	; (800ab74 <GPS_GPRMC_Parse+0xa24>)
 800aafc:	fba2 1203 	umull	r1, r2, r2, r3
 800ab00:	0912      	lsrs	r2, r2, #4
 800ab02:	21fa      	movs	r1, #250	; 0xfa
 800ab04:	fb01 f202 	mul.w	r2, r1, r2
 800ab08:	1a9b      	subs	r3, r3, r2
 800ab0a:	b2db      	uxtb	r3, r3
 800ab0c:	461a      	mov	r2, r3
 800ab0e:	4b18      	ldr	r3, [pc, #96]	; (800ab70 <GPS_GPRMC_Parse+0xa20>)
 800ab10:	5c9b      	ldrb	r3, [r3, r2]
 800ab12:	3b30      	subs	r3, #48	; 0x30
 800ab14:	b29b      	uxth	r3, r3
 800ab16:	461a      	mov	r2, r3
 800ab18:	0092      	lsls	r2, r2, #2
 800ab1a:	4413      	add	r3, r2
 800ab1c:	005b      	lsls	r3, r3, #1
 800ab1e:	b29a      	uxth	r2, r3
 800ab20:	4b13      	ldr	r3, [pc, #76]	; (800ab70 <GPS_GPRMC_Parse+0xa20>)
 800ab22:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800ab26:	b2db      	uxtb	r3, r3
 800ab28:	1c59      	adds	r1, r3, #1
 800ab2a:	b2c8      	uxtb	r0, r1
 800ab2c:	4910      	ldr	r1, [pc, #64]	; (800ab70 <GPS_GPRMC_Parse+0xa20>)
 800ab2e:	f881 00fa 	strb.w	r0, [r1, #250]	; 0xfa
 800ab32:	4910      	ldr	r1, [pc, #64]	; (800ab74 <GPS_GPRMC_Parse+0xa24>)
 800ab34:	fba1 0103 	umull	r0, r1, r1, r3
 800ab38:	0909      	lsrs	r1, r1, #4
 800ab3a:	20fa      	movs	r0, #250	; 0xfa
 800ab3c:	fb00 f101 	mul.w	r1, r0, r1
 800ab40:	1a5b      	subs	r3, r3, r1
 800ab42:	b2db      	uxtb	r3, r3
 800ab44:	4619      	mov	r1, r3
 800ab46:	4b0a      	ldr	r3, [pc, #40]	; (800ab70 <GPS_GPRMC_Parse+0xa20>)
 800ab48:	5c5b      	ldrb	r3, [r3, r1]
 800ab4a:	b29b      	uxth	r3, r3
 800ab4c:	4413      	add	r3, r2
 800ab4e:	b29a      	uxth	r2, r3
 800ab50:	4b06      	ldr	r3, [pc, #24]	; (800ab6c <GPS_GPRMC_Parse+0xa1c>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f502 62f4 	add.w	r2, r2, #1952	; 0x7a0
 800ab58:	b292      	uxth	r2, r2
 800ab5a:	831a      	strh	r2, [r3, #24]

		return _gps->gpsState;
 800ab5c:	4b03      	ldr	r3, [pc, #12]	; (800ab6c <GPS_GPRMC_Parse+0xa1c>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ab64:	e000      	b.n	800ab68 <GPS_GPRMC_Parse+0xa18>
	}
	else	return WRONG_DATA;
 800ab66:	2301      	movs	r3, #1
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	bdb0      	pop	{r4, r5, r7, pc}
 800ab6c:	20004f20 	.word	0x20004f20
 800ab70:	20004e20 	.word	0x20004e20
 800ab74:	10624dd3 	.word	0x10624dd3

0800ab78 <GPS_GPGGA_Parse>:
/////////////////////////////////////////////////////////////
/*
 * GPGGA verilerini çözer ve gps değerine atar	-uydu sayısı ve yükseklik-
 */
GPS_State GPS_GPGGA_Parse()
{
 800ab78:	b5b0      	push	{r4, r5, r7, lr}
 800ab7a:	af00      	add	r7, sp, #0
	if(!GPS_CheckSumControl(&ringBuff.rxGps[ringBuff.tail]))
 800ab7c:	4b58      	ldr	r3, [pc, #352]	; (800ace0 <GPS_GPGGA_Parse+0x168>)
 800ab7e:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800ab82:	b2db      	uxtb	r3, r3
 800ab84:	461a      	mov	r2, r3
 800ab86:	4b56      	ldr	r3, [pc, #344]	; (800ace0 <GPS_GPGGA_Parse+0x168>)
 800ab88:	4413      	add	r3, r2
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f000 fbc4 	bl	800b318 <GPS_CheckSumControl>
 800ab90:	4603      	mov	r3, r0
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d101      	bne.n	800ab9a <GPS_GPGGA_Parse+0x22>
	{
		return WRONG_DATA;
 800ab96:	2301      	movs	r3, #1
 800ab98:	e1e2      	b.n	800af60 <GPS_GPGGA_Parse+0x3e8>
	}
	else
	{
		TAIL_INCREASE_TO_COMMA;					// "GPGGA," sonrasına geçer
 800ab9a:	4b51      	ldr	r3, [pc, #324]	; (800ace0 <GPS_GPGGA_Parse+0x168>)
 800ab9c:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800aba0:	b2db      	uxtb	r3, r3
 800aba2:	1c5a      	adds	r2, r3, #1
 800aba4:	b2d1      	uxtb	r1, r2
 800aba6:	4a4e      	ldr	r2, [pc, #312]	; (800ace0 <GPS_GPGGA_Parse+0x168>)
 800aba8:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800abac:	4a4d      	ldr	r2, [pc, #308]	; (800ace4 <GPS_GPGGA_Parse+0x16c>)
 800abae:	fba2 1203 	umull	r1, r2, r2, r3
 800abb2:	0912      	lsrs	r2, r2, #4
 800abb4:	21fa      	movs	r1, #250	; 0xfa
 800abb6:	fb01 f202 	mul.w	r2, r1, r2
 800abba:	1a9b      	subs	r3, r3, r2
 800abbc:	b2db      	uxtb	r3, r3
 800abbe:	461a      	mov	r2, r3
 800abc0:	4b47      	ldr	r3, [pc, #284]	; (800ace0 <GPS_GPGGA_Parse+0x168>)
 800abc2:	5c9b      	ldrb	r3, [r3, r2]
 800abc4:	2b2c      	cmp	r3, #44	; 0x2c
 800abc6:	d1e8      	bne.n	800ab9a <GPS_GPGGA_Parse+0x22>
		TAIL_INCREASE_TO_COMMA;					// "tarih sonrasına geçer
 800abc8:	4b45      	ldr	r3, [pc, #276]	; (800ace0 <GPS_GPGGA_Parse+0x168>)
 800abca:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800abce:	b2db      	uxtb	r3, r3
 800abd0:	1c5a      	adds	r2, r3, #1
 800abd2:	b2d1      	uxtb	r1, r2
 800abd4:	4a42      	ldr	r2, [pc, #264]	; (800ace0 <GPS_GPGGA_Parse+0x168>)
 800abd6:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800abda:	4a42      	ldr	r2, [pc, #264]	; (800ace4 <GPS_GPGGA_Parse+0x16c>)
 800abdc:	fba2 1203 	umull	r1, r2, r2, r3
 800abe0:	0912      	lsrs	r2, r2, #4
 800abe2:	21fa      	movs	r1, #250	; 0xfa
 800abe4:	fb01 f202 	mul.w	r2, r1, r2
 800abe8:	1a9b      	subs	r3, r3, r2
 800abea:	b2db      	uxtb	r3, r3
 800abec:	461a      	mov	r2, r3
 800abee:	4b3c      	ldr	r3, [pc, #240]	; (800ace0 <GPS_GPGGA_Parse+0x168>)
 800abf0:	5c9b      	ldrb	r3, [r3, r2]
 800abf2:	2b2c      	cmp	r3, #44	; 0x2c
 800abf4:	d1e8      	bne.n	800abc8 <GPS_GPGGA_Parse+0x50>
		TAIL_INCREASE_TO_COMMA;					// enlem sonrasına geçer
 800abf6:	4b3a      	ldr	r3, [pc, #232]	; (800ace0 <GPS_GPGGA_Parse+0x168>)
 800abf8:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800abfc:	b2db      	uxtb	r3, r3
 800abfe:	1c5a      	adds	r2, r3, #1
 800ac00:	b2d1      	uxtb	r1, r2
 800ac02:	4a37      	ldr	r2, [pc, #220]	; (800ace0 <GPS_GPGGA_Parse+0x168>)
 800ac04:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800ac08:	4a36      	ldr	r2, [pc, #216]	; (800ace4 <GPS_GPGGA_Parse+0x16c>)
 800ac0a:	fba2 1203 	umull	r1, r2, r2, r3
 800ac0e:	0912      	lsrs	r2, r2, #4
 800ac10:	21fa      	movs	r1, #250	; 0xfa
 800ac12:	fb01 f202 	mul.w	r2, r1, r2
 800ac16:	1a9b      	subs	r3, r3, r2
 800ac18:	b2db      	uxtb	r3, r3
 800ac1a:	461a      	mov	r2, r3
 800ac1c:	4b30      	ldr	r3, [pc, #192]	; (800ace0 <GPS_GPGGA_Parse+0x168>)
 800ac1e:	5c9b      	ldrb	r3, [r3, r2]
 800ac20:	2b2c      	cmp	r3, #44	; 0x2c
 800ac22:	d1e8      	bne.n	800abf6 <GPS_GPGGA_Parse+0x7e>
		TAIL_INCREASE_TO_COMMA;					// boylam sonrasına geçer
 800ac24:	4b2e      	ldr	r3, [pc, #184]	; (800ace0 <GPS_GPGGA_Parse+0x168>)
 800ac26:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800ac2a:	b2db      	uxtb	r3, r3
 800ac2c:	1c5a      	adds	r2, r3, #1
 800ac2e:	b2d1      	uxtb	r1, r2
 800ac30:	4a2b      	ldr	r2, [pc, #172]	; (800ace0 <GPS_GPGGA_Parse+0x168>)
 800ac32:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800ac36:	4a2b      	ldr	r2, [pc, #172]	; (800ace4 <GPS_GPGGA_Parse+0x16c>)
 800ac38:	fba2 1203 	umull	r1, r2, r2, r3
 800ac3c:	0912      	lsrs	r2, r2, #4
 800ac3e:	21fa      	movs	r1, #250	; 0xfa
 800ac40:	fb01 f202 	mul.w	r2, r1, r2
 800ac44:	1a9b      	subs	r3, r3, r2
 800ac46:	b2db      	uxtb	r3, r3
 800ac48:	461a      	mov	r2, r3
 800ac4a:	4b25      	ldr	r3, [pc, #148]	; (800ace0 <GPS_GPGGA_Parse+0x168>)
 800ac4c:	5c9b      	ldrb	r3, [r3, r2]
 800ac4e:	2b2c      	cmp	r3, #44	; 0x2c
 800ac50:	d1e8      	bne.n	800ac24 <GPS_GPGGA_Parse+0xac>
		TAIL_INCREASE_TO_COMMA;					// Boylam bölgesinin başına geçer
 800ac52:	4b23      	ldr	r3, [pc, #140]	; (800ace0 <GPS_GPGGA_Parse+0x168>)
 800ac54:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800ac58:	b2db      	uxtb	r3, r3
 800ac5a:	1c5a      	adds	r2, r3, #1
 800ac5c:	b2d1      	uxtb	r1, r2
 800ac5e:	4a20      	ldr	r2, [pc, #128]	; (800ace0 <GPS_GPGGA_Parse+0x168>)
 800ac60:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800ac64:	4a1f      	ldr	r2, [pc, #124]	; (800ace4 <GPS_GPGGA_Parse+0x16c>)
 800ac66:	fba2 1203 	umull	r1, r2, r2, r3
 800ac6a:	0912      	lsrs	r2, r2, #4
 800ac6c:	21fa      	movs	r1, #250	; 0xfa
 800ac6e:	fb01 f202 	mul.w	r2, r1, r2
 800ac72:	1a9b      	subs	r3, r3, r2
 800ac74:	b2db      	uxtb	r3, r3
 800ac76:	461a      	mov	r2, r3
 800ac78:	4b19      	ldr	r3, [pc, #100]	; (800ace0 <GPS_GPGGA_Parse+0x168>)
 800ac7a:	5c9b      	ldrb	r3, [r3, r2]
 800ac7c:	2b2c      	cmp	r3, #44	; 0x2c
 800ac7e:	d1e8      	bne.n	800ac52 <GPS_GPGGA_Parse+0xda>
		TAIL_INCREASE_TO_COMMA;					// Boylam bölgesinin sonuna geçer
 800ac80:	4b17      	ldr	r3, [pc, #92]	; (800ace0 <GPS_GPGGA_Parse+0x168>)
 800ac82:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800ac86:	b2db      	uxtb	r3, r3
 800ac88:	1c5a      	adds	r2, r3, #1
 800ac8a:	b2d1      	uxtb	r1, r2
 800ac8c:	4a14      	ldr	r2, [pc, #80]	; (800ace0 <GPS_GPGGA_Parse+0x168>)
 800ac8e:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800ac92:	4a14      	ldr	r2, [pc, #80]	; (800ace4 <GPS_GPGGA_Parse+0x16c>)
 800ac94:	fba2 1203 	umull	r1, r2, r2, r3
 800ac98:	0912      	lsrs	r2, r2, #4
 800ac9a:	21fa      	movs	r1, #250	; 0xfa
 800ac9c:	fb01 f202 	mul.w	r2, r1, r2
 800aca0:	1a9b      	subs	r3, r3, r2
 800aca2:	b2db      	uxtb	r3, r3
 800aca4:	461a      	mov	r2, r3
 800aca6:	4b0e      	ldr	r3, [pc, #56]	; (800ace0 <GPS_GPGGA_Parse+0x168>)
 800aca8:	5c9b      	ldrb	r3, [r3, r2]
 800acaa:	2b2c      	cmp	r3, #44	; 0x2c
 800acac:	d1e8      	bne.n	800ac80 <GPS_GPGGA_Parse+0x108>

		if(TAIL_READ == '0')					//GNSS Position Fix Indicator
 800acae:	4b0c      	ldr	r3, [pc, #48]	; (800ace0 <GPS_GPGGA_Parse+0x168>)
 800acb0:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800acb4:	b2db      	uxtb	r3, r3
 800acb6:	4a0b      	ldr	r2, [pc, #44]	; (800ace4 <GPS_GPGGA_Parse+0x16c>)
 800acb8:	fba2 1203 	umull	r1, r2, r2, r3
 800acbc:	0912      	lsrs	r2, r2, #4
 800acbe:	21fa      	movs	r1, #250	; 0xfa
 800acc0:	fb01 f202 	mul.w	r2, r1, r2
 800acc4:	1a9b      	subs	r3, r3, r2
 800acc6:	b2db      	uxtb	r3, r3
 800acc8:	461a      	mov	r2, r3
 800acca:	4b05      	ldr	r3, [pc, #20]	; (800ace0 <GPS_GPGGA_Parse+0x168>)
 800accc:	5c9b      	ldrb	r3, [r3, r2]
 800acce:	2b30      	cmp	r3, #48	; 0x30
 800acd0:	d10c      	bne.n	800acec <GPS_GPGGA_Parse+0x174>
		{
			_gps->gpsState = NO_CONNECTION;
 800acd2:	4b05      	ldr	r3, [pc, #20]	; (800ace8 <GPS_GPGGA_Parse+0x170>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	2200      	movs	r2, #0
 800acd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			return NO_CONNECTION;
 800acdc:	2300      	movs	r3, #0
 800acde:	e13f      	b.n	800af60 <GPS_GPGGA_Parse+0x3e8>
 800ace0:	20004e20 	.word	0x20004e20
 800ace4:	10624dd3 	.word	0x10624dd3
 800ace8:	20004f20 	.word	0x20004f20
		}
		else
			_gps->gpsState = POSITION_FIXED;
 800acec:	4b9d      	ldr	r3, [pc, #628]	; (800af64 <GPS_GPGGA_Parse+0x3ec>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	2202      	movs	r2, #2
 800acf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		if(TAIL_READ_P != 0)
 800acf6:	4b9c      	ldr	r3, [pc, #624]	; (800af68 <GPS_GPGGA_Parse+0x3f0>)
 800acf8:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800acfc:	b2db      	uxtb	r3, r3
 800acfe:	1c5a      	adds	r2, r3, #1
 800ad00:	b2d1      	uxtb	r1, r2
 800ad02:	4a99      	ldr	r2, [pc, #612]	; (800af68 <GPS_GPGGA_Parse+0x3f0>)
 800ad04:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800ad08:	4a98      	ldr	r2, [pc, #608]	; (800af6c <GPS_GPGGA_Parse+0x3f4>)
 800ad0a:	fba2 1203 	umull	r1, r2, r2, r3
 800ad0e:	0912      	lsrs	r2, r2, #4
 800ad10:	21fa      	movs	r1, #250	; 0xfa
 800ad12:	fb01 f202 	mul.w	r2, r1, r2
 800ad16:	1a9b      	subs	r3, r3, r2
 800ad18:	b2db      	uxtb	r3, r3
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	4b92      	ldr	r3, [pc, #584]	; (800af68 <GPS_GPGGA_Parse+0x3f0>)
 800ad1e:	5c9b      	ldrb	r3, [r3, r2]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	f000 8119 	beq.w	800af58 <GPS_GPGGA_Parse+0x3e0>
		{
			TAIL_INCREASE_TO_COMMA;	// "," geçer
 800ad26:	4b90      	ldr	r3, [pc, #576]	; (800af68 <GPS_GPGGA_Parse+0x3f0>)
 800ad28:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800ad2c:	b2db      	uxtb	r3, r3
 800ad2e:	1c5a      	adds	r2, r3, #1
 800ad30:	b2d1      	uxtb	r1, r2
 800ad32:	4a8d      	ldr	r2, [pc, #564]	; (800af68 <GPS_GPGGA_Parse+0x3f0>)
 800ad34:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800ad38:	4a8c      	ldr	r2, [pc, #560]	; (800af6c <GPS_GPGGA_Parse+0x3f4>)
 800ad3a:	fba2 1203 	umull	r1, r2, r2, r3
 800ad3e:	0912      	lsrs	r2, r2, #4
 800ad40:	21fa      	movs	r1, #250	; 0xfa
 800ad42:	fb01 f202 	mul.w	r2, r1, r2
 800ad46:	1a9b      	subs	r3, r3, r2
 800ad48:	b2db      	uxtb	r3, r3
 800ad4a:	461a      	mov	r2, r3
 800ad4c:	4b86      	ldr	r3, [pc, #536]	; (800af68 <GPS_GPGGA_Parse+0x3f0>)
 800ad4e:	5c9b      	ldrb	r3, [r3, r2]
 800ad50:	2b2c      	cmp	r3, #44	; 0x2c
 800ad52:	d1e8      	bne.n	800ad26 <GPS_GPGGA_Parse+0x1ae>
			_gps->numberOfSatellite = (TAIL_READ_P - ASCII_NUMBER) * 10 + (TAIL_READ_P - ASCII_NUMBER);
 800ad54:	4b84      	ldr	r3, [pc, #528]	; (800af68 <GPS_GPGGA_Parse+0x3f0>)
 800ad56:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800ad5a:	b2db      	uxtb	r3, r3
 800ad5c:	1c5a      	adds	r2, r3, #1
 800ad5e:	b2d1      	uxtb	r1, r2
 800ad60:	4a81      	ldr	r2, [pc, #516]	; (800af68 <GPS_GPGGA_Parse+0x3f0>)
 800ad62:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800ad66:	4a81      	ldr	r2, [pc, #516]	; (800af6c <GPS_GPGGA_Parse+0x3f4>)
 800ad68:	fba2 1203 	umull	r1, r2, r2, r3
 800ad6c:	0912      	lsrs	r2, r2, #4
 800ad6e:	21fa      	movs	r1, #250	; 0xfa
 800ad70:	fb01 f202 	mul.w	r2, r1, r2
 800ad74:	1a9b      	subs	r3, r3, r2
 800ad76:	b2db      	uxtb	r3, r3
 800ad78:	461a      	mov	r2, r3
 800ad7a:	4b7b      	ldr	r3, [pc, #492]	; (800af68 <GPS_GPGGA_Parse+0x3f0>)
 800ad7c:	5c9b      	ldrb	r3, [r3, r2]
 800ad7e:	461a      	mov	r2, r3
 800ad80:	0092      	lsls	r2, r2, #2
 800ad82:	4413      	add	r3, r2
 800ad84:	005b      	lsls	r3, r3, #1
 800ad86:	b2da      	uxtb	r2, r3
 800ad88:	4b77      	ldr	r3, [pc, #476]	; (800af68 <GPS_GPGGA_Parse+0x3f0>)
 800ad8a:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800ad8e:	b2db      	uxtb	r3, r3
 800ad90:	1c59      	adds	r1, r3, #1
 800ad92:	b2c8      	uxtb	r0, r1
 800ad94:	4974      	ldr	r1, [pc, #464]	; (800af68 <GPS_GPGGA_Parse+0x3f0>)
 800ad96:	f881 00fa 	strb.w	r0, [r1, #250]	; 0xfa
 800ad9a:	4974      	ldr	r1, [pc, #464]	; (800af6c <GPS_GPGGA_Parse+0x3f4>)
 800ad9c:	fba1 0103 	umull	r0, r1, r1, r3
 800ada0:	0909      	lsrs	r1, r1, #4
 800ada2:	20fa      	movs	r0, #250	; 0xfa
 800ada4:	fb00 f101 	mul.w	r1, r0, r1
 800ada8:	1a5b      	subs	r3, r3, r1
 800adaa:	b2db      	uxtb	r3, r3
 800adac:	4619      	mov	r1, r3
 800adae:	4b6e      	ldr	r3, [pc, #440]	; (800af68 <GPS_GPGGA_Parse+0x3f0>)
 800adb0:	5c5b      	ldrb	r3, [r3, r1]
 800adb2:	4413      	add	r3, r2
 800adb4:	b2da      	uxtb	r2, r3
 800adb6:	4b6b      	ldr	r3, [pc, #428]	; (800af64 <GPS_GPGGA_Parse+0x3ec>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	3a10      	subs	r2, #16
 800adbc:	b2d2      	uxtb	r2, r2
 800adbe:	769a      	strb	r2, [r3, #26]

			TAIL_INCREASE_TO_COMMA;	// ",0.9" geçer
 800adc0:	4b69      	ldr	r3, [pc, #420]	; (800af68 <GPS_GPGGA_Parse+0x3f0>)
 800adc2:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800adc6:	b2db      	uxtb	r3, r3
 800adc8:	1c5a      	adds	r2, r3, #1
 800adca:	b2d1      	uxtb	r1, r2
 800adcc:	4a66      	ldr	r2, [pc, #408]	; (800af68 <GPS_GPGGA_Parse+0x3f0>)
 800adce:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800add2:	4a66      	ldr	r2, [pc, #408]	; (800af6c <GPS_GPGGA_Parse+0x3f4>)
 800add4:	fba2 1203 	umull	r1, r2, r2, r3
 800add8:	0912      	lsrs	r2, r2, #4
 800adda:	21fa      	movs	r1, #250	; 0xfa
 800addc:	fb01 f202 	mul.w	r2, r1, r2
 800ade0:	1a9b      	subs	r3, r3, r2
 800ade2:	b2db      	uxtb	r3, r3
 800ade4:	461a      	mov	r2, r3
 800ade6:	4b60      	ldr	r3, [pc, #384]	; (800af68 <GPS_GPGGA_Parse+0x3f0>)
 800ade8:	5c9b      	ldrb	r3, [r3, r2]
 800adea:	2b2c      	cmp	r3, #44	; 0x2c
 800adec:	d1e8      	bne.n	800adc0 <GPS_GPGGA_Parse+0x248>
			TAIL_INCREASE_TO_COMMA;	// "," geçer
 800adee:	4b5e      	ldr	r3, [pc, #376]	; (800af68 <GPS_GPGGA_Parse+0x3f0>)
 800adf0:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800adf4:	b2db      	uxtb	r3, r3
 800adf6:	1c5a      	adds	r2, r3, #1
 800adf8:	b2d1      	uxtb	r1, r2
 800adfa:	4a5b      	ldr	r2, [pc, #364]	; (800af68 <GPS_GPGGA_Parse+0x3f0>)
 800adfc:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800ae00:	4a5a      	ldr	r2, [pc, #360]	; (800af6c <GPS_GPGGA_Parse+0x3f4>)
 800ae02:	fba2 1203 	umull	r1, r2, r2, r3
 800ae06:	0912      	lsrs	r2, r2, #4
 800ae08:	21fa      	movs	r1, #250	; 0xfa
 800ae0a:	fb01 f202 	mul.w	r2, r1, r2
 800ae0e:	1a9b      	subs	r3, r3, r2
 800ae10:	b2db      	uxtb	r3, r3
 800ae12:	461a      	mov	r2, r3
 800ae14:	4b54      	ldr	r3, [pc, #336]	; (800af68 <GPS_GPGGA_Parse+0x3f0>)
 800ae16:	5c9b      	ldrb	r3, [r3, r2]
 800ae18:	2b2c      	cmp	r3, #44	; 0x2c
 800ae1a:	d1e8      	bne.n	800adee <GPS_GPGGA_Parse+0x276>

			_gps->height = (TAIL_READ_P - ASCII_NUMBER) * 100 + (TAIL_READ_P - ASCII_NUMBER) * 10 + (TAIL_READ_P - ASCII_NUMBER);
 800ae1c:	4b52      	ldr	r3, [pc, #328]	; (800af68 <GPS_GPGGA_Parse+0x3f0>)
 800ae1e:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800ae22:	b2db      	uxtb	r3, r3
 800ae24:	1c5a      	adds	r2, r3, #1
 800ae26:	b2d1      	uxtb	r1, r2
 800ae28:	4a4f      	ldr	r2, [pc, #316]	; (800af68 <GPS_GPGGA_Parse+0x3f0>)
 800ae2a:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800ae2e:	4a4f      	ldr	r2, [pc, #316]	; (800af6c <GPS_GPGGA_Parse+0x3f4>)
 800ae30:	fba2 1203 	umull	r1, r2, r2, r3
 800ae34:	0912      	lsrs	r2, r2, #4
 800ae36:	21fa      	movs	r1, #250	; 0xfa
 800ae38:	fb01 f202 	mul.w	r2, r1, r2
 800ae3c:	1a9b      	subs	r3, r3, r2
 800ae3e:	b2db      	uxtb	r3, r3
 800ae40:	461a      	mov	r2, r3
 800ae42:	4b49      	ldr	r3, [pc, #292]	; (800af68 <GPS_GPGGA_Parse+0x3f0>)
 800ae44:	5c9b      	ldrb	r3, [r3, r2]
 800ae46:	3b30      	subs	r3, #48	; 0x30
 800ae48:	2264      	movs	r2, #100	; 0x64
 800ae4a:	fb02 f103 	mul.w	r1, r2, r3
 800ae4e:	4b46      	ldr	r3, [pc, #280]	; (800af68 <GPS_GPGGA_Parse+0x3f0>)
 800ae50:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800ae54:	b2db      	uxtb	r3, r3
 800ae56:	1c5a      	adds	r2, r3, #1
 800ae58:	b2d0      	uxtb	r0, r2
 800ae5a:	4a43      	ldr	r2, [pc, #268]	; (800af68 <GPS_GPGGA_Parse+0x3f0>)
 800ae5c:	f882 00fa 	strb.w	r0, [r2, #250]	; 0xfa
 800ae60:	4a42      	ldr	r2, [pc, #264]	; (800af6c <GPS_GPGGA_Parse+0x3f4>)
 800ae62:	fba2 0203 	umull	r0, r2, r2, r3
 800ae66:	0912      	lsrs	r2, r2, #4
 800ae68:	20fa      	movs	r0, #250	; 0xfa
 800ae6a:	fb00 f202 	mul.w	r2, r0, r2
 800ae6e:	1a9b      	subs	r3, r3, r2
 800ae70:	b2db      	uxtb	r3, r3
 800ae72:	461a      	mov	r2, r3
 800ae74:	4b3c      	ldr	r3, [pc, #240]	; (800af68 <GPS_GPGGA_Parse+0x3f0>)
 800ae76:	5c9b      	ldrb	r3, [r3, r2]
 800ae78:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800ae7c:	4613      	mov	r3, r2
 800ae7e:	009b      	lsls	r3, r3, #2
 800ae80:	4413      	add	r3, r2
 800ae82:	005b      	lsls	r3, r3, #1
 800ae84:	18ca      	adds	r2, r1, r3
 800ae86:	4b38      	ldr	r3, [pc, #224]	; (800af68 <GPS_GPGGA_Parse+0x3f0>)
 800ae88:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800ae8c:	b2db      	uxtb	r3, r3
 800ae8e:	1c59      	adds	r1, r3, #1
 800ae90:	b2c8      	uxtb	r0, r1
 800ae92:	4935      	ldr	r1, [pc, #212]	; (800af68 <GPS_GPGGA_Parse+0x3f0>)
 800ae94:	f881 00fa 	strb.w	r0, [r1, #250]	; 0xfa
 800ae98:	4934      	ldr	r1, [pc, #208]	; (800af6c <GPS_GPGGA_Parse+0x3f4>)
 800ae9a:	fba1 0103 	umull	r0, r1, r1, r3
 800ae9e:	0909      	lsrs	r1, r1, #4
 800aea0:	20fa      	movs	r0, #250	; 0xfa
 800aea2:	fb00 f101 	mul.w	r1, r0, r1
 800aea6:	1a5b      	subs	r3, r3, r1
 800aea8:	b2db      	uxtb	r3, r3
 800aeaa:	4619      	mov	r1, r3
 800aeac:	4b2e      	ldr	r3, [pc, #184]	; (800af68 <GPS_GPGGA_Parse+0x3f0>)
 800aeae:	5c5b      	ldrb	r3, [r3, r1]
 800aeb0:	3b30      	subs	r3, #48	; 0x30
 800aeb2:	441a      	add	r2, r3
 800aeb4:	4b2b      	ldr	r3, [pc, #172]	; (800af64 <GPS_GPGGA_Parse+0x3ec>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	ee07 2a90 	vmov	s15, r2
 800aebc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aec0:	edc3 7a07 	vstr	s15, [r3, #28]
			TAIL_INCREASE;
 800aec4:	4b28      	ldr	r3, [pc, #160]	; (800af68 <GPS_GPGGA_Parse+0x3f0>)
 800aec6:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800aeca:	b2db      	uxtb	r3, r3
 800aecc:	3301      	adds	r3, #1
 800aece:	461a      	mov	r2, r3
 800aed0:	4b26      	ldr	r3, [pc, #152]	; (800af6c <GPS_GPGGA_Parse+0x3f4>)
 800aed2:	fba3 1302 	umull	r1, r3, r3, r2
 800aed6:	091b      	lsrs	r3, r3, #4
 800aed8:	21fa      	movs	r1, #250	; 0xfa
 800aeda:	fb01 f303 	mul.w	r3, r1, r3
 800aede:	1ad3      	subs	r3, r2, r3
 800aee0:	b2da      	uxtb	r2, r3
 800aee2:	4b21      	ldr	r3, [pc, #132]	; (800af68 <GPS_GPGGA_Parse+0x3f0>)
 800aee4:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
			_gps->height += (TAIL_READ_P - ASCII_NUMBER) / 10.0;
 800aee8:	4b1f      	ldr	r3, [pc, #124]	; (800af68 <GPS_GPGGA_Parse+0x3f0>)
 800aeea:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800aeee:	b2db      	uxtb	r3, r3
 800aef0:	1c5a      	adds	r2, r3, #1
 800aef2:	b2d1      	uxtb	r1, r2
 800aef4:	4a1c      	ldr	r2, [pc, #112]	; (800af68 <GPS_GPGGA_Parse+0x3f0>)
 800aef6:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800aefa:	4a1c      	ldr	r2, [pc, #112]	; (800af6c <GPS_GPGGA_Parse+0x3f4>)
 800aefc:	fba2 1203 	umull	r1, r2, r2, r3
 800af00:	0912      	lsrs	r2, r2, #4
 800af02:	21fa      	movs	r1, #250	; 0xfa
 800af04:	fb01 f202 	mul.w	r2, r1, r2
 800af08:	1a9b      	subs	r3, r3, r2
 800af0a:	b2db      	uxtb	r3, r3
 800af0c:	461a      	mov	r2, r3
 800af0e:	4b16      	ldr	r3, [pc, #88]	; (800af68 <GPS_GPGGA_Parse+0x3f0>)
 800af10:	5c9b      	ldrb	r3, [r3, r2]
 800af12:	3b30      	subs	r3, #48	; 0x30
 800af14:	4618      	mov	r0, r3
 800af16:	f7f5 fb1d 	bl	8000554 <__aeabi_i2d>
 800af1a:	f04f 0200 	mov.w	r2, #0
 800af1e:	4b14      	ldr	r3, [pc, #80]	; (800af70 <GPS_GPGGA_Parse+0x3f8>)
 800af20:	f7f5 fcac 	bl	800087c <__aeabi_ddiv>
 800af24:	4602      	mov	r2, r0
 800af26:	460b      	mov	r3, r1
 800af28:	4614      	mov	r4, r2
 800af2a:	461d      	mov	r5, r3
 800af2c:	4b0d      	ldr	r3, [pc, #52]	; (800af64 <GPS_GPGGA_Parse+0x3ec>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	69db      	ldr	r3, [r3, #28]
 800af32:	4618      	mov	r0, r3
 800af34:	f7f5 fb20 	bl	8000578 <__aeabi_f2d>
 800af38:	4602      	mov	r2, r0
 800af3a:	460b      	mov	r3, r1
 800af3c:	4620      	mov	r0, r4
 800af3e:	4629      	mov	r1, r5
 800af40:	f7f5 f9bc 	bl	80002bc <__adddf3>
 800af44:	4602      	mov	r2, r0
 800af46:	460b      	mov	r3, r1
 800af48:	4906      	ldr	r1, [pc, #24]	; (800af64 <GPS_GPGGA_Parse+0x3ec>)
 800af4a:	680c      	ldr	r4, [r1, #0]
 800af4c:	4610      	mov	r0, r2
 800af4e:	4619      	mov	r1, r3
 800af50:	f7f5 fe3a 	bl	8000bc8 <__aeabi_d2f>
 800af54:	4603      	mov	r3, r0
 800af56:	61e3      	str	r3, [r4, #28]
		}
		return _gps->gpsState;
 800af58:	4b02      	ldr	r3, [pc, #8]	; (800af64 <GPS_GPGGA_Parse+0x3ec>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	}
}
 800af60:	4618      	mov	r0, r3
 800af62:	bdb0      	pop	{r4, r5, r7, pc}
 800af64:	20004f20 	.word	0x20004f20
 800af68:	20004e20 	.word	0x20004e20
 800af6c:	10624dd3 	.word	0x10624dd3
 800af70:	40240000 	.word	0x40240000
 800af74:	00000000 	.word	0x00000000

0800af78 <GPS_GPVTG_Parse>:
/////////////////////////////////////////////////////////////
/*
 * GPVTG verilerini çözer ve gps değerine atar	-hız bilgisi-
 */
GPS_State GPS_GPVTG_Parse()
{
 800af78:	b5b0      	push	{r4, r5, r7, lr}
 800af7a:	b082      	sub	sp, #8
 800af7c:	af00      	add	r7, sp, #0
	if(!GPS_CheckSumControl(&ringBuff.rxGps[ringBuff.tail]))
 800af7e:	4b70      	ldr	r3, [pc, #448]	; (800b140 <GPS_GPVTG_Parse+0x1c8>)
 800af80:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800af84:	b2db      	uxtb	r3, r3
 800af86:	461a      	mov	r2, r3
 800af88:	4b6d      	ldr	r3, [pc, #436]	; (800b140 <GPS_GPVTG_Parse+0x1c8>)
 800af8a:	4413      	add	r3, r2
 800af8c:	4618      	mov	r0, r3
 800af8e:	f000 f9c3 	bl	800b318 <GPS_CheckSumControl>
 800af92:	4603      	mov	r3, r0
 800af94:	2b00      	cmp	r3, #0
 800af96:	d101      	bne.n	800af9c <GPS_GPVTG_Parse+0x24>
	{
		return WRONG_DATA;
 800af98:	2301      	movs	r3, #1
 800af9a:	e1a7      	b.n	800b2ec <GPS_GPVTG_Parse+0x374>
	}
	else
	{
		TAIL_INCREASE_TO_COMMA;		// "GPVTG,"
 800af9c:	4b68      	ldr	r3, [pc, #416]	; (800b140 <GPS_GPVTG_Parse+0x1c8>)
 800af9e:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800afa2:	b2db      	uxtb	r3, r3
 800afa4:	1c5a      	adds	r2, r3, #1
 800afa6:	b2d1      	uxtb	r1, r2
 800afa8:	4a65      	ldr	r2, [pc, #404]	; (800b140 <GPS_GPVTG_Parse+0x1c8>)
 800afaa:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800afae:	4a65      	ldr	r2, [pc, #404]	; (800b144 <GPS_GPVTG_Parse+0x1cc>)
 800afb0:	fba2 1203 	umull	r1, r2, r2, r3
 800afb4:	0912      	lsrs	r2, r2, #4
 800afb6:	21fa      	movs	r1, #250	; 0xfa
 800afb8:	fb01 f202 	mul.w	r2, r1, r2
 800afbc:	1a9b      	subs	r3, r3, r2
 800afbe:	b2db      	uxtb	r3, r3
 800afc0:	461a      	mov	r2, r3
 800afc2:	4b5f      	ldr	r3, [pc, #380]	; (800b140 <GPS_GPVTG_Parse+0x1c8>)
 800afc4:	5c9b      	ldrb	r3, [r3, r2]
 800afc6:	2b2c      	cmp	r3, #44	; 0x2c
 800afc8:	d1e8      	bne.n	800af9c <GPS_GPVTG_Parse+0x24>
		TAIL_INCREASE_TO_COMMA;		//
 800afca:	4b5d      	ldr	r3, [pc, #372]	; (800b140 <GPS_GPVTG_Parse+0x1c8>)
 800afcc:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800afd0:	b2db      	uxtb	r3, r3
 800afd2:	1c5a      	adds	r2, r3, #1
 800afd4:	b2d1      	uxtb	r1, r2
 800afd6:	4a5a      	ldr	r2, [pc, #360]	; (800b140 <GPS_GPVTG_Parse+0x1c8>)
 800afd8:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800afdc:	4a59      	ldr	r2, [pc, #356]	; (800b144 <GPS_GPVTG_Parse+0x1cc>)
 800afde:	fba2 1203 	umull	r1, r2, r2, r3
 800afe2:	0912      	lsrs	r2, r2, #4
 800afe4:	21fa      	movs	r1, #250	; 0xfa
 800afe6:	fb01 f202 	mul.w	r2, r1, r2
 800afea:	1a9b      	subs	r3, r3, r2
 800afec:	b2db      	uxtb	r3, r3
 800afee:	461a      	mov	r2, r3
 800aff0:	4b53      	ldr	r3, [pc, #332]	; (800b140 <GPS_GPVTG_Parse+0x1c8>)
 800aff2:	5c9b      	ldrb	r3, [r3, r2]
 800aff4:	2b2c      	cmp	r3, #44	; 0x2c
 800aff6:	d1e8      	bne.n	800afca <GPS_GPVTG_Parse+0x52>
		TAIL_INCREASE_TO_COMMA;
 800aff8:	4b51      	ldr	r3, [pc, #324]	; (800b140 <GPS_GPVTG_Parse+0x1c8>)
 800affa:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800affe:	b2db      	uxtb	r3, r3
 800b000:	1c5a      	adds	r2, r3, #1
 800b002:	b2d1      	uxtb	r1, r2
 800b004:	4a4e      	ldr	r2, [pc, #312]	; (800b140 <GPS_GPVTG_Parse+0x1c8>)
 800b006:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800b00a:	4a4e      	ldr	r2, [pc, #312]	; (800b144 <GPS_GPVTG_Parse+0x1cc>)
 800b00c:	fba2 1203 	umull	r1, r2, r2, r3
 800b010:	0912      	lsrs	r2, r2, #4
 800b012:	21fa      	movs	r1, #250	; 0xfa
 800b014:	fb01 f202 	mul.w	r2, r1, r2
 800b018:	1a9b      	subs	r3, r3, r2
 800b01a:	b2db      	uxtb	r3, r3
 800b01c:	461a      	mov	r2, r3
 800b01e:	4b48      	ldr	r3, [pc, #288]	; (800b140 <GPS_GPVTG_Parse+0x1c8>)
 800b020:	5c9b      	ldrb	r3, [r3, r2]
 800b022:	2b2c      	cmp	r3, #44	; 0x2c
 800b024:	d1e8      	bne.n	800aff8 <GPS_GPVTG_Parse+0x80>
		TAIL_INCREASE_TO_COMMA;
 800b026:	4b46      	ldr	r3, [pc, #280]	; (800b140 <GPS_GPVTG_Parse+0x1c8>)
 800b028:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800b02c:	b2db      	uxtb	r3, r3
 800b02e:	1c5a      	adds	r2, r3, #1
 800b030:	b2d1      	uxtb	r1, r2
 800b032:	4a43      	ldr	r2, [pc, #268]	; (800b140 <GPS_GPVTG_Parse+0x1c8>)
 800b034:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800b038:	4a42      	ldr	r2, [pc, #264]	; (800b144 <GPS_GPVTG_Parse+0x1cc>)
 800b03a:	fba2 1203 	umull	r1, r2, r2, r3
 800b03e:	0912      	lsrs	r2, r2, #4
 800b040:	21fa      	movs	r1, #250	; 0xfa
 800b042:	fb01 f202 	mul.w	r2, r1, r2
 800b046:	1a9b      	subs	r3, r3, r2
 800b048:	b2db      	uxtb	r3, r3
 800b04a:	461a      	mov	r2, r3
 800b04c:	4b3c      	ldr	r3, [pc, #240]	; (800b140 <GPS_GPVTG_Parse+0x1c8>)
 800b04e:	5c9b      	ldrb	r3, [r3, r2]
 800b050:	2b2c      	cmp	r3, #44	; 0x2c
 800b052:	d1e8      	bne.n	800b026 <GPS_GPVTG_Parse+0xae>
		TAIL_INCREASE_TO_COMMA;
 800b054:	4b3a      	ldr	r3, [pc, #232]	; (800b140 <GPS_GPVTG_Parse+0x1c8>)
 800b056:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800b05a:	b2db      	uxtb	r3, r3
 800b05c:	1c5a      	adds	r2, r3, #1
 800b05e:	b2d1      	uxtb	r1, r2
 800b060:	4a37      	ldr	r2, [pc, #220]	; (800b140 <GPS_GPVTG_Parse+0x1c8>)
 800b062:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800b066:	4a37      	ldr	r2, [pc, #220]	; (800b144 <GPS_GPVTG_Parse+0x1cc>)
 800b068:	fba2 1203 	umull	r1, r2, r2, r3
 800b06c:	0912      	lsrs	r2, r2, #4
 800b06e:	21fa      	movs	r1, #250	; 0xfa
 800b070:	fb01 f202 	mul.w	r2, r1, r2
 800b074:	1a9b      	subs	r3, r3, r2
 800b076:	b2db      	uxtb	r3, r3
 800b078:	461a      	mov	r2, r3
 800b07a:	4b31      	ldr	r3, [pc, #196]	; (800b140 <GPS_GPVTG_Parse+0x1c8>)
 800b07c:	5c9b      	ldrb	r3, [r3, r2]
 800b07e:	2b2c      	cmp	r3, #44	; 0x2c
 800b080:	d1e8      	bne.n	800b054 <GPS_GPVTG_Parse+0xdc>
		TAIL_INCREASE_TO_COMMA;
 800b082:	4b2f      	ldr	r3, [pc, #188]	; (800b140 <GPS_GPVTG_Parse+0x1c8>)
 800b084:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800b088:	b2db      	uxtb	r3, r3
 800b08a:	1c5a      	adds	r2, r3, #1
 800b08c:	b2d1      	uxtb	r1, r2
 800b08e:	4a2c      	ldr	r2, [pc, #176]	; (800b140 <GPS_GPVTG_Parse+0x1c8>)
 800b090:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800b094:	4a2b      	ldr	r2, [pc, #172]	; (800b144 <GPS_GPVTG_Parse+0x1cc>)
 800b096:	fba2 1203 	umull	r1, r2, r2, r3
 800b09a:	0912      	lsrs	r2, r2, #4
 800b09c:	21fa      	movs	r1, #250	; 0xfa
 800b09e:	fb01 f202 	mul.w	r2, r1, r2
 800b0a2:	1a9b      	subs	r3, r3, r2
 800b0a4:	b2db      	uxtb	r3, r3
 800b0a6:	461a      	mov	r2, r3
 800b0a8:	4b25      	ldr	r3, [pc, #148]	; (800b140 <GPS_GPVTG_Parse+0x1c8>)
 800b0aa:	5c9b      	ldrb	r3, [r3, r2]
 800b0ac:	2b2c      	cmp	r3, #44	; 0x2c
 800b0ae:	d1e8      	bne.n	800b082 <GPS_GPVTG_Parse+0x10a>
		TAIL_INCREASE_TO_COMMA;
 800b0b0:	4b23      	ldr	r3, [pc, #140]	; (800b140 <GPS_GPVTG_Parse+0x1c8>)
 800b0b2:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800b0b6:	b2db      	uxtb	r3, r3
 800b0b8:	1c5a      	adds	r2, r3, #1
 800b0ba:	b2d1      	uxtb	r1, r2
 800b0bc:	4a20      	ldr	r2, [pc, #128]	; (800b140 <GPS_GPVTG_Parse+0x1c8>)
 800b0be:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800b0c2:	4a20      	ldr	r2, [pc, #128]	; (800b144 <GPS_GPVTG_Parse+0x1cc>)
 800b0c4:	fba2 1203 	umull	r1, r2, r2, r3
 800b0c8:	0912      	lsrs	r2, r2, #4
 800b0ca:	21fa      	movs	r1, #250	; 0xfa
 800b0cc:	fb01 f202 	mul.w	r2, r1, r2
 800b0d0:	1a9b      	subs	r3, r3, r2
 800b0d2:	b2db      	uxtb	r3, r3
 800b0d4:	461a      	mov	r2, r3
 800b0d6:	4b1a      	ldr	r3, [pc, #104]	; (800b140 <GPS_GPVTG_Parse+0x1c8>)
 800b0d8:	5c9b      	ldrb	r3, [r3, r2]
 800b0da:	2b2c      	cmp	r3, #44	; 0x2c
 800b0dc:	d1e8      	bne.n	800b0b0 <GPS_GPVTG_Parse+0x138>

		uint8_t tailValue1 = ringBuff.tail;
 800b0de:	4b18      	ldr	r3, [pc, #96]	; (800b140 <GPS_GPVTG_Parse+0x1c8>)
 800b0e0:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800b0e4:	71bb      	strb	r3, [r7, #6]
		TAIL_INCREASE_DOT;
 800b0e6:	4b16      	ldr	r3, [pc, #88]	; (800b140 <GPS_GPVTG_Parse+0x1c8>)
 800b0e8:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800b0ec:	b2db      	uxtb	r3, r3
 800b0ee:	1c5a      	adds	r2, r3, #1
 800b0f0:	b2d1      	uxtb	r1, r2
 800b0f2:	4a13      	ldr	r2, [pc, #76]	; (800b140 <GPS_GPVTG_Parse+0x1c8>)
 800b0f4:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800b0f8:	4a12      	ldr	r2, [pc, #72]	; (800b144 <GPS_GPVTG_Parse+0x1cc>)
 800b0fa:	fba2 1203 	umull	r1, r2, r2, r3
 800b0fe:	0912      	lsrs	r2, r2, #4
 800b100:	21fa      	movs	r1, #250	; 0xfa
 800b102:	fb01 f202 	mul.w	r2, r1, r2
 800b106:	1a9b      	subs	r3, r3, r2
 800b108:	b2db      	uxtb	r3, r3
 800b10a:	461a      	mov	r2, r3
 800b10c:	4b0c      	ldr	r3, [pc, #48]	; (800b140 <GPS_GPVTG_Parse+0x1c8>)
 800b10e:	5c9b      	ldrb	r3, [r3, r2]
 800b110:	2b2e      	cmp	r3, #46	; 0x2e
 800b112:	d1e8      	bne.n	800b0e6 <GPS_GPVTG_Parse+0x16e>
		uint8_t tailValue2 = ringBuff.tail;
 800b114:	4b0a      	ldr	r3, [pc, #40]	; (800b140 <GPS_GPVTG_Parse+0x1c8>)
 800b116:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800b11a:	717b      	strb	r3, [r7, #5]

		signed char counter= tailValue2 - tailValue1 - 2;
 800b11c:	797a      	ldrb	r2, [r7, #5]
 800b11e:	79bb      	ldrb	r3, [r7, #6]
 800b120:	1ad3      	subs	r3, r2, r3
 800b122:	b2db      	uxtb	r3, r3
 800b124:	3b02      	subs	r3, #2
 800b126:	b2db      	uxtb	r3, r3
 800b128:	71fb      	strb	r3, [r7, #7]
		ringBuff.tail = tailValue1;
 800b12a:	4a05      	ldr	r2, [pc, #20]	; (800b140 <GPS_GPVTG_Parse+0x1c8>)
 800b12c:	79bb      	ldrb	r3, [r7, #6]
 800b12e:	f882 30fa 	strb.w	r3, [r2, #250]	; 0xfa
		_gps->speed = 0;
 800b132:	4b05      	ldr	r3, [pc, #20]	; (800b148 <GPS_GPVTG_Parse+0x1d0>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f04f 0200 	mov.w	r2, #0
 800b13a:	621a      	str	r2, [r3, #32]
		for(;counter >= 0; counter--)
 800b13c:	e042      	b.n	800b1c4 <GPS_GPVTG_Parse+0x24c>
 800b13e:	bf00      	nop
 800b140:	20004e20 	.word	0x20004e20
 800b144:	10624dd3 	.word	0x10624dd3
 800b148:	20004f20 	.word	0x20004f20
		{
			_gps->speed += (TAIL_READ - ASCII_NUMBER) * (uint32_t)pow(10,counter);
 800b14c:	4b6c      	ldr	r3, [pc, #432]	; (800b300 <GPS_GPVTG_Parse+0x388>)
 800b14e:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800b152:	b2db      	uxtb	r3, r3
 800b154:	4a6b      	ldr	r2, [pc, #428]	; (800b304 <GPS_GPVTG_Parse+0x38c>)
 800b156:	fba2 1203 	umull	r1, r2, r2, r3
 800b15a:	0912      	lsrs	r2, r2, #4
 800b15c:	21fa      	movs	r1, #250	; 0xfa
 800b15e:	fb01 f202 	mul.w	r2, r1, r2
 800b162:	1a9b      	subs	r3, r3, r2
 800b164:	b2db      	uxtb	r3, r3
 800b166:	461a      	mov	r2, r3
 800b168:	4b65      	ldr	r3, [pc, #404]	; (800b300 <GPS_GPVTG_Parse+0x388>)
 800b16a:	5c9b      	ldrb	r3, [r3, r2]
 800b16c:	3b30      	subs	r3, #48	; 0x30
 800b16e:	461c      	mov	r4, r3
 800b170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b174:	4618      	mov	r0, r3
 800b176:	f7f5 f9ed 	bl	8000554 <__aeabi_i2d>
 800b17a:	4602      	mov	r2, r0
 800b17c:	460b      	mov	r3, r1
 800b17e:	ec43 2b11 	vmov	d1, r2, r3
 800b182:	ed9f 0b5d 	vldr	d0, [pc, #372]	; 800b2f8 <GPS_GPVTG_Parse+0x380>
 800b186:	f002 ff31 	bl	800dfec <pow>
 800b18a:	ec53 2b10 	vmov	r2, r3, d0
 800b18e:	4610      	mov	r0, r2
 800b190:	4619      	mov	r1, r3
 800b192:	f7f5 fcf9 	bl	8000b88 <__aeabi_d2uiz>
 800b196:	4603      	mov	r3, r0
 800b198:	fb03 f204 	mul.w	r2, r3, r4
 800b19c:	4b5a      	ldr	r3, [pc, #360]	; (800b308 <GPS_GPVTG_Parse+0x390>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	ed93 7a08 	vldr	s14, [r3, #32]
 800b1a4:	ee07 2a90 	vmov	s15, r2
 800b1a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1ac:	4b56      	ldr	r3, [pc, #344]	; (800b308 <GPS_GPVTG_Parse+0x390>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b1b4:	edc3 7a08 	vstr	s15, [r3, #32]
		for(;counter >= 0; counter--)
 800b1b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b1bc:	b2db      	uxtb	r3, r3
 800b1be:	3b01      	subs	r3, #1
 800b1c0:	b2db      	uxtb	r3, r3
 800b1c2:	71fb      	strb	r3, [r7, #7]
 800b1c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	dabf      	bge.n	800b14c <GPS_GPVTG_Parse+0x1d4>
		}
		ringBuff.tail = tailValue2;
 800b1cc:	4a4c      	ldr	r2, [pc, #304]	; (800b300 <GPS_GPVTG_Parse+0x388>)
 800b1ce:	797b      	ldrb	r3, [r7, #5]
 800b1d0:	f882 30fa 	strb.w	r3, [r2, #250]	; 0xfa

		_gps->speed += (TAIL_READ_P - ASCII_NUMBER) / 10.0 + (TAIL_READ_P - ASCII_NUMBER) / 100.0 + (TAIL_READ_P - ASCII_NUMBER) / 1000.0;
 800b1d4:	4b4a      	ldr	r3, [pc, #296]	; (800b300 <GPS_GPVTG_Parse+0x388>)
 800b1d6:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800b1da:	b2db      	uxtb	r3, r3
 800b1dc:	1c5a      	adds	r2, r3, #1
 800b1de:	b2d1      	uxtb	r1, r2
 800b1e0:	4a47      	ldr	r2, [pc, #284]	; (800b300 <GPS_GPVTG_Parse+0x388>)
 800b1e2:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800b1e6:	4a47      	ldr	r2, [pc, #284]	; (800b304 <GPS_GPVTG_Parse+0x38c>)
 800b1e8:	fba2 1203 	umull	r1, r2, r2, r3
 800b1ec:	0912      	lsrs	r2, r2, #4
 800b1ee:	21fa      	movs	r1, #250	; 0xfa
 800b1f0:	fb01 f202 	mul.w	r2, r1, r2
 800b1f4:	1a9b      	subs	r3, r3, r2
 800b1f6:	b2db      	uxtb	r3, r3
 800b1f8:	461a      	mov	r2, r3
 800b1fa:	4b41      	ldr	r3, [pc, #260]	; (800b300 <GPS_GPVTG_Parse+0x388>)
 800b1fc:	5c9b      	ldrb	r3, [r3, r2]
 800b1fe:	3b30      	subs	r3, #48	; 0x30
 800b200:	4618      	mov	r0, r3
 800b202:	f7f5 f9a7 	bl	8000554 <__aeabi_i2d>
 800b206:	f04f 0200 	mov.w	r2, #0
 800b20a:	4b40      	ldr	r3, [pc, #256]	; (800b30c <GPS_GPVTG_Parse+0x394>)
 800b20c:	f7f5 fb36 	bl	800087c <__aeabi_ddiv>
 800b210:	4602      	mov	r2, r0
 800b212:	460b      	mov	r3, r1
 800b214:	4614      	mov	r4, r2
 800b216:	461d      	mov	r5, r3
 800b218:	4b39      	ldr	r3, [pc, #228]	; (800b300 <GPS_GPVTG_Parse+0x388>)
 800b21a:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800b21e:	b2db      	uxtb	r3, r3
 800b220:	1c5a      	adds	r2, r3, #1
 800b222:	b2d1      	uxtb	r1, r2
 800b224:	4a36      	ldr	r2, [pc, #216]	; (800b300 <GPS_GPVTG_Parse+0x388>)
 800b226:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800b22a:	4a36      	ldr	r2, [pc, #216]	; (800b304 <GPS_GPVTG_Parse+0x38c>)
 800b22c:	fba2 1203 	umull	r1, r2, r2, r3
 800b230:	0912      	lsrs	r2, r2, #4
 800b232:	21fa      	movs	r1, #250	; 0xfa
 800b234:	fb01 f202 	mul.w	r2, r1, r2
 800b238:	1a9b      	subs	r3, r3, r2
 800b23a:	b2db      	uxtb	r3, r3
 800b23c:	461a      	mov	r2, r3
 800b23e:	4b30      	ldr	r3, [pc, #192]	; (800b300 <GPS_GPVTG_Parse+0x388>)
 800b240:	5c9b      	ldrb	r3, [r3, r2]
 800b242:	3b30      	subs	r3, #48	; 0x30
 800b244:	4618      	mov	r0, r3
 800b246:	f7f5 f985 	bl	8000554 <__aeabi_i2d>
 800b24a:	f04f 0200 	mov.w	r2, #0
 800b24e:	4b30      	ldr	r3, [pc, #192]	; (800b310 <GPS_GPVTG_Parse+0x398>)
 800b250:	f7f5 fb14 	bl	800087c <__aeabi_ddiv>
 800b254:	4602      	mov	r2, r0
 800b256:	460b      	mov	r3, r1
 800b258:	4620      	mov	r0, r4
 800b25a:	4629      	mov	r1, r5
 800b25c:	f7f5 f82e 	bl	80002bc <__adddf3>
 800b260:	4602      	mov	r2, r0
 800b262:	460b      	mov	r3, r1
 800b264:	4614      	mov	r4, r2
 800b266:	461d      	mov	r5, r3
 800b268:	4b25      	ldr	r3, [pc, #148]	; (800b300 <GPS_GPVTG_Parse+0x388>)
 800b26a:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800b26e:	b2db      	uxtb	r3, r3
 800b270:	1c5a      	adds	r2, r3, #1
 800b272:	b2d1      	uxtb	r1, r2
 800b274:	4a22      	ldr	r2, [pc, #136]	; (800b300 <GPS_GPVTG_Parse+0x388>)
 800b276:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800b27a:	4a22      	ldr	r2, [pc, #136]	; (800b304 <GPS_GPVTG_Parse+0x38c>)
 800b27c:	fba2 1203 	umull	r1, r2, r2, r3
 800b280:	0912      	lsrs	r2, r2, #4
 800b282:	21fa      	movs	r1, #250	; 0xfa
 800b284:	fb01 f202 	mul.w	r2, r1, r2
 800b288:	1a9b      	subs	r3, r3, r2
 800b28a:	b2db      	uxtb	r3, r3
 800b28c:	461a      	mov	r2, r3
 800b28e:	4b1c      	ldr	r3, [pc, #112]	; (800b300 <GPS_GPVTG_Parse+0x388>)
 800b290:	5c9b      	ldrb	r3, [r3, r2]
 800b292:	3b30      	subs	r3, #48	; 0x30
 800b294:	4618      	mov	r0, r3
 800b296:	f7f5 f95d 	bl	8000554 <__aeabi_i2d>
 800b29a:	f04f 0200 	mov.w	r2, #0
 800b29e:	4b1d      	ldr	r3, [pc, #116]	; (800b314 <GPS_GPVTG_Parse+0x39c>)
 800b2a0:	f7f5 faec 	bl	800087c <__aeabi_ddiv>
 800b2a4:	4602      	mov	r2, r0
 800b2a6:	460b      	mov	r3, r1
 800b2a8:	4620      	mov	r0, r4
 800b2aa:	4629      	mov	r1, r5
 800b2ac:	f7f5 f806 	bl	80002bc <__adddf3>
 800b2b0:	4602      	mov	r2, r0
 800b2b2:	460b      	mov	r3, r1
 800b2b4:	4614      	mov	r4, r2
 800b2b6:	461d      	mov	r5, r3
 800b2b8:	4b13      	ldr	r3, [pc, #76]	; (800b308 <GPS_GPVTG_Parse+0x390>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	6a1b      	ldr	r3, [r3, #32]
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f7f5 f95a 	bl	8000578 <__aeabi_f2d>
 800b2c4:	4602      	mov	r2, r0
 800b2c6:	460b      	mov	r3, r1
 800b2c8:	4620      	mov	r0, r4
 800b2ca:	4629      	mov	r1, r5
 800b2cc:	f7f4 fff6 	bl	80002bc <__adddf3>
 800b2d0:	4602      	mov	r2, r0
 800b2d2:	460b      	mov	r3, r1
 800b2d4:	490c      	ldr	r1, [pc, #48]	; (800b308 <GPS_GPVTG_Parse+0x390>)
 800b2d6:	680c      	ldr	r4, [r1, #0]
 800b2d8:	4610      	mov	r0, r2
 800b2da:	4619      	mov	r1, r3
 800b2dc:	f7f5 fc74 	bl	8000bc8 <__aeabi_d2f>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	6223      	str	r3, [r4, #32]

		return _gps->gpsState;
 800b2e4:	4b08      	ldr	r3, [pc, #32]	; (800b308 <GPS_GPVTG_Parse+0x390>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	}
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	3708      	adds	r7, #8
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bdb0      	pop	{r4, r5, r7, pc}
 800b2f4:	f3af 8000 	nop.w
 800b2f8:	00000000 	.word	0x00000000
 800b2fc:	40240000 	.word	0x40240000
 800b300:	20004e20 	.word	0x20004e20
 800b304:	10624dd3 	.word	0x10624dd3
 800b308:	20004f20 	.word	0x20004f20
 800b30c:	40240000 	.word	0x40240000
 800b310:	40590000 	.word	0x40590000
 800b314:	408f4000 	.word	0x408f4000

0800b318 <GPS_CheckSumControl>:

/*
 * tüm değerleri XOR işlemine tabi tutarak bir checksum değeri üretir
 */
uint8_t GPS_CheckSumControl(uint8_t *ptr)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b086      	sub	sp, #24
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
	int i = 0;
 800b320:	2300      	movs	r3, #0
 800b322:	617b      	str	r3, [r7, #20]
	int check = 0;
 800b324:	2300      	movs	r3, #0
 800b326:	613b      	str	r3, [r7, #16]
	char checHexa[5];

	while(ptr[i] != '*')
 800b328:	e00a      	b.n	800b340 <GPS_CheckSumControl+0x28>
	{
		check ^= ptr[i++];
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	1c5a      	adds	r2, r3, #1
 800b32e:	617a      	str	r2, [r7, #20]
 800b330:	461a      	mov	r2, r3
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	4413      	add	r3, r2
 800b336:	781b      	ldrb	r3, [r3, #0]
 800b338:	461a      	mov	r2, r3
 800b33a:	693b      	ldr	r3, [r7, #16]
 800b33c:	4053      	eors	r3, r2
 800b33e:	613b      	str	r3, [r7, #16]
	while(ptr[i] != '*')
 800b340:	697b      	ldr	r3, [r7, #20]
 800b342:	687a      	ldr	r2, [r7, #4]
 800b344:	4413      	add	r3, r2
 800b346:	781b      	ldrb	r3, [r3, #0]
 800b348:	2b2a      	cmp	r3, #42	; 0x2a
 800b34a:	d1ee      	bne.n	800b32a <GPS_CheckSumControl+0x12>
	}
	sprintf(checHexa,"%x",check);
 800b34c:	f107 0308 	add.w	r3, r7, #8
 800b350:	693a      	ldr	r2, [r7, #16]
 800b352:	490d      	ldr	r1, [pc, #52]	; (800b388 <GPS_CheckSumControl+0x70>)
 800b354:	4618      	mov	r0, r3
 800b356:	f002 f93b 	bl	800d5d0 <siprintf>
	return !strncmp((char*)&ptr[++i], checHexa,2);
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	3301      	adds	r3, #1
 800b35e:	617b      	str	r3, [r7, #20]
 800b360:	697b      	ldr	r3, [r7, #20]
 800b362:	687a      	ldr	r2, [r7, #4]
 800b364:	4413      	add	r3, r2
 800b366:	f107 0108 	add.w	r1, r7, #8
 800b36a:	2202      	movs	r2, #2
 800b36c:	4618      	mov	r0, r3
 800b36e:	f002 f957 	bl	800d620 <strncmp>
 800b372:	4603      	mov	r3, r0
 800b374:	2b00      	cmp	r3, #0
 800b376:	bf0c      	ite	eq
 800b378:	2301      	moveq	r3, #1
 800b37a:	2300      	movne	r3, #0
 800b37c:	b2db      	uxtb	r3, r3
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3718      	adds	r7, #24
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}
 800b386:	bf00      	nop
 800b388:	0800f380 	.word	0x0800f380

0800b38c <UGV_motorInit>:
/**
 * @brief initialize the timer pwm setting to driver the motor
 * @return none
 */
void UGV_motorInit()
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	af00      	add	r7, sp, #0
	RCFilter_Init(&rcFilterForward, 0.05f, 0.05f);
 800b390:	eddf 0a20 	vldr	s1, [pc, #128]	; 800b414 <UGV_motorInit+0x88>
 800b394:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 800b414 <UGV_motorInit+0x88>
 800b398:	481f      	ldr	r0, [pc, #124]	; (800b418 <UGV_motorInit+0x8c>)
 800b39a:	f001 f8db 	bl	800c554 <RCFilter_Init>
	RCFilter_Init(&rcFilterBackward, 0.05f, 0.05f);
 800b39e:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800b414 <UGV_motorInit+0x88>
 800b3a2:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 800b414 <UGV_motorInit+0x88>
 800b3a6:	481d      	ldr	r0, [pc, #116]	; (800b41c <UGV_motorInit+0x90>)
 800b3a8:	f001 f8d4 	bl	800c554 <RCFilter_Init>
	RCFilter_Init(&rcFilterRight, 0.65f, 0.65f);
 800b3ac:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800b420 <UGV_motorInit+0x94>
 800b3b0:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 800b420 <UGV_motorInit+0x94>
 800b3b4:	481b      	ldr	r0, [pc, #108]	; (800b424 <UGV_motorInit+0x98>)
 800b3b6:	f001 f8cd 	bl	800c554 <RCFilter_Init>
	RCFilter_Init(&rcFilterLeft, 0.65f, 0.65f);
 800b3ba:	eddf 0a19 	vldr	s1, [pc, #100]	; 800b420 <UGV_motorInit+0x94>
 800b3be:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800b420 <UGV_motorInit+0x94>
 800b3c2:	4819      	ldr	r0, [pc, #100]	; (800b428 <UGV_motorInit+0x9c>)
 800b3c4:	f001 f8c6 	bl	800c554 <RCFilter_Init>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800b3c8:	2100      	movs	r1, #0
 800b3ca:	4818      	ldr	r0, [pc, #96]	; (800b42c <UGV_motorInit+0xa0>)
 800b3cc:	f7f9 ffae 	bl	800532c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800b3d0:	2104      	movs	r1, #4
 800b3d2:	4816      	ldr	r0, [pc, #88]	; (800b42c <UGV_motorInit+0xa0>)
 800b3d4:	f7f9 ffaa 	bl	800532c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800b3d8:	2100      	movs	r1, #0
 800b3da:	4815      	ldr	r0, [pc, #84]	; (800b430 <UGV_motorInit+0xa4>)
 800b3dc:	f7f9 ffa6 	bl	800532c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800b3e0:	2100      	movs	r1, #0
 800b3e2:	4814      	ldr	r0, [pc, #80]	; (800b434 <UGV_motorInit+0xa8>)
 800b3e4:	f7f9 ffa2 	bl	800532c <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800b3e8:	4b10      	ldr	r3, [pc, #64]	; (800b42c <UGV_motorInit+0xa0>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 800b3f0:	4b0e      	ldr	r3, [pc, #56]	; (800b42c <UGV_motorInit+0xa0>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800b3f8:	4b0d      	ldr	r3, [pc, #52]	; (800b430 <UGV_motorInit+0xa4>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 800b400:	4b0c      	ldr	r3, [pc, #48]	; (800b434 <UGV_motorInit+0xa8>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	2200      	movs	r2, #0
 800b406:	635a      	str	r2, [r3, #52]	; 0x34

    PIDController_Init(&pid);
 800b408:	480b      	ldr	r0, [pc, #44]	; (800b438 <UGV_motorInit+0xac>)
 800b40a:	f000 fc65 	bl	800bcd8 <PIDController_Init>
}
 800b40e:	bf00      	nop
 800b410:	bd80      	pop	{r7, pc}
 800b412:	bf00      	nop
 800b414:	3d4ccccd 	.word	0x3d4ccccd
 800b418:	20004f2c 	.word	0x20004f2c
 800b41c:	20004f3c 	.word	0x20004f3c
 800b420:	3f266666 	.word	0x3f266666
 800b424:	20004f4c 	.word	0x20004f4c
 800b428:	20004f5c 	.word	0x20004f5c
 800b42c:	2000021c 	.word	0x2000021c
 800b430:	200002ac 	.word	0x200002ac
 800b434:	200002f4 	.word	0x200002f4
 800b438:	20000010 	.word	0x20000010

0800b43c <UGV_motorDrive>:
 * @brief read the channel's adc values and call the neaded functions
 * @param[in] rcChannel global variable
 * @return none
 */
void UGV_motorDrive(RcChannel * rcChannel, float azimuthAngle)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b082      	sub	sp, #8
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
 800b444:	ed87 0a00 	vstr	s0, [r7]
	//!< rc transmitter lock
	if(startFlag == 0)
 800b448:	4b18      	ldr	r3, [pc, #96]	; (800b4ac <UGV_motorDrive+0x70>)
 800b44a:	781b      	ldrb	r3, [r3, #0]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d11a      	bne.n	800b486 <UGV_motorDrive+0x4a>
	{
		if((rcChannel->channel2<=(CHANNEL_DOWN + CHANNEL_ERROR)) && (rcChannel->channel1>=(CHANNEL_UP - CHANNEL_ERROR)))
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	885b      	ldrh	r3, [r3, #2]
 800b454:	f5b3 6f93 	cmp.w	r3, #1176	; 0x498
 800b458:	d215      	bcs.n	800b486 <UGV_motorDrive+0x4a>
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	881b      	ldrh	r3, [r3, #0]
 800b45e:	f240 7252 	movw	r2, #1874	; 0x752
 800b462:	4293      	cmp	r3, r2
 800b464:	d90f      	bls.n	800b486 <UGV_motorDrive+0x4a>
		{
			while(!((rcChannel->channel1>=CHANNEL_MIDDLE) && (rcChannel->channel2>=CHANNEL_MIDDLE)));
 800b466:	bf00      	nop
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	881b      	ldrh	r3, [r3, #0]
 800b46c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800b470:	4293      	cmp	r3, r2
 800b472:	d9f9      	bls.n	800b468 <UGV_motorDrive+0x2c>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	885b      	ldrh	r3, [r3, #2]
 800b478:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800b47c:	4293      	cmp	r3, r2
 800b47e:	d9f3      	bls.n	800b468 <UGV_motorDrive+0x2c>
			startFlag = 1;
 800b480:	4b0a      	ldr	r3, [pc, #40]	; (800b4ac <UGV_motorDrive+0x70>)
 800b482:	2201      	movs	r2, #1
 800b484:	701a      	strb	r2, [r3, #0]
		}
	}

	if(startFlag)
 800b486:	4b09      	ldr	r3, [pc, #36]	; (800b4ac <UGV_motorDrive+0x70>)
 800b488:	781b      	ldrb	r3, [r3, #0]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d009      	beq.n	800b4a2 <UGV_motorDrive+0x66>
//					rcChannel->channel1 = (rcChannel->channel1 < CHANNEL_DOWN) ? CHANNEL_DOWN : rcChannel->channel1;
//				}
//			}
//		}

		motorUpDown(rcChannel->channel2);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	885b      	ldrh	r3, [r3, #2]
 800b492:	4618      	mov	r0, r3
 800b494:	f000 f80c 	bl	800b4b0 <motorUpDown>
		motorRightLeft(rcChannel->channel1);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	881b      	ldrh	r3, [r3, #0]
 800b49c:	4618      	mov	r0, r3
 800b49e:	f000 f8fd 	bl	800b69c <motorRightLeft>
	}
}
 800b4a2:	bf00      	nop
 800b4a4:	3708      	adds	r7, #8
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd80      	pop	{r7, pc}
 800b4aa:	bf00      	nop
 800b4ac:	20004f28 	.word	0x20004f28

0800b4b0 <motorUpDown>:
 * @brief control the motor forward and backward
 * @param[in] read the channel2 adc value
 * @return none
 */
static void motorUpDown(uint16_t adcVal)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b084      	sub	sp, #16
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	80fb      	strh	r3, [r7, #6]
	float pwmDuty;

	if(adcVal > (CHANNEL_MIDDLE + CHANNEL_ERROR))
 800b4ba:	88fb      	ldrh	r3, [r7, #6]
 800b4bc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b4c0:	d954      	bls.n	800b56c <motorUpDown+0xbc>
	{
		//clear the backward motor's pwm
		RIGHT_MOTOR_BACKWARD(0);
 800b4c2:	4b6c      	ldr	r3, [pc, #432]	; (800b674 <motorUpDown+0x1c4>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	639a      	str	r2, [r3, #56]	; 0x38
		LEFT_MOTOR_BACKWARD(0);
 800b4ca:	4b6b      	ldr	r3, [pc, #428]	; (800b678 <motorUpDown+0x1c8>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	635a      	str	r2, [r3, #52]	; 0x34

		// if channel value between 1600 - 1950, pwmDuty can be 0-350
		pwmDuty = adcVal - (CHANNEL_MIDDLE + CHANNEL_ERROR);
 800b4d2:	88fb      	ldrh	r3, [r7, #6]
 800b4d4:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 800b4d8:	ee07 3a90 	vmov	s15, r3
 800b4dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b4e0:	edc7 7a03 	vstr	s15, [r7, #12]

		//set the duty map 0-100
		pwmDuty = ((pwmDuty / CHANNEL_RANGE) * 100.0f);
 800b4e4:	ed97 7a03 	vldr	s14, [r7, #12]
 800b4e8:	eddf 6a64 	vldr	s13, [pc, #400]	; 800b67c <motorUpDown+0x1cc>
 800b4ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b4f0:	ed9f 7a63 	vldr	s14, [pc, #396]	; 800b680 <motorUpDown+0x1d0>
 800b4f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b4f8:	edc7 7a03 	vstr	s15, [r7, #12]
		//limit the duty to 100
		pwmDuty = (pwmDuty > 100)? 100 : pwmDuty;
 800b4fc:	edd7 7a03 	vldr	s15, [r7, #12]
 800b500:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800b680 <motorUpDown+0x1d0>
 800b504:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b50c:	dd01      	ble.n	800b512 <motorUpDown+0x62>
 800b50e:	4b5d      	ldr	r3, [pc, #372]	; (800b684 <motorUpDown+0x1d4>)
 800b510:	e000      	b.n	800b514 <motorUpDown+0x64>
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	60fb      	str	r3, [r7, #12]

		//rc filter	pwm duty range 0-100
		pwmDuty = RCFilter_Update(&rcFilterForward, pwmDuty);
 800b516:	ed97 0a03 	vldr	s0, [r7, #12]
 800b51a:	485b      	ldr	r0, [pc, #364]	; (800b688 <motorUpDown+0x1d8>)
 800b51c:	f001 f858 	bl	800c5d0 <RCFilter_Update>
 800b520:	ed87 0a03 	vstr	s0, [r7, #12]

		RIGHT_MOTOR_FORWARD((uint8_t)pwmDuty);
 800b524:	edd7 7a03 	vldr	s15, [r7, #12]
 800b528:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b52c:	edc7 7a00 	vstr	s15, [r7]
 800b530:	783b      	ldrb	r3, [r7, #0]
 800b532:	b2da      	uxtb	r2, r3
 800b534:	4b4f      	ldr	r3, [pc, #316]	; (800b674 <motorUpDown+0x1c4>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	635a      	str	r2, [r3, #52]	; 0x34
		LEFT_MOTOR_FORWARD((uint8_t)pwmDuty);
 800b53a:	edd7 7a03 	vldr	s15, [r7, #12]
 800b53e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b542:	edc7 7a00 	vstr	s15, [r7]
 800b546:	783b      	ldrb	r3, [r7, #0]
 800b548:	b2da      	uxtb	r2, r3
 800b54a:	4b50      	ldr	r3, [pc, #320]	; (800b68c <motorUpDown+0x1dc>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	635a      	str	r2, [r3, #52]	; 0x34

		motorInf.direction = FORWARD;
 800b550:	4b4f      	ldr	r3, [pc, #316]	; (800b690 <motorUpDown+0x1e0>)
 800b552:	2200      	movs	r2, #0
 800b554:	701a      	strb	r2, [r3, #0]
		motorInf.forwardPwm = pwmDuty;
 800b556:	edd7 7a03 	vldr	s15, [r7, #12]
 800b55a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b55e:	edc7 7a00 	vstr	s15, [r7]
 800b562:	783b      	ldrb	r3, [r7, #0]
 800b564:	b2da      	uxtb	r2, r3
 800b566:	4b4a      	ldr	r3, [pc, #296]	; (800b690 <motorUpDown+0x1e0>)
 800b568:	705a      	strb	r2, [r3, #1]
		LEFT_MOTOR_BACKWARD((uint8_t)pwmDuty);

		motorInf.direction = BACKWARD;
		motorInf.forwardPwm = pwmDuty;
	}
}
 800b56a:	e07e      	b.n	800b66a <motorUpDown+0x1ba>
	else if((adcVal < (CHANNEL_MIDDLE + CHANNEL_ERROR)) && (adcVal > (CHANNEL_MIDDLE - CHANNEL_ERROR)))
 800b56c:	88fb      	ldrh	r3, [r7, #6]
 800b56e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b572:	d225      	bcs.n	800b5c0 <motorUpDown+0x110>
 800b574:	88fb      	ldrh	r3, [r7, #6]
 800b576:	f240 52aa 	movw	r2, #1450	; 0x5aa
 800b57a:	4293      	cmp	r3, r2
 800b57c:	d920      	bls.n	800b5c0 <motorUpDown+0x110>
		RIGHT_MOTOR_FORWARD(0);
 800b57e:	4b3d      	ldr	r3, [pc, #244]	; (800b674 <motorUpDown+0x1c4>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	2200      	movs	r2, #0
 800b584:	635a      	str	r2, [r3, #52]	; 0x34
		LEFT_MOTOR_FORWARD(0);
 800b586:	4b41      	ldr	r3, [pc, #260]	; (800b68c <motorUpDown+0x1dc>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	2200      	movs	r2, #0
 800b58c:	635a      	str	r2, [r3, #52]	; 0x34
		RIGHT_MOTOR_BACKWARD(0);
 800b58e:	4b39      	ldr	r3, [pc, #228]	; (800b674 <motorUpDown+0x1c4>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	2200      	movs	r2, #0
 800b594:	639a      	str	r2, [r3, #56]	; 0x38
		LEFT_MOTOR_BACKWARD(0);
 800b596:	4b38      	ldr	r3, [pc, #224]	; (800b678 <motorUpDown+0x1c8>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	2200      	movs	r2, #0
 800b59c:	635a      	str	r2, [r3, #52]	; 0x34
		RCFilter_Update(&rcFilterForward, 0);
 800b59e:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 800b694 <motorUpDown+0x1e4>
 800b5a2:	4839      	ldr	r0, [pc, #228]	; (800b688 <motorUpDown+0x1d8>)
 800b5a4:	f001 f814 	bl	800c5d0 <RCFilter_Update>
		RCFilter_Update(&rcFilterBackward, 0);
 800b5a8:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 800b694 <motorUpDown+0x1e4>
 800b5ac:	483a      	ldr	r0, [pc, #232]	; (800b698 <motorUpDown+0x1e8>)
 800b5ae:	f001 f80f 	bl	800c5d0 <RCFilter_Update>
		motorInf.direction = IDLE;
 800b5b2:	4b37      	ldr	r3, [pc, #220]	; (800b690 <motorUpDown+0x1e0>)
 800b5b4:	2201      	movs	r2, #1
 800b5b6:	701a      	strb	r2, [r3, #0]
		motorInf.forwardPwm = 0;
 800b5b8:	4b35      	ldr	r3, [pc, #212]	; (800b690 <motorUpDown+0x1e0>)
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	705a      	strb	r2, [r3, #1]
}
 800b5be:	e054      	b.n	800b66a <motorUpDown+0x1ba>
		RIGHT_MOTOR_FORWARD(0);
 800b5c0:	4b2c      	ldr	r3, [pc, #176]	; (800b674 <motorUpDown+0x1c4>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	635a      	str	r2, [r3, #52]	; 0x34
		LEFT_MOTOR_FORWARD(0);
 800b5c8:	4b30      	ldr	r3, [pc, #192]	; (800b68c <motorUpDown+0x1dc>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	635a      	str	r2, [r3, #52]	; 0x34
		pwmDuty = (CHANNEL_MIDDLE - CHANNEL_ERROR) - adcVal;
 800b5d0:	88fb      	ldrh	r3, [r7, #6]
 800b5d2:	f5c3 63b5 	rsb	r3, r3, #1448	; 0x5a8
 800b5d6:	3302      	adds	r3, #2
 800b5d8:	ee07 3a90 	vmov	s15, r3
 800b5dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b5e0:	edc7 7a03 	vstr	s15, [r7, #12]
		pwmDuty = ((pwmDuty / CHANNEL_RANGE) * 100.0f);
 800b5e4:	ed97 7a03 	vldr	s14, [r7, #12]
 800b5e8:	eddf 6a24 	vldr	s13, [pc, #144]	; 800b67c <motorUpDown+0x1cc>
 800b5ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b5f0:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800b680 <motorUpDown+0x1d0>
 800b5f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b5f8:	edc7 7a03 	vstr	s15, [r7, #12]
		pwmDuty = (pwmDuty > 100)? 100 : pwmDuty;
 800b5fc:	edd7 7a03 	vldr	s15, [r7, #12]
 800b600:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800b680 <motorUpDown+0x1d0>
 800b604:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b60c:	dd01      	ble.n	800b612 <motorUpDown+0x162>
 800b60e:	4b1d      	ldr	r3, [pc, #116]	; (800b684 <motorUpDown+0x1d4>)
 800b610:	e000      	b.n	800b614 <motorUpDown+0x164>
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	60fb      	str	r3, [r7, #12]
		pwmDuty = RCFilter_Update(&rcFilterBackward, pwmDuty);
 800b616:	ed97 0a03 	vldr	s0, [r7, #12]
 800b61a:	481f      	ldr	r0, [pc, #124]	; (800b698 <motorUpDown+0x1e8>)
 800b61c:	f000 ffd8 	bl	800c5d0 <RCFilter_Update>
 800b620:	ed87 0a03 	vstr	s0, [r7, #12]
		RIGHT_MOTOR_BACKWARD((uint8_t)pwmDuty);
 800b624:	edd7 7a03 	vldr	s15, [r7, #12]
 800b628:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b62c:	edc7 7a00 	vstr	s15, [r7]
 800b630:	783b      	ldrb	r3, [r7, #0]
 800b632:	b2da      	uxtb	r2, r3
 800b634:	4b0f      	ldr	r3, [pc, #60]	; (800b674 <motorUpDown+0x1c4>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	639a      	str	r2, [r3, #56]	; 0x38
		LEFT_MOTOR_BACKWARD((uint8_t)pwmDuty);
 800b63a:	edd7 7a03 	vldr	s15, [r7, #12]
 800b63e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b642:	edc7 7a00 	vstr	s15, [r7]
 800b646:	783b      	ldrb	r3, [r7, #0]
 800b648:	b2da      	uxtb	r2, r3
 800b64a:	4b0b      	ldr	r3, [pc, #44]	; (800b678 <motorUpDown+0x1c8>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	635a      	str	r2, [r3, #52]	; 0x34
		motorInf.direction = BACKWARD;
 800b650:	4b0f      	ldr	r3, [pc, #60]	; (800b690 <motorUpDown+0x1e0>)
 800b652:	2202      	movs	r2, #2
 800b654:	701a      	strb	r2, [r3, #0]
		motorInf.forwardPwm = pwmDuty;
 800b656:	edd7 7a03 	vldr	s15, [r7, #12]
 800b65a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b65e:	edc7 7a00 	vstr	s15, [r7]
 800b662:	783b      	ldrb	r3, [r7, #0]
 800b664:	b2da      	uxtb	r2, r3
 800b666:	4b0a      	ldr	r3, [pc, #40]	; (800b690 <motorUpDown+0x1e0>)
 800b668:	705a      	strb	r2, [r3, #1]
}
 800b66a:	bf00      	nop
 800b66c:	3710      	adds	r7, #16
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}
 800b672:	bf00      	nop
 800b674:	2000021c 	.word	0x2000021c
 800b678:	200002ac 	.word	0x200002ac
 800b67c:	43af0000 	.word	0x43af0000
 800b680:	42c80000 	.word	0x42c80000
 800b684:	42c80000 	.word	0x42c80000
 800b688:	20004f2c 	.word	0x20004f2c
 800b68c:	200002f4 	.word	0x200002f4
 800b690:	20004f6c 	.word	0x20004f6c
 800b694:	00000000 	.word	0x00000000
 800b698:	20004f3c 	.word	0x20004f3c

0800b69c <motorRightLeft>:
 * @brief control the motor right and left
 * @param[in] read the channel1 adc value
 * @return none
 */
static void motorRightLeft(uint16_t adcVal)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b086      	sub	sp, #24
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	80fb      	strh	r3, [r7, #6]
	float pwmDuty;
	float rightMotorPwm;
	float leftMotorPwm;

	if(adcVal > (CHANNEL_MIDDLE + CHANNEL_ERROR))
 800b6a6:	88fb      	ldrh	r3, [r7, #6]
 800b6a8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b6ac:	f240 8163 	bls.w	800b976 <motorRightLeft+0x2da>
	{
		if(motorInf.direction == FORWARD)
 800b6b0:	4bbb      	ldr	r3, [pc, #748]	; (800b9a0 <motorRightLeft+0x304>)
 800b6b2:	781b      	ldrb	r3, [r3, #0]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	f040 8090 	bne.w	800b7da <motorRightLeft+0x13e>
		{
			// if channel value between 1550 - 1950, pwmDuty can be 0-400
			pwmDuty = adcVal - (CHANNEL_MIDDLE + CHANNEL_ERROR);
 800b6ba:	88fb      	ldrh	r3, [r7, #6]
 800b6bc:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 800b6c0:	ee07 3a90 	vmov	s15, r3
 800b6c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b6c8:	edc7 7a05 	vstr	s15, [r7, #20]

			//set the duty map 0-100
			pwmDuty = ((pwmDuty / CHANNEL_RANGE) * 100.0f);
 800b6cc:	ed97 7a05 	vldr	s14, [r7, #20]
 800b6d0:	eddf 6ab4 	vldr	s13, [pc, #720]	; 800b9a4 <motorRightLeft+0x308>
 800b6d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b6d8:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 800b9a8 <motorRightLeft+0x30c>
 800b6dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b6e0:	edc7 7a05 	vstr	s15, [r7, #20]

			//add and sub %10 percent from the left and right motor
			leftMotorPwm = motorInf.forwardPwm + pwmDuty * 0.7f;
 800b6e4:	4bae      	ldr	r3, [pc, #696]	; (800b9a0 <motorRightLeft+0x304>)
 800b6e6:	785b      	ldrb	r3, [r3, #1]
 800b6e8:	ee07 3a90 	vmov	s15, r3
 800b6ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b6f0:	edd7 7a05 	vldr	s15, [r7, #20]
 800b6f4:	eddf 6aad 	vldr	s13, [pc, #692]	; 800b9ac <motorRightLeft+0x310>
 800b6f8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b6fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b700:	edc7 7a04 	vstr	s15, [r7, #16]
			rightMotorPwm = motorInf.forwardPwm - pwmDuty * 0.7f;
 800b704:	4ba6      	ldr	r3, [pc, #664]	; (800b9a0 <motorRightLeft+0x304>)
 800b706:	785b      	ldrb	r3, [r3, #1]
 800b708:	ee07 3a90 	vmov	s15, r3
 800b70c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b710:	edd7 7a05 	vldr	s15, [r7, #20]
 800b714:	eddf 6aa5 	vldr	s13, [pc, #660]	; 800b9ac <motorRightLeft+0x310>
 800b718:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b71c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b720:	edc7 7a03 	vstr	s15, [r7, #12]

			leftMotorPwm = (leftMotorPwm > 100) ? 100 : leftMotorPwm;
 800b724:	edd7 7a04 	vldr	s15, [r7, #16]
 800b728:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 800b9a8 <motorRightLeft+0x30c>
 800b72c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b734:	dd01      	ble.n	800b73a <motorRightLeft+0x9e>
 800b736:	4b9e      	ldr	r3, [pc, #632]	; (800b9b0 <motorRightLeft+0x314>)
 800b738:	e000      	b.n	800b73c <motorRightLeft+0xa0>
 800b73a:	693b      	ldr	r3, [r7, #16]
 800b73c:	613b      	str	r3, [r7, #16]
			leftMotorPwm = (leftMotorPwm < 0) ? 0 : leftMotorPwm;
 800b73e:	edd7 7a04 	vldr	s15, [r7, #16]
 800b742:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b74a:	d502      	bpl.n	800b752 <motorRightLeft+0xb6>
 800b74c:	f04f 0300 	mov.w	r3, #0
 800b750:	e000      	b.n	800b754 <motorRightLeft+0xb8>
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	613b      	str	r3, [r7, #16]

			rightMotorPwm = (rightMotorPwm > 100) ? 100 : rightMotorPwm;
 800b756:	edd7 7a03 	vldr	s15, [r7, #12]
 800b75a:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800b9a8 <motorRightLeft+0x30c>
 800b75e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b766:	dd01      	ble.n	800b76c <motorRightLeft+0xd0>
 800b768:	4b91      	ldr	r3, [pc, #580]	; (800b9b0 <motorRightLeft+0x314>)
 800b76a:	e000      	b.n	800b76e <motorRightLeft+0xd2>
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	60fb      	str	r3, [r7, #12]
			rightMotorPwm = (rightMotorPwm < 0) ? 0 : rightMotorPwm;
 800b770:	edd7 7a03 	vldr	s15, [r7, #12]
 800b774:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b77c:	d502      	bpl.n	800b784 <motorRightLeft+0xe8>
 800b77e:	f04f 0300 	mov.w	r3, #0
 800b782:	e000      	b.n	800b786 <motorRightLeft+0xea>
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	60fb      	str	r3, [r7, #12]

			rcFilterRight.out[0] = rcFilterForward.out[0];
 800b788:	4b8a      	ldr	r3, [pc, #552]	; (800b9b4 <motorRightLeft+0x318>)
 800b78a:	689b      	ldr	r3, [r3, #8]
 800b78c:	4a8a      	ldr	r2, [pc, #552]	; (800b9b8 <motorRightLeft+0x31c>)
 800b78e:	6093      	str	r3, [r2, #8]
			rcFilterLeft.out[0] = rcFilterForward.out[0];
 800b790:	4b88      	ldr	r3, [pc, #544]	; (800b9b4 <motorRightLeft+0x318>)
 800b792:	689b      	ldr	r3, [r3, #8]
 800b794:	4a89      	ldr	r2, [pc, #548]	; (800b9bc <motorRightLeft+0x320>)
 800b796:	6093      	str	r3, [r2, #8]

			rightMotorPwm = RCFilter_Update(&rcFilterRight, rightMotorPwm);
 800b798:	ed97 0a03 	vldr	s0, [r7, #12]
 800b79c:	4886      	ldr	r0, [pc, #536]	; (800b9b8 <motorRightLeft+0x31c>)
 800b79e:	f000 ff17 	bl	800c5d0 <RCFilter_Update>
 800b7a2:	ed87 0a03 	vstr	s0, [r7, #12]
			leftMotorPwm = RCFilter_Update(&rcFilterLeft, leftMotorPwm);
 800b7a6:	ed97 0a04 	vldr	s0, [r7, #16]
 800b7aa:	4884      	ldr	r0, [pc, #528]	; (800b9bc <motorRightLeft+0x320>)
 800b7ac:	f000 ff10 	bl	800c5d0 <RCFilter_Update>
 800b7b0:	ed87 0a04 	vstr	s0, [r7, #16]

			LEFT_MOTOR_FORWARD(leftMotorPwm);
 800b7b4:	4b82      	ldr	r3, [pc, #520]	; (800b9c0 <motorRightLeft+0x324>)
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	edd7 7a04 	vldr	s15, [r7, #16]
 800b7bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b7c0:	ee17 2a90 	vmov	r2, s15
 800b7c4:	635a      	str	r2, [r3, #52]	; 0x34
			RIGHT_MOTOR_FORWARD(rightMotorPwm);
 800b7c6:	4b7f      	ldr	r3, [pc, #508]	; (800b9c4 <motorRightLeft+0x328>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	edd7 7a03 	vldr	s15, [r7, #12]
 800b7ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b7d2:	ee17 2a90 	vmov	r2, s15
 800b7d6:	635a      	str	r2, [r3, #52]	; 0x34
			LEFT_MOTOR_BACKWARD(leftMotorPwm);
			RIGHT_MOTOR_BACKWARD(rightMotorPwm);
		}
	}

}
 800b7d8:	e261      	b.n	800bc9e <motorRightLeft+0x602>
		else if(motorInf.direction == IDLE)
 800b7da:	4b71      	ldr	r3, [pc, #452]	; (800b9a0 <motorRightLeft+0x304>)
 800b7dc:	781b      	ldrb	r3, [r3, #0]
 800b7de:	2b01      	cmp	r3, #1
 800b7e0:	d139      	bne.n	800b856 <motorRightLeft+0x1ba>
			pwmDuty = adcVal - (CHANNEL_MIDDLE + CHANNEL_ERROR);
 800b7e2:	88fb      	ldrh	r3, [r7, #6]
 800b7e4:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 800b7e8:	ee07 3a90 	vmov	s15, r3
 800b7ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b7f0:	edc7 7a05 	vstr	s15, [r7, #20]
			pwmDuty = ((pwmDuty / CHANNEL_RANGE) * 90.0f);
 800b7f4:	ed97 7a05 	vldr	s14, [r7, #20]
 800b7f8:	eddf 6a6a 	vldr	s13, [pc, #424]	; 800b9a4 <motorRightLeft+0x308>
 800b7fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b800:	ed9f 7a71 	vldr	s14, [pc, #452]	; 800b9c8 <motorRightLeft+0x32c>
 800b804:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b808:	edc7 7a05 	vstr	s15, [r7, #20]
			leftMotorPwm = pwmDuty;
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	613b      	str	r3, [r7, #16]
			rightMotorPwm = pwmDuty;
 800b810:	697b      	ldr	r3, [r7, #20]
 800b812:	60fb      	str	r3, [r7, #12]
			rightMotorPwm = RCFilter_Update(&rcFilterRight, rightMotorPwm);
 800b814:	ed97 0a03 	vldr	s0, [r7, #12]
 800b818:	4867      	ldr	r0, [pc, #412]	; (800b9b8 <motorRightLeft+0x31c>)
 800b81a:	f000 fed9 	bl	800c5d0 <RCFilter_Update>
 800b81e:	ed87 0a03 	vstr	s0, [r7, #12]
			leftMotorPwm = RCFilter_Update(&rcFilterLeft, leftMotorPwm);
 800b822:	ed97 0a04 	vldr	s0, [r7, #16]
 800b826:	4865      	ldr	r0, [pc, #404]	; (800b9bc <motorRightLeft+0x320>)
 800b828:	f000 fed2 	bl	800c5d0 <RCFilter_Update>
 800b82c:	ed87 0a04 	vstr	s0, [r7, #16]
			LEFT_MOTOR_FORWARD(leftMotorPwm);
 800b830:	4b63      	ldr	r3, [pc, #396]	; (800b9c0 <motorRightLeft+0x324>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	edd7 7a04 	vldr	s15, [r7, #16]
 800b838:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b83c:	ee17 2a90 	vmov	r2, s15
 800b840:	635a      	str	r2, [r3, #52]	; 0x34
			RIGHT_MOTOR_BACKWARD(rightMotorPwm);
 800b842:	4b60      	ldr	r3, [pc, #384]	; (800b9c4 <motorRightLeft+0x328>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	edd7 7a03 	vldr	s15, [r7, #12]
 800b84a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b84e:	ee17 2a90 	vmov	r2, s15
 800b852:	639a      	str	r2, [r3, #56]	; 0x38
}
 800b854:	e223      	b.n	800bc9e <motorRightLeft+0x602>
			pwmDuty = adcVal - (CHANNEL_MIDDLE + CHANNEL_ERROR);
 800b856:	88fb      	ldrh	r3, [r7, #6]
 800b858:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 800b85c:	ee07 3a90 	vmov	s15, r3
 800b860:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b864:	edc7 7a05 	vstr	s15, [r7, #20]
			pwmDuty = ((pwmDuty / CHANNEL_RANGE) * 100.0f);
 800b868:	ed97 7a05 	vldr	s14, [r7, #20]
 800b86c:	eddf 6a4d 	vldr	s13, [pc, #308]	; 800b9a4 <motorRightLeft+0x308>
 800b870:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b874:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800b9a8 <motorRightLeft+0x30c>
 800b878:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b87c:	edc7 7a05 	vstr	s15, [r7, #20]
			leftMotorPwm = motorInf.forwardPwm + pwmDuty * 0.7f;
 800b880:	4b47      	ldr	r3, [pc, #284]	; (800b9a0 <motorRightLeft+0x304>)
 800b882:	785b      	ldrb	r3, [r3, #1]
 800b884:	ee07 3a90 	vmov	s15, r3
 800b888:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b88c:	edd7 7a05 	vldr	s15, [r7, #20]
 800b890:	eddf 6a46 	vldr	s13, [pc, #280]	; 800b9ac <motorRightLeft+0x310>
 800b894:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b898:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b89c:	edc7 7a04 	vstr	s15, [r7, #16]
			rightMotorPwm = motorInf.forwardPwm - pwmDuty * 0.7f;
 800b8a0:	4b3f      	ldr	r3, [pc, #252]	; (800b9a0 <motorRightLeft+0x304>)
 800b8a2:	785b      	ldrb	r3, [r3, #1]
 800b8a4:	ee07 3a90 	vmov	s15, r3
 800b8a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b8ac:	edd7 7a05 	vldr	s15, [r7, #20]
 800b8b0:	eddf 6a3e 	vldr	s13, [pc, #248]	; 800b9ac <motorRightLeft+0x310>
 800b8b4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b8b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b8bc:	edc7 7a03 	vstr	s15, [r7, #12]
			leftMotorPwm = (leftMotorPwm > 100) ? 100 : leftMotorPwm;
 800b8c0:	edd7 7a04 	vldr	s15, [r7, #16]
 800b8c4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800b9a8 <motorRightLeft+0x30c>
 800b8c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b8cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8d0:	dd01      	ble.n	800b8d6 <motorRightLeft+0x23a>
 800b8d2:	4b37      	ldr	r3, [pc, #220]	; (800b9b0 <motorRightLeft+0x314>)
 800b8d4:	e000      	b.n	800b8d8 <motorRightLeft+0x23c>
 800b8d6:	693b      	ldr	r3, [r7, #16]
 800b8d8:	613b      	str	r3, [r7, #16]
			leftMotorPwm = (leftMotorPwm < 0) ? 0 : leftMotorPwm;
 800b8da:	edd7 7a04 	vldr	s15, [r7, #16]
 800b8de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b8e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8e6:	d502      	bpl.n	800b8ee <motorRightLeft+0x252>
 800b8e8:	f04f 0300 	mov.w	r3, #0
 800b8ec:	e000      	b.n	800b8f0 <motorRightLeft+0x254>
 800b8ee:	693b      	ldr	r3, [r7, #16]
 800b8f0:	613b      	str	r3, [r7, #16]
			rightMotorPwm = (rightMotorPwm > 100) ? 100 : rightMotorPwm;
 800b8f2:	edd7 7a03 	vldr	s15, [r7, #12]
 800b8f6:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800b9a8 <motorRightLeft+0x30c>
 800b8fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b8fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b902:	dd01      	ble.n	800b908 <motorRightLeft+0x26c>
 800b904:	4b2a      	ldr	r3, [pc, #168]	; (800b9b0 <motorRightLeft+0x314>)
 800b906:	e000      	b.n	800b90a <motorRightLeft+0x26e>
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	60fb      	str	r3, [r7, #12]
			rightMotorPwm = (rightMotorPwm < 0) ? 0 : rightMotorPwm;
 800b90c:	edd7 7a03 	vldr	s15, [r7, #12]
 800b910:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b918:	d502      	bpl.n	800b920 <motorRightLeft+0x284>
 800b91a:	f04f 0300 	mov.w	r3, #0
 800b91e:	e000      	b.n	800b922 <motorRightLeft+0x286>
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	60fb      	str	r3, [r7, #12]
			rcFilterRight.out[0] = rcFilterForward.out[0];
 800b924:	4b23      	ldr	r3, [pc, #140]	; (800b9b4 <motorRightLeft+0x318>)
 800b926:	689b      	ldr	r3, [r3, #8]
 800b928:	4a23      	ldr	r2, [pc, #140]	; (800b9b8 <motorRightLeft+0x31c>)
 800b92a:	6093      	str	r3, [r2, #8]
			rcFilterLeft.out[0] = rcFilterForward.out[0];
 800b92c:	4b21      	ldr	r3, [pc, #132]	; (800b9b4 <motorRightLeft+0x318>)
 800b92e:	689b      	ldr	r3, [r3, #8]
 800b930:	4a22      	ldr	r2, [pc, #136]	; (800b9bc <motorRightLeft+0x320>)
 800b932:	6093      	str	r3, [r2, #8]
			rightMotorPwm = RCFilter_Update(&rcFilterRight, rightMotorPwm);
 800b934:	ed97 0a03 	vldr	s0, [r7, #12]
 800b938:	481f      	ldr	r0, [pc, #124]	; (800b9b8 <motorRightLeft+0x31c>)
 800b93a:	f000 fe49 	bl	800c5d0 <RCFilter_Update>
 800b93e:	ed87 0a03 	vstr	s0, [r7, #12]
			leftMotorPwm = RCFilter_Update(&rcFilterLeft, leftMotorPwm);
 800b942:	ed97 0a04 	vldr	s0, [r7, #16]
 800b946:	481d      	ldr	r0, [pc, #116]	; (800b9bc <motorRightLeft+0x320>)
 800b948:	f000 fe42 	bl	800c5d0 <RCFilter_Update>
 800b94c:	ed87 0a04 	vstr	s0, [r7, #16]
			LEFT_MOTOR_BACKWARD(leftMotorPwm);
 800b950:	4b1e      	ldr	r3, [pc, #120]	; (800b9cc <motorRightLeft+0x330>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	edd7 7a04 	vldr	s15, [r7, #16]
 800b958:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b95c:	ee17 2a90 	vmov	r2, s15
 800b960:	635a      	str	r2, [r3, #52]	; 0x34
			RIGHT_MOTOR_BACKWARD(rightMotorPwm);
 800b962:	4b18      	ldr	r3, [pc, #96]	; (800b9c4 <motorRightLeft+0x328>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	edd7 7a03 	vldr	s15, [r7, #12]
 800b96a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b96e:	ee17 2a90 	vmov	r2, s15
 800b972:	639a      	str	r2, [r3, #56]	; 0x38
}
 800b974:	e193      	b.n	800bc9e <motorRightLeft+0x602>
	else if((adcVal < (CHANNEL_MIDDLE + CHANNEL_ERROR)) && (adcVal > (CHANNEL_MIDDLE - CHANNEL_ERROR)))
 800b976:	88fb      	ldrh	r3, [r7, #6]
 800b978:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b97c:	d22a      	bcs.n	800b9d4 <motorRightLeft+0x338>
 800b97e:	88fb      	ldrh	r3, [r7, #6]
 800b980:	f240 52aa 	movw	r2, #1450	; 0x5aa
 800b984:	4293      	cmp	r3, r2
 800b986:	d925      	bls.n	800b9d4 <motorRightLeft+0x338>
		RCFilter_Update(&rcFilterRight, 0);
 800b988:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800b9d0 <motorRightLeft+0x334>
 800b98c:	480a      	ldr	r0, [pc, #40]	; (800b9b8 <motorRightLeft+0x31c>)
 800b98e:	f000 fe1f 	bl	800c5d0 <RCFilter_Update>
		RCFilter_Update(&rcFilterLeft, 0);
 800b992:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800b9d0 <motorRightLeft+0x334>
 800b996:	4809      	ldr	r0, [pc, #36]	; (800b9bc <motorRightLeft+0x320>)
 800b998:	f000 fe1a 	bl	800c5d0 <RCFilter_Update>
}
 800b99c:	e17f      	b.n	800bc9e <motorRightLeft+0x602>
 800b99e:	bf00      	nop
 800b9a0:	20004f6c 	.word	0x20004f6c
 800b9a4:	43af0000 	.word	0x43af0000
 800b9a8:	42c80000 	.word	0x42c80000
 800b9ac:	3f333333 	.word	0x3f333333
 800b9b0:	42c80000 	.word	0x42c80000
 800b9b4:	20004f2c 	.word	0x20004f2c
 800b9b8:	20004f4c 	.word	0x20004f4c
 800b9bc:	20004f5c 	.word	0x20004f5c
 800b9c0:	200002f4 	.word	0x200002f4
 800b9c4:	2000021c 	.word	0x2000021c
 800b9c8:	42b40000 	.word	0x42b40000
 800b9cc:	200002ac 	.word	0x200002ac
 800b9d0:	00000000 	.word	0x00000000
		if(motorInf.direction == FORWARD)
 800b9d4:	4bb4      	ldr	r3, [pc, #720]	; (800bca8 <motorRightLeft+0x60c>)
 800b9d6:	781b      	ldrb	r3, [r3, #0]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	f040 8091 	bne.w	800bb00 <motorRightLeft+0x464>
			pwmDuty = (CHANNEL_MIDDLE - CHANNEL_ERROR) - adcVal;
 800b9de:	88fb      	ldrh	r3, [r7, #6]
 800b9e0:	f5c3 63b5 	rsb	r3, r3, #1448	; 0x5a8
 800b9e4:	3302      	adds	r3, #2
 800b9e6:	ee07 3a90 	vmov	s15, r3
 800b9ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b9ee:	edc7 7a05 	vstr	s15, [r7, #20]
			pwmDuty = ((pwmDuty / CHANNEL_RANGE) * 100.0f);
 800b9f2:	ed97 7a05 	vldr	s14, [r7, #20]
 800b9f6:	eddf 6aad 	vldr	s13, [pc, #692]	; 800bcac <motorRightLeft+0x610>
 800b9fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b9fe:	ed9f 7aac 	vldr	s14, [pc, #688]	; 800bcb0 <motorRightLeft+0x614>
 800ba02:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ba06:	edc7 7a05 	vstr	s15, [r7, #20]
			leftMotorPwm = motorInf.forwardPwm - pwmDuty * 0.7f;
 800ba0a:	4ba7      	ldr	r3, [pc, #668]	; (800bca8 <motorRightLeft+0x60c>)
 800ba0c:	785b      	ldrb	r3, [r3, #1]
 800ba0e:	ee07 3a90 	vmov	s15, r3
 800ba12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ba16:	edd7 7a05 	vldr	s15, [r7, #20]
 800ba1a:	eddf 6aa6 	vldr	s13, [pc, #664]	; 800bcb4 <motorRightLeft+0x618>
 800ba1e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ba22:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ba26:	edc7 7a04 	vstr	s15, [r7, #16]
			rightMotorPwm = motorInf.forwardPwm + pwmDuty * 0.7f;
 800ba2a:	4b9f      	ldr	r3, [pc, #636]	; (800bca8 <motorRightLeft+0x60c>)
 800ba2c:	785b      	ldrb	r3, [r3, #1]
 800ba2e:	ee07 3a90 	vmov	s15, r3
 800ba32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ba36:	edd7 7a05 	vldr	s15, [r7, #20]
 800ba3a:	eddf 6a9e 	vldr	s13, [pc, #632]	; 800bcb4 <motorRightLeft+0x618>
 800ba3e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ba42:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba46:	edc7 7a03 	vstr	s15, [r7, #12]
			leftMotorPwm = (leftMotorPwm > 100) ? 100 : leftMotorPwm;
 800ba4a:	edd7 7a04 	vldr	s15, [r7, #16]
 800ba4e:	ed9f 7a98 	vldr	s14, [pc, #608]	; 800bcb0 <motorRightLeft+0x614>
 800ba52:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ba56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba5a:	dd01      	ble.n	800ba60 <motorRightLeft+0x3c4>
 800ba5c:	4b96      	ldr	r3, [pc, #600]	; (800bcb8 <motorRightLeft+0x61c>)
 800ba5e:	e000      	b.n	800ba62 <motorRightLeft+0x3c6>
 800ba60:	693b      	ldr	r3, [r7, #16]
 800ba62:	613b      	str	r3, [r7, #16]
			leftMotorPwm = (leftMotorPwm < 0) ? 0 : leftMotorPwm;
 800ba64:	edd7 7a04 	vldr	s15, [r7, #16]
 800ba68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ba6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba70:	d502      	bpl.n	800ba78 <motorRightLeft+0x3dc>
 800ba72:	f04f 0300 	mov.w	r3, #0
 800ba76:	e000      	b.n	800ba7a <motorRightLeft+0x3de>
 800ba78:	693b      	ldr	r3, [r7, #16]
 800ba7a:	613b      	str	r3, [r7, #16]
			rightMotorPwm = (rightMotorPwm > 100) ? 100 : rightMotorPwm;
 800ba7c:	edd7 7a03 	vldr	s15, [r7, #12]
 800ba80:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800bcb0 <motorRightLeft+0x614>
 800ba84:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ba88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba8c:	dd01      	ble.n	800ba92 <motorRightLeft+0x3f6>
 800ba8e:	4b8a      	ldr	r3, [pc, #552]	; (800bcb8 <motorRightLeft+0x61c>)
 800ba90:	e000      	b.n	800ba94 <motorRightLeft+0x3f8>
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	60fb      	str	r3, [r7, #12]
			rightMotorPwm = (rightMotorPwm < 0) ? 0 : rightMotorPwm;
 800ba96:	edd7 7a03 	vldr	s15, [r7, #12]
 800ba9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ba9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baa2:	d502      	bpl.n	800baaa <motorRightLeft+0x40e>
 800baa4:	f04f 0300 	mov.w	r3, #0
 800baa8:	e000      	b.n	800baac <motorRightLeft+0x410>
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	60fb      	str	r3, [r7, #12]
			rcFilterRight.out[0] = rcFilterForward.out[0];
 800baae:	4b83      	ldr	r3, [pc, #524]	; (800bcbc <motorRightLeft+0x620>)
 800bab0:	689b      	ldr	r3, [r3, #8]
 800bab2:	4a83      	ldr	r2, [pc, #524]	; (800bcc0 <motorRightLeft+0x624>)
 800bab4:	6093      	str	r3, [r2, #8]
			rcFilterLeft.out[0] = rcFilterForward.out[0];
 800bab6:	4b81      	ldr	r3, [pc, #516]	; (800bcbc <motorRightLeft+0x620>)
 800bab8:	689b      	ldr	r3, [r3, #8]
 800baba:	4a82      	ldr	r2, [pc, #520]	; (800bcc4 <motorRightLeft+0x628>)
 800babc:	6093      	str	r3, [r2, #8]
			rightMotorPwm = RCFilter_Update(&rcFilterRight, rightMotorPwm);
 800babe:	ed97 0a03 	vldr	s0, [r7, #12]
 800bac2:	487f      	ldr	r0, [pc, #508]	; (800bcc0 <motorRightLeft+0x624>)
 800bac4:	f000 fd84 	bl	800c5d0 <RCFilter_Update>
 800bac8:	ed87 0a03 	vstr	s0, [r7, #12]
			leftMotorPwm = RCFilter_Update(&rcFilterLeft, leftMotorPwm);
 800bacc:	ed97 0a04 	vldr	s0, [r7, #16]
 800bad0:	487c      	ldr	r0, [pc, #496]	; (800bcc4 <motorRightLeft+0x628>)
 800bad2:	f000 fd7d 	bl	800c5d0 <RCFilter_Update>
 800bad6:	ed87 0a04 	vstr	s0, [r7, #16]
			LEFT_MOTOR_FORWARD(leftMotorPwm);
 800bada:	4b7b      	ldr	r3, [pc, #492]	; (800bcc8 <motorRightLeft+0x62c>)
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	edd7 7a04 	vldr	s15, [r7, #16]
 800bae2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bae6:	ee17 2a90 	vmov	r2, s15
 800baea:	635a      	str	r2, [r3, #52]	; 0x34
			RIGHT_MOTOR_FORWARD(rightMotorPwm);
 800baec:	4b77      	ldr	r3, [pc, #476]	; (800bccc <motorRightLeft+0x630>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	edd7 7a03 	vldr	s15, [r7, #12]
 800baf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800baf8:	ee17 2a90 	vmov	r2, s15
 800bafc:	635a      	str	r2, [r3, #52]	; 0x34
}
 800bafe:	e0ce      	b.n	800bc9e <motorRightLeft+0x602>
		else if(motorInf.direction == IDLE)
 800bb00:	4b69      	ldr	r3, [pc, #420]	; (800bca8 <motorRightLeft+0x60c>)
 800bb02:	781b      	ldrb	r3, [r3, #0]
 800bb04:	2b01      	cmp	r3, #1
 800bb06:	d13a      	bne.n	800bb7e <motorRightLeft+0x4e2>
			pwmDuty = (CHANNEL_MIDDLE - CHANNEL_ERROR) - adcVal;
 800bb08:	88fb      	ldrh	r3, [r7, #6]
 800bb0a:	f5c3 63b5 	rsb	r3, r3, #1448	; 0x5a8
 800bb0e:	3302      	adds	r3, #2
 800bb10:	ee07 3a90 	vmov	s15, r3
 800bb14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb18:	edc7 7a05 	vstr	s15, [r7, #20]
			pwmDuty = ((pwmDuty / CHANNEL_RANGE) * 90.0f);
 800bb1c:	ed97 7a05 	vldr	s14, [r7, #20]
 800bb20:	eddf 6a62 	vldr	s13, [pc, #392]	; 800bcac <motorRightLeft+0x610>
 800bb24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bb28:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800bcd0 <motorRightLeft+0x634>
 800bb2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bb30:	edc7 7a05 	vstr	s15, [r7, #20]
			leftMotorPwm = pwmDuty;
 800bb34:	697b      	ldr	r3, [r7, #20]
 800bb36:	613b      	str	r3, [r7, #16]
			rightMotorPwm = pwmDuty;
 800bb38:	697b      	ldr	r3, [r7, #20]
 800bb3a:	60fb      	str	r3, [r7, #12]
			rightMotorPwm = RCFilter_Update(&rcFilterRight, rightMotorPwm);
 800bb3c:	ed97 0a03 	vldr	s0, [r7, #12]
 800bb40:	485f      	ldr	r0, [pc, #380]	; (800bcc0 <motorRightLeft+0x624>)
 800bb42:	f000 fd45 	bl	800c5d0 <RCFilter_Update>
 800bb46:	ed87 0a03 	vstr	s0, [r7, #12]
			leftMotorPwm = RCFilter_Update(&rcFilterLeft, leftMotorPwm);
 800bb4a:	ed97 0a04 	vldr	s0, [r7, #16]
 800bb4e:	485d      	ldr	r0, [pc, #372]	; (800bcc4 <motorRightLeft+0x628>)
 800bb50:	f000 fd3e 	bl	800c5d0 <RCFilter_Update>
 800bb54:	ed87 0a04 	vstr	s0, [r7, #16]
			LEFT_MOTOR_BACKWARD(leftMotorPwm);
 800bb58:	4b5e      	ldr	r3, [pc, #376]	; (800bcd4 <motorRightLeft+0x638>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	edd7 7a04 	vldr	s15, [r7, #16]
 800bb60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb64:	ee17 2a90 	vmov	r2, s15
 800bb68:	635a      	str	r2, [r3, #52]	; 0x34
			RIGHT_MOTOR_FORWARD(rightMotorPwm);
 800bb6a:	4b58      	ldr	r3, [pc, #352]	; (800bccc <motorRightLeft+0x630>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	edd7 7a03 	vldr	s15, [r7, #12]
 800bb72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb76:	ee17 2a90 	vmov	r2, s15
 800bb7a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800bb7c:	e08f      	b.n	800bc9e <motorRightLeft+0x602>
			pwmDuty = (CHANNEL_MIDDLE - CHANNEL_ERROR) - adcVal;
 800bb7e:	88fb      	ldrh	r3, [r7, #6]
 800bb80:	f5c3 63b5 	rsb	r3, r3, #1448	; 0x5a8
 800bb84:	3302      	adds	r3, #2
 800bb86:	ee07 3a90 	vmov	s15, r3
 800bb8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb8e:	edc7 7a05 	vstr	s15, [r7, #20]
			pwmDuty = ((pwmDuty / CHANNEL_RANGE) * 100.0f);
 800bb92:	ed97 7a05 	vldr	s14, [r7, #20]
 800bb96:	eddf 6a45 	vldr	s13, [pc, #276]	; 800bcac <motorRightLeft+0x610>
 800bb9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bb9e:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800bcb0 <motorRightLeft+0x614>
 800bba2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bba6:	edc7 7a05 	vstr	s15, [r7, #20]
			leftMotorPwm = motorInf.forwardPwm - pwmDuty * 0.7f;
 800bbaa:	4b3f      	ldr	r3, [pc, #252]	; (800bca8 <motorRightLeft+0x60c>)
 800bbac:	785b      	ldrb	r3, [r3, #1]
 800bbae:	ee07 3a90 	vmov	s15, r3
 800bbb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bbb6:	edd7 7a05 	vldr	s15, [r7, #20]
 800bbba:	eddf 6a3e 	vldr	s13, [pc, #248]	; 800bcb4 <motorRightLeft+0x618>
 800bbbe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bbc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bbc6:	edc7 7a04 	vstr	s15, [r7, #16]
			rightMotorPwm = motorInf.forwardPwm + pwmDuty * 0.7f;
 800bbca:	4b37      	ldr	r3, [pc, #220]	; (800bca8 <motorRightLeft+0x60c>)
 800bbcc:	785b      	ldrb	r3, [r3, #1]
 800bbce:	ee07 3a90 	vmov	s15, r3
 800bbd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bbd6:	edd7 7a05 	vldr	s15, [r7, #20]
 800bbda:	eddf 6a36 	vldr	s13, [pc, #216]	; 800bcb4 <motorRightLeft+0x618>
 800bbde:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bbe2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bbe6:	edc7 7a03 	vstr	s15, [r7, #12]
			leftMotorPwm = (leftMotorPwm > 100) ? 100 : leftMotorPwm;
 800bbea:	edd7 7a04 	vldr	s15, [r7, #16]
 800bbee:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800bcb0 <motorRightLeft+0x614>
 800bbf2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bbf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbfa:	dd01      	ble.n	800bc00 <motorRightLeft+0x564>
 800bbfc:	4b2e      	ldr	r3, [pc, #184]	; (800bcb8 <motorRightLeft+0x61c>)
 800bbfe:	e000      	b.n	800bc02 <motorRightLeft+0x566>
 800bc00:	693b      	ldr	r3, [r7, #16]
 800bc02:	613b      	str	r3, [r7, #16]
			leftMotorPwm = (leftMotorPwm < 0) ? 0 : leftMotorPwm;
 800bc04:	edd7 7a04 	vldr	s15, [r7, #16]
 800bc08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bc0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc10:	d502      	bpl.n	800bc18 <motorRightLeft+0x57c>
 800bc12:	f04f 0300 	mov.w	r3, #0
 800bc16:	e000      	b.n	800bc1a <motorRightLeft+0x57e>
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	613b      	str	r3, [r7, #16]
			rightMotorPwm = (rightMotorPwm > 100) ? 100 : rightMotorPwm;
 800bc1c:	edd7 7a03 	vldr	s15, [r7, #12]
 800bc20:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800bcb0 <motorRightLeft+0x614>
 800bc24:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bc28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc2c:	dd01      	ble.n	800bc32 <motorRightLeft+0x596>
 800bc2e:	4b22      	ldr	r3, [pc, #136]	; (800bcb8 <motorRightLeft+0x61c>)
 800bc30:	e000      	b.n	800bc34 <motorRightLeft+0x598>
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	60fb      	str	r3, [r7, #12]
			rightMotorPwm = (rightMotorPwm < 0) ? 0 : rightMotorPwm;
 800bc36:	edd7 7a03 	vldr	s15, [r7, #12]
 800bc3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bc3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc42:	d502      	bpl.n	800bc4a <motorRightLeft+0x5ae>
 800bc44:	f04f 0300 	mov.w	r3, #0
 800bc48:	e000      	b.n	800bc4c <motorRightLeft+0x5b0>
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	60fb      	str	r3, [r7, #12]
			rcFilterRight.out[0] = rcFilterForward.out[0];
 800bc4e:	4b1b      	ldr	r3, [pc, #108]	; (800bcbc <motorRightLeft+0x620>)
 800bc50:	689b      	ldr	r3, [r3, #8]
 800bc52:	4a1b      	ldr	r2, [pc, #108]	; (800bcc0 <motorRightLeft+0x624>)
 800bc54:	6093      	str	r3, [r2, #8]
			rcFilterLeft.out[0] = rcFilterForward.out[0];
 800bc56:	4b19      	ldr	r3, [pc, #100]	; (800bcbc <motorRightLeft+0x620>)
 800bc58:	689b      	ldr	r3, [r3, #8]
 800bc5a:	4a1a      	ldr	r2, [pc, #104]	; (800bcc4 <motorRightLeft+0x628>)
 800bc5c:	6093      	str	r3, [r2, #8]
			rightMotorPwm = RCFilter_Update(&rcFilterRight, rightMotorPwm);
 800bc5e:	ed97 0a03 	vldr	s0, [r7, #12]
 800bc62:	4817      	ldr	r0, [pc, #92]	; (800bcc0 <motorRightLeft+0x624>)
 800bc64:	f000 fcb4 	bl	800c5d0 <RCFilter_Update>
 800bc68:	ed87 0a03 	vstr	s0, [r7, #12]
			leftMotorPwm = RCFilter_Update(&rcFilterLeft, leftMotorPwm);
 800bc6c:	ed97 0a04 	vldr	s0, [r7, #16]
 800bc70:	4814      	ldr	r0, [pc, #80]	; (800bcc4 <motorRightLeft+0x628>)
 800bc72:	f000 fcad 	bl	800c5d0 <RCFilter_Update>
 800bc76:	ed87 0a04 	vstr	s0, [r7, #16]
			LEFT_MOTOR_BACKWARD(leftMotorPwm);
 800bc7a:	4b16      	ldr	r3, [pc, #88]	; (800bcd4 <motorRightLeft+0x638>)
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	edd7 7a04 	vldr	s15, [r7, #16]
 800bc82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc86:	ee17 2a90 	vmov	r2, s15
 800bc8a:	635a      	str	r2, [r3, #52]	; 0x34
			RIGHT_MOTOR_BACKWARD(rightMotorPwm);
 800bc8c:	4b0f      	ldr	r3, [pc, #60]	; (800bccc <motorRightLeft+0x630>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	edd7 7a03 	vldr	s15, [r7, #12]
 800bc94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc98:	ee17 2a90 	vmov	r2, s15
 800bc9c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800bc9e:	bf00      	nop
 800bca0:	3718      	adds	r7, #24
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}
 800bca6:	bf00      	nop
 800bca8:	20004f6c 	.word	0x20004f6c
 800bcac:	43af0000 	.word	0x43af0000
 800bcb0:	42c80000 	.word	0x42c80000
 800bcb4:	3f333333 	.word	0x3f333333
 800bcb8:	42c80000 	.word	0x42c80000
 800bcbc:	20004f2c 	.word	0x20004f2c
 800bcc0:	20004f4c 	.word	0x20004f4c
 800bcc4:	20004f5c 	.word	0x20004f5c
 800bcc8:	200002f4 	.word	0x200002f4
 800bccc:	2000021c 	.word	0x2000021c
 800bcd0:	42b40000 	.word	0x42b40000
 800bcd4:	200002ac 	.word	0x200002ac

0800bcd8 <PIDController_Init>:
#include "PID.h"

void PIDController_Init(PIDController *pid) {
 800bcd8:	b480      	push	{r7}
 800bcda:	b083      	sub	sp, #12
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]

	/* Clear controller variables */
	pid->integrator = 0.0f;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f04f 0200 	mov.w	r2, #0
 800bce6:	625a      	str	r2, [r3, #36]	; 0x24
	pid->prevError  = 0.0f;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f04f 0200 	mov.w	r2, #0
 800bcee:	629a      	str	r2, [r3, #40]	; 0x28

	pid->differentiator  = 0.0f;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f04f 0200 	mov.w	r2, #0
 800bcf6:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->prevMeasurement = 0.0f;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f04f 0200 	mov.w	r2, #0
 800bcfe:	631a      	str	r2, [r3, #48]	; 0x30

	pid->out = 0.0f;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f04f 0200 	mov.w	r2, #0
 800bd06:	635a      	str	r2, [r3, #52]	; 0x34

}
 800bd08:	bf00      	nop
 800bd0a:	370c      	adds	r7, #12
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd12:	4770      	bx	lr

0800bd14 <kalman1_init>:
 *   init_p - initial estimated error convariance
 * @outputs 
 * @retval  
 */
void kalman1_init(kalman_state *state, float init_x, float init_p)
{
 800bd14:	b480      	push	{r7}
 800bd16:	b085      	sub	sp, #20
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	60f8      	str	r0, [r7, #12]
 800bd1c:	ed87 0a02 	vstr	s0, [r7, #8]
 800bd20:	edc7 0a01 	vstr	s1, [r7, #4]
    state->x = init_x;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	68ba      	ldr	r2, [r7, #8]
 800bd28:	601a      	str	r2, [r3, #0]
    state->p = init_p;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	687a      	ldr	r2, [r7, #4]
 800bd2e:	615a      	str	r2, [r3, #20]
    state->A = 1;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800bd36:	605a      	str	r2, [r3, #4]
    state->H = 1;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800bd3e:	609a      	str	r2, [r3, #8]
    state->q = 2e2;//10e-6;  /* predict noise convariance */
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	4a05      	ldr	r2, [pc, #20]	; (800bd58 <kalman1_init+0x44>)
 800bd44:	60da      	str	r2, [r3, #12]
    state->r = 5e2;//10e-5;  /* measure error convariance */
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	4a04      	ldr	r2, [pc, #16]	; (800bd5c <kalman1_init+0x48>)
 800bd4a:	611a      	str	r2, [r3, #16]
}
 800bd4c:	bf00      	nop
 800bd4e:	3714      	adds	r7, #20
 800bd50:	46bd      	mov	sp, r7
 800bd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd56:	4770      	bx	lr
 800bd58:	43480000 	.word	0x43480000
 800bd5c:	43fa0000 	.word	0x43fa0000

0800bd60 <kalman1_filter>:
 * @outputs 
 * @retval  
 *   Estimated result
 */
float kalman1_filter(kalman_state *state, float z_measure)
{
 800bd60:	b480      	push	{r7}
 800bd62:	b083      	sub	sp, #12
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
 800bd68:	ed87 0a00 	vstr	s0, [r7]
    /* Predict */
    state->x = state->A * state->x;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	ed93 7a01 	vldr	s14, [r3, #4]
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	edd3 7a00 	vldr	s15, [r3]
 800bd78:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	edc3 7a00 	vstr	s15, [r3]
    state->p = state->A * state->A * state->p + state->q;  /* p(n|n-1)=A^2*p(n-1|n-1)+q */
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	ed93 7a01 	vldr	s14, [r3, #4]
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	edd3 7a01 	vldr	s15, [r3, #4]
 800bd8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	edd3 7a05 	vldr	s15, [r3, #20]
 800bd98:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	edd3 7a03 	vldr	s15, [r3, #12]
 800bda2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	edc3 7a05 	vstr	s15, [r3, #20]

    /* Measurement */
    state->gain = state->p * state->H / (state->p * state->H * state->H + state->r);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	ed93 7a05 	vldr	s14, [r3, #20]
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	edd3 7a02 	vldr	s15, [r3, #8]
 800bdb8:	ee67 6a27 	vmul.f32	s13, s14, s15
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	ed93 7a05 	vldr	s14, [r3, #20]
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	edd3 7a02 	vldr	s15, [r3, #8]
 800bdc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	edd3 7a02 	vldr	s15, [r3, #8]
 800bdd2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	edd3 7a04 	vldr	s15, [r3, #16]
 800bddc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bde0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	edc3 7a06 	vstr	s15, [r3, #24]
    state->x = state->x + state->gain * (z_measure - state->H * state->x);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	ed93 7a00 	vldr	s14, [r3]
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	edd3 6a06 	vldr	s13, [r3, #24]
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	ed93 6a02 	vldr	s12, [r3, #8]
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	edd3 7a00 	vldr	s15, [r3]
 800be02:	ee66 7a27 	vmul.f32	s15, s12, s15
 800be06:	ed97 6a00 	vldr	s12, [r7]
 800be0a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800be0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800be12:	ee77 7a27 	vadd.f32	s15, s14, s15
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	edc3 7a00 	vstr	s15, [r3]
    state->p = (1 - state->gain * state->H) * state->p;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	ed93 7a06 	vldr	s14, [r3, #24]
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	edd3 7a02 	vldr	s15, [r3, #8]
 800be28:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800be30:	ee37 7a67 	vsub.f32	s14, s14, s15
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	edd3 7a05 	vldr	s15, [r3, #20]
 800be3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	edc3 7a05 	vstr	s15, [r3, #20]

    return state->x;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	ee07 3a90 	vmov	s15, r3
}
 800be4c:	eeb0 0a67 	vmov.f32	s0, s15
 800be50:	370c      	adds	r7, #12
 800be52:	46bd      	mov	sp, r7
 800be54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be58:	4770      	bx	lr
	...

0800be5c <UGV_qmcInit>:
 * @brief Initialize the QMC5883's i2c register
 * @param[in] i2c global variable
 * @return if master connection is valid return HAL_OK
 */
HAL_StatusTypeDef UGV_qmcInit(I2C_HandleTypeDef * hi2c1, Qmc * qmc)
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b088      	sub	sp, #32
 800be60:	af04      	add	r7, sp, #16
 800be62:	6078      	str	r0, [r7, #4]
 800be64:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;

	i2c = hi2c1;
 800be66:	4a65      	ldr	r2, [pc, #404]	; (800bffc <UGV_qmcInit+0x1a0>)
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6013      	str	r3, [r2, #0]

	HAL_I2C_Init(i2c);
 800be6c:	4b63      	ldr	r3, [pc, #396]	; (800bffc <UGV_qmcInit+0x1a0>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	4618      	mov	r0, r3
 800be72:	f7f6 fd11 	bl	8002898 <HAL_I2C_Init>
	kalman1_init(&hKalmanX, 0, 5e2);
 800be76:	eddf 0a62 	vldr	s1, [pc, #392]	; 800c000 <UGV_qmcInit+0x1a4>
 800be7a:	ed9f 0a62 	vldr	s0, [pc, #392]	; 800c004 <UGV_qmcInit+0x1a8>
 800be7e:	4862      	ldr	r0, [pc, #392]	; (800c008 <UGV_qmcInit+0x1ac>)
 800be80:	f7ff ff48 	bl	800bd14 <kalman1_init>
	kalman1_init(&hKalmanY, 0, 5e2);
 800be84:	eddf 0a5e 	vldr	s1, [pc, #376]	; 800c000 <UGV_qmcInit+0x1a4>
 800be88:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 800c004 <UGV_qmcInit+0x1a8>
 800be8c:	485f      	ldr	r0, [pc, #380]	; (800c00c <UGV_qmcInit+0x1b0>)
 800be8e:	f7ff ff41 	bl	800bd14 <kalman1_init>
	kalman1_init(&hKalmanZ, 0, 5e2);
 800be92:	eddf 0a5b 	vldr	s1, [pc, #364]	; 800c000 <UGV_qmcInit+0x1a4>
 800be96:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 800c004 <UGV_qmcInit+0x1a8>
 800be9a:	485d      	ldr	r0, [pc, #372]	; (800c010 <UGV_qmcInit+0x1b4>)
 800be9c:	f7ff ff3a 	bl	800bd14 <kalman1_init>

	// configuration register-1 setting
	qmc->qmcReg.ControlReg1.reg  = 0x00;
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	2200      	movs	r2, #0
 800bea4:	725a      	strb	r2, [r3, #9]
	qmc->qmcReg.ControlReg1.MODE = qmc->qmcConfig.MODE;
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	7b5b      	ldrb	r3, [r3, #13]
 800beaa:	f003 0303 	and.w	r3, r3, #3
 800beae:	b2d9      	uxtb	r1, r3
 800beb0:	683a      	ldr	r2, [r7, #0]
 800beb2:	7a53      	ldrb	r3, [r2, #9]
 800beb4:	f361 0301 	bfi	r3, r1, #0, #2
 800beb8:	7253      	strb	r3, [r2, #9]
	qmc->qmcReg.ControlReg1.ODR  = qmc->qmcConfig.ODR;
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	7b9b      	ldrb	r3, [r3, #14]
 800bebe:	f003 0303 	and.w	r3, r3, #3
 800bec2:	b2d9      	uxtb	r1, r3
 800bec4:	683a      	ldr	r2, [r7, #0]
 800bec6:	7a53      	ldrb	r3, [r2, #9]
 800bec8:	f361 0383 	bfi	r3, r1, #2, #2
 800becc:	7253      	strb	r3, [r2, #9]
	qmc->qmcReg.ControlReg1.RNG  = qmc->qmcConfig.RNG;
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	7bdb      	ldrb	r3, [r3, #15]
 800bed2:	f003 0303 	and.w	r3, r3, #3
 800bed6:	b2d9      	uxtb	r1, r3
 800bed8:	683a      	ldr	r2, [r7, #0]
 800beda:	7a53      	ldrb	r3, [r2, #9]
 800bedc:	f361 1305 	bfi	r3, r1, #4, #2
 800bee0:	7253      	strb	r3, [r2, #9]
	qmc->qmcReg.ControlReg1.OSR  = qmc->qmcConfig.OSR;
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	7c1b      	ldrb	r3, [r3, #16]
 800bee6:	f003 0303 	and.w	r3, r3, #3
 800beea:	b2d9      	uxtb	r1, r3
 800beec:	683a      	ldr	r2, [r7, #0]
 800beee:	7a53      	ldrb	r3, [r2, #9]
 800bef0:	f361 1387 	bfi	r3, r1, #6, #2
 800bef4:	7253      	strb	r3, [r2, #9]

	// configuration register-2 setting
	qmc->qmcReg.ControlReg2.reg  = 0x00;
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	2200      	movs	r2, #0
 800befa:	729a      	strb	r2, [r3, #10]
	qmc->qmcReg.ControlReg2.INT_ENB = qmc->qmcConfig.INT;
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	7c5b      	ldrb	r3, [r3, #17]
 800bf00:	f003 0301 	and.w	r3, r3, #1
 800bf04:	b2d9      	uxtb	r1, r3
 800bf06:	683a      	ldr	r2, [r7, #0]
 800bf08:	7a93      	ldrb	r3, [r2, #10]
 800bf0a:	f361 0300 	bfi	r3, r1, #0, #1
 800bf0e:	7293      	strb	r3, [r2, #10]
	qmc->qmcReg.ControlReg2.ROL_PNT = qmc->qmcConfig.ROL_PNT;
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	7c9b      	ldrb	r3, [r3, #18]
 800bf14:	f003 0301 	and.w	r3, r3, #1
 800bf18:	b2d9      	uxtb	r1, r3
 800bf1a:	683a      	ldr	r2, [r7, #0]
 800bf1c:	7a93      	ldrb	r3, [r2, #10]
 800bf1e:	f361 1386 	bfi	r3, r1, #6, #1
 800bf22:	7293      	strb	r3, [r2, #10]

	// It is recommended that the register 0BH is written by 0x01
	qmc->qmcReg.setResetPeriod = 0x01;
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	2201      	movs	r2, #1
 800bf28:	72da      	strb	r2, [r3, #11]

	//send the initial values
	status = HAL_I2C_Mem_Write(i2c, QMC_SLAVE_ADDR, QMC_SET_RESET_ADDR,
 800bf2a:	4b34      	ldr	r3, [pc, #208]	; (800bffc <UGV_qmcInit+0x1a0>)
 800bf2c:	6818      	ldr	r0, [r3, #0]
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	330b      	adds	r3, #11
 800bf32:	2201      	movs	r2, #1
 800bf34:	9202      	str	r2, [sp, #8]
 800bf36:	2201      	movs	r2, #1
 800bf38:	9201      	str	r2, [sp, #4]
 800bf3a:	9300      	str	r3, [sp, #0]
 800bf3c:	2301      	movs	r3, #1
 800bf3e:	220b      	movs	r2, #11
 800bf40:	211a      	movs	r1, #26
 800bf42:	f7f6 fded 	bl	8002b20 <HAL_I2C_Mem_Write>
 800bf46:	4603      	mov	r3, r0
 800bf48:	73fb      	strb	r3, [r7, #15]
							   1, &qmc->qmcReg.setResetPeriod, 1, 1);
	if(status != HAL_OK) return status;
 800bf4a:	7bfb      	ldrb	r3, [r7, #15]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d001      	beq.n	800bf54 <UGV_qmcInit+0xf8>
 800bf50:	7bfb      	ldrb	r3, [r7, #15]
 800bf52:	e04e      	b.n	800bff2 <UGV_qmcInit+0x196>
	while(HAL_I2C_GetState(i2c) == HAL_I2C_STATE_BUSY_TX);
 800bf54:	bf00      	nop
 800bf56:	4b29      	ldr	r3, [pc, #164]	; (800bffc <UGV_qmcInit+0x1a0>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f7f7 fa3a 	bl	80033d4 <HAL_I2C_GetState>
 800bf60:	4603      	mov	r3, r0
 800bf62:	2b21      	cmp	r3, #33	; 0x21
 800bf64:	d0f7      	beq.n	800bf56 <UGV_qmcInit+0xfa>
	HAL_Delay(1);
 800bf66:	2001      	movs	r0, #1
 800bf68:	f7f6 f920 	bl	80021ac <HAL_Delay>

	status = HAL_I2C_Mem_Write(i2c, QMC_SLAVE_ADDR, QMC_CONTROL_REG1_ADDR,
 800bf6c:	4b23      	ldr	r3, [pc, #140]	; (800bffc <UGV_qmcInit+0x1a0>)
 800bf6e:	6818      	ldr	r0, [r3, #0]
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	3309      	adds	r3, #9
 800bf74:	2201      	movs	r2, #1
 800bf76:	9202      	str	r2, [sp, #8]
 800bf78:	2201      	movs	r2, #1
 800bf7a:	9201      	str	r2, [sp, #4]
 800bf7c:	9300      	str	r3, [sp, #0]
 800bf7e:	2301      	movs	r3, #1
 800bf80:	2209      	movs	r2, #9
 800bf82:	211a      	movs	r1, #26
 800bf84:	f7f6 fdcc 	bl	8002b20 <HAL_I2C_Mem_Write>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	73fb      	strb	r3, [r7, #15]
							   1, &qmc->qmcReg.ControlReg1.reg, 1, 1);
	if(status != HAL_OK) return status;
 800bf8c:	7bfb      	ldrb	r3, [r7, #15]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d001      	beq.n	800bf96 <UGV_qmcInit+0x13a>
 800bf92:	7bfb      	ldrb	r3, [r7, #15]
 800bf94:	e02d      	b.n	800bff2 <UGV_qmcInit+0x196>
	while(HAL_I2C_GetState(i2c) == HAL_I2C_STATE_BUSY_TX);
 800bf96:	bf00      	nop
 800bf98:	4b18      	ldr	r3, [pc, #96]	; (800bffc <UGV_qmcInit+0x1a0>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	f7f7 fa19 	bl	80033d4 <HAL_I2C_GetState>
 800bfa2:	4603      	mov	r3, r0
 800bfa4:	2b21      	cmp	r3, #33	; 0x21
 800bfa6:	d0f7      	beq.n	800bf98 <UGV_qmcInit+0x13c>
	HAL_Delay(1);
 800bfa8:	2001      	movs	r0, #1
 800bfaa:	f7f6 f8ff 	bl	80021ac <HAL_Delay>

	status = HAL_I2C_Mem_Write(i2c, QMC_SLAVE_ADDR, QMC_CONTROL_REG2_ADDR,
 800bfae:	4b13      	ldr	r3, [pc, #76]	; (800bffc <UGV_qmcInit+0x1a0>)
 800bfb0:	6818      	ldr	r0, [r3, #0]
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	330a      	adds	r3, #10
 800bfb6:	2201      	movs	r2, #1
 800bfb8:	9202      	str	r2, [sp, #8]
 800bfba:	2201      	movs	r2, #1
 800bfbc:	9201      	str	r2, [sp, #4]
 800bfbe:	9300      	str	r3, [sp, #0]
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	220a      	movs	r2, #10
 800bfc4:	211a      	movs	r1, #26
 800bfc6:	f7f6 fdab 	bl	8002b20 <HAL_I2C_Mem_Write>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	73fb      	strb	r3, [r7, #15]
							   1, &qmc->qmcReg.ControlReg2.reg, 1, 1);
	if(status != HAL_OK) return status;
 800bfce:	7bfb      	ldrb	r3, [r7, #15]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d001      	beq.n	800bfd8 <UGV_qmcInit+0x17c>
 800bfd4:	7bfb      	ldrb	r3, [r7, #15]
 800bfd6:	e00c      	b.n	800bff2 <UGV_qmcInit+0x196>
	while(HAL_I2C_GetState(i2c) == HAL_I2C_STATE_BUSY_TX);
 800bfd8:	bf00      	nop
 800bfda:	4b08      	ldr	r3, [pc, #32]	; (800bffc <UGV_qmcInit+0x1a0>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f7f7 f9f8 	bl	80033d4 <HAL_I2C_GetState>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	2b21      	cmp	r3, #33	; 0x21
 800bfe8:	d0f7      	beq.n	800bfda <UGV_qmcInit+0x17e>
	HAL_Delay(1);
 800bfea:	2001      	movs	r0, #1
 800bfec:	f7f6 f8de 	bl	80021ac <HAL_Delay>

	return HAL_OK;
 800bff0:	2300      	movs	r3, #0
}
 800bff2:	4618      	mov	r0, r3
 800bff4:	3710      	adds	r7, #16
 800bff6:	46bd      	mov	sp, r7
 800bff8:	bd80      	pop	{r7, pc}
 800bffa:	bf00      	nop
 800bffc:	20004f70 	.word	0x20004f70
 800c000:	43fa0000 	.word	0x43fa0000
 800c004:	00000000 	.word	0x00000000
 800c008:	20004f78 	.word	0x20004f78
 800c00c:	20004f94 	.word	0x20004f94
 800c010:	20004fb0 	.word	0x20004fb0

0800c014 <UGV_isDataReady>:
 * @brief check the RDYB bit in polling mode
 * @param[in] qmc global variable
 * @return if data is ready return 1 else 0
 */
uint8_t UGV_isDataReady(Qmc * qmc)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b086      	sub	sp, #24
 800c018:	af04      	add	r7, sp, #16
 800c01a:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(i2c, QMC_SLAVE_ADDR, QMC_STATUS_REG1,
 800c01c:	4b0b      	ldr	r3, [pc, #44]	; (800c04c <UGV_isDataReady+0x38>)
 800c01e:	6818      	ldr	r0, [r3, #0]
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	3306      	adds	r3, #6
 800c024:	2201      	movs	r2, #1
 800c026:	9202      	str	r2, [sp, #8]
 800c028:	2201      	movs	r2, #1
 800c02a:	9201      	str	r2, [sp, #4]
 800c02c:	9300      	str	r3, [sp, #0]
 800c02e:	2301      	movs	r3, #1
 800c030:	2206      	movs	r2, #6
 800c032:	211a      	movs	r1, #26
 800c034:	f7f6 fe6e 	bl	8002d14 <HAL_I2C_Mem_Read>
					 1, &qmc->qmcReg.StatusReg.reg, 1, 1);

	return qmc->qmcReg.StatusReg.DRDY;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	799b      	ldrb	r3, [r3, #6]
 800c03c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c040:	b2db      	uxtb	r3, r3
}
 800c042:	4618      	mov	r0, r3
 800c044:	3708      	adds	r7, #8
 800c046:	46bd      	mov	sp, r7
 800c048:	bd80      	pop	{r7, pc}
 800c04a:	bf00      	nop
 800c04c:	20004f70 	.word	0x20004f70

0800c050 <UGV_getPositionAdc>:
 * @brief read the register adc values and assign
 * @param[in] bmg global variable
 * @return HAL_I2c read return status
 */
HAL_StatusTypeDef UGV_getPositionAdc(Qmc * qmc)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b08a      	sub	sp, #40	; 0x28
 800c054:	af04      	add	r7, sp, #16
 800c056:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;

	if (HAL_I2C_IsDeviceReady(i2c, QMC_SLAVE_ADDR, 1, 1) != HAL_OK)
 800c058:	4b70      	ldr	r3, [pc, #448]	; (800c21c <UGV_getPositionAdc+0x1cc>)
 800c05a:	6818      	ldr	r0, [r3, #0]
 800c05c:	2301      	movs	r3, #1
 800c05e:	2201      	movs	r2, #1
 800c060:	211a      	movs	r1, #26
 800c062:	f7f7 f889 	bl	8003178 <HAL_I2C_IsDeviceReady>
 800c066:	4603      	mov	r3, r0
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d001      	beq.n	800c070 <UGV_getPositionAdc+0x20>
		return HAL_BUSY;
 800c06c:	2302      	movs	r3, #2
 800c06e:	e0d0      	b.n	800c212 <UGV_getPositionAdc+0x1c2>

	//read the 0H-6H register in one packet
	if(qmc->qmcConfig.ROL_PNT == ROL_PNT_ENABLE)
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	7c9b      	ldrb	r3, [r3, #18]
 800c074:	2b01      	cmp	r3, #1
 800c076:	d113      	bne.n	800c0a0 <UGV_getPositionAdc+0x50>
	{
		status = HAL_I2C_Mem_Read(i2c, QMC_SLAVE_ADDR, QMC_XOUT_LSB_ADDR,
 800c078:	4b68      	ldr	r3, [pc, #416]	; (800c21c <UGV_getPositionAdc+0x1cc>)
 800c07a:	6818      	ldr	r0, [r3, #0]
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2201      	movs	r2, #1
 800c080:	9202      	str	r2, [sp, #8]
 800c082:	2207      	movs	r2, #7
 800c084:	9201      	str	r2, [sp, #4]
 800c086:	9300      	str	r3, [sp, #0]
 800c088:	2301      	movs	r3, #1
 800c08a:	2200      	movs	r2, #0
 800c08c:	211a      	movs	r1, #26
 800c08e:	f7f6 fe41 	bl	8002d14 <HAL_I2C_Mem_Read>
 800c092:	4603      	mov	r3, r0
 800c094:	73fb      	strb	r3, [r7, #15]
								  1, &qmc->qmcReg.xLsb, QMC_ROL_READ_DATA_LEN, 1);
		if(status != HAL_OK) return status;
 800c096:	7bfb      	ldrb	r3, [r7, #15]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d024      	beq.n	800c0e6 <UGV_getPositionAdc+0x96>
 800c09c:	7bfb      	ldrb	r3, [r7, #15]
 800c09e:	e0b8      	b.n	800c212 <UGV_getPositionAdc+0x1c2>
	}
	else
	{
		uint8_t * offsetPtr = &qmc->qmcReg.xLsb;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	613b      	str	r3, [r7, #16]
		for(int i = 0; i < 6; i++)
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	617b      	str	r3, [r7, #20]
 800c0a8:	e01a      	b.n	800c0e0 <UGV_getPositionAdc+0x90>
		{
			status = HAL_I2C_Mem_Read(i2c, QMC_SLAVE_ADDR, i,
 800c0aa:	4b5c      	ldr	r3, [pc, #368]	; (800c21c <UGV_getPositionAdc+0x1cc>)
 800c0ac:	6818      	ldr	r0, [r3, #0]
 800c0ae:	697b      	ldr	r3, [r7, #20]
 800c0b0:	b299      	uxth	r1, r3
 800c0b2:	697b      	ldr	r3, [r7, #20]
 800c0b4:	693a      	ldr	r2, [r7, #16]
 800c0b6:	4413      	add	r3, r2
 800c0b8:	2201      	movs	r2, #1
 800c0ba:	9202      	str	r2, [sp, #8]
 800c0bc:	2201      	movs	r2, #1
 800c0be:	9201      	str	r2, [sp, #4]
 800c0c0:	9300      	str	r3, [sp, #0]
 800c0c2:	2301      	movs	r3, #1
 800c0c4:	460a      	mov	r2, r1
 800c0c6:	211a      	movs	r1, #26
 800c0c8:	f7f6 fe24 	bl	8002d14 <HAL_I2C_Mem_Read>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	73fb      	strb	r3, [r7, #15]
									  1, &offsetPtr[i], 1, 1);
			if(status != HAL_OK) return status;
 800c0d0:	7bfb      	ldrb	r3, [r7, #15]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d001      	beq.n	800c0da <UGV_getPositionAdc+0x8a>
 800c0d6:	7bfb      	ldrb	r3, [r7, #15]
 800c0d8:	e09b      	b.n	800c212 <UGV_getPositionAdc+0x1c2>
		for(int i = 0; i < 6; i++)
 800c0da:	697b      	ldr	r3, [r7, #20]
 800c0dc:	3301      	adds	r3, #1
 800c0de:	617b      	str	r3, [r7, #20]
 800c0e0:	697b      	ldr	r3, [r7, #20]
 800c0e2:	2b05      	cmp	r3, #5
 800c0e4:	dde1      	ble.n	800c0aa <UGV_getPositionAdc+0x5a>
		}
	}

	//read temperature registers
	status = HAL_I2C_Mem_Read(i2c, QMC_SLAVE_ADDR, QMC_TOUT_LSB_ADDR, 1, &qmc->qmcReg.tempLsb, 1, 1);
 800c0e6:	4b4d      	ldr	r3, [pc, #308]	; (800c21c <UGV_getPositionAdc+0x1cc>)
 800c0e8:	6818      	ldr	r0, [r3, #0]
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	3307      	adds	r3, #7
 800c0ee:	2201      	movs	r2, #1
 800c0f0:	9202      	str	r2, [sp, #8]
 800c0f2:	2201      	movs	r2, #1
 800c0f4:	9201      	str	r2, [sp, #4]
 800c0f6:	9300      	str	r3, [sp, #0]
 800c0f8:	2301      	movs	r3, #1
 800c0fa:	2207      	movs	r2, #7
 800c0fc:	211a      	movs	r1, #26
 800c0fe:	f7f6 fe09 	bl	8002d14 <HAL_I2C_Mem_Read>
 800c102:	4603      	mov	r3, r0
 800c104:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 800c106:	7bfb      	ldrb	r3, [r7, #15]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d001      	beq.n	800c110 <UGV_getPositionAdc+0xc0>
 800c10c:	7bfb      	ldrb	r3, [r7, #15]
 800c10e:	e080      	b.n	800c212 <UGV_getPositionAdc+0x1c2>

	status = HAL_I2C_Mem_Read(i2c, QMC_SLAVE_ADDR, QMC_TOUT_MSB_ADDR, 1, &qmc->qmcReg.tempMsb, 1, 1);
 800c110:	4b42      	ldr	r3, [pc, #264]	; (800c21c <UGV_getPositionAdc+0x1cc>)
 800c112:	6818      	ldr	r0, [r3, #0]
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	3308      	adds	r3, #8
 800c118:	2201      	movs	r2, #1
 800c11a:	9202      	str	r2, [sp, #8]
 800c11c:	2201      	movs	r2, #1
 800c11e:	9201      	str	r2, [sp, #4]
 800c120:	9300      	str	r3, [sp, #0]
 800c122:	2301      	movs	r3, #1
 800c124:	2208      	movs	r2, #8
 800c126:	211a      	movs	r1, #26
 800c128:	f7f6 fdf4 	bl	8002d14 <HAL_I2C_Mem_Read>
 800c12c:	4603      	mov	r3, r0
 800c12e:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 800c130:	7bfb      	ldrb	r3, [r7, #15]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d001      	beq.n	800c13a <UGV_getPositionAdc+0xea>
 800c136:	7bfb      	ldrb	r3, [r7, #15]
 800c138:	e06b      	b.n	800c212 <UGV_getPositionAdc+0x1c2>

	//casting
	qmc->xPosition   = qmc->qmcReg.xLsb | (qmc->qmcReg.xMsb << 8);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	781b      	ldrb	r3, [r3, #0]
 800c13e:	b21a      	sxth	r2, r3
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	785b      	ldrb	r3, [r3, #1]
 800c144:	021b      	lsls	r3, r3, #8
 800c146:	b21b      	sxth	r3, r3
 800c148:	4313      	orrs	r3, r2
 800c14a:	b21a      	sxth	r2, r3
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	829a      	strh	r2, [r3, #20]
	qmc->xPosition = kalman1_filter(&hKalmanX, qmc->xPosition);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800c156:	ee07 3a90 	vmov	s15, r3
 800c15a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c15e:	eeb0 0a67 	vmov.f32	s0, s15
 800c162:	482f      	ldr	r0, [pc, #188]	; (800c220 <UGV_getPositionAdc+0x1d0>)
 800c164:	f7ff fdfc 	bl	800bd60 <kalman1_filter>
 800c168:	eef0 7a40 	vmov.f32	s15, s0
 800c16c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c170:	ee17 3a90 	vmov	r3, s15
 800c174:	b21a      	sxth	r2, r3
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	829a      	strh	r2, [r3, #20]

	qmc->yPosition   = qmc->qmcReg.yLsb | (qmc->qmcReg.yMsb << 8);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	789b      	ldrb	r3, [r3, #2]
 800c17e:	b21a      	sxth	r2, r3
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	78db      	ldrb	r3, [r3, #3]
 800c184:	021b      	lsls	r3, r3, #8
 800c186:	b21b      	sxth	r3, r3
 800c188:	4313      	orrs	r3, r2
 800c18a:	b21a      	sxth	r2, r3
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	82da      	strh	r2, [r3, #22]
	qmc->yPosition = kalman1_filter(&hKalmanY, qmc->yPosition);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800c196:	ee07 3a90 	vmov	s15, r3
 800c19a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c19e:	eeb0 0a67 	vmov.f32	s0, s15
 800c1a2:	4820      	ldr	r0, [pc, #128]	; (800c224 <UGV_getPositionAdc+0x1d4>)
 800c1a4:	f7ff fddc 	bl	800bd60 <kalman1_filter>
 800c1a8:	eef0 7a40 	vmov.f32	s15, s0
 800c1ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c1b0:	ee17 3a90 	vmov	r3, s15
 800c1b4:	b21a      	sxth	r2, r3
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	82da      	strh	r2, [r3, #22]

	qmc->zPosition   = qmc->qmcReg.zLsb | (qmc->qmcReg.zMsb << 8);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	791b      	ldrb	r3, [r3, #4]
 800c1be:	b21a      	sxth	r2, r3
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	795b      	ldrb	r3, [r3, #5]
 800c1c4:	021b      	lsls	r3, r3, #8
 800c1c6:	b21b      	sxth	r3, r3
 800c1c8:	4313      	orrs	r3, r2
 800c1ca:	b21a      	sxth	r2, r3
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	831a      	strh	r2, [r3, #24]
	qmc->zPosition = kalman1_filter(&hKalmanZ, qmc->zPosition);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800c1d6:	ee07 3a90 	vmov	s15, r3
 800c1da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c1de:	eeb0 0a67 	vmov.f32	s0, s15
 800c1e2:	4811      	ldr	r0, [pc, #68]	; (800c228 <UGV_getPositionAdc+0x1d8>)
 800c1e4:	f7ff fdbc 	bl	800bd60 <kalman1_filter>
 800c1e8:	eef0 7a40 	vmov.f32	s15, s0
 800c1ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c1f0:	ee17 3a90 	vmov	r3, s15
 800c1f4:	b21a      	sxth	r2, r3
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	831a      	strh	r2, [r3, #24]

	qmc->temperature = qmc->qmcReg.tempLsb | (qmc->qmcReg.tempMsb << 8);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	79db      	ldrb	r3, [r3, #7]
 800c1fe:	b21a      	sxth	r2, r3
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	7a1b      	ldrb	r3, [r3, #8]
 800c204:	021b      	lsls	r3, r3, #8
 800c206:	b21b      	sxth	r3, r3
 800c208:	4313      	orrs	r3, r2
 800c20a:	b21a      	sxth	r2, r3
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	835a      	strh	r2, [r3, #26]

	return HAL_OK;
 800c210:	2300      	movs	r3, #0
}
 800c212:	4618      	mov	r0, r3
 800c214:	3718      	adds	r7, #24
 800c216:	46bd      	mov	sp, r7
 800c218:	bd80      	pop	{r7, pc}
 800c21a:	bf00      	nop
 800c21c:	20004f70 	.word	0x20004f70
 800c220:	20004f78 	.word	0x20004f78
 800c224:	20004f94 	.word	0x20004f94
 800c228:	20004fb0 	.word	0x20004fb0

0800c22c <UGV_setMagneticDelination>:
 * @param[in] declination degree
 * @param[in] declination minute
 * @return none
 */
void UGV_setMagneticDelination(uint16_t degree, uint8_t minute)
{
 800c22c:	b480      	push	{r7}
 800c22e:	b083      	sub	sp, #12
 800c230:	af00      	add	r7, sp, #0
 800c232:	4603      	mov	r3, r0
 800c234:	460a      	mov	r2, r1
 800c236:	80fb      	strh	r3, [r7, #6]
 800c238:	4613      	mov	r3, r2
 800c23a:	717b      	strb	r3, [r7, #5]
	magneticDeclinationDegrees = degree + minute / 60.0f;
 800c23c:	88fb      	ldrh	r3, [r7, #6]
 800c23e:	ee07 3a90 	vmov	s15, r3
 800c242:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c246:	797b      	ldrb	r3, [r7, #5]
 800c248:	ee07 3a90 	vmov	s15, r3
 800c24c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c250:	ed9f 6a07 	vldr	s12, [pc, #28]	; 800c270 <UGV_setMagneticDelination+0x44>
 800c254:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800c258:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c25c:	4b05      	ldr	r3, [pc, #20]	; (800c274 <UGV_setMagneticDelination+0x48>)
 800c25e:	edc3 7a00 	vstr	s15, [r3]
}
 800c262:	bf00      	nop
 800c264:	370c      	adds	r7, #12
 800c266:	46bd      	mov	sp, r7
 800c268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26c:	4770      	bx	lr
 800c26e:	bf00      	nop
 800c270:	42700000 	.word	0x42700000
 800c274:	20004f74 	.word	0x20004f74

0800c278 <UGV_getAzimuth>:
 * typically measured clockwise from true north.
 * @param[in] qmc global variable
 * @return azimuth angle
 */
float UGV_getAzimuth(Qmc * qmc)
{
 800c278:	b5b0      	push	{r4, r5, r7, lr}
 800c27a:	b084      	sub	sp, #16
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
	UGV_getPositionAdc(qmc);
 800c280:	6878      	ldr	r0, [r7, #4]
 800c282:	f7ff fee5 	bl	800c050 <UGV_getPositionAdc>

	float azimuth = atan2(qmc->xPosition, qmc->yPosition) * 180.0f / PI;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800c28c:	4618      	mov	r0, r3
 800c28e:	f7f4 f961 	bl	8000554 <__aeabi_i2d>
 800c292:	4604      	mov	r4, r0
 800c294:	460d      	mov	r5, r1
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800c29c:	4618      	mov	r0, r3
 800c29e:	f7f4 f959 	bl	8000554 <__aeabi_i2d>
 800c2a2:	4602      	mov	r2, r0
 800c2a4:	460b      	mov	r3, r1
 800c2a6:	ec43 2b11 	vmov	d1, r2, r3
 800c2aa:	ec45 4b10 	vmov	d0, r4, r5
 800c2ae:	f001 fe9a 	bl	800dfe6 <atan2>
 800c2b2:	ec51 0b10 	vmov	r0, r1, d0
 800c2b6:	f04f 0200 	mov.w	r2, #0
 800c2ba:	4b21      	ldr	r3, [pc, #132]	; (800c340 <UGV_getAzimuth+0xc8>)
 800c2bc:	f7f4 f9b4 	bl	8000628 <__aeabi_dmul>
 800c2c0:	4602      	mov	r2, r0
 800c2c2:	460b      	mov	r3, r1
 800c2c4:	4610      	mov	r0, r2
 800c2c6:	4619      	mov	r1, r3
 800c2c8:	a31b      	add	r3, pc, #108	; (adr r3, 800c338 <UGV_getAzimuth+0xc0>)
 800c2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ce:	f7f4 fad5 	bl	800087c <__aeabi_ddiv>
 800c2d2:	4602      	mov	r2, r0
 800c2d4:	460b      	mov	r3, r1
 800c2d6:	4610      	mov	r0, r2
 800c2d8:	4619      	mov	r1, r3
 800c2da:	f7f4 fc75 	bl	8000bc8 <__aeabi_d2f>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	60fb      	str	r3, [r7, #12]
	azimuth -= magneticDeclinationDegrees;
 800c2e2:	4b18      	ldr	r3, [pc, #96]	; (800c344 <UGV_getAzimuth+0xcc>)
 800c2e4:	edd3 7a00 	vldr	s15, [r3]
 800c2e8:	ed97 7a03 	vldr	s14, [r7, #12]
 800c2ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c2f0:	edc7 7a03 	vstr	s15, [r7, #12]

	azimuth = (azimuth < 0) ? (azimuth + 360) : azimuth;
 800c2f4:	edd7 7a03 	vldr	s15, [r7, #12]
 800c2f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c2fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c300:	d506      	bpl.n	800c310 <UGV_getAzimuth+0x98>
 800c302:	edd7 7a03 	vldr	s15, [r7, #12]
 800c306:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800c348 <UGV_getAzimuth+0xd0>
 800c30a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c30e:	e001      	b.n	800c314 <UGV_getAzimuth+0x9c>
 800c310:	edd7 7a03 	vldr	s15, [r7, #12]
 800c314:	edc7 7a03 	vstr	s15, [r7, #12]

	azimuth = 360 - azimuth;
 800c318:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800c348 <UGV_getAzimuth+0xd0>
 800c31c:	edd7 7a03 	vldr	s15, [r7, #12]
 800c320:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c324:	edc7 7a03 	vstr	s15, [r7, #12]

	return azimuth;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	ee07 3a90 	vmov	s15, r3
}
 800c32e:	eeb0 0a67 	vmov.f32	s0, s15
 800c332:	3710      	adds	r7, #16
 800c334:	46bd      	mov	sp, r7
 800c336:	bdb0      	pop	{r4, r5, r7, pc}
 800c338:	54442d18 	.word	0x54442d18
 800c33c:	400921fb 	.word	0x400921fb
 800c340:	40668000 	.word	0x40668000
 800c344:	20004f74 	.word	0x20004f74
 800c348:	43b40000 	.word	0x43b40000

0800c34c <UGV_softReset>:
/**
 * @brief Soft reset, restore default value of all registers.
 * @return none
 */
HAL_StatusTypeDef UGV_softReset()
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b086      	sub	sp, #24
 800c350:	af04      	add	r7, sp, #16
	uint8_t reg = 1 << 7;
 800c352:	2380      	movs	r3, #128	; 0x80
 800c354:	71fb      	strb	r3, [r7, #7]

	return HAL_I2C_Mem_Write(i2c, QMC_SLAVE_ADDR, 1, QMC_CONTROL_REG2_ADDR,
 800c356:	4b09      	ldr	r3, [pc, #36]	; (800c37c <UGV_softReset+0x30>)
 800c358:	6818      	ldr	r0, [r3, #0]
 800c35a:	2301      	movs	r3, #1
 800c35c:	9302      	str	r3, [sp, #8]
 800c35e:	2301      	movs	r3, #1
 800c360:	9301      	str	r3, [sp, #4]
 800c362:	1dfb      	adds	r3, r7, #7
 800c364:	9300      	str	r3, [sp, #0]
 800c366:	230a      	movs	r3, #10
 800c368:	2201      	movs	r2, #1
 800c36a:	211a      	movs	r1, #26
 800c36c:	f7f6 fbd8 	bl	8002b20 <HAL_I2C_Mem_Write>
 800c370:	4603      	mov	r3, r0
			  	  	  	  	 &reg, 1, 1);
}
 800c372:	4618      	mov	r0, r3
 800c374:	3708      	adds	r7, #8
 800c376:	46bd      	mov	sp, r7
 800c378:	bd80      	pop	{r7, pc}
 800c37a:	bf00      	nop
 800c37c:	20004f70 	.word	0x20004f70

0800c380 <UGV_rcReceiverInit>:
/**
 * @brief initialize timer2 as as input capture mode, and enable interrupts
 * @return none
 */
void UGV_rcReceiverInit()
{
 800c380:	b580      	push	{r7, lr}
 800c382:	af00      	add	r7, sp, #0
	  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800c384:	2100      	movs	r1, #0
 800c386:	4810      	ldr	r0, [pc, #64]	; (800c3c8 <UGV_rcReceiverInit+0x48>)
 800c388:	f7f9 f8e8 	bl	800555c <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 800c38c:	2104      	movs	r1, #4
 800c38e:	480e      	ldr	r0, [pc, #56]	; (800c3c8 <UGV_rcReceiverInit+0x48>)
 800c390:	f7f9 f8e4 	bl	800555c <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 800c394:	2108      	movs	r1, #8
 800c396:	480c      	ldr	r0, [pc, #48]	; (800c3c8 <UGV_rcReceiverInit+0x48>)
 800c398:	f7f9 f8e0 	bl	800555c <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4);
 800c39c:	210c      	movs	r1, #12
 800c39e:	480a      	ldr	r0, [pc, #40]	; (800c3c8 <UGV_rcReceiverInit+0x48>)
 800c3a0:	f7f9 f8dc 	bl	800555c <HAL_TIM_IC_Start_IT>

	  rcChannel_s.channel1 = CHANNEL_MIDDLE;
 800c3a4:	4b09      	ldr	r3, [pc, #36]	; (800c3cc <UGV_rcReceiverInit+0x4c>)
 800c3a6:	f240 52f5 	movw	r2, #1525	; 0x5f5
 800c3aa:	801a      	strh	r2, [r3, #0]
	  rcChannel_s.channel2 = CHANNEL_MIDDLE;
 800c3ac:	4b07      	ldr	r3, [pc, #28]	; (800c3cc <UGV_rcReceiverInit+0x4c>)
 800c3ae:	f240 52f5 	movw	r2, #1525	; 0x5f5
 800c3b2:	805a      	strh	r2, [r3, #2]
	  rcChannel_s.channel3 = CHANNEL_MIDDLE;
 800c3b4:	4b05      	ldr	r3, [pc, #20]	; (800c3cc <UGV_rcReceiverInit+0x4c>)
 800c3b6:	f240 52f5 	movw	r2, #1525	; 0x5f5
 800c3ba:	809a      	strh	r2, [r3, #4]
	  rcChannel_s.channel4 = CHANNEL_MIDDLE;
 800c3bc:	4b03      	ldr	r3, [pc, #12]	; (800c3cc <UGV_rcReceiverInit+0x4c>)
 800c3be:	f240 52f5 	movw	r2, #1525	; 0x5f5
 800c3c2:	80da      	strh	r2, [r3, #6]
}
 800c3c4:	bf00      	nop
 800c3c6:	bd80      	pop	{r7, pc}
 800c3c8:	20000264 	.word	0x20000264
 800c3cc:	20005000 	.word	0x20005000

0800c3d0 <HAL_TIM_IC_CaptureCallback>:
 * @brief timer rising and falling edge interrupt callback function
 * @param[in] timer base address
 * @return none
 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b082      	sub	sp, #8
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c3e0:	d121      	bne.n	800c426 <HAL_TIM_IC_CaptureCallback+0x56>
	{
		rcActive = 1;
 800c3e2:	4b13      	ldr	r3, [pc, #76]	; (800c430 <HAL_TIM_IC_CaptureCallback+0x60>)
 800c3e4:	2201      	movs	r2, #1
 800c3e6:	701a      	strb	r2, [r3, #0]

		//!< channel1 calculation
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	7f1b      	ldrb	r3, [r3, #28]
 800c3ec:	2b01      	cmp	r3, #1
 800c3ee:	d103      	bne.n	800c3f8 <HAL_TIM_IC_CaptureCallback+0x28>
		{
			UGV_rcDutyCalculate(HAL_TIM_ACTIVE_CHANNEL_1);
 800c3f0:	2001      	movs	r0, #1
 800c3f2:	f000 f81f 	bl	800c434 <UGV_rcDutyCalculate>
		else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
		{
			UGV_rcDutyCalculate(HAL_TIM_ACTIVE_CHANNEL_4);
		}
	}
}
 800c3f6:	e016      	b.n	800c426 <HAL_TIM_IC_CaptureCallback+0x56>
		else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	7f1b      	ldrb	r3, [r3, #28]
 800c3fc:	2b02      	cmp	r3, #2
 800c3fe:	d103      	bne.n	800c408 <HAL_TIM_IC_CaptureCallback+0x38>
			UGV_rcDutyCalculate(HAL_TIM_ACTIVE_CHANNEL_2);
 800c400:	2002      	movs	r0, #2
 800c402:	f000 f817 	bl	800c434 <UGV_rcDutyCalculate>
}
 800c406:	e00e      	b.n	800c426 <HAL_TIM_IC_CaptureCallback+0x56>
		else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	7f1b      	ldrb	r3, [r3, #28]
 800c40c:	2b04      	cmp	r3, #4
 800c40e:	d103      	bne.n	800c418 <HAL_TIM_IC_CaptureCallback+0x48>
			UGV_rcDutyCalculate(HAL_TIM_ACTIVE_CHANNEL_3);
 800c410:	2004      	movs	r0, #4
 800c412:	f000 f80f 	bl	800c434 <UGV_rcDutyCalculate>
}
 800c416:	e006      	b.n	800c426 <HAL_TIM_IC_CaptureCallback+0x56>
		else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	7f1b      	ldrb	r3, [r3, #28]
 800c41c:	2b08      	cmp	r3, #8
 800c41e:	d102      	bne.n	800c426 <HAL_TIM_IC_CaptureCallback+0x56>
			UGV_rcDutyCalculate(HAL_TIM_ACTIVE_CHANNEL_4);
 800c420:	2008      	movs	r0, #8
 800c422:	f000 f807 	bl	800c434 <UGV_rcDutyCalculate>
}
 800c426:	bf00      	nop
 800c428:	3708      	adds	r7, #8
 800c42a:	46bd      	mov	sp, r7
 800c42c:	bd80      	pop	{r7, pc}
 800c42e:	bf00      	nop
 800c430:	20005008 	.word	0x20005008

0800c434 <UGV_rcDutyCalculate>:
 *
 * @param[in] active channel number
 * @return none
 */
static void UGV_rcDutyCalculate(HAL_TIM_ActiveChannel HAL_TIM_ACTIVE_CHANNEL)
{
 800c434:	b590      	push	{r4, r7, lr}
 800c436:	b085      	sub	sp, #20
 800c438:	af00      	add	r7, sp, #0
 800c43a:	4603      	mov	r3, r0
 800c43c:	71fb      	strb	r3, [r7, #7]
	uint16_t *channelPtr = &rcChannel_s.channel1;
 800c43e:	4b3e      	ldr	r3, [pc, #248]	; (800c538 <UGV_rcDutyCalculate+0x104>)
 800c440:	60fb      	str	r3, [r7, #12]

	uint8_t index = (HAL_TIM_ACTIVE_CHANNEL == HAL_TIM_ACTIVE_CHANNEL_1) ? 0 :
 800c442:	79fb      	ldrb	r3, [r7, #7]
 800c444:	2b01      	cmp	r3, #1
 800c446:	d010      	beq.n	800c46a <UGV_rcDutyCalculate+0x36>
 800c448:	79fb      	ldrb	r3, [r7, #7]
 800c44a:	2b02      	cmp	r3, #2
 800c44c:	d00b      	beq.n	800c466 <UGV_rcDutyCalculate+0x32>
 800c44e:	79fb      	ldrb	r3, [r7, #7]
 800c450:	2b04      	cmp	r3, #4
 800c452:	d006      	beq.n	800c462 <UGV_rcDutyCalculate+0x2e>
 800c454:	79fb      	ldrb	r3, [r7, #7]
 800c456:	2b08      	cmp	r3, #8
 800c458:	d101      	bne.n	800c45e <UGV_rcDutyCalculate+0x2a>
 800c45a:	2303      	movs	r3, #3
 800c45c:	e006      	b.n	800c46c <UGV_rcDutyCalculate+0x38>
 800c45e:	2364      	movs	r3, #100	; 0x64
 800c460:	e004      	b.n	800c46c <UGV_rcDutyCalculate+0x38>
 800c462:	2302      	movs	r3, #2
 800c464:	e002      	b.n	800c46c <UGV_rcDutyCalculate+0x38>
 800c466:	2301      	movs	r3, #1
 800c468:	e000      	b.n	800c46c <UGV_rcDutyCalculate+0x38>
 800c46a:	2300      	movs	r3, #0
 800c46c:	72fb      	strb	r3, [r7, #11]
			        (HAL_TIM_ACTIVE_CHANNEL == HAL_TIM_ACTIVE_CHANNEL_2) ? 1 :
			        (HAL_TIM_ACTIVE_CHANNEL == HAL_TIM_ACTIVE_CHANNEL_3) ? 2 :
			        (HAL_TIM_ACTIVE_CHANNEL == HAL_TIM_ACTIVE_CHANNEL_4) ? 3 : 100;

	if(tim2FirstCap[index] == 0)
 800c46e:	7afb      	ldrb	r3, [r7, #11]
 800c470:	4a32      	ldr	r2, [pc, #200]	; (800c53c <UGV_rcDutyCalculate+0x108>)
 800c472:	5cd3      	ldrb	r3, [r2, r3]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d10f      	bne.n	800c498 <UGV_rcDutyCalculate+0x64>
	{
		//!< channel values -> 0-4-8-12 that is four time index
		tim2IcVal1[index] = HAL_TIM_ReadCapturedValue(&htim2, index * 4);
 800c478:	7afb      	ldrb	r3, [r7, #11]
 800c47a:	009b      	lsls	r3, r3, #2
 800c47c:	7afc      	ldrb	r4, [r7, #11]
 800c47e:	4619      	mov	r1, r3
 800c480:	482f      	ldr	r0, [pc, #188]	; (800c540 <UGV_rcDutyCalculate+0x10c>)
 800c482:	f7f9 fbe1 	bl	8005c48 <HAL_TIM_ReadCapturedValue>
 800c486:	4603      	mov	r3, r0
 800c488:	4a2e      	ldr	r2, [pc, #184]	; (800c544 <UGV_rcDutyCalculate+0x110>)
 800c48a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		tim2FirstCap[index] = 1;
 800c48e:	7afb      	ldrb	r3, [r7, #11]
 800c490:	4a2a      	ldr	r2, [pc, #168]	; (800c53c <UGV_rcDutyCalculate+0x108>)
 800c492:	2101      	movs	r1, #1
 800c494:	54d1      	strb	r1, [r2, r3]


		channelPtr[index] = tim2Difference[index] * mFactor;
		tim2FirstCap[index] = 0;
	}
}
 800c496:	e04b      	b.n	800c530 <UGV_rcDutyCalculate+0xfc>
		tim2IcVal2[index] = HAL_TIM_ReadCapturedValue(&htim2, index * 4);
 800c498:	7afb      	ldrb	r3, [r7, #11]
 800c49a:	009b      	lsls	r3, r3, #2
 800c49c:	7afc      	ldrb	r4, [r7, #11]
 800c49e:	4619      	mov	r1, r3
 800c4a0:	4827      	ldr	r0, [pc, #156]	; (800c540 <UGV_rcDutyCalculate+0x10c>)
 800c4a2:	f7f9 fbd1 	bl	8005c48 <HAL_TIM_ReadCapturedValue>
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	4a27      	ldr	r2, [pc, #156]	; (800c548 <UGV_rcDutyCalculate+0x114>)
 800c4aa:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		if(tim2IcVal2[index] > tim2IcVal1[index])
 800c4ae:	7afb      	ldrb	r3, [r7, #11]
 800c4b0:	4a25      	ldr	r2, [pc, #148]	; (800c548 <UGV_rcDutyCalculate+0x114>)
 800c4b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c4b6:	7afb      	ldrb	r3, [r7, #11]
 800c4b8:	4922      	ldr	r1, [pc, #136]	; (800c544 <UGV_rcDutyCalculate+0x110>)
 800c4ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c4be:	429a      	cmp	r2, r3
 800c4c0:	d90d      	bls.n	800c4de <UGV_rcDutyCalculate+0xaa>
			tim2Difference[index] = tim2IcVal2[index] - tim2IcVal1[index];
 800c4c2:	7afb      	ldrb	r3, [r7, #11]
 800c4c4:	4a20      	ldr	r2, [pc, #128]	; (800c548 <UGV_rcDutyCalculate+0x114>)
 800c4c6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c4ca:	7afb      	ldrb	r3, [r7, #11]
 800c4cc:	4a1d      	ldr	r2, [pc, #116]	; (800c544 <UGV_rcDutyCalculate+0x110>)
 800c4ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c4d2:	7afb      	ldrb	r3, [r7, #11]
 800c4d4:	1a8a      	subs	r2, r1, r2
 800c4d6:	491d      	ldr	r1, [pc, #116]	; (800c54c <UGV_rcDutyCalculate+0x118>)
 800c4d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c4dc:	e00d      	b.n	800c4fa <UGV_rcDutyCalculate+0xc6>
			tim2Difference[index] = (0xFFFFFFFF - tim2IcVal1[index]) + tim2IcVal2[index];
 800c4de:	7afb      	ldrb	r3, [r7, #11]
 800c4e0:	4a19      	ldr	r2, [pc, #100]	; (800c548 <UGV_rcDutyCalculate+0x114>)
 800c4e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c4e6:	7afb      	ldrb	r3, [r7, #11]
 800c4e8:	4916      	ldr	r1, [pc, #88]	; (800c544 <UGV_rcDutyCalculate+0x110>)
 800c4ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c4ee:	1ad2      	subs	r2, r2, r3
 800c4f0:	7afb      	ldrb	r3, [r7, #11]
 800c4f2:	3a01      	subs	r2, #1
 800c4f4:	4915      	ldr	r1, [pc, #84]	; (800c54c <UGV_rcDutyCalculate+0x118>)
 800c4f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		channelPtr[index] = tim2Difference[index] * mFactor;
 800c4fa:	7afb      	ldrb	r3, [r7, #11]
 800c4fc:	4a13      	ldr	r2, [pc, #76]	; (800c54c <UGV_rcDutyCalculate+0x118>)
 800c4fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c502:	ee07 3a90 	vmov	s15, r3
 800c506:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c50a:	4b11      	ldr	r3, [pc, #68]	; (800c550 <UGV_rcDutyCalculate+0x11c>)
 800c50c:	edd3 7a00 	vldr	s15, [r3]
 800c510:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c514:	7afb      	ldrb	r3, [r7, #11]
 800c516:	005b      	lsls	r3, r3, #1
 800c518:	68fa      	ldr	r2, [r7, #12]
 800c51a:	4413      	add	r3, r2
 800c51c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c520:	ee17 2a90 	vmov	r2, s15
 800c524:	b292      	uxth	r2, r2
 800c526:	801a      	strh	r2, [r3, #0]
		tim2FirstCap[index] = 0;
 800c528:	7afb      	ldrb	r3, [r7, #11]
 800c52a:	4a04      	ldr	r2, [pc, #16]	; (800c53c <UGV_rcDutyCalculate+0x108>)
 800c52c:	2100      	movs	r1, #0
 800c52e:	54d1      	strb	r1, [r2, r3]
}
 800c530:	bf00      	nop
 800c532:	3714      	adds	r7, #20
 800c534:	46bd      	mov	sp, r7
 800c536:	bd90      	pop	{r4, r7, pc}
 800c538:	20005000 	.word	0x20005000
 800c53c:	20004fcc 	.word	0x20004fcc
 800c540:	20000264 	.word	0x20000264
 800c544:	20004fd0 	.word	0x20004fd0
 800c548:	20004fe0 	.word	0x20004fe0
 800c54c:	20004ff0 	.word	0x20004ff0
 800c550:	20000048 	.word	0x20000048

0800c554 <RCFilter_Init>:
#include "rcFilter.h"

void RCFilter_Init(RCFilter *filt, float cutoffFreqHz, float sampleTimeS) {
 800c554:	b480      	push	{r7}
 800c556:	b087      	sub	sp, #28
 800c558:	af00      	add	r7, sp, #0
 800c55a:	60f8      	str	r0, [r7, #12]
 800c55c:	ed87 0a02 	vstr	s0, [r7, #8]
 800c560:	edc7 0a01 	vstr	s1, [r7, #4]

	/* Compute equivalent 'RC' constant from cut-off frequency */
	float RC = 1.0f / (6.28318530718f * cutoffFreqHz);
 800c564:	edd7 7a02 	vldr	s15, [r7, #8]
 800c568:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800c5cc <RCFilter_Init+0x78>
 800c56c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c570:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c574:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c578:	edc7 7a05 	vstr	s15, [r7, #20]

	/* Pre-compute filter coefficients for first-order low-pass filter */
	filt->coeff[0] = sampleTimeS / (sampleTimeS + RC);
 800c57c:	ed97 7a01 	vldr	s14, [r7, #4]
 800c580:	edd7 7a05 	vldr	s15, [r7, #20]
 800c584:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c588:	edd7 6a01 	vldr	s13, [r7, #4]
 800c58c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	edc3 7a00 	vstr	s15, [r3]
	filt->coeff[1] = RC / (sampleTimeS + RC);
 800c596:	ed97 7a01 	vldr	s14, [r7, #4]
 800c59a:	edd7 7a05 	vldr	s15, [r7, #20]
 800c59e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c5a2:	edd7 6a05 	vldr	s13, [r7, #20]
 800c5a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	edc3 7a01 	vstr	s15, [r3, #4]

	/* Clear output buffer */
	filt->out[0] = 0.0f;
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	f04f 0200 	mov.w	r2, #0
 800c5b6:	609a      	str	r2, [r3, #8]
	filt->out[1] = 0.0f;
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	f04f 0200 	mov.w	r2, #0
 800c5be:	60da      	str	r2, [r3, #12]
}
 800c5c0:	bf00      	nop
 800c5c2:	371c      	adds	r7, #28
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ca:	4770      	bx	lr
 800c5cc:	40c90fdb 	.word	0x40c90fdb

0800c5d0 <RCFilter_Update>:

float RCFilter_Update(RCFilter *filt, float inp) {
 800c5d0:	b480      	push	{r7}
 800c5d2:	b083      	sub	sp, #12
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
 800c5d8:	ed87 0a00 	vstr	s0, [r7]

	/* Shift output samples */
	filt->out[1] = filt->out[0];
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	689a      	ldr	r2, [r3, #8]
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	60da      	str	r2, [r3, #12]

	/* Compute new output sample */
	filt->out[0] = filt->coeff[0] * inp + filt->coeff[1] * filt->out[1];
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	ed93 7a00 	vldr	s14, [r3]
 800c5ea:	edd7 7a00 	vldr	s15, [r7]
 800c5ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	edd3 6a01 	vldr	s13, [r3, #4]
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	edd3 7a03 	vldr	s15, [r3, #12]
 800c5fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c602:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	edc3 7a02 	vstr	s15, [r3, #8]

	/* Return filtered sample */
	return (filt->out[0]);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	689b      	ldr	r3, [r3, #8]
 800c610:	ee07 3a90 	vmov	s15, r3
}
 800c614:	eeb0 0a67 	vmov.f32	s0, s15
 800c618:	370c      	adds	r7, #12
 800c61a:	46bd      	mov	sp, r7
 800c61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c620:	4770      	bx	lr

0800c622 <SX1278_SPIRead>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 800c622:	b580      	push	{r7, lr}
 800c624:	b084      	sub	sp, #16
 800c626:	af00      	add	r7, sp, #0
 800c628:	6078      	str	r0, [r7, #4]
 800c62a:	460b      	mov	r3, r1
 800c62c:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	78fa      	ldrb	r2, [r7, #3]
 800c634:	4611      	mov	r1, r2
 800c636:	4618      	mov	r0, r3
 800c638:	f000 fbdd 	bl	800cdf6 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	4618      	mov	r0, r3
 800c642:	f000 fbf8 	bl	800ce36 <SX1278_hw_SPIReadByte>
 800c646:	4603      	mov	r3, r0
 800c648:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	2101      	movs	r1, #1
 800c650:	4618      	mov	r0, r3
 800c652:	f000 fb95 	bl	800cd80 <SX1278_hw_SetNSS>
	return tmp;
 800c656:	7bfb      	ldrb	r3, [r7, #15]
}
 800c658:	4618      	mov	r0, r3
 800c65a:	3710      	adds	r7, #16
 800c65c:	46bd      	mov	sp, r7
 800c65e:	bd80      	pop	{r7, pc}

0800c660 <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 800c660:	b580      	push	{r7, lr}
 800c662:	b082      	sub	sp, #8
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
 800c668:	460b      	mov	r3, r1
 800c66a:	70fb      	strb	r3, [r7, #3]
 800c66c:	4613      	mov	r3, r2
 800c66e:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	2100      	movs	r1, #0
 800c676:	4618      	mov	r0, r3
 800c678:	f000 fb82 	bl	800cd80 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681a      	ldr	r2, [r3, #0]
 800c680:	78fb      	ldrb	r3, [r7, #3]
 800c682:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c686:	b2db      	uxtb	r3, r3
 800c688:	4619      	mov	r1, r3
 800c68a:	4610      	mov	r0, r2
 800c68c:	f000 fbb3 	bl	800cdf6 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	78ba      	ldrb	r2, [r7, #2]
 800c696:	4611      	mov	r1, r2
 800c698:	4618      	mov	r0, r3
 800c69a:	f000 fbac 	bl	800cdf6 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	2101      	movs	r1, #1
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f000 fb6b 	bl	800cd80 <SX1278_hw_SetNSS>
}
 800c6aa:	bf00      	nop
 800c6ac:	3708      	adds	r7, #8
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	bd80      	pop	{r7, pc}

0800c6b2 <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length) {
 800c6b2:	b590      	push	{r4, r7, lr}
 800c6b4:	b087      	sub	sp, #28
 800c6b6:	af00      	add	r7, sp, #0
 800c6b8:	60f8      	str	r0, [r7, #12]
 800c6ba:	607a      	str	r2, [r7, #4]
 800c6bc:	461a      	mov	r2, r3
 800c6be:	460b      	mov	r3, r1
 800c6c0:	72fb      	strb	r3, [r7, #11]
 800c6c2:	4613      	mov	r3, r2
 800c6c4:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 800c6c6:	7abb      	ldrb	r3, [r7, #10]
 800c6c8:	2b01      	cmp	r3, #1
 800c6ca:	d927      	bls.n	800c71c <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	2100      	movs	r1, #0
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f000 fb54 	bl	800cd80 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	7afa      	ldrb	r2, [r7, #11]
 800c6de:	4611      	mov	r1, r2
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	f000 fb88 	bl	800cdf6 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	75fb      	strb	r3, [r7, #23]
 800c6ea:	e00c      	b.n	800c706 <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	6819      	ldr	r1, [r3, #0]
 800c6f0:	7dfb      	ldrb	r3, [r7, #23]
 800c6f2:	687a      	ldr	r2, [r7, #4]
 800c6f4:	18d4      	adds	r4, r2, r3
 800c6f6:	4608      	mov	r0, r1
 800c6f8:	f000 fb9d 	bl	800ce36 <SX1278_hw_SPIReadByte>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 800c700:	7dfb      	ldrb	r3, [r7, #23]
 800c702:	3301      	adds	r3, #1
 800c704:	75fb      	strb	r3, [r7, #23]
 800c706:	7dfa      	ldrb	r2, [r7, #23]
 800c708:	7abb      	ldrb	r3, [r7, #10]
 800c70a:	429a      	cmp	r2, r3
 800c70c:	d3ee      	bcc.n	800c6ec <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	2101      	movs	r1, #1
 800c714:	4618      	mov	r0, r3
 800c716:	f000 fb33 	bl	800cd80 <SX1278_hw_SetNSS>
 800c71a:	e000      	b.n	800c71e <SX1278_SPIBurstRead+0x6c>
		return;
 800c71c:	bf00      	nop
	}
}
 800c71e:	371c      	adds	r7, #28
 800c720:	46bd      	mov	sp, r7
 800c722:	bd90      	pop	{r4, r7, pc}

0800c724 <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 800c724:	b580      	push	{r7, lr}
 800c726:	b086      	sub	sp, #24
 800c728:	af00      	add	r7, sp, #0
 800c72a:	60f8      	str	r0, [r7, #12]
 800c72c:	607a      	str	r2, [r7, #4]
 800c72e:	461a      	mov	r2, r3
 800c730:	460b      	mov	r3, r1
 800c732:	72fb      	strb	r3, [r7, #11]
 800c734:	4613      	mov	r3, r2
 800c736:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 800c738:	7abb      	ldrb	r3, [r7, #10]
 800c73a:	2b01      	cmp	r3, #1
 800c73c:	d929      	bls.n	800c792 <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	2100      	movs	r1, #0
 800c744:	4618      	mov	r0, r3
 800c746:	f000 fb1b 	bl	800cd80 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	681a      	ldr	r2, [r3, #0]
 800c74e:	7afb      	ldrb	r3, [r7, #11]
 800c750:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c754:	b2db      	uxtb	r3, r3
 800c756:	4619      	mov	r1, r3
 800c758:	4610      	mov	r0, r2
 800c75a:	f000 fb4c 	bl	800cdf6 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800c75e:	2300      	movs	r3, #0
 800c760:	75fb      	strb	r3, [r7, #23]
 800c762:	e00b      	b.n	800c77c <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	6818      	ldr	r0, [r3, #0]
 800c768:	7dfb      	ldrb	r3, [r7, #23]
 800c76a:	687a      	ldr	r2, [r7, #4]
 800c76c:	4413      	add	r3, r2
 800c76e:	781b      	ldrb	r3, [r3, #0]
 800c770:	4619      	mov	r1, r3
 800c772:	f000 fb40 	bl	800cdf6 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800c776:	7dfb      	ldrb	r3, [r7, #23]
 800c778:	3301      	adds	r3, #1
 800c77a:	75fb      	strb	r3, [r7, #23]
 800c77c:	7dfa      	ldrb	r2, [r7, #23]
 800c77e:	7abb      	ldrb	r3, [r7, #10]
 800c780:	429a      	cmp	r2, r3
 800c782:	d3ef      	bcc.n	800c764 <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	2101      	movs	r1, #1
 800c78a:	4618      	mov	r0, r3
 800c78c:	f000 faf8 	bl	800cd80 <SX1278_hw_SetNSS>
 800c790:	e000      	b.n	800c794 <SX1278_SPIBurstWrite+0x70>
		return;
 800c792:	bf00      	nop
	}
}
 800c794:	3718      	adds	r7, #24
 800c796:	46bd      	mov	sp, r7
 800c798:	bd80      	pop	{r7, pc}
	...

0800c79c <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b086      	sub	sp, #24
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f000 f90d 	bl	800c9c4 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 800c7aa:	200f      	movs	r0, #15
 800c7ac:	f000 fb69 	bl	800ce82 <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	f000 f917 	bl	800c9e4 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800c7bc:	f04f 0000 	mov.w	r0, #0
 800c7c0:	f04f 0100 	mov.w	r1, #0
 800c7c4:	04d9      	lsls	r1, r3, #19
 800c7c6:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 800c7ca:	04d0      	lsls	r0, r2, #19
 800c7cc:	4a6f      	ldr	r2, [pc, #444]	; (800c98c <SX1278_config+0x1f0>)
 800c7ce:	f04f 0300 	mov.w	r3, #0
 800c7d2:	f7f4 fa49 	bl	8000c68 <__aeabi_uldivmod>
 800c7d6:	4602      	mov	r2, r0
 800c7d8:	460b      	mov	r3, r1
 800c7da:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 800c7de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c7e2:	f04f 0200 	mov.w	r2, #0
 800c7e6:	f04f 0300 	mov.w	r3, #0
 800c7ea:	0c02      	lsrs	r2, r0, #16
 800c7ec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800c7f0:	0c0b      	lsrs	r3, r1, #16
 800c7f2:	b2d3      	uxtb	r3, r2
 800c7f4:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 800c7f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c7fa:	f04f 0200 	mov.w	r2, #0
 800c7fe:	f04f 0300 	mov.w	r3, #0
 800c802:	0a02      	lsrs	r2, r0, #8
 800c804:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c808:	0a0b      	lsrs	r3, r1, #8
 800c80a:	b2d3      	uxtb	r3, r2
 800c80c:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 800c80e:	7c3b      	ldrb	r3, [r7, #16]
 800c810:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 800c812:	f107 020c 	add.w	r2, r7, #12
 800c816:	2303      	movs	r3, #3
 800c818:	2106      	movs	r1, #6
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f7ff ff82 	bl	800c724 <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 800c820:	2234      	movs	r2, #52	; 0x34
 800c822:	2139      	movs	r1, #57	; 0x39
 800c824:	6878      	ldr	r0, [r7, #4]
 800c826:	f7ff ff1b 	bl	800c660 <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	7c1b      	ldrb	r3, [r3, #16]
 800c82e:	461a      	mov	r2, r3
 800c830:	4b57      	ldr	r3, [pc, #348]	; (800c990 <SX1278_config+0x1f4>)
 800c832:	5c9b      	ldrb	r3, [r3, r2]
 800c834:	461a      	mov	r2, r3
 800c836:	2109      	movs	r1, #9
 800c838:	6878      	ldr	r0, [r7, #4]
 800c83a:	f7ff ff11 	bl	800c660 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 800c83e:	220b      	movs	r2, #11
 800c840:	210b      	movs	r1, #11
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	f7ff ff0c 	bl	800c660 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 800c848:	2223      	movs	r2, #35	; 0x23
 800c84a:	210c      	movs	r1, #12
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f7ff ff07 	bl	800c660 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	7c5b      	ldrb	r3, [r3, #17]
 800c856:	461a      	mov	r2, r3
 800c858:	4b4e      	ldr	r3, [pc, #312]	; (800c994 <SX1278_config+0x1f8>)
 800c85a:	5c9b      	ldrb	r3, [r3, r2]
 800c85c:	2b06      	cmp	r3, #6
 800c85e:	d147      	bne.n	800c8f0 <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	7c9b      	ldrb	r3, [r3, #18]
 800c864:	461a      	mov	r2, r3
 800c866:	4b4c      	ldr	r3, [pc, #304]	; (800c998 <SX1278_config+0x1fc>)
 800c868:	5c9b      	ldrb	r3, [r3, r2]
 800c86a:	011b      	lsls	r3, r3, #4
 800c86c:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	7cdb      	ldrb	r3, [r3, #19]
 800c872:	4619      	mov	r1, r3
 800c874:	4b49      	ldr	r3, [pc, #292]	; (800c99c <SX1278_config+0x200>)
 800c876:	5c5b      	ldrb	r3, [r3, r1]
 800c878:	005b      	lsls	r3, r3, #1
 800c87a:	b2db      	uxtb	r3, r3
 800c87c:	4413      	add	r3, r2
 800c87e:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800c880:	3301      	adds	r3, #1
 800c882:	b2db      	uxtb	r3, r3
 800c884:	461a      	mov	r2, r3
 800c886:	211d      	movs	r1, #29
 800c888:	6878      	ldr	r0, [r7, #4]
 800c88a:	f7ff fee9 	bl	800c660 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	7c5b      	ldrb	r3, [r3, #17]
 800c892:	461a      	mov	r2, r3
 800c894:	4b3f      	ldr	r3, [pc, #252]	; (800c994 <SX1278_config+0x1f8>)
 800c896:	5c9b      	ldrb	r3, [r3, r2]
 800c898:	011b      	lsls	r3, r3, #4
 800c89a:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	7d1b      	ldrb	r3, [r3, #20]
 800c8a0:	4619      	mov	r1, r3
 800c8a2:	4b3f      	ldr	r3, [pc, #252]	; (800c9a0 <SX1278_config+0x204>)
 800c8a4:	5c5b      	ldrb	r3, [r3, r1]
 800c8a6:	009b      	lsls	r3, r3, #2
 800c8a8:	b2db      	uxtb	r3, r3
 800c8aa:	4413      	add	r3, r2
 800c8ac:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800c8ae:	3303      	adds	r3, #3
 800c8b0:	b2db      	uxtb	r3, r3
 800c8b2:	461a      	mov	r2, r3
 800c8b4:	211e      	movs	r1, #30
 800c8b6:	6878      	ldr	r0, [r7, #4]
 800c8b8:	f7ff fed2 	bl	800c660 <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 800c8bc:	2131      	movs	r1, #49	; 0x31
 800c8be:	6878      	ldr	r0, [r7, #4]
 800c8c0:	f7ff feaf 	bl	800c622 <SX1278_SPIRead>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 800c8c8:	7bfb      	ldrb	r3, [r7, #15]
 800c8ca:	f023 0307 	bic.w	r3, r3, #7
 800c8ce:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 800c8d0:	7bfb      	ldrb	r3, [r7, #15]
 800c8d2:	f043 0305 	orr.w	r3, r3, #5
 800c8d6:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 800c8d8:	7bfb      	ldrb	r3, [r7, #15]
 800c8da:	461a      	mov	r2, r3
 800c8dc:	2131      	movs	r1, #49	; 0x31
 800c8de:	6878      	ldr	r0, [r7, #4]
 800c8e0:	f7ff febe 	bl	800c660 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 800c8e4:	220c      	movs	r2, #12
 800c8e6:	2137      	movs	r1, #55	; 0x37
 800c8e8:	6878      	ldr	r0, [r7, #4]
 800c8ea:	f7ff feb9 	bl	800c660 <SX1278_SPIWrite>
 800c8ee:	e029      	b.n	800c944 <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	7c9b      	ldrb	r3, [r3, #18]
 800c8f4:	461a      	mov	r2, r3
 800c8f6:	4b28      	ldr	r3, [pc, #160]	; (800c998 <SX1278_config+0x1fc>)
 800c8f8:	5c9b      	ldrb	r3, [r3, r2]
 800c8fa:	011b      	lsls	r3, r3, #4
 800c8fc:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	7cdb      	ldrb	r3, [r3, #19]
 800c902:	4619      	mov	r1, r3
 800c904:	4b25      	ldr	r3, [pc, #148]	; (800c99c <SX1278_config+0x200>)
 800c906:	5c5b      	ldrb	r3, [r3, r1]
 800c908:	005b      	lsls	r3, r3, #1
 800c90a:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800c90c:	4413      	add	r3, r2
 800c90e:	b2db      	uxtb	r3, r3
 800c910:	461a      	mov	r2, r3
 800c912:	211d      	movs	r1, #29
 800c914:	6878      	ldr	r0, [r7, #4]
 800c916:	f7ff fea3 	bl	800c660 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	7c5b      	ldrb	r3, [r3, #17]
 800c91e:	461a      	mov	r2, r3
 800c920:	4b1c      	ldr	r3, [pc, #112]	; (800c994 <SX1278_config+0x1f8>)
 800c922:	5c9b      	ldrb	r3, [r3, r2]
 800c924:	011b      	lsls	r3, r3, #4
 800c926:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	7d1b      	ldrb	r3, [r3, #20]
 800c92c:	4619      	mov	r1, r3
 800c92e:	4b1c      	ldr	r3, [pc, #112]	; (800c9a0 <SX1278_config+0x204>)
 800c930:	5c5b      	ldrb	r3, [r3, r1]
 800c932:	009b      	lsls	r3, r3, #2
 800c934:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800c936:	4413      	add	r3, r2
 800c938:	b2db      	uxtb	r3, r3
 800c93a:	461a      	mov	r2, r3
 800c93c:	211e      	movs	r1, #30
 800c93e:	6878      	ldr	r0, [r7, #4]
 800c940:	f7ff fe8e 	bl	800c660 <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 800c944:	2204      	movs	r2, #4
 800c946:	2126      	movs	r1, #38	; 0x26
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	f7ff fe89 	bl	800c660 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 800c94e:	2208      	movs	r2, #8
 800c950:	211f      	movs	r1, #31
 800c952:	6878      	ldr	r0, [r7, #4]
 800c954:	f7ff fe84 	bl	800c660 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 800c958:	2200      	movs	r2, #0
 800c95a:	2120      	movs	r1, #32
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	f7ff fe7f 	bl	800c660 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 800c962:	2208      	movs	r2, #8
 800c964:	2121      	movs	r1, #33	; 0x21
 800c966:	6878      	ldr	r0, [r7, #4]
 800c968:	f7ff fe7a 	bl	800c660 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 800c96c:	2201      	movs	r2, #1
 800c96e:	2141      	movs	r1, #65	; 0x41
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f7ff fe75 	bl	800c660 <SX1278_SPIWrite>
	module->readBytes = 0;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	2200      	movs	r2, #0
 800c97a:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	SX1278_standby(module); //Entry standby mode
 800c97e:	6878      	ldr	r0, [r7, #4]
 800c980:	f000 f810 	bl	800c9a4 <SX1278_standby>
}
 800c984:	bf00      	nop
 800c986:	3718      	adds	r7, #24
 800c988:	46bd      	mov	sp, r7
 800c98a:	bd80      	pop	{r7, pc}
 800c98c:	01e84800 	.word	0x01e84800
 800c990:	0800f3b8 	.word	0x0800f3b8
 800c994:	0800f3bc 	.word	0x0800f3bc
 800c998:	0800f3c4 	.word	0x0800f3c4
 800c99c:	0800f3d0 	.word	0x0800f3d0
 800c9a0:	0800f3d4 	.word	0x0800f3d4

0800c9a4 <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b082      	sub	sp, #8
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 800c9ac:	2209      	movs	r2, #9
 800c9ae:	2101      	movs	r1, #1
 800c9b0:	6878      	ldr	r0, [r7, #4]
 800c9b2:	f7ff fe55 	bl	800c660 <SX1278_SPIWrite>
	module->status = STANDBY;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	2201      	movs	r2, #1
 800c9ba:	759a      	strb	r2, [r3, #22]
}
 800c9bc:	bf00      	nop
 800c9be:	3708      	adds	r7, #8
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bd80      	pop	{r7, pc}

0800c9c4 <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b082      	sub	sp, #8
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 800c9cc:	2208      	movs	r2, #8
 800c9ce:	2101      	movs	r1, #1
 800c9d0:	6878      	ldr	r0, [r7, #4]
 800c9d2:	f7ff fe45 	bl	800c660 <SX1278_SPIWrite>
	module->status = SLEEP;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	2200      	movs	r2, #0
 800c9da:	759a      	strb	r2, [r3, #22]
}
 800c9dc:	bf00      	nop
 800c9de:	3708      	adds	r7, #8
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd80      	pop	{r7, pc}

0800c9e4 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b082      	sub	sp, #8
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 800c9ec:	2288      	movs	r2, #136	; 0x88
 800c9ee:	2101      	movs	r1, #1
 800c9f0:	6878      	ldr	r0, [r7, #4]
 800c9f2:	f7ff fe35 	bl	800c660 <SX1278_SPIWrite>
}
 800c9f6:	bf00      	nop
 800c9f8:	3708      	adds	r7, #8
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}

0800c9fe <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 800c9fe:	b580      	push	{r7, lr}
 800ca00:	b082      	sub	sp, #8
 800ca02:	af00      	add	r7, sp, #0
 800ca04:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 800ca06:	22ff      	movs	r2, #255	; 0xff
 800ca08:	2112      	movs	r1, #18
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	f7ff fe28 	bl	800c660 <SX1278_SPIWrite>
}
 800ca10:	bf00      	nop
 800ca12:	3708      	adds	r7, #8
 800ca14:	46bd      	mov	sp, r7
 800ca16:	bd80      	pop	{r7, pc}

0800ca18 <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b086      	sub	sp, #24
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	60f8      	str	r0, [r7, #12]
 800ca20:	460b      	mov	r3, r1
 800ca22:	607a      	str	r2, [r7, #4]
 800ca24:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	7afa      	ldrb	r2, [r7, #11]
 800ca2a:	755a      	strb	r2, [r3, #21]

	SX1278_config(module);		//Setting base parameter
 800ca2c:	68f8      	ldr	r0, [r7, #12]
 800ca2e:	f7ff feb5 	bl	800c79c <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 800ca32:	2284      	movs	r2, #132	; 0x84
 800ca34:	214d      	movs	r1, #77	; 0x4d
 800ca36:	68f8      	ldr	r0, [r7, #12]
 800ca38:	f7ff fe12 	bl	800c660 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 800ca3c:	22ff      	movs	r2, #255	; 0xff
 800ca3e:	2124      	movs	r1, #36	; 0x24
 800ca40:	68f8      	ldr	r0, [r7, #12]
 800ca42:	f7ff fe0d 	bl	800c660 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 800ca46:	2201      	movs	r2, #1
 800ca48:	2140      	movs	r1, #64	; 0x40
 800ca4a:	68f8      	ldr	r0, [r7, #12]
 800ca4c:	f7ff fe08 	bl	800c660 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 800ca50:	223f      	movs	r2, #63	; 0x3f
 800ca52:	2111      	movs	r1, #17
 800ca54:	68f8      	ldr	r0, [r7, #12]
 800ca56:	f7ff fe03 	bl	800c660 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 800ca5a:	68f8      	ldr	r0, [r7, #12]
 800ca5c:	f7ff ffcf 	bl	800c9fe <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 800ca60:	7afb      	ldrb	r3, [r7, #11]
 800ca62:	461a      	mov	r2, r3
 800ca64:	2122      	movs	r1, #34	; 0x22
 800ca66:	68f8      	ldr	r0, [r7, #12]
 800ca68:	f7ff fdfa 	bl	800c660 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 800ca6c:	210f      	movs	r1, #15
 800ca6e:	68f8      	ldr	r0, [r7, #12]
 800ca70:	f7ff fdd7 	bl	800c622 <SX1278_SPIRead>
 800ca74:	4603      	mov	r3, r0
 800ca76:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 800ca78:	7dfb      	ldrb	r3, [r7, #23]
 800ca7a:	461a      	mov	r2, r3
 800ca7c:	210d      	movs	r1, #13
 800ca7e:	68f8      	ldr	r0, [r7, #12]
 800ca80:	f7ff fdee 	bl	800c660 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 800ca84:	228d      	movs	r2, #141	; 0x8d
 800ca86:	2101      	movs	r1, #1
 800ca88:	68f8      	ldr	r0, [r7, #12]
 800ca8a:	f7ff fde9 	bl	800c660 <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	2200      	movs	r2, #0
 800ca92:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 800ca96:	2118      	movs	r1, #24
 800ca98:	68f8      	ldr	r0, [r7, #12]
 800ca9a:	f7ff fdc2 	bl	800c622 <SX1278_SPIRead>
 800ca9e:	4603      	mov	r3, r0
 800caa0:	f003 0304 	and.w	r3, r3, #4
 800caa4:	2b04      	cmp	r3, #4
 800caa6:	d104      	bne.n	800cab2 <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	2203      	movs	r2, #3
 800caac:	759a      	strb	r2, [r3, #22]
			return 1;
 800caae:	2301      	movs	r3, #1
 800cab0:	e013      	b.n	800cada <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	3b01      	subs	r3, #1
 800cab6:	607b      	str	r3, [r7, #4]
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d109      	bne.n	800cad2 <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	4618      	mov	r0, r3
 800cac4:	f000 f973 	bl	800cdae <SX1278_hw_Reset>
			SX1278_config(module);
 800cac8:	68f8      	ldr	r0, [r7, #12]
 800caca:	f7ff fe67 	bl	800c79c <SX1278_config>
			return 0;
 800cace:	2300      	movs	r3, #0
 800cad0:	e003      	b.n	800cada <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 800cad2:	2001      	movs	r0, #1
 800cad4:	f000 f9d5 	bl	800ce82 <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 800cad8:	e7dd      	b.n	800ca96 <SX1278_LoRaEntryRx+0x7e>
	}
}
 800cada:	4618      	mov	r0, r3
 800cadc:	3718      	adds	r7, #24
 800cade:	46bd      	mov	sp, r7
 800cae0:	bd80      	pop	{r7, pc}

0800cae2 <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t *module) {
 800cae2:	b580      	push	{r7, lr}
 800cae4:	b084      	sub	sp, #16
 800cae6:	af00      	add	r7, sp, #0
 800cae8:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	4618      	mov	r0, r3
 800caf0:	f000 f9d2 	bl	800ce98 <SX1278_hw_GetDIO0>
 800caf4:	4603      	mov	r3, r0
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d030      	beq.n	800cb5c <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	3317      	adds	r3, #23
 800cafe:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cb02:	2100      	movs	r1, #0
 800cb04:	4618      	mov	r0, r3
 800cb06:	f000 fd83 	bl	800d610 <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 800cb0a:	2110      	movs	r1, #16
 800cb0c:	6878      	ldr	r0, [r7, #4]
 800cb0e:	f7ff fd88 	bl	800c622 <SX1278_SPIRead>
 800cb12:	4603      	mov	r3, r0
 800cb14:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 800cb16:	7bbb      	ldrb	r3, [r7, #14]
 800cb18:	461a      	mov	r2, r3
 800cb1a:	210d      	movs	r1, #13
 800cb1c:	6878      	ldr	r0, [r7, #4]
 800cb1e:	f7ff fd9f 	bl	800c660 <SX1278_SPIWrite>

		if (module->LoRa_SF == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	7c5b      	ldrb	r3, [r3, #17]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d103      	bne.n	800cb32 <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	7d5b      	ldrb	r3, [r3, #21]
 800cb2e:	73fb      	strb	r3, [r7, #15]
 800cb30:	e005      	b.n	800cb3e <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 800cb32:	2113      	movs	r1, #19
 800cb34:	6878      	ldr	r0, [r7, #4]
 800cb36:	f7ff fd74 	bl	800c622 <SX1278_SPIRead>
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	f103 0217 	add.w	r2, r3, #23
 800cb44:	7bfb      	ldrb	r3, [r7, #15]
 800cb46:	2100      	movs	r1, #0
 800cb48:	6878      	ldr	r0, [r7, #4]
 800cb4a:	f7ff fdb2 	bl	800c6b2 <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	7bfa      	ldrb	r2, [r7, #15]
 800cb52:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
		SX1278_clearLoRaIrq(module);
 800cb56:	6878      	ldr	r0, [r7, #4]
 800cb58:	f7ff ff51 	bl	800c9fe <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
}
 800cb62:	4618      	mov	r0, r3
 800cb64:	3710      	adds	r7, #16
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bd80      	pop	{r7, pc}

0800cb6a <SX1278_LoRaEntryTx>:

int SX1278_LoRaEntryTx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 800cb6a:	b580      	push	{r7, lr}
 800cb6c:	b086      	sub	sp, #24
 800cb6e:	af00      	add	r7, sp, #0
 800cb70:	60f8      	str	r0, [r7, #12]
 800cb72:	460b      	mov	r3, r1
 800cb74:	607a      	str	r2, [r7, #4]
 800cb76:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	7afa      	ldrb	r2, [r7, #11]
 800cb7c:	755a      	strb	r2, [r3, #21]

	SX1278_config(module); //setting base parameter
 800cb7e:	68f8      	ldr	r0, [r7, #12]
 800cb80:	f7ff fe0c 	bl	800c79c <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 800cb84:	2287      	movs	r2, #135	; 0x87
 800cb86:	214d      	movs	r1, #77	; 0x4d
 800cb88:	68f8      	ldr	r0, [r7, #12]
 800cb8a:	f7ff fd69 	bl	800c660 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 800cb8e:	2200      	movs	r2, #0
 800cb90:	2124      	movs	r1, #36	; 0x24
 800cb92:	68f8      	ldr	r0, [r7, #12]
 800cb94:	f7ff fd64 	bl	800c660 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 800cb98:	2241      	movs	r2, #65	; 0x41
 800cb9a:	2140      	movs	r1, #64	; 0x40
 800cb9c:	68f8      	ldr	r0, [r7, #12]
 800cb9e:	f7ff fd5f 	bl	800c660 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 800cba2:	68f8      	ldr	r0, [r7, #12]
 800cba4:	f7ff ff2b 	bl	800c9fe <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 800cba8:	22f7      	movs	r2, #247	; 0xf7
 800cbaa:	2111      	movs	r1, #17
 800cbac:	68f8      	ldr	r0, [r7, #12]
 800cbae:	f7ff fd57 	bl	800c660 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 800cbb2:	7afb      	ldrb	r3, [r7, #11]
 800cbb4:	461a      	mov	r2, r3
 800cbb6:	2122      	movs	r1, #34	; 0x22
 800cbb8:	68f8      	ldr	r0, [r7, #12]
 800cbba:	f7ff fd51 	bl	800c660 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 800cbbe:	210e      	movs	r1, #14
 800cbc0:	68f8      	ldr	r0, [r7, #12]
 800cbc2:	f7ff fd2e 	bl	800c622 <SX1278_SPIRead>
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 800cbca:	7dfb      	ldrb	r3, [r7, #23]
 800cbcc:	461a      	mov	r2, r3
 800cbce:	210d      	movs	r1, #13
 800cbd0:	68f8      	ldr	r0, [r7, #12]
 800cbd2:	f7ff fd45 	bl	800c660 <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 800cbd6:	2122      	movs	r1, #34	; 0x22
 800cbd8:	68f8      	ldr	r0, [r7, #12]
 800cbda:	f7ff fd22 	bl	800c622 <SX1278_SPIRead>
 800cbde:	4603      	mov	r3, r0
 800cbe0:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 800cbe2:	7dba      	ldrb	r2, [r7, #22]
 800cbe4:	7afb      	ldrb	r3, [r7, #11]
 800cbe6:	429a      	cmp	r2, r3
 800cbe8:	d104      	bne.n	800cbf4 <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	2202      	movs	r2, #2
 800cbee:	759a      	strb	r2, [r3, #22]
			return 1;
 800cbf0:	2301      	movs	r3, #1
 800cbf2:	e00e      	b.n	800cc12 <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	3b01      	subs	r3, #1
 800cbf8:	607b      	str	r3, [r7, #4]
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d1ea      	bne.n	800cbd6 <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	4618      	mov	r0, r3
 800cc06:	f000 f8d2 	bl	800cdae <SX1278_hw_Reset>
			SX1278_config(module);
 800cc0a:	68f8      	ldr	r0, [r7, #12]
 800cc0c:	f7ff fdc6 	bl	800c79c <SX1278_config>
			return 0;
 800cc10:	2300      	movs	r3, #0
		}
	}
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	3718      	adds	r7, #24
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bd80      	pop	{r7, pc}

0800cc1a <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t *module, uint8_t *txBuffer, uint8_t length,
		uint32_t timeout) {
 800cc1a:	b580      	push	{r7, lr}
 800cc1c:	b084      	sub	sp, #16
 800cc1e:	af00      	add	r7, sp, #0
 800cc20:	60f8      	str	r0, [r7, #12]
 800cc22:	60b9      	str	r1, [r7, #8]
 800cc24:	603b      	str	r3, [r7, #0]
 800cc26:	4613      	mov	r3, r2
 800cc28:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 800cc2a:	79fb      	ldrb	r3, [r7, #7]
 800cc2c:	68ba      	ldr	r2, [r7, #8]
 800cc2e:	2100      	movs	r1, #0
 800cc30:	68f8      	ldr	r0, [r7, #12]
 800cc32:	f7ff fd77 	bl	800c724 <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 800cc36:	228b      	movs	r2, #139	; 0x8b
 800cc38:	2101      	movs	r1, #1
 800cc3a:	68f8      	ldr	r0, [r7, #12]
 800cc3c:	f7ff fd10 	bl	800c660 <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	4618      	mov	r0, r3
 800cc46:	f000 f927 	bl	800ce98 <SX1278_hw_GetDIO0>
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d00b      	beq.n	800cc68 <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 800cc50:	2112      	movs	r1, #18
 800cc52:	68f8      	ldr	r0, [r7, #12]
 800cc54:	f7ff fce5 	bl	800c622 <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 800cc58:	68f8      	ldr	r0, [r7, #12]
 800cc5a:	f7ff fed0 	bl	800c9fe <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 800cc5e:	68f8      	ldr	r0, [r7, #12]
 800cc60:	f7ff fea0 	bl	800c9a4 <SX1278_standby>
			return 1;
 800cc64:	2301      	movs	r3, #1
 800cc66:	e013      	b.n	800cc90 <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	3b01      	subs	r3, #1
 800cc6c:	603b      	str	r3, [r7, #0]
 800cc6e:	683b      	ldr	r3, [r7, #0]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d109      	bne.n	800cc88 <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	4618      	mov	r0, r3
 800cc7a:	f000 f898 	bl	800cdae <SX1278_hw_Reset>
			SX1278_config(module);
 800cc7e:	68f8      	ldr	r0, [r7, #12]
 800cc80:	f7ff fd8c 	bl	800c79c <SX1278_config>
			return 0;
 800cc84:	2300      	movs	r3, #0
 800cc86:	e003      	b.n	800cc90 <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 800cc88:	2001      	movs	r0, #1
 800cc8a:	f000 f8fa 	bl	800ce82 <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 800cc8e:	e7d7      	b.n	800cc40 <SX1278_LoRaTxPacket+0x26>
	}
}
 800cc90:	4618      	mov	r0, r3
 800cc92:	3710      	adds	r7, #16
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bd80      	pop	{r7, pc}

0800cc98 <SX1278_init>:

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b084      	sub	sp, #16
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	60f8      	str	r0, [r7, #12]
 800cca0:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	4618      	mov	r0, r3
 800ccaa:	f000 f854 	bl	800cd56 <SX1278_hw_init>
	module->frequency = frequency;
 800ccae:	68f9      	ldr	r1, [r7, #12]
 800ccb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ccb4:	e9c1 2302 	strd	r2, r3, [r1, #8]
	module->power = power;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	7e3a      	ldrb	r2, [r7, #24]
 800ccbc:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = LoRa_SF;
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	7f3a      	ldrb	r2, [r7, #28]
 800ccc2:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	f897 2020 	ldrb.w	r2, [r7, #32]
 800ccca:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800ccd2:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800ccda:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800cce2:	755a      	strb	r2, [r3, #21]
	SX1278_config(module);
 800cce4:	68f8      	ldr	r0, [r7, #12]
 800cce6:	f7ff fd59 	bl	800c79c <SX1278_config>
}
 800ccea:	bf00      	nop
 800ccec:	3710      	adds	r7, #16
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bd80      	pop	{r7, pc}

0800ccf2 <SX1278_available>:

int SX1278_receive(SX1278_t *module, uint8_t length, uint32_t timeout) {
	return SX1278_LoRaEntryRx(module, length, timeout);
}

uint8_t SX1278_available(SX1278_t *module) {
 800ccf2:	b580      	push	{r7, lr}
 800ccf4:	b082      	sub	sp, #8
 800ccf6:	af00      	add	r7, sp, #0
 800ccf8:	6078      	str	r0, [r7, #4]
	return SX1278_LoRaRxPacket(module);
 800ccfa:	6878      	ldr	r0, [r7, #4]
 800ccfc:	f7ff fef1 	bl	800cae2 <SX1278_LoRaRxPacket>
 800cd00:	4603      	mov	r3, r0
}
 800cd02:	4618      	mov	r0, r3
 800cd04:	3708      	adds	r7, #8
 800cd06:	46bd      	mov	sp, r7
 800cd08:	bd80      	pop	{r7, pc}

0800cd0a <SX1278_read>:

uint8_t SX1278_read(SX1278_t *module, uint8_t *rxBuf, uint8_t length) {
 800cd0a:	b580      	push	{r7, lr}
 800cd0c:	b084      	sub	sp, #16
 800cd0e:	af00      	add	r7, sp, #0
 800cd10:	60f8      	str	r0, [r7, #12]
 800cd12:	60b9      	str	r1, [r7, #8]
 800cd14:	4613      	mov	r3, r2
 800cd16:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 800cd1e:	79fa      	ldrb	r2, [r7, #7]
 800cd20:	429a      	cmp	r2, r3
 800cd22:	d003      	beq.n	800cd2c <SX1278_read+0x22>
		length = module->readBytes;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 800cd2a:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	3317      	adds	r3, #23
 800cd30:	79fa      	ldrb	r2, [r7, #7]
 800cd32:	4619      	mov	r1, r3
 800cd34:	68b8      	ldr	r0, [r7, #8]
 800cd36:	f000 fd07 	bl	800d748 <memcpy>
	rxBuf[length] = '\0';
 800cd3a:	79fb      	ldrb	r3, [r7, #7]
 800cd3c:	68ba      	ldr	r2, [r7, #8]
 800cd3e:	4413      	add	r3, r2
 800cd40:	2200      	movs	r2, #0
 800cd42:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	2200      	movs	r2, #0
 800cd48:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	return length;
 800cd4c:	79fb      	ldrb	r3, [r7, #7]
}
 800cd4e:	4618      	mov	r0, r3
 800cd50:	3710      	adds	r7, #16
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bd80      	pop	{r7, pc}

0800cd56 <SX1278_hw_init>:
#include <string.h>

#include "gpio.h"
#include "spi.h"

__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 800cd56:	b580      	push	{r7, lr}
 800cd58:	b082      	sub	sp, #8
 800cd5a:	af00      	add	r7, sp, #0
 800cd5c:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 800cd5e:	2101      	movs	r1, #1
 800cd60:	6878      	ldr	r0, [r7, #4]
 800cd62:	f000 f80d 	bl	800cd80 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	6858      	ldr	r0, [r3, #4]
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	b29b      	uxth	r3, r3
 800cd70:	2201      	movs	r2, #1
 800cd72:	4619      	mov	r1, r3
 800cd74:	f7f5 fd5e 	bl	8002834 <HAL_GPIO_WritePin>
}
 800cd78:	bf00      	nop
 800cd7a:	3708      	adds	r7, #8
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bd80      	pop	{r7, pc}

0800cd80 <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b082      	sub	sp, #8
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
 800cd88:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	6958      	ldr	r0, [r3, #20]
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	691b      	ldr	r3, [r3, #16]
 800cd92:	b299      	uxth	r1, r3
 800cd94:	683b      	ldr	r3, [r7, #0]
 800cd96:	2b01      	cmp	r3, #1
 800cd98:	bf0c      	ite	eq
 800cd9a:	2301      	moveq	r3, #1
 800cd9c:	2300      	movne	r3, #0
 800cd9e:	b2db      	uxtb	r3, r3
 800cda0:	461a      	mov	r2, r3
 800cda2:	f7f5 fd47 	bl	8002834 <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 800cda6:	bf00      	nop
 800cda8:	3708      	adds	r7, #8
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bd80      	pop	{r7, pc}

0800cdae <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 800cdae:	b580      	push	{r7, lr}
 800cdb0:	b082      	sub	sp, #8
 800cdb2:	af00      	add	r7, sp, #0
 800cdb4:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 800cdb6:	2101      	movs	r1, #1
 800cdb8:	6878      	ldr	r0, [r7, #4]
 800cdba:	f7ff ffe1 	bl	800cd80 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	6858      	ldr	r0, [r3, #4]
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	b29b      	uxth	r3, r3
 800cdc8:	2200      	movs	r2, #0
 800cdca:	4619      	mov	r1, r3
 800cdcc:	f7f5 fd32 	bl	8002834 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 800cdd0:	2001      	movs	r0, #1
 800cdd2:	f000 f856 	bl	800ce82 <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	6858      	ldr	r0, [r3, #4]
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	b29b      	uxth	r3, r3
 800cde0:	2201      	movs	r2, #1
 800cde2:	4619      	mov	r1, r3
 800cde4:	f7f5 fd26 	bl	8002834 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 800cde8:	2064      	movs	r0, #100	; 0x64
 800cdea:	f000 f84a 	bl	800ce82 <SX1278_hw_DelayMs>
}
 800cdee:	bf00      	nop
 800cdf0:	3708      	adds	r7, #8
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	bd80      	pop	{r7, pc}

0800cdf6 <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 800cdf6:	b580      	push	{r7, lr}
 800cdf8:	b082      	sub	sp, #8
 800cdfa:	af00      	add	r7, sp, #0
 800cdfc:	6078      	str	r0, [r7, #4]
 800cdfe:	460b      	mov	r3, r1
 800ce00:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 800ce02:	2100      	movs	r1, #0
 800ce04:	6878      	ldr	r0, [r7, #4]
 800ce06:	f7ff ffbb 	bl	800cd80 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	6998      	ldr	r0, [r3, #24]
 800ce0e:	1cf9      	adds	r1, r7, #3
 800ce10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ce14:	2201      	movs	r2, #1
 800ce16:	f7f7 fd92 	bl	800493e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 800ce1a:	bf00      	nop
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	699b      	ldr	r3, [r3, #24]
 800ce20:	4618      	mov	r0, r3
 800ce22:	f7f8 f87f 	bl	8004f24 <HAL_SPI_GetState>
 800ce26:	4603      	mov	r3, r0
 800ce28:	2b01      	cmp	r3, #1
 800ce2a:	d1f7      	bne.n	800ce1c <SX1278_hw_SPICommand+0x26>
		;
}
 800ce2c:	bf00      	nop
 800ce2e:	bf00      	nop
 800ce30:	3708      	adds	r7, #8
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}

0800ce36 <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 800ce36:	b580      	push	{r7, lr}
 800ce38:	b086      	sub	sp, #24
 800ce3a:	af02      	add	r7, sp, #8
 800ce3c:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 800ce42:	2300      	movs	r3, #0
 800ce44:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 800ce46:	2100      	movs	r1, #0
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	f7ff ff99 	bl	800cd80 <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6998      	ldr	r0, [r3, #24]
 800ce52:	f107 020e 	add.w	r2, r7, #14
 800ce56:	f107 010f 	add.w	r1, r7, #15
 800ce5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ce5e:	9300      	str	r3, [sp, #0]
 800ce60:	2301      	movs	r3, #1
 800ce62:	f7f7 feaf 	bl	8004bc4 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 800ce66:	bf00      	nop
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	699b      	ldr	r3, [r3, #24]
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f7f8 f859 	bl	8004f24 <HAL_SPI_GetState>
 800ce72:	4603      	mov	r3, r0
 800ce74:	2b01      	cmp	r3, #1
 800ce76:	d1f7      	bne.n	800ce68 <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 800ce78:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	3710      	adds	r7, #16
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd80      	pop	{r7, pc}

0800ce82 <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 800ce82:	b580      	push	{r7, lr}
 800ce84:	b082      	sub	sp, #8
 800ce86:	af00      	add	r7, sp, #0
 800ce88:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 800ce8a:	6878      	ldr	r0, [r7, #4]
 800ce8c:	f7f5 f98e 	bl	80021ac <HAL_Delay>
}
 800ce90:	bf00      	nop
 800ce92:	3708      	adds	r7, #8
 800ce94:	46bd      	mov	sp, r7
 800ce96:	bd80      	pop	{r7, pc}

0800ce98 <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b082      	sub	sp, #8
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	68da      	ldr	r2, [r3, #12]
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	689b      	ldr	r3, [r3, #8]
 800cea8:	b29b      	uxth	r3, r3
 800ceaa:	4619      	mov	r1, r3
 800ceac:	4610      	mov	r0, r2
 800ceae:	f7f5 fca9 	bl	8002804 <HAL_GPIO_ReadPin>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	2b01      	cmp	r3, #1
 800ceb6:	bf0c      	ite	eq
 800ceb8:	2301      	moveq	r3, #1
 800ceba:	2300      	movne	r3, #0
 800cebc:	b2db      	uxtb	r3, r3
}
 800cebe:	4618      	mov	r0, r3
 800cec0:	3708      	adds	r7, #8
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}
	...

0800cec8 <UGV_cameraServoInit>:

static TIM_HandleTypeDef * hServoTim;
static uint32_t servoChannel;

void UGV_cameraServoInit(TIM_HandleTypeDef * htim, uint32_t channel)
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b084      	sub	sp, #16
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
 800ced0:	6039      	str	r1, [r7, #0]
	hServoTim = htim;
 800ced2:	4a0e      	ldr	r2, [pc, #56]	; (800cf0c <UGV_cameraServoInit+0x44>)
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	6013      	str	r3, [r2, #0]
	servoChannel = channel;
 800ced8:	4a0d      	ldr	r2, [pc, #52]	; (800cf10 <UGV_cameraServoInit+0x48>)
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	6013      	str	r3, [r2, #0]
	uint8_t channelOffset = (servoChannel / 4);
 800cede:	4b0c      	ldr	r3, [pc, #48]	; (800cf10 <UGV_cameraServoInit+0x48>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	089b      	lsrs	r3, r3, #2
 800cee4:	73fb      	strb	r3, [r7, #15]

	HAL_TIM_PWM_Start(htim, channel);
 800cee6:	6839      	ldr	r1, [r7, #0]
 800cee8:	6878      	ldr	r0, [r7, #4]
 800ceea:	f7f8 fa1f 	bl	800532c <HAL_TIM_PWM_Start>
	*((uint32_t*)((&hServoTim->Instance->CCR1) + channelOffset)) = CAMERA_RESET_CCR1_VAL;
 800ceee:	4b07      	ldr	r3, [pc, #28]	; (800cf0c <UGV_cameraServoInit+0x44>)
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cef8:	7bfb      	ldrb	r3, [r7, #15]
 800cefa:	009b      	lsls	r3, r3, #2
 800cefc:	4413      	add	r3, r2
 800cefe:	223c      	movs	r2, #60	; 0x3c
 800cf00:	601a      	str	r2, [r3, #0]

}
 800cf02:	bf00      	nop
 800cf04:	3710      	adds	r7, #16
 800cf06:	46bd      	mov	sp, r7
 800cf08:	bd80      	pop	{r7, pc}
 800cf0a:	bf00      	nop
 800cf0c:	2000500c 	.word	0x2000500c
 800cf10:	20005010 	.word	0x20005010

0800cf14 <init_PEC15_Table>:

uint16_t pec15Table[256];


void init_PEC15_Table()
{
 800cf14:	b480      	push	{r7}
 800cf16:	b083      	sub	sp, #12
 800cf18:	af00      	add	r7, sp, #0
    uint16_t remainder;
    uint16_t i;
    uint16_t bit;
    for (i = 0; i < 256; i++)
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	80bb      	strh	r3, [r7, #4]
 800cf1e:	e025      	b.n	800cf6c <init_PEC15_Table+0x58>
    {
        remainder = i << 7;
 800cf20:	88bb      	ldrh	r3, [r7, #4]
 800cf22:	01db      	lsls	r3, r3, #7
 800cf24:	80fb      	strh	r3, [r7, #6]
        for (bit = 8; bit > 0; --bit)
 800cf26:	2308      	movs	r3, #8
 800cf28:	807b      	strh	r3, [r7, #2]
 800cf2a:	e014      	b.n	800cf56 <init_PEC15_Table+0x42>
        {
            if (remainder & 0x4000)
 800cf2c:	88fb      	ldrh	r3, [r7, #6]
 800cf2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d009      	beq.n	800cf4a <init_PEC15_Table+0x36>
            {
                remainder = ((remainder << 1));
 800cf36:	88fb      	ldrh	r3, [r7, #6]
 800cf38:	005b      	lsls	r3, r3, #1
 800cf3a:	80fb      	strh	r3, [r7, #6]
                remainder = (remainder ^ CRC15_POLY);
 800cf3c:	88fb      	ldrh	r3, [r7, #6]
 800cf3e:	f483 438b 	eor.w	r3, r3, #17792	; 0x4580
 800cf42:	f083 0319 	eor.w	r3, r3, #25
 800cf46:	80fb      	strh	r3, [r7, #6]
 800cf48:	e002      	b.n	800cf50 <init_PEC15_Table+0x3c>
            }
            else
            {
                remainder = ((remainder << 1));
 800cf4a:	88fb      	ldrh	r3, [r7, #6]
 800cf4c:	005b      	lsls	r3, r3, #1
 800cf4e:	80fb      	strh	r3, [r7, #6]
        for (bit = 8; bit > 0; --bit)
 800cf50:	887b      	ldrh	r3, [r7, #2]
 800cf52:	3b01      	subs	r3, #1
 800cf54:	807b      	strh	r3, [r7, #2]
 800cf56:	887b      	ldrh	r3, [r7, #2]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d1e7      	bne.n	800cf2c <init_PEC15_Table+0x18>
            }
        }
        pec15Table[i] = remainder & 0xFFFF;
 800cf5c:	88bb      	ldrh	r3, [r7, #4]
 800cf5e:	4908      	ldr	r1, [pc, #32]	; (800cf80 <init_PEC15_Table+0x6c>)
 800cf60:	88fa      	ldrh	r2, [r7, #6]
 800cf62:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (i = 0; i < 256; i++)
 800cf66:	88bb      	ldrh	r3, [r7, #4]
 800cf68:	3301      	adds	r3, #1
 800cf6a:	80bb      	strh	r3, [r7, #4]
 800cf6c:	88bb      	ldrh	r3, [r7, #4]
 800cf6e:	2bff      	cmp	r3, #255	; 0xff
 800cf70:	d9d6      	bls.n	800cf20 <init_PEC15_Table+0xc>
    }
}
 800cf72:	bf00      	nop
 800cf74:	bf00      	nop
 800cf76:	370c      	adds	r7, #12
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7e:	4770      	bx	lr
 800cf80:	20005014 	.word	0x20005014

0800cf84 <AE_pec15>:

uint16_t AE_pec15(uint8_t* data, uint16_t len)
{
 800cf84:	b480      	push	{r7}
 800cf86:	b087      	sub	sp, #28
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
 800cf8c:	460b      	mov	r3, r1
 800cf8e:	807b      	strh	r3, [r7, #2]
    uint16_t remainder, address;
    remainder = 16;//PEC seed
 800cf90:	2310      	movs	r3, #16
 800cf92:	82fb      	strh	r3, [r7, #22]
    int i;
    for (i= 0; i < len; i++)
 800cf94:	2300      	movs	r3, #0
 800cf96:	613b      	str	r3, [r7, #16]
 800cf98:	e019      	b.n	800cfce <AE_pec15+0x4a>
         * @brief history of data[i*2 + 1]
         * @NOTE TMS570Ls spi working with 16bit variables so we need to
         * @Note cast to uint8_t so we take the 2 offset but
         * @Note TMS570 use big endien memory layout so we have to add +1
         */
        address = ((remainder >> 7) ^ data[i]) & 0xff;//calculate PEC table address remainder = (remainder << 8 ) ^ pec15Table[address];
 800cf9a:	8afb      	ldrh	r3, [r7, #22]
 800cf9c:	09db      	lsrs	r3, r3, #7
 800cf9e:	b29a      	uxth	r2, r3
 800cfa0:	693b      	ldr	r3, [r7, #16]
 800cfa2:	6879      	ldr	r1, [r7, #4]
 800cfa4:	440b      	add	r3, r1
 800cfa6:	781b      	ldrb	r3, [r3, #0]
 800cfa8:	b29b      	uxth	r3, r3
 800cfaa:	4053      	eors	r3, r2
 800cfac:	b29b      	uxth	r3, r3
 800cfae:	b2db      	uxtb	r3, r3
 800cfb0:	81fb      	strh	r3, [r7, #14]
        remainder = (remainder << 8) ^ pec15Table[address];
 800cfb2:	8afb      	ldrh	r3, [r7, #22]
 800cfb4:	021b      	lsls	r3, r3, #8
 800cfb6:	b21a      	sxth	r2, r3
 800cfb8:	89fb      	ldrh	r3, [r7, #14]
 800cfba:	490b      	ldr	r1, [pc, #44]	; (800cfe8 <AE_pec15+0x64>)
 800cfbc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800cfc0:	b21b      	sxth	r3, r3
 800cfc2:	4053      	eors	r3, r2
 800cfc4:	b21b      	sxth	r3, r3
 800cfc6:	82fb      	strh	r3, [r7, #22]
    for (i= 0; i < len; i++)
 800cfc8:	693b      	ldr	r3, [r7, #16]
 800cfca:	3301      	adds	r3, #1
 800cfcc:	613b      	str	r3, [r7, #16]
 800cfce:	887b      	ldrh	r3, [r7, #2]
 800cfd0:	693a      	ldr	r2, [r7, #16]
 800cfd2:	429a      	cmp	r2, r3
 800cfd4:	dbe1      	blt.n	800cf9a <AE_pec15+0x16>
    }
    return (remainder * 2);//The CRC15 has a 0 in the LSB so the final value must be multiplied by 2
 800cfd6:	8afb      	ldrh	r3, [r7, #22]
 800cfd8:	005b      	lsls	r3, r3, #1
 800cfda:	b29b      	uxth	r3, r3
}
 800cfdc:	4618      	mov	r0, r3
 800cfde:	371c      	adds	r7, #28
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe6:	4770      	bx	lr
 800cfe8:	20005014 	.word	0x20005014

0800cfec <UGV_ledControl>:

#include "ledControl.h"
#include "main.h"

LED_STATE UGV_ledControl(RcChannel * rcChannel)
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b084      	sub	sp, #16
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
	LED_STATE ledState = LEDS_OFF;
 800cff4:	2300      	movs	r3, #0
 800cff6:	73fb      	strb	r3, [r7, #15]

	if(rcChannel->channel4 < ( LID_LED_MIDDLE - LID_LED_ERROR))
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	88db      	ldrh	r3, [r3, #6]
 800cffc:	f240 52c2 	movw	r2, #1474	; 0x5c2
 800d000:	4293      	cmp	r3, r2
 800d002:	d80e      	bhi.n	800d022 <UGV_ledControl+0x36>
	{
		HAL_GPIO_WritePin(LID_LED_GPIO_Port, LID_LED_Pin, 0);
 800d004:	2200      	movs	r2, #0
 800d006:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d00a:	481a      	ldr	r0, [pc, #104]	; (800d074 <UGV_ledControl+0x88>)
 800d00c:	f7f5 fc12 	bl	8002834 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 800d010:	2200      	movs	r2, #0
 800d012:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d016:	4817      	ldr	r0, [pc, #92]	; (800d074 <UGV_ledControl+0x88>)
 800d018:	f7f5 fc0c 	bl	8002834 <HAL_GPIO_WritePin>
		ledState = LEDS_OFF;
 800d01c:	2300      	movs	r3, #0
 800d01e:	73fb      	strb	r3, [r7, #15]
 800d020:	e022      	b.n	800d068 <UGV_ledControl+0x7c>
	}
	else if (rcChannel->channel4 < ( LID_LED_MIDDLE + LID_LED_ERROR))
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	88db      	ldrh	r3, [r3, #6]
 800d026:	f240 6226 	movw	r2, #1574	; 0x626
 800d02a:	4293      	cmp	r3, r2
 800d02c:	d80e      	bhi.n	800d04c <UGV_ledControl+0x60>
	{
		HAL_GPIO_WritePin(LID_LED_GPIO_Port, LID_LED_Pin, 0);
 800d02e:	2200      	movs	r2, #0
 800d030:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d034:	480f      	ldr	r0, [pc, #60]	; (800d074 <UGV_ledControl+0x88>)
 800d036:	f7f5 fbfd 	bl	8002834 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 800d03a:	2201      	movs	r2, #1
 800d03c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d040:	480c      	ldr	r0, [pc, #48]	; (800d074 <UGV_ledControl+0x88>)
 800d042:	f7f5 fbf7 	bl	8002834 <HAL_GPIO_WritePin>
		ledState = FRONT_LED_ON;
 800d046:	2301      	movs	r3, #1
 800d048:	73fb      	strb	r3, [r7, #15]
 800d04a:	e00d      	b.n	800d068 <UGV_ledControl+0x7c>
	}
	else
	{
		HAL_GPIO_WritePin(LID_LED_GPIO_Port, LID_LED_Pin, 1);
 800d04c:	2201      	movs	r2, #1
 800d04e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d052:	4808      	ldr	r0, [pc, #32]	; (800d074 <UGV_ledControl+0x88>)
 800d054:	f7f5 fbee 	bl	8002834 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 800d058:	2201      	movs	r2, #1
 800d05a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d05e:	4805      	ldr	r0, [pc, #20]	; (800d074 <UGV_ledControl+0x88>)
 800d060:	f7f5 fbe8 	bl	8002834 <HAL_GPIO_WritePin>
		ledState = ALL_LED_ON;
 800d064:	2302      	movs	r3, #2
 800d066:	73fb      	strb	r3, [r7, #15]
	}

	return ledState;
 800d068:	7bfb      	ldrb	r3, [r7, #15]
}
 800d06a:	4618      	mov	r0, r3
 800d06c:	3710      	adds	r7, #16
 800d06e:	46bd      	mov	sp, r7
 800d070:	bd80      	pop	{r7, pc}
 800d072:	bf00      	nop
 800d074:	40020000 	.word	0x40020000

0800d078 <ugvMain>:
static void qmcInit(I2C_HandleTypeDef *hi2c);
static void sx1278Init(SX1278_hw_t * sx1278Hw, SX1278_t * sx1278);

//<<<<<<<<<<<<<<<<<<-FUNCTIONS->>>>>>>>>>>>>>>>>>>>>>>
void ugvMain(void)
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b086      	sub	sp, #24
 800d07c:	af02      	add	r7, sp, #8
	BaseType_t taskStatus = pdFAIL;
 800d07e:	2300      	movs	r3, #0
 800d080:	60fb      	str	r3, [r7, #12]

	ugvSystemInit();			//!< initialize the peripherals and queue
 800d082:	f000 f861 	bl	800d148 <ugvSystemInit>

	/*task for the motor drive*/
	taskStatus = xTaskCreate(taskSensor, "TaskMotDrive",
 800d086:	4b28      	ldr	r3, [pc, #160]	; (800d128 <ugvMain+0xb0>)
 800d088:	9301      	str	r3, [sp, #4]
 800d08a:	2332      	movs	r3, #50	; 0x32
 800d08c:	9300      	str	r3, [sp, #0]
 800d08e:	2300      	movs	r3, #0
 800d090:	2280      	movs	r2, #128	; 0x80
 800d092:	4926      	ldr	r1, [pc, #152]	; (800d12c <ugvMain+0xb4>)
 800d094:	4826      	ldr	r0, [pc, #152]	; (800d130 <ugvMain+0xb8>)
 800d096:	f7fb f8b6 	bl	8008206 <xTaskCreate>
 800d09a:	60f8      	str	r0, [r7, #12]
							 configMINIMAL_STACK_SIZE, NULL,
							 TASK_SENSOR_PRIORITY, &hTaskSensor_s);
	configASSERT(taskStatus);
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d10a      	bne.n	800d0b8 <ugvMain+0x40>
	__asm volatile
 800d0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0a6:	f383 8811 	msr	BASEPRI, r3
 800d0aa:	f3bf 8f6f 	isb	sy
 800d0ae:	f3bf 8f4f 	dsb	sy
 800d0b2:	60bb      	str	r3, [r7, #8]
}
 800d0b4:	bf00      	nop
 800d0b6:	e7fe      	b.n	800d0b6 <ugvMain+0x3e>

	taskStatus = xTaskCreate(taskMotorDrive, "TaskMotDrive",
 800d0b8:	4b1e      	ldr	r3, [pc, #120]	; (800d134 <ugvMain+0xbc>)
 800d0ba:	9301      	str	r3, [sp, #4]
 800d0bc:	2328      	movs	r3, #40	; 0x28
 800d0be:	9300      	str	r3, [sp, #0]
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	2280      	movs	r2, #128	; 0x80
 800d0c4:	4919      	ldr	r1, [pc, #100]	; (800d12c <ugvMain+0xb4>)
 800d0c6:	481c      	ldr	r0, [pc, #112]	; (800d138 <ugvMain+0xc0>)
 800d0c8:	f7fb f89d 	bl	8008206 <xTaskCreate>
 800d0cc:	60f8      	str	r0, [r7, #12]
							 configMINIMAL_STACK_SIZE, NULL,
							 TASK_MOT_DRIVE_PRIORITY, &hTaskMotDrive_s);
	configASSERT(taskStatus);
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d10a      	bne.n	800d0ea <ugvMain+0x72>
	__asm volatile
 800d0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0d8:	f383 8811 	msr	BASEPRI, r3
 800d0dc:	f3bf 8f6f 	isb	sy
 800d0e0:	f3bf 8f4f 	dsb	sy
 800d0e4:	607b      	str	r3, [r7, #4]
}
 800d0e6:	bf00      	nop
 800d0e8:	e7fe      	b.n	800d0e8 <ugvMain+0x70>

	/*task for the lora communication*/
	taskStatus = xTaskCreate(taskLoraCom, "TaskLoraCom",
 800d0ea:	4b14      	ldr	r3, [pc, #80]	; (800d13c <ugvMain+0xc4>)
 800d0ec:	9301      	str	r3, [sp, #4]
 800d0ee:	231c      	movs	r3, #28
 800d0f0:	9300      	str	r3, [sp, #0]
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	2280      	movs	r2, #128	; 0x80
 800d0f6:	4912      	ldr	r1, [pc, #72]	; (800d140 <ugvMain+0xc8>)
 800d0f8:	4812      	ldr	r0, [pc, #72]	; (800d144 <ugvMain+0xcc>)
 800d0fa:	f7fb f884 	bl	8008206 <xTaskCreate>
 800d0fe:	60f8      	str	r0, [r7, #12]
							 configMINIMAL_STACK_SIZE, NULL,
							 TASK_LORA_COM_PRIORITY, &hTaskLoraCom_s);
	configASSERT(taskStatus);
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d10a      	bne.n	800d11c <ugvMain+0xa4>
	__asm volatile
 800d106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d10a:	f383 8811 	msr	BASEPRI, r3
 800d10e:	f3bf 8f6f 	isb	sy
 800d112:	f3bf 8f4f 	dsb	sy
 800d116:	603b      	str	r3, [r7, #0]
}
 800d118:	bf00      	nop
 800d11a:	e7fe      	b.n	800d11a <ugvMain+0xa2>

	vTaskStartScheduler();
 800d11c:	f7fb fa4c 	bl	80085b8 <vTaskStartScheduler>
}
 800d120:	bf00      	nop
 800d122:	3710      	adds	r7, #16
 800d124:	46bd      	mov	sp, r7
 800d126:	bd80      	pop	{r7, pc}
 800d128:	200053e4 	.word	0x200053e4
 800d12c:	0800f384 	.word	0x0800f384
 800d130:	0800d431 	.word	0x0800d431
 800d134:	200053dc 	.word	0x200053dc
 800d138:	0800d3b1 	.word	0x0800d3b1
 800d13c:	2000525c 	.word	0x2000525c
 800d140:	0800f394 	.word	0x0800f394
 800d144:	0800d261 	.word	0x0800d261

0800d148 <ugvSystemInit>:
/**
 * @brief initialize the peripherals
 * @return none
 */
void ugvSystemInit()
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	af00      	add	r7, sp, #0
	  /* USER CODE BEGIN 2 */
	  UGV_cameraServoInit(&htim12, TIM_CHANNEL_1);	//!< camera servo timer init
 800d14c:	2100      	movs	r1, #0
 800d14e:	480d      	ldr	r0, [pc, #52]	; (800d184 <ugvSystemInit+0x3c>)
 800d150:	f7ff feba 	bl	800cec8 <UGV_cameraServoInit>
	  UGV_rcReceiverInit();							//!< enable rc receiver timer interrupt
 800d154:	f7ff f914 	bl	800c380 <UGV_rcReceiverInit>
	  UGV_motorInit();								//!< enable motor driver PWM timers
 800d158:	f7fe f918 	bl	800b38c <UGV_motorInit>
	  qmcInit(&hi2c1);								//!< enable i2c to read magnetometer
 800d15c:	480a      	ldr	r0, [pc, #40]	; (800d188 <ugvSystemInit+0x40>)
 800d15e:	f000 f81d 	bl	800d19c <qmcInit>
	  init_PEC15_Table();
 800d162:	f7ff fed7 	bl	800cf14 <init_PEC15_Table>
	  sx1278Init(&SX1278_hw, &SX1278);
 800d166:	4909      	ldr	r1, [pc, #36]	; (800d18c <ugvSystemInit+0x44>)
 800d168:	4809      	ldr	r0, [pc, #36]	; (800d190 <ugvSystemInit+0x48>)
 800d16a:	f000 f84f 	bl	800d20c <sx1278Init>
	  databaseQueueInit(10, sizeof(LoraTransmit));	//!< sensor database queue
 800d16e:	211c      	movs	r1, #28
 800d170:	200a      	movs	r0, #10
 800d172:	f7fc fee3 	bl	8009f3c <databaseQueueInit>
	  GPS_Init(&huart3, &gps);
 800d176:	4907      	ldr	r1, [pc, #28]	; (800d194 <ugvSystemInit+0x4c>)
 800d178:	4807      	ldr	r0, [pc, #28]	; (800d198 <ugvSystemInit+0x50>)
 800d17a:	f7fc fef7 	bl	8009f6c <GPS_Init>
}
 800d17e:	bf00      	nop
 800d180:	bd80      	pop	{r7, pc}
 800d182:	bf00      	nop
 800d184:	2000033c 	.word	0x2000033c
 800d188:	200000cc 	.word	0x200000cc
 800d18c:	20005280 	.word	0x20005280
 800d190:	20005260 	.word	0x20005260
 800d194:	20005234 	.word	0x20005234
 800d198:	200003cc 	.word	0x200003cc

0800d19c <qmcInit>:
 * @brief initial parameter of qmc5883
 * @param[in] i2c global variable
 * @return none
 */
static void qmcInit(I2C_HandleTypeDef *hi2c)
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b082      	sub	sp, #8
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(COMPASS_VCC_GPIO_Port, COMPASS_VCC_Pin, GPIO_PIN_RESET);
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d1aa:	4816      	ldr	r0, [pc, #88]	; (800d204 <qmcInit+0x68>)
 800d1ac:	f7f5 fb42 	bl	8002834 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COMPASS_VCC_GPIO_Port, COMPASS_VCC_Pin, GPIO_PIN_SET);
 800d1b0:	2201      	movs	r2, #1
 800d1b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d1b6:	4813      	ldr	r0, [pc, #76]	; (800d204 <qmcInit+0x68>)
 800d1b8:	f7f5 fb3c 	bl	8002834 <HAL_GPIO_WritePin>

	UGV_softReset();
 800d1bc:	f7ff f8c6 	bl	800c34c <UGV_softReset>

	hqmc.qmcConfig.MODE = MODE_CONTINIOUS;
 800d1c0:	4b11      	ldr	r3, [pc, #68]	; (800d208 <qmcInit+0x6c>)
 800d1c2:	2201      	movs	r2, #1
 800d1c4:	735a      	strb	r2, [r3, #13]
	hqmc.qmcConfig.ODR = ODR_200HZ;
 800d1c6:	4b10      	ldr	r3, [pc, #64]	; (800d208 <qmcInit+0x6c>)
 800d1c8:	2203      	movs	r2, #3
 800d1ca:	739a      	strb	r2, [r3, #14]
	hqmc.qmcConfig.OSR = OSR_512;
 800d1cc:	4b0e      	ldr	r3, [pc, #56]	; (800d208 <qmcInit+0x6c>)
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	741a      	strb	r2, [r3, #16]
	hqmc.qmcConfig.RNG = RNG_8G;
 800d1d2:	4b0d      	ldr	r3, [pc, #52]	; (800d208 <qmcInit+0x6c>)
 800d1d4:	2201      	movs	r2, #1
 800d1d6:	73da      	strb	r2, [r3, #15]
	hqmc.qmcConfig.INT = INT_DISABLE;
 800d1d8:	4b0b      	ldr	r3, [pc, #44]	; (800d208 <qmcInit+0x6c>)
 800d1da:	2200      	movs	r2, #0
 800d1dc:	745a      	strb	r2, [r3, #17]
	hqmc.qmcConfig.ROL_PNT = ROL_PNT_ENABLE;
 800d1de:	4b0a      	ldr	r3, [pc, #40]	; (800d208 <qmcInit+0x6c>)
 800d1e0:	2201      	movs	r2, #1
 800d1e2:	749a      	strb	r2, [r3, #18]

	reTryInit:
	if(UGV_qmcInit(hi2c, &hqmc) != HAL_OK)
 800d1e4:	4908      	ldr	r1, [pc, #32]	; (800d208 <qmcInit+0x6c>)
 800d1e6:	6878      	ldr	r0, [r7, #4]
 800d1e8:	f7fe fe38 	bl	800be5c <UGV_qmcInit>
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d000      	beq.n	800d1f4 <qmcInit+0x58>
	{
		goto reTryInit;
 800d1f2:	e7f7      	b.n	800d1e4 <qmcInit+0x48>
	}
	//magnetic declination of my city
	//you can learn https://www.magnetic-declination.com/
	UGV_setMagneticDelination(20, 0);
 800d1f4:	2100      	movs	r1, #0
 800d1f6:	2014      	movs	r0, #20
 800d1f8:	f7ff f818 	bl	800c22c <UGV_setMagneticDelination>
}
 800d1fc:	bf00      	nop
 800d1fe:	3708      	adds	r7, #8
 800d200:	46bd      	mov	sp, r7
 800d202:	bd80      	pop	{r7, pc}
 800d204:	40020800 	.word	0x40020800
 800d208:	20005214 	.word	0x20005214

0800d20c <sx1278Init>:
 * @param[in] lora pin setting
 * @param[in] lora global structure
 * @return none
 */
static void sx1278Init(SX1278_hw_t * sx1278Hw, SX1278_t * sx1278)
{
 800d20c:	b480      	push	{r7}
 800d20e:	b083      	sub	sp, #12
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
 800d214:	6039      	str	r1, [r7, #0]
	sx1278Hw->dio0.port = DIO0_GPIO_Port;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	4a0e      	ldr	r2, [pc, #56]	; (800d254 <sx1278Init+0x48>)
 800d21a:	60da      	str	r2, [r3, #12]
	sx1278Hw->dio0.pin = DIO0_Pin;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	2202      	movs	r2, #2
 800d220:	609a      	str	r2, [r3, #8]
	sx1278Hw->nss.port = NSS_GPIO_Port;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	4a0b      	ldr	r2, [pc, #44]	; (800d254 <sx1278Init+0x48>)
 800d226:	615a      	str	r2, [r3, #20]
	sx1278Hw->nss.pin = NSS_Pin;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2201      	movs	r2, #1
 800d22c:	611a      	str	r2, [r3, #16]
	sx1278Hw->reset.port = NULL;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	2200      	movs	r2, #0
 800d232:	605a      	str	r2, [r3, #4]
	sx1278Hw->reset.pin = 0;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	2200      	movs	r2, #0
 800d238:	601a      	str	r2, [r3, #0]
	sx1278Hw->spi = &hspi2;
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	4a06      	ldr	r2, [pc, #24]	; (800d258 <sx1278Init+0x4c>)
 800d23e:	619a      	str	r2, [r3, #24]

	sx1278->hw = sx1278Hw;
 800d240:	683b      	ldr	r3, [r7, #0]
 800d242:	687a      	ldr	r2, [r7, #4]
 800d244:	601a      	str	r2, [r3, #0]
}
 800d246:	bf00      	nop
 800d248:	370c      	adds	r7, #12
 800d24a:	46bd      	mov	sp, r7
 800d24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d250:	4770      	bx	lr
 800d252:	bf00      	nop
 800d254:	40020800 	.word	0x40020800
 800d258:	20000178 	.word	0x20000178
 800d25c:	00000000 	.word	0x00000000

0800d260 <taskLoraCom>:
static int ret;
static int retTx;
static uint8_t txRxMutex = TX_STATUS;

void taskLoraCom(void *arg)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b08a      	sub	sp, #40	; 0x28
 800d264:	af06      	add	r7, sp, #24
 800d266:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime = 0;
 800d268:	2300      	movs	r3, #0
 800d26a:	60bb      	str	r3, [r7, #8]
	const TickType_t xFrequency = 35;
 800d26c:	2323      	movs	r3, #35	; 0x23
 800d26e:	60fb      	str	r3, [r7, #12]
	xLastWakeTime = xTaskGetTickCount();
 800d270:	f7fb fabe 	bl	80087f0 <xTaskGetTickCount>
 800d274:	4603      	mov	r3, r0
 800d276:	60bb      	str	r3, [r7, #8]

	//initialize lora module
	SX1278_init(&SX1278, 434000000, SX1278_POWER_17DBM, SX1278_LORA_SF_7,
 800d278:	231c      	movs	r3, #28
 800d27a:	9305      	str	r3, [sp, #20]
 800d27c:	2300      	movs	r3, #0
 800d27e:	9304      	str	r3, [sp, #16]
 800d280:	2300      	movs	r3, #0
 800d282:	9303      	str	r3, [sp, #12]
 800d284:	2307      	movs	r3, #7
 800d286:	9302      	str	r3, [sp, #8]
 800d288:	2301      	movs	r3, #1
 800d28a:	9301      	str	r3, [sp, #4]
 800d28c:	2301      	movs	r3, #1
 800d28e:	9300      	str	r3, [sp, #0]
 800d290:	a323      	add	r3, pc, #140	; (adr r3, 800d320 <taskLoraCom+0xc0>)
 800d292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d296:	481c      	ldr	r0, [pc, #112]	; (800d308 <taskLoraCom+0xa8>)
 800d298:	f7ff fcfe 	bl	800cc98 <SX1278_init>
				SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, sizeof(loraTx));

	ret = SX1278_LoRaEntryTx(&SX1278, sizeof(loraTx), TX_TIMEOUT);
 800d29c:	2205      	movs	r2, #5
 800d29e:	211c      	movs	r1, #28
 800d2a0:	4819      	ldr	r0, [pc, #100]	; (800d308 <taskLoraCom+0xa8>)
 800d2a2:	f7ff fc62 	bl	800cb6a <SX1278_LoRaEntryTx>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	4a18      	ldr	r2, [pc, #96]	; (800d30c <taskLoraCom+0xac>)
 800d2aa:	6013      	str	r3, [r2, #0]

	for(;;)
	{
		xQueueReceive(sensorDataQueue, &loraTx, 2);
 800d2ac:	4b18      	ldr	r3, [pc, #96]	; (800d310 <taskLoraCom+0xb0>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	2202      	movs	r2, #2
 800d2b2:	4918      	ldr	r1, [pc, #96]	; (800d314 <taskLoraCom+0xb4>)
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	f7fa fcfb 	bl	8007cb0 <xQueueReceive>

		//!< Transmit
		txRxMutex = TX_STATUS;
 800d2ba:	4b17      	ldr	r3, [pc, #92]	; (800d318 <taskLoraCom+0xb8>)
 800d2bc:	2200      	movs	r2, #0
 800d2be:	701a      	strb	r2, [r3, #0]
		ret = SX1278_LoRaEntryTx(&SX1278, sizeof(loraTx), TX_TIMEOUT);
 800d2c0:	2205      	movs	r2, #5
 800d2c2:	211c      	movs	r1, #28
 800d2c4:	4810      	ldr	r0, [pc, #64]	; (800d308 <taskLoraCom+0xa8>)
 800d2c6:	f7ff fc50 	bl	800cb6a <SX1278_LoRaEntryTx>
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	4a0f      	ldr	r2, [pc, #60]	; (800d30c <taskLoraCom+0xac>)
 800d2ce:	6013      	str	r3, [r2, #0]
		retTx = SX1278_LoRaTxPacket(&SX1278, (uint8_t*)&loraTx,
 800d2d0:	2305      	movs	r3, #5
 800d2d2:	221c      	movs	r2, #28
 800d2d4:	490f      	ldr	r1, [pc, #60]	; (800d314 <taskLoraCom+0xb4>)
 800d2d6:	480c      	ldr	r0, [pc, #48]	; (800d308 <taskLoraCom+0xa8>)
 800d2d8:	f7ff fc9f 	bl	800cc1a <SX1278_LoRaTxPacket>
 800d2dc:	4603      	mov	r3, r0
 800d2de:	4a0f      	ldr	r2, [pc, #60]	; (800d31c <taskLoraCom+0xbc>)
 800d2e0:	6013      	str	r3, [r2, #0]
				sizeof(loraTx), TX_TIMEOUT);

		//!< Receive
		txRxMutex = RX_STATUS;
 800d2e2:	4b0d      	ldr	r3, [pc, #52]	; (800d318 <taskLoraCom+0xb8>)
 800d2e4:	2201      	movs	r2, #1
 800d2e6:	701a      	strb	r2, [r3, #0]
		ret = SX1278_LoRaEntryRx(&SX1278, sizeof(loraRx), TX_TIMEOUT);
 800d2e8:	2205      	movs	r2, #5
 800d2ea:	211c      	movs	r1, #28
 800d2ec:	4806      	ldr	r0, [pc, #24]	; (800d308 <taskLoraCom+0xa8>)
 800d2ee:	f7ff fb93 	bl	800ca18 <SX1278_LoRaEntryRx>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	4a05      	ldr	r2, [pc, #20]	; (800d30c <taskLoraCom+0xac>)
 800d2f6:	6013      	str	r3, [r2, #0]

		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 800d2f8:	f107 0308 	add.w	r3, r7, #8
 800d2fc:	68f9      	ldr	r1, [r7, #12]
 800d2fe:	4618      	mov	r0, r3
 800d300:	f7fb f8dc 	bl	80084bc <vTaskDelayUntil>
		xQueueReceive(sensorDataQueue, &loraTx, 2);
 800d304:	e7d2      	b.n	800d2ac <taskLoraCom+0x4c>
 800d306:	bf00      	nop
 800d308:	20005280 	.word	0x20005280
 800d30c:	200053d0 	.word	0x200053d0
 800d310:	20004dfc 	.word	0x20004dfc
 800d314:	20005398 	.word	0x20005398
 800d318:	200053d8 	.word	0x200053d8
 800d31c:	200053d4 	.word	0x200053d4
 800d320:	19de5080 	.word	0x19de5080
 800d324:	00000000 	.word	0x00000000

0800d328 <dioIrqCallback>:
/**
 * @brief callback function for the DIO0 pin
 * @return none
 */
void dioIrqCallback()
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	af00      	add	r7, sp, #0
	if(txRxMutex == TX_STATUS)
 800d32c:	4b0f      	ldr	r3, [pc, #60]	; (800d36c <dioIrqCallback+0x44>)
 800d32e:	781b      	ldrb	r3, [r3, #0]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d109      	bne.n	800d348 <dioIrqCallback+0x20>
	{
		retTx = SX1278_LoRaTxPacket(&SX1278, (uint8_t*)&loraTx,
 800d334:	2305      	movs	r3, #5
 800d336:	221c      	movs	r2, #28
 800d338:	490d      	ldr	r1, [pc, #52]	; (800d370 <dioIrqCallback+0x48>)
 800d33a:	480e      	ldr	r0, [pc, #56]	; (800d374 <dioIrqCallback+0x4c>)
 800d33c:	f7ff fc6d 	bl	800cc1a <SX1278_LoRaTxPacket>
 800d340:	4603      	mov	r3, r0
 800d342:	4a0d      	ldr	r2, [pc, #52]	; (800d378 <dioIrqCallback+0x50>)
 800d344:	6013      	str	r3, [r2, #0]
	else
	{
		ret = SX1278_available(&SX1278);
		SX1278_read(&SX1278, (uint8_t*)&loraRx, ret);
	}
}
 800d346:	e00e      	b.n	800d366 <dioIrqCallback+0x3e>
		ret = SX1278_available(&SX1278);
 800d348:	480a      	ldr	r0, [pc, #40]	; (800d374 <dioIrqCallback+0x4c>)
 800d34a:	f7ff fcd2 	bl	800ccf2 <SX1278_available>
 800d34e:	4603      	mov	r3, r0
 800d350:	461a      	mov	r2, r3
 800d352:	4b0a      	ldr	r3, [pc, #40]	; (800d37c <dioIrqCallback+0x54>)
 800d354:	601a      	str	r2, [r3, #0]
		SX1278_read(&SX1278, (uint8_t*)&loraRx, ret);
 800d356:	4b09      	ldr	r3, [pc, #36]	; (800d37c <dioIrqCallback+0x54>)
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	b2db      	uxtb	r3, r3
 800d35c:	461a      	mov	r2, r3
 800d35e:	4908      	ldr	r1, [pc, #32]	; (800d380 <dioIrqCallback+0x58>)
 800d360:	4804      	ldr	r0, [pc, #16]	; (800d374 <dioIrqCallback+0x4c>)
 800d362:	f7ff fcd2 	bl	800cd0a <SX1278_read>
}
 800d366:	bf00      	nop
 800d368:	bd80      	pop	{r7, pc}
 800d36a:	bf00      	nop
 800d36c:	200053d8 	.word	0x200053d8
 800d370:	20005398 	.word	0x20005398
 800d374:	20005280 	.word	0x20005280
 800d378:	200053d4 	.word	0x200053d4
 800d37c:	200053d0 	.word	0x200053d0
 800d380:	200053b4 	.word	0x200053b4

0800d384 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800d384:	b480      	push	{r7}
 800d386:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800d388:	f3bf 8f4f 	dsb	sy
}
 800d38c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800d38e:	4b06      	ldr	r3, [pc, #24]	; (800d3a8 <__NVIC_SystemReset+0x24>)
 800d390:	68db      	ldr	r3, [r3, #12]
 800d392:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800d396:	4904      	ldr	r1, [pc, #16]	; (800d3a8 <__NVIC_SystemReset+0x24>)
 800d398:	4b04      	ldr	r3, [pc, #16]	; (800d3ac <__NVIC_SystemReset+0x28>)
 800d39a:	4313      	orrs	r3, r2
 800d39c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800d39e:	f3bf 8f4f 	dsb	sy
}
 800d3a2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800d3a4:	bf00      	nop
 800d3a6:	e7fd      	b.n	800d3a4 <__NVIC_SystemReset+0x20>
 800d3a8:	e000ed00 	.word	0xe000ed00
 800d3ac:	05fa0004 	.word	0x05fa0004

0800d3b0 <taskMotorDrive>:

TaskHandle_t hTaskMotDrive_s;
extern LoraTransmit loraTx;

void taskMotorDrive(void *arg)
{
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	b086      	sub	sp, #24
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime = 0;
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	60fb      	str	r3, [r7, #12]
	const TickType_t xFrequency = 20;
 800d3bc:	2314      	movs	r3, #20
 800d3be:	617b      	str	r3, [r7, #20]
	xLastWakeTime = xTaskGetTickCount();
 800d3c0:	f7fb fa16 	bl	80087f0 <xTaskGetTickCount>
 800d3c4:	4603      	mov	r3, r0
 800d3c6:	60fb      	str	r3, [r7, #12]
	float azimuthAngle = 0.0f;
 800d3c8:	f04f 0300 	mov.w	r3, #0
 800d3cc:	613b      	str	r3, [r7, #16]

	for(;;)
	{
		  if((rcChannel_s.channel1>=(CHANNEL_DOWN-CHANNEL_ERROR)) && (rcChannel_s.channel1<=(CHANNEL_UP + CHANNEL_ERROR)))
 800d3ce:	4b0c      	ldr	r3, [pc, #48]	; (800d400 <taskMotorDrive+0x50>)
 800d3d0:	881b      	ldrh	r3, [r3, #0]
 800d3d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d3d6:	d911      	bls.n	800d3fc <taskMotorDrive+0x4c>
 800d3d8:	4b09      	ldr	r3, [pc, #36]	; (800d400 <taskMotorDrive+0x50>)
 800d3da:	881b      	ldrh	r3, [r3, #0]
 800d3dc:	f240 72e9 	movw	r2, #2025	; 0x7e9
 800d3e0:	4293      	cmp	r3, r2
 800d3e2:	d80b      	bhi.n	800d3fc <taskMotorDrive+0x4c>
		  {
			  UGV_motorDrive(&rcChannel_s, azimuthAngle);
 800d3e4:	ed97 0a04 	vldr	s0, [r7, #16]
 800d3e8:	4805      	ldr	r0, [pc, #20]	; (800d400 <taskMotorDrive+0x50>)
 800d3ea:	f7fe f827 	bl	800b43c <UGV_motorDrive>
		  else
		  {
			  NVIC_SystemReset();
		  }

		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 800d3ee:	f107 030c 	add.w	r3, r7, #12
 800d3f2:	6979      	ldr	r1, [r7, #20]
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	f7fb f861 	bl	80084bc <vTaskDelayUntil>
		  if((rcChannel_s.channel1>=(CHANNEL_DOWN-CHANNEL_ERROR)) && (rcChannel_s.channel1<=(CHANNEL_UP + CHANNEL_ERROR)))
 800d3fa:	e7e8      	b.n	800d3ce <taskMotorDrive+0x1e>
			  NVIC_SystemReset();
 800d3fc:	f7ff ffc2 	bl	800d384 <__NVIC_SystemReset>
 800d400:	20005000 	.word	0x20005000

0800d404 <__NVIC_SystemReset>:
{
 800d404:	b480      	push	{r7}
 800d406:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800d408:	f3bf 8f4f 	dsb	sy
}
 800d40c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800d40e:	4b06      	ldr	r3, [pc, #24]	; (800d428 <__NVIC_SystemReset+0x24>)
 800d410:	68db      	ldr	r3, [r3, #12]
 800d412:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800d416:	4904      	ldr	r1, [pc, #16]	; (800d428 <__NVIC_SystemReset+0x24>)
 800d418:	4b04      	ldr	r3, [pc, #16]	; (800d42c <__NVIC_SystemReset+0x28>)
 800d41a:	4313      	orrs	r3, r2
 800d41c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800d41e:	f3bf 8f4f 	dsb	sy
}
 800d422:	bf00      	nop
    __NOP();
 800d424:	bf00      	nop
 800d426:	e7fd      	b.n	800d424 <__NVIC_SystemReset+0x20>
 800d428:	e000ed00 	.word	0xe000ed00
 800d42c:	05fa0004 	.word	0x05fa0004

0800d430 <taskSensor>:
extern GPS gps;
uint16_t azim;

//<<<<<<<<<<<<<<-FUNCTION PROTOTYPES->>>>>>>>>>>>>>
void taskSensor(void *arg)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b086      	sub	sp, #24
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime = 0;
 800d438:	2300      	movs	r3, #0
 800d43a:	60fb      	str	r3, [r7, #12]
	const TickType_t xFrequency = 10;
 800d43c:	230a      	movs	r3, #10
 800d43e:	617b      	str	r3, [r7, #20]
	xLastWakeTime = xTaskGetTickCount();
 800d440:	f7fb f9d6 	bl	80087f0 <xTaskGetTickCount>
 800d444:	4603      	mov	r3, r0
 800d446:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
		//!< get azimuth from the qmc5883
		loraTx.azimuth = qmcProc();
 800d448:	f000 f876 	bl	800d538 <qmcProc>
 800d44c:	4603      	mov	r3, r0
 800d44e:	461a      	mov	r2, r3
 800d450:	4b32      	ldr	r3, [pc, #200]	; (800d51c <taskSensor+0xec>)
 800d452:	801a      	strh	r2, [r3, #0]
		loraTx.ledState = ledProc();
 800d454:	f000 f88c 	bl	800d570 <ledProc>
 800d458:	4603      	mov	r3, r0
 800d45a:	461a      	mov	r2, r3
 800d45c:	4b2f      	ldr	r3, [pc, #188]	; (800d51c <taskSensor+0xec>)
 800d45e:	761a      	strb	r2, [r3, #24]

		//!< control the gps ready?
		if(gps.gpsState == POSITION_FIXED && gps.day != 0 && ((HAL_GetTick() - gpsIrqTime) < 500))
 800d460:	4b2f      	ldr	r3, [pc, #188]	; (800d520 <taskSensor+0xf0>)
 800d462:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d466:	2b02      	cmp	r3, #2
 800d468:	d130      	bne.n	800d4cc <taskSensor+0x9c>
 800d46a:	4b2d      	ldr	r3, [pc, #180]	; (800d520 <taskSensor+0xf0>)
 800d46c:	7d5b      	ldrb	r3, [r3, #21]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d02c      	beq.n	800d4cc <taskSensor+0x9c>
 800d472:	f7f4 fe8f 	bl	8002194 <HAL_GetTick>
 800d476:	4602      	mov	r2, r0
 800d478:	4b2a      	ldr	r3, [pc, #168]	; (800d524 <taskSensor+0xf4>)
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	1ad3      	subs	r3, r2, r3
 800d47e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800d482:	d223      	bcs.n	800d4cc <taskSensor+0x9c>
		{
			loraTx.gpsState = POSITION_FIXED;
 800d484:	4b25      	ldr	r3, [pc, #148]	; (800d51c <taskSensor+0xec>)
 800d486:	2202      	movs	r2, #2
 800d488:	765a      	strb	r2, [r3, #25]
			loraTx.latitudeDegree = gps.latitudeDegree;
 800d48a:	4b25      	ldr	r3, [pc, #148]	; (800d520 <taskSensor+0xf0>)
 800d48c:	78da      	ldrb	r2, [r3, #3]
 800d48e:	4b23      	ldr	r3, [pc, #140]	; (800d51c <taskSensor+0xec>)
 800d490:	709a      	strb	r2, [r3, #2]
			loraTx.latitudeMinute = gps.latitudeMinute;
 800d492:	4b23      	ldr	r3, [pc, #140]	; (800d520 <taskSensor+0xf0>)
 800d494:	791a      	ldrb	r2, [r3, #4]
 800d496:	4b21      	ldr	r3, [pc, #132]	; (800d51c <taskSensor+0xec>)
 800d498:	70da      	strb	r2, [r3, #3]
			loraTx.latitudeSecond = gps.latitudeSecond;
 800d49a:	4b21      	ldr	r3, [pc, #132]	; (800d520 <taskSensor+0xf0>)
 800d49c:	689b      	ldr	r3, [r3, #8]
 800d49e:	4a1f      	ldr	r2, [pc, #124]	; (800d51c <taskSensor+0xec>)
 800d4a0:	6053      	str	r3, [r2, #4]

			loraTx.longitudeDegree = gps.longitudeDegree;
 800d4a2:	4b1f      	ldr	r3, [pc, #124]	; (800d520 <taskSensor+0xf0>)
 800d4a4:	7b5a      	ldrb	r2, [r3, #13]
 800d4a6:	4b1d      	ldr	r3, [pc, #116]	; (800d51c <taskSensor+0xec>)
 800d4a8:	721a      	strb	r2, [r3, #8]
			loraTx.longitudeMinute = gps.longitudeMinute;
 800d4aa:	4b1d      	ldr	r3, [pc, #116]	; (800d520 <taskSensor+0xf0>)
 800d4ac:	7b9a      	ldrb	r2, [r3, #14]
 800d4ae:	4b1b      	ldr	r3, [pc, #108]	; (800d51c <taskSensor+0xec>)
 800d4b0:	725a      	strb	r2, [r3, #9]
			loraTx.longitudeSecond = gps.longitudeSecond;
 800d4b2:	4b1b      	ldr	r3, [pc, #108]	; (800d520 <taskSensor+0xf0>)
 800d4b4:	691b      	ldr	r3, [r3, #16]
 800d4b6:	4a19      	ldr	r2, [pc, #100]	; (800d51c <taskSensor+0xec>)
 800d4b8:	60d3      	str	r3, [r2, #12]

			loraTx.numberOfSatellite = gps.numberOfSatellite;
 800d4ba:	4b19      	ldr	r3, [pc, #100]	; (800d520 <taskSensor+0xf0>)
 800d4bc:	7e9a      	ldrb	r2, [r3, #26]
 800d4be:	4b17      	ldr	r3, [pc, #92]	; (800d51c <taskSensor+0xec>)
 800d4c0:	741a      	strb	r2, [r3, #16]

			loraTx.speed = *((uint32_t*)&gps.speed);
 800d4c2:	4b19      	ldr	r3, [pc, #100]	; (800d528 <taskSensor+0xf8>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	4a15      	ldr	r2, [pc, #84]	; (800d51c <taskSensor+0xec>)
 800d4c8:	6153      	str	r3, [r2, #20]
 800d4ca:	e002      	b.n	800d4d2 <taskSensor+0xa2>
		}
		else
		{
			loraTx.gpsState = NO_CONNECTION;
 800d4cc:	4b13      	ldr	r3, [pc, #76]	; (800d51c <taskSensor+0xec>)
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	765a      	strb	r2, [r3, #25]
		}

		gpsPreviousHead = ringBuff.head;
 800d4d2:	4b16      	ldr	r3, [pc, #88]	; (800d52c <taskSensor+0xfc>)
 800d4d4:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 800d4d8:	b2db      	uxtb	r3, r3
 800d4da:	461a      	mov	r2, r3
 800d4dc:	4b14      	ldr	r3, [pc, #80]	; (800d530 <taskSensor+0x100>)
 800d4de:	601a      	str	r2, [r3, #0]

		uint16_t crc = crcProc(&loraTx, sizeof(loraTx) - 2);
 800d4e0:	211a      	movs	r1, #26
 800d4e2:	480e      	ldr	r0, [pc, #56]	; (800d51c <taskSensor+0xec>)
 800d4e4:	f000 f864 	bl	800d5b0 <crcProc>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	827b      	strh	r3, [r7, #18]
		loraTx.crcLsb = (crc >> 0) & 0xFF;
 800d4ec:	8a7b      	ldrh	r3, [r7, #18]
 800d4ee:	b2da      	uxtb	r2, r3
 800d4f0:	4b0a      	ldr	r3, [pc, #40]	; (800d51c <taskSensor+0xec>)
 800d4f2:	769a      	strb	r2, [r3, #26]
		loraTx.crcMsb = (crc >> 8) & 0xFF;
 800d4f4:	8a7b      	ldrh	r3, [r7, #18]
 800d4f6:	0a1b      	lsrs	r3, r3, #8
 800d4f8:	b29b      	uxth	r3, r3
 800d4fa:	b2da      	uxtb	r2, r3
 800d4fc:	4b07      	ldr	r3, [pc, #28]	; (800d51c <taskSensor+0xec>)
 800d4fe:	76da      	strb	r2, [r3, #27]

		xQueueGenericSend(sensorDataQueue, &loraTx, 5, queueSEND_TO_FRONT);
 800d500:	4b0c      	ldr	r3, [pc, #48]	; (800d534 <taskSensor+0x104>)
 800d502:	6818      	ldr	r0, [r3, #0]
 800d504:	2301      	movs	r3, #1
 800d506:	2205      	movs	r2, #5
 800d508:	4904      	ldr	r1, [pc, #16]	; (800d51c <taskSensor+0xec>)
 800d50a:	f7fa fa37 	bl	800797c <xQueueGenericSend>

		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 800d50e:	f107 030c 	add.w	r3, r7, #12
 800d512:	6979      	ldr	r1, [r7, #20]
 800d514:	4618      	mov	r0, r3
 800d516:	f7fa ffd1 	bl	80084bc <vTaskDelayUntil>
	{
 800d51a:	e795      	b.n	800d448 <taskSensor+0x18>
 800d51c:	20004e00 	.word	0x20004e00
 800d520:	20005234 	.word	0x20005234
 800d524:	20004f24 	.word	0x20004f24
 800d528:	20005254 	.word	0x20005254
 800d52c:	20004e20 	.word	0x20004e20
 800d530:	200053e0 	.word	0x200053e0
 800d534:	20004dfc 	.word	0x20004dfc

0800d538 <qmcProc>:
/**
 * @brief take the azimuth angle
 * @return azimuthn angle
 */
static uint16_t qmcProc()
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b082      	sub	sp, #8
 800d53c:	af00      	add	r7, sp, #0
	uint16_t azimuthAngle = 0;
 800d53e:	2300      	movs	r3, #0
 800d540:	80fb      	strh	r3, [r7, #6]
	if(UGV_isDataReady(&hqmc))
 800d542:	480a      	ldr	r0, [pc, #40]	; (800d56c <qmcProc+0x34>)
 800d544:	f7fe fd66 	bl	800c014 <UGV_isDataReady>
 800d548:	4603      	mov	r3, r0
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d009      	beq.n	800d562 <qmcProc+0x2a>
	{
		azimuthAngle = (uint16_t)UGV_getAzimuth(&hqmc);
 800d54e:	4807      	ldr	r0, [pc, #28]	; (800d56c <qmcProc+0x34>)
 800d550:	f7fe fe92 	bl	800c278 <UGV_getAzimuth>
 800d554:	eef0 7a40 	vmov.f32	s15, s0
 800d558:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d55c:	ee17 3a90 	vmov	r3, s15
 800d560:	80fb      	strh	r3, [r7, #6]
	}

	return azimuthAngle;
 800d562:	88fb      	ldrh	r3, [r7, #6]
}
 800d564:	4618      	mov	r0, r3
 800d566:	3708      	adds	r7, #8
 800d568:	46bd      	mov	sp, r7
 800d56a:	bd80      	pop	{r7, pc}
 800d56c:	20005214 	.word	0x20005214

0800d570 <ledProc>:
/**
 * @brief set or reset the led status according the rf transmitter signal
 * @return led status
 */
static LED_STATE ledProc()
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b082      	sub	sp, #8
 800d574:	af00      	add	r7, sp, #0
	LED_STATE ledState = LEDS_OFF;
 800d576:	2300      	movs	r3, #0
 800d578:	71fb      	strb	r3, [r7, #7]

	//!< set the leds
	if((rcChannel_s.channel3>=(CHANNEL_DOWN-CHANNEL_ERROR)) && (rcChannel_s.channel1<=(CHANNEL_UP + CHANNEL_ERROR)))
 800d57a:	4b0c      	ldr	r3, [pc, #48]	; (800d5ac <ledProc+0x3c>)
 800d57c:	889b      	ldrh	r3, [r3, #4]
 800d57e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d582:	d90b      	bls.n	800d59c <ledProc+0x2c>
 800d584:	4b09      	ldr	r3, [pc, #36]	; (800d5ac <ledProc+0x3c>)
 800d586:	881b      	ldrh	r3, [r3, #0]
 800d588:	f240 72e9 	movw	r2, #2025	; 0x7e9
 800d58c:	4293      	cmp	r3, r2
 800d58e:	d805      	bhi.n	800d59c <ledProc+0x2c>
	{
		ledState = UGV_ledControl(&rcChannel_s);
 800d590:	4806      	ldr	r0, [pc, #24]	; (800d5ac <ledProc+0x3c>)
 800d592:	f7ff fd2b 	bl	800cfec <UGV_ledControl>
 800d596:	4603      	mov	r3, r0
 800d598:	71fb      	strb	r3, [r7, #7]
 800d59a:	e001      	b.n	800d5a0 <ledProc+0x30>
	}
	else
	{
		NVIC_SystemReset();
 800d59c:	f7ff ff32 	bl	800d404 <__NVIC_SystemReset>
	}

	return ledState;
 800d5a0:	79fb      	ldrb	r3, [r7, #7]
}
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	3708      	adds	r7, #8
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bd80      	pop	{r7, pc}
 800d5aa:	bf00      	nop
 800d5ac:	20005000 	.word	0x20005000

0800d5b0 <crcProc>:
/**
 * @brief calculate the crc of the message up to len index
 * @return 16 bit crc value
 */
static uint16_t crcProc(void * ptr, uint16_t len)
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b082      	sub	sp, #8
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
 800d5b8:	460b      	mov	r3, r1
 800d5ba:	807b      	strh	r3, [r7, #2]
	return AE_pec15((uint8_t*)ptr, len);
 800d5bc:	887b      	ldrh	r3, [r7, #2]
 800d5be:	4619      	mov	r1, r3
 800d5c0:	6878      	ldr	r0, [r7, #4]
 800d5c2:	f7ff fcdf 	bl	800cf84 <AE_pec15>
 800d5c6:	4603      	mov	r3, r0
}
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	3708      	adds	r7, #8
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	bd80      	pop	{r7, pc}

0800d5d0 <siprintf>:
 800d5d0:	b40e      	push	{r1, r2, r3}
 800d5d2:	b500      	push	{lr}
 800d5d4:	b09c      	sub	sp, #112	; 0x70
 800d5d6:	ab1d      	add	r3, sp, #116	; 0x74
 800d5d8:	9002      	str	r0, [sp, #8]
 800d5da:	9006      	str	r0, [sp, #24]
 800d5dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d5e0:	4809      	ldr	r0, [pc, #36]	; (800d608 <siprintf+0x38>)
 800d5e2:	9107      	str	r1, [sp, #28]
 800d5e4:	9104      	str	r1, [sp, #16]
 800d5e6:	4909      	ldr	r1, [pc, #36]	; (800d60c <siprintf+0x3c>)
 800d5e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5ec:	9105      	str	r1, [sp, #20]
 800d5ee:	6800      	ldr	r0, [r0, #0]
 800d5f0:	9301      	str	r3, [sp, #4]
 800d5f2:	a902      	add	r1, sp, #8
 800d5f4:	f000 fa08 	bl	800da08 <_svfiprintf_r>
 800d5f8:	9b02      	ldr	r3, [sp, #8]
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	701a      	strb	r2, [r3, #0]
 800d5fe:	b01c      	add	sp, #112	; 0x70
 800d600:	f85d eb04 	ldr.w	lr, [sp], #4
 800d604:	b003      	add	sp, #12
 800d606:	4770      	bx	lr
 800d608:	20000098 	.word	0x20000098
 800d60c:	ffff0208 	.word	0xffff0208

0800d610 <memset>:
 800d610:	4402      	add	r2, r0
 800d612:	4603      	mov	r3, r0
 800d614:	4293      	cmp	r3, r2
 800d616:	d100      	bne.n	800d61a <memset+0xa>
 800d618:	4770      	bx	lr
 800d61a:	f803 1b01 	strb.w	r1, [r3], #1
 800d61e:	e7f9      	b.n	800d614 <memset+0x4>

0800d620 <strncmp>:
 800d620:	b510      	push	{r4, lr}
 800d622:	b16a      	cbz	r2, 800d640 <strncmp+0x20>
 800d624:	3901      	subs	r1, #1
 800d626:	1884      	adds	r4, r0, r2
 800d628:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d62c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d630:	429a      	cmp	r2, r3
 800d632:	d103      	bne.n	800d63c <strncmp+0x1c>
 800d634:	42a0      	cmp	r0, r4
 800d636:	d001      	beq.n	800d63c <strncmp+0x1c>
 800d638:	2a00      	cmp	r2, #0
 800d63a:	d1f5      	bne.n	800d628 <strncmp+0x8>
 800d63c:	1ad0      	subs	r0, r2, r3
 800d63e:	bd10      	pop	{r4, pc}
 800d640:	4610      	mov	r0, r2
 800d642:	e7fc      	b.n	800d63e <strncmp+0x1e>

0800d644 <_reclaim_reent>:
 800d644:	4b29      	ldr	r3, [pc, #164]	; (800d6ec <_reclaim_reent+0xa8>)
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	4283      	cmp	r3, r0
 800d64a:	b570      	push	{r4, r5, r6, lr}
 800d64c:	4604      	mov	r4, r0
 800d64e:	d04b      	beq.n	800d6e8 <_reclaim_reent+0xa4>
 800d650:	69c3      	ldr	r3, [r0, #28]
 800d652:	b143      	cbz	r3, 800d666 <_reclaim_reent+0x22>
 800d654:	68db      	ldr	r3, [r3, #12]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d144      	bne.n	800d6e4 <_reclaim_reent+0xa0>
 800d65a:	69e3      	ldr	r3, [r4, #28]
 800d65c:	6819      	ldr	r1, [r3, #0]
 800d65e:	b111      	cbz	r1, 800d666 <_reclaim_reent+0x22>
 800d660:	4620      	mov	r0, r4
 800d662:	f000 f87f 	bl	800d764 <_free_r>
 800d666:	6961      	ldr	r1, [r4, #20]
 800d668:	b111      	cbz	r1, 800d670 <_reclaim_reent+0x2c>
 800d66a:	4620      	mov	r0, r4
 800d66c:	f000 f87a 	bl	800d764 <_free_r>
 800d670:	69e1      	ldr	r1, [r4, #28]
 800d672:	b111      	cbz	r1, 800d67a <_reclaim_reent+0x36>
 800d674:	4620      	mov	r0, r4
 800d676:	f000 f875 	bl	800d764 <_free_r>
 800d67a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d67c:	b111      	cbz	r1, 800d684 <_reclaim_reent+0x40>
 800d67e:	4620      	mov	r0, r4
 800d680:	f000 f870 	bl	800d764 <_free_r>
 800d684:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d686:	b111      	cbz	r1, 800d68e <_reclaim_reent+0x4a>
 800d688:	4620      	mov	r0, r4
 800d68a:	f000 f86b 	bl	800d764 <_free_r>
 800d68e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d690:	b111      	cbz	r1, 800d698 <_reclaim_reent+0x54>
 800d692:	4620      	mov	r0, r4
 800d694:	f000 f866 	bl	800d764 <_free_r>
 800d698:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d69a:	b111      	cbz	r1, 800d6a2 <_reclaim_reent+0x5e>
 800d69c:	4620      	mov	r0, r4
 800d69e:	f000 f861 	bl	800d764 <_free_r>
 800d6a2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d6a4:	b111      	cbz	r1, 800d6ac <_reclaim_reent+0x68>
 800d6a6:	4620      	mov	r0, r4
 800d6a8:	f000 f85c 	bl	800d764 <_free_r>
 800d6ac:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d6ae:	b111      	cbz	r1, 800d6b6 <_reclaim_reent+0x72>
 800d6b0:	4620      	mov	r0, r4
 800d6b2:	f000 f857 	bl	800d764 <_free_r>
 800d6b6:	6a23      	ldr	r3, [r4, #32]
 800d6b8:	b1b3      	cbz	r3, 800d6e8 <_reclaim_reent+0xa4>
 800d6ba:	4620      	mov	r0, r4
 800d6bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d6c0:	4718      	bx	r3
 800d6c2:	5949      	ldr	r1, [r1, r5]
 800d6c4:	b941      	cbnz	r1, 800d6d8 <_reclaim_reent+0x94>
 800d6c6:	3504      	adds	r5, #4
 800d6c8:	69e3      	ldr	r3, [r4, #28]
 800d6ca:	2d80      	cmp	r5, #128	; 0x80
 800d6cc:	68d9      	ldr	r1, [r3, #12]
 800d6ce:	d1f8      	bne.n	800d6c2 <_reclaim_reent+0x7e>
 800d6d0:	4620      	mov	r0, r4
 800d6d2:	f000 f847 	bl	800d764 <_free_r>
 800d6d6:	e7c0      	b.n	800d65a <_reclaim_reent+0x16>
 800d6d8:	680e      	ldr	r6, [r1, #0]
 800d6da:	4620      	mov	r0, r4
 800d6dc:	f000 f842 	bl	800d764 <_free_r>
 800d6e0:	4631      	mov	r1, r6
 800d6e2:	e7ef      	b.n	800d6c4 <_reclaim_reent+0x80>
 800d6e4:	2500      	movs	r5, #0
 800d6e6:	e7ef      	b.n	800d6c8 <_reclaim_reent+0x84>
 800d6e8:	bd70      	pop	{r4, r5, r6, pc}
 800d6ea:	bf00      	nop
 800d6ec:	20000098 	.word	0x20000098

0800d6f0 <__errno>:
 800d6f0:	4b01      	ldr	r3, [pc, #4]	; (800d6f8 <__errno+0x8>)
 800d6f2:	6818      	ldr	r0, [r3, #0]
 800d6f4:	4770      	bx	lr
 800d6f6:	bf00      	nop
 800d6f8:	20000098 	.word	0x20000098

0800d6fc <__libc_init_array>:
 800d6fc:	b570      	push	{r4, r5, r6, lr}
 800d6fe:	4d0d      	ldr	r5, [pc, #52]	; (800d734 <__libc_init_array+0x38>)
 800d700:	4c0d      	ldr	r4, [pc, #52]	; (800d738 <__libc_init_array+0x3c>)
 800d702:	1b64      	subs	r4, r4, r5
 800d704:	10a4      	asrs	r4, r4, #2
 800d706:	2600      	movs	r6, #0
 800d708:	42a6      	cmp	r6, r4
 800d70a:	d109      	bne.n	800d720 <__libc_init_array+0x24>
 800d70c:	4d0b      	ldr	r5, [pc, #44]	; (800d73c <__libc_init_array+0x40>)
 800d70e:	4c0c      	ldr	r4, [pc, #48]	; (800d740 <__libc_init_array+0x44>)
 800d710:	f001 fe12 	bl	800f338 <_init>
 800d714:	1b64      	subs	r4, r4, r5
 800d716:	10a4      	asrs	r4, r4, #2
 800d718:	2600      	movs	r6, #0
 800d71a:	42a6      	cmp	r6, r4
 800d71c:	d105      	bne.n	800d72a <__libc_init_array+0x2e>
 800d71e:	bd70      	pop	{r4, r5, r6, pc}
 800d720:	f855 3b04 	ldr.w	r3, [r5], #4
 800d724:	4798      	blx	r3
 800d726:	3601      	adds	r6, #1
 800d728:	e7ee      	b.n	800d708 <__libc_init_array+0xc>
 800d72a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d72e:	4798      	blx	r3
 800d730:	3601      	adds	r6, #1
 800d732:	e7f2      	b.n	800d71a <__libc_init_array+0x1e>
 800d734:	0800f4b8 	.word	0x0800f4b8
 800d738:	0800f4b8 	.word	0x0800f4b8
 800d73c:	0800f4b8 	.word	0x0800f4b8
 800d740:	0800f4bc 	.word	0x0800f4bc

0800d744 <__retarget_lock_acquire_recursive>:
 800d744:	4770      	bx	lr

0800d746 <__retarget_lock_release_recursive>:
 800d746:	4770      	bx	lr

0800d748 <memcpy>:
 800d748:	440a      	add	r2, r1
 800d74a:	4291      	cmp	r1, r2
 800d74c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d750:	d100      	bne.n	800d754 <memcpy+0xc>
 800d752:	4770      	bx	lr
 800d754:	b510      	push	{r4, lr}
 800d756:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d75a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d75e:	4291      	cmp	r1, r2
 800d760:	d1f9      	bne.n	800d756 <memcpy+0xe>
 800d762:	bd10      	pop	{r4, pc}

0800d764 <_free_r>:
 800d764:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d766:	2900      	cmp	r1, #0
 800d768:	d044      	beq.n	800d7f4 <_free_r+0x90>
 800d76a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d76e:	9001      	str	r0, [sp, #4]
 800d770:	2b00      	cmp	r3, #0
 800d772:	f1a1 0404 	sub.w	r4, r1, #4
 800d776:	bfb8      	it	lt
 800d778:	18e4      	addlt	r4, r4, r3
 800d77a:	f000 f8df 	bl	800d93c <__malloc_lock>
 800d77e:	4a1e      	ldr	r2, [pc, #120]	; (800d7f8 <_free_r+0x94>)
 800d780:	9801      	ldr	r0, [sp, #4]
 800d782:	6813      	ldr	r3, [r2, #0]
 800d784:	b933      	cbnz	r3, 800d794 <_free_r+0x30>
 800d786:	6063      	str	r3, [r4, #4]
 800d788:	6014      	str	r4, [r2, #0]
 800d78a:	b003      	add	sp, #12
 800d78c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d790:	f000 b8da 	b.w	800d948 <__malloc_unlock>
 800d794:	42a3      	cmp	r3, r4
 800d796:	d908      	bls.n	800d7aa <_free_r+0x46>
 800d798:	6825      	ldr	r5, [r4, #0]
 800d79a:	1961      	adds	r1, r4, r5
 800d79c:	428b      	cmp	r3, r1
 800d79e:	bf01      	itttt	eq
 800d7a0:	6819      	ldreq	r1, [r3, #0]
 800d7a2:	685b      	ldreq	r3, [r3, #4]
 800d7a4:	1949      	addeq	r1, r1, r5
 800d7a6:	6021      	streq	r1, [r4, #0]
 800d7a8:	e7ed      	b.n	800d786 <_free_r+0x22>
 800d7aa:	461a      	mov	r2, r3
 800d7ac:	685b      	ldr	r3, [r3, #4]
 800d7ae:	b10b      	cbz	r3, 800d7b4 <_free_r+0x50>
 800d7b0:	42a3      	cmp	r3, r4
 800d7b2:	d9fa      	bls.n	800d7aa <_free_r+0x46>
 800d7b4:	6811      	ldr	r1, [r2, #0]
 800d7b6:	1855      	adds	r5, r2, r1
 800d7b8:	42a5      	cmp	r5, r4
 800d7ba:	d10b      	bne.n	800d7d4 <_free_r+0x70>
 800d7bc:	6824      	ldr	r4, [r4, #0]
 800d7be:	4421      	add	r1, r4
 800d7c0:	1854      	adds	r4, r2, r1
 800d7c2:	42a3      	cmp	r3, r4
 800d7c4:	6011      	str	r1, [r2, #0]
 800d7c6:	d1e0      	bne.n	800d78a <_free_r+0x26>
 800d7c8:	681c      	ldr	r4, [r3, #0]
 800d7ca:	685b      	ldr	r3, [r3, #4]
 800d7cc:	6053      	str	r3, [r2, #4]
 800d7ce:	440c      	add	r4, r1
 800d7d0:	6014      	str	r4, [r2, #0]
 800d7d2:	e7da      	b.n	800d78a <_free_r+0x26>
 800d7d4:	d902      	bls.n	800d7dc <_free_r+0x78>
 800d7d6:	230c      	movs	r3, #12
 800d7d8:	6003      	str	r3, [r0, #0]
 800d7da:	e7d6      	b.n	800d78a <_free_r+0x26>
 800d7dc:	6825      	ldr	r5, [r4, #0]
 800d7de:	1961      	adds	r1, r4, r5
 800d7e0:	428b      	cmp	r3, r1
 800d7e2:	bf04      	itt	eq
 800d7e4:	6819      	ldreq	r1, [r3, #0]
 800d7e6:	685b      	ldreq	r3, [r3, #4]
 800d7e8:	6063      	str	r3, [r4, #4]
 800d7ea:	bf04      	itt	eq
 800d7ec:	1949      	addeq	r1, r1, r5
 800d7ee:	6021      	streq	r1, [r4, #0]
 800d7f0:	6054      	str	r4, [r2, #4]
 800d7f2:	e7ca      	b.n	800d78a <_free_r+0x26>
 800d7f4:	b003      	add	sp, #12
 800d7f6:	bd30      	pop	{r4, r5, pc}
 800d7f8:	20005528 	.word	0x20005528

0800d7fc <sbrk_aligned>:
 800d7fc:	b570      	push	{r4, r5, r6, lr}
 800d7fe:	4e0e      	ldr	r6, [pc, #56]	; (800d838 <sbrk_aligned+0x3c>)
 800d800:	460c      	mov	r4, r1
 800d802:	6831      	ldr	r1, [r6, #0]
 800d804:	4605      	mov	r5, r0
 800d806:	b911      	cbnz	r1, 800d80e <sbrk_aligned+0x12>
 800d808:	f000 fba6 	bl	800df58 <_sbrk_r>
 800d80c:	6030      	str	r0, [r6, #0]
 800d80e:	4621      	mov	r1, r4
 800d810:	4628      	mov	r0, r5
 800d812:	f000 fba1 	bl	800df58 <_sbrk_r>
 800d816:	1c43      	adds	r3, r0, #1
 800d818:	d00a      	beq.n	800d830 <sbrk_aligned+0x34>
 800d81a:	1cc4      	adds	r4, r0, #3
 800d81c:	f024 0403 	bic.w	r4, r4, #3
 800d820:	42a0      	cmp	r0, r4
 800d822:	d007      	beq.n	800d834 <sbrk_aligned+0x38>
 800d824:	1a21      	subs	r1, r4, r0
 800d826:	4628      	mov	r0, r5
 800d828:	f000 fb96 	bl	800df58 <_sbrk_r>
 800d82c:	3001      	adds	r0, #1
 800d82e:	d101      	bne.n	800d834 <sbrk_aligned+0x38>
 800d830:	f04f 34ff 	mov.w	r4, #4294967295
 800d834:	4620      	mov	r0, r4
 800d836:	bd70      	pop	{r4, r5, r6, pc}
 800d838:	2000552c 	.word	0x2000552c

0800d83c <_malloc_r>:
 800d83c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d840:	1ccd      	adds	r5, r1, #3
 800d842:	f025 0503 	bic.w	r5, r5, #3
 800d846:	3508      	adds	r5, #8
 800d848:	2d0c      	cmp	r5, #12
 800d84a:	bf38      	it	cc
 800d84c:	250c      	movcc	r5, #12
 800d84e:	2d00      	cmp	r5, #0
 800d850:	4607      	mov	r7, r0
 800d852:	db01      	blt.n	800d858 <_malloc_r+0x1c>
 800d854:	42a9      	cmp	r1, r5
 800d856:	d905      	bls.n	800d864 <_malloc_r+0x28>
 800d858:	230c      	movs	r3, #12
 800d85a:	603b      	str	r3, [r7, #0]
 800d85c:	2600      	movs	r6, #0
 800d85e:	4630      	mov	r0, r6
 800d860:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d864:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d938 <_malloc_r+0xfc>
 800d868:	f000 f868 	bl	800d93c <__malloc_lock>
 800d86c:	f8d8 3000 	ldr.w	r3, [r8]
 800d870:	461c      	mov	r4, r3
 800d872:	bb5c      	cbnz	r4, 800d8cc <_malloc_r+0x90>
 800d874:	4629      	mov	r1, r5
 800d876:	4638      	mov	r0, r7
 800d878:	f7ff ffc0 	bl	800d7fc <sbrk_aligned>
 800d87c:	1c43      	adds	r3, r0, #1
 800d87e:	4604      	mov	r4, r0
 800d880:	d155      	bne.n	800d92e <_malloc_r+0xf2>
 800d882:	f8d8 4000 	ldr.w	r4, [r8]
 800d886:	4626      	mov	r6, r4
 800d888:	2e00      	cmp	r6, #0
 800d88a:	d145      	bne.n	800d918 <_malloc_r+0xdc>
 800d88c:	2c00      	cmp	r4, #0
 800d88e:	d048      	beq.n	800d922 <_malloc_r+0xe6>
 800d890:	6823      	ldr	r3, [r4, #0]
 800d892:	4631      	mov	r1, r6
 800d894:	4638      	mov	r0, r7
 800d896:	eb04 0903 	add.w	r9, r4, r3
 800d89a:	f000 fb5d 	bl	800df58 <_sbrk_r>
 800d89e:	4581      	cmp	r9, r0
 800d8a0:	d13f      	bne.n	800d922 <_malloc_r+0xe6>
 800d8a2:	6821      	ldr	r1, [r4, #0]
 800d8a4:	1a6d      	subs	r5, r5, r1
 800d8a6:	4629      	mov	r1, r5
 800d8a8:	4638      	mov	r0, r7
 800d8aa:	f7ff ffa7 	bl	800d7fc <sbrk_aligned>
 800d8ae:	3001      	adds	r0, #1
 800d8b0:	d037      	beq.n	800d922 <_malloc_r+0xe6>
 800d8b2:	6823      	ldr	r3, [r4, #0]
 800d8b4:	442b      	add	r3, r5
 800d8b6:	6023      	str	r3, [r4, #0]
 800d8b8:	f8d8 3000 	ldr.w	r3, [r8]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d038      	beq.n	800d932 <_malloc_r+0xf6>
 800d8c0:	685a      	ldr	r2, [r3, #4]
 800d8c2:	42a2      	cmp	r2, r4
 800d8c4:	d12b      	bne.n	800d91e <_malloc_r+0xe2>
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	605a      	str	r2, [r3, #4]
 800d8ca:	e00f      	b.n	800d8ec <_malloc_r+0xb0>
 800d8cc:	6822      	ldr	r2, [r4, #0]
 800d8ce:	1b52      	subs	r2, r2, r5
 800d8d0:	d41f      	bmi.n	800d912 <_malloc_r+0xd6>
 800d8d2:	2a0b      	cmp	r2, #11
 800d8d4:	d917      	bls.n	800d906 <_malloc_r+0xca>
 800d8d6:	1961      	adds	r1, r4, r5
 800d8d8:	42a3      	cmp	r3, r4
 800d8da:	6025      	str	r5, [r4, #0]
 800d8dc:	bf18      	it	ne
 800d8de:	6059      	strne	r1, [r3, #4]
 800d8e0:	6863      	ldr	r3, [r4, #4]
 800d8e2:	bf08      	it	eq
 800d8e4:	f8c8 1000 	streq.w	r1, [r8]
 800d8e8:	5162      	str	r2, [r4, r5]
 800d8ea:	604b      	str	r3, [r1, #4]
 800d8ec:	4638      	mov	r0, r7
 800d8ee:	f104 060b 	add.w	r6, r4, #11
 800d8f2:	f000 f829 	bl	800d948 <__malloc_unlock>
 800d8f6:	f026 0607 	bic.w	r6, r6, #7
 800d8fa:	1d23      	adds	r3, r4, #4
 800d8fc:	1af2      	subs	r2, r6, r3
 800d8fe:	d0ae      	beq.n	800d85e <_malloc_r+0x22>
 800d900:	1b9b      	subs	r3, r3, r6
 800d902:	50a3      	str	r3, [r4, r2]
 800d904:	e7ab      	b.n	800d85e <_malloc_r+0x22>
 800d906:	42a3      	cmp	r3, r4
 800d908:	6862      	ldr	r2, [r4, #4]
 800d90a:	d1dd      	bne.n	800d8c8 <_malloc_r+0x8c>
 800d90c:	f8c8 2000 	str.w	r2, [r8]
 800d910:	e7ec      	b.n	800d8ec <_malloc_r+0xb0>
 800d912:	4623      	mov	r3, r4
 800d914:	6864      	ldr	r4, [r4, #4]
 800d916:	e7ac      	b.n	800d872 <_malloc_r+0x36>
 800d918:	4634      	mov	r4, r6
 800d91a:	6876      	ldr	r6, [r6, #4]
 800d91c:	e7b4      	b.n	800d888 <_malloc_r+0x4c>
 800d91e:	4613      	mov	r3, r2
 800d920:	e7cc      	b.n	800d8bc <_malloc_r+0x80>
 800d922:	230c      	movs	r3, #12
 800d924:	603b      	str	r3, [r7, #0]
 800d926:	4638      	mov	r0, r7
 800d928:	f000 f80e 	bl	800d948 <__malloc_unlock>
 800d92c:	e797      	b.n	800d85e <_malloc_r+0x22>
 800d92e:	6025      	str	r5, [r4, #0]
 800d930:	e7dc      	b.n	800d8ec <_malloc_r+0xb0>
 800d932:	605b      	str	r3, [r3, #4]
 800d934:	deff      	udf	#255	; 0xff
 800d936:	bf00      	nop
 800d938:	20005528 	.word	0x20005528

0800d93c <__malloc_lock>:
 800d93c:	4801      	ldr	r0, [pc, #4]	; (800d944 <__malloc_lock+0x8>)
 800d93e:	f7ff bf01 	b.w	800d744 <__retarget_lock_acquire_recursive>
 800d942:	bf00      	nop
 800d944:	20005524 	.word	0x20005524

0800d948 <__malloc_unlock>:
 800d948:	4801      	ldr	r0, [pc, #4]	; (800d950 <__malloc_unlock+0x8>)
 800d94a:	f7ff befc 	b.w	800d746 <__retarget_lock_release_recursive>
 800d94e:	bf00      	nop
 800d950:	20005524 	.word	0x20005524

0800d954 <__ssputs_r>:
 800d954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d958:	688e      	ldr	r6, [r1, #8]
 800d95a:	461f      	mov	r7, r3
 800d95c:	42be      	cmp	r6, r7
 800d95e:	680b      	ldr	r3, [r1, #0]
 800d960:	4682      	mov	sl, r0
 800d962:	460c      	mov	r4, r1
 800d964:	4690      	mov	r8, r2
 800d966:	d82c      	bhi.n	800d9c2 <__ssputs_r+0x6e>
 800d968:	898a      	ldrh	r2, [r1, #12]
 800d96a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d96e:	d026      	beq.n	800d9be <__ssputs_r+0x6a>
 800d970:	6965      	ldr	r5, [r4, #20]
 800d972:	6909      	ldr	r1, [r1, #16]
 800d974:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d978:	eba3 0901 	sub.w	r9, r3, r1
 800d97c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d980:	1c7b      	adds	r3, r7, #1
 800d982:	444b      	add	r3, r9
 800d984:	106d      	asrs	r5, r5, #1
 800d986:	429d      	cmp	r5, r3
 800d988:	bf38      	it	cc
 800d98a:	461d      	movcc	r5, r3
 800d98c:	0553      	lsls	r3, r2, #21
 800d98e:	d527      	bpl.n	800d9e0 <__ssputs_r+0x8c>
 800d990:	4629      	mov	r1, r5
 800d992:	f7ff ff53 	bl	800d83c <_malloc_r>
 800d996:	4606      	mov	r6, r0
 800d998:	b360      	cbz	r0, 800d9f4 <__ssputs_r+0xa0>
 800d99a:	6921      	ldr	r1, [r4, #16]
 800d99c:	464a      	mov	r2, r9
 800d99e:	f7ff fed3 	bl	800d748 <memcpy>
 800d9a2:	89a3      	ldrh	r3, [r4, #12]
 800d9a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d9a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9ac:	81a3      	strh	r3, [r4, #12]
 800d9ae:	6126      	str	r6, [r4, #16]
 800d9b0:	6165      	str	r5, [r4, #20]
 800d9b2:	444e      	add	r6, r9
 800d9b4:	eba5 0509 	sub.w	r5, r5, r9
 800d9b8:	6026      	str	r6, [r4, #0]
 800d9ba:	60a5      	str	r5, [r4, #8]
 800d9bc:	463e      	mov	r6, r7
 800d9be:	42be      	cmp	r6, r7
 800d9c0:	d900      	bls.n	800d9c4 <__ssputs_r+0x70>
 800d9c2:	463e      	mov	r6, r7
 800d9c4:	6820      	ldr	r0, [r4, #0]
 800d9c6:	4632      	mov	r2, r6
 800d9c8:	4641      	mov	r1, r8
 800d9ca:	f000 faab 	bl	800df24 <memmove>
 800d9ce:	68a3      	ldr	r3, [r4, #8]
 800d9d0:	1b9b      	subs	r3, r3, r6
 800d9d2:	60a3      	str	r3, [r4, #8]
 800d9d4:	6823      	ldr	r3, [r4, #0]
 800d9d6:	4433      	add	r3, r6
 800d9d8:	6023      	str	r3, [r4, #0]
 800d9da:	2000      	movs	r0, #0
 800d9dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9e0:	462a      	mov	r2, r5
 800d9e2:	f000 fac9 	bl	800df78 <_realloc_r>
 800d9e6:	4606      	mov	r6, r0
 800d9e8:	2800      	cmp	r0, #0
 800d9ea:	d1e0      	bne.n	800d9ae <__ssputs_r+0x5a>
 800d9ec:	6921      	ldr	r1, [r4, #16]
 800d9ee:	4650      	mov	r0, sl
 800d9f0:	f7ff feb8 	bl	800d764 <_free_r>
 800d9f4:	230c      	movs	r3, #12
 800d9f6:	f8ca 3000 	str.w	r3, [sl]
 800d9fa:	89a3      	ldrh	r3, [r4, #12]
 800d9fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da00:	81a3      	strh	r3, [r4, #12]
 800da02:	f04f 30ff 	mov.w	r0, #4294967295
 800da06:	e7e9      	b.n	800d9dc <__ssputs_r+0x88>

0800da08 <_svfiprintf_r>:
 800da08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da0c:	4698      	mov	r8, r3
 800da0e:	898b      	ldrh	r3, [r1, #12]
 800da10:	061b      	lsls	r3, r3, #24
 800da12:	b09d      	sub	sp, #116	; 0x74
 800da14:	4607      	mov	r7, r0
 800da16:	460d      	mov	r5, r1
 800da18:	4614      	mov	r4, r2
 800da1a:	d50e      	bpl.n	800da3a <_svfiprintf_r+0x32>
 800da1c:	690b      	ldr	r3, [r1, #16]
 800da1e:	b963      	cbnz	r3, 800da3a <_svfiprintf_r+0x32>
 800da20:	2140      	movs	r1, #64	; 0x40
 800da22:	f7ff ff0b 	bl	800d83c <_malloc_r>
 800da26:	6028      	str	r0, [r5, #0]
 800da28:	6128      	str	r0, [r5, #16]
 800da2a:	b920      	cbnz	r0, 800da36 <_svfiprintf_r+0x2e>
 800da2c:	230c      	movs	r3, #12
 800da2e:	603b      	str	r3, [r7, #0]
 800da30:	f04f 30ff 	mov.w	r0, #4294967295
 800da34:	e0d0      	b.n	800dbd8 <_svfiprintf_r+0x1d0>
 800da36:	2340      	movs	r3, #64	; 0x40
 800da38:	616b      	str	r3, [r5, #20]
 800da3a:	2300      	movs	r3, #0
 800da3c:	9309      	str	r3, [sp, #36]	; 0x24
 800da3e:	2320      	movs	r3, #32
 800da40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800da44:	f8cd 800c 	str.w	r8, [sp, #12]
 800da48:	2330      	movs	r3, #48	; 0x30
 800da4a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800dbf0 <_svfiprintf_r+0x1e8>
 800da4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800da52:	f04f 0901 	mov.w	r9, #1
 800da56:	4623      	mov	r3, r4
 800da58:	469a      	mov	sl, r3
 800da5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da5e:	b10a      	cbz	r2, 800da64 <_svfiprintf_r+0x5c>
 800da60:	2a25      	cmp	r2, #37	; 0x25
 800da62:	d1f9      	bne.n	800da58 <_svfiprintf_r+0x50>
 800da64:	ebba 0b04 	subs.w	fp, sl, r4
 800da68:	d00b      	beq.n	800da82 <_svfiprintf_r+0x7a>
 800da6a:	465b      	mov	r3, fp
 800da6c:	4622      	mov	r2, r4
 800da6e:	4629      	mov	r1, r5
 800da70:	4638      	mov	r0, r7
 800da72:	f7ff ff6f 	bl	800d954 <__ssputs_r>
 800da76:	3001      	adds	r0, #1
 800da78:	f000 80a9 	beq.w	800dbce <_svfiprintf_r+0x1c6>
 800da7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800da7e:	445a      	add	r2, fp
 800da80:	9209      	str	r2, [sp, #36]	; 0x24
 800da82:	f89a 3000 	ldrb.w	r3, [sl]
 800da86:	2b00      	cmp	r3, #0
 800da88:	f000 80a1 	beq.w	800dbce <_svfiprintf_r+0x1c6>
 800da8c:	2300      	movs	r3, #0
 800da8e:	f04f 32ff 	mov.w	r2, #4294967295
 800da92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800da96:	f10a 0a01 	add.w	sl, sl, #1
 800da9a:	9304      	str	r3, [sp, #16]
 800da9c:	9307      	str	r3, [sp, #28]
 800da9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800daa2:	931a      	str	r3, [sp, #104]	; 0x68
 800daa4:	4654      	mov	r4, sl
 800daa6:	2205      	movs	r2, #5
 800daa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800daac:	4850      	ldr	r0, [pc, #320]	; (800dbf0 <_svfiprintf_r+0x1e8>)
 800daae:	f7f2 fbaf 	bl	8000210 <memchr>
 800dab2:	9a04      	ldr	r2, [sp, #16]
 800dab4:	b9d8      	cbnz	r0, 800daee <_svfiprintf_r+0xe6>
 800dab6:	06d0      	lsls	r0, r2, #27
 800dab8:	bf44      	itt	mi
 800daba:	2320      	movmi	r3, #32
 800dabc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dac0:	0711      	lsls	r1, r2, #28
 800dac2:	bf44      	itt	mi
 800dac4:	232b      	movmi	r3, #43	; 0x2b
 800dac6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800daca:	f89a 3000 	ldrb.w	r3, [sl]
 800dace:	2b2a      	cmp	r3, #42	; 0x2a
 800dad0:	d015      	beq.n	800dafe <_svfiprintf_r+0xf6>
 800dad2:	9a07      	ldr	r2, [sp, #28]
 800dad4:	4654      	mov	r4, sl
 800dad6:	2000      	movs	r0, #0
 800dad8:	f04f 0c0a 	mov.w	ip, #10
 800dadc:	4621      	mov	r1, r4
 800dade:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dae2:	3b30      	subs	r3, #48	; 0x30
 800dae4:	2b09      	cmp	r3, #9
 800dae6:	d94d      	bls.n	800db84 <_svfiprintf_r+0x17c>
 800dae8:	b1b0      	cbz	r0, 800db18 <_svfiprintf_r+0x110>
 800daea:	9207      	str	r2, [sp, #28]
 800daec:	e014      	b.n	800db18 <_svfiprintf_r+0x110>
 800daee:	eba0 0308 	sub.w	r3, r0, r8
 800daf2:	fa09 f303 	lsl.w	r3, r9, r3
 800daf6:	4313      	orrs	r3, r2
 800daf8:	9304      	str	r3, [sp, #16]
 800dafa:	46a2      	mov	sl, r4
 800dafc:	e7d2      	b.n	800daa4 <_svfiprintf_r+0x9c>
 800dafe:	9b03      	ldr	r3, [sp, #12]
 800db00:	1d19      	adds	r1, r3, #4
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	9103      	str	r1, [sp, #12]
 800db06:	2b00      	cmp	r3, #0
 800db08:	bfbb      	ittet	lt
 800db0a:	425b      	neglt	r3, r3
 800db0c:	f042 0202 	orrlt.w	r2, r2, #2
 800db10:	9307      	strge	r3, [sp, #28]
 800db12:	9307      	strlt	r3, [sp, #28]
 800db14:	bfb8      	it	lt
 800db16:	9204      	strlt	r2, [sp, #16]
 800db18:	7823      	ldrb	r3, [r4, #0]
 800db1a:	2b2e      	cmp	r3, #46	; 0x2e
 800db1c:	d10c      	bne.n	800db38 <_svfiprintf_r+0x130>
 800db1e:	7863      	ldrb	r3, [r4, #1]
 800db20:	2b2a      	cmp	r3, #42	; 0x2a
 800db22:	d134      	bne.n	800db8e <_svfiprintf_r+0x186>
 800db24:	9b03      	ldr	r3, [sp, #12]
 800db26:	1d1a      	adds	r2, r3, #4
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	9203      	str	r2, [sp, #12]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	bfb8      	it	lt
 800db30:	f04f 33ff 	movlt.w	r3, #4294967295
 800db34:	3402      	adds	r4, #2
 800db36:	9305      	str	r3, [sp, #20]
 800db38:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800dc00 <_svfiprintf_r+0x1f8>
 800db3c:	7821      	ldrb	r1, [r4, #0]
 800db3e:	2203      	movs	r2, #3
 800db40:	4650      	mov	r0, sl
 800db42:	f7f2 fb65 	bl	8000210 <memchr>
 800db46:	b138      	cbz	r0, 800db58 <_svfiprintf_r+0x150>
 800db48:	9b04      	ldr	r3, [sp, #16]
 800db4a:	eba0 000a 	sub.w	r0, r0, sl
 800db4e:	2240      	movs	r2, #64	; 0x40
 800db50:	4082      	lsls	r2, r0
 800db52:	4313      	orrs	r3, r2
 800db54:	3401      	adds	r4, #1
 800db56:	9304      	str	r3, [sp, #16]
 800db58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db5c:	4825      	ldr	r0, [pc, #148]	; (800dbf4 <_svfiprintf_r+0x1ec>)
 800db5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800db62:	2206      	movs	r2, #6
 800db64:	f7f2 fb54 	bl	8000210 <memchr>
 800db68:	2800      	cmp	r0, #0
 800db6a:	d038      	beq.n	800dbde <_svfiprintf_r+0x1d6>
 800db6c:	4b22      	ldr	r3, [pc, #136]	; (800dbf8 <_svfiprintf_r+0x1f0>)
 800db6e:	bb1b      	cbnz	r3, 800dbb8 <_svfiprintf_r+0x1b0>
 800db70:	9b03      	ldr	r3, [sp, #12]
 800db72:	3307      	adds	r3, #7
 800db74:	f023 0307 	bic.w	r3, r3, #7
 800db78:	3308      	adds	r3, #8
 800db7a:	9303      	str	r3, [sp, #12]
 800db7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db7e:	4433      	add	r3, r6
 800db80:	9309      	str	r3, [sp, #36]	; 0x24
 800db82:	e768      	b.n	800da56 <_svfiprintf_r+0x4e>
 800db84:	fb0c 3202 	mla	r2, ip, r2, r3
 800db88:	460c      	mov	r4, r1
 800db8a:	2001      	movs	r0, #1
 800db8c:	e7a6      	b.n	800dadc <_svfiprintf_r+0xd4>
 800db8e:	2300      	movs	r3, #0
 800db90:	3401      	adds	r4, #1
 800db92:	9305      	str	r3, [sp, #20]
 800db94:	4619      	mov	r1, r3
 800db96:	f04f 0c0a 	mov.w	ip, #10
 800db9a:	4620      	mov	r0, r4
 800db9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dba0:	3a30      	subs	r2, #48	; 0x30
 800dba2:	2a09      	cmp	r2, #9
 800dba4:	d903      	bls.n	800dbae <_svfiprintf_r+0x1a6>
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d0c6      	beq.n	800db38 <_svfiprintf_r+0x130>
 800dbaa:	9105      	str	r1, [sp, #20]
 800dbac:	e7c4      	b.n	800db38 <_svfiprintf_r+0x130>
 800dbae:	fb0c 2101 	mla	r1, ip, r1, r2
 800dbb2:	4604      	mov	r4, r0
 800dbb4:	2301      	movs	r3, #1
 800dbb6:	e7f0      	b.n	800db9a <_svfiprintf_r+0x192>
 800dbb8:	ab03      	add	r3, sp, #12
 800dbba:	9300      	str	r3, [sp, #0]
 800dbbc:	462a      	mov	r2, r5
 800dbbe:	4b0f      	ldr	r3, [pc, #60]	; (800dbfc <_svfiprintf_r+0x1f4>)
 800dbc0:	a904      	add	r1, sp, #16
 800dbc2:	4638      	mov	r0, r7
 800dbc4:	f3af 8000 	nop.w
 800dbc8:	1c42      	adds	r2, r0, #1
 800dbca:	4606      	mov	r6, r0
 800dbcc:	d1d6      	bne.n	800db7c <_svfiprintf_r+0x174>
 800dbce:	89ab      	ldrh	r3, [r5, #12]
 800dbd0:	065b      	lsls	r3, r3, #25
 800dbd2:	f53f af2d 	bmi.w	800da30 <_svfiprintf_r+0x28>
 800dbd6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dbd8:	b01d      	add	sp, #116	; 0x74
 800dbda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbde:	ab03      	add	r3, sp, #12
 800dbe0:	9300      	str	r3, [sp, #0]
 800dbe2:	462a      	mov	r2, r5
 800dbe4:	4b05      	ldr	r3, [pc, #20]	; (800dbfc <_svfiprintf_r+0x1f4>)
 800dbe6:	a904      	add	r1, sp, #16
 800dbe8:	4638      	mov	r0, r7
 800dbea:	f000 f879 	bl	800dce0 <_printf_i>
 800dbee:	e7eb      	b.n	800dbc8 <_svfiprintf_r+0x1c0>
 800dbf0:	0800f3d6 	.word	0x0800f3d6
 800dbf4:	0800f3e0 	.word	0x0800f3e0
 800dbf8:	00000000 	.word	0x00000000
 800dbfc:	0800d955 	.word	0x0800d955
 800dc00:	0800f3dc 	.word	0x0800f3dc

0800dc04 <_printf_common>:
 800dc04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc08:	4616      	mov	r6, r2
 800dc0a:	4699      	mov	r9, r3
 800dc0c:	688a      	ldr	r2, [r1, #8]
 800dc0e:	690b      	ldr	r3, [r1, #16]
 800dc10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dc14:	4293      	cmp	r3, r2
 800dc16:	bfb8      	it	lt
 800dc18:	4613      	movlt	r3, r2
 800dc1a:	6033      	str	r3, [r6, #0]
 800dc1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dc20:	4607      	mov	r7, r0
 800dc22:	460c      	mov	r4, r1
 800dc24:	b10a      	cbz	r2, 800dc2a <_printf_common+0x26>
 800dc26:	3301      	adds	r3, #1
 800dc28:	6033      	str	r3, [r6, #0]
 800dc2a:	6823      	ldr	r3, [r4, #0]
 800dc2c:	0699      	lsls	r1, r3, #26
 800dc2e:	bf42      	ittt	mi
 800dc30:	6833      	ldrmi	r3, [r6, #0]
 800dc32:	3302      	addmi	r3, #2
 800dc34:	6033      	strmi	r3, [r6, #0]
 800dc36:	6825      	ldr	r5, [r4, #0]
 800dc38:	f015 0506 	ands.w	r5, r5, #6
 800dc3c:	d106      	bne.n	800dc4c <_printf_common+0x48>
 800dc3e:	f104 0a19 	add.w	sl, r4, #25
 800dc42:	68e3      	ldr	r3, [r4, #12]
 800dc44:	6832      	ldr	r2, [r6, #0]
 800dc46:	1a9b      	subs	r3, r3, r2
 800dc48:	42ab      	cmp	r3, r5
 800dc4a:	dc26      	bgt.n	800dc9a <_printf_common+0x96>
 800dc4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dc50:	1e13      	subs	r3, r2, #0
 800dc52:	6822      	ldr	r2, [r4, #0]
 800dc54:	bf18      	it	ne
 800dc56:	2301      	movne	r3, #1
 800dc58:	0692      	lsls	r2, r2, #26
 800dc5a:	d42b      	bmi.n	800dcb4 <_printf_common+0xb0>
 800dc5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dc60:	4649      	mov	r1, r9
 800dc62:	4638      	mov	r0, r7
 800dc64:	47c0      	blx	r8
 800dc66:	3001      	adds	r0, #1
 800dc68:	d01e      	beq.n	800dca8 <_printf_common+0xa4>
 800dc6a:	6823      	ldr	r3, [r4, #0]
 800dc6c:	6922      	ldr	r2, [r4, #16]
 800dc6e:	f003 0306 	and.w	r3, r3, #6
 800dc72:	2b04      	cmp	r3, #4
 800dc74:	bf02      	ittt	eq
 800dc76:	68e5      	ldreq	r5, [r4, #12]
 800dc78:	6833      	ldreq	r3, [r6, #0]
 800dc7a:	1aed      	subeq	r5, r5, r3
 800dc7c:	68a3      	ldr	r3, [r4, #8]
 800dc7e:	bf0c      	ite	eq
 800dc80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dc84:	2500      	movne	r5, #0
 800dc86:	4293      	cmp	r3, r2
 800dc88:	bfc4      	itt	gt
 800dc8a:	1a9b      	subgt	r3, r3, r2
 800dc8c:	18ed      	addgt	r5, r5, r3
 800dc8e:	2600      	movs	r6, #0
 800dc90:	341a      	adds	r4, #26
 800dc92:	42b5      	cmp	r5, r6
 800dc94:	d11a      	bne.n	800dccc <_printf_common+0xc8>
 800dc96:	2000      	movs	r0, #0
 800dc98:	e008      	b.n	800dcac <_printf_common+0xa8>
 800dc9a:	2301      	movs	r3, #1
 800dc9c:	4652      	mov	r2, sl
 800dc9e:	4649      	mov	r1, r9
 800dca0:	4638      	mov	r0, r7
 800dca2:	47c0      	blx	r8
 800dca4:	3001      	adds	r0, #1
 800dca6:	d103      	bne.n	800dcb0 <_printf_common+0xac>
 800dca8:	f04f 30ff 	mov.w	r0, #4294967295
 800dcac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcb0:	3501      	adds	r5, #1
 800dcb2:	e7c6      	b.n	800dc42 <_printf_common+0x3e>
 800dcb4:	18e1      	adds	r1, r4, r3
 800dcb6:	1c5a      	adds	r2, r3, #1
 800dcb8:	2030      	movs	r0, #48	; 0x30
 800dcba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dcbe:	4422      	add	r2, r4
 800dcc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dcc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dcc8:	3302      	adds	r3, #2
 800dcca:	e7c7      	b.n	800dc5c <_printf_common+0x58>
 800dccc:	2301      	movs	r3, #1
 800dcce:	4622      	mov	r2, r4
 800dcd0:	4649      	mov	r1, r9
 800dcd2:	4638      	mov	r0, r7
 800dcd4:	47c0      	blx	r8
 800dcd6:	3001      	adds	r0, #1
 800dcd8:	d0e6      	beq.n	800dca8 <_printf_common+0xa4>
 800dcda:	3601      	adds	r6, #1
 800dcdc:	e7d9      	b.n	800dc92 <_printf_common+0x8e>
	...

0800dce0 <_printf_i>:
 800dce0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dce4:	7e0f      	ldrb	r7, [r1, #24]
 800dce6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dce8:	2f78      	cmp	r7, #120	; 0x78
 800dcea:	4691      	mov	r9, r2
 800dcec:	4680      	mov	r8, r0
 800dcee:	460c      	mov	r4, r1
 800dcf0:	469a      	mov	sl, r3
 800dcf2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800dcf6:	d807      	bhi.n	800dd08 <_printf_i+0x28>
 800dcf8:	2f62      	cmp	r7, #98	; 0x62
 800dcfa:	d80a      	bhi.n	800dd12 <_printf_i+0x32>
 800dcfc:	2f00      	cmp	r7, #0
 800dcfe:	f000 80d4 	beq.w	800deaa <_printf_i+0x1ca>
 800dd02:	2f58      	cmp	r7, #88	; 0x58
 800dd04:	f000 80c0 	beq.w	800de88 <_printf_i+0x1a8>
 800dd08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dd0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dd10:	e03a      	b.n	800dd88 <_printf_i+0xa8>
 800dd12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dd16:	2b15      	cmp	r3, #21
 800dd18:	d8f6      	bhi.n	800dd08 <_printf_i+0x28>
 800dd1a:	a101      	add	r1, pc, #4	; (adr r1, 800dd20 <_printf_i+0x40>)
 800dd1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dd20:	0800dd79 	.word	0x0800dd79
 800dd24:	0800dd8d 	.word	0x0800dd8d
 800dd28:	0800dd09 	.word	0x0800dd09
 800dd2c:	0800dd09 	.word	0x0800dd09
 800dd30:	0800dd09 	.word	0x0800dd09
 800dd34:	0800dd09 	.word	0x0800dd09
 800dd38:	0800dd8d 	.word	0x0800dd8d
 800dd3c:	0800dd09 	.word	0x0800dd09
 800dd40:	0800dd09 	.word	0x0800dd09
 800dd44:	0800dd09 	.word	0x0800dd09
 800dd48:	0800dd09 	.word	0x0800dd09
 800dd4c:	0800de91 	.word	0x0800de91
 800dd50:	0800ddb9 	.word	0x0800ddb9
 800dd54:	0800de4b 	.word	0x0800de4b
 800dd58:	0800dd09 	.word	0x0800dd09
 800dd5c:	0800dd09 	.word	0x0800dd09
 800dd60:	0800deb3 	.word	0x0800deb3
 800dd64:	0800dd09 	.word	0x0800dd09
 800dd68:	0800ddb9 	.word	0x0800ddb9
 800dd6c:	0800dd09 	.word	0x0800dd09
 800dd70:	0800dd09 	.word	0x0800dd09
 800dd74:	0800de53 	.word	0x0800de53
 800dd78:	682b      	ldr	r3, [r5, #0]
 800dd7a:	1d1a      	adds	r2, r3, #4
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	602a      	str	r2, [r5, #0]
 800dd80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dd84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dd88:	2301      	movs	r3, #1
 800dd8a:	e09f      	b.n	800decc <_printf_i+0x1ec>
 800dd8c:	6820      	ldr	r0, [r4, #0]
 800dd8e:	682b      	ldr	r3, [r5, #0]
 800dd90:	0607      	lsls	r7, r0, #24
 800dd92:	f103 0104 	add.w	r1, r3, #4
 800dd96:	6029      	str	r1, [r5, #0]
 800dd98:	d501      	bpl.n	800dd9e <_printf_i+0xbe>
 800dd9a:	681e      	ldr	r6, [r3, #0]
 800dd9c:	e003      	b.n	800dda6 <_printf_i+0xc6>
 800dd9e:	0646      	lsls	r6, r0, #25
 800dda0:	d5fb      	bpl.n	800dd9a <_printf_i+0xba>
 800dda2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800dda6:	2e00      	cmp	r6, #0
 800dda8:	da03      	bge.n	800ddb2 <_printf_i+0xd2>
 800ddaa:	232d      	movs	r3, #45	; 0x2d
 800ddac:	4276      	negs	r6, r6
 800ddae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ddb2:	485a      	ldr	r0, [pc, #360]	; (800df1c <_printf_i+0x23c>)
 800ddb4:	230a      	movs	r3, #10
 800ddb6:	e012      	b.n	800ddde <_printf_i+0xfe>
 800ddb8:	682b      	ldr	r3, [r5, #0]
 800ddba:	6820      	ldr	r0, [r4, #0]
 800ddbc:	1d19      	adds	r1, r3, #4
 800ddbe:	6029      	str	r1, [r5, #0]
 800ddc0:	0605      	lsls	r5, r0, #24
 800ddc2:	d501      	bpl.n	800ddc8 <_printf_i+0xe8>
 800ddc4:	681e      	ldr	r6, [r3, #0]
 800ddc6:	e002      	b.n	800ddce <_printf_i+0xee>
 800ddc8:	0641      	lsls	r1, r0, #25
 800ddca:	d5fb      	bpl.n	800ddc4 <_printf_i+0xe4>
 800ddcc:	881e      	ldrh	r6, [r3, #0]
 800ddce:	4853      	ldr	r0, [pc, #332]	; (800df1c <_printf_i+0x23c>)
 800ddd0:	2f6f      	cmp	r7, #111	; 0x6f
 800ddd2:	bf0c      	ite	eq
 800ddd4:	2308      	moveq	r3, #8
 800ddd6:	230a      	movne	r3, #10
 800ddd8:	2100      	movs	r1, #0
 800ddda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ddde:	6865      	ldr	r5, [r4, #4]
 800dde0:	60a5      	str	r5, [r4, #8]
 800dde2:	2d00      	cmp	r5, #0
 800dde4:	bfa2      	ittt	ge
 800dde6:	6821      	ldrge	r1, [r4, #0]
 800dde8:	f021 0104 	bicge.w	r1, r1, #4
 800ddec:	6021      	strge	r1, [r4, #0]
 800ddee:	b90e      	cbnz	r6, 800ddf4 <_printf_i+0x114>
 800ddf0:	2d00      	cmp	r5, #0
 800ddf2:	d04b      	beq.n	800de8c <_printf_i+0x1ac>
 800ddf4:	4615      	mov	r5, r2
 800ddf6:	fbb6 f1f3 	udiv	r1, r6, r3
 800ddfa:	fb03 6711 	mls	r7, r3, r1, r6
 800ddfe:	5dc7      	ldrb	r7, [r0, r7]
 800de00:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800de04:	4637      	mov	r7, r6
 800de06:	42bb      	cmp	r3, r7
 800de08:	460e      	mov	r6, r1
 800de0a:	d9f4      	bls.n	800ddf6 <_printf_i+0x116>
 800de0c:	2b08      	cmp	r3, #8
 800de0e:	d10b      	bne.n	800de28 <_printf_i+0x148>
 800de10:	6823      	ldr	r3, [r4, #0]
 800de12:	07de      	lsls	r6, r3, #31
 800de14:	d508      	bpl.n	800de28 <_printf_i+0x148>
 800de16:	6923      	ldr	r3, [r4, #16]
 800de18:	6861      	ldr	r1, [r4, #4]
 800de1a:	4299      	cmp	r1, r3
 800de1c:	bfde      	ittt	le
 800de1e:	2330      	movle	r3, #48	; 0x30
 800de20:	f805 3c01 	strble.w	r3, [r5, #-1]
 800de24:	f105 35ff 	addle.w	r5, r5, #4294967295
 800de28:	1b52      	subs	r2, r2, r5
 800de2a:	6122      	str	r2, [r4, #16]
 800de2c:	f8cd a000 	str.w	sl, [sp]
 800de30:	464b      	mov	r3, r9
 800de32:	aa03      	add	r2, sp, #12
 800de34:	4621      	mov	r1, r4
 800de36:	4640      	mov	r0, r8
 800de38:	f7ff fee4 	bl	800dc04 <_printf_common>
 800de3c:	3001      	adds	r0, #1
 800de3e:	d14a      	bne.n	800ded6 <_printf_i+0x1f6>
 800de40:	f04f 30ff 	mov.w	r0, #4294967295
 800de44:	b004      	add	sp, #16
 800de46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de4a:	6823      	ldr	r3, [r4, #0]
 800de4c:	f043 0320 	orr.w	r3, r3, #32
 800de50:	6023      	str	r3, [r4, #0]
 800de52:	4833      	ldr	r0, [pc, #204]	; (800df20 <_printf_i+0x240>)
 800de54:	2778      	movs	r7, #120	; 0x78
 800de56:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800de5a:	6823      	ldr	r3, [r4, #0]
 800de5c:	6829      	ldr	r1, [r5, #0]
 800de5e:	061f      	lsls	r7, r3, #24
 800de60:	f851 6b04 	ldr.w	r6, [r1], #4
 800de64:	d402      	bmi.n	800de6c <_printf_i+0x18c>
 800de66:	065f      	lsls	r7, r3, #25
 800de68:	bf48      	it	mi
 800de6a:	b2b6      	uxthmi	r6, r6
 800de6c:	07df      	lsls	r7, r3, #31
 800de6e:	bf48      	it	mi
 800de70:	f043 0320 	orrmi.w	r3, r3, #32
 800de74:	6029      	str	r1, [r5, #0]
 800de76:	bf48      	it	mi
 800de78:	6023      	strmi	r3, [r4, #0]
 800de7a:	b91e      	cbnz	r6, 800de84 <_printf_i+0x1a4>
 800de7c:	6823      	ldr	r3, [r4, #0]
 800de7e:	f023 0320 	bic.w	r3, r3, #32
 800de82:	6023      	str	r3, [r4, #0]
 800de84:	2310      	movs	r3, #16
 800de86:	e7a7      	b.n	800ddd8 <_printf_i+0xf8>
 800de88:	4824      	ldr	r0, [pc, #144]	; (800df1c <_printf_i+0x23c>)
 800de8a:	e7e4      	b.n	800de56 <_printf_i+0x176>
 800de8c:	4615      	mov	r5, r2
 800de8e:	e7bd      	b.n	800de0c <_printf_i+0x12c>
 800de90:	682b      	ldr	r3, [r5, #0]
 800de92:	6826      	ldr	r6, [r4, #0]
 800de94:	6961      	ldr	r1, [r4, #20]
 800de96:	1d18      	adds	r0, r3, #4
 800de98:	6028      	str	r0, [r5, #0]
 800de9a:	0635      	lsls	r5, r6, #24
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	d501      	bpl.n	800dea4 <_printf_i+0x1c4>
 800dea0:	6019      	str	r1, [r3, #0]
 800dea2:	e002      	b.n	800deaa <_printf_i+0x1ca>
 800dea4:	0670      	lsls	r0, r6, #25
 800dea6:	d5fb      	bpl.n	800dea0 <_printf_i+0x1c0>
 800dea8:	8019      	strh	r1, [r3, #0]
 800deaa:	2300      	movs	r3, #0
 800deac:	6123      	str	r3, [r4, #16]
 800deae:	4615      	mov	r5, r2
 800deb0:	e7bc      	b.n	800de2c <_printf_i+0x14c>
 800deb2:	682b      	ldr	r3, [r5, #0]
 800deb4:	1d1a      	adds	r2, r3, #4
 800deb6:	602a      	str	r2, [r5, #0]
 800deb8:	681d      	ldr	r5, [r3, #0]
 800deba:	6862      	ldr	r2, [r4, #4]
 800debc:	2100      	movs	r1, #0
 800debe:	4628      	mov	r0, r5
 800dec0:	f7f2 f9a6 	bl	8000210 <memchr>
 800dec4:	b108      	cbz	r0, 800deca <_printf_i+0x1ea>
 800dec6:	1b40      	subs	r0, r0, r5
 800dec8:	6060      	str	r0, [r4, #4]
 800deca:	6863      	ldr	r3, [r4, #4]
 800decc:	6123      	str	r3, [r4, #16]
 800dece:	2300      	movs	r3, #0
 800ded0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ded4:	e7aa      	b.n	800de2c <_printf_i+0x14c>
 800ded6:	6923      	ldr	r3, [r4, #16]
 800ded8:	462a      	mov	r2, r5
 800deda:	4649      	mov	r1, r9
 800dedc:	4640      	mov	r0, r8
 800dede:	47d0      	blx	sl
 800dee0:	3001      	adds	r0, #1
 800dee2:	d0ad      	beq.n	800de40 <_printf_i+0x160>
 800dee4:	6823      	ldr	r3, [r4, #0]
 800dee6:	079b      	lsls	r3, r3, #30
 800dee8:	d413      	bmi.n	800df12 <_printf_i+0x232>
 800deea:	68e0      	ldr	r0, [r4, #12]
 800deec:	9b03      	ldr	r3, [sp, #12]
 800deee:	4298      	cmp	r0, r3
 800def0:	bfb8      	it	lt
 800def2:	4618      	movlt	r0, r3
 800def4:	e7a6      	b.n	800de44 <_printf_i+0x164>
 800def6:	2301      	movs	r3, #1
 800def8:	4632      	mov	r2, r6
 800defa:	4649      	mov	r1, r9
 800defc:	4640      	mov	r0, r8
 800defe:	47d0      	blx	sl
 800df00:	3001      	adds	r0, #1
 800df02:	d09d      	beq.n	800de40 <_printf_i+0x160>
 800df04:	3501      	adds	r5, #1
 800df06:	68e3      	ldr	r3, [r4, #12]
 800df08:	9903      	ldr	r1, [sp, #12]
 800df0a:	1a5b      	subs	r3, r3, r1
 800df0c:	42ab      	cmp	r3, r5
 800df0e:	dcf2      	bgt.n	800def6 <_printf_i+0x216>
 800df10:	e7eb      	b.n	800deea <_printf_i+0x20a>
 800df12:	2500      	movs	r5, #0
 800df14:	f104 0619 	add.w	r6, r4, #25
 800df18:	e7f5      	b.n	800df06 <_printf_i+0x226>
 800df1a:	bf00      	nop
 800df1c:	0800f3e7 	.word	0x0800f3e7
 800df20:	0800f3f8 	.word	0x0800f3f8

0800df24 <memmove>:
 800df24:	4288      	cmp	r0, r1
 800df26:	b510      	push	{r4, lr}
 800df28:	eb01 0402 	add.w	r4, r1, r2
 800df2c:	d902      	bls.n	800df34 <memmove+0x10>
 800df2e:	4284      	cmp	r4, r0
 800df30:	4623      	mov	r3, r4
 800df32:	d807      	bhi.n	800df44 <memmove+0x20>
 800df34:	1e43      	subs	r3, r0, #1
 800df36:	42a1      	cmp	r1, r4
 800df38:	d008      	beq.n	800df4c <memmove+0x28>
 800df3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800df3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800df42:	e7f8      	b.n	800df36 <memmove+0x12>
 800df44:	4402      	add	r2, r0
 800df46:	4601      	mov	r1, r0
 800df48:	428a      	cmp	r2, r1
 800df4a:	d100      	bne.n	800df4e <memmove+0x2a>
 800df4c:	bd10      	pop	{r4, pc}
 800df4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800df52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800df56:	e7f7      	b.n	800df48 <memmove+0x24>

0800df58 <_sbrk_r>:
 800df58:	b538      	push	{r3, r4, r5, lr}
 800df5a:	4d06      	ldr	r5, [pc, #24]	; (800df74 <_sbrk_r+0x1c>)
 800df5c:	2300      	movs	r3, #0
 800df5e:	4604      	mov	r4, r0
 800df60:	4608      	mov	r0, r1
 800df62:	602b      	str	r3, [r5, #0]
 800df64:	f7f3 fbbc 	bl	80016e0 <_sbrk>
 800df68:	1c43      	adds	r3, r0, #1
 800df6a:	d102      	bne.n	800df72 <_sbrk_r+0x1a>
 800df6c:	682b      	ldr	r3, [r5, #0]
 800df6e:	b103      	cbz	r3, 800df72 <_sbrk_r+0x1a>
 800df70:	6023      	str	r3, [r4, #0]
 800df72:	bd38      	pop	{r3, r4, r5, pc}
 800df74:	20005520 	.word	0x20005520

0800df78 <_realloc_r>:
 800df78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df7c:	4680      	mov	r8, r0
 800df7e:	4614      	mov	r4, r2
 800df80:	460e      	mov	r6, r1
 800df82:	b921      	cbnz	r1, 800df8e <_realloc_r+0x16>
 800df84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df88:	4611      	mov	r1, r2
 800df8a:	f7ff bc57 	b.w	800d83c <_malloc_r>
 800df8e:	b92a      	cbnz	r2, 800df9c <_realloc_r+0x24>
 800df90:	f7ff fbe8 	bl	800d764 <_free_r>
 800df94:	4625      	mov	r5, r4
 800df96:	4628      	mov	r0, r5
 800df98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df9c:	f000 f81b 	bl	800dfd6 <_malloc_usable_size_r>
 800dfa0:	4284      	cmp	r4, r0
 800dfa2:	4607      	mov	r7, r0
 800dfa4:	d802      	bhi.n	800dfac <_realloc_r+0x34>
 800dfa6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dfaa:	d812      	bhi.n	800dfd2 <_realloc_r+0x5a>
 800dfac:	4621      	mov	r1, r4
 800dfae:	4640      	mov	r0, r8
 800dfb0:	f7ff fc44 	bl	800d83c <_malloc_r>
 800dfb4:	4605      	mov	r5, r0
 800dfb6:	2800      	cmp	r0, #0
 800dfb8:	d0ed      	beq.n	800df96 <_realloc_r+0x1e>
 800dfba:	42bc      	cmp	r4, r7
 800dfbc:	4622      	mov	r2, r4
 800dfbe:	4631      	mov	r1, r6
 800dfc0:	bf28      	it	cs
 800dfc2:	463a      	movcs	r2, r7
 800dfc4:	f7ff fbc0 	bl	800d748 <memcpy>
 800dfc8:	4631      	mov	r1, r6
 800dfca:	4640      	mov	r0, r8
 800dfcc:	f7ff fbca 	bl	800d764 <_free_r>
 800dfd0:	e7e1      	b.n	800df96 <_realloc_r+0x1e>
 800dfd2:	4635      	mov	r5, r6
 800dfd4:	e7df      	b.n	800df96 <_realloc_r+0x1e>

0800dfd6 <_malloc_usable_size_r>:
 800dfd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dfda:	1f18      	subs	r0, r3, #4
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	bfbc      	itt	lt
 800dfe0:	580b      	ldrlt	r3, [r1, r0]
 800dfe2:	18c0      	addlt	r0, r0, r3
 800dfe4:	4770      	bx	lr

0800dfe6 <atan2>:
 800dfe6:	f000 b87f 	b.w	800e0e8 <__ieee754_atan2>
	...

0800dfec <pow>:
 800dfec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfee:	ed2d 8b02 	vpush	{d8}
 800dff2:	eeb0 8a40 	vmov.f32	s16, s0
 800dff6:	eef0 8a60 	vmov.f32	s17, s1
 800dffa:	ec55 4b11 	vmov	r4, r5, d1
 800dffe:	f000 f93b 	bl	800e278 <__ieee754_pow>
 800e002:	4622      	mov	r2, r4
 800e004:	462b      	mov	r3, r5
 800e006:	4620      	mov	r0, r4
 800e008:	4629      	mov	r1, r5
 800e00a:	ec57 6b10 	vmov	r6, r7, d0
 800e00e:	f7f2 fda5 	bl	8000b5c <__aeabi_dcmpun>
 800e012:	2800      	cmp	r0, #0
 800e014:	d13b      	bne.n	800e08e <pow+0xa2>
 800e016:	ec51 0b18 	vmov	r0, r1, d8
 800e01a:	2200      	movs	r2, #0
 800e01c:	2300      	movs	r3, #0
 800e01e:	f7f2 fd6b 	bl	8000af8 <__aeabi_dcmpeq>
 800e022:	b1b8      	cbz	r0, 800e054 <pow+0x68>
 800e024:	2200      	movs	r2, #0
 800e026:	2300      	movs	r3, #0
 800e028:	4620      	mov	r0, r4
 800e02a:	4629      	mov	r1, r5
 800e02c:	f7f2 fd64 	bl	8000af8 <__aeabi_dcmpeq>
 800e030:	2800      	cmp	r0, #0
 800e032:	d146      	bne.n	800e0c2 <pow+0xd6>
 800e034:	ec45 4b10 	vmov	d0, r4, r5
 800e038:	f000 f848 	bl	800e0cc <finite>
 800e03c:	b338      	cbz	r0, 800e08e <pow+0xa2>
 800e03e:	2200      	movs	r2, #0
 800e040:	2300      	movs	r3, #0
 800e042:	4620      	mov	r0, r4
 800e044:	4629      	mov	r1, r5
 800e046:	f7f2 fd61 	bl	8000b0c <__aeabi_dcmplt>
 800e04a:	b300      	cbz	r0, 800e08e <pow+0xa2>
 800e04c:	f7ff fb50 	bl	800d6f0 <__errno>
 800e050:	2322      	movs	r3, #34	; 0x22
 800e052:	e01b      	b.n	800e08c <pow+0xa0>
 800e054:	ec47 6b10 	vmov	d0, r6, r7
 800e058:	f000 f838 	bl	800e0cc <finite>
 800e05c:	b9e0      	cbnz	r0, 800e098 <pow+0xac>
 800e05e:	eeb0 0a48 	vmov.f32	s0, s16
 800e062:	eef0 0a68 	vmov.f32	s1, s17
 800e066:	f000 f831 	bl	800e0cc <finite>
 800e06a:	b1a8      	cbz	r0, 800e098 <pow+0xac>
 800e06c:	ec45 4b10 	vmov	d0, r4, r5
 800e070:	f000 f82c 	bl	800e0cc <finite>
 800e074:	b180      	cbz	r0, 800e098 <pow+0xac>
 800e076:	4632      	mov	r2, r6
 800e078:	463b      	mov	r3, r7
 800e07a:	4630      	mov	r0, r6
 800e07c:	4639      	mov	r1, r7
 800e07e:	f7f2 fd6d 	bl	8000b5c <__aeabi_dcmpun>
 800e082:	2800      	cmp	r0, #0
 800e084:	d0e2      	beq.n	800e04c <pow+0x60>
 800e086:	f7ff fb33 	bl	800d6f0 <__errno>
 800e08a:	2321      	movs	r3, #33	; 0x21
 800e08c:	6003      	str	r3, [r0, #0]
 800e08e:	ecbd 8b02 	vpop	{d8}
 800e092:	ec47 6b10 	vmov	d0, r6, r7
 800e096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e098:	2200      	movs	r2, #0
 800e09a:	2300      	movs	r3, #0
 800e09c:	4630      	mov	r0, r6
 800e09e:	4639      	mov	r1, r7
 800e0a0:	f7f2 fd2a 	bl	8000af8 <__aeabi_dcmpeq>
 800e0a4:	2800      	cmp	r0, #0
 800e0a6:	d0f2      	beq.n	800e08e <pow+0xa2>
 800e0a8:	eeb0 0a48 	vmov.f32	s0, s16
 800e0ac:	eef0 0a68 	vmov.f32	s1, s17
 800e0b0:	f000 f80c 	bl	800e0cc <finite>
 800e0b4:	2800      	cmp	r0, #0
 800e0b6:	d0ea      	beq.n	800e08e <pow+0xa2>
 800e0b8:	ec45 4b10 	vmov	d0, r4, r5
 800e0bc:	f000 f806 	bl	800e0cc <finite>
 800e0c0:	e7c3      	b.n	800e04a <pow+0x5e>
 800e0c2:	4f01      	ldr	r7, [pc, #4]	; (800e0c8 <pow+0xdc>)
 800e0c4:	2600      	movs	r6, #0
 800e0c6:	e7e2      	b.n	800e08e <pow+0xa2>
 800e0c8:	3ff00000 	.word	0x3ff00000

0800e0cc <finite>:
 800e0cc:	b082      	sub	sp, #8
 800e0ce:	ed8d 0b00 	vstr	d0, [sp]
 800e0d2:	9801      	ldr	r0, [sp, #4]
 800e0d4:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800e0d8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e0dc:	0fc0      	lsrs	r0, r0, #31
 800e0de:	b002      	add	sp, #8
 800e0e0:	4770      	bx	lr
 800e0e2:	0000      	movs	r0, r0
 800e0e4:	0000      	movs	r0, r0
	...

0800e0e8 <__ieee754_atan2>:
 800e0e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0ec:	ec57 6b11 	vmov	r6, r7, d1
 800e0f0:	4273      	negs	r3, r6
 800e0f2:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800e270 <__ieee754_atan2+0x188>
 800e0f6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800e0fa:	4333      	orrs	r3, r6
 800e0fc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800e100:	4543      	cmp	r3, r8
 800e102:	ec51 0b10 	vmov	r0, r1, d0
 800e106:	ee11 5a10 	vmov	r5, s2
 800e10a:	d80a      	bhi.n	800e122 <__ieee754_atan2+0x3a>
 800e10c:	4244      	negs	r4, r0
 800e10e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e112:	4304      	orrs	r4, r0
 800e114:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800e118:	4544      	cmp	r4, r8
 800e11a:	ee10 9a10 	vmov	r9, s0
 800e11e:	468e      	mov	lr, r1
 800e120:	d907      	bls.n	800e132 <__ieee754_atan2+0x4a>
 800e122:	4632      	mov	r2, r6
 800e124:	463b      	mov	r3, r7
 800e126:	f7f2 f8c9 	bl	80002bc <__adddf3>
 800e12a:	ec41 0b10 	vmov	d0, r0, r1
 800e12e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e132:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800e136:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e13a:	4334      	orrs	r4, r6
 800e13c:	d103      	bne.n	800e146 <__ieee754_atan2+0x5e>
 800e13e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e142:	f000 bdc5 	b.w	800ecd0 <atan>
 800e146:	17bc      	asrs	r4, r7, #30
 800e148:	f004 0402 	and.w	r4, r4, #2
 800e14c:	ea53 0909 	orrs.w	r9, r3, r9
 800e150:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800e154:	d107      	bne.n	800e166 <__ieee754_atan2+0x7e>
 800e156:	2c02      	cmp	r4, #2
 800e158:	d05f      	beq.n	800e21a <__ieee754_atan2+0x132>
 800e15a:	2c03      	cmp	r4, #3
 800e15c:	d1e5      	bne.n	800e12a <__ieee754_atan2+0x42>
 800e15e:	a140      	add	r1, pc, #256	; (adr r1, 800e260 <__ieee754_atan2+0x178>)
 800e160:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e164:	e7e1      	b.n	800e12a <__ieee754_atan2+0x42>
 800e166:	4315      	orrs	r5, r2
 800e168:	d106      	bne.n	800e178 <__ieee754_atan2+0x90>
 800e16a:	f1be 0f00 	cmp.w	lr, #0
 800e16e:	da5f      	bge.n	800e230 <__ieee754_atan2+0x148>
 800e170:	a13d      	add	r1, pc, #244	; (adr r1, 800e268 <__ieee754_atan2+0x180>)
 800e172:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e176:	e7d8      	b.n	800e12a <__ieee754_atan2+0x42>
 800e178:	4542      	cmp	r2, r8
 800e17a:	d10f      	bne.n	800e19c <__ieee754_atan2+0xb4>
 800e17c:	4293      	cmp	r3, r2
 800e17e:	f104 34ff 	add.w	r4, r4, #4294967295
 800e182:	d107      	bne.n	800e194 <__ieee754_atan2+0xac>
 800e184:	2c02      	cmp	r4, #2
 800e186:	d84c      	bhi.n	800e222 <__ieee754_atan2+0x13a>
 800e188:	4b33      	ldr	r3, [pc, #204]	; (800e258 <__ieee754_atan2+0x170>)
 800e18a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e18e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e192:	e7ca      	b.n	800e12a <__ieee754_atan2+0x42>
 800e194:	2c02      	cmp	r4, #2
 800e196:	d848      	bhi.n	800e22a <__ieee754_atan2+0x142>
 800e198:	4b30      	ldr	r3, [pc, #192]	; (800e25c <__ieee754_atan2+0x174>)
 800e19a:	e7f6      	b.n	800e18a <__ieee754_atan2+0xa2>
 800e19c:	4543      	cmp	r3, r8
 800e19e:	d0e4      	beq.n	800e16a <__ieee754_atan2+0x82>
 800e1a0:	1a9b      	subs	r3, r3, r2
 800e1a2:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800e1a6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e1aa:	da1e      	bge.n	800e1ea <__ieee754_atan2+0x102>
 800e1ac:	2f00      	cmp	r7, #0
 800e1ae:	da01      	bge.n	800e1b4 <__ieee754_atan2+0xcc>
 800e1b0:	323c      	adds	r2, #60	; 0x3c
 800e1b2:	db1e      	blt.n	800e1f2 <__ieee754_atan2+0x10a>
 800e1b4:	4632      	mov	r2, r6
 800e1b6:	463b      	mov	r3, r7
 800e1b8:	f7f2 fb60 	bl	800087c <__aeabi_ddiv>
 800e1bc:	ec41 0b10 	vmov	d0, r0, r1
 800e1c0:	f000 ff26 	bl	800f010 <fabs>
 800e1c4:	f000 fd84 	bl	800ecd0 <atan>
 800e1c8:	ec51 0b10 	vmov	r0, r1, d0
 800e1cc:	2c01      	cmp	r4, #1
 800e1ce:	d013      	beq.n	800e1f8 <__ieee754_atan2+0x110>
 800e1d0:	2c02      	cmp	r4, #2
 800e1d2:	d015      	beq.n	800e200 <__ieee754_atan2+0x118>
 800e1d4:	2c00      	cmp	r4, #0
 800e1d6:	d0a8      	beq.n	800e12a <__ieee754_atan2+0x42>
 800e1d8:	a317      	add	r3, pc, #92	; (adr r3, 800e238 <__ieee754_atan2+0x150>)
 800e1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1de:	f7f2 f86b 	bl	80002b8 <__aeabi_dsub>
 800e1e2:	a317      	add	r3, pc, #92	; (adr r3, 800e240 <__ieee754_atan2+0x158>)
 800e1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1e8:	e014      	b.n	800e214 <__ieee754_atan2+0x12c>
 800e1ea:	a117      	add	r1, pc, #92	; (adr r1, 800e248 <__ieee754_atan2+0x160>)
 800e1ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e1f0:	e7ec      	b.n	800e1cc <__ieee754_atan2+0xe4>
 800e1f2:	2000      	movs	r0, #0
 800e1f4:	2100      	movs	r1, #0
 800e1f6:	e7e9      	b.n	800e1cc <__ieee754_atan2+0xe4>
 800e1f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e1fc:	4619      	mov	r1, r3
 800e1fe:	e794      	b.n	800e12a <__ieee754_atan2+0x42>
 800e200:	a30d      	add	r3, pc, #52	; (adr r3, 800e238 <__ieee754_atan2+0x150>)
 800e202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e206:	f7f2 f857 	bl	80002b8 <__aeabi_dsub>
 800e20a:	4602      	mov	r2, r0
 800e20c:	460b      	mov	r3, r1
 800e20e:	a10c      	add	r1, pc, #48	; (adr r1, 800e240 <__ieee754_atan2+0x158>)
 800e210:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e214:	f7f2 f850 	bl	80002b8 <__aeabi_dsub>
 800e218:	e787      	b.n	800e12a <__ieee754_atan2+0x42>
 800e21a:	a109      	add	r1, pc, #36	; (adr r1, 800e240 <__ieee754_atan2+0x158>)
 800e21c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e220:	e783      	b.n	800e12a <__ieee754_atan2+0x42>
 800e222:	a10b      	add	r1, pc, #44	; (adr r1, 800e250 <__ieee754_atan2+0x168>)
 800e224:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e228:	e77f      	b.n	800e12a <__ieee754_atan2+0x42>
 800e22a:	2000      	movs	r0, #0
 800e22c:	2100      	movs	r1, #0
 800e22e:	e77c      	b.n	800e12a <__ieee754_atan2+0x42>
 800e230:	a105      	add	r1, pc, #20	; (adr r1, 800e248 <__ieee754_atan2+0x160>)
 800e232:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e236:	e778      	b.n	800e12a <__ieee754_atan2+0x42>
 800e238:	33145c07 	.word	0x33145c07
 800e23c:	3ca1a626 	.word	0x3ca1a626
 800e240:	54442d18 	.word	0x54442d18
 800e244:	400921fb 	.word	0x400921fb
 800e248:	54442d18 	.word	0x54442d18
 800e24c:	3ff921fb 	.word	0x3ff921fb
 800e250:	54442d18 	.word	0x54442d18
 800e254:	3fe921fb 	.word	0x3fe921fb
 800e258:	0800f410 	.word	0x0800f410
 800e25c:	0800f428 	.word	0x0800f428
 800e260:	54442d18 	.word	0x54442d18
 800e264:	c00921fb 	.word	0xc00921fb
 800e268:	54442d18 	.word	0x54442d18
 800e26c:	bff921fb 	.word	0xbff921fb
 800e270:	7ff00000 	.word	0x7ff00000
 800e274:	00000000 	.word	0x00000000

0800e278 <__ieee754_pow>:
 800e278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e27c:	ed2d 8b06 	vpush	{d8-d10}
 800e280:	b089      	sub	sp, #36	; 0x24
 800e282:	ed8d 1b00 	vstr	d1, [sp]
 800e286:	e9dd 2900 	ldrd	r2, r9, [sp]
 800e28a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800e28e:	ea58 0102 	orrs.w	r1, r8, r2
 800e292:	ec57 6b10 	vmov	r6, r7, d0
 800e296:	d115      	bne.n	800e2c4 <__ieee754_pow+0x4c>
 800e298:	19b3      	adds	r3, r6, r6
 800e29a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800e29e:	4152      	adcs	r2, r2
 800e2a0:	4299      	cmp	r1, r3
 800e2a2:	4b89      	ldr	r3, [pc, #548]	; (800e4c8 <__ieee754_pow+0x250>)
 800e2a4:	4193      	sbcs	r3, r2
 800e2a6:	f080 84d1 	bcs.w	800ec4c <__ieee754_pow+0x9d4>
 800e2aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e2ae:	4630      	mov	r0, r6
 800e2b0:	4639      	mov	r1, r7
 800e2b2:	f7f2 f803 	bl	80002bc <__adddf3>
 800e2b6:	ec41 0b10 	vmov	d0, r0, r1
 800e2ba:	b009      	add	sp, #36	; 0x24
 800e2bc:	ecbd 8b06 	vpop	{d8-d10}
 800e2c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2c4:	4b81      	ldr	r3, [pc, #516]	; (800e4cc <__ieee754_pow+0x254>)
 800e2c6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800e2ca:	429c      	cmp	r4, r3
 800e2cc:	ee10 aa10 	vmov	sl, s0
 800e2d0:	463d      	mov	r5, r7
 800e2d2:	dc06      	bgt.n	800e2e2 <__ieee754_pow+0x6a>
 800e2d4:	d101      	bne.n	800e2da <__ieee754_pow+0x62>
 800e2d6:	2e00      	cmp	r6, #0
 800e2d8:	d1e7      	bne.n	800e2aa <__ieee754_pow+0x32>
 800e2da:	4598      	cmp	r8, r3
 800e2dc:	dc01      	bgt.n	800e2e2 <__ieee754_pow+0x6a>
 800e2de:	d10f      	bne.n	800e300 <__ieee754_pow+0x88>
 800e2e0:	b172      	cbz	r2, 800e300 <__ieee754_pow+0x88>
 800e2e2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800e2e6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800e2ea:	ea55 050a 	orrs.w	r5, r5, sl
 800e2ee:	d1dc      	bne.n	800e2aa <__ieee754_pow+0x32>
 800e2f0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e2f4:	18db      	adds	r3, r3, r3
 800e2f6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800e2fa:	4152      	adcs	r2, r2
 800e2fc:	429d      	cmp	r5, r3
 800e2fe:	e7d0      	b.n	800e2a2 <__ieee754_pow+0x2a>
 800e300:	2d00      	cmp	r5, #0
 800e302:	da3b      	bge.n	800e37c <__ieee754_pow+0x104>
 800e304:	4b72      	ldr	r3, [pc, #456]	; (800e4d0 <__ieee754_pow+0x258>)
 800e306:	4598      	cmp	r8, r3
 800e308:	dc51      	bgt.n	800e3ae <__ieee754_pow+0x136>
 800e30a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800e30e:	4598      	cmp	r8, r3
 800e310:	f340 84ab 	ble.w	800ec6a <__ieee754_pow+0x9f2>
 800e314:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e318:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e31c:	2b14      	cmp	r3, #20
 800e31e:	dd0f      	ble.n	800e340 <__ieee754_pow+0xc8>
 800e320:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e324:	fa22 f103 	lsr.w	r1, r2, r3
 800e328:	fa01 f303 	lsl.w	r3, r1, r3
 800e32c:	4293      	cmp	r3, r2
 800e32e:	f040 849c 	bne.w	800ec6a <__ieee754_pow+0x9f2>
 800e332:	f001 0101 	and.w	r1, r1, #1
 800e336:	f1c1 0302 	rsb	r3, r1, #2
 800e33a:	9304      	str	r3, [sp, #16]
 800e33c:	b182      	cbz	r2, 800e360 <__ieee754_pow+0xe8>
 800e33e:	e05f      	b.n	800e400 <__ieee754_pow+0x188>
 800e340:	2a00      	cmp	r2, #0
 800e342:	d15b      	bne.n	800e3fc <__ieee754_pow+0x184>
 800e344:	f1c3 0314 	rsb	r3, r3, #20
 800e348:	fa48 f103 	asr.w	r1, r8, r3
 800e34c:	fa01 f303 	lsl.w	r3, r1, r3
 800e350:	4543      	cmp	r3, r8
 800e352:	f040 8487 	bne.w	800ec64 <__ieee754_pow+0x9ec>
 800e356:	f001 0101 	and.w	r1, r1, #1
 800e35a:	f1c1 0302 	rsb	r3, r1, #2
 800e35e:	9304      	str	r3, [sp, #16]
 800e360:	4b5c      	ldr	r3, [pc, #368]	; (800e4d4 <__ieee754_pow+0x25c>)
 800e362:	4598      	cmp	r8, r3
 800e364:	d132      	bne.n	800e3cc <__ieee754_pow+0x154>
 800e366:	f1b9 0f00 	cmp.w	r9, #0
 800e36a:	f280 8477 	bge.w	800ec5c <__ieee754_pow+0x9e4>
 800e36e:	4959      	ldr	r1, [pc, #356]	; (800e4d4 <__ieee754_pow+0x25c>)
 800e370:	4632      	mov	r2, r6
 800e372:	463b      	mov	r3, r7
 800e374:	2000      	movs	r0, #0
 800e376:	f7f2 fa81 	bl	800087c <__aeabi_ddiv>
 800e37a:	e79c      	b.n	800e2b6 <__ieee754_pow+0x3e>
 800e37c:	2300      	movs	r3, #0
 800e37e:	9304      	str	r3, [sp, #16]
 800e380:	2a00      	cmp	r2, #0
 800e382:	d13d      	bne.n	800e400 <__ieee754_pow+0x188>
 800e384:	4b51      	ldr	r3, [pc, #324]	; (800e4cc <__ieee754_pow+0x254>)
 800e386:	4598      	cmp	r8, r3
 800e388:	d1ea      	bne.n	800e360 <__ieee754_pow+0xe8>
 800e38a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e38e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e392:	ea53 030a 	orrs.w	r3, r3, sl
 800e396:	f000 8459 	beq.w	800ec4c <__ieee754_pow+0x9d4>
 800e39a:	4b4f      	ldr	r3, [pc, #316]	; (800e4d8 <__ieee754_pow+0x260>)
 800e39c:	429c      	cmp	r4, r3
 800e39e:	dd08      	ble.n	800e3b2 <__ieee754_pow+0x13a>
 800e3a0:	f1b9 0f00 	cmp.w	r9, #0
 800e3a4:	f2c0 8456 	blt.w	800ec54 <__ieee754_pow+0x9dc>
 800e3a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e3ac:	e783      	b.n	800e2b6 <__ieee754_pow+0x3e>
 800e3ae:	2302      	movs	r3, #2
 800e3b0:	e7e5      	b.n	800e37e <__ieee754_pow+0x106>
 800e3b2:	f1b9 0f00 	cmp.w	r9, #0
 800e3b6:	f04f 0000 	mov.w	r0, #0
 800e3ba:	f04f 0100 	mov.w	r1, #0
 800e3be:	f6bf af7a 	bge.w	800e2b6 <__ieee754_pow+0x3e>
 800e3c2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800e3c6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e3ca:	e774      	b.n	800e2b6 <__ieee754_pow+0x3e>
 800e3cc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800e3d0:	d106      	bne.n	800e3e0 <__ieee754_pow+0x168>
 800e3d2:	4632      	mov	r2, r6
 800e3d4:	463b      	mov	r3, r7
 800e3d6:	4630      	mov	r0, r6
 800e3d8:	4639      	mov	r1, r7
 800e3da:	f7f2 f925 	bl	8000628 <__aeabi_dmul>
 800e3de:	e76a      	b.n	800e2b6 <__ieee754_pow+0x3e>
 800e3e0:	4b3e      	ldr	r3, [pc, #248]	; (800e4dc <__ieee754_pow+0x264>)
 800e3e2:	4599      	cmp	r9, r3
 800e3e4:	d10c      	bne.n	800e400 <__ieee754_pow+0x188>
 800e3e6:	2d00      	cmp	r5, #0
 800e3e8:	db0a      	blt.n	800e400 <__ieee754_pow+0x188>
 800e3ea:	ec47 6b10 	vmov	d0, r6, r7
 800e3ee:	b009      	add	sp, #36	; 0x24
 800e3f0:	ecbd 8b06 	vpop	{d8-d10}
 800e3f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3f8:	f000 bec4 	b.w	800f184 <__ieee754_sqrt>
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	9304      	str	r3, [sp, #16]
 800e400:	ec47 6b10 	vmov	d0, r6, r7
 800e404:	f000 fe04 	bl	800f010 <fabs>
 800e408:	ec51 0b10 	vmov	r0, r1, d0
 800e40c:	f1ba 0f00 	cmp.w	sl, #0
 800e410:	d129      	bne.n	800e466 <__ieee754_pow+0x1ee>
 800e412:	b124      	cbz	r4, 800e41e <__ieee754_pow+0x1a6>
 800e414:	4b2f      	ldr	r3, [pc, #188]	; (800e4d4 <__ieee754_pow+0x25c>)
 800e416:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800e41a:	429a      	cmp	r2, r3
 800e41c:	d123      	bne.n	800e466 <__ieee754_pow+0x1ee>
 800e41e:	f1b9 0f00 	cmp.w	r9, #0
 800e422:	da05      	bge.n	800e430 <__ieee754_pow+0x1b8>
 800e424:	4602      	mov	r2, r0
 800e426:	460b      	mov	r3, r1
 800e428:	2000      	movs	r0, #0
 800e42a:	492a      	ldr	r1, [pc, #168]	; (800e4d4 <__ieee754_pow+0x25c>)
 800e42c:	f7f2 fa26 	bl	800087c <__aeabi_ddiv>
 800e430:	2d00      	cmp	r5, #0
 800e432:	f6bf af40 	bge.w	800e2b6 <__ieee754_pow+0x3e>
 800e436:	9b04      	ldr	r3, [sp, #16]
 800e438:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e43c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e440:	431c      	orrs	r4, r3
 800e442:	d108      	bne.n	800e456 <__ieee754_pow+0x1de>
 800e444:	4602      	mov	r2, r0
 800e446:	460b      	mov	r3, r1
 800e448:	4610      	mov	r0, r2
 800e44a:	4619      	mov	r1, r3
 800e44c:	f7f1 ff34 	bl	80002b8 <__aeabi_dsub>
 800e450:	4602      	mov	r2, r0
 800e452:	460b      	mov	r3, r1
 800e454:	e78f      	b.n	800e376 <__ieee754_pow+0xfe>
 800e456:	9b04      	ldr	r3, [sp, #16]
 800e458:	2b01      	cmp	r3, #1
 800e45a:	f47f af2c 	bne.w	800e2b6 <__ieee754_pow+0x3e>
 800e45e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e462:	4619      	mov	r1, r3
 800e464:	e727      	b.n	800e2b6 <__ieee754_pow+0x3e>
 800e466:	0feb      	lsrs	r3, r5, #31
 800e468:	3b01      	subs	r3, #1
 800e46a:	9306      	str	r3, [sp, #24]
 800e46c:	9a06      	ldr	r2, [sp, #24]
 800e46e:	9b04      	ldr	r3, [sp, #16]
 800e470:	4313      	orrs	r3, r2
 800e472:	d102      	bne.n	800e47a <__ieee754_pow+0x202>
 800e474:	4632      	mov	r2, r6
 800e476:	463b      	mov	r3, r7
 800e478:	e7e6      	b.n	800e448 <__ieee754_pow+0x1d0>
 800e47a:	4b19      	ldr	r3, [pc, #100]	; (800e4e0 <__ieee754_pow+0x268>)
 800e47c:	4598      	cmp	r8, r3
 800e47e:	f340 80fb 	ble.w	800e678 <__ieee754_pow+0x400>
 800e482:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e486:	4598      	cmp	r8, r3
 800e488:	4b13      	ldr	r3, [pc, #76]	; (800e4d8 <__ieee754_pow+0x260>)
 800e48a:	dd0c      	ble.n	800e4a6 <__ieee754_pow+0x22e>
 800e48c:	429c      	cmp	r4, r3
 800e48e:	dc0f      	bgt.n	800e4b0 <__ieee754_pow+0x238>
 800e490:	f1b9 0f00 	cmp.w	r9, #0
 800e494:	da0f      	bge.n	800e4b6 <__ieee754_pow+0x23e>
 800e496:	2000      	movs	r0, #0
 800e498:	b009      	add	sp, #36	; 0x24
 800e49a:	ecbd 8b06 	vpop	{d8-d10}
 800e49e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4a2:	f000 be66 	b.w	800f172 <__math_oflow>
 800e4a6:	429c      	cmp	r4, r3
 800e4a8:	dbf2      	blt.n	800e490 <__ieee754_pow+0x218>
 800e4aa:	4b0a      	ldr	r3, [pc, #40]	; (800e4d4 <__ieee754_pow+0x25c>)
 800e4ac:	429c      	cmp	r4, r3
 800e4ae:	dd19      	ble.n	800e4e4 <__ieee754_pow+0x26c>
 800e4b0:	f1b9 0f00 	cmp.w	r9, #0
 800e4b4:	dcef      	bgt.n	800e496 <__ieee754_pow+0x21e>
 800e4b6:	2000      	movs	r0, #0
 800e4b8:	b009      	add	sp, #36	; 0x24
 800e4ba:	ecbd 8b06 	vpop	{d8-d10}
 800e4be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4c2:	f000 be4d 	b.w	800f160 <__math_uflow>
 800e4c6:	bf00      	nop
 800e4c8:	fff00000 	.word	0xfff00000
 800e4cc:	7ff00000 	.word	0x7ff00000
 800e4d0:	433fffff 	.word	0x433fffff
 800e4d4:	3ff00000 	.word	0x3ff00000
 800e4d8:	3fefffff 	.word	0x3fefffff
 800e4dc:	3fe00000 	.word	0x3fe00000
 800e4e0:	41e00000 	.word	0x41e00000
 800e4e4:	4b60      	ldr	r3, [pc, #384]	; (800e668 <__ieee754_pow+0x3f0>)
 800e4e6:	2200      	movs	r2, #0
 800e4e8:	f7f1 fee6 	bl	80002b8 <__aeabi_dsub>
 800e4ec:	a354      	add	r3, pc, #336	; (adr r3, 800e640 <__ieee754_pow+0x3c8>)
 800e4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4f2:	4604      	mov	r4, r0
 800e4f4:	460d      	mov	r5, r1
 800e4f6:	f7f2 f897 	bl	8000628 <__aeabi_dmul>
 800e4fa:	a353      	add	r3, pc, #332	; (adr r3, 800e648 <__ieee754_pow+0x3d0>)
 800e4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e500:	4606      	mov	r6, r0
 800e502:	460f      	mov	r7, r1
 800e504:	4620      	mov	r0, r4
 800e506:	4629      	mov	r1, r5
 800e508:	f7f2 f88e 	bl	8000628 <__aeabi_dmul>
 800e50c:	4b57      	ldr	r3, [pc, #348]	; (800e66c <__ieee754_pow+0x3f4>)
 800e50e:	4682      	mov	sl, r0
 800e510:	468b      	mov	fp, r1
 800e512:	2200      	movs	r2, #0
 800e514:	4620      	mov	r0, r4
 800e516:	4629      	mov	r1, r5
 800e518:	f7f2 f886 	bl	8000628 <__aeabi_dmul>
 800e51c:	4602      	mov	r2, r0
 800e51e:	460b      	mov	r3, r1
 800e520:	a14b      	add	r1, pc, #300	; (adr r1, 800e650 <__ieee754_pow+0x3d8>)
 800e522:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e526:	f7f1 fec7 	bl	80002b8 <__aeabi_dsub>
 800e52a:	4622      	mov	r2, r4
 800e52c:	462b      	mov	r3, r5
 800e52e:	f7f2 f87b 	bl	8000628 <__aeabi_dmul>
 800e532:	4602      	mov	r2, r0
 800e534:	460b      	mov	r3, r1
 800e536:	2000      	movs	r0, #0
 800e538:	494d      	ldr	r1, [pc, #308]	; (800e670 <__ieee754_pow+0x3f8>)
 800e53a:	f7f1 febd 	bl	80002b8 <__aeabi_dsub>
 800e53e:	4622      	mov	r2, r4
 800e540:	4680      	mov	r8, r0
 800e542:	4689      	mov	r9, r1
 800e544:	462b      	mov	r3, r5
 800e546:	4620      	mov	r0, r4
 800e548:	4629      	mov	r1, r5
 800e54a:	f7f2 f86d 	bl	8000628 <__aeabi_dmul>
 800e54e:	4602      	mov	r2, r0
 800e550:	460b      	mov	r3, r1
 800e552:	4640      	mov	r0, r8
 800e554:	4649      	mov	r1, r9
 800e556:	f7f2 f867 	bl	8000628 <__aeabi_dmul>
 800e55a:	a33f      	add	r3, pc, #252	; (adr r3, 800e658 <__ieee754_pow+0x3e0>)
 800e55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e560:	f7f2 f862 	bl	8000628 <__aeabi_dmul>
 800e564:	4602      	mov	r2, r0
 800e566:	460b      	mov	r3, r1
 800e568:	4650      	mov	r0, sl
 800e56a:	4659      	mov	r1, fp
 800e56c:	f7f1 fea4 	bl	80002b8 <__aeabi_dsub>
 800e570:	4602      	mov	r2, r0
 800e572:	460b      	mov	r3, r1
 800e574:	4680      	mov	r8, r0
 800e576:	4689      	mov	r9, r1
 800e578:	4630      	mov	r0, r6
 800e57a:	4639      	mov	r1, r7
 800e57c:	f7f1 fe9e 	bl	80002bc <__adddf3>
 800e580:	2000      	movs	r0, #0
 800e582:	4632      	mov	r2, r6
 800e584:	463b      	mov	r3, r7
 800e586:	4604      	mov	r4, r0
 800e588:	460d      	mov	r5, r1
 800e58a:	f7f1 fe95 	bl	80002b8 <__aeabi_dsub>
 800e58e:	4602      	mov	r2, r0
 800e590:	460b      	mov	r3, r1
 800e592:	4640      	mov	r0, r8
 800e594:	4649      	mov	r1, r9
 800e596:	f7f1 fe8f 	bl	80002b8 <__aeabi_dsub>
 800e59a:	9b04      	ldr	r3, [sp, #16]
 800e59c:	9a06      	ldr	r2, [sp, #24]
 800e59e:	3b01      	subs	r3, #1
 800e5a0:	4313      	orrs	r3, r2
 800e5a2:	4682      	mov	sl, r0
 800e5a4:	468b      	mov	fp, r1
 800e5a6:	f040 81e7 	bne.w	800e978 <__ieee754_pow+0x700>
 800e5aa:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800e660 <__ieee754_pow+0x3e8>
 800e5ae:	eeb0 8a47 	vmov.f32	s16, s14
 800e5b2:	eef0 8a67 	vmov.f32	s17, s15
 800e5b6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e5ba:	2600      	movs	r6, #0
 800e5bc:	4632      	mov	r2, r6
 800e5be:	463b      	mov	r3, r7
 800e5c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e5c4:	f7f1 fe78 	bl	80002b8 <__aeabi_dsub>
 800e5c8:	4622      	mov	r2, r4
 800e5ca:	462b      	mov	r3, r5
 800e5cc:	f7f2 f82c 	bl	8000628 <__aeabi_dmul>
 800e5d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e5d4:	4680      	mov	r8, r0
 800e5d6:	4689      	mov	r9, r1
 800e5d8:	4650      	mov	r0, sl
 800e5da:	4659      	mov	r1, fp
 800e5dc:	f7f2 f824 	bl	8000628 <__aeabi_dmul>
 800e5e0:	4602      	mov	r2, r0
 800e5e2:	460b      	mov	r3, r1
 800e5e4:	4640      	mov	r0, r8
 800e5e6:	4649      	mov	r1, r9
 800e5e8:	f7f1 fe68 	bl	80002bc <__adddf3>
 800e5ec:	4632      	mov	r2, r6
 800e5ee:	463b      	mov	r3, r7
 800e5f0:	4680      	mov	r8, r0
 800e5f2:	4689      	mov	r9, r1
 800e5f4:	4620      	mov	r0, r4
 800e5f6:	4629      	mov	r1, r5
 800e5f8:	f7f2 f816 	bl	8000628 <__aeabi_dmul>
 800e5fc:	460b      	mov	r3, r1
 800e5fe:	4604      	mov	r4, r0
 800e600:	460d      	mov	r5, r1
 800e602:	4602      	mov	r2, r0
 800e604:	4649      	mov	r1, r9
 800e606:	4640      	mov	r0, r8
 800e608:	f7f1 fe58 	bl	80002bc <__adddf3>
 800e60c:	4b19      	ldr	r3, [pc, #100]	; (800e674 <__ieee754_pow+0x3fc>)
 800e60e:	4299      	cmp	r1, r3
 800e610:	ec45 4b19 	vmov	d9, r4, r5
 800e614:	4606      	mov	r6, r0
 800e616:	460f      	mov	r7, r1
 800e618:	468b      	mov	fp, r1
 800e61a:	f340 82f0 	ble.w	800ebfe <__ieee754_pow+0x986>
 800e61e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e622:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e626:	4303      	orrs	r3, r0
 800e628:	f000 81e4 	beq.w	800e9f4 <__ieee754_pow+0x77c>
 800e62c:	ec51 0b18 	vmov	r0, r1, d8
 800e630:	2200      	movs	r2, #0
 800e632:	2300      	movs	r3, #0
 800e634:	f7f2 fa6a 	bl	8000b0c <__aeabi_dcmplt>
 800e638:	3800      	subs	r0, #0
 800e63a:	bf18      	it	ne
 800e63c:	2001      	movne	r0, #1
 800e63e:	e72b      	b.n	800e498 <__ieee754_pow+0x220>
 800e640:	60000000 	.word	0x60000000
 800e644:	3ff71547 	.word	0x3ff71547
 800e648:	f85ddf44 	.word	0xf85ddf44
 800e64c:	3e54ae0b 	.word	0x3e54ae0b
 800e650:	55555555 	.word	0x55555555
 800e654:	3fd55555 	.word	0x3fd55555
 800e658:	652b82fe 	.word	0x652b82fe
 800e65c:	3ff71547 	.word	0x3ff71547
 800e660:	00000000 	.word	0x00000000
 800e664:	bff00000 	.word	0xbff00000
 800e668:	3ff00000 	.word	0x3ff00000
 800e66c:	3fd00000 	.word	0x3fd00000
 800e670:	3fe00000 	.word	0x3fe00000
 800e674:	408fffff 	.word	0x408fffff
 800e678:	4bd5      	ldr	r3, [pc, #852]	; (800e9d0 <__ieee754_pow+0x758>)
 800e67a:	402b      	ands	r3, r5
 800e67c:	2200      	movs	r2, #0
 800e67e:	b92b      	cbnz	r3, 800e68c <__ieee754_pow+0x414>
 800e680:	4bd4      	ldr	r3, [pc, #848]	; (800e9d4 <__ieee754_pow+0x75c>)
 800e682:	f7f1 ffd1 	bl	8000628 <__aeabi_dmul>
 800e686:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e68a:	460c      	mov	r4, r1
 800e68c:	1523      	asrs	r3, r4, #20
 800e68e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e692:	4413      	add	r3, r2
 800e694:	9305      	str	r3, [sp, #20]
 800e696:	4bd0      	ldr	r3, [pc, #832]	; (800e9d8 <__ieee754_pow+0x760>)
 800e698:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e69c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e6a0:	429c      	cmp	r4, r3
 800e6a2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e6a6:	dd08      	ble.n	800e6ba <__ieee754_pow+0x442>
 800e6a8:	4bcc      	ldr	r3, [pc, #816]	; (800e9dc <__ieee754_pow+0x764>)
 800e6aa:	429c      	cmp	r4, r3
 800e6ac:	f340 8162 	ble.w	800e974 <__ieee754_pow+0x6fc>
 800e6b0:	9b05      	ldr	r3, [sp, #20]
 800e6b2:	3301      	adds	r3, #1
 800e6b4:	9305      	str	r3, [sp, #20]
 800e6b6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e6ba:	2400      	movs	r4, #0
 800e6bc:	00e3      	lsls	r3, r4, #3
 800e6be:	9307      	str	r3, [sp, #28]
 800e6c0:	4bc7      	ldr	r3, [pc, #796]	; (800e9e0 <__ieee754_pow+0x768>)
 800e6c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e6c6:	ed93 7b00 	vldr	d7, [r3]
 800e6ca:	4629      	mov	r1, r5
 800e6cc:	ec53 2b17 	vmov	r2, r3, d7
 800e6d0:	eeb0 9a47 	vmov.f32	s18, s14
 800e6d4:	eef0 9a67 	vmov.f32	s19, s15
 800e6d8:	4682      	mov	sl, r0
 800e6da:	f7f1 fded 	bl	80002b8 <__aeabi_dsub>
 800e6de:	4652      	mov	r2, sl
 800e6e0:	4606      	mov	r6, r0
 800e6e2:	460f      	mov	r7, r1
 800e6e4:	462b      	mov	r3, r5
 800e6e6:	ec51 0b19 	vmov	r0, r1, d9
 800e6ea:	f7f1 fde7 	bl	80002bc <__adddf3>
 800e6ee:	4602      	mov	r2, r0
 800e6f0:	460b      	mov	r3, r1
 800e6f2:	2000      	movs	r0, #0
 800e6f4:	49bb      	ldr	r1, [pc, #748]	; (800e9e4 <__ieee754_pow+0x76c>)
 800e6f6:	f7f2 f8c1 	bl	800087c <__aeabi_ddiv>
 800e6fa:	ec41 0b1a 	vmov	d10, r0, r1
 800e6fe:	4602      	mov	r2, r0
 800e700:	460b      	mov	r3, r1
 800e702:	4630      	mov	r0, r6
 800e704:	4639      	mov	r1, r7
 800e706:	f7f1 ff8f 	bl	8000628 <__aeabi_dmul>
 800e70a:	2300      	movs	r3, #0
 800e70c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e710:	9302      	str	r3, [sp, #8]
 800e712:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e716:	46ab      	mov	fp, r5
 800e718:	106d      	asrs	r5, r5, #1
 800e71a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e71e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e722:	ec41 0b18 	vmov	d8, r0, r1
 800e726:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800e72a:	2200      	movs	r2, #0
 800e72c:	4640      	mov	r0, r8
 800e72e:	4649      	mov	r1, r9
 800e730:	4614      	mov	r4, r2
 800e732:	461d      	mov	r5, r3
 800e734:	f7f1 ff78 	bl	8000628 <__aeabi_dmul>
 800e738:	4602      	mov	r2, r0
 800e73a:	460b      	mov	r3, r1
 800e73c:	4630      	mov	r0, r6
 800e73e:	4639      	mov	r1, r7
 800e740:	f7f1 fdba 	bl	80002b8 <__aeabi_dsub>
 800e744:	ec53 2b19 	vmov	r2, r3, d9
 800e748:	4606      	mov	r6, r0
 800e74a:	460f      	mov	r7, r1
 800e74c:	4620      	mov	r0, r4
 800e74e:	4629      	mov	r1, r5
 800e750:	f7f1 fdb2 	bl	80002b8 <__aeabi_dsub>
 800e754:	4602      	mov	r2, r0
 800e756:	460b      	mov	r3, r1
 800e758:	4650      	mov	r0, sl
 800e75a:	4659      	mov	r1, fp
 800e75c:	f7f1 fdac 	bl	80002b8 <__aeabi_dsub>
 800e760:	4642      	mov	r2, r8
 800e762:	464b      	mov	r3, r9
 800e764:	f7f1 ff60 	bl	8000628 <__aeabi_dmul>
 800e768:	4602      	mov	r2, r0
 800e76a:	460b      	mov	r3, r1
 800e76c:	4630      	mov	r0, r6
 800e76e:	4639      	mov	r1, r7
 800e770:	f7f1 fda2 	bl	80002b8 <__aeabi_dsub>
 800e774:	ec53 2b1a 	vmov	r2, r3, d10
 800e778:	f7f1 ff56 	bl	8000628 <__aeabi_dmul>
 800e77c:	ec53 2b18 	vmov	r2, r3, d8
 800e780:	ec41 0b19 	vmov	d9, r0, r1
 800e784:	ec51 0b18 	vmov	r0, r1, d8
 800e788:	f7f1 ff4e 	bl	8000628 <__aeabi_dmul>
 800e78c:	a37c      	add	r3, pc, #496	; (adr r3, 800e980 <__ieee754_pow+0x708>)
 800e78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e792:	4604      	mov	r4, r0
 800e794:	460d      	mov	r5, r1
 800e796:	f7f1 ff47 	bl	8000628 <__aeabi_dmul>
 800e79a:	a37b      	add	r3, pc, #492	; (adr r3, 800e988 <__ieee754_pow+0x710>)
 800e79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7a0:	f7f1 fd8c 	bl	80002bc <__adddf3>
 800e7a4:	4622      	mov	r2, r4
 800e7a6:	462b      	mov	r3, r5
 800e7a8:	f7f1 ff3e 	bl	8000628 <__aeabi_dmul>
 800e7ac:	a378      	add	r3, pc, #480	; (adr r3, 800e990 <__ieee754_pow+0x718>)
 800e7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7b2:	f7f1 fd83 	bl	80002bc <__adddf3>
 800e7b6:	4622      	mov	r2, r4
 800e7b8:	462b      	mov	r3, r5
 800e7ba:	f7f1 ff35 	bl	8000628 <__aeabi_dmul>
 800e7be:	a376      	add	r3, pc, #472	; (adr r3, 800e998 <__ieee754_pow+0x720>)
 800e7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7c4:	f7f1 fd7a 	bl	80002bc <__adddf3>
 800e7c8:	4622      	mov	r2, r4
 800e7ca:	462b      	mov	r3, r5
 800e7cc:	f7f1 ff2c 	bl	8000628 <__aeabi_dmul>
 800e7d0:	a373      	add	r3, pc, #460	; (adr r3, 800e9a0 <__ieee754_pow+0x728>)
 800e7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7d6:	f7f1 fd71 	bl	80002bc <__adddf3>
 800e7da:	4622      	mov	r2, r4
 800e7dc:	462b      	mov	r3, r5
 800e7de:	f7f1 ff23 	bl	8000628 <__aeabi_dmul>
 800e7e2:	a371      	add	r3, pc, #452	; (adr r3, 800e9a8 <__ieee754_pow+0x730>)
 800e7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7e8:	f7f1 fd68 	bl	80002bc <__adddf3>
 800e7ec:	4622      	mov	r2, r4
 800e7ee:	4606      	mov	r6, r0
 800e7f0:	460f      	mov	r7, r1
 800e7f2:	462b      	mov	r3, r5
 800e7f4:	4620      	mov	r0, r4
 800e7f6:	4629      	mov	r1, r5
 800e7f8:	f7f1 ff16 	bl	8000628 <__aeabi_dmul>
 800e7fc:	4602      	mov	r2, r0
 800e7fe:	460b      	mov	r3, r1
 800e800:	4630      	mov	r0, r6
 800e802:	4639      	mov	r1, r7
 800e804:	f7f1 ff10 	bl	8000628 <__aeabi_dmul>
 800e808:	4642      	mov	r2, r8
 800e80a:	4604      	mov	r4, r0
 800e80c:	460d      	mov	r5, r1
 800e80e:	464b      	mov	r3, r9
 800e810:	ec51 0b18 	vmov	r0, r1, d8
 800e814:	f7f1 fd52 	bl	80002bc <__adddf3>
 800e818:	ec53 2b19 	vmov	r2, r3, d9
 800e81c:	f7f1 ff04 	bl	8000628 <__aeabi_dmul>
 800e820:	4622      	mov	r2, r4
 800e822:	462b      	mov	r3, r5
 800e824:	f7f1 fd4a 	bl	80002bc <__adddf3>
 800e828:	4642      	mov	r2, r8
 800e82a:	4682      	mov	sl, r0
 800e82c:	468b      	mov	fp, r1
 800e82e:	464b      	mov	r3, r9
 800e830:	4640      	mov	r0, r8
 800e832:	4649      	mov	r1, r9
 800e834:	f7f1 fef8 	bl	8000628 <__aeabi_dmul>
 800e838:	4b6b      	ldr	r3, [pc, #428]	; (800e9e8 <__ieee754_pow+0x770>)
 800e83a:	2200      	movs	r2, #0
 800e83c:	4606      	mov	r6, r0
 800e83e:	460f      	mov	r7, r1
 800e840:	f7f1 fd3c 	bl	80002bc <__adddf3>
 800e844:	4652      	mov	r2, sl
 800e846:	465b      	mov	r3, fp
 800e848:	f7f1 fd38 	bl	80002bc <__adddf3>
 800e84c:	2000      	movs	r0, #0
 800e84e:	4604      	mov	r4, r0
 800e850:	460d      	mov	r5, r1
 800e852:	4602      	mov	r2, r0
 800e854:	460b      	mov	r3, r1
 800e856:	4640      	mov	r0, r8
 800e858:	4649      	mov	r1, r9
 800e85a:	f7f1 fee5 	bl	8000628 <__aeabi_dmul>
 800e85e:	4b62      	ldr	r3, [pc, #392]	; (800e9e8 <__ieee754_pow+0x770>)
 800e860:	4680      	mov	r8, r0
 800e862:	4689      	mov	r9, r1
 800e864:	2200      	movs	r2, #0
 800e866:	4620      	mov	r0, r4
 800e868:	4629      	mov	r1, r5
 800e86a:	f7f1 fd25 	bl	80002b8 <__aeabi_dsub>
 800e86e:	4632      	mov	r2, r6
 800e870:	463b      	mov	r3, r7
 800e872:	f7f1 fd21 	bl	80002b8 <__aeabi_dsub>
 800e876:	4602      	mov	r2, r0
 800e878:	460b      	mov	r3, r1
 800e87a:	4650      	mov	r0, sl
 800e87c:	4659      	mov	r1, fp
 800e87e:	f7f1 fd1b 	bl	80002b8 <__aeabi_dsub>
 800e882:	ec53 2b18 	vmov	r2, r3, d8
 800e886:	f7f1 fecf 	bl	8000628 <__aeabi_dmul>
 800e88a:	4622      	mov	r2, r4
 800e88c:	4606      	mov	r6, r0
 800e88e:	460f      	mov	r7, r1
 800e890:	462b      	mov	r3, r5
 800e892:	ec51 0b19 	vmov	r0, r1, d9
 800e896:	f7f1 fec7 	bl	8000628 <__aeabi_dmul>
 800e89a:	4602      	mov	r2, r0
 800e89c:	460b      	mov	r3, r1
 800e89e:	4630      	mov	r0, r6
 800e8a0:	4639      	mov	r1, r7
 800e8a2:	f7f1 fd0b 	bl	80002bc <__adddf3>
 800e8a6:	4606      	mov	r6, r0
 800e8a8:	460f      	mov	r7, r1
 800e8aa:	4602      	mov	r2, r0
 800e8ac:	460b      	mov	r3, r1
 800e8ae:	4640      	mov	r0, r8
 800e8b0:	4649      	mov	r1, r9
 800e8b2:	f7f1 fd03 	bl	80002bc <__adddf3>
 800e8b6:	a33e      	add	r3, pc, #248	; (adr r3, 800e9b0 <__ieee754_pow+0x738>)
 800e8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8bc:	2000      	movs	r0, #0
 800e8be:	4604      	mov	r4, r0
 800e8c0:	460d      	mov	r5, r1
 800e8c2:	f7f1 feb1 	bl	8000628 <__aeabi_dmul>
 800e8c6:	4642      	mov	r2, r8
 800e8c8:	ec41 0b18 	vmov	d8, r0, r1
 800e8cc:	464b      	mov	r3, r9
 800e8ce:	4620      	mov	r0, r4
 800e8d0:	4629      	mov	r1, r5
 800e8d2:	f7f1 fcf1 	bl	80002b8 <__aeabi_dsub>
 800e8d6:	4602      	mov	r2, r0
 800e8d8:	460b      	mov	r3, r1
 800e8da:	4630      	mov	r0, r6
 800e8dc:	4639      	mov	r1, r7
 800e8de:	f7f1 fceb 	bl	80002b8 <__aeabi_dsub>
 800e8e2:	a335      	add	r3, pc, #212	; (adr r3, 800e9b8 <__ieee754_pow+0x740>)
 800e8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8e8:	f7f1 fe9e 	bl	8000628 <__aeabi_dmul>
 800e8ec:	a334      	add	r3, pc, #208	; (adr r3, 800e9c0 <__ieee754_pow+0x748>)
 800e8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8f2:	4606      	mov	r6, r0
 800e8f4:	460f      	mov	r7, r1
 800e8f6:	4620      	mov	r0, r4
 800e8f8:	4629      	mov	r1, r5
 800e8fa:	f7f1 fe95 	bl	8000628 <__aeabi_dmul>
 800e8fe:	4602      	mov	r2, r0
 800e900:	460b      	mov	r3, r1
 800e902:	4630      	mov	r0, r6
 800e904:	4639      	mov	r1, r7
 800e906:	f7f1 fcd9 	bl	80002bc <__adddf3>
 800e90a:	9a07      	ldr	r2, [sp, #28]
 800e90c:	4b37      	ldr	r3, [pc, #220]	; (800e9ec <__ieee754_pow+0x774>)
 800e90e:	4413      	add	r3, r2
 800e910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e914:	f7f1 fcd2 	bl	80002bc <__adddf3>
 800e918:	4682      	mov	sl, r0
 800e91a:	9805      	ldr	r0, [sp, #20]
 800e91c:	468b      	mov	fp, r1
 800e91e:	f7f1 fe19 	bl	8000554 <__aeabi_i2d>
 800e922:	9a07      	ldr	r2, [sp, #28]
 800e924:	4b32      	ldr	r3, [pc, #200]	; (800e9f0 <__ieee754_pow+0x778>)
 800e926:	4413      	add	r3, r2
 800e928:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e92c:	4606      	mov	r6, r0
 800e92e:	460f      	mov	r7, r1
 800e930:	4652      	mov	r2, sl
 800e932:	465b      	mov	r3, fp
 800e934:	ec51 0b18 	vmov	r0, r1, d8
 800e938:	f7f1 fcc0 	bl	80002bc <__adddf3>
 800e93c:	4642      	mov	r2, r8
 800e93e:	464b      	mov	r3, r9
 800e940:	f7f1 fcbc 	bl	80002bc <__adddf3>
 800e944:	4632      	mov	r2, r6
 800e946:	463b      	mov	r3, r7
 800e948:	f7f1 fcb8 	bl	80002bc <__adddf3>
 800e94c:	2000      	movs	r0, #0
 800e94e:	4632      	mov	r2, r6
 800e950:	463b      	mov	r3, r7
 800e952:	4604      	mov	r4, r0
 800e954:	460d      	mov	r5, r1
 800e956:	f7f1 fcaf 	bl	80002b8 <__aeabi_dsub>
 800e95a:	4642      	mov	r2, r8
 800e95c:	464b      	mov	r3, r9
 800e95e:	f7f1 fcab 	bl	80002b8 <__aeabi_dsub>
 800e962:	ec53 2b18 	vmov	r2, r3, d8
 800e966:	f7f1 fca7 	bl	80002b8 <__aeabi_dsub>
 800e96a:	4602      	mov	r2, r0
 800e96c:	460b      	mov	r3, r1
 800e96e:	4650      	mov	r0, sl
 800e970:	4659      	mov	r1, fp
 800e972:	e610      	b.n	800e596 <__ieee754_pow+0x31e>
 800e974:	2401      	movs	r4, #1
 800e976:	e6a1      	b.n	800e6bc <__ieee754_pow+0x444>
 800e978:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800e9c8 <__ieee754_pow+0x750>
 800e97c:	e617      	b.n	800e5ae <__ieee754_pow+0x336>
 800e97e:	bf00      	nop
 800e980:	4a454eef 	.word	0x4a454eef
 800e984:	3fca7e28 	.word	0x3fca7e28
 800e988:	93c9db65 	.word	0x93c9db65
 800e98c:	3fcd864a 	.word	0x3fcd864a
 800e990:	a91d4101 	.word	0xa91d4101
 800e994:	3fd17460 	.word	0x3fd17460
 800e998:	518f264d 	.word	0x518f264d
 800e99c:	3fd55555 	.word	0x3fd55555
 800e9a0:	db6fabff 	.word	0xdb6fabff
 800e9a4:	3fdb6db6 	.word	0x3fdb6db6
 800e9a8:	33333303 	.word	0x33333303
 800e9ac:	3fe33333 	.word	0x3fe33333
 800e9b0:	e0000000 	.word	0xe0000000
 800e9b4:	3feec709 	.word	0x3feec709
 800e9b8:	dc3a03fd 	.word	0xdc3a03fd
 800e9bc:	3feec709 	.word	0x3feec709
 800e9c0:	145b01f5 	.word	0x145b01f5
 800e9c4:	be3e2fe0 	.word	0xbe3e2fe0
 800e9c8:	00000000 	.word	0x00000000
 800e9cc:	3ff00000 	.word	0x3ff00000
 800e9d0:	7ff00000 	.word	0x7ff00000
 800e9d4:	43400000 	.word	0x43400000
 800e9d8:	0003988e 	.word	0x0003988e
 800e9dc:	000bb679 	.word	0x000bb679
 800e9e0:	0800f440 	.word	0x0800f440
 800e9e4:	3ff00000 	.word	0x3ff00000
 800e9e8:	40080000 	.word	0x40080000
 800e9ec:	0800f460 	.word	0x0800f460
 800e9f0:	0800f450 	.word	0x0800f450
 800e9f4:	a3b3      	add	r3, pc, #716	; (adr r3, 800ecc4 <__ieee754_pow+0xa4c>)
 800e9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9fa:	4640      	mov	r0, r8
 800e9fc:	4649      	mov	r1, r9
 800e9fe:	f7f1 fc5d 	bl	80002bc <__adddf3>
 800ea02:	4622      	mov	r2, r4
 800ea04:	ec41 0b1a 	vmov	d10, r0, r1
 800ea08:	462b      	mov	r3, r5
 800ea0a:	4630      	mov	r0, r6
 800ea0c:	4639      	mov	r1, r7
 800ea0e:	f7f1 fc53 	bl	80002b8 <__aeabi_dsub>
 800ea12:	4602      	mov	r2, r0
 800ea14:	460b      	mov	r3, r1
 800ea16:	ec51 0b1a 	vmov	r0, r1, d10
 800ea1a:	f7f2 f895 	bl	8000b48 <__aeabi_dcmpgt>
 800ea1e:	2800      	cmp	r0, #0
 800ea20:	f47f ae04 	bne.w	800e62c <__ieee754_pow+0x3b4>
 800ea24:	4aa2      	ldr	r2, [pc, #648]	; (800ecb0 <__ieee754_pow+0xa38>)
 800ea26:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ea2a:	4293      	cmp	r3, r2
 800ea2c:	f340 8107 	ble.w	800ec3e <__ieee754_pow+0x9c6>
 800ea30:	151b      	asrs	r3, r3, #20
 800ea32:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ea36:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ea3a:	fa4a fa03 	asr.w	sl, sl, r3
 800ea3e:	44da      	add	sl, fp
 800ea40:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800ea44:	489b      	ldr	r0, [pc, #620]	; (800ecb4 <__ieee754_pow+0xa3c>)
 800ea46:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800ea4a:	4108      	asrs	r0, r1
 800ea4c:	ea00 030a 	and.w	r3, r0, sl
 800ea50:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800ea54:	f1c1 0114 	rsb	r1, r1, #20
 800ea58:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ea5c:	fa4a fa01 	asr.w	sl, sl, r1
 800ea60:	f1bb 0f00 	cmp.w	fp, #0
 800ea64:	f04f 0200 	mov.w	r2, #0
 800ea68:	4620      	mov	r0, r4
 800ea6a:	4629      	mov	r1, r5
 800ea6c:	bfb8      	it	lt
 800ea6e:	f1ca 0a00 	rsblt	sl, sl, #0
 800ea72:	f7f1 fc21 	bl	80002b8 <__aeabi_dsub>
 800ea76:	ec41 0b19 	vmov	d9, r0, r1
 800ea7a:	4642      	mov	r2, r8
 800ea7c:	464b      	mov	r3, r9
 800ea7e:	ec51 0b19 	vmov	r0, r1, d9
 800ea82:	f7f1 fc1b 	bl	80002bc <__adddf3>
 800ea86:	a37a      	add	r3, pc, #488	; (adr r3, 800ec70 <__ieee754_pow+0x9f8>)
 800ea88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea8c:	2000      	movs	r0, #0
 800ea8e:	4604      	mov	r4, r0
 800ea90:	460d      	mov	r5, r1
 800ea92:	f7f1 fdc9 	bl	8000628 <__aeabi_dmul>
 800ea96:	ec53 2b19 	vmov	r2, r3, d9
 800ea9a:	4606      	mov	r6, r0
 800ea9c:	460f      	mov	r7, r1
 800ea9e:	4620      	mov	r0, r4
 800eaa0:	4629      	mov	r1, r5
 800eaa2:	f7f1 fc09 	bl	80002b8 <__aeabi_dsub>
 800eaa6:	4602      	mov	r2, r0
 800eaa8:	460b      	mov	r3, r1
 800eaaa:	4640      	mov	r0, r8
 800eaac:	4649      	mov	r1, r9
 800eaae:	f7f1 fc03 	bl	80002b8 <__aeabi_dsub>
 800eab2:	a371      	add	r3, pc, #452	; (adr r3, 800ec78 <__ieee754_pow+0xa00>)
 800eab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eab8:	f7f1 fdb6 	bl	8000628 <__aeabi_dmul>
 800eabc:	a370      	add	r3, pc, #448	; (adr r3, 800ec80 <__ieee754_pow+0xa08>)
 800eabe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eac2:	4680      	mov	r8, r0
 800eac4:	4689      	mov	r9, r1
 800eac6:	4620      	mov	r0, r4
 800eac8:	4629      	mov	r1, r5
 800eaca:	f7f1 fdad 	bl	8000628 <__aeabi_dmul>
 800eace:	4602      	mov	r2, r0
 800ead0:	460b      	mov	r3, r1
 800ead2:	4640      	mov	r0, r8
 800ead4:	4649      	mov	r1, r9
 800ead6:	f7f1 fbf1 	bl	80002bc <__adddf3>
 800eada:	4604      	mov	r4, r0
 800eadc:	460d      	mov	r5, r1
 800eade:	4602      	mov	r2, r0
 800eae0:	460b      	mov	r3, r1
 800eae2:	4630      	mov	r0, r6
 800eae4:	4639      	mov	r1, r7
 800eae6:	f7f1 fbe9 	bl	80002bc <__adddf3>
 800eaea:	4632      	mov	r2, r6
 800eaec:	463b      	mov	r3, r7
 800eaee:	4680      	mov	r8, r0
 800eaf0:	4689      	mov	r9, r1
 800eaf2:	f7f1 fbe1 	bl	80002b8 <__aeabi_dsub>
 800eaf6:	4602      	mov	r2, r0
 800eaf8:	460b      	mov	r3, r1
 800eafa:	4620      	mov	r0, r4
 800eafc:	4629      	mov	r1, r5
 800eafe:	f7f1 fbdb 	bl	80002b8 <__aeabi_dsub>
 800eb02:	4642      	mov	r2, r8
 800eb04:	4606      	mov	r6, r0
 800eb06:	460f      	mov	r7, r1
 800eb08:	464b      	mov	r3, r9
 800eb0a:	4640      	mov	r0, r8
 800eb0c:	4649      	mov	r1, r9
 800eb0e:	f7f1 fd8b 	bl	8000628 <__aeabi_dmul>
 800eb12:	a35d      	add	r3, pc, #372	; (adr r3, 800ec88 <__ieee754_pow+0xa10>)
 800eb14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb18:	4604      	mov	r4, r0
 800eb1a:	460d      	mov	r5, r1
 800eb1c:	f7f1 fd84 	bl	8000628 <__aeabi_dmul>
 800eb20:	a35b      	add	r3, pc, #364	; (adr r3, 800ec90 <__ieee754_pow+0xa18>)
 800eb22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb26:	f7f1 fbc7 	bl	80002b8 <__aeabi_dsub>
 800eb2a:	4622      	mov	r2, r4
 800eb2c:	462b      	mov	r3, r5
 800eb2e:	f7f1 fd7b 	bl	8000628 <__aeabi_dmul>
 800eb32:	a359      	add	r3, pc, #356	; (adr r3, 800ec98 <__ieee754_pow+0xa20>)
 800eb34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb38:	f7f1 fbc0 	bl	80002bc <__adddf3>
 800eb3c:	4622      	mov	r2, r4
 800eb3e:	462b      	mov	r3, r5
 800eb40:	f7f1 fd72 	bl	8000628 <__aeabi_dmul>
 800eb44:	a356      	add	r3, pc, #344	; (adr r3, 800eca0 <__ieee754_pow+0xa28>)
 800eb46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb4a:	f7f1 fbb5 	bl	80002b8 <__aeabi_dsub>
 800eb4e:	4622      	mov	r2, r4
 800eb50:	462b      	mov	r3, r5
 800eb52:	f7f1 fd69 	bl	8000628 <__aeabi_dmul>
 800eb56:	a354      	add	r3, pc, #336	; (adr r3, 800eca8 <__ieee754_pow+0xa30>)
 800eb58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb5c:	f7f1 fbae 	bl	80002bc <__adddf3>
 800eb60:	4622      	mov	r2, r4
 800eb62:	462b      	mov	r3, r5
 800eb64:	f7f1 fd60 	bl	8000628 <__aeabi_dmul>
 800eb68:	4602      	mov	r2, r0
 800eb6a:	460b      	mov	r3, r1
 800eb6c:	4640      	mov	r0, r8
 800eb6e:	4649      	mov	r1, r9
 800eb70:	f7f1 fba2 	bl	80002b8 <__aeabi_dsub>
 800eb74:	4604      	mov	r4, r0
 800eb76:	460d      	mov	r5, r1
 800eb78:	4602      	mov	r2, r0
 800eb7a:	460b      	mov	r3, r1
 800eb7c:	4640      	mov	r0, r8
 800eb7e:	4649      	mov	r1, r9
 800eb80:	f7f1 fd52 	bl	8000628 <__aeabi_dmul>
 800eb84:	2200      	movs	r2, #0
 800eb86:	ec41 0b19 	vmov	d9, r0, r1
 800eb8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800eb8e:	4620      	mov	r0, r4
 800eb90:	4629      	mov	r1, r5
 800eb92:	f7f1 fb91 	bl	80002b8 <__aeabi_dsub>
 800eb96:	4602      	mov	r2, r0
 800eb98:	460b      	mov	r3, r1
 800eb9a:	ec51 0b19 	vmov	r0, r1, d9
 800eb9e:	f7f1 fe6d 	bl	800087c <__aeabi_ddiv>
 800eba2:	4632      	mov	r2, r6
 800eba4:	4604      	mov	r4, r0
 800eba6:	460d      	mov	r5, r1
 800eba8:	463b      	mov	r3, r7
 800ebaa:	4640      	mov	r0, r8
 800ebac:	4649      	mov	r1, r9
 800ebae:	f7f1 fd3b 	bl	8000628 <__aeabi_dmul>
 800ebb2:	4632      	mov	r2, r6
 800ebb4:	463b      	mov	r3, r7
 800ebb6:	f7f1 fb81 	bl	80002bc <__adddf3>
 800ebba:	4602      	mov	r2, r0
 800ebbc:	460b      	mov	r3, r1
 800ebbe:	4620      	mov	r0, r4
 800ebc0:	4629      	mov	r1, r5
 800ebc2:	f7f1 fb79 	bl	80002b8 <__aeabi_dsub>
 800ebc6:	4642      	mov	r2, r8
 800ebc8:	464b      	mov	r3, r9
 800ebca:	f7f1 fb75 	bl	80002b8 <__aeabi_dsub>
 800ebce:	460b      	mov	r3, r1
 800ebd0:	4602      	mov	r2, r0
 800ebd2:	4939      	ldr	r1, [pc, #228]	; (800ecb8 <__ieee754_pow+0xa40>)
 800ebd4:	2000      	movs	r0, #0
 800ebd6:	f7f1 fb6f 	bl	80002b8 <__aeabi_dsub>
 800ebda:	ec41 0b10 	vmov	d0, r0, r1
 800ebde:	ee10 3a90 	vmov	r3, s1
 800ebe2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ebe6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ebea:	da2b      	bge.n	800ec44 <__ieee754_pow+0x9cc>
 800ebec:	4650      	mov	r0, sl
 800ebee:	f000 fa1b 	bl	800f028 <scalbn>
 800ebf2:	ec51 0b10 	vmov	r0, r1, d0
 800ebf6:	ec53 2b18 	vmov	r2, r3, d8
 800ebfa:	f7ff bbee 	b.w	800e3da <__ieee754_pow+0x162>
 800ebfe:	4b2f      	ldr	r3, [pc, #188]	; (800ecbc <__ieee754_pow+0xa44>)
 800ec00:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ec04:	429e      	cmp	r6, r3
 800ec06:	f77f af0d 	ble.w	800ea24 <__ieee754_pow+0x7ac>
 800ec0a:	4b2d      	ldr	r3, [pc, #180]	; (800ecc0 <__ieee754_pow+0xa48>)
 800ec0c:	440b      	add	r3, r1
 800ec0e:	4303      	orrs	r3, r0
 800ec10:	d009      	beq.n	800ec26 <__ieee754_pow+0x9ae>
 800ec12:	ec51 0b18 	vmov	r0, r1, d8
 800ec16:	2200      	movs	r2, #0
 800ec18:	2300      	movs	r3, #0
 800ec1a:	f7f1 ff77 	bl	8000b0c <__aeabi_dcmplt>
 800ec1e:	3800      	subs	r0, #0
 800ec20:	bf18      	it	ne
 800ec22:	2001      	movne	r0, #1
 800ec24:	e448      	b.n	800e4b8 <__ieee754_pow+0x240>
 800ec26:	4622      	mov	r2, r4
 800ec28:	462b      	mov	r3, r5
 800ec2a:	f7f1 fb45 	bl	80002b8 <__aeabi_dsub>
 800ec2e:	4642      	mov	r2, r8
 800ec30:	464b      	mov	r3, r9
 800ec32:	f7f1 ff7f 	bl	8000b34 <__aeabi_dcmpge>
 800ec36:	2800      	cmp	r0, #0
 800ec38:	f43f aef4 	beq.w	800ea24 <__ieee754_pow+0x7ac>
 800ec3c:	e7e9      	b.n	800ec12 <__ieee754_pow+0x99a>
 800ec3e:	f04f 0a00 	mov.w	sl, #0
 800ec42:	e71a      	b.n	800ea7a <__ieee754_pow+0x802>
 800ec44:	ec51 0b10 	vmov	r0, r1, d0
 800ec48:	4619      	mov	r1, r3
 800ec4a:	e7d4      	b.n	800ebf6 <__ieee754_pow+0x97e>
 800ec4c:	491a      	ldr	r1, [pc, #104]	; (800ecb8 <__ieee754_pow+0xa40>)
 800ec4e:	2000      	movs	r0, #0
 800ec50:	f7ff bb31 	b.w	800e2b6 <__ieee754_pow+0x3e>
 800ec54:	2000      	movs	r0, #0
 800ec56:	2100      	movs	r1, #0
 800ec58:	f7ff bb2d 	b.w	800e2b6 <__ieee754_pow+0x3e>
 800ec5c:	4630      	mov	r0, r6
 800ec5e:	4639      	mov	r1, r7
 800ec60:	f7ff bb29 	b.w	800e2b6 <__ieee754_pow+0x3e>
 800ec64:	9204      	str	r2, [sp, #16]
 800ec66:	f7ff bb7b 	b.w	800e360 <__ieee754_pow+0xe8>
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	f7ff bb65 	b.w	800e33a <__ieee754_pow+0xc2>
 800ec70:	00000000 	.word	0x00000000
 800ec74:	3fe62e43 	.word	0x3fe62e43
 800ec78:	fefa39ef 	.word	0xfefa39ef
 800ec7c:	3fe62e42 	.word	0x3fe62e42
 800ec80:	0ca86c39 	.word	0x0ca86c39
 800ec84:	be205c61 	.word	0xbe205c61
 800ec88:	72bea4d0 	.word	0x72bea4d0
 800ec8c:	3e663769 	.word	0x3e663769
 800ec90:	c5d26bf1 	.word	0xc5d26bf1
 800ec94:	3ebbbd41 	.word	0x3ebbbd41
 800ec98:	af25de2c 	.word	0xaf25de2c
 800ec9c:	3f11566a 	.word	0x3f11566a
 800eca0:	16bebd93 	.word	0x16bebd93
 800eca4:	3f66c16c 	.word	0x3f66c16c
 800eca8:	5555553e 	.word	0x5555553e
 800ecac:	3fc55555 	.word	0x3fc55555
 800ecb0:	3fe00000 	.word	0x3fe00000
 800ecb4:	fff00000 	.word	0xfff00000
 800ecb8:	3ff00000 	.word	0x3ff00000
 800ecbc:	4090cbff 	.word	0x4090cbff
 800ecc0:	3f6f3400 	.word	0x3f6f3400
 800ecc4:	652b82fe 	.word	0x652b82fe
 800ecc8:	3c971547 	.word	0x3c971547
 800eccc:	00000000 	.word	0x00000000

0800ecd0 <atan>:
 800ecd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecd4:	ec55 4b10 	vmov	r4, r5, d0
 800ecd8:	4bc3      	ldr	r3, [pc, #780]	; (800efe8 <atan+0x318>)
 800ecda:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ecde:	429e      	cmp	r6, r3
 800ece0:	46ab      	mov	fp, r5
 800ece2:	dd18      	ble.n	800ed16 <atan+0x46>
 800ece4:	4bc1      	ldr	r3, [pc, #772]	; (800efec <atan+0x31c>)
 800ece6:	429e      	cmp	r6, r3
 800ece8:	dc01      	bgt.n	800ecee <atan+0x1e>
 800ecea:	d109      	bne.n	800ed00 <atan+0x30>
 800ecec:	b144      	cbz	r4, 800ed00 <atan+0x30>
 800ecee:	4622      	mov	r2, r4
 800ecf0:	462b      	mov	r3, r5
 800ecf2:	4620      	mov	r0, r4
 800ecf4:	4629      	mov	r1, r5
 800ecf6:	f7f1 fae1 	bl	80002bc <__adddf3>
 800ecfa:	4604      	mov	r4, r0
 800ecfc:	460d      	mov	r5, r1
 800ecfe:	e006      	b.n	800ed0e <atan+0x3e>
 800ed00:	f1bb 0f00 	cmp.w	fp, #0
 800ed04:	f300 8131 	bgt.w	800ef6a <atan+0x29a>
 800ed08:	a59b      	add	r5, pc, #620	; (adr r5, 800ef78 <atan+0x2a8>)
 800ed0a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ed0e:	ec45 4b10 	vmov	d0, r4, r5
 800ed12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed16:	4bb6      	ldr	r3, [pc, #728]	; (800eff0 <atan+0x320>)
 800ed18:	429e      	cmp	r6, r3
 800ed1a:	dc14      	bgt.n	800ed46 <atan+0x76>
 800ed1c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800ed20:	429e      	cmp	r6, r3
 800ed22:	dc0d      	bgt.n	800ed40 <atan+0x70>
 800ed24:	a396      	add	r3, pc, #600	; (adr r3, 800ef80 <atan+0x2b0>)
 800ed26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed2a:	ee10 0a10 	vmov	r0, s0
 800ed2e:	4629      	mov	r1, r5
 800ed30:	f7f1 fac4 	bl	80002bc <__adddf3>
 800ed34:	4baf      	ldr	r3, [pc, #700]	; (800eff4 <atan+0x324>)
 800ed36:	2200      	movs	r2, #0
 800ed38:	f7f1 ff06 	bl	8000b48 <__aeabi_dcmpgt>
 800ed3c:	2800      	cmp	r0, #0
 800ed3e:	d1e6      	bne.n	800ed0e <atan+0x3e>
 800ed40:	f04f 3aff 	mov.w	sl, #4294967295
 800ed44:	e02b      	b.n	800ed9e <atan+0xce>
 800ed46:	f000 f963 	bl	800f010 <fabs>
 800ed4a:	4bab      	ldr	r3, [pc, #684]	; (800eff8 <atan+0x328>)
 800ed4c:	429e      	cmp	r6, r3
 800ed4e:	ec55 4b10 	vmov	r4, r5, d0
 800ed52:	f300 80bf 	bgt.w	800eed4 <atan+0x204>
 800ed56:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800ed5a:	429e      	cmp	r6, r3
 800ed5c:	f300 80a0 	bgt.w	800eea0 <atan+0x1d0>
 800ed60:	ee10 2a10 	vmov	r2, s0
 800ed64:	ee10 0a10 	vmov	r0, s0
 800ed68:	462b      	mov	r3, r5
 800ed6a:	4629      	mov	r1, r5
 800ed6c:	f7f1 faa6 	bl	80002bc <__adddf3>
 800ed70:	4ba0      	ldr	r3, [pc, #640]	; (800eff4 <atan+0x324>)
 800ed72:	2200      	movs	r2, #0
 800ed74:	f7f1 faa0 	bl	80002b8 <__aeabi_dsub>
 800ed78:	2200      	movs	r2, #0
 800ed7a:	4606      	mov	r6, r0
 800ed7c:	460f      	mov	r7, r1
 800ed7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ed82:	4620      	mov	r0, r4
 800ed84:	4629      	mov	r1, r5
 800ed86:	f7f1 fa99 	bl	80002bc <__adddf3>
 800ed8a:	4602      	mov	r2, r0
 800ed8c:	460b      	mov	r3, r1
 800ed8e:	4630      	mov	r0, r6
 800ed90:	4639      	mov	r1, r7
 800ed92:	f7f1 fd73 	bl	800087c <__aeabi_ddiv>
 800ed96:	f04f 0a00 	mov.w	sl, #0
 800ed9a:	4604      	mov	r4, r0
 800ed9c:	460d      	mov	r5, r1
 800ed9e:	4622      	mov	r2, r4
 800eda0:	462b      	mov	r3, r5
 800eda2:	4620      	mov	r0, r4
 800eda4:	4629      	mov	r1, r5
 800eda6:	f7f1 fc3f 	bl	8000628 <__aeabi_dmul>
 800edaa:	4602      	mov	r2, r0
 800edac:	460b      	mov	r3, r1
 800edae:	4680      	mov	r8, r0
 800edb0:	4689      	mov	r9, r1
 800edb2:	f7f1 fc39 	bl	8000628 <__aeabi_dmul>
 800edb6:	a374      	add	r3, pc, #464	; (adr r3, 800ef88 <atan+0x2b8>)
 800edb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edbc:	4606      	mov	r6, r0
 800edbe:	460f      	mov	r7, r1
 800edc0:	f7f1 fc32 	bl	8000628 <__aeabi_dmul>
 800edc4:	a372      	add	r3, pc, #456	; (adr r3, 800ef90 <atan+0x2c0>)
 800edc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edca:	f7f1 fa77 	bl	80002bc <__adddf3>
 800edce:	4632      	mov	r2, r6
 800edd0:	463b      	mov	r3, r7
 800edd2:	f7f1 fc29 	bl	8000628 <__aeabi_dmul>
 800edd6:	a370      	add	r3, pc, #448	; (adr r3, 800ef98 <atan+0x2c8>)
 800edd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eddc:	f7f1 fa6e 	bl	80002bc <__adddf3>
 800ede0:	4632      	mov	r2, r6
 800ede2:	463b      	mov	r3, r7
 800ede4:	f7f1 fc20 	bl	8000628 <__aeabi_dmul>
 800ede8:	a36d      	add	r3, pc, #436	; (adr r3, 800efa0 <atan+0x2d0>)
 800edea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edee:	f7f1 fa65 	bl	80002bc <__adddf3>
 800edf2:	4632      	mov	r2, r6
 800edf4:	463b      	mov	r3, r7
 800edf6:	f7f1 fc17 	bl	8000628 <__aeabi_dmul>
 800edfa:	a36b      	add	r3, pc, #428	; (adr r3, 800efa8 <atan+0x2d8>)
 800edfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee00:	f7f1 fa5c 	bl	80002bc <__adddf3>
 800ee04:	4632      	mov	r2, r6
 800ee06:	463b      	mov	r3, r7
 800ee08:	f7f1 fc0e 	bl	8000628 <__aeabi_dmul>
 800ee0c:	a368      	add	r3, pc, #416	; (adr r3, 800efb0 <atan+0x2e0>)
 800ee0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee12:	f7f1 fa53 	bl	80002bc <__adddf3>
 800ee16:	4642      	mov	r2, r8
 800ee18:	464b      	mov	r3, r9
 800ee1a:	f7f1 fc05 	bl	8000628 <__aeabi_dmul>
 800ee1e:	a366      	add	r3, pc, #408	; (adr r3, 800efb8 <atan+0x2e8>)
 800ee20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee24:	4680      	mov	r8, r0
 800ee26:	4689      	mov	r9, r1
 800ee28:	4630      	mov	r0, r6
 800ee2a:	4639      	mov	r1, r7
 800ee2c:	f7f1 fbfc 	bl	8000628 <__aeabi_dmul>
 800ee30:	a363      	add	r3, pc, #396	; (adr r3, 800efc0 <atan+0x2f0>)
 800ee32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee36:	f7f1 fa3f 	bl	80002b8 <__aeabi_dsub>
 800ee3a:	4632      	mov	r2, r6
 800ee3c:	463b      	mov	r3, r7
 800ee3e:	f7f1 fbf3 	bl	8000628 <__aeabi_dmul>
 800ee42:	a361      	add	r3, pc, #388	; (adr r3, 800efc8 <atan+0x2f8>)
 800ee44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee48:	f7f1 fa36 	bl	80002b8 <__aeabi_dsub>
 800ee4c:	4632      	mov	r2, r6
 800ee4e:	463b      	mov	r3, r7
 800ee50:	f7f1 fbea 	bl	8000628 <__aeabi_dmul>
 800ee54:	a35e      	add	r3, pc, #376	; (adr r3, 800efd0 <atan+0x300>)
 800ee56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee5a:	f7f1 fa2d 	bl	80002b8 <__aeabi_dsub>
 800ee5e:	4632      	mov	r2, r6
 800ee60:	463b      	mov	r3, r7
 800ee62:	f7f1 fbe1 	bl	8000628 <__aeabi_dmul>
 800ee66:	a35c      	add	r3, pc, #368	; (adr r3, 800efd8 <atan+0x308>)
 800ee68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee6c:	f7f1 fa24 	bl	80002b8 <__aeabi_dsub>
 800ee70:	4632      	mov	r2, r6
 800ee72:	463b      	mov	r3, r7
 800ee74:	f7f1 fbd8 	bl	8000628 <__aeabi_dmul>
 800ee78:	4602      	mov	r2, r0
 800ee7a:	460b      	mov	r3, r1
 800ee7c:	4640      	mov	r0, r8
 800ee7e:	4649      	mov	r1, r9
 800ee80:	f7f1 fa1c 	bl	80002bc <__adddf3>
 800ee84:	4622      	mov	r2, r4
 800ee86:	462b      	mov	r3, r5
 800ee88:	f7f1 fbce 	bl	8000628 <__aeabi_dmul>
 800ee8c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800ee90:	4602      	mov	r2, r0
 800ee92:	460b      	mov	r3, r1
 800ee94:	d14b      	bne.n	800ef2e <atan+0x25e>
 800ee96:	4620      	mov	r0, r4
 800ee98:	4629      	mov	r1, r5
 800ee9a:	f7f1 fa0d 	bl	80002b8 <__aeabi_dsub>
 800ee9e:	e72c      	b.n	800ecfa <atan+0x2a>
 800eea0:	ee10 0a10 	vmov	r0, s0
 800eea4:	4b53      	ldr	r3, [pc, #332]	; (800eff4 <atan+0x324>)
 800eea6:	2200      	movs	r2, #0
 800eea8:	4629      	mov	r1, r5
 800eeaa:	f7f1 fa05 	bl	80002b8 <__aeabi_dsub>
 800eeae:	4b51      	ldr	r3, [pc, #324]	; (800eff4 <atan+0x324>)
 800eeb0:	4606      	mov	r6, r0
 800eeb2:	460f      	mov	r7, r1
 800eeb4:	2200      	movs	r2, #0
 800eeb6:	4620      	mov	r0, r4
 800eeb8:	4629      	mov	r1, r5
 800eeba:	f7f1 f9ff 	bl	80002bc <__adddf3>
 800eebe:	4602      	mov	r2, r0
 800eec0:	460b      	mov	r3, r1
 800eec2:	4630      	mov	r0, r6
 800eec4:	4639      	mov	r1, r7
 800eec6:	f7f1 fcd9 	bl	800087c <__aeabi_ddiv>
 800eeca:	f04f 0a01 	mov.w	sl, #1
 800eece:	4604      	mov	r4, r0
 800eed0:	460d      	mov	r5, r1
 800eed2:	e764      	b.n	800ed9e <atan+0xce>
 800eed4:	4b49      	ldr	r3, [pc, #292]	; (800effc <atan+0x32c>)
 800eed6:	429e      	cmp	r6, r3
 800eed8:	da1d      	bge.n	800ef16 <atan+0x246>
 800eeda:	ee10 0a10 	vmov	r0, s0
 800eede:	4b48      	ldr	r3, [pc, #288]	; (800f000 <atan+0x330>)
 800eee0:	2200      	movs	r2, #0
 800eee2:	4629      	mov	r1, r5
 800eee4:	f7f1 f9e8 	bl	80002b8 <__aeabi_dsub>
 800eee8:	4b45      	ldr	r3, [pc, #276]	; (800f000 <atan+0x330>)
 800eeea:	4606      	mov	r6, r0
 800eeec:	460f      	mov	r7, r1
 800eeee:	2200      	movs	r2, #0
 800eef0:	4620      	mov	r0, r4
 800eef2:	4629      	mov	r1, r5
 800eef4:	f7f1 fb98 	bl	8000628 <__aeabi_dmul>
 800eef8:	4b3e      	ldr	r3, [pc, #248]	; (800eff4 <atan+0x324>)
 800eefa:	2200      	movs	r2, #0
 800eefc:	f7f1 f9de 	bl	80002bc <__adddf3>
 800ef00:	4602      	mov	r2, r0
 800ef02:	460b      	mov	r3, r1
 800ef04:	4630      	mov	r0, r6
 800ef06:	4639      	mov	r1, r7
 800ef08:	f7f1 fcb8 	bl	800087c <__aeabi_ddiv>
 800ef0c:	f04f 0a02 	mov.w	sl, #2
 800ef10:	4604      	mov	r4, r0
 800ef12:	460d      	mov	r5, r1
 800ef14:	e743      	b.n	800ed9e <atan+0xce>
 800ef16:	462b      	mov	r3, r5
 800ef18:	ee10 2a10 	vmov	r2, s0
 800ef1c:	4939      	ldr	r1, [pc, #228]	; (800f004 <atan+0x334>)
 800ef1e:	2000      	movs	r0, #0
 800ef20:	f7f1 fcac 	bl	800087c <__aeabi_ddiv>
 800ef24:	f04f 0a03 	mov.w	sl, #3
 800ef28:	4604      	mov	r4, r0
 800ef2a:	460d      	mov	r5, r1
 800ef2c:	e737      	b.n	800ed9e <atan+0xce>
 800ef2e:	4b36      	ldr	r3, [pc, #216]	; (800f008 <atan+0x338>)
 800ef30:	4e36      	ldr	r6, [pc, #216]	; (800f00c <atan+0x33c>)
 800ef32:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ef36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef3a:	f7f1 f9bd 	bl	80002b8 <__aeabi_dsub>
 800ef3e:	4622      	mov	r2, r4
 800ef40:	462b      	mov	r3, r5
 800ef42:	f7f1 f9b9 	bl	80002b8 <__aeabi_dsub>
 800ef46:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800ef4a:	4602      	mov	r2, r0
 800ef4c:	460b      	mov	r3, r1
 800ef4e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800ef52:	f7f1 f9b1 	bl	80002b8 <__aeabi_dsub>
 800ef56:	f1bb 0f00 	cmp.w	fp, #0
 800ef5a:	4604      	mov	r4, r0
 800ef5c:	460d      	mov	r5, r1
 800ef5e:	f6bf aed6 	bge.w	800ed0e <atan+0x3e>
 800ef62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ef66:	461d      	mov	r5, r3
 800ef68:	e6d1      	b.n	800ed0e <atan+0x3e>
 800ef6a:	a51d      	add	r5, pc, #116	; (adr r5, 800efe0 <atan+0x310>)
 800ef6c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ef70:	e6cd      	b.n	800ed0e <atan+0x3e>
 800ef72:	bf00      	nop
 800ef74:	f3af 8000 	nop.w
 800ef78:	54442d18 	.word	0x54442d18
 800ef7c:	bff921fb 	.word	0xbff921fb
 800ef80:	8800759c 	.word	0x8800759c
 800ef84:	7e37e43c 	.word	0x7e37e43c
 800ef88:	e322da11 	.word	0xe322da11
 800ef8c:	3f90ad3a 	.word	0x3f90ad3a
 800ef90:	24760deb 	.word	0x24760deb
 800ef94:	3fa97b4b 	.word	0x3fa97b4b
 800ef98:	a0d03d51 	.word	0xa0d03d51
 800ef9c:	3fb10d66 	.word	0x3fb10d66
 800efa0:	c54c206e 	.word	0xc54c206e
 800efa4:	3fb745cd 	.word	0x3fb745cd
 800efa8:	920083ff 	.word	0x920083ff
 800efac:	3fc24924 	.word	0x3fc24924
 800efb0:	5555550d 	.word	0x5555550d
 800efb4:	3fd55555 	.word	0x3fd55555
 800efb8:	2c6a6c2f 	.word	0x2c6a6c2f
 800efbc:	bfa2b444 	.word	0xbfa2b444
 800efc0:	52defd9a 	.word	0x52defd9a
 800efc4:	3fadde2d 	.word	0x3fadde2d
 800efc8:	af749a6d 	.word	0xaf749a6d
 800efcc:	3fb3b0f2 	.word	0x3fb3b0f2
 800efd0:	fe231671 	.word	0xfe231671
 800efd4:	3fbc71c6 	.word	0x3fbc71c6
 800efd8:	9998ebc4 	.word	0x9998ebc4
 800efdc:	3fc99999 	.word	0x3fc99999
 800efe0:	54442d18 	.word	0x54442d18
 800efe4:	3ff921fb 	.word	0x3ff921fb
 800efe8:	440fffff 	.word	0x440fffff
 800efec:	7ff00000 	.word	0x7ff00000
 800eff0:	3fdbffff 	.word	0x3fdbffff
 800eff4:	3ff00000 	.word	0x3ff00000
 800eff8:	3ff2ffff 	.word	0x3ff2ffff
 800effc:	40038000 	.word	0x40038000
 800f000:	3ff80000 	.word	0x3ff80000
 800f004:	bff00000 	.word	0xbff00000
 800f008:	0800f490 	.word	0x0800f490
 800f00c:	0800f470 	.word	0x0800f470

0800f010 <fabs>:
 800f010:	ec51 0b10 	vmov	r0, r1, d0
 800f014:	ee10 2a10 	vmov	r2, s0
 800f018:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f01c:	ec43 2b10 	vmov	d0, r2, r3
 800f020:	4770      	bx	lr
 800f022:	0000      	movs	r0, r0
 800f024:	0000      	movs	r0, r0
	...

0800f028 <scalbn>:
 800f028:	b570      	push	{r4, r5, r6, lr}
 800f02a:	ec55 4b10 	vmov	r4, r5, d0
 800f02e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800f032:	4606      	mov	r6, r0
 800f034:	462b      	mov	r3, r5
 800f036:	b999      	cbnz	r1, 800f060 <scalbn+0x38>
 800f038:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f03c:	4323      	orrs	r3, r4
 800f03e:	d03f      	beq.n	800f0c0 <scalbn+0x98>
 800f040:	4b35      	ldr	r3, [pc, #212]	; (800f118 <scalbn+0xf0>)
 800f042:	4629      	mov	r1, r5
 800f044:	ee10 0a10 	vmov	r0, s0
 800f048:	2200      	movs	r2, #0
 800f04a:	f7f1 faed 	bl	8000628 <__aeabi_dmul>
 800f04e:	4b33      	ldr	r3, [pc, #204]	; (800f11c <scalbn+0xf4>)
 800f050:	429e      	cmp	r6, r3
 800f052:	4604      	mov	r4, r0
 800f054:	460d      	mov	r5, r1
 800f056:	da10      	bge.n	800f07a <scalbn+0x52>
 800f058:	a327      	add	r3, pc, #156	; (adr r3, 800f0f8 <scalbn+0xd0>)
 800f05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f05e:	e01f      	b.n	800f0a0 <scalbn+0x78>
 800f060:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800f064:	4291      	cmp	r1, r2
 800f066:	d10c      	bne.n	800f082 <scalbn+0x5a>
 800f068:	ee10 2a10 	vmov	r2, s0
 800f06c:	4620      	mov	r0, r4
 800f06e:	4629      	mov	r1, r5
 800f070:	f7f1 f924 	bl	80002bc <__adddf3>
 800f074:	4604      	mov	r4, r0
 800f076:	460d      	mov	r5, r1
 800f078:	e022      	b.n	800f0c0 <scalbn+0x98>
 800f07a:	460b      	mov	r3, r1
 800f07c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f080:	3936      	subs	r1, #54	; 0x36
 800f082:	f24c 3250 	movw	r2, #50000	; 0xc350
 800f086:	4296      	cmp	r6, r2
 800f088:	dd0d      	ble.n	800f0a6 <scalbn+0x7e>
 800f08a:	2d00      	cmp	r5, #0
 800f08c:	a11c      	add	r1, pc, #112	; (adr r1, 800f100 <scalbn+0xd8>)
 800f08e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f092:	da02      	bge.n	800f09a <scalbn+0x72>
 800f094:	a11c      	add	r1, pc, #112	; (adr r1, 800f108 <scalbn+0xe0>)
 800f096:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f09a:	a319      	add	r3, pc, #100	; (adr r3, 800f100 <scalbn+0xd8>)
 800f09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0a0:	f7f1 fac2 	bl	8000628 <__aeabi_dmul>
 800f0a4:	e7e6      	b.n	800f074 <scalbn+0x4c>
 800f0a6:	1872      	adds	r2, r6, r1
 800f0a8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f0ac:	428a      	cmp	r2, r1
 800f0ae:	dcec      	bgt.n	800f08a <scalbn+0x62>
 800f0b0:	2a00      	cmp	r2, #0
 800f0b2:	dd08      	ble.n	800f0c6 <scalbn+0x9e>
 800f0b4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f0b8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f0bc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f0c0:	ec45 4b10 	vmov	d0, r4, r5
 800f0c4:	bd70      	pop	{r4, r5, r6, pc}
 800f0c6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f0ca:	da08      	bge.n	800f0de <scalbn+0xb6>
 800f0cc:	2d00      	cmp	r5, #0
 800f0ce:	a10a      	add	r1, pc, #40	; (adr r1, 800f0f8 <scalbn+0xd0>)
 800f0d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f0d4:	dac0      	bge.n	800f058 <scalbn+0x30>
 800f0d6:	a10e      	add	r1, pc, #56	; (adr r1, 800f110 <scalbn+0xe8>)
 800f0d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f0dc:	e7bc      	b.n	800f058 <scalbn+0x30>
 800f0de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f0e2:	3236      	adds	r2, #54	; 0x36
 800f0e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f0e8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f0ec:	4620      	mov	r0, r4
 800f0ee:	4b0c      	ldr	r3, [pc, #48]	; (800f120 <scalbn+0xf8>)
 800f0f0:	2200      	movs	r2, #0
 800f0f2:	e7d5      	b.n	800f0a0 <scalbn+0x78>
 800f0f4:	f3af 8000 	nop.w
 800f0f8:	c2f8f359 	.word	0xc2f8f359
 800f0fc:	01a56e1f 	.word	0x01a56e1f
 800f100:	8800759c 	.word	0x8800759c
 800f104:	7e37e43c 	.word	0x7e37e43c
 800f108:	8800759c 	.word	0x8800759c
 800f10c:	fe37e43c 	.word	0xfe37e43c
 800f110:	c2f8f359 	.word	0xc2f8f359
 800f114:	81a56e1f 	.word	0x81a56e1f
 800f118:	43500000 	.word	0x43500000
 800f11c:	ffff3cb0 	.word	0xffff3cb0
 800f120:	3c900000 	.word	0x3c900000

0800f124 <with_errno>:
 800f124:	b570      	push	{r4, r5, r6, lr}
 800f126:	4604      	mov	r4, r0
 800f128:	460d      	mov	r5, r1
 800f12a:	4616      	mov	r6, r2
 800f12c:	f7fe fae0 	bl	800d6f0 <__errno>
 800f130:	4629      	mov	r1, r5
 800f132:	6006      	str	r6, [r0, #0]
 800f134:	4620      	mov	r0, r4
 800f136:	bd70      	pop	{r4, r5, r6, pc}

0800f138 <xflow>:
 800f138:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f13a:	4614      	mov	r4, r2
 800f13c:	461d      	mov	r5, r3
 800f13e:	b108      	cbz	r0, 800f144 <xflow+0xc>
 800f140:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f144:	e9cd 2300 	strd	r2, r3, [sp]
 800f148:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f14c:	4620      	mov	r0, r4
 800f14e:	4629      	mov	r1, r5
 800f150:	f7f1 fa6a 	bl	8000628 <__aeabi_dmul>
 800f154:	2222      	movs	r2, #34	; 0x22
 800f156:	b003      	add	sp, #12
 800f158:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f15c:	f7ff bfe2 	b.w	800f124 <with_errno>

0800f160 <__math_uflow>:
 800f160:	b508      	push	{r3, lr}
 800f162:	2200      	movs	r2, #0
 800f164:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f168:	f7ff ffe6 	bl	800f138 <xflow>
 800f16c:	ec41 0b10 	vmov	d0, r0, r1
 800f170:	bd08      	pop	{r3, pc}

0800f172 <__math_oflow>:
 800f172:	b508      	push	{r3, lr}
 800f174:	2200      	movs	r2, #0
 800f176:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800f17a:	f7ff ffdd 	bl	800f138 <xflow>
 800f17e:	ec41 0b10 	vmov	d0, r0, r1
 800f182:	bd08      	pop	{r3, pc}

0800f184 <__ieee754_sqrt>:
 800f184:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f188:	ec55 4b10 	vmov	r4, r5, d0
 800f18c:	4e67      	ldr	r6, [pc, #412]	; (800f32c <__ieee754_sqrt+0x1a8>)
 800f18e:	43ae      	bics	r6, r5
 800f190:	ee10 0a10 	vmov	r0, s0
 800f194:	ee10 2a10 	vmov	r2, s0
 800f198:	4629      	mov	r1, r5
 800f19a:	462b      	mov	r3, r5
 800f19c:	d10d      	bne.n	800f1ba <__ieee754_sqrt+0x36>
 800f19e:	f7f1 fa43 	bl	8000628 <__aeabi_dmul>
 800f1a2:	4602      	mov	r2, r0
 800f1a4:	460b      	mov	r3, r1
 800f1a6:	4620      	mov	r0, r4
 800f1a8:	4629      	mov	r1, r5
 800f1aa:	f7f1 f887 	bl	80002bc <__adddf3>
 800f1ae:	4604      	mov	r4, r0
 800f1b0:	460d      	mov	r5, r1
 800f1b2:	ec45 4b10 	vmov	d0, r4, r5
 800f1b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1ba:	2d00      	cmp	r5, #0
 800f1bc:	dc0b      	bgt.n	800f1d6 <__ieee754_sqrt+0x52>
 800f1be:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f1c2:	4326      	orrs	r6, r4
 800f1c4:	d0f5      	beq.n	800f1b2 <__ieee754_sqrt+0x2e>
 800f1c6:	b135      	cbz	r5, 800f1d6 <__ieee754_sqrt+0x52>
 800f1c8:	f7f1 f876 	bl	80002b8 <__aeabi_dsub>
 800f1cc:	4602      	mov	r2, r0
 800f1ce:	460b      	mov	r3, r1
 800f1d0:	f7f1 fb54 	bl	800087c <__aeabi_ddiv>
 800f1d4:	e7eb      	b.n	800f1ae <__ieee754_sqrt+0x2a>
 800f1d6:	1509      	asrs	r1, r1, #20
 800f1d8:	f000 808d 	beq.w	800f2f6 <__ieee754_sqrt+0x172>
 800f1dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f1e0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800f1e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f1e8:	07c9      	lsls	r1, r1, #31
 800f1ea:	bf5c      	itt	pl
 800f1ec:	005b      	lslpl	r3, r3, #1
 800f1ee:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800f1f2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f1f6:	bf58      	it	pl
 800f1f8:	0052      	lslpl	r2, r2, #1
 800f1fa:	2500      	movs	r5, #0
 800f1fc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f200:	1076      	asrs	r6, r6, #1
 800f202:	0052      	lsls	r2, r2, #1
 800f204:	f04f 0e16 	mov.w	lr, #22
 800f208:	46ac      	mov	ip, r5
 800f20a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f20e:	eb0c 0001 	add.w	r0, ip, r1
 800f212:	4298      	cmp	r0, r3
 800f214:	bfde      	ittt	le
 800f216:	1a1b      	suble	r3, r3, r0
 800f218:	eb00 0c01 	addle.w	ip, r0, r1
 800f21c:	186d      	addle	r5, r5, r1
 800f21e:	005b      	lsls	r3, r3, #1
 800f220:	f1be 0e01 	subs.w	lr, lr, #1
 800f224:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f228:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800f22c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800f230:	d1ed      	bne.n	800f20e <__ieee754_sqrt+0x8a>
 800f232:	4674      	mov	r4, lr
 800f234:	2720      	movs	r7, #32
 800f236:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800f23a:	4563      	cmp	r3, ip
 800f23c:	eb01 000e 	add.w	r0, r1, lr
 800f240:	dc02      	bgt.n	800f248 <__ieee754_sqrt+0xc4>
 800f242:	d113      	bne.n	800f26c <__ieee754_sqrt+0xe8>
 800f244:	4290      	cmp	r0, r2
 800f246:	d811      	bhi.n	800f26c <__ieee754_sqrt+0xe8>
 800f248:	2800      	cmp	r0, #0
 800f24a:	eb00 0e01 	add.w	lr, r0, r1
 800f24e:	da57      	bge.n	800f300 <__ieee754_sqrt+0x17c>
 800f250:	f1be 0f00 	cmp.w	lr, #0
 800f254:	db54      	blt.n	800f300 <__ieee754_sqrt+0x17c>
 800f256:	f10c 0801 	add.w	r8, ip, #1
 800f25a:	eba3 030c 	sub.w	r3, r3, ip
 800f25e:	4290      	cmp	r0, r2
 800f260:	bf88      	it	hi
 800f262:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800f266:	1a12      	subs	r2, r2, r0
 800f268:	440c      	add	r4, r1
 800f26a:	46c4      	mov	ip, r8
 800f26c:	005b      	lsls	r3, r3, #1
 800f26e:	3f01      	subs	r7, #1
 800f270:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f274:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800f278:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800f27c:	d1dd      	bne.n	800f23a <__ieee754_sqrt+0xb6>
 800f27e:	4313      	orrs	r3, r2
 800f280:	d01b      	beq.n	800f2ba <__ieee754_sqrt+0x136>
 800f282:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800f330 <__ieee754_sqrt+0x1ac>
 800f286:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800f334 <__ieee754_sqrt+0x1b0>
 800f28a:	e9da 0100 	ldrd	r0, r1, [sl]
 800f28e:	e9db 2300 	ldrd	r2, r3, [fp]
 800f292:	f7f1 f811 	bl	80002b8 <__aeabi_dsub>
 800f296:	e9da 8900 	ldrd	r8, r9, [sl]
 800f29a:	4602      	mov	r2, r0
 800f29c:	460b      	mov	r3, r1
 800f29e:	4640      	mov	r0, r8
 800f2a0:	4649      	mov	r1, r9
 800f2a2:	f7f1 fc3d 	bl	8000b20 <__aeabi_dcmple>
 800f2a6:	b140      	cbz	r0, 800f2ba <__ieee754_sqrt+0x136>
 800f2a8:	f1b4 3fff 	cmp.w	r4, #4294967295
 800f2ac:	e9da 0100 	ldrd	r0, r1, [sl]
 800f2b0:	e9db 2300 	ldrd	r2, r3, [fp]
 800f2b4:	d126      	bne.n	800f304 <__ieee754_sqrt+0x180>
 800f2b6:	3501      	adds	r5, #1
 800f2b8:	463c      	mov	r4, r7
 800f2ba:	106a      	asrs	r2, r5, #1
 800f2bc:	0863      	lsrs	r3, r4, #1
 800f2be:	07e9      	lsls	r1, r5, #31
 800f2c0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800f2c4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800f2c8:	bf48      	it	mi
 800f2ca:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800f2ce:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800f2d2:	461c      	mov	r4, r3
 800f2d4:	e76d      	b.n	800f1b2 <__ieee754_sqrt+0x2e>
 800f2d6:	0ad3      	lsrs	r3, r2, #11
 800f2d8:	3815      	subs	r0, #21
 800f2da:	0552      	lsls	r2, r2, #21
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d0fa      	beq.n	800f2d6 <__ieee754_sqrt+0x152>
 800f2e0:	02dc      	lsls	r4, r3, #11
 800f2e2:	d50a      	bpl.n	800f2fa <__ieee754_sqrt+0x176>
 800f2e4:	f1c1 0420 	rsb	r4, r1, #32
 800f2e8:	fa22 f404 	lsr.w	r4, r2, r4
 800f2ec:	1e4d      	subs	r5, r1, #1
 800f2ee:	408a      	lsls	r2, r1
 800f2f0:	4323      	orrs	r3, r4
 800f2f2:	1b41      	subs	r1, r0, r5
 800f2f4:	e772      	b.n	800f1dc <__ieee754_sqrt+0x58>
 800f2f6:	4608      	mov	r0, r1
 800f2f8:	e7f0      	b.n	800f2dc <__ieee754_sqrt+0x158>
 800f2fa:	005b      	lsls	r3, r3, #1
 800f2fc:	3101      	adds	r1, #1
 800f2fe:	e7ef      	b.n	800f2e0 <__ieee754_sqrt+0x15c>
 800f300:	46e0      	mov	r8, ip
 800f302:	e7aa      	b.n	800f25a <__ieee754_sqrt+0xd6>
 800f304:	f7f0 ffda 	bl	80002bc <__adddf3>
 800f308:	e9da 8900 	ldrd	r8, r9, [sl]
 800f30c:	4602      	mov	r2, r0
 800f30e:	460b      	mov	r3, r1
 800f310:	4640      	mov	r0, r8
 800f312:	4649      	mov	r1, r9
 800f314:	f7f1 fbfa 	bl	8000b0c <__aeabi_dcmplt>
 800f318:	b120      	cbz	r0, 800f324 <__ieee754_sqrt+0x1a0>
 800f31a:	1ca0      	adds	r0, r4, #2
 800f31c:	bf08      	it	eq
 800f31e:	3501      	addeq	r5, #1
 800f320:	3402      	adds	r4, #2
 800f322:	e7ca      	b.n	800f2ba <__ieee754_sqrt+0x136>
 800f324:	3401      	adds	r4, #1
 800f326:	f024 0401 	bic.w	r4, r4, #1
 800f32a:	e7c6      	b.n	800f2ba <__ieee754_sqrt+0x136>
 800f32c:	7ff00000 	.word	0x7ff00000
 800f330:	200000a0 	.word	0x200000a0
 800f334:	200000a8 	.word	0x200000a8

0800f338 <_init>:
 800f338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f33a:	bf00      	nop
 800f33c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f33e:	bc08      	pop	{r3}
 800f340:	469e      	mov	lr, r3
 800f342:	4770      	bx	lr

0800f344 <_fini>:
 800f344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f346:	bf00      	nop
 800f348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f34a:	bc08      	pop	{r3}
 800f34c:	469e      	mov	lr, r3
 800f34e:	4770      	bx	lr
